var dg=Object.defineProperty;var fg=(We,Be,Ke)=>Be in We?dg(We,Be,{enumerable:!0,configurable:!0,writable:!0,value:Ke}):We[Be]=Ke;var p=(We,Be,Ke)=>(fg(We,typeof Be!="symbol"?Be+"":Be,Ke),Ke);(function(){"use strict";var We=(r=>(r.INIT="init",r.HANDLE_MSG="handle_msg",r.REMOVE_CLIENT="remove_client",r))(We||{}),Be=(r=>(r.INIT_ACK="init_ack",r.RESP="resp",r.CLOSE="close",r))(Be||{}),Ke=typeof globalThis<"u"?globalThis:typeof window<"u"?window:typeof global<"u"?global:typeof self<"u"?self:{};function dl(r){return r&&r.__esModule&&Object.prototype.hasOwnProperty.call(r,"default")?r.default:r}function Br(r){throw new Error('Could not dynamically require "'+r+'". Please configure the dynamicRequireTargets or/and ignoreDynamicRequires option of @rollup/plugin-commonjs appropriately for this require call to work.')}var Ya={exports:{}};/*!
    localForage -- Offline Storage, Improved
    Version 1.10.0
    https://localforage.github.io/localForage
    (c) 2013-2017 Mozilla, Apache License 2.0
*/(function(r,e){(function(t){r.exports=t()})(function(){return function t(s,a,n){function o(u,c){if(!a[u]){if(!s[u]){var d=typeof Br=="function"&&Br;if(!c&&d)return d(u,!0);if(l)return l(u,!0);var g=new Error("Cannot find module '"+u+"'");throw g.code="MODULE_NOT_FOUND",g}var w=a[u]={exports:{}};s[u][0].call(w.exports,function(y){var A=s[u][1][y];return o(A||y)},w,w.exports,t,s,a,n)}return a[u].exports}for(var l=typeof Br=="function"&&Br,i=0;i<n.length;i++)o(n[i]);return o}({1:[function(t,s,a){(function(n){var o=n.MutationObserver||n.WebKitMutationObserver,l;if(o){var i=0,u=new o(y),c=n.document.createTextNode("");u.observe(c,{characterData:!0}),l=function(){c.data=i=++i%2}}else if(!n.setImmediate&&typeof n.MessageChannel<"u"){var d=new n.MessageChannel;d.port1.onmessage=y,l=function(){d.port2.postMessage(0)}}else"document"in n&&"onreadystatechange"in n.document.createElement("script")?l=function(){var S=n.document.createElement("script");S.onreadystatechange=function(){y(),S.onreadystatechange=null,S.parentNode.removeChild(S),S=null},n.document.documentElement.appendChild(S)}:l=function(){setTimeout(y,0)};var g,w=[];function y(){g=!0;for(var S,O,k=w.length;k;){for(O=w,w=[],S=-1;++S<k;)O[S]();k=w.length}g=!1}s.exports=A;function A(S){w.push(S)===1&&!g&&l()}}).call(this,typeof Ke<"u"?Ke:typeof self<"u"?self:typeof window<"u"?window:{})},{}],2:[function(t,s,a){var n=t(1);function o(){}var l={},i=["REJECTED"],u=["FULFILLED"],c=["PENDING"];s.exports=d;function d(U){if(typeof U!="function")throw new TypeError("resolver must be a function");this.state=c,this.queue=[],this.outcome=void 0,U!==o&&A(this,U)}d.prototype.catch=function(U){return this.then(null,U)},d.prototype.then=function(U,Q){if(typeof U!="function"&&this.state===u||typeof Q!="function"&&this.state===i)return this;var F=new this.constructor(o);if(this.state!==c){var j=this.state===u?U:Q;w(F,j,this.outcome)}else this.queue.push(new g(F,U,Q));return F};function g(U,Q,F){this.promise=U,typeof Q=="function"&&(this.onFulfilled=Q,this.callFulfilled=this.otherCallFulfilled),typeof F=="function"&&(this.onRejected=F,this.callRejected=this.otherCallRejected)}g.prototype.callFulfilled=function(U){l.resolve(this.promise,U)},g.prototype.otherCallFulfilled=function(U){w(this.promise,this.onFulfilled,U)},g.prototype.callRejected=function(U){l.reject(this.promise,U)},g.prototype.otherCallRejected=function(U){w(this.promise,this.onRejected,U)};function w(U,Q,F){n(function(){var j;try{j=Q(F)}catch(V){return l.reject(U,V)}j===U?l.reject(U,new TypeError("Cannot resolve promise with itself")):l.resolve(U,j)})}l.resolve=function(U,Q){var F=S(y,Q);if(F.status==="error")return l.reject(U,F.value);var j=F.value;if(j)A(U,j);else{U.state=u,U.outcome=Q;for(var V=-1,ae=U.queue.length;++V<ae;)U.queue[V].callFulfilled(Q)}return U},l.reject=function(U,Q){U.state=i,U.outcome=Q;for(var F=-1,j=U.queue.length;++F<j;)U.queue[F].callRejected(Q);return U};function y(U){var Q=U&&U.then;if(U&&(typeof U=="object"||typeof U=="function")&&typeof Q=="function")return function(){Q.apply(U,arguments)}}function A(U,Q){var F=!1;function j(oe){F||(F=!0,l.reject(U,oe))}function V(oe){F||(F=!0,l.resolve(U,oe))}function ae(){Q(V,j)}var ie=S(ae);ie.status==="error"&&j(ie.value)}function S(U,Q){var F={};try{F.value=U(Q),F.status="success"}catch(j){F.status="error",F.value=j}return F}d.resolve=O;function O(U){return U instanceof this?U:l.resolve(new this(o),U)}d.reject=k;function k(U){var Q=new this(o);return l.reject(Q,U)}d.all=P;function P(U){var Q=this;if(Object.prototype.toString.call(U)!=="[object Array]")return this.reject(new TypeError("must be an array"));var F=U.length,j=!1;if(!F)return this.resolve([]);for(var V=new Array(F),ae=0,ie=-1,oe=new this(o);++ie<F;)Pe(U[ie],ie);return oe;function Pe(Qe,at){Q.resolve(Qe).then(rr,function(gt){j||(j=!0,l.reject(oe,gt))});function rr(gt){V[at]=gt,++ae===F&&!j&&(j=!0,l.resolve(oe,V))}}}d.race=N;function N(U){var Q=this;if(Object.prototype.toString.call(U)!=="[object Array]")return this.reject(new TypeError("must be an array"));var F=U.length,j=!1;if(!F)return this.resolve([]);for(var V=-1,ae=new this(o);++V<F;)ie(U[V]);return ae;function ie(oe){Q.resolve(oe).then(function(Pe){j||(j=!0,l.resolve(ae,Pe))},function(Pe){j||(j=!0,l.reject(ae,Pe))})}}},{1:1}],3:[function(t,s,a){(function(n){typeof n.Promise!="function"&&(n.Promise=t(2))}).call(this,typeof Ke<"u"?Ke:typeof self<"u"?self:typeof window<"u"?window:{})},{2:2}],4:[function(t,s,a){var n=typeof Symbol=="function"&&typeof Symbol.iterator=="symbol"?function(m){return typeof m}:function(m){return m&&typeof Symbol=="function"&&m.constructor===Symbol&&m!==Symbol.prototype?"symbol":typeof m};function o(m,b){if(!(m instanceof b))throw new TypeError("Cannot call a class as a function")}function l(){try{if(typeof indexedDB<"u")return indexedDB;if(typeof webkitIndexedDB<"u")return webkitIndexedDB;if(typeof mozIndexedDB<"u")return mozIndexedDB;if(typeof OIndexedDB<"u")return OIndexedDB;if(typeof msIndexedDB<"u")return msIndexedDB}catch{return}}var i=l();function u(){try{if(!i||!i.open)return!1;var m=typeof openDatabase<"u"&&/(Safari|iPhone|iPad|iPod)/.test(navigator.userAgent)&&!/Chrome/.test(navigator.userAgent)&&!/BlackBerry/.test(navigator.platform),b=typeof fetch=="function"&&fetch.toString().indexOf("[native code")!==-1;return(!m||b)&&typeof indexedDB<"u"&&typeof IDBKeyRange<"u"}catch{return!1}}function c(m,b){m=m||[],b=b||{};try{return new Blob(m,b)}catch(_){if(_.name!=="TypeError")throw _;for(var h=typeof BlobBuilder<"u"?BlobBuilder:typeof MSBlobBuilder<"u"?MSBlobBuilder:typeof MozBlobBuilder<"u"?MozBlobBuilder:WebKitBlobBuilder,T=new h,v=0;v<m.length;v+=1)T.append(m[v]);return T.getBlob(b.type)}}typeof Promise>"u"&&t(3);var d=Promise;function g(m,b){b&&m.then(function(h){b(null,h)},function(h){b(h)})}function w(m,b,h){typeof b=="function"&&m.then(b),typeof h=="function"&&m.catch(h)}function y(m){return typeof m!="string"&&(console.warn(m+" used as a key, but it is not a string."),m=String(m)),m}function A(){if(arguments.length&&typeof arguments[arguments.length-1]=="function")return arguments[arguments.length-1]}var S="local-forage-detect-blob-support",O=void 0,k={},P=Object.prototype.toString,N="readonly",U="readwrite";function Q(m){for(var b=m.length,h=new ArrayBuffer(b),T=new Uint8Array(h),v=0;v<b;v++)T[v]=m.charCodeAt(v);return h}function F(m){return new d(function(b){var h=m.transaction(S,U),T=c([""]);h.objectStore(S).put(T,"key"),h.onabort=function(v){v.preventDefault(),v.stopPropagation(),b(!1)},h.oncomplete=function(){var v=navigator.userAgent.match(/Chrome\/(\d+)/),_=navigator.userAgent.match(/Edge\//);b(_||!v||parseInt(v[1],10)>=43)}}).catch(function(){return!1})}function j(m){return typeof O=="boolean"?d.resolve(O):F(m).then(function(b){return O=b,O})}function V(m){var b=k[m.name],h={};h.promise=new d(function(T,v){h.resolve=T,h.reject=v}),b.deferredOperations.push(h),b.dbReady?b.dbReady=b.dbReady.then(function(){return h.promise}):b.dbReady=h.promise}function ae(m){var b=k[m.name],h=b.deferredOperations.pop();if(h)return h.resolve(),h.promise}function ie(m,b){var h=k[m.name],T=h.deferredOperations.pop();if(T)return T.reject(b),T.promise}function oe(m,b){return new d(function(h,T){if(k[m.name]=k[m.name]||Vo(),m.db)if(b)V(m),m.db.close();else return h(m.db);var v=[m.name];b&&v.push(m.version);var _=i.open.apply(i,v);b&&(_.onupgradeneeded=function(G){var M=_.result;try{M.createObjectStore(m.storeName),G.oldVersion<=1&&M.createObjectStore(S)}catch(L){if(L.name==="ConstraintError")console.warn('The database "'+m.name+'" has been upgraded from version '+G.oldVersion+" to version "+G.newVersion+', but the storage "'+m.storeName+'" already exists.');else throw L}}),_.onerror=function(G){G.preventDefault(),T(_.error)},_.onsuccess=function(){var G=_.result;G.onversionchange=function(M){M.target.close()},h(G),ae(m)}})}function Pe(m){return oe(m,!1)}function Qe(m){return oe(m,!0)}function at(m,b){if(!m.db)return!0;var h=!m.db.objectStoreNames.contains(m.storeName),T=m.version<m.db.version,v=m.version>m.db.version;if(T&&(m.version!==b&&console.warn('The database "'+m.name+`" can't be downgraded from version `+m.db.version+" to version "+m.version+"."),m.version=m.db.version),v||h){if(h){var _=m.db.version+1;_>m.version&&(m.version=_)}return!0}return!1}function rr(m){return new d(function(b,h){var T=new FileReader;T.onerror=h,T.onloadend=function(v){var _=btoa(v.target.result||"");b({__local_forage_encoded_blob:!0,data:_,type:m.type})},T.readAsBinaryString(m)})}function gt(m){var b=Q(atob(m.data));return c([b],{type:m.type})}function Ss(m){return m&&m.__local_forage_encoded_blob}function fp(m){var b=this,h=b._initReady().then(function(){var T=k[b._dbInfo.name];if(T&&T.dbReady)return T.dbReady});return w(h,m,m),h}function mp(m){V(m);for(var b=k[m.name],h=b.forages,T=0;T<h.length;T++){var v=h[T];v._dbInfo.db&&(v._dbInfo.db.close(),v._dbInfo.db=null)}return m.db=null,Pe(m).then(function(_){return m.db=_,at(m)?Qe(m):_}).then(function(_){m.db=b.db=_;for(var G=0;G<h.length;G++)h[G]._dbInfo.db=_}).catch(function(_){throw ie(m,_),_})}function nt(m,b,h,T){T===void 0&&(T=1);try{var v=m.db.transaction(m.storeName,b);h(null,v)}catch(_){if(T>0&&(!m.db||_.name==="InvalidStateError"||_.name==="NotFoundError"))return d.resolve().then(function(){if(!m.db||_.name==="NotFoundError"&&!m.db.objectStoreNames.contains(m.storeName)&&m.version<=m.db.version)return m.db&&(m.version=m.db.version+1),Qe(m)}).then(function(){return mp(m).then(function(){nt(m,b,h,T-1)})}).catch(h);h(_)}}function Vo(){return{forages:[],db:null,dbReady:null,deferredOperations:[]}}function hp(m){var b=this,h={db:null};if(m)for(var T in m)h[T]=m[T];var v=k[h.name];v||(v=Vo(),k[h.name]=v),v.forages.push(b),b._initReady||(b._initReady=b.ready,b.ready=fp);var _=[];function G(){return d.resolve()}for(var M=0;M<v.forages.length;M++){var L=v.forages[M];L!==b&&_.push(L._initReady().catch(G))}var B=v.forages.slice(0);return d.all(_).then(function(){return h.db=v.db,Pe(h)}).then(function(Y){return h.db=Y,at(h,b._defaultConfig.version)?Qe(h):Y}).then(function(Y){h.db=v.db=Y,b._dbInfo=h;for(var X=0;X<B.length;X++){var ce=B[X];ce!==b&&(ce._dbInfo.db=h.db,ce._dbInfo.version=h.version)}})}function pp(m,b){var h=this;m=y(m);var T=new d(function(v,_){h.ready().then(function(){nt(h._dbInfo,N,function(G,M){if(G)return _(G);try{var L=M.objectStore(h._dbInfo.storeName),B=L.get(m);B.onsuccess=function(){var Y=B.result;Y===void 0&&(Y=null),Ss(Y)&&(Y=gt(Y)),v(Y)},B.onerror=function(){_(B.error)}}catch(Y){_(Y)}})}).catch(_)});return g(T,b),T}function gp(m,b){var h=this,T=new d(function(v,_){h.ready().then(function(){nt(h._dbInfo,N,function(G,M){if(G)return _(G);try{var L=M.objectStore(h._dbInfo.storeName),B=L.openCursor(),Y=1;B.onsuccess=function(){var X=B.result;if(X){var ce=X.value;Ss(ce)&&(ce=gt(ce));var ge=m(ce,X.key,Y++);ge!==void 0?v(ge):X.continue()}else v()},B.onerror=function(){_(B.error)}}catch(X){_(X)}})}).catch(_)});return g(T,b),T}function yp(m,b,h){var T=this;m=y(m);var v=new d(function(_,G){var M;T.ready().then(function(){return M=T._dbInfo,P.call(b)==="[object Blob]"?j(M.db).then(function(L){return L?b:rr(b)}):b}).then(function(L){nt(T._dbInfo,U,function(B,Y){if(B)return G(B);try{var X=Y.objectStore(T._dbInfo.storeName);L===null&&(L=void 0);var ce=X.put(L,m);Y.oncomplete=function(){L===void 0&&(L=null),_(L)},Y.onabort=Y.onerror=function(){var ge=ce.error?ce.error:ce.transaction.error;G(ge)}}catch(ge){G(ge)}})}).catch(G)});return g(v,h),v}function Ep(m,b){var h=this;m=y(m);var T=new d(function(v,_){h.ready().then(function(){nt(h._dbInfo,U,function(G,M){if(G)return _(G);try{var L=M.objectStore(h._dbInfo.storeName),B=L.delete(m);M.oncomplete=function(){v()},M.onerror=function(){_(B.error)},M.onabort=function(){var Y=B.error?B.error:B.transaction.error;_(Y)}}catch(Y){_(Y)}})}).catch(_)});return g(T,b),T}function bp(m){var b=this,h=new d(function(T,v){b.ready().then(function(){nt(b._dbInfo,U,function(_,G){if(_)return v(_);try{var M=G.objectStore(b._dbInfo.storeName),L=M.clear();G.oncomplete=function(){T()},G.onabort=G.onerror=function(){var B=L.error?L.error:L.transaction.error;v(B)}}catch(B){v(B)}})}).catch(v)});return g(h,m),h}function wp(m){var b=this,h=new d(function(T,v){b.ready().then(function(){nt(b._dbInfo,N,function(_,G){if(_)return v(_);try{var M=G.objectStore(b._dbInfo.storeName),L=M.count();L.onsuccess=function(){T(L.result)},L.onerror=function(){v(L.error)}}catch(B){v(B)}})}).catch(v)});return g(h,m),h}function kp(m,b){var h=this,T=new d(function(v,_){if(m<0){v(null);return}h.ready().then(function(){nt(h._dbInfo,N,function(G,M){if(G)return _(G);try{var L=M.objectStore(h._dbInfo.storeName),B=!1,Y=L.openKeyCursor();Y.onsuccess=function(){var X=Y.result;if(!X){v(null);return}m===0||B?v(X.key):(B=!0,X.advance(m))},Y.onerror=function(){_(Y.error)}}catch(X){_(X)}})}).catch(_)});return g(T,b),T}function Ap(m){var b=this,h=new d(function(T,v){b.ready().then(function(){nt(b._dbInfo,N,function(_,G){if(_)return v(_);try{var M=G.objectStore(b._dbInfo.storeName),L=M.openKeyCursor(),B=[];L.onsuccess=function(){var Y=L.result;if(!Y){T(B);return}B.push(Y.key),Y.continue()},L.onerror=function(){v(L.error)}}catch(Y){v(Y)}})}).catch(v)});return g(h,m),h}function Sp(m,b){b=A.apply(this,arguments);var h=this.config();m=typeof m!="function"&&m||{},m.name||(m.name=m.name||h.name,m.storeName=m.storeName||h.storeName);var T=this,v;if(!m.name)v=d.reject("Invalid arguments");else{var _=m.name===h.name&&T._dbInfo.db,G=_?d.resolve(T._dbInfo.db):Pe(m).then(function(M){var L=k[m.name],B=L.forages;L.db=M;for(var Y=0;Y<B.length;Y++)B[Y]._dbInfo.db=M;return M});m.storeName?v=G.then(function(M){if(M.objectStoreNames.contains(m.storeName)){var L=M.version+1;V(m);var B=k[m.name],Y=B.forages;M.close();for(var X=0;X<Y.length;X++){var ce=Y[X];ce._dbInfo.db=null,ce._dbInfo.version=L}var ge=new d(function(ye,Re){var _e=i.open(m.name,L);_e.onerror=function(He){var Lr=_e.result;Lr.close(),Re(He)},_e.onupgradeneeded=function(){var He=_e.result;He.deleteObjectStore(m.storeName)},_e.onsuccess=function(){var He=_e.result;He.close(),ye(He)}});return ge.then(function(ye){B.db=ye;for(var Re=0;Re<Y.length;Re++){var _e=Y[Re];_e._dbInfo.db=ye,ae(_e._dbInfo)}}).catch(function(ye){throw(ie(m,ye)||d.resolve()).catch(function(){}),ye})}}):v=G.then(function(M){V(m);var L=k[m.name],B=L.forages;M.close();for(var Y=0;Y<B.length;Y++){var X=B[Y];X._dbInfo.db=null}var ce=new d(function(ge,ye){var Re=i.deleteDatabase(m.name);Re.onerror=function(){var _e=Re.result;_e&&_e.close(),ye(Re.error)},Re.onblocked=function(){console.warn('dropInstance blocked for database "'+m.name+'" until all open connections are closed')},Re.onsuccess=function(){var _e=Re.result;_e&&_e.close(),ge(_e)}});return ce.then(function(ge){L.db=ge;for(var ye=0;ye<B.length;ye++){var Re=B[ye];ae(Re._dbInfo)}}).catch(function(ge){throw(ie(m,ge)||d.resolve()).catch(function(){}),ge})})}return g(v,b),v}var _p={_driver:"asyncStorage",_initStorage:hp,_support:u(),iterate:gp,getItem:pp,setItem:yp,removeItem:Ep,clear:bp,length:wp,key:kp,keys:Ap,dropInstance:Sp};function Tp(){return typeof openDatabase=="function"}var yt="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",vp="~~local_forage_type~",Wo=/^~~local_forage_type~([^~]+)~/,_s="__lfsc__:",Da=_s.length,Ga="arbf",xa="blob",Ko="si08",Zo="ui08",qo="uic8",$o="si16",Xo="si32",Jo="ur16",Qo="ui32",el="fl32",tl="fl64",rl=Da+Ga.length,sl=Object.prototype.toString;function al(m){var b=m.length*.75,h=m.length,T,v=0,_,G,M,L;m[m.length-1]==="="&&(b--,m[m.length-2]==="="&&b--);var B=new ArrayBuffer(b),Y=new Uint8Array(B);for(T=0;T<h;T+=4)_=yt.indexOf(m[T]),G=yt.indexOf(m[T+1]),M=yt.indexOf(m[T+2]),L=yt.indexOf(m[T+3]),Y[v++]=_<<2|G>>4,Y[v++]=(G&15)<<4|M>>2,Y[v++]=(M&3)<<6|L&63;return B}function Ma(m){var b=new Uint8Array(m),h="",T;for(T=0;T<b.length;T+=3)h+=yt[b[T]>>2],h+=yt[(b[T]&3)<<4|b[T+1]>>4],h+=yt[(b[T+1]&15)<<2|b[T+2]>>6],h+=yt[b[T+2]&63];return b.length%3===2?h=h.substring(0,h.length-1)+"=":b.length%3===1&&(h=h.substring(0,h.length-2)+"=="),h}function Ip(m,b){var h="";if(m&&(h=sl.call(m)),m&&(h==="[object ArrayBuffer]"||m.buffer&&sl.call(m.buffer)==="[object ArrayBuffer]")){var T,v=_s;m instanceof ArrayBuffer?(T=m,v+=Ga):(T=m.buffer,h==="[object Int8Array]"?v+=Ko:h==="[object Uint8Array]"?v+=Zo:h==="[object Uint8ClampedArray]"?v+=qo:h==="[object Int16Array]"?v+=$o:h==="[object Uint16Array]"?v+=Jo:h==="[object Int32Array]"?v+=Xo:h==="[object Uint32Array]"?v+=Qo:h==="[object Float32Array]"?v+=el:h==="[object Float64Array]"?v+=tl:b(new Error("Failed to get type for BinaryArray"))),b(v+Ma(T))}else if(h==="[object Blob]"){var _=new FileReader;_.onload=function(){var G=vp+m.type+"~"+Ma(this.result);b(_s+xa+G)},_.readAsArrayBuffer(m)}else try{b(JSON.stringify(m))}catch(G){console.error("Couldn't convert value into a JSON string: ",m),b(null,G)}}function Rp(m){if(m.substring(0,Da)!==_s)return JSON.parse(m);var b=m.substring(rl),h=m.substring(Da,rl),T;if(h===xa&&Wo.test(b)){var v=b.match(Wo);T=v[1],b=b.substring(v[0].length)}var _=al(b);switch(h){case Ga:return _;case xa:return c([_],{type:T});case Ko:return new Int8Array(_);case Zo:return new Uint8Array(_);case qo:return new Uint8ClampedArray(_);case $o:return new Int16Array(_);case Jo:return new Uint16Array(_);case Xo:return new Int32Array(_);case Qo:return new Uint32Array(_);case el:return new Float32Array(_);case tl:return new Float64Array(_);default:throw new Error("Unkown type: "+h)}}var La={serialize:Ip,deserialize:Rp,stringToBuffer:al,bufferToString:Ma};function nl(m,b,h,T){m.executeSql("CREATE TABLE IF NOT EXISTS "+b.storeName+" (id INTEGER PRIMARY KEY, key unique, value)",[],h,T)}function Np(m){var b=this,h={db:null};if(m)for(var T in m)h[T]=typeof m[T]!="string"?m[T].toString():m[T];var v=new d(function(_,G){try{h.db=openDatabase(h.name,String(h.version),h.description,h.size)}catch(M){return G(M)}h.db.transaction(function(M){nl(M,h,function(){b._dbInfo=h,_()},function(L,B){G(B)})},G)});return h.serializer=La,v}function Et(m,b,h,T,v,_){m.executeSql(h,T,v,function(G,M){M.code===M.SYNTAX_ERR?G.executeSql("SELECT name FROM sqlite_master WHERE type='table' AND name = ?",[b.storeName],function(L,B){B.rows.length?_(L,M):nl(L,b,function(){L.executeSql(h,T,v,_)},_)},_):_(G,M)},_)}function Cp(m,b){var h=this;m=y(m);var T=new d(function(v,_){h.ready().then(function(){var G=h._dbInfo;G.db.transaction(function(M){Et(M,G,"SELECT * FROM "+G.storeName+" WHERE key = ? LIMIT 1",[m],function(L,B){var Y=B.rows.length?B.rows.item(0).value:null;Y&&(Y=G.serializer.deserialize(Y)),v(Y)},function(L,B){_(B)})})}).catch(_)});return g(T,b),T}function Pp(m,b){var h=this,T=new d(function(v,_){h.ready().then(function(){var G=h._dbInfo;G.db.transaction(function(M){Et(M,G,"SELECT * FROM "+G.storeName,[],function(L,B){for(var Y=B.rows,X=Y.length,ce=0;ce<X;ce++){var ge=Y.item(ce),ye=ge.value;if(ye&&(ye=G.serializer.deserialize(ye)),ye=m(ye,ge.key,ce+1),ye!==void 0){v(ye);return}}v()},function(L,B){_(B)})})}).catch(_)});return g(T,b),T}function ol(m,b,h,T){var v=this;m=y(m);var _=new d(function(G,M){v.ready().then(function(){b===void 0&&(b=null);var L=b,B=v._dbInfo;B.serializer.serialize(b,function(Y,X){X?M(X):B.db.transaction(function(ce){Et(ce,B,"INSERT OR REPLACE INTO "+B.storeName+" (key, value) VALUES (?, ?)",[m,Y],function(){G(L)},function(ge,ye){M(ye)})},function(ce){if(ce.code===ce.QUOTA_ERR){if(T>0){G(ol.apply(v,[m,L,h,T-1]));return}M(ce)}})})}).catch(M)});return g(_,h),_}function Op(m,b,h){return ol.apply(this,[m,b,h,1])}function Up(m,b){var h=this;m=y(m);var T=new d(function(v,_){h.ready().then(function(){var G=h._dbInfo;G.db.transaction(function(M){Et(M,G,"DELETE FROM "+G.storeName+" WHERE key = ?",[m],function(){v()},function(L,B){_(B)})})}).catch(_)});return g(T,b),T}function Dp(m){var b=this,h=new d(function(T,v){b.ready().then(function(){var _=b._dbInfo;_.db.transaction(function(G){Et(G,_,"DELETE FROM "+_.storeName,[],function(){T()},function(M,L){v(L)})})}).catch(v)});return g(h,m),h}function Gp(m){var b=this,h=new d(function(T,v){b.ready().then(function(){var _=b._dbInfo;_.db.transaction(function(G){Et(G,_,"SELECT COUNT(key) as c FROM "+_.storeName,[],function(M,L){var B=L.rows.item(0).c;T(B)},function(M,L){v(L)})})}).catch(v)});return g(h,m),h}function xp(m,b){var h=this,T=new d(function(v,_){h.ready().then(function(){var G=h._dbInfo;G.db.transaction(function(M){Et(M,G,"SELECT key FROM "+G.storeName+" WHERE id = ? LIMIT 1",[m+1],function(L,B){var Y=B.rows.length?B.rows.item(0).key:null;v(Y)},function(L,B){_(B)})})}).catch(_)});return g(T,b),T}function Mp(m){var b=this,h=new d(function(T,v){b.ready().then(function(){var _=b._dbInfo;_.db.transaction(function(G){Et(G,_,"SELECT key FROM "+_.storeName,[],function(M,L){for(var B=[],Y=0;Y<L.rows.length;Y++)B.push(L.rows.item(Y).key);T(B)},function(M,L){v(L)})})}).catch(v)});return g(h,m),h}function Lp(m){return new d(function(b,h){m.transaction(function(T){T.executeSql("SELECT name FROM sqlite_master WHERE type='table' AND name <> '__WebKitDatabaseInfoTable__'",[],function(v,_){for(var G=[],M=0;M<_.rows.length;M++)G.push(_.rows.item(M).name);b({db:m,storeNames:G})},function(v,_){h(_)})},function(T){h(T)})})}function Bp(m,b){b=A.apply(this,arguments);var h=this.config();m=typeof m!="function"&&m||{},m.name||(m.name=m.name||h.name,m.storeName=m.storeName||h.storeName);var T=this,v;return m.name?v=new d(function(_){var G;m.name===h.name?G=T._dbInfo.db:G=openDatabase(m.name,"","",0),m.storeName?_({db:G,storeNames:[m.storeName]}):_(Lp(G))}).then(function(_){return new d(function(G,M){_.db.transaction(function(L){function B(ge){return new d(function(ye,Re){L.executeSql("DROP TABLE IF EXISTS "+ge,[],function(){ye()},function(_e,He){Re(He)})})}for(var Y=[],X=0,ce=_.storeNames.length;X<ce;X++)Y.push(B(_.storeNames[X]));d.all(Y).then(function(){G()}).catch(function(ge){M(ge)})},function(L){M(L)})})}):v=d.reject("Invalid arguments"),g(v,b),v}var zp={_driver:"webSQLStorage",_initStorage:Np,_support:Tp(),iterate:Pp,getItem:Cp,setItem:Op,removeItem:Up,clear:Dp,length:Gp,key:xp,keys:Mp,dropInstance:Bp};function Hp(){try{return typeof localStorage<"u"&&"setItem"in localStorage&&!!localStorage.setItem}catch{return!1}}function ll(m,b){var h=m.name+"/";return m.storeName!==b.storeName&&(h+=m.storeName+"/"),h}function Fp(){var m="_localforage_support_test";try{return localStorage.setItem(m,!0),localStorage.removeItem(m),!1}catch{return!0}}function Yp(){return!Fp()||localStorage.length>0}function jp(m){var b=this,h={};if(m)for(var T in m)h[T]=m[T];return h.keyPrefix=ll(m,b._defaultConfig),Yp()?(b._dbInfo=h,h.serializer=La,d.resolve()):d.reject()}function Vp(m){var b=this,h=b.ready().then(function(){for(var T=b._dbInfo.keyPrefix,v=localStorage.length-1;v>=0;v--){var _=localStorage.key(v);_.indexOf(T)===0&&localStorage.removeItem(_)}});return g(h,m),h}function Wp(m,b){var h=this;m=y(m);var T=h.ready().then(function(){var v=h._dbInfo,_=localStorage.getItem(v.keyPrefix+m);return _&&(_=v.serializer.deserialize(_)),_});return g(T,b),T}function Kp(m,b){var h=this,T=h.ready().then(function(){for(var v=h._dbInfo,_=v.keyPrefix,G=_.length,M=localStorage.length,L=1,B=0;B<M;B++){var Y=localStorage.key(B);if(Y.indexOf(_)===0){var X=localStorage.getItem(Y);if(X&&(X=v.serializer.deserialize(X)),X=m(X,Y.substring(G),L++),X!==void 0)return X}}});return g(T,b),T}function Zp(m,b){var h=this,T=h.ready().then(function(){var v=h._dbInfo,_;try{_=localStorage.key(m)}catch{_=null}return _&&(_=_.substring(v.keyPrefix.length)),_});return g(T,b),T}function qp(m){var b=this,h=b.ready().then(function(){for(var T=b._dbInfo,v=localStorage.length,_=[],G=0;G<v;G++){var M=localStorage.key(G);M.indexOf(T.keyPrefix)===0&&_.push(M.substring(T.keyPrefix.length))}return _});return g(h,m),h}function $p(m){var b=this,h=b.keys().then(function(T){return T.length});return g(h,m),h}function Xp(m,b){var h=this;m=y(m);var T=h.ready().then(function(){var v=h._dbInfo;localStorage.removeItem(v.keyPrefix+m)});return g(T,b),T}function Jp(m,b,h){var T=this;m=y(m);var v=T.ready().then(function(){b===void 0&&(b=null);var _=b;return new d(function(G,M){var L=T._dbInfo;L.serializer.serialize(b,function(B,Y){if(Y)M(Y);else try{localStorage.setItem(L.keyPrefix+m,B),G(_)}catch(X){(X.name==="QuotaExceededError"||X.name==="NS_ERROR_DOM_QUOTA_REACHED")&&M(X),M(X)}})})});return g(v,h),v}function Qp(m,b){if(b=A.apply(this,arguments),m=typeof m!="function"&&m||{},!m.name){var h=this.config();m.name=m.name||h.name,m.storeName=m.storeName||h.storeName}var T=this,v;return m.name?v=new d(function(_){m.storeName?_(ll(m,T._defaultConfig)):_(m.name+"/")}).then(function(_){for(var G=localStorage.length-1;G>=0;G--){var M=localStorage.key(G);M.indexOf(_)===0&&localStorage.removeItem(M)}}):v=d.reject("Invalid arguments"),g(v,b),v}var eg={_driver:"localStorageWrapper",_initStorage:jp,_support:Hp(),iterate:Kp,getItem:Wp,setItem:Jp,removeItem:Xp,clear:Vp,length:$p,key:Zp,keys:qp,dropInstance:Qp},tg=function(b,h){return b===h||typeof b=="number"&&typeof h=="number"&&isNaN(b)&&isNaN(h)},rg=function(b,h){for(var T=b.length,v=0;v<T;){if(tg(b[v],h))return!0;v++}return!1},il=Array.isArray||function(m){return Object.prototype.toString.call(m)==="[object Array]"},Mr={},ul={},sr={INDEXEDDB:_p,WEBSQL:zp,LOCALSTORAGE:eg},sg=[sr.INDEXEDDB._driver,sr.WEBSQL._driver,sr.LOCALSTORAGE._driver],Ts=["dropInstance"],Ba=["clear","getItem","iterate","key","keys","length","removeItem","setItem"].concat(Ts),ag={description:"",driver:sg.slice(),name:"localforage",size:4980736,storeName:"keyvaluepairs",version:1};function ng(m,b){m[b]=function(){var h=arguments;return m.ready().then(function(){return m[b].apply(m,h)})}}function za(){for(var m=1;m<arguments.length;m++){var b=arguments[m];if(b)for(var h in b)b.hasOwnProperty(h)&&(il(b[h])?arguments[0][h]=b[h].slice():arguments[0][h]=b[h])}return arguments[0]}var og=function(){function m(b){o(this,m);for(var h in sr)if(sr.hasOwnProperty(h)){var T=sr[h],v=T._driver;this[h]=v,Mr[v]||this.defineDriver(T)}this._defaultConfig=za({},ag),this._config=za({},this._defaultConfig,b),this._driverSet=null,this._initDriver=null,this._ready=!1,this._dbInfo=null,this._wrapLibraryMethodsWithReady(),this.setDriver(this._config.driver).catch(function(){})}return m.prototype.config=function(h){if((typeof h>"u"?"undefined":n(h))==="object"){if(this._ready)return new Error("Can't call config() after localforage has been used.");for(var T in h){if(T==="storeName"&&(h[T]=h[T].replace(/\W/g,"_")),T==="version"&&typeof h[T]!="number")return new Error("Database version must be a number.");this._config[T]=h[T]}return"driver"in h&&h.driver?this.setDriver(this._config.driver):!0}else return typeof h=="string"?this._config[h]:this._config},m.prototype.defineDriver=function(h,T,v){var _=new d(function(G,M){try{var L=h._driver,B=new Error("Custom driver not compliant; see https://mozilla.github.io/localForage/#definedriver");if(!h._driver){M(B);return}for(var Y=Ba.concat("_initStorage"),X=0,ce=Y.length;X<ce;X++){var ge=Y[X],ye=!rg(Ts,ge);if((ye||h[ge])&&typeof h[ge]!="function"){M(B);return}}var Re=function(){for(var Lr=function(ug){return function(){var cg=new Error("Method "+ug+" is not implemented by the current driver"),cl=d.reject(cg);return g(cl,arguments[arguments.length-1]),cl}},Ha=0,ig=Ts.length;Ha<ig;Ha++){var Fa=Ts[Ha];h[Fa]||(h[Fa]=Lr(Fa))}};Re();var _e=function(Lr){Mr[L]&&console.info("Redefining LocalForage driver: "+L),Mr[L]=h,ul[L]=Lr,G()};"_support"in h?h._support&&typeof h._support=="function"?h._support().then(_e,M):_e(!!h._support):_e(!0)}catch(He){M(He)}});return w(_,T,v),_},m.prototype.driver=function(){return this._driver||null},m.prototype.getDriver=function(h,T,v){var _=Mr[h]?d.resolve(Mr[h]):d.reject(new Error("Driver not found."));return w(_,T,v),_},m.prototype.getSerializer=function(h){var T=d.resolve(La);return w(T,h),T},m.prototype.ready=function(h){var T=this,v=T._driverSet.then(function(){return T._ready===null&&(T._ready=T._initDriver()),T._ready});return w(v,h,h),v},m.prototype.setDriver=function(h,T,v){var _=this;il(h)||(h=[h]);var G=this._getSupportedDrivers(h);function M(){_._config.driver=_.driver()}function L(X){return _._extend(X),M(),_._ready=_._initStorage(_._config),_._ready}function B(X){return function(){var ce=0;function ge(){for(;ce<X.length;){var ye=X[ce];return ce++,_._dbInfo=null,_._ready=null,_.getDriver(ye).then(L).catch(ge)}M();var Re=new Error("No available storage method found.");return _._driverSet=d.reject(Re),_._driverSet}return ge()}}var Y=this._driverSet!==null?this._driverSet.catch(function(){return d.resolve()}):d.resolve();return this._driverSet=Y.then(function(){var X=G[0];return _._dbInfo=null,_._ready=null,_.getDriver(X).then(function(ce){_._driver=ce._driver,M(),_._wrapLibraryMethodsWithReady(),_._initDriver=B(G)})}).catch(function(){M();var X=new Error("No available storage method found.");return _._driverSet=d.reject(X),_._driverSet}),w(this._driverSet,T,v),this._driverSet},m.prototype.supports=function(h){return!!ul[h]},m.prototype._extend=function(h){za(this,h)},m.prototype._getSupportedDrivers=function(h){for(var T=[],v=0,_=h.length;v<_;v++){var G=h[v];this.supports(G)&&T.push(G)}return T},m.prototype._wrapLibraryMethodsWithReady=function(){for(var h=0,T=Ba.length;h<T;h++)ng(this,Ba[h])},m.prototype.createInstance=function(h){return new m(h)},m}(),lg=new og;s.exports=lg},{3:3}]},{},[4])(4)})})(Ya);var fl=Ya.exports,ar=dl(fl),ml=`{"puzzles":[{"puzName":"treasure_chest","battleGroupName":"treasure_chest","order":0,"round":"cutscenes","unlockReq":0,"unlockMult":1,"srcUnlockGroupId":"start","dstUnlockGroupId":"intro","cardUnlockGroupId":null,"answer":null,"triggersBattleGroupSolve":false,"isCutscene":true,"isFullPuzzle":false},{"puzName":"tutorial","battleGroupName":"tutorial","order":1,"round":"battles","unlockReq":1,"unlockMult":1,"srcUnlockGroupId":"intro","dstUnlockGroupId":"tutorial_complete","cardUnlockGroupId":null,"answer":null,"triggersBattleGroupSolve":false,"isCutscene":false,"isFullPuzzle":true},{"puzName":"tutorial1","battleGroupName":"tutorial","order":2,"round":"battles","unlockReq":-1,"unlockMult":1,"srcUnlockGroupId":"none","dstUnlockGroupId":"tutorial","cardUnlockGroupId":"tutorial1","answer":null,"triggersBattleGroupSolve":false,"isCutscene":false,"isFullPuzzle":false},{"puzName":"tutorial2","battleGroupName":"tutorial","order":3,"round":"battles","unlockReq":1,"unlockMult":1,"srcUnlockGroupId":"tutorial","dstUnlockGroupId":"tutorial","cardUnlockGroupId":"tutorial2","answer":null,"triggersBattleGroupSolve":false,"isCutscene":false,"isFullPuzzle":false},{"puzName":"tutorial3","battleGroupName":"tutorial","order":4,"round":"battles","unlockReq":2,"unlockMult":1,"srcUnlockGroupId":"tutorial","dstUnlockGroupId":"tutorial","cardUnlockGroupId":"tutorial3","answer":null,"triggersBattleGroupSolve":false,"isCutscene":false,"isFullPuzzle":false},{"puzName":"tutorial4","battleGroupName":"tutorial","order":5,"round":"battles","unlockReq":3,"unlockMult":1,"srcUnlockGroupId":"tutorial","dstUnlockGroupId":"tutorial","cardUnlockGroupId":"tutorial4","answer":null,"triggersBattleGroupSolve":false,"isCutscene":false,"isFullPuzzle":false},{"puzName":"tutorial5","battleGroupName":"tutorial","order":6,"round":"battles","unlockReq":4,"unlockMult":1,"srcUnlockGroupId":"tutorial","dstUnlockGroupId":"tutorial","cardUnlockGroupId":"tutorial5","answer":null,"triggersBattleGroupSolve":false,"isCutscene":false,"isFullPuzzle":false},{"puzName":"tutorial6","battleGroupName":"tutorial","order":7,"round":"battles","unlockReq":5,"unlockMult":1,"srcUnlockGroupId":"tutorial","dstUnlockGroupId":"none","cardUnlockGroupId":"tutorial6","answer":null,"triggersBattleGroupSolve":true,"isCutscene":false,"isFullPuzzle":false},{"puzName":"first_answer","battleGroupName":"first_answer","order":8,"round":"cutscenes","unlockReq":1,"unlockMult":1,"srcUnlockGroupId":"fish","dstUnlockGroupId":"first_answer_complete","cardUnlockGroupId":null,"answer":null,"triggersBattleGroupSolve":false,"isCutscene":true,"isFullPuzzle":false},{"puzName":"first_legendary","battleGroupName":"first_legendary","order":9,"round":"cutscenes","unlockReq":1,"unlockMult":1,"srcUnlockGroupId":"legendaries","dstUnlockGroupId":"first_legendary_complete","cardUnlockGroupId":null,"answer":null,"triggersBattleGroupSolve":false,"isCutscene":true,"isFullPuzzle":false},{"puzName":"trigram_hell","battleGroupName":"trigram_hell","order":10,"round":"fish","unlockReq":30,"unlockMult":2,"srcUnlockGroupId":"main","dstUnlockGroupId":"main","cardUnlockGroupId":"fish1","answer":"PERMANENT","triggersBattleGroupSolve":false,"isCutscene":false,"isFullPuzzle":true},{"puzName":"petroglyph","battleGroupName":"petroglyph","order":11,"round":"fish","unlockReq":30,"unlockMult":2,"srcUnlockGroupId":"main","dstUnlockGroupId":"main","cardUnlockGroupId":"fish2","answer":"CIRCUIT","triggersBattleGroupSolve":false,"isCutscene":false,"isFullPuzzle":true},{"puzName":"limericks","battleGroupName":"limericks","order":12,"round":"fish","unlockReq":38,"unlockMult":2,"srcUnlockGroupId":"main","dstUnlockGroupId":"main","cardUnlockGroupId":"fish3","answer":"QUALIFIER","triggersBattleGroupSolve":false,"isCutscene":false,"isFullPuzzle":true},{"puzName":"make_your_own_star_battle","battleGroupName":"make_your_own_star_battle","order":13,"round":"fish","unlockReq":46,"unlockMult":2,"srcUnlockGroupId":"main","dstUnlockGroupId":"main","cardUnlockGroupId":"fish4","answer":"LOTTERY","triggersBattleGroupSolve":false,"isCutscene":false,"isFullPuzzle":true},{"puzName":"now_i_know","battleGroupName":"now_i_know","order":14,"round":"fish","unlockReq":54,"unlockMult":2,"srcUnlockGroupId":"main","dstUnlockGroupId":"main","cardUnlockGroupId":"fish5","answer":"REPETITION","triggersBattleGroupSolve":false,"isCutscene":false,"isFullPuzzle":true},{"puzName":"gessner_mom","battleGroupName":"gessner_mom","order":15,"round":"fish","unlockReq":62,"unlockMult":2,"srcUnlockGroupId":"main","dstUnlockGroupId":"main","cardUnlockGroupId":"fish6","answer":"SOCCER","triggersBattleGroupSolve":false,"isCutscene":false,"isFullPuzzle":true},{"puzName":"console-ation_prize","battleGroupName":"console-ation_prize","order":16,"round":"fish","unlockReq":70,"unlockMult":2,"srcUnlockGroupId":"main","dstUnlockGroupId":"main","cardUnlockGroupId":"fish7","answer":"EVALUATION","triggersBattleGroupSolve":false,"isCutscene":false,"isFullPuzzle":true},{"puzName":"faces","battleGroupName":"faces","order":17,"round":"fish","unlockReq":78,"unlockMult":2,"srcUnlockGroupId":"main","dstUnlockGroupId":"main","cardUnlockGroupId":"fish8","answer":"PAYMENT METHOD","triggersBattleGroupSolve":false,"isCutscene":false,"isFullPuzzle":true},{"puzName":"beige_flags","battleGroupName":"beige_flags","order":18,"round":"fish","unlockReq":86,"unlockMult":2,"srcUnlockGroupId":"main","dstUnlockGroupId":"main","cardUnlockGroupId":"fish9","answer":"VACATION","triggersBattleGroupSolve":false,"isCutscene":false,"isFullPuzzle":true},{"puzName":"animal_shelter","battleGroupName":"animal_shelter","order":19,"round":"fish","unlockReq":94,"unlockMult":2,"srcUnlockGroupId":"main","dstUnlockGroupId":"main","cardUnlockGroupId":"fish10","answer":"RESIDENCY","triggersBattleGroupSolve":false,"isCutscene":false,"isFullPuzzle":true},{"puzName":"vent","battleGroupName":"vent","order":20,"round":"fish","unlockReq":102,"unlockMult":2,"srcUnlockGroupId":"main","dstUnlockGroupId":"main","cardUnlockGroupId":"fish11","answer":"SPACED","triggersBattleGroupSolve":false,"isCutscene":false,"isFullPuzzle":true},{"puzName":"paint_by_numbers","battleGroupName":"paint_by_numbers","order":21,"round":"fish","unlockReq":110,"unlockMult":2,"srcUnlockGroupId":"main","dstUnlockGroupId":"main","cardUnlockGroupId":"fish12","answer":"SCHOLASTIC","triggersBattleGroupSolve":false,"isCutscene":false,"isFullPuzzle":true},{"puzName":"bovine_social_media_corp","battleGroupName":"bovine_social_media_corp","order":22,"round":"fish","unlockReq":118,"unlockMult":2,"srcUnlockGroupId":"main","dstUnlockGroupId":"main","cardUnlockGroupId":"fish13","answer":"EJECTION","triggersBattleGroupSolve":false,"isCutscene":false,"isFullPuzzle":true},{"puzName":"op_pls_nerf","battleGroupName":"op_pls_nerf","order":23,"round":"fish","unlockReq":126,"unlockMult":2,"srcUnlockGroupId":"main","dstUnlockGroupId":"main","cardUnlockGroupId":"fish14","answer":"TICKET","triggersBattleGroupSolve":false,"isCutscene":false,"isFullPuzzle":true},{"puzName":"gausss_sketches","battleGroupName":"gausss_sketches","order":24,"round":"fish","unlockReq":134,"unlockMult":2,"srcUnlockGroupId":"main","dstUnlockGroupId":"main","cardUnlockGroupId":"fish15","answer":"INTEGRATED","triggersBattleGroupSolve":false,"isCutscene":false,"isFullPuzzle":true},{"puzName":"postseason_tournaments","battleGroupName":"postseason_tournaments","order":25,"round":"fish","unlockReq":142,"unlockMult":2,"srcUnlockGroupId":"main","dstUnlockGroupId":"main","cardUnlockGroupId":"fish16","answer":"PLAYOFFS","triggersBattleGroupSolve":false,"isCutscene":false,"isFullPuzzle":true},{"puzName":"two_worlds_collide","battleGroupName":"two_worlds_collide","order":26,"round":"fish","unlockReq":150,"unlockMult":2,"srcUnlockGroupId":"main","dstUnlockGroupId":"main","cardUnlockGroupId":"fish17","answer":"PLASTIC","triggersBattleGroupSolve":false,"isCutscene":false,"isFullPuzzle":true},{"puzName":"areciboar","battleGroupName":"areciboar","order":27,"round":"fish","unlockReq":158,"unlockMult":2,"srcUnlockGroupId":"main","dstUnlockGroupId":"main","cardUnlockGroupId":"fish18","answer":"MESSAGE","triggersBattleGroupSolve":false,"isCutscene":false,"isFullPuzzle":true},{"puzName":"mastery_tree","battleGroupName":"mastery_tree","order":28,"round":"fish","unlockReq":1,"unlockMult":1,"srcUnlockGroupId":"first_answer_complete","dstUnlockGroupId":"none","cardUnlockGroupId":"legendary-14","answer":"CAPTAIN PI CARD","triggersBattleGroupSolve":false,"isCutscene":false,"isFullPuzzle":true},{"puzName":"m1","battleGroupName":"mastery_tree","order":29,"round":"fish","unlockReq":-1,"unlockMult":1,"srcUnlockGroupId":"none","dstUnlockGroupId":"none","cardUnlockGroupId":null,"answer":null,"triggersBattleGroupSolve":false,"isCutscene":false,"isFullPuzzle":false},{"puzName":"m2","battleGroupName":"mastery_tree","order":30,"round":"fish","unlockReq":-1,"unlockMult":1,"srcUnlockGroupId":"none","dstUnlockGroupId":"none","cardUnlockGroupId":null,"answer":null,"triggersBattleGroupSolve":false,"isCutscene":false,"isFullPuzzle":false},{"puzName":"m3","battleGroupName":"mastery_tree","order":31,"round":"fish","unlockReq":-1,"unlockMult":1,"srcUnlockGroupId":"none","dstUnlockGroupId":"none","cardUnlockGroupId":null,"answer":null,"triggersBattleGroupSolve":false,"isCutscene":false,"isFullPuzzle":false},{"puzName":"m4","battleGroupName":"mastery_tree","order":32,"round":"fish","unlockReq":-1,"unlockMult":1,"srcUnlockGroupId":"none","dstUnlockGroupId":"none","cardUnlockGroupId":null,"answer":null,"triggersBattleGroupSolve":false,"isCutscene":false,"isFullPuzzle":false},{"puzName":"m5","battleGroupName":"mastery_tree","order":33,"round":"fish","unlockReq":-1,"unlockMult":1,"srcUnlockGroupId":"none","dstUnlockGroupId":"none","cardUnlockGroupId":null,"answer":null,"triggersBattleGroupSolve":false,"isCutscene":false,"isFullPuzzle":false},{"puzName":"m6","battleGroupName":"mastery_tree","order":34,"round":"fish","unlockReq":-1,"unlockMult":1,"srcUnlockGroupId":"none","dstUnlockGroupId":"none","cardUnlockGroupId":null,"answer":null,"triggersBattleGroupSolve":false,"isCutscene":false,"isFullPuzzle":false},{"puzName":"m7","battleGroupName":"mastery_tree","order":35,"round":"fish","unlockReq":-1,"unlockMult":1,"srcUnlockGroupId":"none","dstUnlockGroupId":"none","cardUnlockGroupId":null,"answer":null,"triggersBattleGroupSolve":false,"isCutscene":false,"isFullPuzzle":false},{"puzName":"m8","battleGroupName":"mastery_tree","order":36,"round":"fish","unlockReq":-1,"unlockMult":1,"srcUnlockGroupId":"none","dstUnlockGroupId":"none","cardUnlockGroupId":null,"answer":null,"triggersBattleGroupSolve":false,"isCutscene":false,"isFullPuzzle":false},{"puzName":"m9","battleGroupName":"mastery_tree","order":37,"round":"fish","unlockReq":-1,"unlockMult":1,"srcUnlockGroupId":"none","dstUnlockGroupId":"none","cardUnlockGroupId":null,"answer":null,"triggersBattleGroupSolve":false,"isCutscene":false,"isFullPuzzle":false},{"puzName":"mastery_tree_prompt","battleGroupName":"mastery_tree","order":38,"round":"fish","unlockReq":9,"unlockMult":1,"srcUnlockGroupId":"masteries","dstUnlockGroupId":"none","cardUnlockGroupId":null,"answer":null,"triggersBattleGroupSolve":false,"isCutscene":false,"isFullPuzzle":false},{"puzName":"angry_boarry_farmer","battleGroupName":"angry_boarry_farmer","order":39,"round":"battles","unlockReq":1,"unlockMult":10,"srcUnlockGroupId":"tutorial_complete","dstUnlockGroupId":"main","cardUnlockGroupId":"booster1","answer":null,"triggersBattleGroupSolve":false,"isCutscene":false,"isFullPuzzle":true},{"puzName":"dargle","battleGroupName":"dargle","order":40,"round":"battles","unlockReq":1,"unlockMult":10,"srcUnlockGroupId":"tutorial_complete","dstUnlockGroupId":"main","cardUnlockGroupId":"legendary-1","answer":null,"triggersBattleGroupSolve":false,"isCutscene":false,"isFullPuzzle":true},{"puzName":"dargle_1","battleGroupName":"dargle","order":41,"round":"battles","unlockReq":-1,"unlockMult":1,"srcUnlockGroupId":"none","dstUnlockGroupId":"dargle","cardUnlockGroupId":null,"answer":null,"triggersBattleGroupSolve":false,"isCutscene":false,"isFullPuzzle":false},{"puzName":"dargle_2","battleGroupName":"dargle","order":42,"round":"battles","unlockReq":1,"unlockMult":1,"srcUnlockGroupId":"dargle","dstUnlockGroupId":"dargle","cardUnlockGroupId":null,"answer":null,"triggersBattleGroupSolve":false,"isCutscene":false,"isFullPuzzle":false},{"puzName":"dargle_3","battleGroupName":"dargle","order":43,"round":"battles","unlockReq":2,"unlockMult":1,"srcUnlockGroupId":"dargle","dstUnlockGroupId":"dargle","cardUnlockGroupId":null,"answer":null,"triggersBattleGroupSolve":false,"isCutscene":false,"isFullPuzzle":false},{"puzName":"dargle_4","battleGroupName":"dargle","order":44,"round":"battles","unlockReq":3,"unlockMult":1,"srcUnlockGroupId":"dargle","dstUnlockGroupId":"dargle","cardUnlockGroupId":null,"answer":null,"triggersBattleGroupSolve":false,"isCutscene":false,"isFullPuzzle":false},{"puzName":"dargle_5","battleGroupName":"dargle","order":45,"round":"battles","unlockReq":4,"unlockMult":1,"srcUnlockGroupId":"dargle","dstUnlockGroupId":"none","cardUnlockGroupId":null,"answer":null,"triggersBattleGroupSolve":true,"isCutscene":false,"isFullPuzzle":false},{"puzName":"beebay_fulfillment_center","battleGroupName":"beebay_fulfillment_center","order":46,"round":"battles","unlockReq":10,"unlockMult":10,"srcUnlockGroupId":"main","dstUnlockGroupId":"main","cardUnlockGroupId":"booster2","answer":null,"triggersBattleGroupSolve":false,"isCutscene":false,"isFullPuzzle":true},{"puzName":"beebay_fulfillment_center_1","battleGroupName":"beebay_fulfillment_center","order":47,"round":"battles","unlockReq":-1,"unlockMult":1,"srcUnlockGroupId":"none","dstUnlockGroupId":"beebay_fulfillment_center","cardUnlockGroupId":null,"answer":null,"triggersBattleGroupSolve":true,"isCutscene":false,"isFullPuzzle":false},{"puzName":"beebay_fulfillment_center_2","battleGroupName":"beebay_fulfillment_center","order":48,"round":"battles","unlockReq":-1,"unlockMult":1,"srcUnlockGroupId":"none","dstUnlockGroupId":"beebay_fulfillment_center","cardUnlockGroupId":null,"answer":null,"triggersBattleGroupSolve":true,"isCutscene":false,"isFullPuzzle":false},{"puzName":"beebay_fulfillment_center_3","battleGroupName":"beebay_fulfillment_center","order":49,"round":"battles","unlockReq":1,"unlockMult":1,"srcUnlockGroupId":"beebay_fulfillment_center","dstUnlockGroupId":"beebay_fulfillment_center","cardUnlockGroupId":null,"answer":null,"triggersBattleGroupSolve":true,"isCutscene":false,"isFullPuzzle":false},{"puzName":"beebay_fulfillment_center_4","battleGroupName":"beebay_fulfillment_center","order":50,"round":"battles","unlockReq":2,"unlockMult":1,"srcUnlockGroupId":"beebay_fulfillment_center","dstUnlockGroupId":"beebay_fulfillment_center","cardUnlockGroupId":null,"answer":null,"triggersBattleGroupSolve":true,"isCutscene":false,"isFullPuzzle":false},{"puzName":"beebay_fulfillment_center_5","battleGroupName":"beebay_fulfillment_center","order":51,"round":"battles","unlockReq":3,"unlockMult":1,"srcUnlockGroupId":"beebay_fulfillment_center","dstUnlockGroupId":"beebay_fulfillment_center","cardUnlockGroupId":null,"answer":null,"triggersBattleGroupSolve":true,"isCutscene":false,"isFullPuzzle":false},{"puzName":"beebay_fulfillment_center_6","battleGroupName":"beebay_fulfillment_center","order":52,"round":"battles","unlockReq":4,"unlockMult":1,"srcUnlockGroupId":"beebay_fulfillment_center","dstUnlockGroupId":"beebay_fulfillment_center","cardUnlockGroupId":null,"answer":null,"triggersBattleGroupSolve":true,"isCutscene":false,"isFullPuzzle":false},{"puzName":"beebay_fulfillment_center_7","battleGroupName":"beebay_fulfillment_center","order":53,"round":"battles","unlockReq":5,"unlockMult":1,"srcUnlockGroupId":"beebay_fulfillment_center","dstUnlockGroupId":"beebay_fulfillment_center","cardUnlockGroupId":null,"answer":null,"triggersBattleGroupSolve":true,"isCutscene":false,"isFullPuzzle":false},{"puzName":"beebay_fulfillment_center_8","battleGroupName":"beebay_fulfillment_center","order":54,"round":"battles","unlockReq":6,"unlockMult":1,"srcUnlockGroupId":"beebay_fulfillment_center","dstUnlockGroupId":"beebay_fulfillment_center","cardUnlockGroupId":null,"answer":null,"triggersBattleGroupSolve":true,"isCutscene":false,"isFullPuzzle":false},{"puzName":"beebay_fulfillment_center_9","battleGroupName":"beebay_fulfillment_center","order":55,"round":"battles","unlockReq":7,"unlockMult":1,"srcUnlockGroupId":"beebay_fulfillment_center","dstUnlockGroupId":"beebay_fulfillment_center","cardUnlockGroupId":null,"answer":null,"triggersBattleGroupSolve":true,"isCutscene":false,"isFullPuzzle":false},{"puzName":"beebay_fulfillment_center_10","battleGroupName":"beebay_fulfillment_center","order":56,"round":"battles","unlockReq":8,"unlockMult":1,"srcUnlockGroupId":"beebay_fulfillment_center","dstUnlockGroupId":"beebay_fulfillment_center","cardUnlockGroupId":null,"answer":null,"triggersBattleGroupSolve":true,"isCutscene":false,"isFullPuzzle":false},{"puzName":"beebay_fulfillment_center_11","battleGroupName":"beebay_fulfillment_center","order":57,"round":"battles","unlockReq":9,"unlockMult":1,"srcUnlockGroupId":"beebay_fulfillment_center","dstUnlockGroupId":"beebay_fulfillment_center","cardUnlockGroupId":null,"answer":null,"triggersBattleGroupSolve":true,"isCutscene":false,"isFullPuzzle":false},{"puzName":"beebay_fulfillment_center_12","battleGroupName":"beebay_fulfillment_center","order":58,"round":"battles","unlockReq":10,"unlockMult":1,"srcUnlockGroupId":"beebay_fulfillment_center","dstUnlockGroupId":"beebay_fulfillment_center","cardUnlockGroupId":null,"answer":null,"triggersBattleGroupSolve":true,"isCutscene":false,"isFullPuzzle":false},{"puzName":"beebay_fulfillment_center_13","battleGroupName":"beebay_fulfillment_center","order":59,"round":"battles","unlockReq":11,"unlockMult":1,"srcUnlockGroupId":"beebay_fulfillment_center","dstUnlockGroupId":"none","cardUnlockGroupId":null,"answer":null,"triggersBattleGroupSolve":true,"isCutscene":false,"isFullPuzzle":false},{"puzName":"miss_yu","battleGroupName":"miss_yu","order":60,"round":"battles","unlockReq":10,"unlockMult":10,"srcUnlockGroupId":"main","dstUnlockGroupId":"main","cardUnlockGroupId":"legendary-7","answer":null,"triggersBattleGroupSolve":false,"isCutscene":false,"isFullPuzzle":true},{"puzName":"gnutmeg_tree","battleGroupName":"gnutmeg_tree","order":61,"round":"battles","unlockReq":20,"unlockMult":10,"srcUnlockGroupId":"main","dstUnlockGroupId":"main","cardUnlockGroupId":"booster3","answer":null,"triggersBattleGroupSolve":false,"isCutscene":false,"isFullPuzzle":true},{"puzName":"coloring","battleGroupName":"coloring","order":62,"round":"battles","unlockReq":30,"unlockMult":10,"srcUnlockGroupId":"main","dstUnlockGroupId":"main","cardUnlockGroupId":"legendary-8","answer":null,"triggersBattleGroupSolve":false,"isCutscene":false,"isFullPuzzle":true},{"puzName":"spirit_of_the_vines","battleGroupName":"spirit_of_the_vines","order":63,"round":"battles","unlockReq":40,"unlockMult":10,"srcUnlockGroupId":"main","dstUnlockGroupId":"main","cardUnlockGroupId":"booster4","answer":null,"triggersBattleGroupSolve":false,"isCutscene":false,"isFullPuzzle":true},{"puzName":"spirit_of_the_vines_1","battleGroupName":"spirit_of_the_vines","order":64,"round":"battles","unlockReq":-1,"unlockMult":1,"srcUnlockGroupId":"none","dstUnlockGroupId":"spirit_of_the_vines","cardUnlockGroupId":null,"answer":null,"triggersBattleGroupSolve":false,"isCutscene":false,"isFullPuzzle":false},{"puzName":"spirit_of_the_vines_2","battleGroupName":"spirit_of_the_vines","order":65,"round":"battles","unlockReq":1,"unlockMult":1,"srcUnlockGroupId":"spirit_of_the_vines","dstUnlockGroupId":"spirit_of_the_vines","cardUnlockGroupId":null,"answer":null,"triggersBattleGroupSolve":false,"isCutscene":false,"isFullPuzzle":false},{"puzName":"spirit_of_the_vines_3","battleGroupName":"spirit_of_the_vines","order":66,"round":"battles","unlockReq":2,"unlockMult":1,"srcUnlockGroupId":"spirit_of_the_vines","dstUnlockGroupId":"spirit_of_the_vines","cardUnlockGroupId":null,"answer":null,"triggersBattleGroupSolve":false,"isCutscene":false,"isFullPuzzle":false},{"puzName":"spirit_of_the_vines_4","battleGroupName":"spirit_of_the_vines","order":67,"round":"battles","unlockReq":3,"unlockMult":1,"srcUnlockGroupId":"spirit_of_the_vines","dstUnlockGroupId":"spirit_of_the_vines","cardUnlockGroupId":null,"answer":null,"triggersBattleGroupSolve":false,"isCutscene":false,"isFullPuzzle":false},{"puzName":"spirit_of_the_vines_5","battleGroupName":"spirit_of_the_vines","order":68,"round":"battles","unlockReq":4,"unlockMult":1,"srcUnlockGroupId":"spirit_of_the_vines","dstUnlockGroupId":"none","cardUnlockGroupId":null,"answer":null,"triggersBattleGroupSolve":true,"isCutscene":false,"isFullPuzzle":false},{"puzName":"othello","battleGroupName":"othello","order":69,"round":"battles","unlockReq":50,"unlockMult":10,"srcUnlockGroupId":"main","dstUnlockGroupId":"main","cardUnlockGroupId":"legendary-10","answer":null,"triggersBattleGroupSolve":false,"isCutscene":false,"isFullPuzzle":true},{"puzName":"jabberwock","battleGroupName":"jabberwock","order":70,"round":"battles","unlockReq":60,"unlockMult":10,"srcUnlockGroupId":"main","dstUnlockGroupId":"main","cardUnlockGroupId":"legendary-6","answer":null,"triggersBattleGroupSolve":false,"isCutscene":false,"isFullPuzzle":true},{"puzName":"jabberwock_1","battleGroupName":"jabberwock","order":71,"round":"battles","unlockReq":-1,"unlockMult":1,"srcUnlockGroupId":"none","dstUnlockGroupId":"jabberwock","cardUnlockGroupId":null,"answer":null,"triggersBattleGroupSolve":false,"isCutscene":false,"isFullPuzzle":false},{"puzName":"jabberwock_2","battleGroupName":"jabberwock","order":72,"round":"battles","unlockReq":1,"unlockMult":1,"srcUnlockGroupId":"jabberwock","dstUnlockGroupId":"jabberwock","cardUnlockGroupId":null,"answer":null,"triggersBattleGroupSolve":false,"isCutscene":false,"isFullPuzzle":false},{"puzName":"jabberwock_3","battleGroupName":"jabberwock","order":73,"round":"battles","unlockReq":2,"unlockMult":1,"srcUnlockGroupId":"jabberwock","dstUnlockGroupId":"jabberwock","cardUnlockGroupId":null,"answer":null,"triggersBattleGroupSolve":false,"isCutscene":false,"isFullPuzzle":false},{"puzName":"jabberwock_4","battleGroupName":"jabberwock","order":74,"round":"battles","unlockReq":3,"unlockMult":1,"srcUnlockGroupId":"jabberwock","dstUnlockGroupId":"jabberwock","cardUnlockGroupId":null,"answer":null,"triggersBattleGroupSolve":false,"isCutscene":false,"isFullPuzzle":false},{"puzName":"jabberwock_5","battleGroupName":"jabberwock","order":75,"round":"battles","unlockReq":4,"unlockMult":1,"srcUnlockGroupId":"jabberwock","dstUnlockGroupId":"jabberwock","cardUnlockGroupId":null,"answer":null,"triggersBattleGroupSolve":false,"isCutscene":false,"isFullPuzzle":false},{"puzName":"jabberwock_6","battleGroupName":"jabberwock","order":76,"round":"battles","unlockReq":5,"unlockMult":1,"srcUnlockGroupId":"jabberwock","dstUnlockGroupId":"jabberwock","cardUnlockGroupId":null,"answer":null,"triggersBattleGroupSolve":false,"isCutscene":false,"isFullPuzzle":false},{"puzName":"jabberwock_7","battleGroupName":"jabberwock","order":77,"round":"battles","unlockReq":6,"unlockMult":1,"srcUnlockGroupId":"jabberwock","dstUnlockGroupId":"none","cardUnlockGroupId":null,"answer":null,"triggersBattleGroupSolve":true,"isCutscene":false,"isFullPuzzle":false},{"puzName":"asteroid","battleGroupName":"asteroid","order":78,"round":"battles","unlockReq":70,"unlockMult":10,"srcUnlockGroupId":"main","dstUnlockGroupId":"main","cardUnlockGroupId":"booster5","answer":null,"triggersBattleGroupSolve":false,"isCutscene":false,"isFullPuzzle":true},{"puzName":"asteroid_1","battleGroupName":"asteroid","order":79,"round":"battles","unlockReq":-1,"unlockMult":1,"srcUnlockGroupId":"none","dstUnlockGroupId":"asteroid","cardUnlockGroupId":null,"answer":null,"triggersBattleGroupSolve":false,"isCutscene":false,"isFullPuzzle":false},{"puzName":"asteroid_2","battleGroupName":"asteroid","order":80,"round":"battles","unlockReq":1,"unlockMult":1,"srcUnlockGroupId":"asteroid","dstUnlockGroupId":"asteroid","cardUnlockGroupId":null,"answer":null,"triggersBattleGroupSolve":false,"isCutscene":false,"isFullPuzzle":false},{"puzName":"asteroid_3","battleGroupName":"asteroid","order":81,"round":"battles","unlockReq":2,"unlockMult":1,"srcUnlockGroupId":"asteroid","dstUnlockGroupId":"none","cardUnlockGroupId":null,"answer":null,"triggersBattleGroupSolve":true,"isCutscene":false,"isFullPuzzle":false},{"puzName":"bb_b","battleGroupName":"bb_b","order":82,"round":"battles","unlockReq":82,"unlockMult":10,"srcUnlockGroupId":"main","dstUnlockGroupId":"main","cardUnlockGroupId":"legendary-9","answer":null,"triggersBattleGroupSolve":false,"isCutscene":false,"isFullPuzzle":true},{"puzName":"moonick","battleGroupName":"moonick","order":83,"round":"battles","unlockReq":94,"unlockMult":10,"srcUnlockGroupId":"main","dstUnlockGroupId":"main","cardUnlockGroupId":"legendary-5","answer":null,"triggersBattleGroupSolve":false,"isCutscene":false,"isFullPuzzle":true},{"puzName":"moonick_1","battleGroupName":"moonick","order":84,"round":"battles","unlockReq":-1,"unlockMult":1,"srcUnlockGroupId":"none","dstUnlockGroupId":"moonick-phase1","cardUnlockGroupId":null,"answer":null,"triggersBattleGroupSolve":false,"isCutscene":false,"isFullPuzzle":false},{"puzName":"moonick_2","battleGroupName":"moonick","order":85,"round":"battles","unlockReq":-1,"unlockMult":1,"srcUnlockGroupId":"none","dstUnlockGroupId":"moonick-phase1","cardUnlockGroupId":null,"answer":null,"triggersBattleGroupSolve":false,"isCutscene":false,"isFullPuzzle":false},{"puzName":"moonick_3","battleGroupName":"moonick","order":86,"round":"battles","unlockReq":-1,"unlockMult":1,"srcUnlockGroupId":"none","dstUnlockGroupId":"moonick-phase1","cardUnlockGroupId":null,"answer":null,"triggersBattleGroupSolve":false,"isCutscene":false,"isFullPuzzle":false},{"puzName":"moonick_4","battleGroupName":"moonick","order":87,"round":"battles","unlockReq":-1,"unlockMult":1,"srcUnlockGroupId":"none","dstUnlockGroupId":"moonick-phase1","cardUnlockGroupId":null,"answer":null,"triggersBattleGroupSolve":false,"isCutscene":false,"isFullPuzzle":false},{"puzName":"moonick_5","battleGroupName":"moonick","order":88,"round":"battles","unlockReq":-1,"unlockMult":1,"srcUnlockGroupId":"none","dstUnlockGroupId":"moonick-phase1","cardUnlockGroupId":null,"answer":null,"triggersBattleGroupSolve":false,"isCutscene":false,"isFullPuzzle":false},{"puzName":"moonick_6","battleGroupName":"moonick","order":89,"round":"battles","unlockReq":-1,"unlockMult":1,"srcUnlockGroupId":"none","dstUnlockGroupId":"moonick-phase1","cardUnlockGroupId":null,"answer":null,"triggersBattleGroupSolve":false,"isCutscene":false,"isFullPuzzle":false},{"puzName":"moonick_7","battleGroupName":"moonick","order":90,"round":"battles","unlockReq":-1,"unlockMult":1,"srcUnlockGroupId":"none","dstUnlockGroupId":"moonick-phase1","cardUnlockGroupId":null,"answer":null,"triggersBattleGroupSolve":false,"isCutscene":false,"isFullPuzzle":false},{"puzName":"moonick_8","battleGroupName":"moonick","order":91,"round":"battles","unlockReq":-1,"unlockMult":1,"srcUnlockGroupId":"none","dstUnlockGroupId":"moonick-phase1","cardUnlockGroupId":null,"answer":null,"triggersBattleGroupSolve":false,"isCutscene":false,"isFullPuzzle":false},{"puzName":"moonick_9","battleGroupName":"moonick","order":92,"round":"battles","unlockReq":-1,"unlockMult":1,"srcUnlockGroupId":"none","dstUnlockGroupId":"moonick-phase1","cardUnlockGroupId":null,"answer":null,"triggersBattleGroupSolve":false,"isCutscene":false,"isFullPuzzle":false},{"puzName":"moonick_10","battleGroupName":"moonick","order":93,"round":"battles","unlockReq":-1,"unlockMult":1,"srcUnlockGroupId":"none","dstUnlockGroupId":"moonick-phase1","cardUnlockGroupId":null,"answer":null,"triggersBattleGroupSolve":false,"isCutscene":false,"isFullPuzzle":false},{"puzName":"moonick_11","battleGroupName":"moonick","order":94,"round":"battles","unlockReq":-1,"unlockMult":1,"srcUnlockGroupId":"none","dstUnlockGroupId":"moonick-phase1","cardUnlockGroupId":null,"answer":null,"triggersBattleGroupSolve":false,"isCutscene":false,"isFullPuzzle":false},{"puzName":"moonick_12","battleGroupName":"moonick","order":95,"round":"battles","unlockReq":-1,"unlockMult":1,"srcUnlockGroupId":"none","dstUnlockGroupId":"moonick-phase1","cardUnlockGroupId":null,"answer":null,"triggersBattleGroupSolve":false,"isCutscene":false,"isFullPuzzle":false},{"puzName":"moonick_13","battleGroupName":"moonick","order":96,"round":"battles","unlockReq":9,"unlockMult":1,"srcUnlockGroupId":"moonick-phase1","dstUnlockGroupId":"moonick-phase2","cardUnlockGroupId":null,"answer":null,"triggersBattleGroupSolve":false,"isCutscene":false,"isFullPuzzle":false},{"puzName":"moonick_14","battleGroupName":"moonick","order":97,"round":"battles","unlockReq":9,"unlockMult":1,"srcUnlockGroupId":"moonick-phase1","dstUnlockGroupId":"moonick-phase2","cardUnlockGroupId":null,"answer":null,"triggersBattleGroupSolve":false,"isCutscene":false,"isFullPuzzle":false},{"puzName":"moonick_15","battleGroupName":"moonick","order":98,"round":"battles","unlockReq":9,"unlockMult":1,"srcUnlockGroupId":"moonick-phase1","dstUnlockGroupId":"moonick-phase2","cardUnlockGroupId":null,"answer":null,"triggersBattleGroupSolve":false,"isCutscene":false,"isFullPuzzle":false},{"puzName":"moonick_16","battleGroupName":"moonick","order":99,"round":"battles","unlockReq":9,"unlockMult":1,"srcUnlockGroupId":"moonick-phase1","dstUnlockGroupId":"moonick-phase2","cardUnlockGroupId":null,"answer":null,"triggersBattleGroupSolve":false,"isCutscene":false,"isFullPuzzle":false},{"puzName":"moonick_17","battleGroupName":"moonick","order":100,"round":"battles","unlockReq":9,"unlockMult":1,"srcUnlockGroupId":"moonick-phase1","dstUnlockGroupId":"moonick-phase2","cardUnlockGroupId":null,"answer":null,"triggersBattleGroupSolve":false,"isCutscene":false,"isFullPuzzle":false},{"puzName":"moonick_18","battleGroupName":"moonick","order":101,"round":"battles","unlockReq":9,"unlockMult":1,"srcUnlockGroupId":"moonick-phase1","dstUnlockGroupId":"moonick-phase2","cardUnlockGroupId":null,"answer":null,"triggersBattleGroupSolve":false,"isCutscene":false,"isFullPuzzle":false},{"puzName":"moonick_19","battleGroupName":"moonick","order":102,"round":"battles","unlockReq":9,"unlockMult":1,"srcUnlockGroupId":"moonick-phase1","dstUnlockGroupId":"moonick-phase2","cardUnlockGroupId":null,"answer":null,"triggersBattleGroupSolve":false,"isCutscene":false,"isFullPuzzle":false},{"puzName":"moonick_20","battleGroupName":"moonick","order":103,"round":"battles","unlockReq":9,"unlockMult":1,"srcUnlockGroupId":"moonick-phase1","dstUnlockGroupId":"moonick-phase2","cardUnlockGroupId":null,"answer":null,"triggersBattleGroupSolve":false,"isCutscene":false,"isFullPuzzle":false},{"puzName":"moonick_21","battleGroupName":"moonick","order":104,"round":"battles","unlockReq":9,"unlockMult":1,"srcUnlockGroupId":"moonick-phase1","dstUnlockGroupId":"moonick-phase2","cardUnlockGroupId":null,"answer":null,"triggersBattleGroupSolve":false,"isCutscene":false,"isFullPuzzle":false},{"puzName":"moonick_22","battleGroupName":"moonick","order":105,"round":"battles","unlockReq":7,"unlockMult":1,"srcUnlockGroupId":"moonick-phase2","dstUnlockGroupId":"moonick-phase3","cardUnlockGroupId":null,"answer":null,"triggersBattleGroupSolve":false,"isCutscene":false,"isFullPuzzle":false},{"puzName":"moonick_23","battleGroupName":"moonick","order":106,"round":"battles","unlockReq":7,"unlockMult":1,"srcUnlockGroupId":"moonick-phase2","dstUnlockGroupId":"moonick-phase3","cardUnlockGroupId":null,"answer":null,"triggersBattleGroupSolve":false,"isCutscene":false,"isFullPuzzle":false},{"puzName":"moonick_24","battleGroupName":"moonick","order":107,"round":"battles","unlockReq":7,"unlockMult":1,"srcUnlockGroupId":"moonick-phase2","dstUnlockGroupId":"moonick-phase3","cardUnlockGroupId":null,"answer":null,"triggersBattleGroupSolve":false,"isCutscene":false,"isFullPuzzle":false},{"puzName":"moonick_final","battleGroupName":"moonick","order":108,"round":"battles","unlockReq":2,"unlockMult":1,"srcUnlockGroupId":"moonick-phase3","dstUnlockGroupId":"none","cardUnlockGroupId":null,"answer":null,"triggersBattleGroupSolve":true,"isCutscene":false,"isFullPuzzle":false},{"puzName":"the_swarm","battleGroupName":"the_swarm","order":109,"round":"battles","unlockReq":106,"unlockMult":10,"srcUnlockGroupId":"main","dstUnlockGroupId":"main","cardUnlockGroupId":"booster6","answer":null,"triggersBattleGroupSolve":false,"isCutscene":false,"isFullPuzzle":true},{"puzName":"spelling_bee","battleGroupName":"spelling_bee","order":110,"round":"battles","unlockReq":118,"unlockMult":10,"srcUnlockGroupId":"main","dstUnlockGroupId":"main","cardUnlockGroupId":"legendary-4","answer":null,"triggersBattleGroupSolve":false,"isCutscene":false,"isFullPuzzle":true},{"puzName":"blancmange","battleGroupName":"blancmange","order":111,"round":"battles","unlockReq":130,"unlockMult":10,"srcUnlockGroupId":"main","dstUnlockGroupId":"main","cardUnlockGroupId":"legendary-2","answer":null,"triggersBattleGroupSolve":false,"isCutscene":false,"isFullPuzzle":true},{"puzName":"infinitely_many_hogs_and_logs","battleGroupName":"infinitely_many_hogs_and_logs","order":112,"round":"battles","unlockReq":142,"unlockMult":10,"srcUnlockGroupId":"main","dstUnlockGroupId":"main","cardUnlockGroupId":"booster7","answer":null,"triggersBattleGroupSolve":false,"isCutscene":false,"isFullPuzzle":true},{"puzName":"infinitely_many_hogs_and_logs_1","battleGroupName":"infinitely_many_hogs_and_logs","order":113,"round":"battles","unlockReq":-1,"unlockMult":1,"srcUnlockGroupId":"none","dstUnlockGroupId":"infinitely_many_hogs_and_logs","cardUnlockGroupId":null,"answer":null,"triggersBattleGroupSolve":false,"isCutscene":false,"isFullPuzzle":false},{"puzName":"infinitely_many_hogs_and_logs_2","battleGroupName":"infinitely_many_hogs_and_logs","order":114,"round":"battles","unlockReq":1,"unlockMult":1,"srcUnlockGroupId":"infinitely_many_hogs_and_logs","dstUnlockGroupId":"infinitely_many_hogs_and_logs","cardUnlockGroupId":null,"answer":null,"triggersBattleGroupSolve":false,"isCutscene":false,"isFullPuzzle":false},{"puzName":"infinitely_many_hogs_and_logs_3","battleGroupName":"infinitely_many_hogs_and_logs","order":115,"round":"battles","unlockReq":2,"unlockMult":1,"srcUnlockGroupId":"infinitely_many_hogs_and_logs","dstUnlockGroupId":"infinitely_many_hogs_and_logs","cardUnlockGroupId":null,"answer":null,"triggersBattleGroupSolve":false,"isCutscene":false,"isFullPuzzle":false},{"puzName":"infinitely_many_hogs_and_logs_4","battleGroupName":"infinitely_many_hogs_and_logs","order":116,"round":"battles","unlockReq":3,"unlockMult":1,"srcUnlockGroupId":"infinitely_many_hogs_and_logs","dstUnlockGroupId":"none","cardUnlockGroupId":null,"answer":null,"triggersBattleGroupSolve":true,"isCutscene":false,"isFullPuzzle":false},{"puzName":"slime","battleGroupName":"slime","order":117,"round":"battles","unlockReq":154,"unlockMult":10,"srcUnlockGroupId":"main","dstUnlockGroupId":"main","cardUnlockGroupId":"legendary-3","answer":null,"triggersBattleGroupSolve":false,"isCutscene":false,"isFullPuzzle":true},{"puzName":"mister_penny","battleGroupName":"mister_penny","order":118,"round":"battles","unlockReq":166,"unlockMult":10,"srcUnlockGroupId":"main","dstUnlockGroupId":"main","cardUnlockGroupId":"legendary-11","answer":null,"triggersBattleGroupSolve":false,"isCutscene":false,"isFullPuzzle":true},{"puzName":"entering_the_water","battleGroupName":"entering_the_water","order":119,"round":"cutscenes","unlockReq":12,"unlockMult":1,"srcUnlockGroupId":"legendaries","dstUnlockGroupId":"pre_kero_complete","cardUnlockGroupId":null,"answer":null,"triggersBattleGroupSolve":false,"isCutscene":true,"isFullPuzzle":false},{"puzName":"kero","battleGroupName":"kero","order":120,"round":"battles","unlockReq":1,"unlockMult":1,"srcUnlockGroupId":"pre_kero_complete","dstUnlockGroupId":"kero_complete","cardUnlockGroupId":null,"answer":null,"triggersBattleGroupSolve":false,"isCutscene":false,"isFullPuzzle":true},{"puzName":"the_end","battleGroupName":"the_end","order":121,"round":"cutscenes","unlockReq":1,"unlockMult":1,"srcUnlockGroupId":"kero_complete","dstUnlockGroupId":"","cardUnlockGroupId":null,"answer":null,"triggersBattleGroupSolve":false,"isCutscene":true,"isFullPuzzle":false},{"puzName":"intra_pvp","battleGroupName":"intra_pvp","order":122,"round":"battles","unlockReq":-1,"unlockMult":1,"srcUnlockGroupId":"none","dstUnlockGroupId":"none","cardUnlockGroupId":null,"answer":null,"triggersBattleGroupSolve":false,"isCutscene":false,"isFullPuzzle":false},{"puzName":"intra_pvp_1","battleGroupName":"intra_pvp","order":123,"round":"battles","unlockReq":-1,"unlockMult":1,"srcUnlockGroupId":"none","dstUnlockGroupId":"none","cardUnlockGroupId":null,"answer":null,"triggersBattleGroupSolve":false,"isCutscene":false,"isFullPuzzle":false},{"puzName":"intra_pvp_2","battleGroupName":"intra_pvp","order":124,"round":"battles","unlockReq":-1,"unlockMult":1,"srcUnlockGroupId":"none","dstUnlockGroupId":"none","cardUnlockGroupId":null,"answer":null,"triggersBattleGroupSolve":false,"isCutscene":false,"isFullPuzzle":false},{"puzName":"pvp","battleGroupName":"pvp","order":125,"round":"battles","unlockReq":1,"unlockMult":1,"srcUnlockGroupId":"tutorial_complete","dstUnlockGroupId":"none","cardUnlockGroupId":null,"answer":null,"triggersBattleGroupSolve":false,"isCutscene":false,"isFullPuzzle":false},{"puzName":"instancer","battleGroupName":"instancer","order":126,"round":"battles","unlockReq":1,"unlockMult":1,"srcUnlockGroupId":"intro","dstUnlockGroupId":"none","cardUnlockGroupId":null,"answer":null,"triggersBattleGroupSolve":false,"isCutscene":false,"isFullPuzzle":false},{"puzName":"instancer1","battleGroupName":"instancer","order":127,"round":"battles","unlockReq":-1,"unlockMult":1,"srcUnlockGroupId":"none","dstUnlockGroupId":"none","cardUnlockGroupId":null,"answer":null,"triggersBattleGroupSolve":false,"isCutscene":false,"isFullPuzzle":false},{"puzName":"instancer2","battleGroupName":"instancer","order":128,"round":"battles","unlockReq":-1,"unlockMult":1,"srcUnlockGroupId":"none","dstUnlockGroupId":"none","cardUnlockGroupId":null,"answer":null,"triggersBattleGroupSolve":false,"isCutscene":false,"isFullPuzzle":false},{"puzName":"instancer3","battleGroupName":"instancer","order":129,"round":"battles","unlockReq":-1,"unlockMult":1,"srcUnlockGroupId":"none","dstUnlockGroupId":"none","cardUnlockGroupId":null,"answer":null,"triggersBattleGroupSolve":false,"isCutscene":false,"isFullPuzzle":false},{"puzName":"vanilla","battleGroupName":"vanilla","order":130,"round":"battles","unlockReq":-1,"unlockMult":1,"srcUnlockGroupId":"none","dstUnlockGroupId":"none","cardUnlockGroupId":null,"answer":null,"triggersBattleGroupSolve":false,"isCutscene":false,"isFullPuzzle":false},{"puzName":"test_battle","battleGroupName":"test_battle","order":131,"round":"battles","unlockReq":-1,"unlockMult":1,"srcUnlockGroupId":"none","dstUnlockGroupId":"none","cardUnlockGroupId":"test-group","answer":null,"triggersBattleGroupSolve":false,"isCutscene":false,"isFullPuzzle":false}],"battleGroups":[{"battleGroupName":"treasure_chest","displayName":"The Treasure Chest","emoji":"","mapPos":{"x":50,"y":72.39819005},"isLegendary":false,"numPuzzles":1,"solveReq":0},{"battleGroupName":"tutorial","displayName":"Tutorial","emoji":"🔰","mapPos":{"x":74.01960784,"y":81.37254902},"isLegendary":false,"numPuzzles":6,"solveReq":1},{"battleGroupName":"first_answer","displayName":"Your First ANSWER","emoji":"","mapPos":{"x":49.01960784,"y":182.8808446},"isLegendary":false,"numPuzzles":1,"solveReq":0},{"battleGroupName":"first_legendary","displayName":"Your First Legendary","emoji":"","mapPos":{"x":49.01960784,"y":116.892911},"isLegendary":false,"numPuzzles":1,"solveReq":0},{"battleGroupName":"trigram_hell","displayName":"Trigram Hell","emoji":"🇰🇷","mapPos":{"x":29.41176471,"y":201.3574661},"isLegendary":false,"numPuzzles":1,"solveReq":0},{"battleGroupName":"petroglyph","displayName":"Petroglyph","emoji":"🪨","mapPos":{"x":23.0015083,"y":234.1628959},"isLegendary":false,"numPuzzles":1,"solveReq":0},{"battleGroupName":"limericks","displayName":"Limericks","emoji":"🍋","mapPos":{"x":59.57767722,"y":249.2458522},"isLegendary":false,"numPuzzles":1,"solveReq":0},{"battleGroupName":"make_your_own_star_battle","displayName":"Make Your Own Star Battle","emoji":"🌟","mapPos":{"x":32.05128205,"y":282.0512821},"isLegendary":false,"numPuzzles":1,"solveReq":0},{"battleGroupName":"now_i_know","displayName":"Now I Know","emoji":"🔤","mapPos":{"x":30.54298643,"y":307.6923077},"isLegendary":false,"numPuzzles":1,"solveReq":0},{"battleGroupName":"gessner_mom","displayName":"Gessner Mom","emoji":"🛣️","mapPos":{"x":71.64404223,"y":321.0784314},"isLegendary":false,"numPuzzles":1,"solveReq":0},{"battleGroupName":"console-ation_prize","displayName":"Console-ation Prize","emoji":"📈","mapPos":{"x":81.82503771,"y":369.9095023},"isLegendary":false,"numPuzzles":1,"solveReq":0},{"battleGroupName":"faces","displayName":"Faces","emoji":"💵","mapPos":{"x":46.7571644,"y":373.6802413},"isLegendary":false,"numPuzzles":1,"solveReq":0},{"battleGroupName":"beige_flags","displayName":"Beige Flags","emoji":"🟫","mapPos":{"x":29.41176471,"y":425.7164404},"isLegendary":false,"numPuzzles":1,"solveReq":0},{"battleGroupName":"animal_shelter","displayName":"Animal Shelter","emoji":"🕸️","mapPos":{"x":53.92156863,"y":490.1960784},"isLegendary":false,"numPuzzles":1,"solveReq":0},{"battleGroupName":"vent","displayName":"#vent","emoji":"⌨️","mapPos":{"x":31.29713424,"y":503.7707391},"isLegendary":false,"numPuzzles":1,"solveReq":0},{"battleGroupName":"paint_by_numbers","displayName":"Paint By Numbers","emoji":"🎨","mapPos":{"x":30.92006033,"y":536.9532428},"isLegendary":false,"numPuzzles":1,"solveReq":0},{"battleGroupName":"bovine_social_media_corp","displayName":"Bovine Social Media Corp","emoji":"✖️","mapPos":{"x":29.78883861,"y":588.9894419},"isLegendary":false,"numPuzzles":1,"solveReq":0},{"battleGroupName":"op_pls_nerf","displayName":"OP pls nerf","emoji":"📊","mapPos":{"x":72.02111614,"y":594.2684766},"isLegendary":false,"numPuzzles":1,"solveReq":0},{"battleGroupName":"gausss_sketches","displayName":"Gauss's Sketches","emoji":"🧮","mapPos":{"x":71.64404223,"y":647.4358974},"isLegendary":false,"numPuzzles":1,"solveReq":0},{"battleGroupName":"postseason_tournaments","displayName":"Postseason Tournaments","emoji":"🥊","mapPos":{"x":56.56108597,"y":672.8883861},"isLegendary":false,"numPuzzles":1,"solveReq":0},{"battleGroupName":"two_worlds_collide","displayName":"Two Worlds Collide","emoji":"💫","mapPos":{"x":31.67420814,"y":702.4886878},"isLegendary":false,"numPuzzles":1,"solveReq":0},{"battleGroupName":"areciboar","displayName":"ARECIBOAR","emoji":"📡","mapPos":{"x":53.73303167,"y":730.3921569},"isLegendary":false,"numPuzzles":1,"solveReq":0},{"battleGroupName":"mastery_tree","displayName":"Mastery Tree","emoji":"🃏","mapPos":{"x":52.48868778,"y":215.3092006},"isLegendary":true,"postBattleDialogue":"Yay! You befriended a legendary!","numPuzzles":10,"solveReq":0},{"battleGroupName":"angry_boarry_farmer","displayName":"Angry Boarry Farmer","emoji":"🧑‍🌾","mapPos":{"x":70.13574661,"y":103.6953243},"isLegendary":false,"preBattleDialogue":"kero: I’m not sure what that Boarry Farmer is angry about, but boy do they look angry! Maybe if you use the uwuand on them, you can get them under control?","postBattleDialogue":"That farmer definitely looks calmer now. I think it worked! $(*°▽°*)$","numPuzzles":1,"solveReq":0},{"battleGroupName":"dargle","displayName":"Dargle","emoji":"🐢","mapPos":{"x":30.54298643,"y":128.2051282},"isLegendary":true,"preBattleDialogue":"Plergle, turgle bargle. The crergle you accorgle mergle to dorgle urgle argle. \\nkero: Sorry, I don’t really speak Jargle... $(⁄ ⁄•⁄ω⁄•⁄ ⁄)$","postBattleDialogue":"Dargle is now our friend!!... I think? $┐('～\`;)┌$","numPuzzles":5,"solveReq":1},{"battleGroupName":"beebay_fulfillment_center","displayName":"beeBay Fulfillment Center","emoji":"📦","mapPos":{"x":73.15233786,"y":135.7466063},"isLegendary":false,"preBattleDialogue":"Make way! These deliveries have got P, L, A, C, E, S to bee!\\nkero: We’re going to have to clear out all the rooms if we want to beefriend these bees!","postBattleDialogue":"It looks like you managed to convince some of them to pack their bags and come along with us! $(ﾉ◕ヮ◕)ﾉ*:･ﾟ✧$","numPuzzles":13,"solveReq":13},{"battleGroupName":"miss_yu","displayName":"Miss Yu","emoji":"🤠","mapPos":{"x":32.05128205,"y":153.8461538},"isLegendary":true,"preBattleDialogue":"kero: I hear Miss Yu keeps a ranch somewhere ’round these parts. I’m sure she won’t mind a visitor!","postBattleDialogue":"Now that Miss Yu is our friend, I-- I mean *we* will be udderly unstoppable! $(o´▽\`o)$","numPuzzles":1,"solveReq":0},{"battleGroupName":"gnutmeg_tree","displayName":"Gnutmeg Tree","emoji":"🌲","mapPos":{"x":80.69381599,"y":177.9788839},"isLegendary":false,"preBattleDialogue":"kero: Hi there! $ヾ(*'▽'*)$ We could use your help!\\n...hi there... 🌷$(*'▽'*)$ ...we could use your help...\\nkero: That’s what I said... $(￢_￢;)$\\n...that’s what i said... $(￢_￢🥀)$","postBattleDialogue":"STOP COPYING ME!!!!\\n... Oh, whew, it’s over. I mean, yay! New friends! $(*≧ω≦*)$","numPuzzles":1,"solveReq":0},{"battleGroupName":"coloring","displayName":"Coloring","emoji":"🖍️","mapPos":{"x":70.51282051,"y":194.1930618},"isLegendary":true,"preBattleDialogue":"kero: Hi there! $ヾ(*'▽'*)$ We could use your help!\\n...\\nkero: ... Hm, they’re not responding. Could you get their attention?","postBattleDialogue":"Good. We’ve put them in their place. As our friend!! $(╯✧▽✧)╯$","numPuzzles":1,"solveReq":0},{"battleGroupName":"spirit_of_the_vines","displayName":"Spirit of the Vines","emoji":"🌿","mapPos":{"x":75.7918552,"y":269.2307692},"isLegendary":false,"preBattleDialogue":"...vile creature... ...begone...🌱🌿\\nkero: Well that’s not very nice. Looks like *someone* could use more uwu!","postBattleDialogue":"Well, I guess they won’t need to be guard-en that place anymore. Eh? Eh? Get it? $(｡•̀ᴗ-)✧ $","numPuzzles":5,"solveReq":1},{"battleGroupName":"othello","displayName":"Othello","emoji":"⚪","mapPos":{"x":71.64404223,"y":292.2322775},"isLegendary":true,"preBattleDialogue":"Intrudder! Moove out, or you’ll be seeing spots!\\nkero: Othello’s one tough cow! We’ll hafta find another way to get to the other side of this ’un!","postBattleDialogue":"Good job flipping Othello over to our side! $ヽ(^o^)ρ┳┳σ(^o^)ノ$","numPuzzles":1,"solveReq":0},{"battleGroupName":"jabberwock","displayName":"Jabberwock","emoji":"🔣","mapPos":{"x":56.56108597,"y":313.3484163},"isLegendary":true,"preBattleDialogue":"“Gadzooks, is that the dog-♡ed varlet of yore?”\\nkero: Owo was that an insult or a compliment? Eh whatever, it’s uwu time!","postBattleDialogue":"Take that you dog-farted carseat for ④!\\n...Sorry $(*_ _)人$ I was just trying to figure out how to talk like Jabberwock $|･ω･)$","numPuzzles":7,"solveReq":1},{"battleGroupName":"asteroid","displayName":"Asteroid","emoji":"☄️","mapPos":{"x":85.21870287,"y":340.5354449},"isLegendary":false,"preBattleDialogue":"dino: I say, is that an asteroid, whacked from the past? Quite the predicament, this is.","postBattleDialogue":"Looks like the dinos will assist you, now that you’ve defeated them! I mean, helped them! Sorry, force of habit. $╮(︶▽︶)╭$","numPuzzles":3,"solveReq":1},{"battleGroupName":"bb_b","displayName":"bb b","emoji":"👶","mapPos":{"x":63.46153846,"y":420.1357466},"isLegendary":true,"preBattleDialogue":"the world is so scary. i always l, o, s, e. $t_t$ i don’t wanna leave my hive...","postBattleDialogue":"My old master once told me that the greatest gains sometimes come from defeats. I’m not really sure what she was getting at, but I guess maybe that applies today? $(¯ . ¯٥)$","numPuzzles":1,"solveReq":0},{"battleGroupName":"moonick","displayName":"Moonick","emoji":"🆓","mapPos":{"x":73.83107089,"y":452.4886878},"isLegendary":true,"preBattleDialogue":"These pastures need to get up to code, stat! The Agency will not tolerate such flagrant violations!","postBattleDialogue":"Your pasture eyes have satisfied all of Moonick’s constraints! $(^_<)〜☆$ Now he is ours! Our friend, that is!","numPuzzles":25,"solveReq":1},{"battleGroupName":"the_swarm","displayName":"The Swarm","emoji":"🐎","mapPos":{"x":66.36500754,"y":527.9034691},"isLegendary":false,"preBattleDialogue":"*buzz buzz buzz*\\nkero: Is that a LOT of bees off in the distance?\\n*B, U, Z, Z! B, U, Z, Z! B, U, Z, Z!*\\nkero: AHH! They’re getting closer!! $＼(º □ º l|l)/$","postBattleDialogue":"Friends! Friends! So many friends~!!! $°˖✧◝(⁰▿⁰)◜✧˖°$","numPuzzles":1,"solveReq":0},{"battleGroupName":"spelling_bee","displayName":"Spelling Bee","emoji":"🧸","mapPos":{"x":47.13423831,"y":562.2171946},"isLegendary":true,"preBattleDialogue":"I spy, I S, P, Y, the B, E, A, R, S! Bees! Get in L, I, N, E and raise some spell!","postBattleDialogue":"Hooray for V, I, C, T, O, R, Y! Oh no, they’ve got bee doing it too! $( ◡‿◡ *)$\\nAll our friendship must be working! $(･ω<)☆$","numPuzzles":1,"solveReq":0},{"battleGroupName":"blancmange","displayName":"Blancmange","emoji":"♟️","mapPos":{"x":49.77375566,"y":618.7782805},"isLegendary":true,"preBattleDialogue":"Away with you, wicked one! MOO SHALL NOT PASS!!!","postBattleDialogue":"Wow! Blancmange’s moo-gicks are now m--ours! $(〃＾▽＾〃)$","numPuzzles":1,"solveReq":0},{"battleGroupName":"infinitely_many_hogs_and_logs","displayName":"Infinitely Many Hogs (and Logs)","emoji":"🪵","mapPos":{"x":39.21568627,"y":653.8461538},"isLegendary":false,"preBattleDialogue":"Hog knows ONE Hog not enough to stop you, so Hog bring INFINITELY MANY Hog. And Log. Hog SMART!","postBattleDialogue":"With those infinite hogs out of the way, we’ve gained power. INFINITE POWER!! And friendship! $(ﾉ≧∀≦)ﾉ ‥…━━━★$","numPuzzles":4,"solveReq":1},{"battleGroupName":"slime","displayName":"Slime","emoji":"🧪","mapPos":{"x":74.28355958,"y":711.9155354},"isLegendary":true,"preBattleDialogue":"kero: What’s this? A vat of Boarry sludge has congealed into a giant, sentient slime! $(°ロ°) !$","postBattleDialogue":"That was a lot more slime than I was expecting. But more slime is more power... $( ಠ ͜ʖ ಠ)$","numPuzzles":1,"solveReq":0},{"battleGroupName":"mister_penny","displayName":"Mister Penny","emoji":"🪙","mapPos":{"x":25.26395173,"y":743.9668175},"isLegendary":true,"preBattleDialogue":"kero: I’d no idea the Boars kept all their spoils this deep! Let’s break into their treasury and steal the loot for ourselves!","postBattleDialogue":"Mister Penny tried to run home and tell his wife he “retired” and is living off his “investments”... Little does she know he’ll be working the junkyard as our friend forever! $ᕕ(｀∇´)ᕗ$","numPuzzles":1,"solveReq":0},{"battleGroupName":"entering_the_water","displayName":"Entering the Water","emoji":"","mapPos":{"x":50,"y":771.1161388},"isLegendary":false,"numPuzzles":1,"solveReq":0},{"battleGroupName":"kero","displayName":"Kero","emoji":"🐉","mapPos":{"x":50,"y":867.2699849},"isLegendary":false,"preBattleDialogue":"captain pi: The legendaries stand united for the first time in history! Let us join our hands and vanquish this evil once and for all!","numPuzzles":1,"solveReq":0},{"battleGroupName":"the_end","displayName":"The End","emoji":"","mapPos":{"x":50,"y":894.4193062},"isLegendary":false,"numPuzzles":1,"solveReq":0},{"battleGroupName":"intra_pvp","displayName":"Intra-team PvP","emoji":"","isLegendary":false,"numPuzzles":2,"solveReq":0},{"battleGroupName":"pvp","displayName":"PvP Arena","emoji":"","mapPos":{"x":88.34841629,"y":151.2066365},"isLegendary":false,"numPuzzles":1,"solveReq":0},{"battleGroupName":"instancer","displayName":"Instancer","emoji":"","mapPos":{"x":30.16591252,"y":95.02262443},"isLegendary":false,"numPuzzles":3,"solveReq":0},{"battleGroupName":"vanilla","displayName":"Vanilla","emoji":"","isLegendary":false,"numPuzzles":1,"solveReq":0},{"battleGroupName":"test_battle","displayName":"Test Battle Please Ignore","emoji":"","isLegendary":false,"numPuzzles":1,"solveReq":0}]}`;const hl=JSON.parse(ml);var pl=`[{"name":"boarry-farmer","displayName":"Boarry Farmer","text":"This Creature can only Attack Units in its column.\\n*“Want to try my strawboarries? Or my raspboarries? Rhuboarb? Boarnanas?”*","power":3,"cost":[".","R"],"shell":0,"maxHealth":2,"color":"R","capturable":true,"implemented":true,"cardUnlockGroupId":"booster1"},{"name":"tusk-enhancement","displayName":"Tusk Enhancement","text":"When this Creature is Summoned, other Creatures in its column gain +1 Power.\\n*Shinier, sturdier, pokier.*","power":0,"cost":[".","R","R"],"shell":0,"maxHealth":2,"color":"R","capturable":true,"implemented":true,"cardUnlockGroupId":"booster1"},{"name":"eager-beever","displayName":"Eager Beever","text":"When a Friendly Creature moves, it may move to an Empty Space Adjacent to this Creature.\\n*“Let’s get it D, O, N, E, yes yes!”*","power":0,"cost":["Y"],"shell":0,"maxHealth":2,"color":"Y","capturable":true,"implemented":true,"cardUnlockGroupId":"booster2"},{"name":"king-bee","displayName":"King Bee (who sends his regards)","text":"When Attacking, Defender gets -1 Power.\\n*“i will b out til next week, ask queen b if u need the army”*","power":2,"cost":[".",".",".","Y","Y"],"shell":0,"maxHealth":5,"color":"Y","capturable":true,"implemented":true,"cardUnlockGroupId":"booster2"},{"name":"nightshade","displayName":"Nightshade","text":"Cannot Attack.\\nSpecial: Choose an Enemy Unit. Discard a random card to deal Damage to it equal to this Creature’s Power.\\n*Seek out the midnight bloom.*","power":3,"cost":["P","P"],"shell":0,"maxHealth":3,"color":"P","capturable":true,"implemented":true,"cardUnlockGroupId":"booster3"},{"name":"ultra-violet","displayName":"Ultra Violet","text":"When Attacking, Defender does not Ready on start of next turn.\\n*“...power, strength... 🌼...flowers, earth... ”*","power":2,"cost":[".",".",".","P","P"],"shell":0,"maxHealth":4,"color":"P","capturable":true,"implemented":true,"cardUnlockGroupId":"booster3"},{"name":"sapphire-rose","displayName":"Sapphire Rose","text":"Flex: Draw a card. Deal 2 Damage to this Creature.\\n*This mischievous flower spirit appears like a curious child and vanishes like a hooded thief.*","power":0,"cost":["P"],"shell":0,"maxHealth":2,"color":"P","capturable":true,"implemented":true,"cardUnlockGroupId":"booster4"},{"name":"bell-flower","displayName":"Bell Flower","text":"When Destroyed, draw a card.\\n*Boarry Farmers know that when the Bell Flower begins to chime, the spring harvest has arrived.*","power":2,"cost":[".","P"],"shell":0,"maxHealth":3,"color":"P","capturable":true,"implemented":true,"cardUnlockGroupId":"booster4"},{"name":"realistic-rex","displayName":"Realistic Rex","text":"{G}, Special: Choose an Unprotected Enemy Unit. Choose an Unprotected Enemy Unit. Attack the first Unit. Attack the second Unit.\\n*Now more historically accurate!*","power":2,"cost":[".",".","G","G"],"shell":0,"maxHealth":5,"color":"G","capturable":true,"implemented":true,"cardUnlockGroupId":"booster5"},{"name":"thesaurus","displayName":"Thesaurus","text":"When this Creature Destroys another Creature, gain {?}.\\n*“Ay, so you need a word? Desire a term? Fancy a phrase? Lack a lexeme?”*","power":5,"cost":[".",".",".","G","G"],"shell":0,"maxHealth":5,"color":"G","capturable":true,"implemented":true,"cardUnlockGroupId":"booster5"},{"name":"bee-rider","displayName":"Bee Rider","text":"Flex: Move to an Adjacent Space. Can only be done once per turn.\\n*Open skies await!*","power":2,"cost":["Y","Y"],"shell":0,"maxHealth":2,"color":"Y","capturable":true,"implemented":true,"cardUnlockGroupId":"booster6"},{"name":"swarm-tactics","displayName":"Swarm Tactics","text":"When Damaged by a Creature, that Creature takes 1 Damage.\\n{Y}, Special: Until the start of your next turn, this Creature additionally Protects Friendly Units in Friendly Spaces in the columns to its left and right from Units in Enemy Spaces.\\n*On the day of the Final Swarming, the sky will darken and the air will be filled with a deafening buzz.*","power":2,"cost":[".","Y","Y"],"shell":0,"maxHealth":5,"color":"Y","capturable":true,"implemented":true,"cardUnlockGroupId":"booster6"},{"name":"log-on-a-hog","displayName":"Log on a Hog","text":"When Destroyed, Summon a Hog in this Creature’s Space.\\n*You don’t see that every day!*","power":1,"cost":[".",".","P"],"shell":0,"maxHealth":2,"color":"P","capturable":true,"implemented":true,"cardUnlockGroupId":"booster7"},{"name":"hog-on-a-log","displayName":"Hog on a Log","text":"This Creature can only Attack Units in its column.\\nWhen Destroyed, Summon a Log in this Creature’s Space.\\n*Now this Hog is going places!*","power":2,"cost":[".",".","R"],"shell":0,"maxHealth":1,"color":"R","capturable":true,"implemented":true,"cardUnlockGroupId":"booster7"},{"name":"nam-pam-bee","displayName":"Nam & Pam Bee","text":"On start of turn, if this Creature was Damaged last turn, gain {Y}. *(Only if it’s still on the field.)*\\n*“On Fridays we play B, O, A, R, D, G, A, M, Es with Miss Yu.”*","power":2,"cost":["Y","Y"],"shell":0,"maxHealth":3,"color":"Y","capturable":true,"implemented":true,"cardUnlockGroupId":"fish1"},{"name":"murray","displayName":"Murray","text":"{(W/B)}, Flex: Attack. Use at most once per turn.\\n{RYPGWB}, Special: Choose an Enemy Base. Destroy it.\\n*Murray found that he had much more ability on the tennis court than in the royal Court of Cows.*","power":1,"cost":["B","B","W/B","W","W"],"shell":0,"maxHealth":7,"color":"W/B","capturable":true,"implemented":true,"cardUnlockGroupId":"fish10"},{"name":"quantum-butter-churner","displayName":"Quantum Butter Churner","text":"This Creature can only Attack if it is Unprotected.\\n*The key to getting smooth cream is the rotation by 1/√2 + i/√2.*","power":4,"cost":["B","W/B","W/B","W"],"shell":0,"maxHealth":6,"color":"W/B","capturable":true,"implemented":true,"cardUnlockGroupId":"fish11"},{"name":"boarnana-tree","displayName":"Boarnana Tree","text":"{R}, Flex: Other Friendly Creatures in this Creature’s row gain +1 Health. Take 1 Damage.\\n*Be careful not to upset the unripe boarnanas!*","power":0,"cost":[".",".","R"],"shell":0,"maxHealth":1,"color":"R","capturable":true,"implemented":true,"cardUnlockGroupId":"fish12"},{"name":"glass-of-moocha","displayName":"Glass of Moocha","text":"Special: Gain {BW}. Take 1 Damage.\\n*Tired bees and boars start their morning with a bit of cowfee.*","power":0,"cost":["B","."],"shell":0,"maxHealth":1,"color":"B","capturable":true,"implemented":true,"cardUnlockGroupId":"fish13"},{"name":"glass-of-moo","displayName":"Glass of Moo","text":"Special: Gain {BW}. Take 1 Damage.\\n*Torrents of milk flow thicker than water in some parts of the cave.*","power":0,"cost":["W","."],"shell":0,"maxHealth":1,"color":"W","capturable":true,"implemented":true,"cardUnlockGroupId":"fish14"},{"name":"oklahoma-tusks","displayName":"Oklahoma Tusks","text":"{R}, Flex: Gain +1 Power for this turn only.\\n{R}, Special: Attack all Enemy Creatures in this Creature’s column.\\n*Two-time tusk wrestling champion Oklahoma Tusks is also famous for a line of raisin-based energy bars.*","power":2,"cost":[".",".","R","R"],"shell":0,"maxHealth":6,"color":"R","capturable":true,"implemented":true,"cardUnlockGroupId":"fish15"},{"name":"dino-nugget","displayName":"Dino Nugget","text":"When this Creature is Summoned, other {G} Creatures in its row gain +1 Health.\\n*Made with certified organic dinosaurs (non-GMO).*","power":1,"cost":["G"],"shell":0,"maxHealth":1,"color":"G","capturable":true,"implemented":true,"cardUnlockGroupId":"fish16"},{"name":"lady-jane","displayName":"Lady Jane","text":"{(W/B)}, Special: Choose an Enemy Unit that has taken Damage this turn. Deal Damage to it equal to this Creature’s Power +1.\\n*Maintaining balance between choco and vanilla cows is a cultural responsibility.*","power":1,"cost":["W/B"],"shell":0,"maxHealth":1,"color":"W/B","capturable":true,"implemented":true,"cardUnlockGroupId":"fish17"},{"name":"hog-hog","displayName":"Hog Hog","text":"This Creature can only Attack Units in its column.\\nWhen Destroyed, add a Hog card to hand.\\n*Hog Hog hogs Hog; Hog hogs Hog Hog.*","power":2,"cost":[".","R"],"shell":0,"maxHealth":1,"color":"R","capturable":true,"implemented":true,"cardUnlockGroupId":"fish18"},{"name":"nice-cow","displayName":"Nice Cow","text":"{B.}, Special: Attack. Adjacent Friendly Creatures gain +1 Power.\\n*Also known as vache.*","power":1,"cost":["B","B"],"shell":0,"maxHealth":3,"color":"B","capturable":true,"implemented":true,"cardUnlockGroupId":"fish2"},{"name":"quail-aboard-fiery-steeds","displayName":"Quail Aboard Fiery Steeds","text":"{RR}, Special: Attack all Unprotected Enemy Units in this Creature’s column and the two adjacent columns.\\n*Quail before the quail!*","power":3,"cost":["R","R","R","R","R"],"shell":0,"maxHealth":9,"color":"R","capturable":true,"implemented":true,"cardUnlockGroupId":"fish3"},{"name":"touch-grass","displayName":"Touch Grass","text":"{P}, Special: Choose a Protected Creature. Attack it.\\n*[gentle caressing] “Oooooooooooooh.”*","power":1,"cost":["P"],"shell":0,"maxHealth":1,"color":"P","capturable":true,"implemented":true,"cardUnlockGroupId":"fish4"},{"name":"rude-cow","displayName":"Rude Cow","text":"{W}, Special: Attack. Adjacent Friendly Creatures gain +1 Health.\\n*What do you call a rude cow? Beef jerky.*","power":4,"cost":[".",".","W","W"],"shell":0,"maxHealth":5,"color":"W","capturable":true,"implemented":true,"cardUnlockGroupId":"fish5"},{"name":"king-of-bison","displayName":"King of Bison, Grand Overseer of the Emerald Grasslands, Lord of the Horned Throne, Protector of Bovine Nobility, Keeper of Sacred Meadows, Emissary of Moonlit Pastures, Sovereign Guardian of the Seven Ruminant Realms, Conqueror of the Golden Haystacks, and Embodiment of the Eternal Herd’s Spirit","text":"*Long live the king!*","power":1,"cost":["B","B","W/B","W/B","W","W"],"shell":0,"maxHealth":10,"color":"W/B","capturable":true,"implemented":true,"cardUnlockGroupId":"fish6"},{"name":"queen-of-bison","displayName":"Queen of Bison, Supreme Sovereign of the Verdant Pastures, Guardian of the Grazing Lands, Ruler of the Majestic Herds, Mistress of the Bovine Dominion, Regent of Fertile Meadows, Enchantress of the Sacred Clover Fields, Seraphic Patroness of Milk and Butter, Monarch of Hooves and Horns, Empress of Mooo-nifest Destiny, Lady of Lush Plains and Grazing Glory","text":"*Her Moojesty.*","power":10,"cost":["B","B","W/B","W/B","W","W"],"shell":0,"maxHealth":1,"color":"W/B","capturable":true,"implemented":true,"cardUnlockGroupId":"fish7"},{"name":"switch-boar-d","displayName":"Switch Boar’d","text":"{R}, Special: Choose an Unprotected Enemy Unit, then choose a Friendly Unit Adjacent to this Creature. Attack that Enemy Unit. Swap this Creature with that Friendly Unit.\\n*Is it immoral to flip the switch?*","power":1,"cost":["R"],"shell":0,"maxHealth":1,"color":"R","capturable":true,"implemented":true,"cardUnlockGroupId":"fish8"},{"name":"giraffatitan","displayName":"Giraffatitan","text":"Special: Attack a Protected Creature in this column.\\n*Giraffatitan and Gigabun, the two largest known herbivores, together consume 85% of all plant matter.*","power":2,"cost":[".",".","G"],"shell":0,"maxHealth":5,"color":"G","capturable":true,"implemented":true,"cardUnlockGroupId":"fish9"},{"name":"dargle","displayName":"Dargle, Dargle Deargle","text":"Legendargle. \\nWhergle this Crergle deargle Dargle, it deargle that argle of Dargle to itsergle, and increargle its Porgle by the sargle argle.","power":2,"cost":["G","G","G"],"shell":0,"maxHealth":3,"color":"G","capturable":true,"implemented":true,"cardUnlockGroupId":"legendary-1"},{"name":"othello","displayName":"Othello, Mimic Moonipulator","text":"Legendairy. \\nSpecial: Choose another Friendly Creature and an Empty Friendly Space. Summon a copy of that Creature on that Space. Give the copy “Attacks for free. On end of turn, Destroy this Creature” and Ready it.","power":1,"cost":[".","W","W","W"],"shell":0,"maxHealth":1,"color":"W","capturable":true,"implemented":true,"cardUnlockGroupId":"legendary-10"},{"name":"mister-penny","displayName":"Mister Penny, Scrapyard Refurbisher","text":"Legendary. \\nFlex: Choose a Friendly Base. Deal 1 Damage to it. Gain {?}.","power":1,"cost":[".","R","R","R"],"shell":0,"maxHealth":1,"color":"R","capturable":true,"implemented":true,"cardUnlockGroupId":"legendary-11"},{"name":"master-bramble","displayName":"Master Bramble, Olive Branch","text":"Legendary.","power":11,"cost":["P","P","P","P","P","P","P","P","P","P","P"],"shell":0,"maxHealth":11,"color":null,"capturable":true,"implemented":true,"cardUnlockGroupId":"legendary-12"},{"name":"kero--floppy","displayName":"Kero, Floppy Fish","text":"Legendary.\\nIf Kero is Summoned Touching eight Friendly Legendaries, transform into Super Kero.","power":0,"cost":["Y","Y","Y","B","B","B","W","W","W","P","P","P","G","G","G","R","R","R"],"shell":0,"maxHealth":1,"color":null,"capturable":true,"implemented":true,"cardUnlockGroupId":"legendary-13"},{"name":"captain-pi","displayName":"Captain Pi","text":"Legendary.","power":35,"cost":[".",".",".","Y","Y","B","B","W","W","P","P","G","G","R","R"],"shell":0,"maxHealth":5,"color":null,"capturable":true,"implemented":true,"cardUnlockGroupId":"legendary-14"},{"name":"professor-galactic","displayName":"Professor Galactic","text":"Legendary.","power":20,"cost":[".",".",".",".",".",".","Y","B","W","P","G","R"],"shell":0,"maxHealth":17,"color":null,"capturable":true,"implemented":true,"cardUnlockGroupId":"legendary-15"},{"name":"stalactica","displayName":"Stalactica, The Ninth Continent","text":"Legendary.\\nOn start of turn, this Creature takes 1 Damage and increases its Power by its Current Health.","power":0,"cost":[".",".",".",".",".",".",".",".","."],"shell":0,"maxHealth":9,"color":null,"capturable":true,"implemented":true,"cardUnlockGroupId":"legendary-16"},{"name":"blancmange","displayName":"Blancmange, Black Mage","text":"Legendairy.\\nFlex: Choose another Friendly Creature. Change it to an Enemy Creature. Move it to its reflected Space. Can only be done once. Can only be done on turn this Creature is Summoned.\\nOn end of turn, if this Creature did not Flex, destroy it.\\n*That’s a lotta blamage!*","power":5,"cost":[".",".","B","B","B"],"shell":0,"maxHealth":5,"color":"B","capturable":true,"implemented":true,"cardUnlockGroupId":"legendary-2"},{"name":"slime--slime","displayName":"Slime, Duplication Glitch","text":"Legendary. You may put any number of copies of this card into your deck.\\nWhen this Creature is Summoned, draw a card.\\nWhen Attacking, gain {R}.","power":1,"cost":[".",".","R","R","R"],"shell":0,"maxHealth":1,"color":"R","capturable":true,"implemented":true,"cardUnlockGroupId":"legendary-3"},{"name":"spelling-bee","displayName":"Spelling Bee, Lexicographer’s Wrath","text":"Legendary. \\nAfter 2 turns, deal 2 Damage to all Creatures in Touching Spaces.","power":0,"cost":["Y"],"shell":0,"maxHealth":1,"color":"Y","capturable":true,"implemented":true,"cardUnlockGroupId":"legendary-4"},{"name":"moonick","displayName":"Moonick, Auditor for the Ruminant Revenue Agency","text":"Legendairy. \\nWhenever you Summon a Creature, if any of the top seven cards of your deck has the same name as that Creature, Summon one at no cost to a random Friendly Empty Space.","power":1,"cost":[".",".","W","W"],"shell":0,"maxHealth":1,"color":"W","capturable":true,"implemented":true,"cardUnlockGroupId":"legendary-5"},{"name":"jabberwock","displayName":"Jabberwock, Enigmatic Guardian","text":"Legendary. \\nSpecial: Choose a Friendly Creature. The next time that Creature is Damaged this turn, instead, it takes §∮∮ Damage.","power":1,"cost":["G"],"shell":0,"maxHealth":1,"color":"G","capturable":true,"implemented":true,"cardUnlockGroupId":"legendary-6"},{"name":"miss-yu","displayName":"Miss Yu, Udder Uplifter","text":"Legendairy.\\nWhen this Creature gains Health, Ready it and gain +1 Power.","power":1,"cost":["B"],"shell":0,"maxHealth":2,"color":"B","capturable":true,"implemented":true,"cardUnlockGroupId":"legendary-7"},{"name":"coloring","displayName":"Coloring, Motivational Speakerria","text":"Legendary. \\nFlex: Choose another Friendly Creature. Ready it. Can only be done once. Can only be done on turn this Creature is Summoned.","power":2,"cost":["P","P"],"shell":0,"maxHealth":1,"color":"P","capturable":true,"implemented":true,"cardUnlockGroupId":"legendary-8"},{"name":"bb-b","displayName":"bb b, brave as can b","text":"Legendary.\\nWhen an Enemy Creature is Destroyed, Adjacent Friendly Creatures gain +1 Health, and you gain {?}.","power":1,"cost":[".","Y","Y","Y"],"shell":0,"maxHealth":4,"color":"Y","capturable":true,"implemented":true,"cardUnlockGroupId":"legendary-9"},{"name":"test-card","displayName":"Test Card Please Ignore","text":"Test card for testing.","power":99,"cost":[],"shell":0,"maxHealth":99,"color":"G","capturable":true,"implemented":true,"cardUnlockGroupId":"test-group"},{"name":"yoshisaur-munchakoopas","displayName":"Yoshisaur Munchakoopas","text":"*That doesn’t look like Yoshi at all...*","power":2,"cost":[".","G"],"shell":0,"maxHealth":4,"color":"G","capturable":true,"implemented":true,"cardUnlockGroupId":"tutorial1"},{"name":"new-boarn","displayName":"New Boarn","text":"When this Creature is Summoned, move it to a random Empty Friendly Space.\\n*No one expected that the child of Hamanda and Boaris would one day become the Great Baconator.*","power":3,"cost":["R","R","R"],"shell":0,"maxHealth":4,"color":"R","capturable":true,"implemented":true,"cardUnlockGroupId":"tutorial1"},{"name":"hamlet","displayName":"Hamlet","text":"*Little Hamlet doesn’t have his tusks yet, but when he gets ’em, the world had better watch out.*","power":1,"cost":["R"],"shell":0,"maxHealth":1,"color":"R","capturable":true,"implemented":true,"cardUnlockGroupId":"tutorial2"},{"name":"hog","displayName":"Hog","text":"This Creature can only Attack Units in its column.\\n*Ah, life is good as a simple Hog: just run forward!*","power":2,"cost":["R"],"shell":0,"maxHealth":1,"color":"R","capturable":true,"implemented":true,"cardUnlockGroupId":"tutorial2"},{"name":"chocolate-calf","displayName":"Chocolate Calf","text":"{W}, Flex: Gain +1 Power for this turn only.\\n*Each year, the herd loses several Chocolate Calves that wander into bright sunshine and melt.*","power":1,"cost":[".","B"],"shell":0,"maxHealth":3,"color":"B","capturable":true,"implemented":true,"cardUnlockGroupId":"tutorial3"},{"name":"beeowulf","displayName":"Beeowulf","text":"{Y}, Special: Choose an Unprotected Enemy Creature and a Space Adjacent to it. Attack that Creature and Move it to that Space.\\n*“May ever soar the great Beeowulf / praised by Hivelyng and Honeyschild akin”*\\n*― excerpt from the epic of Beeowulf*","power":1,"cost":["Y"],"shell":0,"maxHealth":1,"color":"Y","capturable":true,"implemented":true,"cardUnlockGroupId":"tutorial3"},{"name":"pbee---j","displayName":"PBee & J","text":"When Damaged by a Creature, that Creature takes 1 Damage.\\n*Wise spelunkers know not to eat PBee & J.*","power":1,"cost":["Y"],"shell":0,"maxHealth":1,"color":"Y","capturable":true,"implemented":true,"cardUnlockGroupId":"tutorial4"},{"name":"two-bees","displayName":"2 Bees or not 2 Bees?","text":"When this Creature is Damaged, instead, it takes half the Damage, rounded down.\\n*Is it 2 bees or not 2 bees? Maybe Hamlet knows?*","power":1,"cost":["Y","Y","Y"],"shell":0,"maxHealth":2,"color":"Y","capturable":true,"implemented":true,"cardUnlockGroupId":"tutorial4"},{"name":"flora-the-explora","displayName":"Flora the Explora","text":"Special: Draw a card.\\n*“Can you say “Hydrangea macrophylla titanum” with me? Come on, say it with me!”*","power":0,"cost":["P"],"shell":0,"maxHealth":1,"color":"P","capturable":true,"implemented":true,"cardUnlockGroupId":"tutorial5"},{"name":"roe-doe-dendron","displayName":"Roe Doe Dendron","text":"{P}, Special: Choose an Unprotected Enemy Creature. Attack it. Deal 1 Damage to the next Enemy Creature behind it, if there is one.\\n*In times of chaos, Roe Doe Dendron appears.*","power":1,"cost":[".","P"],"shell":0,"maxHealth":2,"color":"P","capturable":true,"implemented":true,"cardUnlockGroupId":"tutorial5"},{"name":"nepeta-legion","displayName":"Nepeta Legion","text":"When this Creature is Summoned, draw a card.\\n*A living army of catnip plants and... wait, are those trolls?*","power":2,"cost":["P","P","P"],"shell":0,"maxHealth":4,"color":"P","capturable":true,"implemented":true,"cardUnlockGroupId":"tutorial5"},{"name":"o","displayName":"o","text":"When this Creature is Summoned, Adjacent Friendly {W} and {(W/B)} Creatures gain +1 Health.\\n*Goes perfect with re!*","power":1,"cost":["B"],"shell":0,"maxHealth":1,"color":"B","capturable":true,"implemented":true,"cardUnlockGroupId":"tutorial6"},{"name":"payne","displayName":"Payne","text":"When Attacked by a {W} or {B} Creature, this Creature takes 1 additional Damage.\\n*The color of milk and butter fused into cream.*","power":1,"cost":["W/B"],"shell":0,"maxHealth":2,"color":"W/B","capturable":true,"implemented":true,"cardUnlockGroupId":"tutorial6"},{"name":"re","displayName":"re","text":"When this Creature is Summoned, Adjacent Friendly {B} and {(W/B)} Creatures gain +1 Power.\\n*Goes perfect with o!*","power":1,"cost":["W"],"shell":0,"maxHealth":1,"color":"W","capturable":true,"implemented":true,"cardUnlockGroupId":"tutorial6"},{"name":"vanilla-calf","displayName":"Vanilla Calf","text":"{B}, Flex: Remove 1 Damage from this Creature.\\n*This calf will grow up to produce high-quality cream.*","power":1,"cost":[".","W"],"shell":0,"maxHealth":3,"color":"W","capturable":true,"implemented":true,"cardUnlockGroupId":"tutorial6"},{"name":"chicken","displayName":"Chicken","text":"Special: On start of next turn, gain {?}. *(Only if this Creature is still on the field then.)*\\n*“I will destroy you all!”*","power":1,"cost":["G"],"shell":0,"maxHealth":1,"color":"G","capturable":true,"implemented":true,"cardUnlockGroupId":"tutorial6"},{"name":"petroleum-jelly","displayName":"Petroleum Jelly","text":"When Damaged by a Creature in this column, instead, take 1 less Damage.\\n*This dinosaur has been through a lot.*","power":1,"cost":["G"],"shell":0,"maxHealth":1,"color":"G","capturable":true,"implemented":true,"cardUnlockGroupId":"tutorial6"},{"name":"log","displayName":"Log","text":"*The trees that grow deep underground typically get their sunlight imported.*","power":1,"cost":["P"],"shell":0,"maxHealth":2,"color":"P","capturable":true,"implemented":true,"cardUnlockGroupId":"tutorial6"},{"name":"beethoven","displayName":"Beethoven","text":"The first time this Creature is Damaged each turn, instead, it takes 1 less Damage.\\n*“Let the music take flight with passion! P, A, S, S, I, O, N!”*","power":2,"cost":[".","Y"],"shell":0,"maxHealth":3,"color":"Y","capturable":true,"implemented":true,"cardUnlockGroupId":"tutorial6"},{"name":"camp","displayName":"Camp","text":"Base.\\nOn start of turn, gain {?}.\\n*A good camp can be unpacked fast, and packed up faster.*","power":0,"cost":[],"shell":0,"maxHealth":4,"color":null,"capturable":true,"implemented":true,"cardUnlockGroupId":null},{"name":"mint","displayName":"Mint","text":"Base.\\nThis Base is Invulnerable if any Friendly Creatures are on the field.\\nOn start of turn, Summon a Creature in front of this Base.\\nAt most one Mint can Summon per turn.","power":0,"cost":[],"shell":0,"maxHealth":5,"color":null,"capturable":false,"implemented":true,"cardUnlockGroupId":null},{"name":"mint--overdrive-","displayName":"Mint (OVERDRIVE)","text":"Base.\\nThis Base is Invulnerable if any Friendly Creatures are on the field.\\nOn start of turn, Summon a Creature in front of this Base.\\nAt most two Mints can Summon per turn.","power":0,"cost":[],"shell":0,"maxHealth":5,"color":null,"capturable":false,"implemented":true,"cardUnlockGroupId":null},{"name":"goose","displayName":"Goose","text":"This Creature cannot be Damaged by {G} Creatures.","power":2,"cost":["G"],"shell":0,"maxHealth":20,"color":"G","capturable":false,"implemented":true,"cardUnlockGroupId":null},{"name":"poutine","displayName":"Poutine","text":"This Creature cannot be Damaged by {P} Creatures.","power":2,"cost":["P"],"shell":0,"maxHealth":10,"color":"P","capturable":false,"implemented":true,"cardUnlockGroupId":null},{"name":"wisent","displayName":"Wisent","text":"This Creature cannot be Damaged by {R} Creatures.","power":2,"cost":["R"],"shell":0,"maxHealth":10,"color":"R","capturable":false,"implemented":true,"cardUnlockGroupId":null},{"name":"twelve-stars","displayName":"Twelve stars","text":"This Creature cannot be Damaged by {G} Creatures.","power":2,"cost":["G"],"shell":0,"maxHealth":100,"color":"G","capturable":false,"implemented":true,"cardUnlockGroupId":null},{"name":"consort-on-a-bull-deity","displayName":"Consort on a bull deity","text":"This Creature cannot be Damaged by {(W/B)} Creatures.","power":2,"cost":["W/B"],"shell":0,"maxHealth":5,"color":"W/B","capturable":false,"implemented":true,"cardUnlockGroupId":null},{"name":"spicy-fermented-cabbage","displayName":"Spicy fermented cabbage","text":"This Creature cannot be Damaged by {R} Creatures.","power":2,"cost":["R"],"shell":0,"maxHealth":5000,"color":"R","capturable":false,"implemented":true,"cardUnlockGroupId":null},{"name":"hallyu","displayName":"Hallyu","text":"This Creature cannot be Damaged by {G} Creatures.","power":2,"cost":["G"],"shell":0,"maxHealth":10000,"color":"G","capturable":false,"implemented":true,"cardUnlockGroupId":null},{"name":"wombat-mob","displayName":"Wombat mob","text":"This Creature cannot be Damaged by {P} Creatures.","power":2,"cost":["P"],"shell":0,"maxHealth":5,"color":"P","capturable":false,"implemented":true,"cardUnlockGroupId":null},{"name":"jar-of-vegemite","displayName":"Jar of Vegemite","text":"This Creature cannot be Damaged by {R} Creatures.","power":2,"cost":["R"],"shell":0,"maxHealth":20,"color":"R","capturable":false,"implemented":true,"cardUnlockGroupId":null},{"name":"didgeridoo","displayName":"Didgeridoo","text":"This Creature cannot be Damaged by {Y} Creatures.","power":2,"cost":["Y"],"shell":0,"maxHealth":50,"color":"Y","capturable":false,"implemented":true,"cardUnlockGroupId":null},{"name":"toblerone-dipped-in-fondue","displayName":"Toblerone dipped in fondue","text":"This Creature cannot be Damaged by {Y} Creatures.","power":2,"cost":["Y"],"shell":0,"maxHealth":10,"color":"Y","capturable":false,"implemented":true,"cardUnlockGroupId":null},{"name":"plus-sign","displayName":"Plus sign","text":"This Creature cannot be Damaged by {R} Creatures.","power":2,"cost":["R"],"shell":0,"maxHealth":20,"color":"R","capturable":false,"implemented":true,"cardUnlockGroupId":null},{"name":"army-knife","displayName":"Army knife","text":"This Creature cannot be Damaged by {G} Creatures.","power":2,"cost":["G"],"shell":0,"maxHealth":50,"color":"G","capturable":false,"implemented":true,"cardUnlockGroupId":null},{"name":"pungent-canned-herring","displayName":"Pungent canned herring","text":"This Creature cannot be Damaged by {P} Creatures.","power":2,"cost":["P"],"shell":0,"maxHealth":20,"color":"P","capturable":false,"implemented":true,"cardUnlockGroupId":null},{"name":"dala-horse","displayName":"Dala horse","text":"This Creature cannot be Damaged by {G} Creatures.","power":2,"cost":["G"],"shell":0,"maxHealth":200,"color":"G","capturable":false,"implemented":true,"cardUnlockGroupId":null},{"name":"green-curry","displayName":"Green curry","text":"This Creature cannot be Damaged by {G} Creatures.","power":2,"cost":["G"],"shell":0,"maxHealth":20,"color":"G","capturable":false,"implemented":true,"cardUnlockGroupId":null},{"name":"red-curry","displayName":"Red curry","text":"This Creature cannot be Damaged by {R} Creatures.","power":2,"cost":["R"],"shell":0,"maxHealth":100,"color":"R","capturable":false,"implemented":true,"cardUnlockGroupId":null},{"name":"ka-api-ara","displayName":"Ka'apiûara","text":"This Creature cannot be Damaged by {P} Creatures.","power":2,"cost":["P"],"shell":0,"maxHealth":5,"color":"P","capturable":false,"implemented":true,"cardUnlockGroupId":null},{"name":"toasted-cassava","displayName":"Toasted cassava","text":"This Creature cannot be Damaged by {R} Creatures.","power":2,"cost":["R"],"shell":0,"maxHealth":10,"color":"R","capturable":false,"implemented":true,"cardUnlockGroupId":null},{"name":"order-and-progress","displayName":"Order and Progress","text":"This Creature cannot be Damaged by {Y} Creatures.","power":2,"cost":["Y"],"shell":0,"maxHealth":20,"color":"Y","capturable":false,"implemented":true,"cardUnlockGroupId":null},{"name":"angry-boarry-farmer","displayName":"Angry Boarry Farmer","text":"Can only Attack Units in this Creature’s column, or in Friendly Spaces.\\nOn end of turn, gain +1 Power.\\n*“GET OFF MY FARM!!!”*","power":1,"cost":["R","R","R","R","R"],"shell":0,"maxHealth":64,"color":"R","capturable":false,"implemented":true,"cardUnlockGroupId":null},{"name":"keep","displayName":"Keep","text":"Base.\\nOn start of turn, gain {???}.","power":10,"cost":[],"shell":0,"maxHealth":10,"color":null,"capturable":false,"implemented":true,"cardUnlockGroupId":null},{"name":"worker-bot","displayName":"Worker Bot","text":"Cannot Attack or Create.\\nWhen Moving, does not Unready. Can push.","power":0,"cost":["W"],"shell":0,"maxHealth":1,"color":"W","capturable":false,"implemented":true,"cardUnlockGroupId":null},{"name":"zap-worker-bot","displayName":"Zap Worker Bot","text":"Cannot Attack normally or Create.\\nWhen Moving, does not Unready. Can push.\\n{.}, Flex: Choose an Adjacent Unit. Attack it. Take 1 Damage.","power":1,"cost":["W"],"shell":0,"maxHealth":4,"color":"W","capturable":false,"implemented":true,"cardUnlockGroupId":null},{"name":"box","displayName":"Box","text":"Pushable. Blocks auto-combat.","power":0,"cost":["B"],"shell":0,"maxHealth":1,"color":"B","capturable":false,"implemented":true,"cardUnlockGroupId":null},{"name":"explosives","displayName":"Explosives","text":"Cannot Attack or Create. Immobile.\\nWhen this Unit is Destroyed, deal 2 Damage to all Units in Touching Spaces.","power":0,"cost":["R"],"shell":0,"maxHealth":1,"color":"R","capturable":false,"implemented":true,"cardUnlockGroupId":null},{"name":"friendly-battle-bot","displayName":"Friendly Battle Bot","text":"Cannot Attack normally or Create. Immobile.\\nOn end of turn, Attack in this Unit’s column.","power":1,"cost":["P"],"shell":0,"maxHealth":1,"color":"P","capturable":false,"implemented":true,"cardUnlockGroupId":null},{"name":"enemy-battle-bot","displayName":"Enemy Battle Bot","text":"Cannot Attack normally or Create. Immobile.\\nOn end of turn, Attack in this Unit’s column.","power":1,"cost":["Y"],"shell":0,"maxHealth":1,"color":"Y","capturable":false,"implemented":true,"cardUnlockGroupId":null},{"name":"armored-enemy-battle-bot","displayName":"Armored Enemy Battle Bot","text":"Cannot Attack normally or Create. Immobile.\\nWhen this Creature is Damaged, instead, it takes 1 less Damage.\\nOn end of turn, Attack in this Unit’s column.","power":1,"cost":["Y"],"shell":0,"maxHealth":1,"color":"Y","capturable":false,"implemented":true,"cardUnlockGroupId":null},{"name":"armored-camp","displayName":"Armored Camp","text":"Base.\\nWhen this Base is Damaged, instead, it takes 1 less Damage.","power":0,"cost":[],"shell":0,"maxHealth":4,"color":null,"capturable":false,"implemented":true,"cardUnlockGroupId":null},{"name":"pothole","displayName":"Pothole","text":"Immobile. Auto-combat ignores this Unit. Does not Protect.","power":0,"cost":["G"],"shell":0,"maxHealth":99,"color":"G","capturable":false,"implemented":true,"cardUnlockGroupId":null},{"name":"barn","displayName":"Barn","text":"Base.\\nYou and your opponent can only Summon on the first two turns.\\nWhen there are four or more Friendly Cows in play, Barn is Invulnerable.","power":0,"cost":[],"shell":0,"maxHealth":10,"color":"W/B","capturable":false,"implemented":true,"cardUnlockGroupId":null},{"name":"chocolate-cyclow--sleeping-","displayName":"Chocolate Cyclow (SLEEPING)","text":"*The peaceful cow is sleeping.*","power":0,"cost":["B"],"shell":0,"maxHealth":5,"color":"B","capturable":false,"implemented":true,"cardUnlockGroupId":null},{"name":"chocolate-cyclow--awake-","displayName":"Chocolate Cyclow (AWAKE)","text":"*“How dairy you discurd my slumber!”*","power":0,"cost":["B"],"shell":0,"maxHealth":5,"color":"B","capturable":false,"implemented":true,"cardUnlockGroupId":null},{"name":"chocolate-cyclow--tired-","displayName":"Chocolate Cyclow (TIRED)","text":"*Moo.*","power":0,"cost":["B"],"shell":0,"maxHealth":5,"color":"B","capturable":false,"implemented":true,"cardUnlockGroupId":null},{"name":"chocolate-cyclow--weak-","displayName":"Chocolate Cyclow (WEAK)","text":"*Moo.*","power":0,"cost":["B"],"shell":0,"maxHealth":5,"color":"B","capturable":false,"implemented":true,"cardUnlockGroupId":null},{"name":"chocolate-cyclow--angry-","displayName":"Chocolate Cyclow (ANGRY)","text":"*Muenster Form*","power":3,"cost":["B"],"shell":0,"maxHealth":5,"color":"B","capturable":false,"implemented":true,"cardUnlockGroupId":null},{"name":"vanilla-cyclow--sleeping-","displayName":"Vanilla Cyclow (SLEEPING)","text":"*The peaceful cow is sleeping.*","power":0,"cost":["W"],"shell":0,"maxHealth":5,"color":"W","capturable":false,"implemented":true,"cardUnlockGroupId":null},{"name":"vanilla-cyclow--awake-","displayName":"Vanilla Cyclow (AWAKE)","text":"*“How dairy you discurd my slumber!”*","power":0,"cost":["W"],"shell":0,"maxHealth":5,"color":"W","capturable":false,"implemented":true,"cardUnlockGroupId":null},{"name":"vanilla-cyclow--tired-","displayName":"Vanilla Cyclow (TIRED)","text":"*Moo.*","power":0,"cost":["W"],"shell":0,"maxHealth":5,"color":"W","capturable":false,"implemented":true,"cardUnlockGroupId":null},{"name":"vanilla-cyclow--weak-","displayName":"Vanilla Cyclow (WEAK)","text":"*Moo.*","power":0,"cost":["W"],"shell":0,"maxHealth":5,"color":"W","capturable":false,"implemented":true,"cardUnlockGroupId":null},{"name":"vanilla-cyclow--angry-","displayName":"Vanilla Cyclow (ANGRY)","text":"*Muenster Form*","power":3,"cost":["W"],"shell":0,"maxHealth":5,"color":"W","capturable":false,"implemented":true,"cardUnlockGroupId":null},{"name":"beeflector","displayName":"Beeflector","text":"When Damaged by a Creature, that Creature takes 1 Damage.\\n*You hear Bees sniggering in the background, but it doesn’t seem like you’re the one they’re laughing at...*","power":0,"cost":["Y"],"shell":0,"maxHealth":5,"color":"Y","capturable":false,"implemented":true,"cardUnlockGroupId":null},{"name":"reckless-medisaur","displayName":"Reckless Medisaur","text":"Cannot Attack normally or Create. Immobile.\\nSpecial: Choose a Friendly Base and a Creature that has taken Damage. Deal 2 Damage to the Base. Remove all Damage from the Creature.\\nSpecial: Attack the nearest Unprotected Enemy Base, or if there isn’t one, the nearest Unprotected Enemy Creature.\\n*“Every wound must be mended, no matter the cost!”*","power":1,"cost":[".",".","G"],"shell":0,"maxHealth":1,"color":"G","capturable":false,"implemented":true,"cardUnlockGroupId":null},{"name":"slime","displayName":"Slime","text":"*A Slime congealed out of the Boarry sludge!*","power":3,"cost":["R"],"shell":0,"maxHealth":10,"color":"R","capturable":false,"implemented":true,"cardUnlockGroupId":null},{"name":"amber-slime","displayName":"Amber Slime","text":"Speedy.\\n*This slime likes to dash!*","power":2,"cost":["R"],"shell":0,"maxHealth":6,"color":"R","capturable":false,"implemented":true,"cardUnlockGroupId":null},{"name":"apricot-slime","displayName":"Apricot Slime","text":"Speedy.\\n*This slime likes to dash!*","power":1,"cost":["R"],"shell":0,"maxHealth":4,"color":"R","capturable":false,"implemented":true,"cardUnlockGroupId":null},{"name":"auburn-slime","displayName":"Auburn Slime","text":"Poisonous.\\n*This slime deals Damage Over Time!*","power":1,"cost":["R"],"shell":0,"maxHealth":4,"color":"R","capturable":false,"implemented":true,"cardUnlockGroupId":null},{"name":"ebony-slime","displayName":"Ebony Slime","text":"Poisonous.\\n*This slime deals Damage Over Time!*","power":1,"cost":["R"],"shell":0,"maxHealth":4,"color":"R","capturable":false,"implemented":true,"cardUnlockGroupId":null},{"name":"ecru-slime","displayName":"Ecru Slime","text":"Poisonous.\\n*This slime deals Damage Over Time!*","power":2,"cost":["R"],"shell":0,"maxHealth":6,"color":"R","capturable":false,"implemented":true,"cardUnlockGroupId":null},{"name":"eggplant-slime","displayName":"Eggplant Slime","text":"Poisonous.\\n*This slime deals Damage Over Time!*","power":1,"cost":["R"],"shell":0,"maxHealth":2,"color":"R","capturable":false,"implemented":true,"cardUnlockGroupId":null},{"name":"emerald-slime","displayName":"Emerald Slime","text":"Speedy.\\n*This slime likes to dash!*","power":2,"cost":["R"],"shell":0,"maxHealth":6,"color":"R","capturable":false,"implemented":true,"cardUnlockGroupId":null},{"name":"harlequin-slime","displayName":"Harlequin Slime","text":"Poisonous.\\n*This slime deals Damage Over Time!*","power":1,"cost":["R"],"shell":0,"maxHealth":2,"color":"R","capturable":false,"implemented":true,"cardUnlockGroupId":null},{"name":"indigo-slime","displayName":"Indigo Slime","text":"Poisonous.\\n*This slime deals Damage Over Time!*","power":1,"cost":["R"],"shell":0,"maxHealth":2,"color":"R","capturable":false,"implemented":true,"cardUnlockGroupId":null},{"name":"ivory-slime","displayName":"Ivory Slime","text":"Poisonous.\\n*This slime deals Damage Over Time!*","power":1,"cost":["R"],"shell":0,"maxHealth":4,"color":"R","capturable":false,"implemented":true,"cardUnlockGroupId":null},{"name":"khaki-slime","displayName":"Khaki Slime","text":"Poisonous.\\n*This slime deals Damage Over Time!*","power":1,"cost":["R"],"shell":0,"maxHealth":4,"color":"R","capturable":false,"implemented":true,"cardUnlockGroupId":null},{"name":"lava-slime","displayName":"Lava Slime","text":"Poisonous.\\n*This slime deals Damage Over Time!*","power":1,"cost":["R"],"shell":0,"maxHealth":2,"color":"R","capturable":false,"implemented":true,"cardUnlockGroupId":null},{"name":"lavender-slime","displayName":"Lavender Slime","text":"Speedy.\\n*This slime likes to dash!*","power":1,"cost":["R"],"shell":0,"maxHealth":2,"color":"R","capturable":false,"implemented":true,"cardUnlockGroupId":null},{"name":"lemon-slime","displayName":"Lemon Slime","text":"Poisonous.\\n*This slime deals Damage Over Time!*","power":2,"cost":["R"],"shell":0,"maxHealth":6,"color":"R","capturable":false,"implemented":true,"cardUnlockGroupId":null},{"name":"lilac-slime","displayName":"Lilac Slime","text":"Speedy.\\n*This slime likes to dash!*","power":1,"cost":["R"],"shell":0,"maxHealth":2,"color":"R","capturable":false,"implemented":true,"cardUnlockGroupId":null},{"name":"mauve-slime","displayName":"Mauve Slime","text":"Speedy.\\n*This slime likes to dash!*","power":1,"cost":["R"],"shell":0,"maxHealth":2,"color":"R","capturable":false,"implemented":true,"cardUnlockGroupId":null},{"name":"orange-slime","displayName":"Orange Slime","text":"Speedy.\\n*This slime likes to dash!*","power":1,"cost":["R"],"shell":0,"maxHealth":4,"color":"R","capturable":false,"implemented":true,"cardUnlockGroupId":null},{"name":"red-slime","displayName":"Red Slime","text":"Poisonous.\\n*This slime deals Damage Over Time!*","power":1,"cost":["R"],"shell":0,"maxHealth":2,"color":"R","capturable":false,"implemented":true,"cardUnlockGroupId":null},{"name":"rust-slime","displayName":"Rust Slime","text":"Speedy.\\n*This slime likes to dash!*","power":1,"cost":["R"],"shell":0,"maxHealth":2,"color":"R","capturable":false,"implemented":true,"cardUnlockGroupId":null},{"name":"saffron-slime","displayName":"Saffron Slime","text":"Speedy.\\n*This slime likes to dash!*","power":1,"cost":["R"],"shell":0,"maxHealth":2,"color":"R","capturable":false,"implemented":true,"cardUnlockGroupId":null},{"name":"sepia-slime","displayName":"Sepia Slime","text":"Speedy.\\n*This slime likes to dash!*","power":2,"cost":["R"],"shell":0,"maxHealth":8,"color":"R","capturable":false,"implemented":true,"cardUnlockGroupId":null},{"name":"silver-slime","displayName":"Silver Slime","text":"Poisonous.\\n*This slime deals Damage Over Time!*","power":1,"cost":["R"],"shell":0,"maxHealth":2,"color":"R","capturable":false,"implemented":true,"cardUnlockGroupId":null},{"name":"teal-slime","displayName":"Teal Slime","text":"Speedy.\\n*This slime likes to dash!*","power":1,"cost":["R"],"shell":0,"maxHealth":4,"color":"R","capturable":false,"implemented":true,"cardUnlockGroupId":null},{"name":"turquoise-slime","displayName":"Turquoise Slime","text":"Speedy.\\n*This slime likes to dash!*","power":1,"cost":["R"],"shell":0,"maxHealth":4,"color":"R","capturable":false,"implemented":true,"cardUnlockGroupId":null},{"name":"white-slime","displayName":"White Slime","text":"Poisonous.\\n*This slime deals Damage Over Time!*","power":1,"cost":["R"],"shell":0,"maxHealth":2,"color":"R","capturable":false,"implemented":true,"cardUnlockGroupId":null},{"name":"yellow-slime","displayName":"Yellow Slime","text":"Poisonous.\\n*This slime deals Damage Over Time!*","power":2,"cost":["R"],"shell":0,"maxHealth":8,"color":"R","capturable":false,"implemented":true,"cardUnlockGroupId":null},{"name":"cargle","displayName":"Cargle","text":"If any Energle Crergle worgle dergle Dargle from the firgle or largle corgle, Dergle it instergle.","power":1,"cost":["B"],"shell":0,"maxHealth":2,"color":"B","capturable":false,"implemented":true,"cardUnlockGroupId":null},{"name":"dorgle","displayName":"Dorgle","text":"If any Energle Crergle worgle dergle Dargle from the sergle or forgle corgle, Dergle it instergle.","power":2,"cost":["B"],"shell":0,"maxHealth":1,"color":"B","capturable":false,"implemented":true,"cardUnlockGroupId":null},{"name":"morgle","displayName":"Morgle","text":"This Crergle can only be Attargle if anorgle Crergle morgle intorgle its corgle this turgle.","power":2,"cost":["B"],"shell":0,"maxHealth":7,"color":"B","capturable":false,"implemented":true,"cardUnlockGroupId":null},{"name":"corgle","displayName":"Corgle","text":"Whergle this Crergle is Dargle, Dergle the Attargle Crergle unlergle the plargle corgle it has exargle thrergle Forgle aftergle. ","power":3,"cost":["B"],"shell":0,"maxHealth":10,"color":"B","capturable":false,"implemented":true,"cardUnlockGroupId":null},{"name":"bargle","displayName":"Bargle","text":"Bargle.\\nAt the bergle of yorgle turgle, if this Bargle Currgle Hergle is norgle prirgle, Dergle all Energle Unirgle.","power":0,"cost":["B"],"shell":0,"maxHealth":29,"color":"B","capturable":false,"implemented":true,"cardUnlockGroupId":null},{"name":"durgle","displayName":"Durgle","text":"This Crergle dorgle norgle targle Dargle from norgle-Dirgle Crergle.","power":2,"cost":["B"],"shell":0,"maxHealth":2,"color":"B","capturable":false,"implemented":true,"cardUnlockGroupId":null},{"name":"gorgle","displayName":"Gorgle","text":"This Crergle targle tergle tirgle as much Dargle whergle it is Attargle by Crergle with at lergle forgle Currgle Hergle.","power":1,"cost":["B"],"shell":0,"maxHealth":70,"color":"B","capturable":false,"implemented":true,"cardUnlockGroupId":null},{"name":"swargle","displayName":"Swargle","text":"If this Crergle targle Dargle, Dergle all Energle Unirgle.\\nThis Crergle is Dergle autorgle in sirgle* turgle.","power":1,"cost":["B"],"shell":0,"maxHealth":2,"color":"B","capturable":false,"implemented":true,"cardUnlockGroupId":null},{"name":"b-w-copier","displayName":"B/W Copier","text":"Base.\\nOn start of turn, gain {???}.\\nSpecial: Add a copy of all {B} or {W} Units in the same row as this Base to your hand.","power":0,"cost":[],"shell":0,"maxHealth":1,"color":null,"capturable":false,"implemented":true,"cardUnlockGroupId":null},{"name":"pasture-planner","displayName":"Pasture Planner","text":"Base, Invulnerable.\\nSpecial: Audit the plan.","power":0,"cost":[],"shell":0,"maxHealth":1,"color":null,"capturable":false,"implemented":true,"cardUnlockGroupId":null},{"name":"fences","displayName":"Fences","text":"Immobile, Invulnerable","power":0,"cost":[],"shell":0,"maxHealth":1,"color":null,"capturable":false,"implemented":true,"cardUnlockGroupId":null},{"name":"puzzle-50-global-1","displayName":"Tight-knit Community","text":"","power":0,"cost":["B"],"shell":0,"maxHealth":1,"color":"B","capturable":false,"implemented":true,"cardUnlockGroupId":null},{"name":"puzzle-50-global-2","displayName":"Tight-knit Community","text":"","power":0,"cost":["W"],"shell":0,"maxHealth":1,"color":"W","capturable":false,"implemented":true,"cardUnlockGroupId":null},{"name":"puzzle-50-global-3","displayName":"Loose-knit Communities","text":"","power":0,"cost":["B"],"shell":0,"maxHealth":1,"color":"B","capturable":false,"implemented":true,"cardUnlockGroupId":null},{"name":"puzzle-50-global-4","displayName":"Loose-knit Communities","text":"","power":0,"cost":["W"],"shell":0,"maxHealth":1,"color":"W","capturable":false,"implemented":true,"cardUnlockGroupId":null},{"name":"puzzle-50-global-5","displayName":"Coastal Communities","text":"","power":0,"cost":["B"],"shell":0,"maxHealth":1,"color":"B","capturable":false,"implemented":true,"cardUnlockGroupId":null},{"name":"puzzle-50-global-6","displayName":"Coastal Communities","text":"","power":0,"cost":["W"],"shell":0,"maxHealth":1,"color":"W","capturable":false,"implemented":true,"cardUnlockGroupId":null},{"name":"puzzle-50-global-7","displayName":"Narrow Communities","text":"","power":0,"cost":["B"],"shell":0,"maxHealth":1,"color":"B","capturable":false,"implemented":true,"cardUnlockGroupId":null},{"name":"puzzle-50-global-8","displayName":"Narrow Communities","text":"","power":0,"cost":["W"],"shell":0,"maxHealth":1,"color":"W","capturable":false,"implemented":true,"cardUnlockGroupId":null},{"name":"puzzle-50-global-9","displayName":"Courtyards","text":"","power":0,"cost":["B"],"shell":0,"maxHealth":1,"color":"B","capturable":false,"implemented":true,"cardUnlockGroupId":null},{"name":"puzzle-50-global-10","displayName":"Courtyards","text":"","power":0,"cost":["W"],"shell":0,"maxHealth":1,"color":"W","capturable":false,"implemented":true,"cardUnlockGroupId":null},{"name":"puzzle-50-global-11","displayName":"Plazas","text":"","power":0,"cost":["B"],"shell":0,"maxHealth":1,"color":"B","capturable":false,"implemented":true,"cardUnlockGroupId":null},{"name":"puzzle-50-global-12","displayName":"Plazas","text":"","power":0,"cost":["W"],"shell":0,"maxHealth":1,"color":"W","capturable":false,"implemented":true,"cardUnlockGroupId":null},{"name":"puzzle-50-global-13","displayName":"Esplanades","text":"","power":0,"cost":["B"],"shell":0,"maxHealth":1,"color":"B","capturable":false,"implemented":true,"cardUnlockGroupId":null},{"name":"puzzle-50-global-14","displayName":"Esplanades","text":"","power":0,"cost":["W"],"shell":0,"maxHealth":1,"color":"W","capturable":false,"implemented":true,"cardUnlockGroupId":null},{"name":"puzzle-50-global-15","displayName":"Circuits","text":"","power":0,"cost":["B"],"shell":0,"maxHealth":1,"color":"B","capturable":false,"implemented":true,"cardUnlockGroupId":null},{"name":"puzzle-50-global-16","displayName":"Circuits","text":"","power":0,"cost":["W"],"shell":0,"maxHealth":1,"color":"W","capturable":false,"implemented":true,"cardUnlockGroupId":null},{"name":"puzzle-50-global-17","displayName":"Uniform Communities","text":"","power":0,"cost":["B"],"shell":0,"maxHealth":1,"color":"B","capturable":false,"implemented":true,"cardUnlockGroupId":null},{"name":"puzzle-50-global-18","displayName":"Uniform Communities","text":"","power":0,"cost":["W"],"shell":0,"maxHealth":1,"color":"W","capturable":false,"implemented":true,"cardUnlockGroupId":null},{"name":"puzzle-50-global-19","displayName":"Signposted Communities","text":"","power":0,"cost":["B"],"shell":0,"maxHealth":1,"color":"B","capturable":false,"implemented":true,"cardUnlockGroupId":null},{"name":"puzzle-50-global-20","displayName":"Signposted Communities","text":"","power":0,"cost":["W"],"shell":0,"maxHealth":1,"color":"W","capturable":false,"implemented":true,"cardUnlockGroupId":null},{"name":"puzzle-50-global-21","displayName":"Optionally Signposted Communities","text":"","power":0,"cost":["B"],"shell":0,"maxHealth":1,"color":"B","capturable":false,"implemented":true,"cardUnlockGroupId":null},{"name":"puzzle-50-global-22","displayName":"Optionally Signposted Communities","text":"","power":0,"cost":["W"],"shell":0,"maxHealth":1,"color":"W","capturable":false,"implemented":true,"cardUnlockGroupId":null},{"name":"puzzle-50-local-1","displayName":"Resident","text":"","power":0,"cost":["B"],"shell":0,"maxHealth":1,"color":"B","capturable":false,"implemented":true,"cardUnlockGroupId":null},{"name":"puzzle-50-local-2","displayName":"Resident","text":"","power":0,"cost":["W"],"shell":0,"maxHealth":1,"color":"W","capturable":false,"implemented":true,"cardUnlockGroupId":null},{"name":"puzzle-50-local-3","displayName":"Neighbors","text":"","power":0,"cost":["B"],"shell":0,"maxHealth":1,"color":"B","capturable":false,"implemented":true,"cardUnlockGroupId":null},{"name":"puzzle-50-local-4","displayName":"Neighbors","text":"","power":0,"cost":["W"],"shell":0,"maxHealth":1,"color":"W","capturable":false,"implemented":true,"cardUnlockGroupId":null},{"name":"puzzle-50-local-5","displayName":"Inverted Scanner","text":"","power":0,"cost":["B"],"shell":0,"maxHealth":1,"color":"B","capturable":false,"implemented":true,"cardUnlockGroupId":null},{"name":"puzzle-50-local-6","displayName":"Inverted Scanner","text":"","power":0,"cost":["W"],"shell":0,"maxHealth":1,"color":"W","capturable":false,"implemented":true,"cardUnlockGroupId":null},{"name":"puzzle-50-local-7","displayName":"Inverted Vertical Scout","text":"","power":0,"cost":["B"],"shell":0,"maxHealth":1,"color":"B","capturable":false,"implemented":true,"cardUnlockGroupId":null},{"name":"puzzle-50-local-8","displayName":"Inverted Vertical Scout","text":"","power":0,"cost":["W"],"shell":0,"maxHealth":1,"color":"W","capturable":false,"implemented":true,"cardUnlockGroupId":null},{"name":"puzzle-50-local-9","displayName":"Inverted Horizontal Scout","text":"","power":0,"cost":["B"],"shell":0,"maxHealth":1,"color":"B","capturable":false,"implemented":true,"cardUnlockGroupId":null},{"name":"puzzle-50-local-10","displayName":"Inverted Horizontal Scout","text":"","power":0,"cost":["W"],"shell":0,"maxHealth":1,"color":"W","capturable":false,"implemented":true,"cardUnlockGroupId":null},{"name":"puzzle-50-local-11","displayName":"Neighborhood Surveyor","text":"","power":0,"cost":["B"],"shell":0,"maxHealth":1,"color":"B","capturable":false,"implemented":true,"cardUnlockGroupId":null},{"name":"puzzle-50-local-12","displayName":"Neighborhood Surveyor","text":"","power":0,"cost":["W"],"shell":0,"maxHealth":1,"color":"W","capturable":false,"implemented":true,"cardUnlockGroupId":null},{"name":"puzzle-50-local-13","displayName":"Inverted Surveyor","text":"","power":0,"cost":["B"],"shell":0,"maxHealth":1,"color":"B","capturable":false,"implemented":true,"cardUnlockGroupId":null},{"name":"puzzle-50-local-14","displayName":"Inverted Surveyor","text":"","power":0,"cost":["W"],"shell":0,"maxHealth":1,"color":"W","capturable":false,"implemented":true,"cardUnlockGroupId":null},{"name":"puzzle-50-local-15","displayName":"Watchtower","text":"","power":0,"cost":["B"],"shell":0,"maxHealth":1,"color":"B","capturable":false,"implemented":true,"cardUnlockGroupId":null},{"name":"puzzle-50-local-16","displayName":"Watchtower","text":"","power":0,"cost":["W"],"shell":0,"maxHealth":1,"color":"W","capturable":false,"implemented":true,"cardUnlockGroupId":null},{"name":"puzzle-50-local-17","displayName":"Inverted Watchtower","text":"","power":0,"cost":["B"],"shell":0,"maxHealth":1,"color":"B","capturable":false,"implemented":true,"cardUnlockGroupId":null},{"name":"puzzle-50-local-18","displayName":"Inverted Watchtower","text":"","power":0,"cost":["W"],"shell":0,"maxHealth":1,"color":"W","capturable":false,"implemented":true,"cardUnlockGroupId":null},{"name":"beehive","displayName":"Beehive","text":"Base.\\n*A home for bees.*","power":0,"cost":[],"shell":0,"maxHealth":1,"color":"Y","capturable":false,"implemented":true,"cardUnlockGroupId":null},{"name":"larva","displayName":"Larva","text":"Cannot Attack or Create. Immobile.\\n{Y}, Special: Turn into a Bee.\\nOn the start of your turn, gain {Y}.\\n*“One day, I’ll bee a big bee!”*","power":0,"cost":["Y"],"shell":0,"maxHealth":1,"color":"Y","capturable":false,"implemented":true,"cardUnlockGroupId":null},{"name":"bearhive","displayName":"Bearhive","text":"Base.\\n*A home for bears.*","power":0,"cost":[],"shell":0,"maxHealth":99,"color":null,"capturable":false,"implemented":true,"cardUnlockGroupId":null},{"name":"luge-bear","displayName":"Luge Bear","text":"Wants to see a winter olympic sport before it enters the Bearhive next turn.","power":0,"cost":["."],"shell":0,"maxHealth":99,"color":null,"capturable":false,"implemented":true,"cardUnlockGroupId":null},{"name":"stufful-bear","displayName":"Stufful Bear","text":"Wants to see a Generation I Pokémon before it enters the Bearhive next turn.","power":0,"cost":["."],"shell":0,"maxHealth":99,"color":null,"capturable":false,"implemented":true,"cardUnlockGroupId":null},{"name":"black-bear","displayName":"Black Bear","text":"Wants to see a color before it enters the Bearhive next turn.","power":0,"cost":["."],"shell":0,"maxHealth":99,"color":null,"capturable":false,"implemented":true,"cardUnlockGroupId":null},{"name":"banana-bear","displayName":"Banana Bear","text":"Wants to see a fruit before it enters the Bearhive next turn.","power":0,"cost":["."],"shell":0,"maxHealth":99,"color":null,"capturable":false,"implemented":true,"cardUnlockGroupId":null},{"name":"sun-bear","displayName":"SUN Bear","text":"Wants to see an abbreviation for a day of the week before it enters the Bearhive next turn.","power":0,"cost":["."],"shell":0,"maxHealth":99,"color":null,"capturable":false,"implemented":true,"cardUnlockGroupId":null},{"name":"ord-bear","displayName":"ORD Bear","text":"Wants to see an IATA airport code for an airport in Florida before it enters the Bearhive next turn.","power":0,"cost":["."],"shell":0,"maxHealth":99,"color":null,"capturable":false,"implemented":true,"cardUnlockGroupId":null},{"name":"bears-bear","displayName":"Bears Bear","text":"Wants to see an NFL team name before it enters the Bearhive next turn.","power":0,"cost":["."],"shell":0,"maxHealth":99,"color":null,"capturable":false,"implemented":true,"cardUnlockGroupId":null},{"name":"confused-bear","displayName":"Confused Bear","text":"Wants to see a synonym of \\"tricked\\" before it enters the Bearhive next turn.","power":0,"cost":["."],"shell":0,"maxHealth":99,"color":null,"capturable":false,"implemented":true,"cardUnlockGroupId":null},{"name":"eur-bear","displayName":"EUR Bear","text":"Wants to see a currency code before it enters the Bearhive next turn.","power":0,"cost":["."],"shell":0,"maxHealth":99,"color":null,"capturable":false,"implemented":true,"cardUnlockGroupId":null},{"name":"three-bear","displayName":"Three Bear","text":"Wants to see a number before it enters the Bearhive next turn.","power":0,"cost":["."],"shell":0,"maxHealth":99,"color":null,"capturable":false,"implemented":true,"cardUnlockGroupId":null},{"name":"bludgeon-bear","displayName":"Bludgeon Bear","text":"Wants to see a weapon before it enters the Bearhive next turn.","power":0,"cost":["."],"shell":0,"maxHealth":99,"color":null,"capturable":false,"implemented":true,"cardUnlockGroupId":null},{"name":"four-bear","displayName":"Four Bear","text":"Wants to see a larger number than last time before it enters the Bearhive next turn.","power":0,"cost":["."],"shell":0,"maxHealth":99,"color":null,"capturable":false,"implemented":true,"cardUnlockGroupId":null},{"name":"grism-bear","displayName":"Grism Bear","text":"Wants to see an optical component before it enters the Bearhive next turn.","power":0,"cost":["."],"shell":0,"maxHealth":99,"color":null,"capturable":false,"implemented":true,"cardUnlockGroupId":null},{"name":"assault-bear","displayName":"Assault Bear","text":"Wants to see a post-1900 Kentucky Derby winner before it enters the Bearhive next turn.","power":0,"cost":["."],"shell":0,"maxHealth":99,"color":null,"capturable":false,"implemented":true,"cardUnlockGroupId":null},{"name":"archery-bear","displayName":"Archery Bear","text":"Wants to see a summer olympic sport before it enters the Bearhive next turn.","power":0,"cost":["."],"shell":0,"maxHealth":99,"color":null,"capturable":false,"implemented":true,"cardUnlockGroupId":null},{"name":"oak-bear","displayName":"Oak Bear","text":"Wants to see a tree before it enters the Bearhive next turn.","power":0,"cost":["."],"shell":0,"maxHealth":99,"color":null,"capturable":false,"implemented":true,"cardUnlockGroupId":null},{"name":"december-bear","displayName":"December Bear","text":"Wants to see a month before it enters the Bearhive next turn.","power":0,"cost":["."],"shell":0,"maxHealth":99,"color":null,"capturable":false,"implemented":true,"cardUnlockGroupId":null},{"name":"alabama-bear","displayName":"Alabama Bear","text":"Wants to see a US state before it enters the Bearhive next turn.","power":0,"cost":["."],"shell":0,"maxHealth":99,"color":null,"capturable":false,"implemented":true,"cardUnlockGroupId":null},{"name":"rammus-bear","displayName":"Rammus Bear","text":"Wants to see a champion in League of Legends before it enters the Bearhive next turn.","power":0,"cost":["."],"shell":0,"maxHealth":99,"color":null,"capturable":false,"implemented":true,"cardUnlockGroupId":null},{"name":"apple-bee","displayName":"Apple Bee","text":"Cannot Attack or Create. Immobile.\\n{Y}, Flex: Destroy this Creature.\\nOn the start of your turn, gain {Y}.\\n*Buzz buzz!*","power":0,"cost":["Y"],"shell":0,"maxHealth":1,"color":"Y","capturable":false,"implemented":true,"cardUnlockGroupId":null},{"name":"bumblebee","displayName":"Bumblebee","text":"Cannot Attack or Create. Immobile.\\n{Y}, Flex: Destroy this Creature.\\nOn the start of your turn, gain {Y}.\\n*Buzz buzz!*","power":0,"cost":["Y"],"shell":0,"maxHealth":1,"color":"Y","capturable":false,"implemented":true,"cardUnlockGroupId":null},{"name":"carpenter-bee","displayName":"Carpenter Bee","text":"Cannot Attack or Create. Immobile.\\n{Y}, Flex: Destroy this Creature.\\nOn the start of your turn, gain {Y}.\\n*Buzz buzz!*","power":0,"cost":["Y"],"shell":0,"maxHealth":1,"color":"Y","capturable":false,"implemented":true,"cardUnlockGroupId":null},{"name":"drone-bee","displayName":"Drone Bee","text":"Cannot Attack or Create. Immobile.\\n{Y}, Flex: Destroy this Creature.\\nOn the start of your turn, gain {Y}.\\n*Buzz buzz!*","power":0,"cost":["Y"],"shell":0,"maxHealth":1,"color":"Y","capturable":false,"implemented":true,"cardUnlockGroupId":null},{"name":"edward-al-bee","displayName":"Edward Al Bee","text":"Cannot Attack or Create. Immobile.\\n{Y}, Flex: Destroy this Creature.\\nOn the start of your turn, gain {Y}.\\n*Buzz buzz!*","power":0,"cost":["Y"],"shell":0,"maxHealth":1,"color":"Y","capturable":false,"implemented":true,"cardUnlockGroupId":null},{"name":"fluffy-bee","displayName":"Fluffy Bee","text":"Cannot Attack or Create. Immobile.\\n{Y}, Flex: Destroy this Creature.\\nOn the start of your turn, gain {Y}.\\n*Buzz buzz!*","power":0,"cost":["Y"],"shell":0,"maxHealth":1,"color":"Y","capturable":false,"implemented":true,"cardUnlockGroupId":null},{"name":"gardening-bee","displayName":"Gardening Bee","text":"Cannot Attack or Create. Immobile.\\n{Y}, Flex: Destroy this Creature.\\nOn the start of your turn, gain {Y}.\\n*Buzz buzz!*","power":0,"cost":["Y"],"shell":0,"maxHealth":1,"color":"Y","capturable":false,"implemented":true,"cardUnlockGroupId":null},{"name":"honey-bee","displayName":"Honey Bee","text":"Cannot Attack or Create. Immobile.\\n{Y}, Flex: Destroy this Creature.\\nOn the start of your turn, gain {Y}.\\n*Buzz buzz!*","power":0,"cost":["Y"],"shell":0,"maxHealth":1,"color":"Y","capturable":false,"implemented":true,"cardUnlockGroupId":null},{"name":"iridescent-bee","displayName":"Iridescent Bee","text":"Cannot Attack or Create. Immobile.\\n{Y}, Flex: Destroy this Creature.\\nOn the start of your turn, gain {Y}.\\n*Buzz buzz!*","power":0,"cost":["Y"],"shell":0,"maxHealth":1,"color":"Y","capturable":false,"implemented":true,"cardUnlockGroupId":null},{"name":"jasmine-bee","displayName":"Jasmine Bee","text":"Cannot Attack or Create. Immobile.\\n{Y}, Flex: Destroy this Creature.\\nOn the start of your turn, gain {Y}.\\n*Buzz buzz!*","power":0,"cost":["Y"],"shell":0,"maxHealth":1,"color":"Y","capturable":false,"implemented":true,"cardUnlockGroupId":null},{"name":"kombucha-bee","displayName":"Kombucha Bee","text":"Cannot Attack or Create. Immobile.\\n{Y}, Flex: Destroy this Creature.\\nOn the start of your turn, gain {Y}.\\n*Buzz buzz!*","power":0,"cost":["Y"],"shell":0,"maxHealth":1,"color":"Y","capturable":false,"implemented":true,"cardUnlockGroupId":null},{"name":"lavender-bee","displayName":"Lavender Bee","text":"Cannot Attack or Create. Immobile.\\n{Y}, Flex: Destroy this Creature.\\nOn the start of your turn, gain {Y}.\\n*Buzz buzz!*","power":0,"cost":["Y"],"shell":0,"maxHealth":1,"color":"Y","capturable":false,"implemented":true,"cardUnlockGroupId":null},{"name":"mason-bee","displayName":"Mason Bee","text":"Cannot Attack or Create. Immobile.\\n{Y}, Flex: Destroy this Creature.\\nOn the start of your turn, gain {Y}.\\n*Buzz buzz!*","power":0,"cost":["Y"],"shell":0,"maxHealth":1,"color":"Y","capturable":false,"implemented":true,"cardUnlockGroupId":null},{"name":"nectar-bee","displayName":"Nectar Bee","text":"Cannot Attack or Create. Immobile.\\n{Y}, Flex: Destroy this Creature.\\nOn the start of your turn, gain {Y}.\\n*Buzz buzz!*","power":0,"cost":["Y"],"shell":0,"maxHealth":1,"color":"Y","capturable":false,"implemented":true,"cardUnlockGroupId":null},{"name":"orange-bee","displayName":"Orange Bee","text":"Cannot Attack or Create. Immobile.\\n{Y}, Flex: Destroy this Creature.\\nOn the start of your turn, gain {Y}.\\n*Buzz buzz!*","power":0,"cost":["Y"],"shell":0,"maxHealth":1,"color":"Y","capturable":false,"implemented":true,"cardUnlockGroupId":null},{"name":"pollinator-bee","displayName":"Pollinator Bee","text":"Cannot Attack or Create. Immobile.\\n{Y}, Flex: Destroy this Creature.\\nOn the start of your turn, gain {Y}.\\n*Buzz buzz!*","power":0,"cost":["Y"],"shell":0,"maxHealth":1,"color":"Y","capturable":false,"implemented":true,"cardUnlockGroupId":null},{"name":"queen-bee","displayName":"Queen Bee","text":"Cannot Attack or Create. Immobile.\\n{Y}, Flex: Destroy this Creature.\\nOn the start of your turn, gain {Y}.\\n*Buzz buzz!*","power":0,"cost":["Y"],"shell":0,"maxHealth":1,"color":"Y","capturable":false,"implemented":true,"cardUnlockGroupId":null},{"name":"rosebud-bee","displayName":"Rosebud Bee","text":"Cannot Attack or Create. Immobile.\\n{Y}, Flex: Destroy this Creature.\\nOn the start of your turn, gain {Y}.\\n*Buzz buzz!*","power":0,"cost":["Y"],"shell":0,"maxHealth":1,"color":"Y","capturable":false,"implemented":true,"cardUnlockGroupId":null},{"name":"sunshine-bee","displayName":"Sunshine Bee","text":"Cannot Attack or Create. Immobile.\\n{Y}, Flex: Destroy this Creature.\\nOn the start of your turn, gain {Y}.\\n*Buzz buzz!*","power":0,"cost":["Y"],"shell":0,"maxHealth":1,"color":"Y","capturable":false,"implemented":true,"cardUnlockGroupId":null},{"name":"tangerine-bee","displayName":"Tangerine Bee","text":"Cannot Attack or Create. Immobile.\\n{Y}, Flex: Destroy this Creature.\\nOn the start of your turn, gain {Y}.\\n*Buzz buzz!*","power":0,"cost":["Y"],"shell":0,"maxHealth":1,"color":"Y","capturable":false,"implemented":true,"cardUnlockGroupId":null},{"name":"ultimatefris-bee","displayName":"Ultimatefris Bee","text":"Cannot Attack or Create. Immobile.\\n{Y}, Flex: Destroy this Creature.\\nOn the start of your turn, gain {Y}.\\n*Buzz buzz!*","power":0,"cost":["Y"],"shell":0,"maxHealth":1,"color":"Y","capturable":false,"implemented":true,"cardUnlockGroupId":null},{"name":"velvet-bee","displayName":"Velvet Bee","text":"Cannot Attack or Create. Immobile.\\n{Y}, Flex: Destroy this Creature.\\nOn the start of your turn, gain {Y}.\\n*Buzz buzz!*","power":0,"cost":["Y"],"shell":0,"maxHealth":1,"color":"Y","capturable":false,"implemented":true,"cardUnlockGroupId":null},{"name":"worker-bee","displayName":"Worker Bee","text":"Cannot Attack or Create. Immobile.\\n{Y}, Flex: Destroy this Creature.\\nOn the start of your turn, gain {Y}.\\n*Buzz buzz!*","power":0,"cost":["Y"],"shell":0,"maxHealth":1,"color":"Y","capturable":false,"implemented":true,"cardUnlockGroupId":null},{"name":"xylophone-bee","displayName":"Xylophone Bee","text":"Cannot Attack or Create. Immobile.\\n{Y}, Flex: Destroy this Creature.\\nOn the start of your turn, gain {Y}.\\n*Buzz buzz!*","power":0,"cost":["Y"],"shell":0,"maxHealth":1,"color":"Y","capturable":false,"implemented":true,"cardUnlockGroupId":null},{"name":"yellow-jacket-bee","displayName":"Yellow Jacket Bee","text":"Cannot Attack or Create. Immobile.\\n{Y}, Flex: Destroy this Creature.\\nOn the start of your turn, gain {Y}.\\n*Buzz buzz!*","power":0,"cost":["Y"],"shell":0,"maxHealth":1,"color":"Y","capturable":false,"implemented":true,"cardUnlockGroupId":null},{"name":"zinger-bee","displayName":"Zinger Bee","text":"Cannot Attack or Create. Immobile.\\n{Y}, Flex: Destroy this Creature.\\nOn the start of your turn, gain {Y}.\\n*Buzz buzz!*","power":0,"cost":["Y"],"shell":0,"maxHealth":1,"color":"Y","capturable":false,"implemented":true,"cardUnlockGroupId":null},{"name":"yurt","displayName":"Yurt","text":"Base.\\nOn start of turn, gain {Y}.","power":0,"cost":[],"shell":0,"maxHealth":4,"color":"Y","capturable":false,"implemented":true,"cardUnlockGroupId":null},{"name":"kero-dos","displayName":"Kero Dos","text":"Base, Invulnerable.\\nOn start of turn, if there are no Friendly Creatures, this Base loses 50 Health, Obliterates all Enemy Creatures, and Summons a new wave of defenders.","power":0,"cost":[],"shell":0,"maxHealth":300,"color":null,"capturable":false,"implemented":true,"cardUnlockGroupId":null},{"name":"dinosaur-tail","displayName":"Dinosaur Tail","text":"When this Creature is Damaged, instead, it takes 1 Damage.\\nAfter 5 turns, Destroy all Enemy Units.","power":0,"cost":[],"shell":0,"maxHealth":20,"color":"G","capturable":false,"implemented":true,"cardUnlockGroupId":null},{"name":"boar-tusks","displayName":"Boar Tusks","text":"When Damaged by a Creature, that Creature takes 3 Damage.\\nAfter 2 turns, Destroy all Enemy Units.","power":0,"cost":[],"shell":0,"maxHealth":12,"color":"R","capturable":false,"implemented":true,"cardUnlockGroupId":null},{"name":"dryad-horns","displayName":"Dryad Horns","text":"After 14 turns, Destroy all Enemy Units.","power":0,"cost":[],"shell":0,"maxHealth":15000,"color":"P","capturable":false,"implemented":true,"cardUnlockGroupId":null},{"name":"cow-udder","displayName":"Cow Udder","text":"When Damaged by a Creature, that Creature takes 1 Damage.\\nWhen a Friendly Unit is Destroyed, gain +1 Health.\\nThis Creature is Invulnerable if any Friendly Cow Leg is on the field.\\nAfter 4 turns, Destroy all Enemy Units.","power":0,"cost":[],"shell":0,"maxHealth":10,"color":"W/B","capturable":false,"implemented":true,"cardUnlockGroupId":null},{"name":"cow-leg-white","displayName":"Cow Leg","text":"When Damaged by a Creature, that Creature takes 1 Damage.\\nWhen a Friendly Unit is Destroyed, gain +1 Health.","power":0,"cost":[],"shell":0,"maxHealth":1,"color":"W","capturable":false,"implemented":false,"cardUnlockGroupId":null},{"name":"cow-leg-black","displayName":"Cow Leg","text":"When Damaged by a Creature, that Creature takes 1 Damage.\\nWhen a Friendly Unit is Destroyed, gain +1 Health.","power":0,"cost":[],"shell":0,"maxHealth":1,"color":"B","capturable":false,"implemented":true,"cardUnlockGroupId":null},{"name":"bee-wings","displayName":"Bee Wings","text":"When Damaged by an Enemy Creature, instead, take 0 Damage.\\nAfter 3 turns, Destroy all Enemy Units.","power":0,"cost":[],"shell":0,"maxHealth":1,"color":"Y","capturable":false,"implemented":true,"cardUnlockGroupId":null},{"name":"kero","displayName":"Kero","text":"After this Creature takes Damage, increase its Health by its Current Health.\\nAfter 5 turns, Destroy all Enemy Units.\\n*“I can’t give up nouwu!!!”*","power":0,"cost":[],"shell":0,"maxHealth":50,"color":null,"capturable":false,"implemented":true,"cardUnlockGroupId":null},{"name":"gostak1","displayName":"Gostak I","text":"On start of turn, deal ◆ Damage to every Unprotected Enemy Unit.\\n*The enigmatic Gostak confronts you.*","power":0,"cost":[".",".",".",".","."],"shell":0,"maxHealth":10,"color":null,"capturable":false,"implemented":true,"cardUnlockGroupId":null},{"name":"gostak2","displayName":"Gostak II","text":"On start of turn, deal ♠ Damage to every Unprotected Enemy Unit.\\n*The enigmatic Gostak confronts you.*","power":0,"cost":[".",".",".",".","."],"shell":0,"maxHealth":10,"color":null,"capturable":false,"implemented":true,"cardUnlockGroupId":null},{"name":"gostak3","displayName":"Gostak III","text":"On start of turn, deal §◆♠ Damage to every Unprotected Enemy Unit. \\n*The enigmatic Gostak confronts you.*","power":0,"cost":[".",".",".",".","."],"shell":0,"maxHealth":10,"color":null,"capturable":false,"implemented":true,"cardUnlockGroupId":null},{"name":"gostak4","displayName":"Gostak IV","text":"On start of turn, deal §◆‡ Damage to every Unprotected Enemy Unit.\\n*The enigmatic Gostak confronts you.* ","power":0,"cost":[".",".",".",".","."],"shell":0,"maxHealth":25,"color":null,"capturable":false,"implemented":true,"cardUnlockGroupId":null},{"name":"gostak5","displayName":"Gostak V","text":"On start of turn, deal §✠♫ Damage to every Unprotected Enemy Unit. \\n*The enigmatic Gostak confronts you.*","power":0,"cost":[".",".",".",".","."],"shell":0,"maxHealth":25,"color":null,"capturable":false,"implemented":true,"cardUnlockGroupId":null},{"name":"gostak6","displayName":"Gostak VI","text":"On start of turn, deal §‡¶✠♫ Damage to every Unprotected Enemy Unit. \\n*The enigmatic Gostak confronts you.*","power":0,"cost":[".",".",".",".","."],"shell":0,"maxHealth":25,"color":null,"capturable":false,"implemented":true,"cardUnlockGroupId":null},{"name":"gostak7","displayName":"Gostak VII","text":"On start of turn, deal §✠¶♠‡ Damage to every Unprotected Enemy Unit, then deal ¶∮§♠‡ Damage to every Unprotected Enemy Unit. \\n*The enigmatic Gostak confronts you for the final time.*","power":0,"cost":[".",".",".",".","."],"shell":0,"maxHealth":25,"color":null,"capturable":false,"implemented":true,"cardUnlockGroupId":null},{"name":"apocalyptic-asteroid","displayName":"Apocalyptic Asteroid","text":"*If only we had known this was coming!*","power":0,"cost":[],"shell":0,"maxHealth":85,"color":null,"capturable":false,"implemented":true,"cardUnlockGroupId":null},{"name":"asteroid-fragment","displayName":"Asteroid Fragment","text":"*I’m not sure what you thought blasting an asteroid would do.*","power":0,"cost":[],"shell":0,"maxHealth":25,"color":null,"capturable":false,"implemented":true,"cardUnlockGroupId":null},{"name":"meaty-ore","displayName":"Meaty Ore","text":"Cannot Attack.\\nWhen this Creature lands, set its Health to equal its Power and remove all its Damage. For each Enemy Unit, deal Damage to this Creature equal to that Unit’s Health, then destroy that Unit.\\n*You’ve revealed the meaty ore within the asteroid! It looks like you’ll just have to absorb the impact though...*","power":123,"cost":[],"shell":0,"maxHealth":12345,"color":null,"capturable":false,"implemented":true,"cardUnlockGroupId":null},{"name":"arvada","displayName":"Arvada","text":"Base, Mobile.\\n*Formed when Benjamin Wadsworth abandoned nearby Suggs.*","power":0,"cost":[],"shell":0,"maxHealth":4,"color":null,"capturable":false,"implemented":true,"cardUnlockGroupId":null},{"name":"burlington","displayName":"Burlington","text":"Base, Mobile.\\n*Ruled by Gerald George who came from Hoffnungstal.*","power":0,"cost":[],"shell":0,"maxHealth":4,"color":null,"capturable":false,"implemented":true,"cardUnlockGroupId":null},{"name":"centennial","displayName":"Centennial","text":"Base, Mobile.\\n*Named for the anniversary of signing of the Union Admission of Independence.*","power":0,"cost":[],"shell":0,"maxHealth":4,"color":null,"capturable":false,"implemented":true,"cardUnlockGroupId":null},{"name":"grover","displayName":"Grover","text":"*A red box of a station, named for Grover Cleveland, with the desert running out on every side to the sky line.*","power":1,"cost":["G"],"shell":0,"maxHealth":1,"color":"G","capturable":false,"implemented":true,"cardUnlockGroupId":null},{"name":"cow-butte","displayName":"Cow Butte","text":"*By Creston Ordway.*","power":1,"cost":["W"],"shell":0,"maxHealth":1,"color":"W","capturable":false,"implemented":true,"cardUnlockGroupId":null},{"name":"ramsey-peak","displayName":"Ramsey Peak","text":"*Overlooks South Goose Fork Cacheberry La Poudre.*","power":1,"cost":["Y"],"shell":0,"maxHealth":1,"color":"Y","capturable":false,"implemented":true,"cardUnlockGroupId":null},{"name":"saddle-mountain","displayName":"Saddle Mountain","text":"*Among West Absaroka Elk.*","power":1,"cost":["P"],"shell":0,"maxHealth":1,"color":"P","capturable":false,"implemented":true,"cardUnlockGroupId":null},{"name":"finger-rock","displayName":"Finger Rock","text":"*Near Martin Yampa Reservoir.*","power":1,"cost":["R"],"shell":0,"maxHealth":1,"color":"R","capturable":false,"implemented":true,"cardUnlockGroupId":null},{"name":"light-piece","displayName":"Light Piece","text":"Can only be Summoned on a Space Touching a non-Empty Space.\\nCannot Attack or Create. Immobile.","power":1,"cost":[],"shell":0,"maxHealth":3,"color":"W","capturable":false,"implemented":true,"cardUnlockGroupId":null},{"name":"dark-piece","displayName":"Dark Piece","text":"Can only be Summoned on a Space Touching a non-Empty Space.\\nCannot Attack or Create. Immobile.","power":1,"cost":[],"shell":0,"maxHealth":3,"color":"B","capturable":false,"implemented":true,"cardUnlockGroupId":null},{"name":"miracle-growth","displayName":"Miracle Growth","text":"Whenever any other Creature is Summoned, double this Creature’s Power, Health, and Damage.\\n*What grows quickly can also die quickly.*","power":1,"cost":["P","P","P"],"shell":0,"maxHealth":2,"color":"P","capturable":false,"implemented":true,"cardUnlockGroupId":null},{"name":"wild-weed","displayName":"Wild Weed","text":"Whenever any other Enemy Creature is Summoned, Summon as many copies of Wild Weed as that Creature’s Power.\\n*Well... I swear there was only one when I last checked.*","power":2,"cost":["P","P","P"],"shell":0,"maxHealth":5,"color":"P","capturable":false,"implemented":true,"cardUnlockGroupId":null},{"name":"leech-seed","displayName":"Leech Seed","text":"On start of turn, gain Health equal to the sum of every Creature’s Power.\\n*You feel your energy sapped away.*","power":1,"cost":["P","P","P"],"shell":0,"maxHealth":2,"color":"P","capturable":false,"implemented":true,"cardUnlockGroupId":null},{"name":"venus-bee-trap","displayName":"Venus Bee Trap","text":"On start of turn, gain +3 Health.\\nWhenever any other Creature dies, increase this Creature’s Power and Health by 10000.\\n*Don’t feed the wildlife!*","power":2,"cost":["P","P","P"],"shell":0,"maxHealth":2,"color":"P","capturable":false,"implemented":true,"cardUnlockGroupId":null},{"name":"spirit-of-the-vines","displayName":"Spirit of the Vines","text":"On start of turn, gain +2 Health.\\nWhenever any Friendly Creature dies, increase this Creature’s Power and Health by 10000.\\n*...you are unwelcome here... 🥀*","power":0,"cost":["P","P","P"],"shell":0,"maxHealth":3,"color":"P","capturable":false,"implemented":true,"cardUnlockGroupId":null},{"name":"overgrown-vines","displayName":"Overgrown Vines","text":"Whenever any other Creature is Summoned, it becomes Immobile.\\n*A choking thicket of vines blocks the way.*","power":3,"cost":["P","P","P"],"shell":0,"maxHealth":25,"color":"P","capturable":false,"implemented":true,"cardUnlockGroupId":null},{"name":"hog-on-a-log-on-a","displayName":"Hog on a Log on a...","text":"This Creature can only Attack Units in its column.\\nWhen Destroyed, Summon a Log on a Hog on a... in this Creature’s Space.\\n*Has science gone too far?*","power":2,"cost":["R","P","R","P","R"],"shell":0,"maxHealth":1,"color":"R","capturable":false,"implemented":true,"cardUnlockGroupId":null},{"name":"log-on-a-hog-on-a","displayName":"Log on a Hog on a...","text":"When Destroyed, Summon a Hog on a Log on a... in this Creature’s Space.\\n*Gone too far has science!*","power":1,"cost":["P","R","P","R","P"],"shell":0,"maxHealth":2,"color":"P","capturable":false,"implemented":true,"cardUnlockGroupId":null},{"name":"hog-factory","displayName":"Hog Factory","text":"Base.","power":0,"cost":["R"],"shell":0,"maxHealth":4,"color":"R","capturable":false,"implemented":true,"cardUnlockGroupId":null},{"name":"log-factory","displayName":"Log Factory","text":"Base.","power":0,"cost":["P"],"shell":0,"maxHealth":4,"color":"P","capturable":false,"implemented":true,"cardUnlockGroupId":null},{"name":"hog-factorytory","displayName":"Hog Factorytory","text":"Base.","power":0,"cost":["R"],"shell":0,"maxHealth":4,"color":"R","capturable":false,"implemented":true,"cardUnlockGroupId":null},{"name":"hog-factorytorytory","displayName":"Hog Factorytorytory","text":"Base.","power":0,"cost":["R"],"shell":0,"maxHealth":4,"color":"R","capturable":false,"implemented":true,"cardUnlockGroupId":null},{"name":"log-factorytory","displayName":"Log Factorytory","text":"Base.","power":0,"cost":["P"],"shell":0,"maxHealth":4,"color":"P","capturable":false,"implemented":true,"cardUnlockGroupId":null},{"name":"log-factorytorytory","displayName":"Log Factorytorytory","text":"Base.","power":0,"cost":["P"],"shell":0,"maxHealth":4,"color":"P","capturable":false,"implemented":true,"cardUnlockGroupId":null},{"name":"stacktory","displayName":"Stacktory","text":"Base.","power":0,"cost":[],"shell":0,"maxHealth":4,"color":null,"capturable":false,"implemented":true,"cardUnlockGroupId":null},{"name":"stackstack-tory","displayName":"Stackstack...tory","text":"Base.\\nStart of turn: Summon a Hog on a Log on a... on an empty Friendly space on this Base’s column.","power":0,"cost":[],"shell":0,"maxHealth":10,"color":null,"capturable":false,"implemented":true,"cardUnlockGroupId":null},{"name":"pepper-rich-farm","displayName":"Pepper Rich Farm","text":"Base.\\nOn end of turn, all Creatures in this column gain +1 Power.\\n*A handful of barns and silos comprise this peaceful farm.*","power":0,"cost":["R"],"shell":0,"maxHealth":16,"color":"R","capturable":false,"implemented":true,"cardUnlockGroupId":null},{"name":"train-boar-ding-platform","displayName":"Train Boar-ding Platform","text":"Base.\\nAfter a Friendly {R} Creature Moves to a Friendly Space, it Readies.\\n*Public transportation is a social good that all boars can share.*","power":0,"cost":["R"],"shell":0,"maxHealth":16,"color":"R","capturable":false,"implemented":true,"cardUnlockGroupId":null},{"name":"robot","displayName":"Robot","text":"Cannot Attack normally or Create. Immobile.\\nOn end of turn, Attack the nearest Enemy Unit in this column.","power":2,"cost":[".","."],"shell":0,"maxHealth":3,"color":null,"capturable":false,"implemented":true,"cardUnlockGroupId":null}]`;const gl=JSON.parse(pl);var yl=`[{"masteryId":"m1","displayName":"Reputation Boost","order":1,"x":5,"y":2,"effectText":"Your team name gets a special boost whenever it is displayed."},{"masteryId":"m2","displayName":"Station Master","order":2,"x":8,"y":4,"effectText":"You may preview the top card of your draw pile at any time during a battle by mousing over it."},{"masteryId":"m3","displayName":"Cardinal Director","order":3,"x":13,"y":6,"effectText":"As part of deckbuilding, you get to select one Priority Card, to be moved to the top of your draw pile at the start of each battle."},{"masteryId":"m4","displayName":"Spark of Inspiration","order":4,"x":16,"y":9,"effectText":"You may join a Faction."},{"masteryId":"m5","displayName":"Resourceful","order":5,"x":21,"y":11,"effectText":"You may draw a card for {..} at any time during a battle."},{"masteryId":"m6","displayName":"Erase Pain","order":6,"x":7,"y":13,"effectText":"This mastery doesn't do anything, but not having it will deny you the sense of completion."},{"masteryId":"m7","displayName":"New Field","order":7,"x":14,"y":15,"effectText":"Gain access to the PvP arena."},{"masteryId":"m8","displayName":"Crazed Frenzy","order":8,"x":2,"y":17,"effectText":"Enable Speedrun Mode."},{"masteryId":"m9","displayName":"Rumor Has It...","order":9,"x":10,"y":22,"effectText":"See solve and unlock counts for each puzzle."}]`;const El=JSON.parse(yl);var bl='[{"id":"intro-start","dialogue":"⚠️ Warning ⚠️\\nCutscenes are synced across your team. Gather your teammates here before proceeding!\\n(Don’t worry if someone can’t make it — you’ll always be able to replay a cutscene later.)","dialogOptions":["Ready!"],"showMask":true,"blocking":true,"showNext":true,"useCutsceneUI":true,"hideGame":true},{"id":"keyframe-1","dialogue":"Your treasure map has proven true! All that work deciphering esoteric codes and cryptic clues has finally paid off!","dialogOptions":["Open the chest already!"],"showMask":true,"blocking":true,"showNext":true,"useCutsceneUI":true,"hideGame":true,"image":"treasure-chest.png"},{"id":"keyframe-2","dialogOptions":["!!!"],"showMask":true,"blocking":true,"showNext":true,"useCutsceneUI":true,"hideGame":true,"image":"kaboom.png"},{"id":"keyframe-3","dialogOptions":["...?!"],"showMask":true,"blocking":true,"showNext":true,"useCutsceneUI":true,"hideGame":true,"image":"explosion.png"},{"id":"keyframe-4","dialogue":"Nice ta meetcha! I’m KERO, a magic carp!","speaker":"kero","dialogOptions":["What were you doing in that box?"],"showMask":true,"blocking":true,"showNext":true,"useCutsceneUI":true,"hideGame":true,"image":"kero.png"},{"id":"keyframe-5","dialogue":"I’m guarding it! It must never be opened.\\nA great evil is trapped within!","speaker":"kero","dialogOptions":["Um"],"showMask":true,"blocking":true,"showNext":true,"useCutsceneUI":true,"hideGame":true,"image":"kero.png"},{"id":"keyframe-6","dialogue":"OwO ...you opened it didn’t you.","speaker":"angry_kero","dialogOptions":["You weren’t guarding it very well.","Maybe you shouldn’t have sealed it in a treasure chest."],"showMask":true,"blocking":true,"showNext":true,"useCutsceneUI":true,"hideGame":true,"image":"angry-kero.png"},{"id":"keyframe-7","dialogue":"Now you’ve done it!\\nCHAOS will descend upon the world!","speaker":"angry_kero","dialogOptions":["Okay, okay, what can we do about it?"],"showMask":true,"blocking":true,"showNext":true,"useCutsceneUI":true,"hideGame":true,"image":"angry-kero.png"},{"id":"keyframe-8","endCutscene":true,"endGame":true,"dialogue":"Take this uwuand! It’ll help us transform the monsters of this cave into friends, using the POWER OF UWU!!!","speaker":"kero","showMask":true,"blocking":true,"showNext":true,"useCutsceneUI":true,"hideGame":true,"image":"uwuand.png"},{"id":"tutorial1-start-1","dialogue":"Look! A New Boarn has been corrupted by the \\nCHAOS! We’ll save it with a CARD BATTLE!","speaker":"enemy","selector":"ai_battler","dialogOptions":["Let’s do it!"],"blocking":true,"showNext":true},{"id":"keyframe-10","dialogue":"Here’s a friend I made earlier!\\nHis name is Yoshi. Yoshisaur Munchakoopas!","speaker":"kero","selectorPermanent":"yoshisaur-munchakoopas","dialogOptions":["Wait, Yoshi? Do you mean-"],"showMask":true,"blocking":true,"showNext":true},{"id":"tutorial1-end-turn-1","dialogue":"No time for questions!\\nWe can’t do anything right now, so hit End Turn.","speaker":"kero","selector":"end_turn","showMask":true},{"id":"tutorial1-start-2","dialogue":"Oh no! New Boarn attacked Yoshi!","speaker":"enemy","selector":"ai_battler","blocking":true,"showNext":true},{"id":"keyframe-13","dialogue":"This is New Boarn’s Power, 3.\\nWhen a Creature Attacks, it deals damage equal to its Power.","speaker":"kero","selector":"power","selectorPermanent":"new-boarn","showMask":true,"blocking":true,"showNext":true},{"id":"keyframe-14","dialogue":"This is Yoshi’s Health. It was 4, now it’s 1.\\nIf his Health hits 0, he’ll get Destroyed!","speaker":"kero","selector":"health","selectorPermanent":"yoshisaur-munchakoopas","dialogOptions":["We can’t let that happen!"],"showMask":true,"blocking":true,"showNext":true},{"id":"keyframe-15","dialogue":"No worries! I’s our turn now. Yoshi is ready to Act!","speaker":"enemy","selector":"ai_battler","dialogOptions":["Yeah! Yoshi, use, uh, ...Swallow?"],"blocking":true,"showNext":true},{"id":"tutorial1-before-give-food","dialogue":"Not so fast! Most Actions in battle cost Food,\\nbut it looks like you don’t have any yet. $(ﾟ ヘﾟ)$","speaker":"enemy","selector":"ai_battler","dialogOptions":["(ﾟ ヘﾟ)"],"blocking":true,"showNext":true},{"id":"keyframe-17","dialogue":"Here, take this Egg!","speaker":"kero","selector":"gems","dialogOptions":["Thanks!","Wait, where’d this egg come fr-"],"showMask":true,"blocking":true,"showNext":true},{"id":"keyframe-18","dialogue":"We’ve gotta use that Egg right away!\\nFood doesn’t last longer than a single turn.\\nQuick, select Yoshi!","speaker":"enemy","selector":"ai_battler","nextSelectorPermanent":"yoshisaur-munchakoopas","blocking":true,"showNext":false},{"id":"keyframe-19","dialogue":"Now if you mouse over New Boarn to Attack it,\\nyou’ll see that Attacking will use up that Egg.\\nClick on New Boarn to Attack!","speaker":"enemy","selector":"ai_battler","dialogOptions":["You want me to attack a newboarn?","Can’t we find a peaceful resolution?"]},{"id":"tutorial1-attack","dialogue":"Don’t worry! After we beat the CHAOS all out of it, we’ll use the uwuand to transform it into a FRIEND!","speaker":"enemy","selector":"ai_battler","dialogOptions":["...Seems legit.","The Power of Friendship!"]},{"id":"tutorial1-start-3","dialogue":"You did it! You Destroyed New Boarn!\\nNow use the uwuand!!","speaker":"kero","dialogOptions":["✨"],"showMask":true,"blocking":true,"showNext":true,"useCutsceneUI":true,"image":"uwuand.png"},{"id":"tutorial1-card","dialogue":"New Boarn is now our friend!!!!! $٩( ˃▿˂ )۶$\\nThis card will let you Summon it to help you in the future!","speaker":"kero","showMask":true,"blocking":true,"showNext":true,"useCutsceneUI":true},{"id":"keyframe-23","dialogue":"There are more battles ahead, but before we move on,\\nI’ve gotta tell you about the Instancer!","speaker":"kero","dialogOptions":["What’s the Instancer?"],"showMask":true,"blocking":true,"showNext":true,"useCutsceneUI":true,"image":"kero.png"},{"id":"keyframe-24","dialogue":"It’s a web of parallel timelines maintained by a mysterious coven of spiders!\\nYour team can use it to experiment with different strategies for the same battle at the same time.\\nYou can find it on the Map, or jump straight to it from the navbar!","speaker":"kero","dialogOptions":["I always suspected spiders could do that sort of thing."],"showMask":true,"blocking":true,"showNext":true,"useCutsceneUI":true,"image":"kero.png"},{"id":"keyframe-25","endCutscene":true,"endGame":true,"dialogue":"I think battles are more fun when everyone’s together though...\\n$(〃´𓎟`〃)$ but it’s up to ya if you wanna use it!","speaker":"kero","showMask":true,"blocking":true,"showNext":true,"useCutsceneUI":true,"image":"kero.png"},{"id":"tutorial2-start-1","dialogue":"It’s time for our next battle! \\nI hear that swine camp around here.\\nWe need to Destroy their Camp!","speaker":"enemy","selector":"ai_battler","dialogOptions":["Why?"],"blocking":true,"showNext":true},{"id":"tutorial2-before-summon","dialogue":"We win battles by Destroying all Enemy Bases!\\nOnly then can we use the power of UWU to recruit more friends!","speaker":"enemy","selector":"ai_battler","dialogOptions":["That makes sense.","That makes no sense."],"blocking":true,"showNext":true},{"id":"tutorial2-end-turn-1","dialogue":"Here, I Summoned New Boarn from earlier!\\nWe only just Summoned it, so it’s not Ready to Act yet.\\nClick End Turn to start the next Turn, and it’ll be Ready!","speaker":"enemy","selector":"ai_battler"},{"id":"tutorial2-start-2","dialogue":"Your Camp made a Pie!\\nA Camp makes one Pie at the start of each turn.","speaker":"kero","selector":"gems","dialogOptions":["Yum!"],"blocking":true,"showNext":true},{"id":"tutorial2-attack-1","dialogue":"Also, New Boarn can Act now!\\nUse it to Attack the Camp.","speaker":"enemy","selector":"ai_battler","dialogOptions":["Go ham, little sow!","Sow discord, little ham!"]},{"id":"tutorial2-end-turn-2","dialogue":"After a Creature Acts, it becomes tired and won’t be\\nReady until the next turn.\\nLet’s end our turn now. We’ll Attack again next turn!","speaker":"enemy","selector":"ai_battler"},{"id":"tutorial2-start-3","dialogue":"Oh no! The swine noticed us!","speaker":"enemy","selector":"ai_battler","blocking":true,"showNext":true},{"id":"keyframe-33","dialogue":"No matter. They’re just Creatures.$ ╮(╯∀╰)╭$\\nWe only need to Destroy their Camp to\\nactivate the power of UWU!\\nGo ahead and Attack their Camp!","speaker":"enemy","selector":"ai_battler","nextSelectorPermanent":"new-boarn","showNext":false},{"id":"tutorial2-attack-2","dialogue":"Huh, the Camp is grayed out. That means we can’t Attack it.\\n...Oh right, it’s Protected! $(ノ_<。)$\\nThat’s what it’ll say if you mouse over it.\\nA Unit is Protected if there’s another Unit in front of it.","speaker":"enemy","selector":"ai_battler","blocking":true,"showNext":true},{"id":"tutorial2-free-play","dialogue":"I’m sure you’ll find a way to win anyway!\\nGo you! uwu","speaker":"enemy","selector":"ai_battler"},{"id":"tutorial2-start-4","dialogue":"Hooray! We befriended Hog and Hamlet!","showMask":true,"blocking":true,"showNext":true,"useCutsceneUI":true,"image":"kero.png"},{"id":"keyframe-37","dialogue":"New Boarn, Hog, and Hamlet all belong to\\nthe same Faction: the Boar Faction.\\nBoars are known for their delicious Boarries.\\nYou should try them sometime! $(*´ڡ`●)$","showMask":true,"blocking":true,"showNext":true,"useCutsceneUI":true,"image":"boars.png"},{"id":"keyframe-38","dialogue":"Yoshi belongs to a different Faction: the Dino Faction!\\nDinos are known for their Eggs!","showMask":true,"blocking":true,"showNext":true,"useCutsceneUI":true,"image":"dinos.png"},{"id":"keyframe-39","dialogue":"There’s also the Bee, Dryad, and Cow Factions.\\nEach Faction produces a different kind of Food.","showMask":true,"blocking":true,"showNext":true,"useCutsceneUI":true,"image":"other-factions.png"},{"id":"keyframe-40","dialogue":"You can tell what Faction a Creature is by looking at their color,\\nor the Food on top of their Card!","showMask":true,"blocking":true,"showNext":true,"useCutsceneUI":true,"image":"kero.png"},{"id":"keyframe-41","dialogue":"Attacking with a Creature always costs one Food.\\nBut Creatures can only gain energy from eating their own Faction’s Food. $(-_-* )$\\nSo New Boarn will Attack if you give it a Boarry, but not Eggs or Butter, for example.","showMask":true,"blocking":true,"showNext":true,"useCutsceneUI":true,"image":"food-example.png"},{"id":"keyframe-42","endCutscene":true,"endGame":true,"dialogue":"Eggs, Honey, Butter, Flower, Whipped Cream, and Boarries. With their powers combined, they make Pie!\\nPie can substitute for any Food. Everyone loves Pie!\\nThat’s why we could get New Boarn to attack for a Pie just now!","dialogOptions":["Yoshi! I choose you!"],"showMask":true,"blocking":true,"showNext":true,"useCutsceneUI":true,"image":"pie.png"},{"id":"tutorial3-start-1","dialogue":"We’re out in the open now!\\nTwo Beeowulfs? No worries, I’m sure Yoshi can handle this!","speaker":"enemy","selector":"ai_battler"},{"id":"tutorial3-lose-1","dialogue":"We lost??? Righto, I forgot to mention...\\nCreatures can Attack down any column!","speaker":"enemy","selector":"ai_battler","dialogOptions":["Can we block the Attacks somehow?"],"blocking":true,"showNext":true},{"id":"tutorial3-lose-1-other","endGameUnsolved":true,"dialogue":"We can! For that, we’ll need to learn a new Action — Move!\\nNext time, select Yoshi, then the Space to his left.\\nHe’ll Move there and Protect our Camp!\\nLet’s try this battle again by Restarting it.","speaker":"enemy","selector":"ai_battler","blocking":true,"showNext":true},{"id":"tutorial3-lose-1-wrong-move","endGameUnsolved":true,"dialogue":"We can! For that, we’ll need to learn a new Action — Move!\\nI see you’ve already given it a try.\\nNext time, move Yoshi to the left instead!\\nHe’ll Move there and Protect our Camp!\\nLet’s try this battle again by Restarting it.","speaker":"enemy","selector":"ai_battler","blocking":true,"showNext":true},{"id":"tutorial3-after-move","dialogue":"Nice Move! Even though the Beeowulfs can attack any column,\\nYoshi Protects everything behind him! $ᕙ(  •̀ ᗜ •́  )ᕗ$","speaker":"enemy","selector":"ai_battler","blocking":true,"showNext":true},{"id":"keyframe-48","dialogue":"Unlike Attacking, Moving doesn’t cost Food.\\nBut it still counts as an Action, so Yoshi won’t be Ready to Act\\nagain until our next turn. Time to End Turn!","speaker":"enemy","selector":"ai_battler"},{"id":"tutorial3-start-2","dialogue":"Alright, you’ve got this!","speaker":"enemy","selector":"ai_battler"},{"id":"tutorial3-start-3","dialogue":"That was great! We could do this ’til the cows come home!\\nBut wait, something’s wrong. Do you hear that?","speaker":"kero","dialogOptions":["Is that... knocking?"],"showMask":true,"blocking":true,"showNext":true,"useCutsceneUI":true,"image":"kero.png"},{"id":"keyframe-51","dialogue":"Who’s there?","speaker":"kero","dialogOptions":["Don’t answer it!"],"showMask":true,"blocking":true,"showNext":true,"useCutsceneUI":true,"image":"kero.png"},{"id":"keyframe-52","dialogue":"Oh no, it’s the Cows!","speaker":"angry_kero","dialogOptions":["Cows? In a cave?"],"showMask":true,"blocking":true,"showNext":true,"useCutsceneUI":true,"image":"angry-kero.png"},{"id":"tutorial3-before-give-cards","dialogue":"Yeah! These Cows won’t let anyone get in their way!\\nLooks like they’ll be here in 3 turns.\\nYoshi can’t handle all that alone!","speaker":"kero","dialogOptions":["What do we do?"],"showMask":true,"blocking":true,"showNext":true,"useCutsceneUI":true,"image":"kero.png"},{"id":"keyframe-54","dialogue":"We’ve gotta Summon more friends!\\nHere are all the friends we made earlier.\\nWe’ll need them all on the field before the cows arrive!","speaker":"enemy","selector":"ai_battler","dialogOptions":["How do we Summon?"],"blocking":true,"showNext":true},{"id":"keyframe-55","dialogue":"Lemme give you a quick Summoning crash course!\\nEach Creature’s Summon cost is shown above their card.\\nHog and Hamlet each cost {R}. Our Camp’s {?} can substitute\\nfor {R}, so we can Summon both of them over the next two turns.","speaker":"enemy","selector":"ai_battler","dialogOptions":["What about New Boarn?"],"blocking":true,"showNext":true},{"id":"keyframe-56","dialogue":"We’ll think about New Boarn later!\\nFor now, focus on getting the other two Boars on the field.\\n(By the way, you might notice that we can only Summon on the\\nSpaces closer to us. That’s because the Spaces on the other\\nside are Enemy Spaces. We can’t Summon there!)","speaker":"enemy","selector":"ai_battler"},{"id":"tutorial3-start-5","dialogue":"Aight, let’s Summon the New Boarn!\\nFor that, we’ll need a new Action — Create!\\nCreating causes a Ready Creature to produce one Food.","speaker":"enemy","selector":"ai_battler","dialogOptions":["Oh! Like Pie?"],"blocking":true,"showNext":true},{"id":"keyframe-58","dialogue":"Not exactly... The Food that a Creature Creates depends on\\ntheir Faction. For example, Yoshi is a Dino, so when he\\nCreates, he lays an {G}. When a Boar like Hog or Hamlet\\nCreates, it gathers a {R}!","speaker":"enemy","selector":"ai_battler","blocking":true,"showNext":true},{"id":"keyframe-59","dialogue":"See if you can make up {R}{R}{R} to Summon New Boarn!\\nDon’t forget the {?} we got from our Camp, which can\\nsubstitute for any Food.","speaker":"enemy","selector":"ai_battler"},{"id":"tutorial3-after-summon-new-boarn","dialogue":"Did you see New Boarn jump?\\nNew Boarn is one hyperactive Boar! When you Summon it,\\nit jumps to a random Empty Friendly Space.\\nYou can read all about it in its card text!","speaker":"enemy","selector":"ai_battler","dialogOptions":["What a strong newboarn!","Sounds like it was Boarn for this!"],"blocking":true,"showNext":true},{"id":"tutorial3-focus-hog","dialogue":"Hog’s an interesting one too! It can only Attack down its column.\\nYou’ll wanna pay attention to how each Creature is different\\nto win more battles and make more friends!","speaker":"enemy","selector":"ai_battler","blocking":true,"showNext":true},{"id":"tutorial3-after-focus-hog","dialogue":"Now you’re familiar with the three basic Actions.\\nRemember that Creatures can only Act once per turn.\\nYou’ll often have to think carefully about whether to\\nAttack, Move, or Create!","speaker":"enemy","selector":"ai_battler","blocking":true,"showNext":true},{"id":"keyframe-63","dialogue":"The cows are almost upon us.\\nEnd your turn, and I’m sure you can handle the rest!","speaker":"enemy","selector":"ai_battler"},{"id":"tutorial3-stampede-fail","dialogue":"Oh no! You didn’t Summon all our friends!\\nUhh... good luck, I guess... $(ﾟAﾟ;)$","speaker":"enemy","selector":"ai_battler"},{"id":"tutorial3-stampede","dialogue":"You can do it! I’m rooting for you!","speaker":"enemy","selector":"ai_battler"},{"id":"tutorial3-lose-2","endGameUnsolved":true,"dialogue":"Guess it didn’t work out... Don’t worry, you can always try again! You might also need to think more carefully about which Spaces you Summon our friends to.\\nOh, and check out the menu! You have two Save slots that you can use to Save or Load your battle progress at any time, and one that autosaves at the start of every turn!","speaker":"enemy","selector":"ai_battler","blocking":true,"showNext":true},{"id":"tutorial4-start-1","dialogue":"Didya get to read our new friends’ card text?","speaker":"enemy","selector":"ai_battler","dialogOptions":["Of course!","Huh?"],"blocking":true,"showNext":true,"nextIds":["tutorial4-start-1-1","tutorial4-start-1-2"]},{"id":"tutorial4-start-1-1","dialogue":"Amazing! The card text will be important for this battle.\\nBut first, let’s get our friends on the field!","speaker":"enemy","selector":"ai_battler","dialogOptions":["Let’s go!"],"blocking":true,"showNext":true,"nextIds":["tutorial4-start-1-join"]},{"id":"tutorial4-start-1-2","dialogue":"Well, ya gonna need to if we’re gonna win this battle!\\nBut first, let’s get our friends on the field!","speaker":"enemy","selector":"ai_battler","dialogOptions":["Let’s go!"],"blocking":true,"showNext":true,"nextIds":["tutorial4-start-1-join"]},{"id":"tutorial4-start-1-join","dialogue":"Chocolate Calf’s Summon cost is {.}{B}!\\nAny Food can substitute for {.}!","speaker":"enemy","selector":"ai_battler","blocking":true,"showNext":true},{"id":"keyframe-71","dialogue":"You might also come across {(W/B)}. {(W/B)} is Milk!!\\nButter and Whipped Cream are both made of Milk,\\nso either {B} and {W} can substitute for {(W/B)}!","speaker":"enemy","selector":"ai_battler","blocking":true,"showNext":true},{"id":"tutorial4-focus-beeowulf-1","dialogue":"And Beeowulf’s Summon cost is just one {Y}!\\nI’m sure that one’s no problem for you!","speaker":"enemy","selector":"ai_battler","blocking":true,"showNext":true},{"id":"keyframe-73","dialogue":"Alright, time to get our friends on the field!","speaker":"enemy","selector":"ai_battler"},{"id":"tutorial4-start-2-not-all-summon","dialogue":"OHHHH THAT’S A BUZZLOAD’A BEEZ!!!!\\nBut it looks like you didn’t manage to Summon all\\nour friends... I’m not sure you can win this now. $(’A`)$","speaker":"enemy","selector":"ai_battler"},{"id":"tutorial4-start-2","dialogue":"OHHHH THAT’S A BUZZLOAD’A BEEZ!!!! $(⊃‿⊂)ミ3$\\nDon’t worry. We can use our friends’ unique abilities\\nto win the battle in a single turn!","speaker":"enemy","selector":"ai_battler","blocking":true,"showNext":true},{"id":"tutorial4-focus-beeowulf-2","dialogue":"Beeowulf has a Special! Activating a Special counts as an\\nAction, just like Attack, Move, or Create. That means that\\nBeeowulf can only activate its Special when it’s Ready,\\nand then it gets tired and can’t Act again until the next turn!","speaker":"enemy","selector":"ai_battler","blocking":true,"showNext":true},{"id":"tutorial4-focus-calf-1","dialogue":"Chocolate Calf has a Flex! Activating a Flex doesn’t count\\nas an Action. That means that it can Flex as many times\\nas we want, whether or not it’s Ready!","speaker":"enemy","selector":"ai_battler","blocking":true,"showNext":true},{"id":"tutorial4-focus-calf-2","dialogue":"Activating a Special or Flex may cost Food. Do you see\\nthe {W} next to “Flex” in Chocolate Calf’s card text?\\nThat means that it costs one {W} to activate it!\\nIf you don’t see any symbols in front of the card text for\\nan ability, that means that activating it is free!","speaker":"enemy","selector":"ai_battler","blocking":true,"showNext":true},{"id":"keyframe-79","dialogue":"Don’t forget to check the card text of the Enemy Bees too!\\nOkay I’m sure you’ve got this!!! SEEYA","speaker":"enemy","selector":"ai_battler"},{"id":"tutorial5-start","dialogue":"You’re pretty much an expert at battlin’ now.\\nI’ve just one last thing to teach ya!","speaker":"enemy","selector":"ai_battler","blocking":true,"showNext":true},{"id":"keyframe-81","dialogue":"When a Creature crosses into an Enemy Space,\\nit becomes Sneaky. Sneaky Creatures can attack\\nProtected Enemies, but no longer Protect Units behind them.","speaker":"kero","showMask":true,"blocking":true,"showNext":true,"useCutsceneUI":true,"image":"protection.png"},{"id":"keyframe-82","dialogue":"Idk if you’ll use it for this battle. Or if you’ll ever use it at all!\\nBut that’s what happens when Creatures get too Sneaky!","speaker":"kero","showMask":true,"blocking":true,"showNext":true,"useCutsceneUI":true,"image":"kero.png"},{"id":"keyframe-83","dialogue":"And oh, forgot to mention. You get to send up to two copies\\nof each friend into battle! Don’t ask me why, I don’t make the\\nrules ’round here. $(･ω<)☆$","speaker":"kero","showMask":true,"blocking":true,"showNext":true,"useCutsceneUI":true,"image":"kero.png"},{"id":"keyframe-84","dialogue":"Anyway, that’s enough talking, we’ve got a battle on our hands!\\nIt’s time to BEFRIEND some DRYADS!!!","speaker":"enemy","selector":"ai_battler"},{"id":"tutorial6-start-no-deck","dialogue":"It’s time for your FINAL TEST!\\nBut you’ll have to bring your own Deck for this one. $( •̀⩊•́ )$","speaker":"enemy","selector":"ai_battler","dialogOptions":["Deck?"],"blocking":true,"showNext":true},{"id":"keyframe-86","dialogue":"A Deck is a roster of friends you’ll bring into battle!\\nYou can select up to two copies of each friend to\\nmake up a Deck of up to 30 friends in total.","speaker":"enemy","selector":"ai_battler","blocking":true,"showNext":true},{"id":"keyframe-87","dialogue":"By the way, if you ever feel like you need a refresher on all\\nthe stuff we’ve talked about so far — like if you’ve gotta do\\nsome last-minute revision for a big TEST for example —\\nI’ve added a link to some Notes to your navbar!\\nI wrote them just for you~ $(◕‿◕)♡$","speaker":"enemy","selector":"ai_battler","dialogOptions":["Aw, thanks!"],"blocking":true,"showNext":true},{"id":"keyframe-88","endGameUnsolved":true,"dialogue":"Now hit “Exit battle” in the menu, build your Deck,\\nand come back when you’re ready!\\nChoose carefully, for we have a SUPER ULTIMATE\\nEXTREME CHALLENGE FINAL BATTLE ahead of us!","speaker":"enemy","selector":"ai_battler"},{"id":"tutorial6-start-1","dialogue":"Looks like we’re here early! But don’t dally, ’cos it looks like\\nthe monsters will be here as soon as next turn!\\nThere are so many of them... hopefully they’ll come in a\\nfew at a time or we won’t have time to catch our breaths!","speaker":"enemy","selector":"ai_battler"},{"id":"tutorial6-start-2","dialogue":"AHH NO THEY CAME ALL AT ONCE WHAT A DISASTER!!!!!","speaker":"enemy","selector":"ai_battler"},{"id":"tutorial6-end","endCutscene":true,"endGame":true,"dialogue":"You... did it? Already? I wasn’t paying attention,\\nbut you must’ve pulled off some fancy combos there\\nto have made it through that battle so quickly!\\nWell, that must mean you’re an expert now. Ｏ(≧∇≦)Ｏ\\nGo forth and befriend!","speaker":"kero","showMask":true,"blocking":true,"showNext":true,"useCutsceneUI":true,"image":"kero.png"},{"id":"masteries-start","dialogue":"⚠️ Warning ⚠️\\nCutscenes are synced across your team. Gather your teammates here before proceeding!\\n(Don’t worry if someone can’t make it — you’ll always be able to replay a cutscene later.)","dialogOptions":["Ready!"],"showMask":true,"blocking":true,"showNext":true,"useCutsceneUI":true,"hideGame":true},{"id":"keyframe-93","dialogue":"Wouldya look at that! You found an ANSWER!","dialogOptions":["Heh, we totally breezed through that puzzle!","It was a tough puzzle but we made it through!"],"showMask":true,"blocking":true,"showNext":true,"useCutsceneUI":true,"hideGame":true,"image":"kero dos"},{"id":"keyframe-94","dialogue":"Puzzle? What puzzle? This whole time I thought we were doing a BATTLE OF WITS!","dialogOptions":["Ah, right, of course we were."],"showMask":true,"blocking":true,"showNext":true,"useCutsceneUI":true,"hideGame":true,"image":"kero dos"},{"id":"keyframe-95","dialogue":"Yeah! You even got to befriend a buncha monsters!","dialogOptions":["Yay! The power of UWU!"],"showMask":true,"blocking":true,"showNext":true,"useCutsceneUI":true,"hideGame":true,"image":"kero dos"},{"id":"keyframe-96","dialogue":"Actually, y’know what? That ANSWER you found...\\nIt looks a lot like a branch from the Mastery Tree!","dialogOptions":["Mastery Tree?"],"showMask":true,"blocking":true,"showNext":true,"useCutsceneUI":true,"hideGame":true,"image":"kero dos"},{"id":"keyframe-97","endCutscene":true,"endGame":true,"dialogue":"Yeah! All the CHAOS has caused the Mastery Tree to fall apart, scattering its branches all over the cave!\\nYou need to find its branches and put it back together again!","showMask":true,"blocking":true,"showNext":true,"useCutsceneUI":true,"hideGame":true,"image":"kero dos"},{"id":"legendary-start","dialogue":"⚠️ Warning ⚠️\\nCutscenes are synced across your team. Gather your teammates here before proceeding!\\n(Don’t worry if someone can’t make it — you’ll always be able to replay a cutscene later.)","dialogOptions":["Ready!"],"showMask":true,"blocking":true,"showNext":true,"useCutsceneUI":true,"hideGame":true},{"id":"keyframe-99","dialogue":"$ヽ(°〇°)ﾉ$ You did it! You befriended a legendary!","dialogOptions":["Yay! But wait, did you just... transform?"],"showMask":true,"blocking":true,"showNext":true,"useCutsceneUI":true,"hideGame":true,"image":"kero dos"},{"id":"keyframe-100","dialogue":"Oh, don’t mind that. That’s just the legendary’s power coursing\\nthrough me! The more friends we make, the more power I get —\\npower to rid this cave of CHAOS once and for all!","dialogOptions":["Ah, of course! So, what’s a legendary?"],"showMask":true,"blocking":true,"showNext":true,"useCutsceneUI":true,"hideGame":true,"image":"kero dos"},{"id":"keyframe-101","dialogue":"Legendaries are awesome. They’re the best kinda friend!\\nThey don’t like each other very much, though...","dialogOptions":["Why not?"],"showMask":true,"blocking":true,"showNext":true,"useCutsceneUI":true,"hideGame":true,"image":"kero dos"},{"id":"keyframe-102","dialogue":"I dunno. Pride, maybe. The Factions have been fighting since forever!\\nThe legendaries wanna prove that they alone are the best.\\nWhat does it matter, as long as they all become our friends!","showMask":true,"blocking":true,"showNext":true,"useCutsceneUI":true,"hideGame":true,"image":"kero dos"},{"id":"keyframe-103","dialogue":"Though it does mean that you can’t bring more than one legendary (or more than one copy of the same legendary) to battle at a time. What a bummer!","showMask":true,"blocking":true,"showNext":true,"useCutsceneUI":true,"hideGame":true,"image":"kero dos"},{"id":"keyframe-104","endCutscene":true,"endGame":true,"dialogue":"Anyways, there are 12 legendaries hiding throughout the cave.\\nThe power of UWU demands that we befriend them all!","dialogOptions":["Let’s go!"],"showMask":true,"blocking":true,"showNext":true,"useCutsceneUI":true,"hideGame":true,"image":"kero dos"},{"id":"pre-final-battle-start","dialogue":"⚠️ Warning ⚠️\\nCutscenes are synced across your team. Gather your teammates here before proceeding!\\n(Don’t worry if someone can’t make it — you’ll always be able to replay a cutscene later.)","dialogOptions":["Ready!"],"showMask":true,"blocking":true,"showNext":true,"useCutsceneUI":true,"hideGame":true},{"id":"keyframe-106","dialogue":"You did it! You befriended all the legendaries.\\nWith these cards, we can finally take over the cave!","dialogOptions":["I thought we were saving the cave, not taking it over! What about the power of UWU?"],"showMask":true,"blocking":true,"showNext":true,"useCutsceneUI":true,"hideGame":true,"image":"kero dos"},{"id":"keyframe-107","dialogue":"I AM UWU, the Underwater Usurper!\\nAnd with the power of the cards, we can usurp the whole world!!!!\\nNow hand them over.","dialogOptions":["Never!"],"showMask":true,"blocking":true,"showNext":true,"useCutsceneUI":true,"hideGame":true,"image":"angry-kero-dos.png"},{"id":"keyframe-108","dialogue":"...tragedy... ...an imposter approaches... 🌷\\n...call upon the flowers... 🌺 ...accept my aid...","showMask":true,"blocking":true,"showNext":true,"useCutsceneUI":true,"hideGame":true,"image":"coloring.png"},{"id":"keyframe-109","dialogue":"What, flowers? Don’t make me L, A, U, G, H!\\nThe whole C, A, V, E is at stake. Let M, E take care of it!","showMask":true,"blocking":true,"showNext":true,"useCutsceneUI":true,"hideGame":true,"image":"spelling-bee.png"},{"id":"keyframe-110","dialogue":"Calm your wings, Bee. I’ve seen your quarterlies.\\nYou won’t pass the audit, let alone win them the battle!","showMask":true,"blocking":true,"showNext":true,"useCutsceneUI":true,"hideGame":true,"image":"moonick.png"},{"id":"keyframe-111","dialogue":"Do I need to S, P, E, L, L it out for you? Your audits mean nothing! And if you don’t know, no one in this C, A, V, E likes you Cows, let alone your T, A, X, E, S!","showMask":true,"blocking":true,"showNext":true,"useCutsceneUI":true,"hideGame":true,"image":"spelling-bee.png"},{"id":"keyframe-112","dialogue":"(angry slime noises)","showMask":true,"blocking":true,"showNext":true,"useCutsceneUI":true,"hideGame":true,"image":"slime--slime.png"},{"id":"keyframe-113","dialogue":"And you thirgle yorgle any bergle? Yorgle not a clurgle whargle yorgle targle with! Norgle of you yorgle have largle ergle on a genurgle bargle, I’ll sargle that murgle!","showMask":true,"blocking":true,"showNext":true,"useCutsceneUI":true,"hideGame":true,"image":"dargle.png"},{"id":"keyframe-114","dialogue":"Git outta here, Dargle! Ain’t nobody here can make heads or tails of what yer sayin’! Take me instead, this here battle’s a job for a Cow!","showMask":true,"blocking":true,"showNext":true,"useCutsceneUI":true,"hideGame":true,"image":"miss-yu.png"},{"id":"keyframe-115","dialogue":"Lackadairy, get thee home, cows, thou’rt milk-drunk! I shall show that ⍼ what’s 🗦🗫🗧ing, eh!","showMask":true,"blocking":true,"showNext":true,"useCutsceneUI":true,"hideGame":true,"image":"jabberwock.png"},{"id":"keyframe-116","dialogue":"(ANGRY angry slime SLIME NOISES noises)","showMask":true,"blocking":true,"showNext":true,"useCutsceneUI":true,"hideGame":true,"image":"slime--slime-2.png"},{"id":"keyframe-117","dialogue":"Friends! This is no time for bickering!\\nLet us set aside our differences just this once.\\nOnly with our powers combined do we stand a chance against this... thing!","showMask":true,"blocking":true,"showNext":true,"useCutsceneUI":true,"hideGame":true,"image":"captain-pi.png"},{"id":"keyframe-118","dialogue":"I hate to say this but the cap’s right. If any of us tries to monopolize the board like we always do, it’s Checkmate in Three!","showMask":true,"blocking":true,"showNext":true,"useCutsceneUI":true,"hideGame":true,"image":"blancmange.png"},{"id":"keyframe-119","dialogue":"A load of HOGWASH but I’ll TAKE IT! Anything to get BACK at this SWINE and take my place BACK at the TREASURY!","showMask":true,"blocking":true,"showNext":true,"useCutsceneUI":true,"hideGame":true,"image":"mister-penny.png"},{"id":"keyframe-120","dialogue":"i’ve not fought alongside others before.\\nbut if i’ve l, e, a, r, n, e, d anything, it’s that i shouldn’t be afraid of t, r, y, i, n, g!","showMask":true,"blocking":true,"showNext":true,"useCutsceneUI":true,"hideGame":true,"image":"bb-b.png"},{"id":"keyframe-121","dialogue":"Yeah! Let us dominate the corners, surround the opponent, and flip the whole battle around! ...Together!","showMask":true,"blocking":true,"showNext":true,"useCutsceneUI":true,"hideGame":true,"image":"othello.png"},{"id":"keyframe-122","endCutscene":true,"endGame":true,"dialogue":"(determined DETERMINED SLIME slime noises NOISES)\\n(DETERMINED determined slime SLIME NOISES noises)","showMask":true,"blocking":true,"showNext":true,"useCutsceneUI":true,"hideGame":true,"image":"slime--slime-3.png"},{"id":"post-final-battle-start","dialogue":"How? How could I possibly have lost???\\nNow I’m all alone... again... $ಥ﹏ಥ$","showMask":true,"blocking":true,"showNext":true,"useCutsceneUI":true,"hideGame":true,"image":"sad-kero.png"},{"id":"keyframe-124","dialogue":"There is one force that you don’t understand.\\nA force stronger than any other force in the world.\\nEven more powerful than UWU.","showMask":true,"blocking":true,"showNext":true,"useCutsceneUI":true,"hideGame":true,"image":"captain-pi.png"},{"id":"keyframe-125","dialogue":"That force is...","dialogOptions":["Friendship?"],"showMask":true,"blocking":true,"showNext":true,"useCutsceneUI":true,"hideGame":true,"image":"captain-pi.png"},{"id":"keyframe-126","dialogue":"PIE.","showMask":true,"blocking":true,"showNext":true,"useCutsceneUI":true,"hideGame":true,"image":"captain-pi.png"},{"id":"keyframe-127","dialogue":"...","showMask":true,"blocking":true,"showNext":true,"useCutsceneUI":true,"hideGame":true,"image":"sad-kero.png"},{"id":"keyframe-128","dialogue":"# i want pie...","showMask":true,"blocking":true,"showNext":true,"useCutsceneUI":true,"hideGame":true,"image":"sad-kero.png"},{"id":"keyframe-129","dialogue":"# i’d ask a camp for some, but...\\n# i don’t even have a camp anymore...","showMask":true,"blocking":true,"showNext":true,"useCutsceneUI":true,"hideGame":true,"image":"sad-kero.png"},{"id":"keyframe-130","dialogue":"You cannot win friends with the power of CHAOS.\\nOnly when all the Factions come together, in HARMONY, can we make...\\nNot just any pie, but LEGENDARY PIE.\\nYet, I suppose, we have you, Kero, to thank, for bringing all of us together with this battle.","showMask":true,"blocking":true,"showNext":true,"useCutsceneUI":true,"hideGame":true,"image":"captain-pi.png"},{"id":"post-final-battle-choice","dialogue":"Brave heroes, what will you choose?","dialogOptions":["Seal him away!","Invite him to join us for some pie."],"showMask":true,"blocking":true,"showNext":true,"useCutsceneUI":true,"hideGame":true,"image":"captain-pi.png","nextIds":["post-final-battle-choice-1","post-final-battle-choice-2"]},{"id":"post-final-battle-choice-1","dialogue":"You and all the creatures of the cave seal Kero in the nearest lockable object, which is an empty treasure chest you found lying nearby.\\nYou make sure to hide the map to the chest behind lots of puzzles so that he will never be unsealed again.","showMask":true,"blocking":true,"showNext":true,"useCutsceneUI":true,"hideGame":true,"image":"treasure-chest.png"},{"id":"keyframe-133","endCutscene":true,"endGame":true,"dialogue":"And so, for the first time in a thousand years, the Factions worked together to bake a LEGENDARY PIE, and ate it, too.\\nAnd everyone learned that the real treasure wasn’t taking over the world, it was the pies you made along the way.","showMask":true,"blocking":true,"showNext":true,"useCutsceneUI":true,"hideGame":true,"image":"legendary-pie-no-kero.png"},{"id":"post-final-battle-choice-2","dialogue":"I love PIE! uwu","showMask":true,"blocking":true,"showNext":true,"useCutsceneUI":true,"hideGame":true,"image":"kero.png"},{"id":"keyframe-135","endCutscene":true,"endGame":true,"dialogue":"And so, for the first time in a thousand years, the Factions worked together to bake a LEGENDARY PIE, and ate it, too.\\nAnd everyone learned that the real treasure wasn’t taking over the world, it was the pies you made along the way.","showMask":true,"blocking":true,"showNext":true,"useCutsceneUI":true,"hideGame":true,"image":"legendary-pie-w-kero.png"}]';const wl=JSON.parse(bl);var ja=typeof global<"u"?global:typeof self<"u"?self:typeof window<"u"?window:{},Ze=[],ze=[],kl=typeof Uint8Array<"u"?Uint8Array:Array,vs=!1;function Va(){vs=!0;for(var r="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",e=0,t=r.length;e<t;++e)Ze[e]=r[e],ze[r.charCodeAt(e)]=e;ze["-".charCodeAt(0)]=62,ze["_".charCodeAt(0)]=63}function Al(r){vs||Va();var e,t,s,a,n,o,l=r.length;if(l%4>0)throw new Error("Invalid string. Length must be a multiple of 4");n=r[l-2]==="="?2:r[l-1]==="="?1:0,o=new kl(l*3/4-n),s=n>0?l-4:l;var i=0;for(e=0,t=0;e<s;e+=4,t+=3)a=ze[r.charCodeAt(e)]<<18|ze[r.charCodeAt(e+1)]<<12|ze[r.charCodeAt(e+2)]<<6|ze[r.charCodeAt(e+3)],o[i++]=a>>16&255,o[i++]=a>>8&255,o[i++]=a&255;return n===2?(a=ze[r.charCodeAt(e)]<<2|ze[r.charCodeAt(e+1)]>>4,o[i++]=a&255):n===1&&(a=ze[r.charCodeAt(e)]<<10|ze[r.charCodeAt(e+1)]<<4|ze[r.charCodeAt(e+2)]>>2,o[i++]=a>>8&255,o[i++]=a&255),o}function Sl(r){return Ze[r>>18&63]+Ze[r>>12&63]+Ze[r>>6&63]+Ze[r&63]}function _l(r,e,t){for(var s,a=[],n=e;n<t;n+=3)s=(r[n]<<16)+(r[n+1]<<8)+r[n+2],a.push(Sl(s));return a.join("")}function Wa(r){vs||Va();for(var e,t=r.length,s=t%3,a="",n=[],o=16383,l=0,i=t-s;l<i;l+=o)n.push(_l(r,l,l+o>i?i:l+o));return s===1?(e=r[t-1],a+=Ze[e>>2],a+=Ze[e<<4&63],a+="=="):s===2&&(e=(r[t-2]<<8)+r[t-1],a+=Ze[e>>10],a+=Ze[e>>4&63],a+=Ze[e<<2&63],a+="="),n.push(a),n.join("")}function zr(r,e,t,s,a){var n,o,l=a*8-s-1,i=(1<<l)-1,u=i>>1,c=-7,d=t?a-1:0,g=t?-1:1,w=r[e+d];for(d+=g,n=w&(1<<-c)-1,w>>=-c,c+=l;c>0;n=n*256+r[e+d],d+=g,c-=8);for(o=n&(1<<-c)-1,n>>=-c,c+=s;c>0;o=o*256+r[e+d],d+=g,c-=8);if(n===0)n=1-u;else{if(n===i)return o?NaN:(w?-1:1)*(1/0);o=o+Math.pow(2,s),n=n-u}return(w?-1:1)*o*Math.pow(2,n-s)}function Ka(r,e,t,s,a,n){var o,l,i,u=n*8-a-1,c=(1<<u)-1,d=c>>1,g=a===23?Math.pow(2,-24)-Math.pow(2,-77):0,w=s?0:n-1,y=s?1:-1,A=e<0||e===0&&1/e<0?1:0;for(e=Math.abs(e),isNaN(e)||e===1/0?(l=isNaN(e)?1:0,o=c):(o=Math.floor(Math.log(e)/Math.LN2),e*(i=Math.pow(2,-o))<1&&(o--,i*=2),o+d>=1?e+=g/i:e+=g*Math.pow(2,1-d),e*i>=2&&(o++,i/=2),o+d>=c?(l=0,o=c):o+d>=1?(l=(e*i-1)*Math.pow(2,a),o=o+d):(l=e*Math.pow(2,d-1)*Math.pow(2,a),o=0));a>=8;r[t+w]=l&255,w+=y,l/=256,a-=8);for(o=o<<a|l,u+=a;u>0;r[t+w]=o&255,w+=y,o/=256,u-=8);r[t+w-y]|=A*128}var Tl={}.toString,Za=Array.isArray||function(r){return Tl.call(r)=="[object Array]"},vl=50;x.TYPED_ARRAY_SUPPORT=ja.TYPED_ARRAY_SUPPORT!==void 0?ja.TYPED_ARRAY_SUPPORT:!0,Hr();function Hr(){return x.TYPED_ARRAY_SUPPORT?2147483647:1073741823}function et(r,e){if(Hr()<e)throw new RangeError("Invalid typed array length");return x.TYPED_ARRAY_SUPPORT?(r=new Uint8Array(e),r.__proto__=x.prototype):(r===null&&(r=new x(e)),r.length=e),r}function x(r,e,t){if(!x.TYPED_ARRAY_SUPPORT&&!(this instanceof x))return new x(r,e,t);if(typeof r=="number"){if(typeof e=="string")throw new Error("If encoding is specified then the first argument must be a string");return Is(this,r)}return qa(this,r,e,t)}x.poolSize=8192,x._augment=function(r){return r.__proto__=x.prototype,r};function qa(r,e,t,s){if(typeof e=="number")throw new TypeError('"value" argument must not be a number');return typeof ArrayBuffer<"u"&&e instanceof ArrayBuffer?Nl(r,e,t,s):typeof e=="string"?Rl(r,e,t):Cl(r,e)}x.from=function(r,e,t){return qa(null,r,e,t)},x.TYPED_ARRAY_SUPPORT&&(x.prototype.__proto__=Uint8Array.prototype,x.__proto__=Uint8Array,typeof Symbol<"u"&&Symbol.species&&x[Symbol.species]);function $a(r){if(typeof r!="number")throw new TypeError('"size" argument must be a number');if(r<0)throw new RangeError('"size" argument must not be negative')}function Il(r,e,t,s){return $a(e),e<=0?et(r,e):t!==void 0?typeof s=="string"?et(r,e).fill(t,s):et(r,e).fill(t):et(r,e)}x.alloc=function(r,e,t){return Il(null,r,e,t)};function Is(r,e){if($a(e),r=et(r,e<0?0:Ns(e)|0),!x.TYPED_ARRAY_SUPPORT)for(var t=0;t<e;++t)r[t]=0;return r}x.allocUnsafe=function(r){return Is(null,r)},x.allocUnsafeSlow=function(r){return Is(null,r)};function Rl(r,e,t){if((typeof t!="string"||t==="")&&(t="utf8"),!x.isEncoding(t))throw new TypeError('"encoding" must be a valid string encoding');var s=Xa(e,t)|0;r=et(r,s);var a=r.write(e,t);return a!==s&&(r=r.slice(0,a)),r}function Rs(r,e){var t=e.length<0?0:Ns(e.length)|0;r=et(r,t);for(var s=0;s<t;s+=1)r[s]=e[s]&255;return r}function Nl(r,e,t,s){if(e.byteLength,t<0||e.byteLength<t)throw new RangeError("'offset' is out of bounds");if(e.byteLength<t+(s||0))throw new RangeError("'length' is out of bounds");return t===void 0&&s===void 0?e=new Uint8Array(e):s===void 0?e=new Uint8Array(e,t):e=new Uint8Array(e,t,s),x.TYPED_ARRAY_SUPPORT?(r=e,r.__proto__=x.prototype):r=Rs(r,e),r}function Cl(r,e){if(qe(e)){var t=Ns(e.length)|0;return r=et(r,t),r.length===0||e.copy(r,0,0,t),r}if(e){if(typeof ArrayBuffer<"u"&&e.buffer instanceof ArrayBuffer||"length"in e)return typeof e.length!="number"||ql(e.length)?et(r,0):Rs(r,e);if(e.type==="Buffer"&&Za(e.data))return Rs(r,e.data)}throw new TypeError("First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.")}function Ns(r){if(r>=Hr())throw new RangeError("Attempt to allocate Buffer larger than maximum size: 0x"+Hr().toString(16)+" bytes");return r|0}x.isBuffer=$l;function qe(r){return!!(r!=null&&r._isBuffer)}x.compare=function(e,t){if(!qe(e)||!qe(t))throw new TypeError("Arguments must be Buffers");if(e===t)return 0;for(var s=e.length,a=t.length,n=0,o=Math.min(s,a);n<o;++n)if(e[n]!==t[n]){s=e[n],a=t[n];break}return s<a?-1:a<s?1:0},x.isEncoding=function(e){switch(String(e).toLowerCase()){case"hex":case"utf8":case"utf-8":case"ascii":case"latin1":case"binary":case"base64":case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return!0;default:return!1}},x.concat=function(e,t){if(!Za(e))throw new TypeError('"list" argument must be an Array of Buffers');if(e.length===0)return x.alloc(0);var s;if(t===void 0)for(t=0,s=0;s<e.length;++s)t+=e[s].length;var a=x.allocUnsafe(t),n=0;for(s=0;s<e.length;++s){var o=e[s];if(!qe(o))throw new TypeError('"list" argument must be an Array of Buffers');o.copy(a,n),n+=o.length}return a};function Xa(r,e){if(qe(r))return r.length;if(typeof ArrayBuffer<"u"&&typeof ArrayBuffer.isView=="function"&&(ArrayBuffer.isView(r)||r instanceof ArrayBuffer))return r.byteLength;typeof r!="string"&&(r=""+r);var t=r.length;if(t===0)return 0;for(var s=!1;;)switch(e){case"ascii":case"latin1":case"binary":return t;case"utf8":case"utf-8":case void 0:return jr(r).length;case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return t*2;case"hex":return t>>>1;case"base64":return on(r).length;default:if(s)return jr(r).length;e=(""+e).toLowerCase(),s=!0}}x.byteLength=Xa;function Pl(r,e,t){var s=!1;if((e===void 0||e<0)&&(e=0),e>this.length||((t===void 0||t>this.length)&&(t=this.length),t<=0)||(t>>>=0,e>>>=0,t<=e))return"";for(r||(r="utf8");;)switch(r){case"hex":return Hl(this,e,t);case"utf8":case"utf-8":return tn(this,e,t);case"ascii":return Bl(this,e,t);case"latin1":case"binary":return zl(this,e,t);case"base64":return Ml(this,e,t);case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return Fl(this,e,t);default:if(s)throw new TypeError("Unknown encoding: "+r);r=(r+"").toLowerCase(),s=!0}}x.prototype._isBuffer=!0;function bt(r,e,t){var s=r[e];r[e]=r[t],r[t]=s}x.prototype.swap16=function(){var e=this.length;if(e%2!==0)throw new RangeError("Buffer size must be a multiple of 16-bits");for(var t=0;t<e;t+=2)bt(this,t,t+1);return this},x.prototype.swap32=function(){var e=this.length;if(e%4!==0)throw new RangeError("Buffer size must be a multiple of 32-bits");for(var t=0;t<e;t+=4)bt(this,t,t+3),bt(this,t+1,t+2);return this},x.prototype.swap64=function(){var e=this.length;if(e%8!==0)throw new RangeError("Buffer size must be a multiple of 64-bits");for(var t=0;t<e;t+=8)bt(this,t,t+7),bt(this,t+1,t+6),bt(this,t+2,t+5),bt(this,t+3,t+4);return this},x.prototype.toString=function(){var e=this.length|0;return e===0?"":arguments.length===0?tn(this,0,e):Pl.apply(this,arguments)},x.prototype.equals=function(e){if(!qe(e))throw new TypeError("Argument must be a Buffer");return this===e?!0:x.compare(this,e)===0},x.prototype.inspect=function(){var e="",t=vl;return this.length>0&&(e=this.toString("hex",0,t).match(/.{2}/g).join(" "),this.length>t&&(e+=" ... ")),"<Buffer "+e+">"},x.prototype.compare=function(e,t,s,a,n){if(!qe(e))throw new TypeError("Argument must be a Buffer");if(t===void 0&&(t=0),s===void 0&&(s=e?e.length:0),a===void 0&&(a=0),n===void 0&&(n=this.length),t<0||s>e.length||a<0||n>this.length)throw new RangeError("out of range index");if(a>=n&&t>=s)return 0;if(a>=n)return-1;if(t>=s)return 1;if(t>>>=0,s>>>=0,a>>>=0,n>>>=0,this===e)return 0;for(var o=n-a,l=s-t,i=Math.min(o,l),u=this.slice(a,n),c=e.slice(t,s),d=0;d<i;++d)if(u[d]!==c[d]){o=u[d],l=c[d];break}return o<l?-1:l<o?1:0};function Ja(r,e,t,s,a){if(r.length===0)return-1;if(typeof t=="string"?(s=t,t=0):t>2147483647?t=2147483647:t<-2147483648&&(t=-2147483648),t=+t,isNaN(t)&&(t=a?0:r.length-1),t<0&&(t=r.length+t),t>=r.length){if(a)return-1;t=r.length-1}else if(t<0)if(a)t=0;else return-1;if(typeof e=="string"&&(e=x.from(e,s)),qe(e))return e.length===0?-1:Qa(r,e,t,s,a);if(typeof e=="number")return e=e&255,x.TYPED_ARRAY_SUPPORT&&typeof Uint8Array.prototype.indexOf=="function"?a?Uint8Array.prototype.indexOf.call(r,e,t):Uint8Array.prototype.lastIndexOf.call(r,e,t):Qa(r,[e],t,s,a);throw new TypeError("val must be string, number or Buffer")}function Qa(r,e,t,s,a){var n=1,o=r.length,l=e.length;if(s!==void 0&&(s=String(s).toLowerCase(),s==="ucs2"||s==="ucs-2"||s==="utf16le"||s==="utf-16le")){if(r.length<2||e.length<2)return-1;n=2,o/=2,l/=2,t/=2}function i(w,y){return n===1?w[y]:w.readUInt16BE(y*n)}var u;if(a){var c=-1;for(u=t;u<o;u++)if(i(r,u)===i(e,c===-1?0:u-c)){if(c===-1&&(c=u),u-c+1===l)return c*n}else c!==-1&&(u-=u-c),c=-1}else for(t+l>o&&(t=o-l),u=t;u>=0;u--){for(var d=!0,g=0;g<l;g++)if(i(r,u+g)!==i(e,g)){d=!1;break}if(d)return u}return-1}x.prototype.includes=function(e,t,s){return this.indexOf(e,t,s)!==-1},x.prototype.indexOf=function(e,t,s){return Ja(this,e,t,s,!0)},x.prototype.lastIndexOf=function(e,t,s){return Ja(this,e,t,s,!1)};function Ol(r,e,t,s){t=Number(t)||0;var a=r.length-t;s?(s=Number(s),s>a&&(s=a)):s=a;var n=e.length;if(n%2!==0)throw new TypeError("Invalid hex string");s>n/2&&(s=n/2);for(var o=0;o<s;++o){var l=parseInt(e.substr(o*2,2),16);if(isNaN(l))return o;r[t+o]=l}return o}function Ul(r,e,t,s){return Vr(jr(e,r.length-t),r,t,s)}function en(r,e,t,s){return Vr(Kl(e),r,t,s)}function Dl(r,e,t,s){return en(r,e,t,s)}function Gl(r,e,t,s){return Vr(on(e),r,t,s)}function xl(r,e,t,s){return Vr(Zl(e,r.length-t),r,t,s)}x.prototype.write=function(e,t,s,a){if(t===void 0)a="utf8",s=this.length,t=0;else if(s===void 0&&typeof t=="string")a=t,s=this.length,t=0;else if(isFinite(t))t=t|0,isFinite(s)?(s=s|0,a===void 0&&(a="utf8")):(a=s,s=void 0);else throw new Error("Buffer.write(string, encoding, offset[, length]) is no longer supported");var n=this.length-t;if((s===void 0||s>n)&&(s=n),e.length>0&&(s<0||t<0)||t>this.length)throw new RangeError("Attempt to write outside buffer bounds");a||(a="utf8");for(var o=!1;;)switch(a){case"hex":return Ol(this,e,t,s);case"utf8":case"utf-8":return Ul(this,e,t,s);case"ascii":return en(this,e,t,s);case"latin1":case"binary":return Dl(this,e,t,s);case"base64":return Gl(this,e,t,s);case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return xl(this,e,t,s);default:if(o)throw new TypeError("Unknown encoding: "+a);a=(""+a).toLowerCase(),o=!0}},x.prototype.toJSON=function(){return{type:"Buffer",data:Array.prototype.slice.call(this._arr||this,0)}};function Ml(r,e,t){return e===0&&t===r.length?Wa(r):Wa(r.slice(e,t))}function tn(r,e,t){t=Math.min(r.length,t);for(var s=[],a=e;a<t;){var n=r[a],o=null,l=n>239?4:n>223?3:n>191?2:1;if(a+l<=t){var i,u,c,d;switch(l){case 1:n<128&&(o=n);break;case 2:i=r[a+1],(i&192)===128&&(d=(n&31)<<6|i&63,d>127&&(o=d));break;case 3:i=r[a+1],u=r[a+2],(i&192)===128&&(u&192)===128&&(d=(n&15)<<12|(i&63)<<6|u&63,d>2047&&(d<55296||d>57343)&&(o=d));break;case 4:i=r[a+1],u=r[a+2],c=r[a+3],(i&192)===128&&(u&192)===128&&(c&192)===128&&(d=(n&15)<<18|(i&63)<<12|(u&63)<<6|c&63,d>65535&&d<1114112&&(o=d))}}o===null?(o=65533,l=1):o>65535&&(o-=65536,s.push(o>>>10&1023|55296),o=56320|o&1023),s.push(o),a+=l}return Ll(s)}var rn=4096;function Ll(r){var e=r.length;if(e<=rn)return String.fromCharCode.apply(String,r);for(var t="",s=0;s<e;)t+=String.fromCharCode.apply(String,r.slice(s,s+=rn));return t}function Bl(r,e,t){var s="";t=Math.min(r.length,t);for(var a=e;a<t;++a)s+=String.fromCharCode(r[a]&127);return s}function zl(r,e,t){var s="";t=Math.min(r.length,t);for(var a=e;a<t;++a)s+=String.fromCharCode(r[a]);return s}function Hl(r,e,t){var s=r.length;(!e||e<0)&&(e=0),(!t||t<0||t>s)&&(t=s);for(var a="",n=e;n<t;++n)a+=Wl(r[n]);return a}function Fl(r,e,t){for(var s=r.slice(e,t),a="",n=0;n<s.length;n+=2)a+=String.fromCharCode(s[n]+s[n+1]*256);return a}x.prototype.slice=function(e,t){var s=this.length;e=~~e,t=t===void 0?s:~~t,e<0?(e+=s,e<0&&(e=0)):e>s&&(e=s),t<0?(t+=s,t<0&&(t=0)):t>s&&(t=s),t<e&&(t=e);var a;if(x.TYPED_ARRAY_SUPPORT)a=this.subarray(e,t),a.__proto__=x.prototype;else{var n=t-e;a=new x(n,void 0);for(var o=0;o<n;++o)a[o]=this[o+e]}return a};function Ce(r,e,t){if(r%1!==0||r<0)throw new RangeError("offset is not uint");if(r+e>t)throw new RangeError("Trying to access beyond buffer length")}x.prototype.readUIntLE=function(e,t,s){e=e|0,t=t|0,s||Ce(e,t,this.length);for(var a=this[e],n=1,o=0;++o<t&&(n*=256);)a+=this[e+o]*n;return a},x.prototype.readUIntBE=function(e,t,s){e=e|0,t=t|0,s||Ce(e,t,this.length);for(var a=this[e+--t],n=1;t>0&&(n*=256);)a+=this[e+--t]*n;return a},x.prototype.readUInt8=function(e,t){return t||Ce(e,1,this.length),this[e]},x.prototype.readUInt16LE=function(e,t){return t||Ce(e,2,this.length),this[e]|this[e+1]<<8},x.prototype.readUInt16BE=function(e,t){return t||Ce(e,2,this.length),this[e]<<8|this[e+1]},x.prototype.readUInt32LE=function(e,t){return t||Ce(e,4,this.length),(this[e]|this[e+1]<<8|this[e+2]<<16)+this[e+3]*16777216},x.prototype.readUInt32BE=function(e,t){return t||Ce(e,4,this.length),this[e]*16777216+(this[e+1]<<16|this[e+2]<<8|this[e+3])},x.prototype.readIntLE=function(e,t,s){e=e|0,t=t|0,s||Ce(e,t,this.length);for(var a=this[e],n=1,o=0;++o<t&&(n*=256);)a+=this[e+o]*n;return n*=128,a>=n&&(a-=Math.pow(2,8*t)),a},x.prototype.readIntBE=function(e,t,s){e=e|0,t=t|0,s||Ce(e,t,this.length);for(var a=t,n=1,o=this[e+--a];a>0&&(n*=256);)o+=this[e+--a]*n;return n*=128,o>=n&&(o-=Math.pow(2,8*t)),o},x.prototype.readInt8=function(e,t){return t||Ce(e,1,this.length),this[e]&128?(255-this[e]+1)*-1:this[e]},x.prototype.readInt16LE=function(e,t){t||Ce(e,2,this.length);var s=this[e]|this[e+1]<<8;return s&32768?s|4294901760:s},x.prototype.readInt16BE=function(e,t){t||Ce(e,2,this.length);var s=this[e+1]|this[e]<<8;return s&32768?s|4294901760:s},x.prototype.readInt32LE=function(e,t){return t||Ce(e,4,this.length),this[e]|this[e+1]<<8|this[e+2]<<16|this[e+3]<<24},x.prototype.readInt32BE=function(e,t){return t||Ce(e,4,this.length),this[e]<<24|this[e+1]<<16|this[e+2]<<8|this[e+3]},x.prototype.readFloatLE=function(e,t){return t||Ce(e,4,this.length),zr(this,e,!0,23,4)},x.prototype.readFloatBE=function(e,t){return t||Ce(e,4,this.length),zr(this,e,!1,23,4)},x.prototype.readDoubleLE=function(e,t){return t||Ce(e,8,this.length),zr(this,e,!0,52,8)},x.prototype.readDoubleBE=function(e,t){return t||Ce(e,8,this.length),zr(this,e,!1,52,8)};function xe(r,e,t,s,a,n){if(!qe(r))throw new TypeError('"buffer" argument must be a Buffer instance');if(e>a||e<n)throw new RangeError('"value" argument is out of bounds');if(t+s>r.length)throw new RangeError("Index out of range")}x.prototype.writeUIntLE=function(e,t,s,a){if(e=+e,t=t|0,s=s|0,!a){var n=Math.pow(2,8*s)-1;xe(this,e,t,s,n,0)}var o=1,l=0;for(this[t]=e&255;++l<s&&(o*=256);)this[t+l]=e/o&255;return t+s},x.prototype.writeUIntBE=function(e,t,s,a){if(e=+e,t=t|0,s=s|0,!a){var n=Math.pow(2,8*s)-1;xe(this,e,t,s,n,0)}var o=s-1,l=1;for(this[t+o]=e&255;--o>=0&&(l*=256);)this[t+o]=e/l&255;return t+s},x.prototype.writeUInt8=function(e,t,s){return e=+e,t=t|0,s||xe(this,e,t,1,255,0),x.TYPED_ARRAY_SUPPORT||(e=Math.floor(e)),this[t]=e&255,t+1};function Fr(r,e,t,s){e<0&&(e=65535+e+1);for(var a=0,n=Math.min(r.length-t,2);a<n;++a)r[t+a]=(e&255<<8*(s?a:1-a))>>>(s?a:1-a)*8}x.prototype.writeUInt16LE=function(e,t,s){return e=+e,t=t|0,s||xe(this,e,t,2,65535,0),x.TYPED_ARRAY_SUPPORT?(this[t]=e&255,this[t+1]=e>>>8):Fr(this,e,t,!0),t+2},x.prototype.writeUInt16BE=function(e,t,s){return e=+e,t=t|0,s||xe(this,e,t,2,65535,0),x.TYPED_ARRAY_SUPPORT?(this[t]=e>>>8,this[t+1]=e&255):Fr(this,e,t,!1),t+2};function Yr(r,e,t,s){e<0&&(e=4294967295+e+1);for(var a=0,n=Math.min(r.length-t,4);a<n;++a)r[t+a]=e>>>(s?a:3-a)*8&255}x.prototype.writeUInt32LE=function(e,t,s){return e=+e,t=t|0,s||xe(this,e,t,4,4294967295,0),x.TYPED_ARRAY_SUPPORT?(this[t+3]=e>>>24,this[t+2]=e>>>16,this[t+1]=e>>>8,this[t]=e&255):Yr(this,e,t,!0),t+4},x.prototype.writeUInt32BE=function(e,t,s){return e=+e,t=t|0,s||xe(this,e,t,4,4294967295,0),x.TYPED_ARRAY_SUPPORT?(this[t]=e>>>24,this[t+1]=e>>>16,this[t+2]=e>>>8,this[t+3]=e&255):Yr(this,e,t,!1),t+4},x.prototype.writeIntLE=function(e,t,s,a){if(e=+e,t=t|0,!a){var n=Math.pow(2,8*s-1);xe(this,e,t,s,n-1,-n)}var o=0,l=1,i=0;for(this[t]=e&255;++o<s&&(l*=256);)e<0&&i===0&&this[t+o-1]!==0&&(i=1),this[t+o]=(e/l>>0)-i&255;return t+s},x.prototype.writeIntBE=function(e,t,s,a){if(e=+e,t=t|0,!a){var n=Math.pow(2,8*s-1);xe(this,e,t,s,n-1,-n)}var o=s-1,l=1,i=0;for(this[t+o]=e&255;--o>=0&&(l*=256);)e<0&&i===0&&this[t+o+1]!==0&&(i=1),this[t+o]=(e/l>>0)-i&255;return t+s},x.prototype.writeInt8=function(e,t,s){return e=+e,t=t|0,s||xe(this,e,t,1,127,-128),x.TYPED_ARRAY_SUPPORT||(e=Math.floor(e)),e<0&&(e=255+e+1),this[t]=e&255,t+1},x.prototype.writeInt16LE=function(e,t,s){return e=+e,t=t|0,s||xe(this,e,t,2,32767,-32768),x.TYPED_ARRAY_SUPPORT?(this[t]=e&255,this[t+1]=e>>>8):Fr(this,e,t,!0),t+2},x.prototype.writeInt16BE=function(e,t,s){return e=+e,t=t|0,s||xe(this,e,t,2,32767,-32768),x.TYPED_ARRAY_SUPPORT?(this[t]=e>>>8,this[t+1]=e&255):Fr(this,e,t,!1),t+2},x.prototype.writeInt32LE=function(e,t,s){return e=+e,t=t|0,s||xe(this,e,t,4,2147483647,-2147483648),x.TYPED_ARRAY_SUPPORT?(this[t]=e&255,this[t+1]=e>>>8,this[t+2]=e>>>16,this[t+3]=e>>>24):Yr(this,e,t,!0),t+4},x.prototype.writeInt32BE=function(e,t,s){return e=+e,t=t|0,s||xe(this,e,t,4,2147483647,-2147483648),e<0&&(e=4294967295+e+1),x.TYPED_ARRAY_SUPPORT?(this[t]=e>>>24,this[t+1]=e>>>16,this[t+2]=e>>>8,this[t+3]=e&255):Yr(this,e,t,!1),t+4};function sn(r,e,t,s,a,n){if(t+s>r.length)throw new RangeError("Index out of range");if(t<0)throw new RangeError("Index out of range")}function an(r,e,t,s,a){return a||sn(r,e,t,4),Ka(r,e,t,s,23,4),t+4}x.prototype.writeFloatLE=function(e,t,s){return an(this,e,t,!0,s)},x.prototype.writeFloatBE=function(e,t,s){return an(this,e,t,!1,s)};function nn(r,e,t,s,a){return a||sn(r,e,t,8),Ka(r,e,t,s,52,8),t+8}x.prototype.writeDoubleLE=function(e,t,s){return nn(this,e,t,!0,s)},x.prototype.writeDoubleBE=function(e,t,s){return nn(this,e,t,!1,s)},x.prototype.copy=function(e,t,s,a){if(s||(s=0),!a&&a!==0&&(a=this.length),t>=e.length&&(t=e.length),t||(t=0),a>0&&a<s&&(a=s),a===s||e.length===0||this.length===0)return 0;if(t<0)throw new RangeError("targetStart out of bounds");if(s<0||s>=this.length)throw new RangeError("sourceStart out of bounds");if(a<0)throw new RangeError("sourceEnd out of bounds");a>this.length&&(a=this.length),e.length-t<a-s&&(a=e.length-t+s);var n=a-s,o;if(this===e&&s<t&&t<a)for(o=n-1;o>=0;--o)e[o+t]=this[o+s];else if(n<1e3||!x.TYPED_ARRAY_SUPPORT)for(o=0;o<n;++o)e[o+t]=this[o+s];else Uint8Array.prototype.set.call(e,this.subarray(s,s+n),t);return n},x.prototype.fill=function(e,t,s,a){if(typeof e=="string"){if(typeof t=="string"?(a=t,t=0,s=this.length):typeof s=="string"&&(a=s,s=this.length),e.length===1){var n=e.charCodeAt(0);n<256&&(e=n)}if(a!==void 0&&typeof a!="string")throw new TypeError("encoding must be a string");if(typeof a=="string"&&!x.isEncoding(a))throw new TypeError("Unknown encoding: "+a)}else typeof e=="number"&&(e=e&255);if(t<0||this.length<t||this.length<s)throw new RangeError("Out of range index");if(s<=t)return this;t=t>>>0,s=s===void 0?this.length:s>>>0,e||(e=0);var o;if(typeof e=="number")for(o=t;o<s;++o)this[o]=e;else{var l=qe(e)?e:jr(new x(e,a).toString()),i=l.length;for(o=0;o<s-t;++o)this[o+t]=l[o%i]}return this};var Yl=/[^+\/0-9A-Za-z-_]/g;function jl(r){if(r=Vl(r).replace(Yl,""),r.length<2)return"";for(;r.length%4!==0;)r=r+"=";return r}function Vl(r){return r.trim?r.trim():r.replace(/^\s+|\s+$/g,"")}function Wl(r){return r<16?"0"+r.toString(16):r.toString(16)}function jr(r,e){e=e||1/0;for(var t,s=r.length,a=null,n=[],o=0;o<s;++o){if(t=r.charCodeAt(o),t>55295&&t<57344){if(!a){if(t>56319){(e-=3)>-1&&n.push(239,191,189);continue}else if(o+1===s){(e-=3)>-1&&n.push(239,191,189);continue}a=t;continue}if(t<56320){(e-=3)>-1&&n.push(239,191,189),a=t;continue}t=(a-55296<<10|t-56320)+65536}else a&&(e-=3)>-1&&n.push(239,191,189);if(a=null,t<128){if((e-=1)<0)break;n.push(t)}else if(t<2048){if((e-=2)<0)break;n.push(t>>6|192,t&63|128)}else if(t<65536){if((e-=3)<0)break;n.push(t>>12|224,t>>6&63|128,t&63|128)}else if(t<1114112){if((e-=4)<0)break;n.push(t>>18|240,t>>12&63|128,t>>6&63|128,t&63|128)}else throw new Error("Invalid code point")}return n}function Kl(r){for(var e=[],t=0;t<r.length;++t)e.push(r.charCodeAt(t)&255);return e}function Zl(r,e){for(var t,s,a,n=[],o=0;o<r.length&&!((e-=2)<0);++o)t=r.charCodeAt(o),s=t>>8,a=t%256,n.push(a),n.push(s);return n}function on(r){return Al(jl(r))}function Vr(r,e,t,s){for(var a=0;a<s&&!(a+t>=e.length||a>=r.length);++a)e[a+t]=r[a];return a}function ql(r){return r!==r}function $l(r){return r!=null&&(!!r._isBuffer||ln(r)||Xl(r))}function ln(r){return!!r.constructor&&typeof r.constructor.isBuffer=="function"&&r.constructor.isBuffer(r)}function Xl(r){return typeof r.readFloatLE=="function"&&typeof r.slice=="function"&&ln(r.slice(0,0))}x.from([239,187,191]),x.from([255,254]);const ot="pvp",un="treasure_chest",Jl="tutorial1",Ql="kero",Cs="mastery_tree",Ps="mastery_tree_prompt",Os="make_your_own_star_battle",cn="first_answer",dn="first_legendary",Us="entering_the_water",Wr="the_end",ei="mastery_tree",ti="intra_pvp",Ot="instancer",Ds="tutorial",ri="moonick",si=["moonick_final"],fn=[Ot,ei,ti,ot],ai=3*60*1e3,ni=12,oi=r=>r.split(",")[0],li=(r,e,t,s)=>!(r||fn.includes(t)||e===t&&(s??1)>1),mn=(r,e,t)=>r===e&&!t,ii=(r,e,t)=>!(t||[Ds,...fn].includes(e)||e===ri&&!si.includes(r));class ui{constructor(e){p(this,"puzzles");p(this,"battleGroups");const{puzzles:t,battleGroups:s}=e;this.puzzles=new Map(Object.values(t).map(a=>[a.puzName,a])),this.battleGroups=new Map(Object.values(s).map(a=>[a.battleGroupName,a]))}getPrimaryPuzName(e){return e.split(",")[0]}tryGetPuzzle(e){return this.puzzles.get(e)??null}getPuzzle(e){const t=this.tryGetPuzzle(e);if(t===null)throw new Error(`could not resolve puzzle ${e}`);return t}getFishPuzzleCanonicalAnswer(e){const t=this.puzzles.get(e);if(t===void 0)throw new Error(`${e} is not a fish puzzle`);const{answer:s}=t;if(s===null)throw new Error(`${e} does not have an answer`);return s}tryGetBattleGroup(e){const t=this.tryGetPuzzle(e);return t===null?null:this.battleGroups.get(t.battleGroupName)??null}getBattleGroup(e){const t=this.tryGetBattleGroup(e);if(t===null)throw new Error(`cannot find battle group for ${e}`);return t}getFirstSubpuzzleInBattleGroup(e){const{battleGroupName:t,numPuzzles:s}=this.getBattleGroup(e);return[...this.puzzles.values()].filter(a=>a.battleGroupName===t&&(s===1||a.puzName!==t)).sort((a,n)=>a.order-n.order)[0]}}const ci={ansString:"ANSWERISLOTTERY",possible:[[[0,3],[1,0],[2,2],[3,4],[4,1]],[[0,3],[1,1],[2,4],[3,2],[4,0]],[[0,3],[1,1],[2,4],[3,0],[4,2]],[[0,1],[1,3],[2,0],[3,2],[4,4]],[[0,1],[1,3],[2,0],[3,4],[4,2]],[[0,0],[1,3],[2,1],[3,4],[4,2]],[[0,2],[1,0],[2,3],[3,1],[4,4]],[[0,4],[1,1],[2,3],[3,0],[4,2]],[[0,2],[1,4],[2,1],[3,3],[4,0]],[[0,2],[1,4],[2,0],[3,3],[4,1]],[[0,4],[1,2],[2,0],[3,3],[4,1]],[[0,2],[1,0],[2,4],[3,1],[4,3]],[[0,0],[1,2],[2,4],[3,1],[4,3]],[[0,1],[1,4],[2,2],[3,0],[4,3]]]},di=r=>{const e={};for(const t of r)e[t.name]=t;return e},Gs="m1",hn="m2",fi="m3",pn="m4",mi="m5",nr="m7",xs="m9",hi=r=>{const e={};for(const t of r)e[t.masteryId]=t;return e};var de;(function(r){r.assertEqual=a=>a;function e(a){}r.assertIs=e;function t(a){throw new Error}r.assertNever=t,r.arrayToEnum=a=>{const n={};for(const o of a)n[o]=o;return n},r.getValidEnumValues=a=>{const n=r.objectKeys(a).filter(l=>typeof a[a[l]]!="number"),o={};for(const l of n)o[l]=a[l];return r.objectValues(o)},r.objectValues=a=>r.objectKeys(a).map(function(n){return a[n]}),r.objectKeys=typeof Object.keys=="function"?a=>Object.keys(a):a=>{const n=[];for(const o in a)Object.prototype.hasOwnProperty.call(a,o)&&n.push(o);return n},r.find=(a,n)=>{for(const o of a)if(n(o))return o},r.isInteger=typeof Number.isInteger=="function"?a=>Number.isInteger(a):a=>typeof a=="number"&&isFinite(a)&&Math.floor(a)===a;function s(a,n=" | "){return a.map(o=>typeof o=="string"?`'${o}'`:o).join(n)}r.joinValues=s,r.jsonStringifyReplacer=(a,n)=>typeof n=="bigint"?n.toString():n})(de||(de={}));var Ms;(function(r){r.mergeShapes=(e,t)=>({...e,...t})})(Ms||(Ms={}));const Z=de.arrayToEnum(["string","nan","number","integer","float","boolean","date","bigint","symbol","function","undefined","null","array","object","unknown","promise","void","never","map","set"]),lt=r=>{switch(typeof r){case"undefined":return Z.undefined;case"string":return Z.string;case"number":return isNaN(r)?Z.nan:Z.number;case"boolean":return Z.boolean;case"function":return Z.function;case"bigint":return Z.bigint;case"symbol":return Z.symbol;case"object":return Array.isArray(r)?Z.array:r===null?Z.null:r.then&&typeof r.then=="function"&&r.catch&&typeof r.catch=="function"?Z.promise:typeof Map<"u"&&r instanceof Map?Z.map:typeof Set<"u"&&r instanceof Set?Z.set:typeof Date<"u"&&r instanceof Date?Z.date:Z.object;default:return Z.unknown}},z=de.arrayToEnum(["invalid_type","invalid_literal","custom","invalid_union","invalid_union_discriminator","invalid_enum_value","unrecognized_keys","invalid_arguments","invalid_return_type","invalid_date","invalid_string","too_small","too_big","invalid_intersection_types","not_multiple_of","not_finite"]),pi=r=>JSON.stringify(r,null,2).replace(/"([^"]+)":/g,"$1:");class Fe extends Error{constructor(e){super(),this.issues=[],this.addIssue=s=>{this.issues=[...this.issues,s]},this.addIssues=(s=[])=>{this.issues=[...this.issues,...s]};const t=new.target.prototype;Object.setPrototypeOf?Object.setPrototypeOf(this,t):this.__proto__=t,this.name="ZodError",this.issues=e}get errors(){return this.issues}format(e){const t=e||function(n){return n.message},s={_errors:[]},a=n=>{for(const o of n.issues)if(o.code==="invalid_union")o.unionErrors.map(a);else if(o.code==="invalid_return_type")a(o.returnTypeError);else if(o.code==="invalid_arguments")a(o.argumentsError);else if(o.path.length===0)s._errors.push(t(o));else{let l=s,i=0;for(;i<o.path.length;){const u=o.path[i];i===o.path.length-1?(l[u]=l[u]||{_errors:[]},l[u]._errors.push(t(o))):l[u]=l[u]||{_errors:[]},l=l[u],i++}}};return a(this),s}toString(){return this.message}get message(){return JSON.stringify(this.issues,de.jsonStringifyReplacer,2)}get isEmpty(){return this.issues.length===0}flatten(e=t=>t.message){const t={},s=[];for(const a of this.issues)a.path.length>0?(t[a.path[0]]=t[a.path[0]]||[],t[a.path[0]].push(e(a))):s.push(e(a));return{formErrors:s,fieldErrors:t}}get formErrors(){return this.flatten()}}Fe.create=r=>new Fe(r);const or=(r,e)=>{let t;switch(r.code){case z.invalid_type:r.received===Z.undefined?t="Required":t=`Expected ${r.expected}, received ${r.received}`;break;case z.invalid_literal:t=`Invalid literal value, expected ${JSON.stringify(r.expected,de.jsonStringifyReplacer)}`;break;case z.unrecognized_keys:t=`Unrecognized key(s) in object: ${de.joinValues(r.keys,", ")}`;break;case z.invalid_union:t="Invalid input";break;case z.invalid_union_discriminator:t=`Invalid discriminator value. Expected ${de.joinValues(r.options)}`;break;case z.invalid_enum_value:t=`Invalid enum value. Expected ${de.joinValues(r.options)}, received '${r.received}'`;break;case z.invalid_arguments:t="Invalid function arguments";break;case z.invalid_return_type:t="Invalid function return type";break;case z.invalid_date:t="Invalid date";break;case z.invalid_string:typeof r.validation=="object"?"includes"in r.validation?(t=`Invalid input: must include "${r.validation.includes}"`,typeof r.validation.position=="number"&&(t=`${t} at one or more positions greater than or equal to ${r.validation.position}`)):"startsWith"in r.validation?t=`Invalid input: must start with "${r.validation.startsWith}"`:"endsWith"in r.validation?t=`Invalid input: must end with "${r.validation.endsWith}"`:de.assertNever(r.validation):r.validation!=="regex"?t=`Invalid ${r.validation}`:t="Invalid";break;case z.too_small:r.type==="array"?t=`Array must contain ${r.exact?"exactly":r.inclusive?"at least":"more than"} ${r.minimum} element(s)`:r.type==="string"?t=`String must contain ${r.exact?"exactly":r.inclusive?"at least":"over"} ${r.minimum} character(s)`:r.type==="number"?t=`Number must be ${r.exact?"exactly equal to ":r.inclusive?"greater than or equal to ":"greater than "}${r.minimum}`:r.type==="date"?t=`Date must be ${r.exact?"exactly equal to ":r.inclusive?"greater than or equal to ":"greater than "}${new Date(Number(r.minimum))}`:t="Invalid input";break;case z.too_big:r.type==="array"?t=`Array must contain ${r.exact?"exactly":r.inclusive?"at most":"less than"} ${r.maximum} element(s)`:r.type==="string"?t=`String must contain ${r.exact?"exactly":r.inclusive?"at most":"under"} ${r.maximum} character(s)`:r.type==="number"?t=`Number must be ${r.exact?"exactly":r.inclusive?"less than or equal to":"less than"} ${r.maximum}`:r.type==="bigint"?t=`BigInt must be ${r.exact?"exactly":r.inclusive?"less than or equal to":"less than"} ${r.maximum}`:r.type==="date"?t=`Date must be ${r.exact?"exactly":r.inclusive?"smaller than or equal to":"smaller than"} ${new Date(Number(r.maximum))}`:t="Invalid input";break;case z.custom:t="Invalid input";break;case z.invalid_intersection_types:t="Intersection results could not be merged";break;case z.not_multiple_of:t=`Number must be a multiple of ${r.multipleOf}`;break;case z.not_finite:t="Number must be finite";break;default:t=e.defaultError,de.assertNever(r)}return{message:t}};let gn=or;function gi(r){gn=r}function Kr(){return gn}const Zr=r=>{const{data:e,path:t,errorMaps:s,issueData:a}=r,n=[...t,...a.path||[]],o={...a,path:n};let l="";const i=s.filter(u=>!!u).slice().reverse();for(const u of i)l=u(o,{data:e,defaultError:l}).message;return{...a,path:n,message:a.message||l}},yi=[];function q(r,e){const t=Zr({issueData:e,data:r.data,path:r.path,errorMaps:[r.common.contextualErrorMap,r.schemaErrorMap,Kr(),or].filter(s=>!!s)});r.common.issues.push(t)}class Oe{constructor(){this.value="valid"}dirty(){this.value==="valid"&&(this.value="dirty")}abort(){this.value!=="aborted"&&(this.value="aborted")}static mergeArray(e,t){const s=[];for(const a of t){if(a.status==="aborted")return re;a.status==="dirty"&&e.dirty(),s.push(a.value)}return{status:e.value,value:s}}static async mergeObjectAsync(e,t){const s=[];for(const a of t)s.push({key:await a.key,value:await a.value});return Oe.mergeObjectSync(e,s)}static mergeObjectSync(e,t){const s={};for(const a of t){const{key:n,value:o}=a;if(n.status==="aborted"||o.status==="aborted")return re;n.status==="dirty"&&e.dirty(),o.status==="dirty"&&e.dirty(),n.value!=="__proto__"&&(typeof o.value<"u"||a.alwaysSet)&&(s[n.value]=o.value)}return{status:e.value,value:s}}}const re=Object.freeze({status:"aborted"}),yn=r=>({status:"dirty",value:r}),Ue=r=>({status:"valid",value:r}),Ls=r=>r.status==="aborted",Bs=r=>r.status==="dirty",lr=r=>r.status==="valid",qr=r=>typeof Promise<"u"&&r instanceof Promise;var ee;(function(r){r.errToObj=e=>typeof e=="string"?{message:e}:e||{},r.toString=e=>typeof e=="string"?e:e==null?void 0:e.message})(ee||(ee={}));class $e{constructor(e,t,s,a){this._cachedPath=[],this.parent=e,this.data=t,this._path=s,this._key=a}get path(){return this._cachedPath.length||(this._key instanceof Array?this._cachedPath.push(...this._path,...this._key):this._cachedPath.push(...this._path,this._key)),this._cachedPath}}const En=(r,e)=>{if(lr(e))return{success:!0,data:e.value};if(!r.common.issues.length)throw new Error("Validation failed but no issues detected.");return{success:!1,get error(){if(this._error)return this._error;const t=new Fe(r.common.issues);return this._error=t,this._error}}};function ne(r){if(!r)return{};const{errorMap:e,invalid_type_error:t,required_error:s,description:a}=r;if(e&&(t||s))throw new Error(`Can't use "invalid_type_error" or "required_error" in conjunction with custom error map.`);return e?{errorMap:e,description:a}:{errorMap:(o,l)=>o.code!=="invalid_type"?{message:l.defaultError}:typeof l.data>"u"?{message:s??l.defaultError}:{message:t??l.defaultError},description:a}}class le{constructor(e){this.spa=this.safeParseAsync,this._def=e,this.parse=this.parse.bind(this),this.safeParse=this.safeParse.bind(this),this.parseAsync=this.parseAsync.bind(this),this.safeParseAsync=this.safeParseAsync.bind(this),this.spa=this.spa.bind(this),this.refine=this.refine.bind(this),this.refinement=this.refinement.bind(this),this.superRefine=this.superRefine.bind(this),this.optional=this.optional.bind(this),this.nullable=this.nullable.bind(this),this.nullish=this.nullish.bind(this),this.array=this.array.bind(this),this.promise=this.promise.bind(this),this.or=this.or.bind(this),this.and=this.and.bind(this),this.transform=this.transform.bind(this),this.brand=this.brand.bind(this),this.default=this.default.bind(this),this.catch=this.catch.bind(this),this.describe=this.describe.bind(this),this.pipe=this.pipe.bind(this),this.readonly=this.readonly.bind(this),this.isNullable=this.isNullable.bind(this),this.isOptional=this.isOptional.bind(this)}get description(){return this._def.description}_getType(e){return lt(e.data)}_getOrReturnCtx(e,t){return t||{common:e.parent.common,data:e.data,parsedType:lt(e.data),schemaErrorMap:this._def.errorMap,path:e.path,parent:e.parent}}_processInputParams(e){return{status:new Oe,ctx:{common:e.parent.common,data:e.data,parsedType:lt(e.data),schemaErrorMap:this._def.errorMap,path:e.path,parent:e.parent}}}_parseSync(e){const t=this._parse(e);if(qr(t))throw new Error("Synchronous parse encountered promise.");return t}_parseAsync(e){const t=this._parse(e);return Promise.resolve(t)}parse(e,t){const s=this.safeParse(e,t);if(s.success)return s.data;throw s.error}safeParse(e,t){var s;const a={common:{issues:[],async:(s=t==null?void 0:t.async)!==null&&s!==void 0?s:!1,contextualErrorMap:t==null?void 0:t.errorMap},path:(t==null?void 0:t.path)||[],schemaErrorMap:this._def.errorMap,parent:null,data:e,parsedType:lt(e)},n=this._parseSync({data:e,path:a.path,parent:a});return En(a,n)}async parseAsync(e,t){const s=await this.safeParseAsync(e,t);if(s.success)return s.data;throw s.error}async safeParseAsync(e,t){const s={common:{issues:[],contextualErrorMap:t==null?void 0:t.errorMap,async:!0},path:(t==null?void 0:t.path)||[],schemaErrorMap:this._def.errorMap,parent:null,data:e,parsedType:lt(e)},a=this._parse({data:e,path:s.path,parent:s}),n=await(qr(a)?a:Promise.resolve(a));return En(s,n)}refine(e,t){const s=a=>typeof t=="string"||typeof t>"u"?{message:t}:typeof t=="function"?t(a):t;return this._refinement((a,n)=>{const o=e(a),l=()=>n.addIssue({code:z.custom,...s(a)});return typeof Promise<"u"&&o instanceof Promise?o.then(i=>i?!0:(l(),!1)):o?!0:(l(),!1)})}refinement(e,t){return this._refinement((s,a)=>e(s)?!0:(a.addIssue(typeof t=="function"?t(s,a):t),!1))}_refinement(e){return new Ve({schema:this,typeName:te.ZodEffects,effect:{type:"refinement",refinement:e}})}superRefine(e){return this._refinement(e)}optional(){return rt.create(this,this._def)}nullable(){return St.create(this,this._def)}nullish(){return this.nullable().optional()}array(){return je.create(this,this._def)}promise(){return xt.create(this,this._def)}or(e){return dr.create([this,e],this._def)}and(e){return fr.create(this,e,this._def)}transform(e){return new Ve({...ne(this._def),schema:this,typeName:te.ZodEffects,effect:{type:"transform",transform:e}})}default(e){const t=typeof e=="function"?e:()=>e;return new yr({...ne(this._def),innerType:this,defaultValue:t,typeName:te.ZodDefault})}brand(){return new wn({typeName:te.ZodBranded,type:this,...ne(this._def)})}catch(e){const t=typeof e=="function"?e:()=>e;return new ts({...ne(this._def),innerType:this,catchValue:t,typeName:te.ZodCatch})}describe(e){const t=this.constructor;return new t({...this._def,description:e})}pipe(e){return Er.create(this,e)}readonly(){return ss.create(this)}isOptional(){return this.safeParse(void 0).success}isNullable(){return this.safeParse(null).success}}const Ei=/^c[^\s-]{8,}$/i,bi=/^[a-z][a-z0-9]*$/,wi=/^[0-9A-HJKMNP-TV-Z]{26}$/,ki=/^[0-9a-fA-F]{8}\b-[0-9a-fA-F]{4}\b-[0-9a-fA-F]{4}\b-[0-9a-fA-F]{4}\b-[0-9a-fA-F]{12}$/i,Ai=/^(?!\.)(?!.*\.\.)([A-Z0-9_+-\.]*)[A-Z0-9_+-]@([A-Z0-9][A-Z0-9\-]*\.)+[A-Z]{2,}$/i,Si="^(\\p{Extended_Pictographic}|\\p{Emoji_Component})+$";let zs;const _i=/^(((25[0-5])|(2[0-4][0-9])|(1[0-9]{2})|([0-9]{1,2}))\.){3}((25[0-5])|(2[0-4][0-9])|(1[0-9]{2})|([0-9]{1,2}))$/,Ti=/^(([a-f0-9]{1,4}:){7}|::([a-f0-9]{1,4}:){0,6}|([a-f0-9]{1,4}:){1}:([a-f0-9]{1,4}:){0,5}|([a-f0-9]{1,4}:){2}:([a-f0-9]{1,4}:){0,4}|([a-f0-9]{1,4}:){3}:([a-f0-9]{1,4}:){0,3}|([a-f0-9]{1,4}:){4}:([a-f0-9]{1,4}:){0,2}|([a-f0-9]{1,4}:){5}:([a-f0-9]{1,4}:){0,1})([a-f0-9]{1,4}|(((25[0-5])|(2[0-4][0-9])|(1[0-9]{2})|([0-9]{1,2}))\.){3}((25[0-5])|(2[0-4][0-9])|(1[0-9]{2})|([0-9]{1,2})))$/,vi=r=>r.precision?r.offset?new RegExp(`^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\.\\d{${r.precision}}(([+-]\\d{2}(:?\\d{2})?)|Z)$`):new RegExp(`^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\.\\d{${r.precision}}Z$`):r.precision===0?r.offset?new RegExp("^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(([+-]\\d{2}(:?\\d{2})?)|Z)$"):new RegExp("^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}Z$"):r.offset?new RegExp("^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(\\.\\d+)?(([+-]\\d{2}(:?\\d{2})?)|Z)$"):new RegExp("^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(\\.\\d+)?Z$");function Ii(r,e){return!!((e==="v4"||!e)&&_i.test(r)||(e==="v6"||!e)&&Ti.test(r))}class Ye extends le{_parse(e){if(this._def.coerce&&(e.data=String(e.data)),this._getType(e)!==Z.string){const n=this._getOrReturnCtx(e);return q(n,{code:z.invalid_type,expected:Z.string,received:n.parsedType}),re}const s=new Oe;let a;for(const n of this._def.checks)if(n.kind==="min")e.data.length<n.value&&(a=this._getOrReturnCtx(e,a),q(a,{code:z.too_small,minimum:n.value,type:"string",inclusive:!0,exact:!1,message:n.message}),s.dirty());else if(n.kind==="max")e.data.length>n.value&&(a=this._getOrReturnCtx(e,a),q(a,{code:z.too_big,maximum:n.value,type:"string",inclusive:!0,exact:!1,message:n.message}),s.dirty());else if(n.kind==="length"){const o=e.data.length>n.value,l=e.data.length<n.value;(o||l)&&(a=this._getOrReturnCtx(e,a),o?q(a,{code:z.too_big,maximum:n.value,type:"string",inclusive:!0,exact:!0,message:n.message}):l&&q(a,{code:z.too_small,minimum:n.value,type:"string",inclusive:!0,exact:!0,message:n.message}),s.dirty())}else if(n.kind==="email")Ai.test(e.data)||(a=this._getOrReturnCtx(e,a),q(a,{validation:"email",code:z.invalid_string,message:n.message}),s.dirty());else if(n.kind==="emoji")zs||(zs=new RegExp(Si,"u")),zs.test(e.data)||(a=this._getOrReturnCtx(e,a),q(a,{validation:"emoji",code:z.invalid_string,message:n.message}),s.dirty());else if(n.kind==="uuid")ki.test(e.data)||(a=this._getOrReturnCtx(e,a),q(a,{validation:"uuid",code:z.invalid_string,message:n.message}),s.dirty());else if(n.kind==="cuid")Ei.test(e.data)||(a=this._getOrReturnCtx(e,a),q(a,{validation:"cuid",code:z.invalid_string,message:n.message}),s.dirty());else if(n.kind==="cuid2")bi.test(e.data)||(a=this._getOrReturnCtx(e,a),q(a,{validation:"cuid2",code:z.invalid_string,message:n.message}),s.dirty());else if(n.kind==="ulid")wi.test(e.data)||(a=this._getOrReturnCtx(e,a),q(a,{validation:"ulid",code:z.invalid_string,message:n.message}),s.dirty());else if(n.kind==="url")try{new URL(e.data)}catch{a=this._getOrReturnCtx(e,a),q(a,{validation:"url",code:z.invalid_string,message:n.message}),s.dirty()}else n.kind==="regex"?(n.regex.lastIndex=0,n.regex.test(e.data)||(a=this._getOrReturnCtx(e,a),q(a,{validation:"regex",code:z.invalid_string,message:n.message}),s.dirty())):n.kind==="trim"?e.data=e.data.trim():n.kind==="includes"?e.data.includes(n.value,n.position)||(a=this._getOrReturnCtx(e,a),q(a,{code:z.invalid_string,validation:{includes:n.value,position:n.position},message:n.message}),s.dirty()):n.kind==="toLowerCase"?e.data=e.data.toLowerCase():n.kind==="toUpperCase"?e.data=e.data.toUpperCase():n.kind==="startsWith"?e.data.startsWith(n.value)||(a=this._getOrReturnCtx(e,a),q(a,{code:z.invalid_string,validation:{startsWith:n.value},message:n.message}),s.dirty()):n.kind==="endsWith"?e.data.endsWith(n.value)||(a=this._getOrReturnCtx(e,a),q(a,{code:z.invalid_string,validation:{endsWith:n.value},message:n.message}),s.dirty()):n.kind==="datetime"?vi(n).test(e.data)||(a=this._getOrReturnCtx(e,a),q(a,{code:z.invalid_string,validation:"datetime",message:n.message}),s.dirty()):n.kind==="ip"?Ii(e.data,n.version)||(a=this._getOrReturnCtx(e,a),q(a,{validation:"ip",code:z.invalid_string,message:n.message}),s.dirty()):de.assertNever(n);return{status:s.value,value:e.data}}_regex(e,t,s){return this.refinement(a=>e.test(a),{validation:t,code:z.invalid_string,...ee.errToObj(s)})}_addCheck(e){return new Ye({...this._def,checks:[...this._def.checks,e]})}email(e){return this._addCheck({kind:"email",...ee.errToObj(e)})}url(e){return this._addCheck({kind:"url",...ee.errToObj(e)})}emoji(e){return this._addCheck({kind:"emoji",...ee.errToObj(e)})}uuid(e){return this._addCheck({kind:"uuid",...ee.errToObj(e)})}cuid(e){return this._addCheck({kind:"cuid",...ee.errToObj(e)})}cuid2(e){return this._addCheck({kind:"cuid2",...ee.errToObj(e)})}ulid(e){return this._addCheck({kind:"ulid",...ee.errToObj(e)})}ip(e){return this._addCheck({kind:"ip",...ee.errToObj(e)})}datetime(e){var t;return typeof e=="string"?this._addCheck({kind:"datetime",precision:null,offset:!1,message:e}):this._addCheck({kind:"datetime",precision:typeof(e==null?void 0:e.precision)>"u"?null:e==null?void 0:e.precision,offset:(t=e==null?void 0:e.offset)!==null&&t!==void 0?t:!1,...ee.errToObj(e==null?void 0:e.message)})}regex(e,t){return this._addCheck({kind:"regex",regex:e,...ee.errToObj(t)})}includes(e,t){return this._addCheck({kind:"includes",value:e,position:t==null?void 0:t.position,...ee.errToObj(t==null?void 0:t.message)})}startsWith(e,t){return this._addCheck({kind:"startsWith",value:e,...ee.errToObj(t)})}endsWith(e,t){return this._addCheck({kind:"endsWith",value:e,...ee.errToObj(t)})}min(e,t){return this._addCheck({kind:"min",value:e,...ee.errToObj(t)})}max(e,t){return this._addCheck({kind:"max",value:e,...ee.errToObj(t)})}length(e,t){return this._addCheck({kind:"length",value:e,...ee.errToObj(t)})}nonempty(e){return this.min(1,ee.errToObj(e))}trim(){return new Ye({...this._def,checks:[...this._def.checks,{kind:"trim"}]})}toLowerCase(){return new Ye({...this._def,checks:[...this._def.checks,{kind:"toLowerCase"}]})}toUpperCase(){return new Ye({...this._def,checks:[...this._def.checks,{kind:"toUpperCase"}]})}get isDatetime(){return!!this._def.checks.find(e=>e.kind==="datetime")}get isEmail(){return!!this._def.checks.find(e=>e.kind==="email")}get isURL(){return!!this._def.checks.find(e=>e.kind==="url")}get isEmoji(){return!!this._def.checks.find(e=>e.kind==="emoji")}get isUUID(){return!!this._def.checks.find(e=>e.kind==="uuid")}get isCUID(){return!!this._def.checks.find(e=>e.kind==="cuid")}get isCUID2(){return!!this._def.checks.find(e=>e.kind==="cuid2")}get isULID(){return!!this._def.checks.find(e=>e.kind==="ulid")}get isIP(){return!!this._def.checks.find(e=>e.kind==="ip")}get minLength(){let e=null;for(const t of this._def.checks)t.kind==="min"&&(e===null||t.value>e)&&(e=t.value);return e}get maxLength(){let e=null;for(const t of this._def.checks)t.kind==="max"&&(e===null||t.value<e)&&(e=t.value);return e}}Ye.create=r=>{var e;return new Ye({checks:[],typeName:te.ZodString,coerce:(e=r==null?void 0:r.coerce)!==null&&e!==void 0?e:!1,...ne(r)})};function Ri(r,e){const t=(r.toString().split(".")[1]||"").length,s=(e.toString().split(".")[1]||"").length,a=t>s?t:s,n=parseInt(r.toFixed(a).replace(".","")),o=parseInt(e.toFixed(a).replace(".",""));return n%o/Math.pow(10,a)}class it extends le{constructor(){super(...arguments),this.min=this.gte,this.max=this.lte,this.step=this.multipleOf}_parse(e){if(this._def.coerce&&(e.data=Number(e.data)),this._getType(e)!==Z.number){const n=this._getOrReturnCtx(e);return q(n,{code:z.invalid_type,expected:Z.number,received:n.parsedType}),re}let s;const a=new Oe;for(const n of this._def.checks)n.kind==="int"?de.isInteger(e.data)||(s=this._getOrReturnCtx(e,s),q(s,{code:z.invalid_type,expected:"integer",received:"float",message:n.message}),a.dirty()):n.kind==="min"?(n.inclusive?e.data<n.value:e.data<=n.value)&&(s=this._getOrReturnCtx(e,s),q(s,{code:z.too_small,minimum:n.value,type:"number",inclusive:n.inclusive,exact:!1,message:n.message}),a.dirty()):n.kind==="max"?(n.inclusive?e.data>n.value:e.data>=n.value)&&(s=this._getOrReturnCtx(e,s),q(s,{code:z.too_big,maximum:n.value,type:"number",inclusive:n.inclusive,exact:!1,message:n.message}),a.dirty()):n.kind==="multipleOf"?Ri(e.data,n.value)!==0&&(s=this._getOrReturnCtx(e,s),q(s,{code:z.not_multiple_of,multipleOf:n.value,message:n.message}),a.dirty()):n.kind==="finite"?Number.isFinite(e.data)||(s=this._getOrReturnCtx(e,s),q(s,{code:z.not_finite,message:n.message}),a.dirty()):de.assertNever(n);return{status:a.value,value:e.data}}gte(e,t){return this.setLimit("min",e,!0,ee.toString(t))}gt(e,t){return this.setLimit("min",e,!1,ee.toString(t))}lte(e,t){return this.setLimit("max",e,!0,ee.toString(t))}lt(e,t){return this.setLimit("max",e,!1,ee.toString(t))}setLimit(e,t,s,a){return new it({...this._def,checks:[...this._def.checks,{kind:e,value:t,inclusive:s,message:ee.toString(a)}]})}_addCheck(e){return new it({...this._def,checks:[...this._def.checks,e]})}int(e){return this._addCheck({kind:"int",message:ee.toString(e)})}positive(e){return this._addCheck({kind:"min",value:0,inclusive:!1,message:ee.toString(e)})}negative(e){return this._addCheck({kind:"max",value:0,inclusive:!1,message:ee.toString(e)})}nonpositive(e){return this._addCheck({kind:"max",value:0,inclusive:!0,message:ee.toString(e)})}nonnegative(e){return this._addCheck({kind:"min",value:0,inclusive:!0,message:ee.toString(e)})}multipleOf(e,t){return this._addCheck({kind:"multipleOf",value:e,message:ee.toString(t)})}finite(e){return this._addCheck({kind:"finite",message:ee.toString(e)})}safe(e){return this._addCheck({kind:"min",inclusive:!0,value:Number.MIN_SAFE_INTEGER,message:ee.toString(e)})._addCheck({kind:"max",inclusive:!0,value:Number.MAX_SAFE_INTEGER,message:ee.toString(e)})}get minValue(){let e=null;for(const t of this._def.checks)t.kind==="min"&&(e===null||t.value>e)&&(e=t.value);return e}get maxValue(){let e=null;for(const t of this._def.checks)t.kind==="max"&&(e===null||t.value<e)&&(e=t.value);return e}get isInt(){return!!this._def.checks.find(e=>e.kind==="int"||e.kind==="multipleOf"&&de.isInteger(e.value))}get isFinite(){let e=null,t=null;for(const s of this._def.checks){if(s.kind==="finite"||s.kind==="int"||s.kind==="multipleOf")return!0;s.kind==="min"?(t===null||s.value>t)&&(t=s.value):s.kind==="max"&&(e===null||s.value<e)&&(e=s.value)}return Number.isFinite(t)&&Number.isFinite(e)}}it.create=r=>new it({checks:[],typeName:te.ZodNumber,coerce:(r==null?void 0:r.coerce)||!1,...ne(r)});class ut extends le{constructor(){super(...arguments),this.min=this.gte,this.max=this.lte}_parse(e){if(this._def.coerce&&(e.data=BigInt(e.data)),this._getType(e)!==Z.bigint){const n=this._getOrReturnCtx(e);return q(n,{code:z.invalid_type,expected:Z.bigint,received:n.parsedType}),re}let s;const a=new Oe;for(const n of this._def.checks)n.kind==="min"?(n.inclusive?e.data<n.value:e.data<=n.value)&&(s=this._getOrReturnCtx(e,s),q(s,{code:z.too_small,type:"bigint",minimum:n.value,inclusive:n.inclusive,message:n.message}),a.dirty()):n.kind==="max"?(n.inclusive?e.data>n.value:e.data>=n.value)&&(s=this._getOrReturnCtx(e,s),q(s,{code:z.too_big,type:"bigint",maximum:n.value,inclusive:n.inclusive,message:n.message}),a.dirty()):n.kind==="multipleOf"?e.data%n.value!==BigInt(0)&&(s=this._getOrReturnCtx(e,s),q(s,{code:z.not_multiple_of,multipleOf:n.value,message:n.message}),a.dirty()):de.assertNever(n);return{status:a.value,value:e.data}}gte(e,t){return this.setLimit("min",e,!0,ee.toString(t))}gt(e,t){return this.setLimit("min",e,!1,ee.toString(t))}lte(e,t){return this.setLimit("max",e,!0,ee.toString(t))}lt(e,t){return this.setLimit("max",e,!1,ee.toString(t))}setLimit(e,t,s,a){return new ut({...this._def,checks:[...this._def.checks,{kind:e,value:t,inclusive:s,message:ee.toString(a)}]})}_addCheck(e){return new ut({...this._def,checks:[...this._def.checks,e]})}positive(e){return this._addCheck({kind:"min",value:BigInt(0),inclusive:!1,message:ee.toString(e)})}negative(e){return this._addCheck({kind:"max",value:BigInt(0),inclusive:!1,message:ee.toString(e)})}nonpositive(e){return this._addCheck({kind:"max",value:BigInt(0),inclusive:!0,message:ee.toString(e)})}nonnegative(e){return this._addCheck({kind:"min",value:BigInt(0),inclusive:!0,message:ee.toString(e)})}multipleOf(e,t){return this._addCheck({kind:"multipleOf",value:e,message:ee.toString(t)})}get minValue(){let e=null;for(const t of this._def.checks)t.kind==="min"&&(e===null||t.value>e)&&(e=t.value);return e}get maxValue(){let e=null;for(const t of this._def.checks)t.kind==="max"&&(e===null||t.value<e)&&(e=t.value);return e}}ut.create=r=>{var e;return new ut({checks:[],typeName:te.ZodBigInt,coerce:(e=r==null?void 0:r.coerce)!==null&&e!==void 0?e:!1,...ne(r)})};class ir extends le{_parse(e){if(this._def.coerce&&(e.data=!!e.data),this._getType(e)!==Z.boolean){const s=this._getOrReturnCtx(e);return q(s,{code:z.invalid_type,expected:Z.boolean,received:s.parsedType}),re}return Ue(e.data)}}ir.create=r=>new ir({typeName:te.ZodBoolean,coerce:(r==null?void 0:r.coerce)||!1,...ne(r)});class wt extends le{_parse(e){if(this._def.coerce&&(e.data=new Date(e.data)),this._getType(e)!==Z.date){const n=this._getOrReturnCtx(e);return q(n,{code:z.invalid_type,expected:Z.date,received:n.parsedType}),re}if(isNaN(e.data.getTime())){const n=this._getOrReturnCtx(e);return q(n,{code:z.invalid_date}),re}const s=new Oe;let a;for(const n of this._def.checks)n.kind==="min"?e.data.getTime()<n.value&&(a=this._getOrReturnCtx(e,a),q(a,{code:z.too_small,message:n.message,inclusive:!0,exact:!1,minimum:n.value,type:"date"}),s.dirty()):n.kind==="max"?e.data.getTime()>n.value&&(a=this._getOrReturnCtx(e,a),q(a,{code:z.too_big,message:n.message,inclusive:!0,exact:!1,maximum:n.value,type:"date"}),s.dirty()):de.assertNever(n);return{status:s.value,value:new Date(e.data.getTime())}}_addCheck(e){return new wt({...this._def,checks:[...this._def.checks,e]})}min(e,t){return this._addCheck({kind:"min",value:e.getTime(),message:ee.toString(t)})}max(e,t){return this._addCheck({kind:"max",value:e.getTime(),message:ee.toString(t)})}get minDate(){let e=null;for(const t of this._def.checks)t.kind==="min"&&(e===null||t.value>e)&&(e=t.value);return e!=null?new Date(e):null}get maxDate(){let e=null;for(const t of this._def.checks)t.kind==="max"&&(e===null||t.value<e)&&(e=t.value);return e!=null?new Date(e):null}}wt.create=r=>new wt({checks:[],coerce:(r==null?void 0:r.coerce)||!1,typeName:te.ZodDate,...ne(r)});class $r extends le{_parse(e){if(this._getType(e)!==Z.symbol){const s=this._getOrReturnCtx(e);return q(s,{code:z.invalid_type,expected:Z.symbol,received:s.parsedType}),re}return Ue(e.data)}}$r.create=r=>new $r({typeName:te.ZodSymbol,...ne(r)});class ur extends le{_parse(e){if(this._getType(e)!==Z.undefined){const s=this._getOrReturnCtx(e);return q(s,{code:z.invalid_type,expected:Z.undefined,received:s.parsedType}),re}return Ue(e.data)}}ur.create=r=>new ur({typeName:te.ZodUndefined,...ne(r)});class cr extends le{_parse(e){if(this._getType(e)!==Z.null){const s=this._getOrReturnCtx(e);return q(s,{code:z.invalid_type,expected:Z.null,received:s.parsedType}),re}return Ue(e.data)}}cr.create=r=>new cr({typeName:te.ZodNull,...ne(r)});class Ut extends le{constructor(){super(...arguments),this._any=!0}_parse(e){return Ue(e.data)}}Ut.create=r=>new Ut({typeName:te.ZodAny,...ne(r)});class kt extends le{constructor(){super(...arguments),this._unknown=!0}_parse(e){return Ue(e.data)}}kt.create=r=>new kt({typeName:te.ZodUnknown,...ne(r)});class tt extends le{_parse(e){const t=this._getOrReturnCtx(e);return q(t,{code:z.invalid_type,expected:Z.never,received:t.parsedType}),re}}tt.create=r=>new tt({typeName:te.ZodNever,...ne(r)});class Xr extends le{_parse(e){if(this._getType(e)!==Z.undefined){const s=this._getOrReturnCtx(e);return q(s,{code:z.invalid_type,expected:Z.void,received:s.parsedType}),re}return Ue(e.data)}}Xr.create=r=>new Xr({typeName:te.ZodVoid,...ne(r)});class je extends le{_parse(e){const{ctx:t,status:s}=this._processInputParams(e),a=this._def;if(t.parsedType!==Z.array)return q(t,{code:z.invalid_type,expected:Z.array,received:t.parsedType}),re;if(a.exactLength!==null){const o=t.data.length>a.exactLength.value,l=t.data.length<a.exactLength.value;(o||l)&&(q(t,{code:o?z.too_big:z.too_small,minimum:l?a.exactLength.value:void 0,maximum:o?a.exactLength.value:void 0,type:"array",inclusive:!0,exact:!0,message:a.exactLength.message}),s.dirty())}if(a.minLength!==null&&t.data.length<a.minLength.value&&(q(t,{code:z.too_small,minimum:a.minLength.value,type:"array",inclusive:!0,exact:!1,message:a.minLength.message}),s.dirty()),a.maxLength!==null&&t.data.length>a.maxLength.value&&(q(t,{code:z.too_big,maximum:a.maxLength.value,type:"array",inclusive:!0,exact:!1,message:a.maxLength.message}),s.dirty()),t.common.async)return Promise.all([...t.data].map((o,l)=>a.type._parseAsync(new $e(t,o,t.path,l)))).then(o=>Oe.mergeArray(s,o));const n=[...t.data].map((o,l)=>a.type._parseSync(new $e(t,o,t.path,l)));return Oe.mergeArray(s,n)}get element(){return this._def.type}min(e,t){return new je({...this._def,minLength:{value:e,message:ee.toString(t)}})}max(e,t){return new je({...this._def,maxLength:{value:e,message:ee.toString(t)}})}length(e,t){return new je({...this._def,exactLength:{value:e,message:ee.toString(t)}})}nonempty(e){return this.min(1,e)}}je.create=(r,e)=>new je({type:r,minLength:null,maxLength:null,exactLength:null,typeName:te.ZodArray,...ne(e)});function Dt(r){if(r instanceof Ae){const e={};for(const t in r.shape){const s=r.shape[t];e[t]=rt.create(Dt(s))}return new Ae({...r._def,shape:()=>e})}else return r instanceof je?new je({...r._def,type:Dt(r.element)}):r instanceof rt?rt.create(Dt(r.unwrap())):r instanceof St?St.create(Dt(r.unwrap())):r instanceof Xe?Xe.create(r.items.map(e=>Dt(e))):r}class Ae extends le{constructor(){super(...arguments),this._cached=null,this.nonstrict=this.passthrough,this.augment=this.extend}_getCached(){if(this._cached!==null)return this._cached;const e=this._def.shape(),t=de.objectKeys(e);return this._cached={shape:e,keys:t}}_parse(e){if(this._getType(e)!==Z.object){const u=this._getOrReturnCtx(e);return q(u,{code:z.invalid_type,expected:Z.object,received:u.parsedType}),re}const{status:s,ctx:a}=this._processInputParams(e),{shape:n,keys:o}=this._getCached(),l=[];if(!(this._def.catchall instanceof tt&&this._def.unknownKeys==="strip"))for(const u in a.data)o.includes(u)||l.push(u);const i=[];for(const u of o){const c=n[u],d=a.data[u];i.push({key:{status:"valid",value:u},value:c._parse(new $e(a,d,a.path,u)),alwaysSet:u in a.data})}if(this._def.catchall instanceof tt){const u=this._def.unknownKeys;if(u==="passthrough")for(const c of l)i.push({key:{status:"valid",value:c},value:{status:"valid",value:a.data[c]}});else if(u==="strict")l.length>0&&(q(a,{code:z.unrecognized_keys,keys:l}),s.dirty());else if(u!=="strip")throw new Error("Internal ZodObject error: invalid unknownKeys value.")}else{const u=this._def.catchall;for(const c of l){const d=a.data[c];i.push({key:{status:"valid",value:c},value:u._parse(new $e(a,d,a.path,c)),alwaysSet:c in a.data})}}return a.common.async?Promise.resolve().then(async()=>{const u=[];for(const c of i){const d=await c.key;u.push({key:d,value:await c.value,alwaysSet:c.alwaysSet})}return u}).then(u=>Oe.mergeObjectSync(s,u)):Oe.mergeObjectSync(s,i)}get shape(){return this._def.shape()}strict(e){return ee.errToObj,new Ae({...this._def,unknownKeys:"strict",...e!==void 0?{errorMap:(t,s)=>{var a,n,o,l;const i=(o=(n=(a=this._def).errorMap)===null||n===void 0?void 0:n.call(a,t,s).message)!==null&&o!==void 0?o:s.defaultError;return t.code==="unrecognized_keys"?{message:(l=ee.errToObj(e).message)!==null&&l!==void 0?l:i}:{message:i}}}:{}})}strip(){return new Ae({...this._def,unknownKeys:"strip"})}passthrough(){return new Ae({...this._def,unknownKeys:"passthrough"})}extend(e){return new Ae({...this._def,shape:()=>({...this._def.shape(),...e})})}merge(e){return new Ae({unknownKeys:e._def.unknownKeys,catchall:e._def.catchall,shape:()=>({...this._def.shape(),...e._def.shape()}),typeName:te.ZodObject})}setKey(e,t){return this.augment({[e]:t})}catchall(e){return new Ae({...this._def,catchall:e})}pick(e){const t={};return de.objectKeys(e).forEach(s=>{e[s]&&this.shape[s]&&(t[s]=this.shape[s])}),new Ae({...this._def,shape:()=>t})}omit(e){const t={};return de.objectKeys(this.shape).forEach(s=>{e[s]||(t[s]=this.shape[s])}),new Ae({...this._def,shape:()=>t})}deepPartial(){return Dt(this)}partial(e){const t={};return de.objectKeys(this.shape).forEach(s=>{const a=this.shape[s];e&&!e[s]?t[s]=a:t[s]=a.optional()}),new Ae({...this._def,shape:()=>t})}required(e){const t={};return de.objectKeys(this.shape).forEach(s=>{if(e&&!e[s])t[s]=this.shape[s];else{let n=this.shape[s];for(;n instanceof rt;)n=n._def.innerType;t[s]=n}}),new Ae({...this._def,shape:()=>t})}keyof(){return bn(de.objectKeys(this.shape))}}Ae.create=(r,e)=>new Ae({shape:()=>r,unknownKeys:"strip",catchall:tt.create(),typeName:te.ZodObject,...ne(e)}),Ae.strictCreate=(r,e)=>new Ae({shape:()=>r,unknownKeys:"strict",catchall:tt.create(),typeName:te.ZodObject,...ne(e)}),Ae.lazycreate=(r,e)=>new Ae({shape:r,unknownKeys:"strip",catchall:tt.create(),typeName:te.ZodObject,...ne(e)});class dr extends le{_parse(e){const{ctx:t}=this._processInputParams(e),s=this._def.options;function a(n){for(const l of n)if(l.result.status==="valid")return l.result;for(const l of n)if(l.result.status==="dirty")return t.common.issues.push(...l.ctx.common.issues),l.result;const o=n.map(l=>new Fe(l.ctx.common.issues));return q(t,{code:z.invalid_union,unionErrors:o}),re}if(t.common.async)return Promise.all(s.map(async n=>{const o={...t,common:{...t.common,issues:[]},parent:null};return{result:await n._parseAsync({data:t.data,path:t.path,parent:o}),ctx:o}})).then(a);{let n;const o=[];for(const i of s){const u={...t,common:{...t.common,issues:[]},parent:null},c=i._parseSync({data:t.data,path:t.path,parent:u});if(c.status==="valid")return c;c.status==="dirty"&&!n&&(n={result:c,ctx:u}),u.common.issues.length&&o.push(u.common.issues)}if(n)return t.common.issues.push(...n.ctx.common.issues),n.result;const l=o.map(i=>new Fe(i));return q(t,{code:z.invalid_union,unionErrors:l}),re}}get options(){return this._def.options}}dr.create=(r,e)=>new dr({options:r,typeName:te.ZodUnion,...ne(e)});const Jr=r=>r instanceof hr?Jr(r.schema):r instanceof Ve?Jr(r.innerType()):r instanceof pr?[r.value]:r instanceof ct?r.options:r instanceof gr?Object.keys(r.enum):r instanceof yr?Jr(r._def.innerType):r instanceof ur?[void 0]:r instanceof cr?[null]:null;class Qr extends le{_parse(e){const{ctx:t}=this._processInputParams(e);if(t.parsedType!==Z.object)return q(t,{code:z.invalid_type,expected:Z.object,received:t.parsedType}),re;const s=this.discriminator,a=t.data[s],n=this.optionsMap.get(a);return n?t.common.async?n._parseAsync({data:t.data,path:t.path,parent:t}):n._parseSync({data:t.data,path:t.path,parent:t}):(q(t,{code:z.invalid_union_discriminator,options:Array.from(this.optionsMap.keys()),path:[s]}),re)}get discriminator(){return this._def.discriminator}get options(){return this._def.options}get optionsMap(){return this._def.optionsMap}static create(e,t,s){const a=new Map;for(const n of t){const o=Jr(n.shape[e]);if(!o)throw new Error(`A discriminator value for key \`${e}\` could not be extracted from all schema options`);for(const l of o){if(a.has(l))throw new Error(`Discriminator property ${String(e)} has duplicate value ${String(l)}`);a.set(l,n)}}return new Qr({typeName:te.ZodDiscriminatedUnion,discriminator:e,options:t,optionsMap:a,...ne(s)})}}function Hs(r,e){const t=lt(r),s=lt(e);if(r===e)return{valid:!0,data:r};if(t===Z.object&&s===Z.object){const a=de.objectKeys(e),n=de.objectKeys(r).filter(l=>a.indexOf(l)!==-1),o={...r,...e};for(const l of n){const i=Hs(r[l],e[l]);if(!i.valid)return{valid:!1};o[l]=i.data}return{valid:!0,data:o}}else if(t===Z.array&&s===Z.array){if(r.length!==e.length)return{valid:!1};const a=[];for(let n=0;n<r.length;n++){const o=r[n],l=e[n],i=Hs(o,l);if(!i.valid)return{valid:!1};a.push(i.data)}return{valid:!0,data:a}}else return t===Z.date&&s===Z.date&&+r==+e?{valid:!0,data:r}:{valid:!1}}class fr extends le{_parse(e){const{status:t,ctx:s}=this._processInputParams(e),a=(n,o)=>{if(Ls(n)||Ls(o))return re;const l=Hs(n.value,o.value);return l.valid?((Bs(n)||Bs(o))&&t.dirty(),{status:t.value,value:l.data}):(q(s,{code:z.invalid_intersection_types}),re)};return s.common.async?Promise.all([this._def.left._parseAsync({data:s.data,path:s.path,parent:s}),this._def.right._parseAsync({data:s.data,path:s.path,parent:s})]).then(([n,o])=>a(n,o)):a(this._def.left._parseSync({data:s.data,path:s.path,parent:s}),this._def.right._parseSync({data:s.data,path:s.path,parent:s}))}}fr.create=(r,e,t)=>new fr({left:r,right:e,typeName:te.ZodIntersection,...ne(t)});class Xe extends le{_parse(e){const{status:t,ctx:s}=this._processInputParams(e);if(s.parsedType!==Z.array)return q(s,{code:z.invalid_type,expected:Z.array,received:s.parsedType}),re;if(s.data.length<this._def.items.length)return q(s,{code:z.too_small,minimum:this._def.items.length,inclusive:!0,exact:!1,type:"array"}),re;!this._def.rest&&s.data.length>this._def.items.length&&(q(s,{code:z.too_big,maximum:this._def.items.length,inclusive:!0,exact:!1,type:"array"}),t.dirty());const n=[...s.data].map((o,l)=>{const i=this._def.items[l]||this._def.rest;return i?i._parse(new $e(s,o,s.path,l)):null}).filter(o=>!!o);return s.common.async?Promise.all(n).then(o=>Oe.mergeArray(t,o)):Oe.mergeArray(t,n)}get items(){return this._def.items}rest(e){return new Xe({...this._def,rest:e})}}Xe.create=(r,e)=>{if(!Array.isArray(r))throw new Error("You must pass an array of schemas to z.tuple([ ... ])");return new Xe({items:r,typeName:te.ZodTuple,rest:null,...ne(e)})};class mr extends le{get keySchema(){return this._def.keyType}get valueSchema(){return this._def.valueType}_parse(e){const{status:t,ctx:s}=this._processInputParams(e);if(s.parsedType!==Z.object)return q(s,{code:z.invalid_type,expected:Z.object,received:s.parsedType}),re;const a=[],n=this._def.keyType,o=this._def.valueType;for(const l in s.data)a.push({key:n._parse(new $e(s,l,s.path,l)),value:o._parse(new $e(s,s.data[l],s.path,l))});return s.common.async?Oe.mergeObjectAsync(t,a):Oe.mergeObjectSync(t,a)}get element(){return this._def.valueType}static create(e,t,s){return t instanceof le?new mr({keyType:e,valueType:t,typeName:te.ZodRecord,...ne(s)}):new mr({keyType:Ye.create(),valueType:e,typeName:te.ZodRecord,...ne(t)})}}class es extends le{get keySchema(){return this._def.keyType}get valueSchema(){return this._def.valueType}_parse(e){const{status:t,ctx:s}=this._processInputParams(e);if(s.parsedType!==Z.map)return q(s,{code:z.invalid_type,expected:Z.map,received:s.parsedType}),re;const a=this._def.keyType,n=this._def.valueType,o=[...s.data.entries()].map(([l,i],u)=>({key:a._parse(new $e(s,l,s.path,[u,"key"])),value:n._parse(new $e(s,i,s.path,[u,"value"]))}));if(s.common.async){const l=new Map;return Promise.resolve().then(async()=>{for(const i of o){const u=await i.key,c=await i.value;if(u.status==="aborted"||c.status==="aborted")return re;(u.status==="dirty"||c.status==="dirty")&&t.dirty(),l.set(u.value,c.value)}return{status:t.value,value:l}})}else{const l=new Map;for(const i of o){const u=i.key,c=i.value;if(u.status==="aborted"||c.status==="aborted")return re;(u.status==="dirty"||c.status==="dirty")&&t.dirty(),l.set(u.value,c.value)}return{status:t.value,value:l}}}}es.create=(r,e,t)=>new es({valueType:e,keyType:r,typeName:te.ZodMap,...ne(t)});class At extends le{_parse(e){const{status:t,ctx:s}=this._processInputParams(e);if(s.parsedType!==Z.set)return q(s,{code:z.invalid_type,expected:Z.set,received:s.parsedType}),re;const a=this._def;a.minSize!==null&&s.data.size<a.minSize.value&&(q(s,{code:z.too_small,minimum:a.minSize.value,type:"set",inclusive:!0,exact:!1,message:a.minSize.message}),t.dirty()),a.maxSize!==null&&s.data.size>a.maxSize.value&&(q(s,{code:z.too_big,maximum:a.maxSize.value,type:"set",inclusive:!0,exact:!1,message:a.maxSize.message}),t.dirty());const n=this._def.valueType;function o(i){const u=new Set;for(const c of i){if(c.status==="aborted")return re;c.status==="dirty"&&t.dirty(),u.add(c.value)}return{status:t.value,value:u}}const l=[...s.data.values()].map((i,u)=>n._parse(new $e(s,i,s.path,u)));return s.common.async?Promise.all(l).then(i=>o(i)):o(l)}min(e,t){return new At({...this._def,minSize:{value:e,message:ee.toString(t)}})}max(e,t){return new At({...this._def,maxSize:{value:e,message:ee.toString(t)}})}size(e,t){return this.min(e,t).max(e,t)}nonempty(e){return this.min(1,e)}}At.create=(r,e)=>new At({valueType:r,minSize:null,maxSize:null,typeName:te.ZodSet,...ne(e)});class Gt extends le{constructor(){super(...arguments),this.validate=this.implement}_parse(e){const{ctx:t}=this._processInputParams(e);if(t.parsedType!==Z.function)return q(t,{code:z.invalid_type,expected:Z.function,received:t.parsedType}),re;function s(l,i){return Zr({data:l,path:t.path,errorMaps:[t.common.contextualErrorMap,t.schemaErrorMap,Kr(),or].filter(u=>!!u),issueData:{code:z.invalid_arguments,argumentsError:i}})}function a(l,i){return Zr({data:l,path:t.path,errorMaps:[t.common.contextualErrorMap,t.schemaErrorMap,Kr(),or].filter(u=>!!u),issueData:{code:z.invalid_return_type,returnTypeError:i}})}const n={errorMap:t.common.contextualErrorMap},o=t.data;if(this._def.returns instanceof xt){const l=this;return Ue(async function(...i){const u=new Fe([]),c=await l._def.args.parseAsync(i,n).catch(w=>{throw u.addIssue(s(i,w)),u}),d=await Reflect.apply(o,this,c);return await l._def.returns._def.type.parseAsync(d,n).catch(w=>{throw u.addIssue(a(d,w)),u})})}else{const l=this;return Ue(function(...i){const u=l._def.args.safeParse(i,n);if(!u.success)throw new Fe([s(i,u.error)]);const c=Reflect.apply(o,this,u.data),d=l._def.returns.safeParse(c,n);if(!d.success)throw new Fe([a(c,d.error)]);return d.data})}}parameters(){return this._def.args}returnType(){return this._def.returns}args(...e){return new Gt({...this._def,args:Xe.create(e).rest(kt.create())})}returns(e){return new Gt({...this._def,returns:e})}implement(e){return this.parse(e)}strictImplement(e){return this.parse(e)}static create(e,t,s){return new Gt({args:e||Xe.create([]).rest(kt.create()),returns:t||kt.create(),typeName:te.ZodFunction,...ne(s)})}}class hr extends le{get schema(){return this._def.getter()}_parse(e){const{ctx:t}=this._processInputParams(e);return this._def.getter()._parse({data:t.data,path:t.path,parent:t})}}hr.create=(r,e)=>new hr({getter:r,typeName:te.ZodLazy,...ne(e)});class pr extends le{_parse(e){if(e.data!==this._def.value){const t=this._getOrReturnCtx(e);return q(t,{received:t.data,code:z.invalid_literal,expected:this._def.value}),re}return{status:"valid",value:e.data}}get value(){return this._def.value}}pr.create=(r,e)=>new pr({value:r,typeName:te.ZodLiteral,...ne(e)});function bn(r,e){return new ct({values:r,typeName:te.ZodEnum,...ne(e)})}class ct extends le{_parse(e){if(typeof e.data!="string"){const t=this._getOrReturnCtx(e),s=this._def.values;return q(t,{expected:de.joinValues(s),received:t.parsedType,code:z.invalid_type}),re}if(this._def.values.indexOf(e.data)===-1){const t=this._getOrReturnCtx(e),s=this._def.values;return q(t,{received:t.data,code:z.invalid_enum_value,options:s}),re}return Ue(e.data)}get options(){return this._def.values}get enum(){const e={};for(const t of this._def.values)e[t]=t;return e}get Values(){const e={};for(const t of this._def.values)e[t]=t;return e}get Enum(){const e={};for(const t of this._def.values)e[t]=t;return e}extract(e){return ct.create(e)}exclude(e){return ct.create(this.options.filter(t=>!e.includes(t)))}}ct.create=bn;class gr extends le{_parse(e){const t=de.getValidEnumValues(this._def.values),s=this._getOrReturnCtx(e);if(s.parsedType!==Z.string&&s.parsedType!==Z.number){const a=de.objectValues(t);return q(s,{expected:de.joinValues(a),received:s.parsedType,code:z.invalid_type}),re}if(t.indexOf(e.data)===-1){const a=de.objectValues(t);return q(s,{received:s.data,code:z.invalid_enum_value,options:a}),re}return Ue(e.data)}get enum(){return this._def.values}}gr.create=(r,e)=>new gr({values:r,typeName:te.ZodNativeEnum,...ne(e)});class xt extends le{unwrap(){return this._def.type}_parse(e){const{ctx:t}=this._processInputParams(e);if(t.parsedType!==Z.promise&&t.common.async===!1)return q(t,{code:z.invalid_type,expected:Z.promise,received:t.parsedType}),re;const s=t.parsedType===Z.promise?t.data:Promise.resolve(t.data);return Ue(s.then(a=>this._def.type.parseAsync(a,{path:t.path,errorMap:t.common.contextualErrorMap})))}}xt.create=(r,e)=>new xt({type:r,typeName:te.ZodPromise,...ne(e)});class Ve extends le{innerType(){return this._def.schema}sourceType(){return this._def.schema._def.typeName===te.ZodEffects?this._def.schema.sourceType():this._def.schema}_parse(e){const{status:t,ctx:s}=this._processInputParams(e),a=this._def.effect||null,n={addIssue:o=>{q(s,o),o.fatal?t.abort():t.dirty()},get path(){return s.path}};if(n.addIssue=n.addIssue.bind(n),a.type==="preprocess"){const o=a.transform(s.data,n);return s.common.issues.length?{status:"dirty",value:s.data}:s.common.async?Promise.resolve(o).then(l=>this._def.schema._parseAsync({data:l,path:s.path,parent:s})):this._def.schema._parseSync({data:o,path:s.path,parent:s})}if(a.type==="refinement"){const o=l=>{const i=a.refinement(l,n);if(s.common.async)return Promise.resolve(i);if(i instanceof Promise)throw new Error("Async refinement encountered during synchronous parse operation. Use .parseAsync instead.");return l};if(s.common.async===!1){const l=this._def.schema._parseSync({data:s.data,path:s.path,parent:s});return l.status==="aborted"?re:(l.status==="dirty"&&t.dirty(),o(l.value),{status:t.value,value:l.value})}else return this._def.schema._parseAsync({data:s.data,path:s.path,parent:s}).then(l=>l.status==="aborted"?re:(l.status==="dirty"&&t.dirty(),o(l.value).then(()=>({status:t.value,value:l.value}))))}if(a.type==="transform")if(s.common.async===!1){const o=this._def.schema._parseSync({data:s.data,path:s.path,parent:s});if(!lr(o))return o;const l=a.transform(o.value,n);if(l instanceof Promise)throw new Error("Asynchronous transform encountered during synchronous parse operation. Use .parseAsync instead.");return{status:t.value,value:l}}else return this._def.schema._parseAsync({data:s.data,path:s.path,parent:s}).then(o=>lr(o)?Promise.resolve(a.transform(o.value,n)).then(l=>({status:t.value,value:l})):o);de.assertNever(a)}}Ve.create=(r,e,t)=>new Ve({schema:r,typeName:te.ZodEffects,effect:e,...ne(t)}),Ve.createWithPreprocess=(r,e,t)=>new Ve({schema:e,effect:{type:"preprocess",transform:r},typeName:te.ZodEffects,...ne(t)});class rt extends le{_parse(e){return this._getType(e)===Z.undefined?Ue(void 0):this._def.innerType._parse(e)}unwrap(){return this._def.innerType}}rt.create=(r,e)=>new rt({innerType:r,typeName:te.ZodOptional,...ne(e)});class St extends le{_parse(e){return this._getType(e)===Z.null?Ue(null):this._def.innerType._parse(e)}unwrap(){return this._def.innerType}}St.create=(r,e)=>new St({innerType:r,typeName:te.ZodNullable,...ne(e)});class yr extends le{_parse(e){const{ctx:t}=this._processInputParams(e);let s=t.data;return t.parsedType===Z.undefined&&(s=this._def.defaultValue()),this._def.innerType._parse({data:s,path:t.path,parent:t})}removeDefault(){return this._def.innerType}}yr.create=(r,e)=>new yr({innerType:r,typeName:te.ZodDefault,defaultValue:typeof e.default=="function"?e.default:()=>e.default,...ne(e)});class ts extends le{_parse(e){const{ctx:t}=this._processInputParams(e),s={...t,common:{...t.common,issues:[]}},a=this._def.innerType._parse({data:s.data,path:s.path,parent:{...s}});return qr(a)?a.then(n=>({status:"valid",value:n.status==="valid"?n.value:this._def.catchValue({get error(){return new Fe(s.common.issues)},input:s.data})})):{status:"valid",value:a.status==="valid"?a.value:this._def.catchValue({get error(){return new Fe(s.common.issues)},input:s.data})}}removeCatch(){return this._def.innerType}}ts.create=(r,e)=>new ts({innerType:r,typeName:te.ZodCatch,catchValue:typeof e.catch=="function"?e.catch:()=>e.catch,...ne(e)});class rs extends le{_parse(e){if(this._getType(e)!==Z.nan){const s=this._getOrReturnCtx(e);return q(s,{code:z.invalid_type,expected:Z.nan,received:s.parsedType}),re}return{status:"valid",value:e.data}}}rs.create=r=>new rs({typeName:te.ZodNaN,...ne(r)});const Ni=Symbol("zod_brand");class wn extends le{_parse(e){const{ctx:t}=this._processInputParams(e),s=t.data;return this._def.type._parse({data:s,path:t.path,parent:t})}unwrap(){return this._def.type}}class Er extends le{_parse(e){const{status:t,ctx:s}=this._processInputParams(e);if(s.common.async)return(async()=>{const n=await this._def.in._parseAsync({data:s.data,path:s.path,parent:s});return n.status==="aborted"?re:n.status==="dirty"?(t.dirty(),yn(n.value)):this._def.out._parseAsync({data:n.value,path:s.path,parent:s})})();{const a=this._def.in._parseSync({data:s.data,path:s.path,parent:s});return a.status==="aborted"?re:a.status==="dirty"?(t.dirty(),{status:"dirty",value:a.value}):this._def.out._parseSync({data:a.value,path:s.path,parent:s})}}static create(e,t){return new Er({in:e,out:t,typeName:te.ZodPipeline})}}class ss extends le{_parse(e){const t=this._def.innerType._parse(e);return lr(t)&&(t.value=Object.freeze(t.value)),t}}ss.create=(r,e)=>new ss({innerType:r,typeName:te.ZodReadonly,...ne(e)});const kn=(r,e={},t)=>r?Ut.create().superRefine((s,a)=>{var n,o;if(!r(s)){const l=typeof e=="function"?e(s):typeof e=="string"?{message:e}:e,i=(o=(n=l.fatal)!==null&&n!==void 0?n:t)!==null&&o!==void 0?o:!0,u=typeof l=="string"?{message:l}:l;a.addIssue({code:"custom",...u,fatal:i})}}):Ut.create(),Ci={object:Ae.lazycreate};var te;(function(r){r.ZodString="ZodString",r.ZodNumber="ZodNumber",r.ZodNaN="ZodNaN",r.ZodBigInt="ZodBigInt",r.ZodBoolean="ZodBoolean",r.ZodDate="ZodDate",r.ZodSymbol="ZodSymbol",r.ZodUndefined="ZodUndefined",r.ZodNull="ZodNull",r.ZodAny="ZodAny",r.ZodUnknown="ZodUnknown",r.ZodNever="ZodNever",r.ZodVoid="ZodVoid",r.ZodArray="ZodArray",r.ZodObject="ZodObject",r.ZodUnion="ZodUnion",r.ZodDiscriminatedUnion="ZodDiscriminatedUnion",r.ZodIntersection="ZodIntersection",r.ZodTuple="ZodTuple",r.ZodRecord="ZodRecord",r.ZodMap="ZodMap",r.ZodSet="ZodSet",r.ZodFunction="ZodFunction",r.ZodLazy="ZodLazy",r.ZodLiteral="ZodLiteral",r.ZodEnum="ZodEnum",r.ZodEffects="ZodEffects",r.ZodNativeEnum="ZodNativeEnum",r.ZodOptional="ZodOptional",r.ZodNullable="ZodNullable",r.ZodDefault="ZodDefault",r.ZodCatch="ZodCatch",r.ZodPromise="ZodPromise",r.ZodBranded="ZodBranded",r.ZodPipeline="ZodPipeline",r.ZodReadonly="ZodReadonly"})(te||(te={}));const Pi=(r,e={message:`Input not instance of ${r.name}`})=>kn(t=>t instanceof r,e),An=Ye.create,Sn=it.create,Oi=rs.create,Ui=ut.create,_n=ir.create,Di=wt.create,Gi=$r.create,xi=ur.create,Mi=cr.create,Li=Ut.create,Bi=kt.create,zi=tt.create,Hi=Xr.create,Fi=je.create,Yi=Ae.create,ji=Ae.strictCreate,Vi=dr.create,Wi=Qr.create,Ki=fr.create,Zi=Xe.create,qi=mr.create,$i=es.create,Xi=At.create,Ji=Gt.create,Qi=hr.create,eu=pr.create,tu=ct.create,ru=gr.create,su=xt.create,Tn=Ve.create,au=rt.create,nu=St.create,ou=Ve.createWithPreprocess,lu=Er.create;var E=Object.freeze({__proto__:null,defaultErrorMap:or,setErrorMap:gi,getErrorMap:Kr,makeIssue:Zr,EMPTY_PATH:yi,addIssueToContext:q,ParseStatus:Oe,INVALID:re,DIRTY:yn,OK:Ue,isAborted:Ls,isDirty:Bs,isValid:lr,isAsync:qr,get util(){return de},get objectUtil(){return Ms},ZodParsedType:Z,getParsedType:lt,ZodType:le,ZodString:Ye,ZodNumber:it,ZodBigInt:ut,ZodBoolean:ir,ZodDate:wt,ZodSymbol:$r,ZodUndefined:ur,ZodNull:cr,ZodAny:Ut,ZodUnknown:kt,ZodNever:tt,ZodVoid:Xr,ZodArray:je,ZodObject:Ae,ZodUnion:dr,ZodDiscriminatedUnion:Qr,ZodIntersection:fr,ZodTuple:Xe,ZodRecord:mr,ZodMap:es,ZodSet:At,ZodFunction:Gt,ZodLazy:hr,ZodLiteral:pr,ZodEnum:ct,ZodNativeEnum:gr,ZodPromise:xt,ZodEffects:Ve,ZodTransformer:Ve,ZodOptional:rt,ZodNullable:St,ZodDefault:yr,ZodCatch:ts,ZodNaN:rs,BRAND:Ni,ZodBranded:wn,ZodPipeline:Er,ZodReadonly:ss,custom:kn,Schema:le,ZodSchema:le,late:Ci,get ZodFirstPartyTypeKind(){return te},coerce:{string:r=>Ye.create({...r,coerce:!0}),number:r=>it.create({...r,coerce:!0}),boolean:r=>ir.create({...r,coerce:!0}),bigint:r=>ut.create({...r,coerce:!0}),date:r=>wt.create({...r,coerce:!0})},any:Li,array:Fi,bigint:Ui,boolean:_n,date:Di,discriminatedUnion:Wi,effect:Tn,enum:tu,function:Ji,instanceof:Pi,intersection:Ki,lazy:Qi,literal:eu,map:$i,nan:Oi,nativeEnum:ru,never:zi,null:Mi,nullable:nu,number:Sn,object:Yi,oboolean:()=>_n().optional(),onumber:()=>Sn().optional(),optional:au,ostring:()=>An().optional(),pipeline:lu,preprocess:ou,promise:su,record:qi,set:Xi,strictObject:ji,string:An,symbol:Gi,transformer:Tn,tuple:Zi,undefined:xi,union:Vi,unknown:Bi,void:Hi,NEVER:re,ZodIssueCode:z,quotelessJson:pi,ZodError:Fe}),K=(r=>(r.CONNECTION_ERROR="connection_error",r.SERVER_ERROR="server_error",r.BACKEND_ERROR="backend_error",r.AUTH_ERROR="auth_error",r.CLIENT_ERROR="client_error",r.PERMISSION_DENIED="permission_denied",r.TEAM_INACTIVE="team_inactive",r.TEAM_TEMP_BLOCKED="down_for_maintenance",r.NO_ROOM="no_room",r.NEED_DECK="need_deck",r.INVALID_DECK="invalid_deck",r.NO_CHECKPOINT="no_checkpoint",r.DECK_SLOT_OUT_OF_BOUNDS="deck_slot_out_of_bounds",r.CANCELED_BY_CLIENT="canceled_by_client",r.INVALID_STEP="invalid_step",r.INVALID_CHECKPOINT_SLOT="invalid_checkpoint_slot",r.NOT_READY="not_ready",r.LOCKED_BY_BATTLE="locked_by_battle",r.INVALID_TEAM="invalid_team",r.NEED_PUZZLE="need_puzzle",r.INVALID_PUZZLE="invalid_puzzle",r.BLOCKED_BY_REQUESTER="blocked_by_requester",r.BLOCKED_BY_TARGET="blocked_by_target",r.NO_MASTERY="no_mastery",r.TARGET_NO_MASTERY="no_mastery",r.DUPLICATE_REQUEST="duplicate_request",r.NO_PVP_REQUEST="no_pvp_request",r.ROOM_BUSY="room_busy",r.BAD_REQUEST="bad_request",r.SPECTATE_INVALID="spectate_invalid",r.SPECTATE_ACTION="spectate_action",r))(K||{}),fe=(r=>(r.AUTH="auth",r.SET_FACTION="set_faction",r.ENTER_ROOM="enter_room",r.STEP="step",r.DECKBUILDING_STEP="deckbuilding_step",r.MASTERY_TREE_STEP="mastery_tree_step",r.NEXT_BATTLE="next_battle",r.SELECT_PUZZLE="select_puzzle",r.SELECT_DECK_FOR_BATTLE="select_deck_for_battle",r.START_AI_BATTLE="start_ai_battle",r.RESTORE_CHECKPOINT="restore_checkpoint",r.RESIGN="resign",r.PVP_CLAIM_TIME_VICTORY="pvp_claim_time_victory",r.PVP_UNLOCK_DECK="pvp_unlock_deck",r.PVP_MAKE_REQUEST="pvp_make_request",r.PVP_CANCEL_REQUEST="pvp_cancel_request",r.PVP_ACCEPT_REQUEST="pvp_accept_request",r.PVP_SET_IS_BLOCKED="pvp_set_is_blocked",r.PVP_ENTER_RING="pvp_enter_ring",r.PVP_LEAVE_RING="pvp_leave_ring",r.VIEW_PUZZLE="view_puzzle",r.SUBMIT_ANSWER="submit_answer",r.MYOSB_REQUEST="myosb_request",r.SET_CURSOR_GROUP="set_cursor_group",r.CURSOR_EVENT="cursor_event",r.SUBSCRIBE_TO_UPDATES="subscribe_to_updates",r.PING="ping",r.ADMIN_MODIFY="admin_modify",r))(fe||{});E.object({type:E.literal("auth"),jwt:E.string()}),E.object({type:E.literal("next_battle")}),E.object({type:E.literal("select_puzzle"),hostPuzName:E.string(),selectedPuzName:E.string()}),E.object({type:E.literal("select_deck_for_battle"),puzName:E.string(),slot:E.number()}),E.object({type:E.literal("restore_checkpoint"),puzName:E.string(),slot:E.number()}),E.object({type:E.literal("pvp_claim_time_victory")}),E.object({type:E.literal("pvp_unlock_deck")}),E.object({type:E.literal("pvp_make_request"),targetTeamId:E.string(),autoAccept:E.optional(E.boolean())}),E.object({type:E.literal("pvp_cancel_request"),targetTeamId:E.string()}),E.object({type:E.literal("pvp_set_is_blocked"),targetTeamId:E.string(),isBlocked:E.boolean()}),E.object({type:E.literal("pvp_enter_ring")}),E.object({type:E.literal("pvp_leave_ring")}),E.object({type:E.literal("view_puzzle"),puzName:E.string()}),E.object({type:E.literal("submit_answer"),teamId:E.string(),puzName:E.string(),answer:E.string()}),E.object({type:E.literal("myosb_request"),teamId:E.string(),components:E.array(E.array(E.number()))}),E.object({type:E.literal("set_cursor_group"),reqId:E.number(),cursorGroupName:E.nullable(E.string())}),E.object({type:E.literal("ping")});var Te=(r=>(r.ERROR="error",r.AUTH_SUCCESS="auth_success",r.ENTER_ROOM_ERROR="enter_room_error",r.ENTERED_ROOM="entered_room",r.UPDATES="updates",r.GLOBAL_UPDATE="global_update",r.NEXT_BATTLE="next_battle",r.NOTIFICATION="notification",r.SET_CURSOR_GROUP_ACK="set_cursor_group_ack",r.CURSOR_EVENT="cursor_event",r.SUBMIT_ANSWER_ACK="submit_answer_ack",r.MYOSB_RESPONSE="myosb_response",r.PONG="pong",r))(Te||{}),Mt=(r=>(r.INTERNAL="internal",r.HINT_ANSWERED="hint_answered",r.UNLOCK="unlock",r.SOLVE="solve",r.ERRATUM="erratum",r.VICTORY="victory",r.PVP_REQUEST_RECEIVED="pvp_request_received",r.PVP_REQUEST_ACCEPTED="pvp_request_accepted",r))(Mt||{});const iu=63,vn=12,uu=r=>(new Date().getTime(),{displayName:`Deck ${r+1}`,cards:{}}),cu=r=>({...r,cards:{...r.cards}}),du=r=>{let e=0;for(const[t,s]of Object.entries(r.cards))e+=s;return e},fu=r=>{const e=[];for(const[t,s]of Object.entries(r.cards))for(let a=0;a<s;a++)e.push(t);return e},mu=(r,e)=>{const{displayName:t,cards:s,priorityCard:a,deletePriorityCard:n,clear:o}=e;if((o??!1)&&(r.cards={},delete r.priorityCard),t!==void 0&&(r.displayName=t.slice(0,iu+1)),s!==void 0)for(const[l,i]of Object.entries(s)){if(i===0){delete r.cards[l];continue}r.cards[l]=i}a!==void 0&&(r.priorityCard=a),(n??!1)&&delete r.priorityCard,r.priorityCard!==void 0&&r.cards[r.priorityCard]===void 0&&delete r.priorityCard};var In=(r=>(r.VERTICAL="vertical",r.HORIZONTAL="horizontal",r))(In||{});const hu=E.nativeEnum(In),pu=E.object({answer:E.string(),x:E.number(),y:E.number(),orientation:hu}),gu=E.object({type:E.literal("place"),placement:pu}).readonly(),yu=E.object({type:E.literal("reset")}).readonly(),Eu=E.object({type:E.literal("delete"),answer:E.string()}).readonly();E.union([gu,yu,Eu]);const bu=r=>r.replaceAll(" ",""),wu=(r,e)=>{const{reset:t,popAnswers:s,newPlacements:a,masteriesListOverride:n}=e;(t??!1)&&(delete r.masteriesListOverride,r.placements={}),n===void 0?delete r.masteriesListOverride:r.masteriesListOverride=n;for(const o of s??[])r.placements[o]!==void 0&&delete r.placements[o];Object.assign(r.placements,Object.fromEntries((a??[]).map(o=>[o.answer,o]))),r.connectedAnswers=On(r).map(o=>o.answer)},Rn=24,Nn=25,Fs=16,Ys=6,ku=()=>{const r=[];for(let e=0;e<Nn;e++){const t=[];for(let s=0;s<Rn;s++)t.push(null);r.push(t)}return r},Cn=(r,e)=>r>=0&&r<Rn&&e>=0&&e<Nn,js=(r,e,t)=>Cn(e,t)?r[t][e]:null,Au=(r,e,t)=>{const{orientation:s,answer:a}=r,n=(()=>{switch(s){case"horizontal":return t!==r.y?null:e-r.x;case"vertical":return e!==r.x?null:t-r.y}})();return n===null||n<0||n>=a.length?null:n},Su=(r,e,t)=>{const{answer:s,orientation:a}=r,n=Au(r,e,t);return n===null?null:s[n]},_u=(r,e,t)=>{const{answer:s,orientation:a}=e,n=e.x+(a==="horizontal"?t:0),o=e.y+(a==="vertical"?t:0),l=s[t];if(!Cn(n,o))return!1;if(r[o][n]!==null){if(r[o][n]!==l)return!1}else for(const i of[-1,1]){const u=n+(a==="vertical"?i:0),c=o+(a==="horizontal"?i:0);if(js(r,u,c)!==null)return!1}if(t===0){const i=n+(a==="horizontal"?-1:0),u=o+(a==="vertical"?-1:0);if(js(r,i,u)!==null)return!1}if(t===s.length-1){const i=n+(a==="horizontal"?1:0),u=o+(a==="vertical"?1:0);if(js(r,i,u)!==null)return!1}return!0},Pn=(r,e)=>{const{answer:t,orientation:s}=e;for(const[a,n]of[...t].entries()){if(!_u(r,e,a))return!1;const o=e.x+(s==="horizontal"?a:0),l=e.y+(s==="vertical"?a:0);r[l][o]=n}return!0};function Tu(r){const{x:e,y:t,answer:s,orientation:a}=r;return a==="horizontal"?t===Ys&&e<=Fs&&Fs<e+s.length:e===Fs&&t<=Ys&&Ys<t+s.length}function vu(r,e){if(r.orientation===e.orientation)return!1;r.orientation==="vertical"&&([r,e]=[e,r]);const{x:t,y:s,answer:a}=r,{x:n,y:o,answer:l}=e;return o<=s&&s<o+l.length&&t<=n&&n<t+a.length}function On(r){let e=!0;const t=r.placements,s={};let a=[];const n=[];for(;e||a.length>0;){const o=[];if(e){for(const l of Object.keys(t))s[l]||Tu(t[l])&&(o.push(t[l]),s[l]=!0);e=!1}else for(const l of Object.keys(t))if(!s[l]){for(const i of a)if(vu(i,t[l])){o.push(t[l]),s[l]=!0;break}}n.push(...o),a=o}return n}const Iu=(r,e)=>{const t=On(e);return(()=>e.masteriesListOverride!==void 0?e.masteriesListOverride.map(s=>r[s]):Object.values(r).filter(s=>t.some(a=>Su(a,s.x,s.y)!==null)))().sort((s,a)=>s.order-a.order)},Ru=r=>{const e=ku();for(const t of Object.values(r.placements))if(!Pn(e,t))return null;return e},Nu=(r,e,t)=>{switch(t.type){case"place":{const{placement:s}=t,{answer:a}=s;if(!e.includes(a)||r.placements[a])return!1;const n=Ru(r);if(n===null||!Pn(n,s))return!1;break}case"reset":break;case"delete":{const{answer:s}=t;if(!r.placements[s])return!1;break}}return!0},Cu=r=>{switch(r.type){case"place":{const{placement:e}=r;return{newPlacements:[e]}}case"delete":{const{answer:e}=r;return{popAnswers:[e]}}case"reset":return{reset:!0}}throw new Error("unknown mastery tree step")},_t=6e3,Pu=3e3;var Lt=(r=>(r.NEW="new",r.DIRTY="dirty",r.SYNCING="syncing",r.FAILED="failed",r.SYNCED="synced",r))(Lt||{});const Un=(r,e)=>{for(const[t,s]of Object.entries(e.teams)){const a=r.teams[t];if(a===void 0){r.teams[t]=s;continue}s.fastSync!==void 0&&(a.fastSync=s.fastSync),s.misc!==void 0&&(a.misc=s.misc);for(const[n,o]of Object.entries(s.decks??{}))a.decks??(a.decks={}),a.decks[Number(n)]=o;s.masteryTree!==void 0&&(a.masteryTree=s.masteryTree);for(const[n,o]of Object.entries(s.rooms??{}))a.rooms??(a.rooms={}),a.rooms[n]=o;for(const[n,o]of Object.entries(s.checkpoints??{}))a.checkpoints??(a.checkpoints={}),a.checkpoints[n]=o;for(const[n,o]of Object.entries(s.answers??{}))a.answers??(a.answers={}),a.answers[n]=o}},Ou=(r,e)=>{Un(r,e)};class Uu{constructor(){p(this,"dirtyState");p(this,"pendingDirtyStateUpd");this.dirtyState={teams:{}},this.pendingDirtyStateUpd={teams:{}}}update(e){Un(this.pendingDirtyStateUpd,e)}commitUpds(){Ou(this.dirtyState,this.pendingDirtyStateUpd),this.pendingDirtyStateUpd={teams:{}}}}const Du=r=>{const e=r.lastEventTime===0?"N/A":`${sc(Date.now()-r.lastEventTime,!0)} ago`;return`${r.numPerInterval} / ${r.intervalLength/1e3}s (tot: ${r.totNumEvents}) (last: ${e})`};class dt{constructor(e){p(this,"intervalLength");p(this,"totNumEvents");p(this,"lastEventTime");p(this,"prevNumEvents");p(this,"currNumEvents");this.intervalLength=e,this.totNumEvents=0,this.lastEventTime=0,this.prevNumEvents=0,this.currNumEvents=0}record(){this.update(!0)}update(e){const t=new Date().getTime(),s=Math.floor(this.lastEventTime/this.intervalLength),a=Math.floor(t/this.intervalLength);s!==a&&(this.prevNumEvents=s+1===a?this.currNumEvents:0,this.currNumEvents=0),(e??!1)&&(this.lastEventTime=t,this.currNumEvents++,this.totNumEvents++)}getSummary(){return this.update(),{intervalLength:this.intervalLength,totNumEvents:this.totNumEvents,lastEventTime:this.lastEventTime,numPerInterval:this.prevNumEvents}}getSummaryString(){return Du(this.getSummary())}}class Gu{constructor(e){p(this,"server");p(this,"numAuthsSummaries");p(this,"numRequestsSummaries");p(this,"numAuthsUpds");p(this,"numRequestsUpds");this.server=e,this.numAuthsSummaries={},this.numRequestsSummaries={},this.numAuthsUpds=new Set,this.numRequestsUpds=new Set}recordAuth(e){this.numAuthsUpds.add(e)}recordRequest(e){this.numRequestsUpds.add(e)}getAndCommitUpds(){const e={teamNumAuthsMetrics:Object.fromEntries(Array.from(this.numAuthsUpds,t=>[t,this.server.getTeamController(t).numAuthsMetrics.getSummary()])),teamNumRequestsMetrics:Object.fromEntries(Array.from(this.numRequestsUpds,t=>[t,this.server.getTeamController(t).numRequestsMetrics.getSummary()]))};return Object.assign(this.numAuthsSummaries,e.teamNumAuthsMetrics),Object.assign(this.numRequestsSummaries,e.teamNumRequestsMetrics),this.numAuthsUpds.clear(),this.numRequestsUpds.clear(),e}}const xu=(r,e)=>{e.numHintsTotal!==void 0&&(r.numHintsTotal=e.numHintsTotal);for(const[t,s]of Object.entries(e.unlocks??{})){if(r.unlocks??(r.unlocks={}),s===null){r.unlocks[t]=null;return}r.unlocks[t]=Object.assign(r.unlocks[t]??{},s)}for(const[t,s]of Object.entries(e.cardUnlocks??{}))r.cardUnlocks??(r.cardUnlocks={}),r.cardUnlocks[t]=s;for(const[t,s]of Object.entries(e.selectedPuzzles??{}))r.selectedPuzzles??(r.selectedPuzzles={}),r.selectedPuzzles[t]=s;for(const[t,s]of Object.entries(e.enabledMasteries??{}))r.enabledMasteries??(r.enabledMasteries={}),r.enabledMasteries[t]=s},Mu=(r,e)=>{const{numHintsTotal:t,unlocks:s,cardUnlocks:a,selectedPuzzles:n,enabledMasteries:o}=e;t!==void 0&&(r.numHintsTotal=t);for(const[l,i]of Object.entries(s??{}))r.unlocks[l]=Object.assign(r.unlocks[l]??{},i);for(const[l,i]of Object.entries(a??{}))i?r.cardUnlocks[l]=!0:delete r.cardUnlocks[l];for(const[l,i]of Object.entries(n??{}))i===null?delete r.selectedPuzzles[l]:r.selectedPuzzles[l]=i;for(const[l,i]of Object.entries(o??{}))i?r.enabledMasteries[l]=!0:delete r.enabledMasteries[l]};class Lu{constructor(){p(this,"state");p(this,"pendingUpds");this.state={},this.pendingUpds={}}addTeam(e,t){this.state[e]=t}updateTeam(e,t){if(this.state[e]===void 0)return;const s=this.pendingUpds[e];if(s===void 0){this.pendingUpds[e]=t;return}xu(s,t),this.removeRedundantTeamUpdates(e)}removeRedundantTeamUpdates(e){const t=this.pendingUpds[e],s=this.state[e];if(t===void 0)return;if(s===void 0)throw new Error("expect to only receive updates for existing teams");const{numHintsTotal:a,unlocks:n,cardUnlocks:o,selectedPuzzles:l,enabledMasteries:i}=t;if(a!==void 0&&a===s.numHintsTotal&&delete t.numHintsTotal,n!==void 0){for(const[u,c]of Object.entries(n)){if(c===null){s.unlocks[u]===void 0&&delete n[u];continue}if(s.unlocks[u]===void 0)continue;const d=s.unlocks[u],{solveTime:g,numHintsUsed:w,numWrongGuesses:y,numMembers:A}=c;g!==void 0&&d.solveTime!==void 0&&g===d.solveTime&&delete c.solveTime,w!==void 0&&w===(d.numHintsUsed??0)&&delete c.numHintsUsed,y!==void 0&&y===(d.numWrongGuesses??0)&&delete c.numWrongGuesses,A!==void 0&&A===(d.numMembers??0)&&delete c.numMembers,Object.keys(c).length===0&&delete n[u]}Object.keys(n).length===0&&delete t.unlocks}if(o!==void 0){for(const[u,c]of Object.entries(o))c===(s.cardUnlocks[u]??!1)&&delete o[u];Object.keys(o).length===0&&delete t.cardUnlocks}if(l!==void 0){for(const[u,c]of Object.entries(l))c===s.selectedPuzzles[u]&&delete l[u];Object.keys(l).length===0&&delete t.selectedPuzzles}if(i!==void 0){for(const[u,c]of Object.entries(i))c===(s.enabledMasteries[u]??!1)&&delete i[u];Object.keys(i).length===0&&delete t.enabledMasteries}Object.keys(t).length===0&&delete this.pendingUpds[e]}commitUpds(){for(const[e,t]of Object.entries(this.pendingUpds)){if(this.state[e]===void 0)throw new Error("expect to only receive updates for existing teams");Mu(this.state[e],t)}this.pendingUpds={}}}const Bu=r=>{const{displayName:e,faction:t,factionScoreContribution:s,hasReputationBoost:a}=r;return{displayName:e,faction:t,factionScoreContribution:s,hasReputationBoost:a}},zu=(r,e)=>{Object.assign(r,e)},Hu=(r,e)=>{Object.assign(r,e)};class Fu{constructor(){p(this,"state");p(this,"cachedSerializedOverrideGlobalUpdate");p(this,"pendingUpds");this.state={},this.pendingUpds={}}invalidateCache(){delete this.cachedSerializedOverrideGlobalUpdate}getSerializedOverrideGlobalUpdate(){if(this.cachedSerializedOverrideGlobalUpdate!==void 0)return this.cachedSerializedOverrideGlobalUpdate;const e={type:Te.GLOBAL_UPDATE,upd:{type:$.TEAM_LIST_OVERRIDE_STATE,teams:this.state}};return this.cachedSerializedOverrideGlobalUpdate=JSON.stringify(e),this.cachedSerializedOverrideGlobalUpdate}addTeam(e,t){this.state[e]=t,this.invalidateCache()}removeTeam(e){delete this.state[e],delete this.pendingUpds[e],this.invalidateCache()}updateTeam(e,t){if(this.state[e]===void 0)return;const s=this.pendingUpds[e];if(s===void 0){this.pendingUpds[e]=t;return}zu(s,t),this.removeRedundantTeamUpdates(e)}removeRedundantTeamUpdates(e){const t=this.pendingUpds[e],s=this.state[e];if(t===void 0)return;if(s===void 0)throw new Error("expect to only receive updates for existing teams");const{displayName:a,faction:n,factionScoreContribution:o,hasReputationBoost:l,hasPvP:i,isPvPGameActive:u,numSolves:c,completionTime:d,lastSolveTime:g}=t;a===s.displayName&&delete t.displayName,n===s.faction&&delete t.faction,o===s.factionScoreContribution&&delete t.factionScoreContribution,l===s.hasReputationBoost&&delete t.hasReputationBoost,i===s.hasPvP&&delete t.hasPvP,u===s.isPvPGameActive&&delete t.isPvPGameActive,c===s.numSolves&&delete t.numSolves,d===s.completionTime&&delete t.completionTime,g===s.lastSolveTime&&delete t.lastSolveTime,Object.keys(t).length===0&&delete this.pendingUpds[e]}commitUpds(){for(const[e,t]of Object.entries(this.pendingUpds)){if(this.state[e]===void 0)throw new Error("expect to only receive updates for existing teams");Hu(this.state[e],t)}this.pendingUpds={},this.invalidateCache()}}const as=3;var J=(r=>(r.SERVER="server",r.SERVER_HEALTH="server_health",r.BIG_BOARD="big_board",r.PVP="pvp",r.TEAM_LIST="team_list",r.TEAM_MEMBERS="team_members",r.FACTION_HISTORY="faction_history",r.TEAM="team",r.TEAM_FISH_PUZZLE="team_fish_puzzle",r.TEAM_BATTLE="team_battle",r.TEAM_DECKS="team_decks",r.TEAM_MASTERY_TREE="team_mastery_tree",r.TEAM_PVP="team_pvp",r.TEAM_SPEEDRUN_LEADERBOARD_SUMMARY="team_speedrun_leaderboard_summary",r))(J||{});const Yu=E.object({type:E.literal("server")}),ju=E.object({type:E.literal("server_health")}),Vu=E.object({type:E.literal("big_board")}),Wu=E.object({type:E.literal("pvp")}),Ku=E.object({type:E.literal("team_list")}),Zu=E.object({type:E.literal("team_members"),teamId:E.string()}),qu=E.object({type:E.literal("faction_history")}),$u=E.object({type:E.literal("team"),teamId:E.string()}),Xu=E.object({type:E.literal("team_fish_puzzle"),teamId:E.string(),puzName:E.string()}),Ju=E.object({type:E.literal("team_battle"),teamId:E.string(),puzName:E.string()}),Qu=E.object({type:E.literal("team_decks"),teamId:E.string()}),ec=E.object({type:E.literal("team_mastery_tree"),teamId:E.string()}),tc=E.object({type:E.literal("team_pvp"),teamId:E.string()}),rc=E.object({type:E.literal("team_speedrun_leaderboard_summary"),teamId:E.string(),puzName:E.string()});E.object({numHintsTotal:E.number(),numHintsUsed:E.number()}),E.union([Yu,ju,Vu,Wu,Ku,Zu,qu,$u,Xu,Ju,Qu,ec,tc,rc]);var Bt=(r=>(r.NONE="none",r.INACTIVE="inactive",r.ACTIVE="active",r))(Bt||{}),$=(r=>(r.SERVER_OVERRIDE_STATE="server_override_state",r.SERVER_ADD_TEAM="server_add_team",r.SERVER_UPDATE_TEAM="server_update_team",r.SERVER_UNCLAIMED_HINTS="server_unclaimed_hints",r.SERVER_HEALTH_OVERRIDE_STATE="server_health_override_state",r.SERVER_HEALTH_UPDATE_STATE="server_health_update_state",r.BIG_BOARD_OVERRIDE_STATE="big_board_override_state",r.BIG_BOARD_UPDATE_STATE="big_board_update_state",r.PVP_OVERRIDE_STATE="pvp_override_state",r.PVP_UPDATE_STATE="pvp_update_state",r.TEAM_LIST_OVERRIDE_STATE="team_list_override_state",r.TEAM_LIST_UPDATE_STATE="team_list_update_state",r.TEAM_MEMBERS_OVERRIDE_STATE="team_members_override_state",r.TEAM_MEMBERS_UPDATE_STATE="team_members_update_state",r.FACTION_HISTORY_OVERRIDE_STATE="faction_history_override_state",r.FACTION_HISTORY_UPDATE_STATE="faction_history_update_state",r.TEAM_OVERRIDE_STATE="team_override_state",r.TEAM_UPDATE_STATE="team_update_state",r.TEAM_UPDATE_PUZZLE="team_update_puzzle",r.TEAM_UPDATE_PUZZLE_STATS="team_update_puzzle_stats",r.TEAM_UPDATE_BATTLE_GROUP="team_update_battle_group",r.TEAM_BATTLE_OVERRIDE_STATE="team_battle_override_state",r.TEAM_BATTLE_UPDATE_STATE="team_battle_update_state",r.TEAM_FISH_PUZZLE_OVERRIDE_STATE="team_fish_puzzle_override_state",r.TEAM_FISH_PUZZLE_SET_NUM_GUESSES_REMAINING="team_fish_puzzle_set_num_guesses_remaining",r.TEAM_FISH_PUZZLE_ADD_GUESS="team_fish_puzzle_add_guess",r.TEAM_DECKS_OVERRIDE_STATE="team_decks_override_state",r.TEAM_DECKS_UPDATE_DECK="team_decks_update_deck",r.TEAM_MASTERY_TREE_OVERRIDE_STATE="team_mastery_tree_override_state",r.TEAM_MASTERY_TREE_UPDATE="team_mastery_tree_update",r.TEAM_PVP_OVERRIDE_STATE="team_pvp_override_state",r.TEAM_PVP_UPDATE_STATE="team_pvp_update_state",r.TEAM_SPEEDRUN_LEADERBOARD_SUMMARY_OVERRIDE_STATE="team_speedrun_leaderboard_summary_override_state",r.TEAM_SPEEDRUN_LEADERBOARD_SUMMARY_UPDATE_STATE="team_speedrun_leaderboard_summary_update_state",r))($||{});const sc=(r,e)=>{const t=Math.floor(r/1e3/60/60),s=Math.floor(r/1e3/60)%60,a=Math.floor(r/1e3)%60,n=Math.floor(r)%1e3,o=t===0,l=o&&s===0;e??(e=!o);const i=t.toString(),u=s.toString().padStart(o?1:2,"0"),c=a.toString().padStart(l?1:2,"0"),d=n.toString().padStart(3,"0");return`${o?"":`${i}h`}${l?"":`${u}m`}${c}${e?"":`.${d}`}s`};class Dn{constructor(e,t,s){p(this,"getKeyFunc");p(this,"compareFunc");p(this,"sortedList");this.getKeyFunc=e,this.compareFunc=t,this.sortedList=s??[]}remove(e){const t=this.sortedList.findIndex(a=>e===this.getKeyFunc(a));if(t===-1)return null;const s=this.sortedList[t];return this.sortedList.splice(t,1),{obj:s,oldIndex:t}}insert(e,t){const s=this.getKeyFunc(e),a=this.remove(s);if(a!==null){const{oldIndex:o,obj:l}=a;if(this.compareFunc(e,l)>=0)return t&&console.error(`tried to insert a regression: old ${JSON.stringify(l)}, new ${JSON.stringify(e)}`),this.sortedList.splice(o,0,l),{oldIndex:o,newIndex:o}}const n=(()=>{for(let o=0;o<this.sortedList.length;o++)if(this.compareFunc(e,this.sortedList[o])<0)return this.sortedList.splice(o,0,e),o;return this.sortedList.push(e),this.sortedList.length-1})();return{oldIndex:a===null?null:a.oldIndex,newIndex:n}}}var f=(r=>(r.P1="p1",r.P2="p2",r))(f||{});const Vs=E.nativeEnum(f),ac=r=>r==="p1"?"p2":"p1",Ws=E.object({row:E.number(),column:E.number()}).readonly(),ns=(r,e)=>r.row==e.row&&r.column==e.column,zt=(r,e)=>Math.abs(r.column-e.column)+Math.abs(r.row-e.row)===1,Ht=(r,e)=>Math.sqrt((r.row-e.row)*(r.row-e.row)+(r.column-e.column)*(r.column-e.column)),nc=(r,e)=>{const t=[];for(let s=0;s<r;s++)for(let a=0;a<e;a++)t.push({row:s,column:a});return t};E.object({extraGemsPerTurn:E.optional(E.number()),freeSummon:E.optional(E.boolean()),allCardsAvailable:E.optional(E.boolean()),alwaysReady:E.optional(E.boolean()),noTurnCheck:E.optional(E.boolean()),noShuffle:E.optional(E.boolean()),allowInvalidDecks:E.optional(E.boolean()),checkpointAfterEveryStep:E.optional(E.boolean()),instasolve:E.optional(E.boolean())}).readonly();var Ft=(r=>(r.ACTIVE="active",r.ENDING="ending",r.ENDED="ended",r))(Ft||{});const Yt={active:0,ending:1,ended:2},oc=2,Gn=r=>Number.isInteger(r)&&r>=0&&r<1+oc,xn=(r,e)=>{const t={hand:[],drawPile:[],discardPile:[],stepNumber:0,gems:[],prevTurnsTime:0,startTurnTime:null,stats:{summons:0,destroys:0,damageDealt:0,factionSummons:0}};return r.initPlayerState&&r.initPlayerState(t),t},lc=(r,e)=>{const t={puzName:r,phase:"active",permanents:{},p1:xn(e),p2:xn(e),currentTurnPlayer:"p2",turnNumber:0,engineOnly:{deckSelections:{},hasGameStarted:!1,nextPermanentId:0,nextHandCardId:0,nextKeyframeId:0,gainedScore:0}};return e.initGameState&&e.initGameState(t),t};var C=(r=>(r.RED="R",r.YELLOW="Y",r.GREEN="G",r.PURPLE="P",r.WHITE="W",r.BLACK="B",r.RAINBOW="*",r.WHITEBLACK="W/B",r.ROCK=".",r))(C||{});const Ks=E.union([E.literal("R"),E.literal("Y"),E.literal("G"),E.literal("P"),E.literal("W"),E.literal("B")]);E.union([Ks,E.literal("W/B")]);const ic=E.union([Ks,E.literal("*")]);E.union([Ks,E.literal("W/B"),E.literal(".")]);const uc=r=>{switch(r){case"W/B":return[["W"],["B"]];default:return[[r]]}};var se=(r=>(r.CREATURE="creature",r.STRUCTURE="structure",r))(se||{}),ve=(r=>(r.FLEX="flex",r.SPECIAL="special",r))(ve||{});const cc=E.nativeEnum(ve);var me=(r=>(r.PERMANENT="Unit",r.SLOT="Space",r.ONE_CHOICE="one_choice",r))(me||{});const dc=E.object({type:E.literal("Unit"),permanentId:E.string()}),fc=E.object({type:E.literal("Space"),slot:Ws}),mc=E.object({type:E.literal("one_choice"),choice:E.string()}),hc=E.union([dc,fc,mc]);var H=(r=>(r.SYSTEM_JOIN="system_join",r.SYSTEM_RESIGN="system_resign",r.SYSTEM_TIME_OUT="system_time_out",r.REMOVE="remove_permanent",r.SUMMON="summon",r.ATTACK="attack",r.CREATE_GEMS="create_gems",r.MOVE="move",r.DRAW="draw",r.ACTIVATE_ABILITY="activate_ability",r.END_TURN="end_turn",r.CREATE_CHECKPOINT="create_checkpoint",r.ADVANCE_KEYFRAME="advance_keyframe",r))(H||{});const pc=E.object({type:E.literal("remove_permanent"),permanentId:E.string()}).readonly(),gc=E.object({type:E.literal("summon"),player:Vs,slot:Ws,handCardId:E.optional(E.string()),cardName:E.optional(E.string()),stepNumber:E.number()}).readonly(),yc=E.object({type:E.literal("attack"),attackerId:E.string(),defenderId:E.string(),stepNumber:E.number()}).readonly(),Ec=E.object({type:E.literal("create_gems"),permanentId:E.string(),gemColors:ic.array(),stepNumber:E.number()}).readonly(),bc=E.object({type:E.literal("move"),permanentId:E.string(),slot:Ws,stepNumber:E.number()}).readonly(),wc=E.object({type:E.literal("draw"),player:Vs,stepNumber:E.number()}).readonly(),kc=E.object({type:E.literal("activate_ability"),permanentId:E.string(),abilityType:cc,effectOpts:hc.array().readonly(),stepNumber:E.number()}).readonly(),Ac=E.object({type:E.literal("end_turn"),player:Vs,stepNumber:E.number()}).readonly(),Sc=E.object({type:E.literal("create_checkpoint"),slot:E.number()}).readonly(),_c=E.object({type:E.literal("advance_keyframe"),keyframeId:E.string(),dialogOptionIndex:E.optional(E.number())}).readonly();E.union([pc,gc,yc,Ec,bc,wc,kc,Ac,Sc,_c]);const Mn=r=>{switch(r.type){case"summon":case"draw":case"end_turn":return r.player;case"attack":return r.attacker.owner;case"create_gems":case"move":case"activate_ability":return r.permanent.owner;default:return null}};var he=(r=>(r.P1="p1",r.P2="p2",r.GOD="god",r))(he||{});E.nativeEnum(he);const Zs=(r,e)=>{switch(r){case"god":return!0;case"p1":return e===f.P1;case"p2":return e===f.P2}};var W=(r=>(r.SYSTEM_ENABLE_MEMBER="system_enable_member",r.SYSTEM_UPDATE_DECK="system_update_deck",r.SYSTEM_UPDATE_MASTERY_TREE="system_update_mastery_tree",r.SYSTEM_ROOM_COMPLETE="system_room_complete",r.STEP_ACK="step_ack",r.KICK="kick",r.OVERRIDE_STATE="state",r.RESET="reset",r.ADVANCE_PHASE="advance_phase",r.SET_GAME_RESULT="set_game_result",r.START_TURN="start_turn",r.END_TURN="end_turn",r.SET_DRAW_PILE="set_draw_pile",r.SET_DEV_KNOBS="set_dev_knobs",r.ADD_GEMS="add_gems",r.REMOVE_GEMS="remove_gems",r.CLEAR_GEMS="clear_gems",r.CREATE_PERMANENT="create_permanent",r.REMOVE_PERMANENT="remove_permanent",r.READY_PERMANENT="ready_permanent",r.UNREADY_PERMANENT="unready_permanent",r.TRANSFORM_PERMANENT="transform_permanent",r.CHANGE_PERMANENT_OWNER="change_permanent_owner",r.MOVE="move",r.SWAP="swap",r.DRAW_CARD="draw_card",r.REMOVE_FROM_DRAW_PILE="remove_from_draw_pile",r.DISCARD_CARD="discard_card",r.DAMAGE_PERMANENT="damage_permanent",r.DISCARD_PERMANENT="discard_permanent",r.ADD_COUNTER="add_counter",r.REMOVE_COUNTER="remove_counter",r.SET_COUNTER="set_counter",r.INIT_SHARED_EXTRA_STATE="init_shared_extra_state",r.MODIFY_SHARED_EXTRA_STATE="modify_shared_extra_state",r.MODIFY_STATS="modify_stats",r.SET_STEP_NUMBER="set_step_number",r.WAIT_ANIMATE="wait_animate",r.SET_KEYFRAME="set_keyframe",r.ANNOUNCE="announce",r.ANNOUNCE_SUMMON_PERMANENT="announce_summon_permanent",r.ANNOUNCE_MOVE="announce_move",r.ANNOUNCE_ATTACK_CARD="announce_attack_card",r.DECKBUILDING_OVERRIDE_STATE="deckbuilding_override_state",r))(W||{});class Tc{constructor(e){p(this,"dumpRequests");p(this,"backend");this.dumpRequests=e.dumpBackendRequests,this.backend=e.backend}async getInitData(){this.dumpRequests&&console.log("req getInitData");const e=await this.backend.getInitData();return this.dumpRequests&&console.log("resp getInitData"),e}async getInitTeamData(e){this.dumpRequests&&console.log("req getInitTeamData");const t=await this.backend.getInitTeamData(e);return this.dumpRequests&&console.log("resp getInitTeamData"),t}async syncData(e){this.dumpRequests&&console.log("req syncData");const t=await this.backend.syncData(e);return this.dumpRequests&&console.log("resp syncData"),t}async checkAnswer(e){this.dumpRequests&&console.log("req solve");const t=await this.backend.checkAnswer(e);return this.dumpRequests&&console.log("resp solve"),t}}var ft=(r=>(r.NORMAL="normal",r.TIME="time",r.RESIGN="resign",r))(ft||{});const os=(r,e,t)=>({teamId:r,puzName:e,timestamp:t,answer:"battle-solve",isCorrect:!0,usedFreeAnswer:!1});var ls=(r=>(r.HINT_ANSWERED="hint_answered",r.TEAM_MEMBERS="team_members",r.ERRATUM="erratum",r))(ls||{}),br=(r=>(r.ALREADY_SOLVED="already_solved",r.NO_GUESSES="no_guesses",r.PUZZLE_MESSAGES="puzzle_messages",r.NO_ANSWER="no_answer",r.TRIED_BEFORE="tried_before",r.SUCCESS="success",r))(br||{});class Ln{constructor(e,t,s){p(this,"packet");p(this,"tracker");this.packet={},this.tracker=new Vt(e,t,s)}isDirty(){return Object.keys(this.packet).length>0}mergePacket({isInactive:e,isHidden:t,displayName:s,faction:a,factionScoreContributions:n,decks:o,masteryTree:l,answerSubmissions:i,unlocks:u,cardUnlocks:c,viewTimes:d,preferredDecks:g,puzzleSelections:w,checkpoints:y,blockedTeams:A,isInRing:S,cutsceneChoices:O}){var k,P;e!==void 0&&(this.packet.isInactive=e),t!==void 0&&(this.packet.isHidden=t),s!==void 0&&(this.packet.displayName=s),a!==void 0&&(this.packet.faction=a),this.packet.factionScoreContributions=Object.assign(this.packet.factionScoreContributions??{},n??{}),this.packet.decks=Object.assign(this.packet.decks??{},o??{}),l!==void 0&&(this.packet.masteryTree=l);for(const[N,U]of Object.entries(i??{})){if((k=this.packet).answerSubmissions??(k.answerSubmissions={}),U===null){this.packet.answerSubmissions[N]=null;continue}this.packet.answerSubmissions[N]=Object.assign(this.packet.answerSubmissions[N]??{},U)}this.packet.unlocks=Object.assign(this.packet.unlocks??{},u??{}),this.packet.cardUnlocks=Object.assign(this.packet.cardUnlocks??{},c??{}),this.packet.viewTimes=Object.assign(this.packet.viewTimes??{},d??{}),this.packet.preferredDecks=Object.assign(this.packet.preferredDecks??{},g??{}),this.packet.puzzleSelections=Object.assign(this.packet.puzzleSelections??{},w??{}),this.packet.checkpoints=Object.assign(this.packet.checkpoints??{},y??{}),this.packet.blockedTeams=Object.assign(this.packet.blockedTeams??{},A??{}),S!==void 0&&(this.packet.isInRing=S),O!==void 0&&((P=this.packet).cutsceneChoices??(P.cutsceneChoices=[]),this.packet.cutsceneChoices.push(...O)),this.resolvePacket({}),this.isDirty()&&this.tracker.handleModify()}resolvePacket({isInactive:e,isHidden:t,displayName:s,faction:a,factionScoreContributions:n,decks:o,masteryTree:l,answerSubmissions:i,unlocks:u,cardUnlocks:c,viewTimes:d,preferredDecks:g,puzzleSelections:w,checkpoints:y,blockedTeams:A,isInRing:S,cutsceneChoices:O}){this.packet.isInactive!==void 0&&e===this.packet.isInactive&&delete this.packet.isInactive,this.packet.isHidden!==void 0&&t===this.packet.isHidden&&delete this.packet.isHidden,this.packet.displayName!==void 0&&s===this.packet.displayName&&delete this.packet.displayName,this.packet.faction!==void 0&&a===this.packet.faction&&delete this.packet.faction;for(const[k,P]of Object.entries(n??{})){const N=k;this.packet.factionScoreContributions!==void 0&&this.packet.factionScoreContributions[N]!==void 0&&this.packet.factionScoreContributions[N]===P&&delete this.packet.factionScoreContributions[N]}Object.keys(this.packet.factionScoreContributions??{}).length===0&&delete this.packet.factionScoreContributions;for(const k of Object.keys(o??{}))this.packet.decks!==void 0&&delete this.packet.decks[Number(k)];Object.keys(this.packet.decks??{}).length===0&&delete this.packet.decks,l!==void 0&&delete this.packet.masteryTree;for(const[k,P]of Object.entries(i??{})){if(this.packet.answerSubmissions===void 0)continue;const N=this.packet.answerSubmissions[k];if(N!==void 0)if(P===null){if(N!==null)continue;delete this.packet.answerSubmissions[k]}else{if(N===null)continue;for(const[U,Q]of Object.entries(P??{}))delete N[U];Object.keys(N).length===0&&delete this.packet.answerSubmissions[k]}}Object.keys(this.packet.answerSubmissions??{}).length===0&&delete this.packet.answerSubmissions;for(const[k,P]of Object.entries(u??{})){if(this.packet.unlocks===void 0)continue;const N=this.packet.unlocks[k];N!==void 0&&N===null==(P===null)&&delete this.packet.unlocks[k]}Object.keys(this.packet.unlocks??{}).length===0&&delete this.packet.unlocks;for(const[k,P]of Object.entries(c??{})){if(this.packet.cardUnlocks===void 0)continue;const N=this.packet.cardUnlocks[k];N!==void 0&&N===null==(P===null)&&((N==null?void 0:N.puzName)??null)===((P==null?void 0:P.puzName)??null)&&delete this.packet.cardUnlocks[k]}Object.keys(this.packet.cardUnlocks??{}).length===0&&delete this.packet.cardUnlocks;for(const k of Object.keys(d??{}))this.packet.viewTimes!==void 0&&delete this.packet.viewTimes[k];Object.keys(this.packet.viewTimes??{}).length===0&&delete this.packet.viewTimes;for(const[k,P]of Object.entries(g??{})){if(this.packet.preferredDecks===void 0)continue;const N=this.packet.preferredDecks[k];N!==void 0&&N===P&&delete this.packet.preferredDecks[k]}Object.keys(this.packet.preferredDecks??{}).length===0&&delete this.packet.preferredDecks;for(const[k,P]of Object.entries(w??{})){if(this.packet.puzzleSelections===void 0)continue;const N=this.packet.puzzleSelections[k];N!==void 0&&N===P&&delete this.packet.puzzleSelections[k]}Object.keys(this.packet.puzzleSelections??{}).length===0&&delete this.packet.puzzleSelections;for(const[k,P]of Object.entries(y??{})){if(this.packet.checkpoints===void 0)continue;const N=this.packet.checkpoints[k];N!==void 0&&(()=>{if(Object.keys(N).length===Object.keys(P).length){for(const[U,Q]of Object.entries(P)){const F=N[Number(U)];if(F===void 0||F.turnNumber!==Q.turnNumber||F.roomId!==Q.roomId||F.timestamp!==Q.timestamp||F.gainedScore!==Q.gainedScore||F.serializedState!==Q.serializedState)return}delete this.packet.checkpoints[k]}})()}Object.keys(this.packet.checkpoints??{}).length===0&&delete this.packet.checkpoints;for(const[k,P]of Object.entries(A??{})){if(this.packet.blockedTeams===void 0)continue;const N=this.packet.blockedTeams[k];N!==void 0&&N===P&&delete this.packet.blockedTeams[k]}if(Object.keys(this.packet.blockedTeams??{}).length===0&&delete this.packet.blockedTeams,this.packet.isInRing!==void 0&&S===this.packet.isInRing&&delete this.packet.isInRing,O!==void 0){if(this.packet.cutsceneChoices===void 0)throw new Error("expect cutscene choices to be prefix of packet");this.packet.cutsceneChoices.splice(0,O.length)}(this.packet.cutsceneChoices??[]).length===0&&delete this.packet.cutsceneChoices}startSync(){if(!this.tracker.snapshot())return null;if(!this.isDirty())return this.tracker.handleSyncResult(!0),null;const{factionScoreContributions:e,decks:t,answerSubmissions:s,unlocks:a,cardUnlocks:n,viewTimes:o,preferredDecks:l,puzzleSelections:i,checkpoints:u,blockedTeams:c}=this.packet;return{...this.packet,factionScoreContributions:e===void 0?void 0:{...e},decks:t===void 0?void 0:{...t},answerSubmissions:s===void 0?void 0:Object.fromEntries(Object.entries(s).map(([d,g])=>[d,g===null?null:{...g}])),unlocks:a===void 0?void 0:{...a},cardUnlocks:n===void 0?void 0:{...n},viewTimes:o===void 0?void 0:{...o},preferredDecks:l===void 0?void 0:{...l},puzzleSelections:i===void 0?void 0:{...i},checkpoints:u===void 0?void 0:{...u},blockedTeams:c===void 0?void 0:{...c}}}endSync(e){e!==null&&this.resolvePacket(e),this.tracker.handleSyncResult(e!==null)}}class jt{constructor(e){p(this,"isSyncInFlight");p(this,"pendingCallbacks");p(this,"runSyncAsync");this.isSyncInFlight=!1,this.pendingCallbacks=[],this.runSyncAsync=e}async triggerLoopAsync(){if(!this.isSyncInFlight){for(this.isSyncInFlight=!0;;){const e=this.pendingCallbacks.length;let t=!1;try{t=await this.runSyncAsync()}catch(s){console.error(s);break}for(const s of this.pendingCallbacks.splice(0,e))try{s()}catch(a){console.error(a)}if(t)break}this.isSyncInFlight=!1}}async triggerLoopAndWaitAsync(){await new Promise((e,t)=>{this.pendingCallbacks.push(e),this.triggerLoopAsync()})}}var De=(r=>(r.FAST="fast",r.MISC="misc",r.MASTERY_TREE="mastery_tree",r.DECK="deck",r.ROOM="room",r.CHECKPOINTS="checkpoints",r.ANSWER="answer",r))(De||{});class Vt{constructor(e,t,s){p(this,"serverConfig");p(this,"syncType");p(this,"onDirtyStateChange");p(this,"revNumber");p(this,"syncedRevNumber");p(this,"modifyTime");p(this,"syncTime");p(this,"syncingRevNumber");this.serverConfig=e,this.syncType=t,this.onDirtyStateChange=s,this.revNumber=0,this.syncedRevNumber=0;const a=new Date().getTime();this.modifyTime=a,this.syncTime=a,this.syncingRevNumber=null}snapshot(){return this.revNumber===this.syncedRevNumber||this.modifyTime-this.syncTime<this.serverConfig.slowSyncThrottle[this.syncType]?!1:(this.syncingRevNumber=this.revNumber,this.onDirtyStateChange({type:Lt.SYNCING,lastSyncTime:this.syncTime}),!0)}handleModify(){const e=Date.now();this.revNumber===this.syncedRevNumber&&(this.syncTime=e),this.modifyTime=e,this.revNumber++,this.onDirtyStateChange({type:Lt.DIRTY,lastSyncTime:this.syncTime})}handleSyncResult(e){if(e){if(this.syncTime=new Date().getTime(),this.syncingRevNumber===null)throw new Error("no sync in progress");this.syncedRevNumber=this.syncingRevNumber}this.syncingRevNumber=null,this.onDirtyStateChange({type:e?Lt.SYNCED:Lt.FAILED,lastSyncTime:this.syncTime})}}class vc{constructor(e,t,s,a,n){p(this,"server");p(this,"teamId");p(this,"puzName");p(this,"selectedPuzName");p(this,"selectedDeckSlot");p(this,"pendingGame");p(this,"checkpoints");p(this,"checkpointsSyncTracker");p(this,"subscriptions");p(this,"speedrunLeaderboardSummarySubscriptions");this.teamId=e,this.puzName=t,this.selectedPuzName=s,this.server=n,this.selectedDeckSlot=a,this.checkpoints={},this.checkpointsSyncTracker=new Vt(this.server.config,De.CHECKPOINTS,o=>{this.server.dirtyStateTracker.update({teams:{[this.teamId]:{checkpoints:{[this.puzName]:o}}}})}),this.subscriptions=new Map,this.speedrunLeaderboardSummarySubscriptions=new Map}getTeamController(){return this.server.getTeamController(this.teamId)}getBattleGroupName(){return this.server.getBattleGroup(this.puzName).battleGroupName}wantsErrataFor(e){const{puzName:t,selectedPuzName:s}=this;return e===t||e===this.server.getBattleGroup(t).battleGroupName?!0:s===null?!1:e===s||e===this.server.getBattleGroup(s).battleGroupName}filterErrata(e){const t={};for(const[s,{puzzle:a,text:n,timestamp:o,published:l}]of Object.entries(this.server.errata))a!==null&&n!==""&&this.wantsErrataFor(a)&&(l||e.isAdmin)&&(t[s]={erratumId:s,text:n,timestamp:o,published:l});return t}broadcastErrataGlobalUpdate(e){const t=this.server.getSubscriptions({type:J.TEAM_BATTLE,teamId:this.teamId,puzName:this.puzName});for(const s of t.values())this.server.sendResp(s,{type:Te.GLOBAL_UPDATE,upd:{type:$.TEAM_BATTLE_UPDATE_STATE,errata:this.filterErrata(s),...e}})}getActiveRoom(){return this.server.gameRoomsController.getActiveRoom(this.teamId,this.puzName)}setActiveRoom(e){this.server.gameRoomsController.setActiveRoom(this.teamId,this.puzName,e.roomId)}getRoomStatus(){const e=this.getActiveRoom();if(e===null)return Bt.NONE;const{gameState:t}=e.engine;return t.phase===Ft.ACTIVE?Bt.ACTIVE:Bt.INACTIVE}getRoomPuzName(){const e=this.getActiveRoom();return e===null?null:e.engine.puzName}isRoomActive(){return this.getRoomStatus()===Bt.ACTIVE}getInspector(){if(this.selectedPuzName===null)throw new Error("need puzzle selection to get inspector");return this.server.gameRoomsController.getInspector(this.selectedPuzName)}getPlayerInGameState(e){const t=[f.P1,f.P2].filter(s=>{const{teamData:a}=e[s];return a!==void 0&&a.teamId===this.teamId});if(t.length!==1&&this.selectedPuzName!=="vanilla")throw new Error("team not uniquely part of active game");return t[0]}getPlayer(){const e=this.getActiveRoom();if(e===null)throw new Error("player not defined if there's no active game");const{gameState:t}=e.engine;return this.getPlayerInGameState(t)}getActiveGameTeamData(){const e=this.getActiveRoom();if(e===null)throw new Error("tried to get team data without an active game");const{teamData:t}=e.engine.gameState[this.getPlayer()];if(t===void 0)throw new Error("expect team data to be present in active game");return t}getActiveGameDeckSelection(){const e=this.getActiveRoom();if(e===null)throw new Error("tried to get team data without an active game");return e.engine.gameState.engineOnly.deckSelections[this.getPlayer()]??null}leaveActiveGame(){const e=this.getActiveRoom();if(e===null)return[];const t=[...e.members.values()].filter(s=>{const{teamId:a,spectateTeamId:n}=s.conn;if(a===void 0)throw new Error("expect conn to be authenticated if it is joined to a room");return a===this.teamId||n===this.teamId});for(const s of t)this.server.kickRoomMember(s);return t}commitDeckSelection(e,t,s){if(this.isRoomActive())throw new Error("don't expect to set up a new game while a game is active");const a=this.getInspector(),n=e.filter(u=>a.getDeckOverride(u)===null),{deckSelection:o,err:l}=this.resolveDeckForBattle(n,t,s);if(l!==void 0)return{err:l};this.pendingGame={deckSelection:o};const i={};if(o===null){if(n.length>0&&!a.isNoDeckAllowed())throw new Error("expect a deck selection if players need decks")}else if(o!==null)for(const u of n)i[u]=o;return{deckSelections:i}}moveConnsIntoRoom(e,t){const s=this.leaveActiveGame();for(const{conn:a,role:n}of s)this.server.joinConnToRoom(a,e,n===he.GOD?n:t)}activateGame(e,t){const s=this.getInspector();if(t??(t=s.getDefaultRole()),this.moveConnsIntoRoom(e,t),this.pendingGame===void 0)throw new Error("no pending game to activate");delete this.pendingGame,this.setActiveRoom(e),this.handleRoomStatusChange()}getLockedDeckSelection(){var e;return this.isRoomActive()?this.getActiveGameDeckSelection():((e=this.pendingGame)==null?void 0:e.deckSelection)??null}getClientActiveGameState(){const e=this.getActiveRoom();if(!this.isRoomActive())return null;if(e===null)throw new Error("expect an active game if the room status is active");const{enabledMasteries:t,faction:s}=this.getActiveGameTeamData();return{enabledMasteries:t,faction:s}}broadcastTeamBattleGlobalUpdate(e){this.server.broadcastGlobalUpdate({type:J.TEAM_BATTLE,teamId:this.teamId,puzName:this.puzName},e)}broadcastTeamSpeedrunLeaderboardSummaryGlobalUpdate(e){this.server.broadcastGlobalUpdate({type:J.TEAM_SPEEDRUN_LEADERBOARD_SUMMARY,teamId:this.teamId,puzName:this.puzName},e)}handleRoomStatusChange(){const{teamId:e,puzName:t}=this,s=this.getRoomStatus();this.server.broadcastGlobalUpdate({type:J.TEAM,teamId:e},{type:$.TEAM_UPDATE_PUZZLE,puzName:t,roomStatus:s}),this.broadcastLockedDeckSelection(),this.broadcastTeamBattleGlobalUpdate({type:$.TEAM_BATTLE_UPDATE_STATE,activeGame:this.getClientActiveGameState(),roomPuzName:this.getRoomPuzName()}),t===ot&&this.server.handleTeamSummaryUpdate(this.teamId,{isPvPGameActive:this.isRoomActive()})}broadcastLockedDeckSelection(){this.broadcastTeamBattleGlobalUpdate({type:$.TEAM_BATTLE_UPDATE_STATE,lockedDeckSelection:this.getLockedDeckSelection()})}summarizeCheckpoints(){return Object.fromEntries(Object.entries(this.checkpoints).map(([e,{turnNumber:t,roomId:s,timestamp:a}])=>[e,{turnNumber:t,roomId:s,timestamp:a}]))}makeCheckpoint(e,t){const{roomId:s,gameState:a}=e,n={selectedPuzName:this.selectedPuzName,gameState:a},o={turnNumber:a.turnNumber,roomId:s,timestamp:Date.now(),gainedScore:a.engineOnly.gainedScore,serializedState:JSON.stringify(n)};for(const l of t)this.checkpoints[l]=o;this.handleCheckpointsChange()}restoreCheckpoint(e,t){if(!Gn(t))return this.server.sendErr(e,{errCode:K.INVALID_CHECKPOINT_SLOT});const s=this.getActiveRoom();if(s===null){this.server.sendErr(e,{errCode:K.NO_ROOM});return}const{gameState:a}=s.engine,n=this.checkpoints[t];if(n===void 0){this.server.sendErr(e,{errCode:K.NO_CHECKPOINT});return}const o=JSON.parse(n.serializedState);if(o.selectedPuzName!==null&&this.selectPuzzle(o.selectedPuzName,!0)!==null)throw new Error("should not encounter error re-selecting the old puzz");const l=this.getPlayerInGameState(o.gameState),i=o.gameState.engineOnly.deckSelections[l],u=(i==null?void 0:i.slot)??null;if(u!==null&&this.selectDeck(u,!0)!==null)throw new Error("should not encounter error re-selecting the old deck");for(const w of[f.P1,f.P2]){const{teamData:y}=o.gameState[w];y!==void 0&&(y.isReplay=this.server.getTeamController(y.teamId).solveTimes.has(o.gameState.puzName))}o.gameState.engineOnly.gainedScore=n.gainedScore;const c=a.puzName===o.gameState.puzName,d=this.restoreSavedRoom({roomId:this.server.genGameRoomId(),puzName:o.gameState.puzName,hostPuzName:this.puzName,createTime:new Date().getTime(),savedRoom:{gameState:c?a:o.gameState}});if(d===null)throw new Error("expect restore room to succeed");c&&this.server.useUpdatesContext(d,()=>{d.engine.broadcastOverrideState(o.gameState)}),this.handleRoomStatusChange();const g=n.roomId;for(const[w,y]of Object.entries(this.checkpoints))y.roomId===g&&(this.checkpoints[Number(w)]={...y,roomId:d.roomId});this.handleCheckpointsChange()}handleCheckpointsChange(){this.checkpointsSyncTracker.handleModify(),this.broadcastTeamBattleGlobalUpdate({type:$.TEAM_BATTLE_UPDATE_STATE,checkpointSummaries:this.summarizeCheckpoints()})}handleRoomComplete(e,t){for(const[s,a]of Object.entries(this.checkpoints))a.roomId===e&&(this.checkpoints[Number(s)]={...a,gainedScore:t});this.handleCheckpointsChange(),this.handleRoomStatusChange()}resign(){const e=this.getActiveRoom();return e===null?{errCode:K.NO_ROOM}:(this.isRoomActive()&&this.server.sendSystemStep(e,{type:H.SYSTEM_RESIGN,player:this.getPlayer()}),null)}handleEnterGameRoom(e){const{conn:t,role:s}=e,a=this.getActiveRoom();if(a===null){this.server.sendEnterRoomErr(e,{errCode:K.NO_ROOM});return}if(s!==void 0&&!t.isAdmin){this.server.sendEnterRoomErr(e,{errCode:K.PERMISSION_DENIED});return}const n=(()=>{switch(this.getPlayer()){case f.P1:return he.P1;case f.P2:return he.P2}})();this.server.completeEnterRoom({...e,role:s??n},a)}selectPuzzle(e,t){if(this.selectedPuzName!==null&&this.selectedPuzName===e)return null;if(this.getBattleGroupName()!==Ot)return{errCode:K.INVALID_PUZZLE};if(this.isRoomActive()&&!t)return{errCode:K.LOCKED_BY_BATTLE};if(e!==null){const s=this.server.puzzlesDB.tryGetPuzzle(e),a=this.server.puzzlesDB.tryGetBattleGroup(e);if(s===null||a===null)return{errCode:K.INVALID_PUZZLE};if(!li(s.answer!==null,s.puzName,s.battleGroupName,a.numPuzzles))return{errCode:K.INVALID_PUZZLE}}return this.selectedPuzName=e,this.getTeamController().mergeSlowSyncPacket({puzzleSelections:{[this.puzName]:e}}),this.server.bigBoardStateTracker.updateTeam(this.teamId,{selectedPuzzles:{[this.puzName]:e}}),this.broadcastErrataGlobalUpdate({selectedPuzName:e}),null}selectDeck(e,t){return e===this.selectedDeckSlot?null:this.isRoomActive()&&!t?{errCode:K.LOCKED_BY_BATTLE}:(this.selectedDeckSlot=e,this.getTeamController().mergeSlowSyncPacket({preferredDecks:{[this.puzName]:e}}),this.broadcastTeamBattleGlobalUpdate({type:$.TEAM_BATTLE_UPDATE_STATE,selectedDeckSlot:e}),null)}resolveDeckForBattle(e,t,s){if(e.length<=0)return{deckSelection:null};const{selectedDeckSlot:a}=this,n=this.getActiveRoom(),o=this.getInspector();if((t??!1)&&n!==null)return{deckSelection:this.getActiveGameDeckSelection()};if(a===null)return o.isNoDeckAllowed()?{deckSelection:null}:s??!1?{deckSelection:{slot:null,deck:{displayName:"autogen deck",cards:{}}}}:{err:{errCode:K.NEED_DECK}};const l=this.getTeamController().getDeckController(a).deck;for(const i of e){const u=new Set;if(o.validateDeck(u,i,l),!(s??!1)&&u.size!==0)return{err:{errCode:K.INVALID_DECK}}}return{deckSelection:{slot:a,deck:cu(l)}}}restoreSavedRoom(e){const{roomId:t,hostPuzName:s,puzName:a,savedRoom:n}=e;if(n===void 0)return null;this.selectPuzzle(a);const o=this.server.gameRoomsController.rooms.get(t),l=(o==null?void 0:o.room)??this.server.gameRoomsController.createRoomFromGameState(a,s,JSON.parse(JSON.stringify(n.gameState)),t),i=(()=>{switch(this.getPlayerInGameState(l.engine.gameState)){case f.P1:return he.P1;case f.P2:return he.P2}})();return this.moveConnsIntoRoom(l,i),this.setActiveRoom(l),l}}const Ic=60*1e3,Bn=r=>{const e=new Date().getTime(),{expiryTime:t}=r;return e>t};class Rc{constructor(e,t,s){p(this,"teamId");p(this,"server");p(this,"outgoingRequests");p(this,"incomingRequests");p(this,"blockedTeams");p(this,"subscriptions");this.teamId=e,this.server=s,this.outgoingRequests=new Map,this.incomingRequests=new Map,this.blockedTeams=new Set(t),this.subscriptions=new Map}getTeamController(){return this.server.getTeamController(this.teamId)}getBattleController(){return this.getTeamController().getBattleController(ot)}claimTimeVictory(){const e=this.getBattleController().getActiveRoom();if(e===null)return{errCode:K.NO_ROOM};const{gameState:t}=e.engine,s=ac(this.getBattleController().getPlayer()),{teamData:a,startTurnTime:n}=t[s]??{};if(!a)throw new Error("pvp opponent not found");return!n||Date.now()-n<ai||this.server.sendSystemStep(e,{type:H.SYSTEM_TIME_OUT,player:s}),null}getHasMastery(){return this.getTeamController().masteryTreeController.getEnabledMasteries().has(nr)}broadcastTeamPvPGlobalUpdate(e){this.server.broadcastGlobalUpdate({type:J.TEAM_PVP,teamId:this.teamId},e)}isGameActive(){return this.getBattleController().isRoomActive()}validateOpponentTeamId(e){if(e===this.teamId)return null;const t=this.server.teamControllers.get(e);return t===void 0?null:t.pvpController}commitDeckSelection(){const e=this.getBattleController();if(e.pendingGame!==void 0)return null;const{err:t}=e.commitDeckSelection([f.P1,f.P2]);return t??null}handleUnlockDeck(e){if(this.isGameActive())return{errCode:K.LOCKED_BY_BATTLE};this.clearOutgoingRequests();const t=this.getBattleController();return delete t.pendingGame,t.broadcastLockedDeckSelection(),null}makePvPRequest(e){const t=this.validateOpponentTeamId(e);if(t===null)return{errCode:K.INVALID_TEAM};if(this.blockedTeams.has(e))return{errCode:K.BLOCKED_BY_REQUESTER};if(t.blockedTeams.has(this.teamId))return{errCode:K.BLOCKED_BY_TARGET};if(this.isGameActive())return{errCode:K.ROOM_BUSY};if(!this.getHasMastery())return{errCode:K.NO_MASTERY};if(!t.getHasMastery())return{errCode:K.TARGET_NO_MASTERY};const s=this.outgoingRequests.get(e);if(s!==void 0)if(Bn(s))this.clearRequest(s,!1);else return{errCode:K.DUPLICATE_REQUEST};const a=this.commitDeckSelection();if(a!==null)return a;const n={fromTeamId:this.teamId,toTeamId:e,expiryTime:new Date().getTime()+Ic};return this.outgoingRequests.set(e,n),t.incomingRequests.set(this.teamId,n),this.getBattleController().broadcastLockedDeckSelection(),this.broadcastTeamPvPGlobalUpdate({type:$.TEAM_PVP_UPDATE_STATE,outgoingRequestsToAdd:[n]}),t.broadcastTeamPvPGlobalUpdate({type:$.TEAM_PVP_UPDATE_STATE,incomingRequestsToAdd:[n]}),this.server.broadcastRespToTeam(e,{type:Te.NOTIFICATION,notif:{type:Mt.PVP_REQUEST_RECEIVED}}),null}handleMakePvPRequest(e,t){const s=this.makePvPRequest(e);if(s!==null)return s;if(t??!1){const a=this.validateOpponentTeamId(e);if(a===null)return{errCode:K.INVALID_TEAM};const n=a.acceptPvPRequest(this.teamId,void 0,!0);if(n!==null)return n}return null}handleCancelPvPRequest(e,t){if(this.validateOpponentTeamId(t)===null)return{errCode:K.INVALID_TEAM};const a=this.outgoingRequests.get(t);return a!==void 0&&this.clearRequest(a,!0),this.unlockDeckIfUnneeded(),null}setIsTeamBlocked(e,t,s){const a=this.validateOpponentTeamId(t);if(a===null)return{errCode:K.INVALID_TEAM};if(s){this.blockedTeams.add(t);const n=this.outgoingRequests.get(t);n!==void 0&&this.clearRequest(n,!0);const o=this.incomingRequests.get(t);o!==void 0&&this.clearRequest(o,!0)}else this.blockedTeams.delete(t);return this.getTeamController().mergeSlowSyncPacket({blockedTeams:{[t]:s}}),this.broadcastTeamPvPGlobalUpdate({type:$.TEAM_PVP_UPDATE_STATE,blockedTeamsToAdd:s?[t]:void 0,blockedTeamsToDelete:s?void 0:[t]}),a.broadcastTeamPvPGlobalUpdate({type:$.TEAM_PVP_UPDATE_STATE,blockedByTeamsToAdd:s?[this.teamId]:void 0,blockedByTeamsToDelete:s?void 0:[this.teamId]}),null}enterRing(){if(!this.getHasMastery())return{errCode:K.NO_MASTERY};const{ring:e}=this.server.pvpLobbyController;e.indexOf(this.teamId)===-1&&(e.push(this.teamId),this.getTeamController().mergeSlowSyncPacket({isInRing:!0}),this.server.pvpLobbyController.broadcastPvPGlobalUpdate({type:$.PVP_UPDATE_STATE,ringTeamsToAdd:[this.teamId]}));for(const s of e)this.makePvPRequest(s);return null}leaveRing(){const{ring:e}=this.server.pvpLobbyController,t=e.indexOf(this.teamId);t!==-1&&(e.splice(t,1),this.getTeamController().mergeSlowSyncPacket({isInRing:!1}),this.server.pvpLobbyController.broadcastPvPGlobalUpdate({type:$.PVP_UPDATE_STATE,ringTeamsToDelete:[this.teamId]}))}acceptPvPRequest(e,t,s){this.clearExpiredRequests();const a=this.validateOpponentTeamId(e);if(a===null)return{errCode:K.INVALID_TEAM};if(this.incomingRequests.get(e)===void 0)return{errCode:K.NO_PVP_REQUEST};if(this.isGameActive())return{errCode:K.ROOM_BUSY};if(!this.getHasMastery())return{errCode:K.NO_MASTERY};if(!a.getHasMastery())return{errCode:K.TARGET_NO_MASTERY};const o=this.commitDeckSelection();if(o!==null)return o;this.clearAllRequestsAndLeaveRing(),a.clearAllRequestsAndLeaveRing();const l=this.getBattleController(),i=a.getBattleController();if(l.pendingGame===void 0||i.pendingGame===void 0)throw new Error("expect game setup for pvp teams to be ready");const u=l.pendingGame.deckSelection,c=i.pendingGame.deckSelection;if(u===null||c===null)throw new Error("expect deck selections pvp teams to be defined");const d=s??!1?!0:Math.random()*2<1,g=this.server.gameRoomsController.createRoom(ot,ot,{[f.P1]:d?this.teamId:e,[f.P2]:d?e:this.teamId},{[f.P1]:d?u:c,[f.P2]:d?c:u},t);return l.activateGame(g,d?he.P1:he.P2),i.activateGame(g,d?he.P2:he.P1),this.server.broadcastRespToTeam(e,{type:Te.NOTIFICATION,notif:{type:Mt.PVP_REQUEST_ACCEPTED}}),null}clearRequest(e,t){const{fromTeamId:s,toTeamId:a}=e,n=this.server.getTeamController(s).pvpController,o=this.server.getTeamController(a).pvpController;n.outgoingRequests.delete(a),o.incomingRequests.delete(s),t&&(n.broadcastTeamPvPGlobalUpdate({type:$.TEAM_PVP_UPDATE_STATE,outgoingRequestsToDelete:[a]}),o.broadcastTeamPvPGlobalUpdate({type:$.TEAM_PVP_UPDATE_STATE,incomingRequestsToDelete:[s]}))}clearExpiredRequests(){for(const e of[...this.incomingRequests.values(),...this.outgoingRequests.values()].filter(Bn))this.clearRequest(e,!1)}clearOutgoingRequests(){for(const e of this.outgoingRequests.values())this.clearRequest(e,!1);this.broadcastTeamPvPGlobalUpdate({type:$.TEAM_PVP_UPDATE_STATE,clearOutgoingRequests:!0})}clearAllRequestsAndLeaveRing(){for(const e of[...this.incomingRequests.values(),...this.outgoingRequests.values()])this.clearRequest(e,!1);this.broadcastTeamPvPGlobalUpdate({type:$.TEAM_PVP_UPDATE_STATE,clearOutgoingRequests:!0,clearIncomingRequests:!0}),this.leaveRing()}unlockDeckIfUnneeded(){if(this.isGameActive()||(this.clearExpiredRequests(),this.outgoingRequests.size>0))return;const e=this.getBattleController();e.pendingGame!==void 0&&(delete e.pendingGame,e.broadcastLockedDeckSelection())}}class Nc{constructor(e){p(this,"server");p(this,"ring");p(this,"subscriptions");this.server=e,this.ring=[],this.subscriptions=new Map}broadcastPvPGlobalUpdate(e){this.server.broadcastGlobalUpdate({type:J.PVP},e)}}var D=(r=>(r.LOCKED_IN="locked_in",r.NO_DECK="no_deck",r.DECK_TOO_SMALL="deck_too_small",r.DECK_TOO_LARGE="deck_too_large",r.DECK_TOO_MANY_LEGENDARIES="deck_too_many_legendaries",r.CARD_TYPE="card_type",r.ALLIED="allied",r.PROTECTED="protected",r.TERRAIN="terrain",r.BOUNDS="bounds",r.OCCUPIED="occupied",r.ADJACENT="adjacent",r.ABILITY_EXISTS="ability_exists",r.NUM_OPTS="num_opts",r.OPT_TYPE="opt_type",r.DECK_EMPTY="deck_empty",r.MASTERY="mastery",r.COLOR="color",r.CANNOT_MOVE="cannot_move",r.CANNOT_ATTACK="cannot_attack",r.CANNOT_CREATE="cannot_create",r.INVULNERABLE="invulnerable",r.STALE="stale",r.HIDDEN="hidden",r.KEYFRAME="keyframe",r.UI_LOCKED="ui_locked",r.INVALID_CHECKPOINT_SLOT="invalid_checkpoint_slot",r.INVALID_DIALOG_OPTION="invalid_dialog_option",r.GAME_ENDED="game_ended",r.RESOLVE="resolve",r.ROLE="role",r.TURN="turn",r.COST="cost",r.READY="ready",r.TOO_FAR="too_far",r.GENERIC="generic",r))(D||{}),I=(r=>(r.EFFECT="effect",r.BASE_GEMS="base_gems",r.POWER_ADJUSTMENT="power_adjustment",r.MAX_HEALTH_ADJUSTMENT="max_health_adjustment",r.SHELL_ADJUSTMENT="shell_adjustment",r.IGNORED_DAMAGE="ignored_damage",r.DAMAGE_TAKEN="damage_taken",r.SHELL_DAMAGE_TAKEN="shell_damage_taken",r.INVULNERABLE="invulnerable",r.CANNOT_BE_DESTROYED="cannot_be_destroyed",r.CANNOT_MOVE="cannot_move",r.CANNOT_ATTACK="cannot_attack",r.CANNOT_CREATE="cannot_create",r.DOES_NOT_PROTECT="does_not_protect",r.ALLOWS_MOVE_TO_ADJACENT="allows_move_to_adjacent",r.PROTECTS_ADJACENT_COLUMNS="protects_adjacent_columns",r.BODY_SLAM="body_slam",r.FROZEN="frozen",r.POISON="poison",r.DESTROY_ON_END_OF_TURN="destroy_on_end_of_turn",r.DIVINE_SHIELD="divine_shield",r.ATTACKS_FOR_FREE="attacks_for_free",r.CAT_SPECIAL_PENDING="cat_special_pending",r.DOOM="doom",r.SUMMONED_THIS_TURN="summoned_this_turn",r.FLEXED_THIS_TURN="flexed_this_turn",r.ASLEEP="asleep",r.HAPPY_BEARS="happy_bears",r.SAD_BEARS="sad_bears",r))(I||{});const Cc=r=>{const{explanation:e}=r;if(e!==void 0)return e;switch(r.type){case"cannot_be_destroyed":return"Indestructable.";case"invulnerable":return"Invulnerable.";default:return null}},Pc=(r,e)=>{const{effectOpts:t}=r,s=t[e];if(s===void 0)throw new Error("effect opt not selected yet");return s},Oc=(r,e)=>{const t=Pc(r,e);if(t.type!==me.PERMANENT)throw new Error("wrong effect opt type");return t.permanent},Se=(r,e)=>({type:me.PERMANENT,validate:(t,s,a)=>{r(t,a.permanent,s,a)},userPrompt:e}),qs=(r,e)=>({type:me.SLOT,validate:(t,s,a)=>{r(t,s,a)},userPrompt:e}),Uc=(r,e,t)=>({choices:r,type:me.ONE_CHOICE,validate:(s,a,n)=>{e(s,n.permanent,a,n)},userPrompt:t}),Dc=(r,e,t,s,a)=>{const{inspector:n}=a;n.validateActivateAbility(r,e,t,s)},Wt=(r,e,t,s)=>{const{inspector:a}=s;a.validateAttack(r,e,t)},Gc=(r,e,t,s)=>{switch(t.type){case me.PERMANENT:{if(e.type!==me.PERMANENT){r.add(D.OPT_TYPE);break}t.validate&&t.validate(r,e.permanent,s);break}case me.SLOT:{if(e.type!==me.SLOT){r.add(D.OPT_TYPE);break}t.validate&&t.validate(r,e.slot,s);break}}};function wr(r,e,t){e.slot.column!==t.slot.column&&r.add(D.GENERIC)}const Kt={"bb-b":{deckbuildingLimit:1,isLegendary:!0},"bee-rider":{flexCost:[],flexForms:[qs((r,e,t)=>{const{inspector:s,permanent:a}=t;s.doesPermanentHaveCounterType(a,I.FLEXED_THIS_TURN)&&r.add(D.GENERIC),zt(a.slot,e)||r.add(D.ADJACENT),s.isSlotOccupied(e)&&r.add(D.OCCUPIED)})]},beeflector:{adjustSummonChecks:r=>{r.has(D.TERRAIN)?r.delete(D.TERRAIN):r.add(D.TERRAIN)}},beeowulf:{specialCost:[C.YELLOW],specialForms:[Se((r,e,t,s)=>{const{inspector:a}=s;a.validateAttack(r,e,t),a.getCardType(t)!==se.CREATURE&&r.add(D.GENERIC)}),qs((r,e,t)=>{const{inspector:s}=t,a=Oc(t,0);zt(a.slot,e)||r.add(D.ADJACENT),s.isSlotOccupied(e)&&r.add(D.OCCUPIED)},"select a slot to move the target to")]},blancmange:{deckbuildingLimit:1,isLegendary:!0,flexCost:[],flexForms:[Se((r,e,t,s)=>{const{inspector:a}=s;a.doesPermanentHaveCounterType(e,I.SUMMONED_THIS_TURN)||r.add(D.GENERIC),t.id===e.id&&r.add(D.GENERIC),t.owner!==e.owner&&r.add(D.ALLIED),a.getCardType(t)!==se.CREATURE&&r.add(D.CARD_TYPE),a.isSlotOccupied(a.getReflectedSlot(t.slot))&&r.add(D.OCCUPIED)},"select a friendly Creature")]},"boarnana-tree":{flexCost:[C.RED]},"boarry-farmer":{adjustAttackChecks:wr},camp:{isStructure:!0,isBase:!0},"captain-pi":{deckbuildingLimit:1,isLegendary:!0,createGemColors:[[C.RAINBOW]]},chicken:{specialCost:[]},"chocolate-calf":{flexCost:[C.WHITE]},coloring:{deckbuildingLimit:1,isLegendary:!0,flexCost:[],flexForms:[Se((r,e,t,s)=>{const{inspector:a}=s;a.doesPermanentHaveCounterType(e,I.SUMMONED_THIS_TURN)||r.add(D.GENERIC),t.id===e.id&&r.add(D.GENERIC),t.owner!==e.owner&&r.add(D.ALLIED),a.getCardType(t)!==se.CREATURE&&r.add(D.CARD_TYPE),t.ready&&r.add(D.READY)},"select an unready friendly Creature")]},dargle:{deckbuildingLimit:1,isLegendary:!0},"flora-the-explora":{specialCost:[]},giraffatitan:{specialCost:[],specialForms:[Se((r,e,t,s)=>{const{inspector:a}=s;a.validateAttack(r,e,t),a.getCardType(t)!==se.CREATURE&&r.add(D.GENERIC),r.delete(D.PROTECTED),a.isProtectedFrom(t,e)||r.add(D.GENERIC),t.slot.column!==e.slot.column&&r.add(D.GENERIC)},"select a protected Creature in the same column")]},"glass-of-moo":{specialCost:[]},"glass-of-moocha":{specialCost:[]},hog:{adjustAttackChecks:wr},"hog-factory":{isStructure:!0,isBase:!0},"hog-factorytory":{isStructure:!0,isBase:!0},"hog-factorytorytory":{isStructure:!0,isBase:!0},"hog-hog":{adjustAttackChecks:wr},"hog-on-a-log":{adjustAttackChecks:wr},"hog-on-a-log-on-a":{adjustAttackChecks:wr},jabberwock:{deckbuildingLimit:1,isLegendary:!0,specialCost:[],specialForms:[Se((r,e,t,s)=>{const{inspector:a}=s;t.owner!==e.owner&&r.add(D.ALLIED),a.getCardType(t)!==se.CREATURE&&r.add(D.CARD_TYPE)},"select a friendly Creature")]},keep:{isStructure:!0,isBase:!0,adjustMoveChecks:r=>{r.delete(D.CARD_TYPE)},adjustAttackChecks:r=>{r.delete(D.CARD_TYPE)}},"lady-jane":{specialCost:[C.WHITEBLACK],specialForms:[Se((r,e,t,s)=>{const{inspector:a}=s;e.owner===t.owner&&r.add(D.ALLIED),a.getCounterValSum(t,I.DAMAGE_TAKEN)<=0&&r.add(D.GENERIC)})]},"log-factory":{isStructure:!0,isBase:!0},"log-factorytory":{isStructure:!0,isBase:!0},"log-factorytorytory":{isStructure:!0,isBase:!0},"miss-yu":{deckbuildingLimit:1,isLegendary:!0},"mister-penny":{deckbuildingLimit:1,isLegendary:!0,flexCost:[],flexForms:[Se((r,e,t,s)=>{const{inspector:a}=s;t.owner!==e.owner&&r.add(D.ALLIED),a.getCardType(t)!==se.STRUCTURE&&r.add(D.CARD_TYPE)},"select a friendly Structure")]},moonick:{deckbuildingLimit:1,isLegendary:!0},murray:{flexCost:[C.WHITEBLACK],flexForms:[Se((r,e,t,s)=>{const{inspector:a}=s;a.doesPermanentHaveCounterType(e,I.FLEXED_THIS_TURN)&&r.add(D.GENERIC)})],specialCost:[C.RED,C.YELLOW,C.PURPLE,C.GREEN,C.WHITE,C.BLACK],specialForms:[Se((r,e,t,s)=>{const{inspector:a}=s;e.owner===t.owner&&r.add(D.ALLIED),a.getCardType(t)!==se.STRUCTURE&&r.add(D.GENERIC),a.doesPermanentHaveCounterType(t,I.INVULNERABLE)&&r.add(D.INVULNERABLE)})]},"nice-cow":{specialCost:[C.ROCK,C.BLACK],specialForms:[Se(Wt,"select an attack target")]},nightshade:{specialCost:[],specialForms:[Se((r,e,t,s)=>{e.owner===t.owner&&r.add(D.ALLIED)})]},"oklahoma-tusks":{flexCost:[C.RED],specialCost:[C.RED]},othello:{deckbuildingLimit:1,isLegendary:!0,specialCost:[],specialForms:[Se((r,e,t,s)=>{const{inspector:a}=s;t.owner!==e.owner&&r.add(D.ALLIED),a.getCardType(t)!==se.CREATURE&&r.add(D.CARD_TYPE),t.id===e.id&&r.add(D.GENERIC)},"select a friendly Creature"),qs((r,e,t)=>{const{inspector:s,permanent:a}=t;s.isSlotOccupied(e)&&r.add(D.OCCUPIED),s.getTerrainOf(e)!==a.owner&&r.add(D.ALLIED)},"select a slot to Summon the copy")]},"quail-aboard-fiery-steeds":{specialCost:[C.RED,C.RED]},"quantum-butter-churner":{adjustAttackChecks:(r,e,t,s)=>{const{inspector:a}=s;a.isProtectedFrom(e,t)&&r.add(D.GENERIC)}},"realistic-rex":{specialCost:[C.GREEN],specialForms:[Se(Wt,"select an attack target"),Se(Wt,"select an attack target")]},"reckless-medisaur":{specialCost:[],specialForms:[Se((r,e,t,s)=>{const{inspector:a}=s;e.owner!==t.owner&&r.add(D.ALLIED),a.getSharedEffects(t).isBase||r.add(D.CARD_TYPE)},"select an allied base"),Se((r,e,t,s)=>{const{inspector:a}=s;a.getCardType(t)!==se.CREATURE&&r.add(D.CARD_TYPE),t.damage<=0&&r.add(D.GENERIC)},"select a Creature that has taken damage")]},robot:{specialCost:[],specialForms:[{type:me.PERMANENT}]},"roe-doe-dendron":{specialCost:[C.PURPLE],specialForms:[Se(Wt,"select an attack target")]},"rude-cow":{specialCost:[C.WHITE],specialForms:[Se(Wt,"select an attack target")]},"sapphire-rose":{flexCost:[],flexForms:[]},"slime--slime":{disableDeckbuildingLimit:!0,isLegendary:!0},"spelling-bee":{deckbuildingLimit:1,isLegendary:!0},"stackstack-tory":{isStructure:!0,isBase:!0},stacktory:{isStructure:!0,isBase:!0},"swarm-tactics":{specialCost:[C.YELLOW]},"switch-boar-d":{specialCost:[C.RED],specialForms:[Se(Wt,"select an attack target"),Se((r,e,t)=>{t.owner!==e.owner&&r.add(D.GENERIC),zt(t.slot,e.slot)||r.add(D.GENERIC)},"select a Creature to swap places with")]},"touch-grass":{specialCost:[C.PURPLE],specialForms:[Se((r,e,t,s)=>{const{inspector:a}=s;a.validateAttack(r,e,t),a.getCardType(t)!==se.CREATURE&&r.add(D.GENERIC),r.delete(D.PROTECTED),a.isProtectedFrom(t,e)||r.add(D.GENERIC)},"select a protected Creature")]},"vanilla-calf":{flexCost:[C.BLACK]}},xc={dargle:["dino-1.png","!back.png"],"miss-yu":["cow-1.png","udder.png","!back-wing.png"],coloring:["dryad-1.png"],othello:["cow-2.png","udder.png","!back-wing.png"],jabberwock:["dino-2.png","!front.png"],moonick:["cow-4.png","udder.png","!back-wing.png"],"bb-b":["bee-1.png"],"spelling-bee":["bee-2.png"],blancmange:["cow-3.png","udder.png","!back-wing.png"],"slime--slime":["boar-1.png"],"mister-penny":["boar-2.png"]},Mc=["face.png","boar-1.png","boar-2.png","dino-2.png","dryad-1.png","udder.png","front.png","bee-2.png","bee-1.png","dino-1.png","cow-1.png","cow-2.png","back.png","cow-3.png","cow-4.png","back-wing.png"];for(const[r,e]of Object.entries(xc)){if(Kt[r]===void 0)throw new Error(`unknown card name ${r} in kero layers spec: did it get renamed?`);for(let t of e)if(t.startsWith("!")&&(t=t.slice(1)),!Mc.includes(t))throw new Error(`kero layer ${t} does not have a sort order`)}const $s=(r,e,t)=>{var a;const s=t[r];return!(s===void 0||!s.capturable||!s.implemented||s.cardUnlockGroupId!==null&&!e.has(r)||(((a=Kt[r])==null?void 0:a.isBase)??!1))},Lc=(r,e,t,s)=>{const a=du(e);a<1&&r.add(D.DECK_TOO_SMALL),a>t&&r.add(D.DECK_TOO_LARGE),Bc(e)>s&&r.add(D.DECK_TOO_MANY_LEGENDARIES)},Bc=r=>Object.entries(r.cards).filter(([e,t])=>{var s;return t>0&&(((s=Kt[e])==null?void 0:s.isLegendary)??!1)}).length,zc=(r,e,t,s)=>{const{cards:a,priorityCard:n}=r;if(a!==void 0)for(const[o,l]of Object.entries(a)){if(!$s(o,t,s))return!1;const i=Kt[o]??{},u=i.deckbuildingLimit??2,c=i.disableDeckbuildingLimit??!1;if(l<0||!Number.isInteger(l)||!c&&l>u)return!1}return!(n!==void 0&&!$s(n,t,s))};class zn{constructor(e,t,s,a,n){p(this,"teamId");p(this,"puzName");p(this,"server");p(this,"numWrongGuesses");p(this,"numExtraGuesses");p(this,"recentSubmissions");p(this,"pendingAnswerSubmissionTasks");p(this,"syncTracker");p(this,"subscriptions");this.teamId=e,this.puzName=t,this.server=n,this.numWrongGuesses=s,this.numExtraGuesses=a,this.recentSubmissions=[],this.pendingAnswerSubmissionTasks=[],this.syncTracker=new Vt(this.server.config,De.ANSWER,o=>{this.server.dirtyStateTracker.update({teams:{[this.teamId]:{answers:{[this.puzName]:o}}}})}),this.subscriptions=new Map}getTeamController(){return this.server.getTeamController(this.teamId)}getGlobalUpdatesScope(){return{type:J.TEAM_FISH_PUZZLE,teamId:this.teamId,puzName:this.puzName}}getNumGuessesRemaining(){return this.server.maxGuessesPerPuzzle+this.numExtraGuesses-this.numWrongGuesses}handleUpdateNumWrongGuesses(){this.server.bigBoardStateTracker.updateTeam(this.teamId,{unlocks:{[this.puzName]:{numWrongGuesses:this.numWrongGuesses}}}),this.handleUpdateNumGuessesRemaining()}handleUpdateNumGuessesRemaining(){this.server.broadcastGlobalUpdate(this.getGlobalUpdatesScope(),{type:$.TEAM_FISH_PUZZLE_SET_NUM_GUESSES_REMAINING,numGuessesRemaining:this.getNumGuessesRemaining()})}async addSubmissionTask(e){if(this.server.numPendingSubmissionTasks++,this.syncTracker.handleModify(),this.pendingAnswerSubmissionTasks.push(e),!(this.pendingAnswerSubmissionTasks.length>1)){for(this.syncTracker.snapshot();this.pendingAnswerSubmissionTasks.length>0;){const{answer:t,onDone:s,onError:a}=this.pendingAnswerSubmissionTasks[0];try{this.server.checkAnswerMetrics.record();const n=await this.server.runWithSyncThrottleAsync(async()=>await this.server.backend.checkAnswer({teamId:this.teamId,puzName:this.puzName,answer:t}));if(n!==void 0){if(n.type===br.SUCCESS){const{submittedAnswer:o,isCorrect:l}=n,i={teamId:this.teamId,puzName:this.puzName,answer:o,isCorrect:l,timestamp:new Date().getTime(),usedFreeAnswer:!1};await this.getTeamController().handleTeamUpdatesAsync({answerSubmissionsToAdd:[i]}),this.recentSubmissions.push(i),l||(this.numWrongGuesses++,this.handleUpdateNumWrongGuesses()),this.server.broadcastGlobalUpdate(this.getGlobalUpdatesScope(),{type:$.TEAM_FISH_PUZZLE_ADD_GUESS,submission:{submittedAnswer:i.answer,timestamp:i.timestamp}})}s(n)}}catch(n){console.error(n),a()}finally{this.pendingAnswerSubmissionTasks.shift(),this.server.numPendingSubmissionTasks--}}this.syncTracker.handleSyncResult(!0)}}async handleSubmitAnswerAsync(e,t){const s=await new Promise((a,n)=>{this.addSubmissionTask({answer:t,onDone:o=>{a(o)},onError:()=>{n()}})});this.server.sendResp(e,{type:Te.SUBMIT_ANSWER_ACK,resp:s})}async handleMyosbRequest(e,t){const{ansString:s,possible:a}=ci,n=s[a.filter(o=>new Set(o.map(([l,i])=>{var u;return(u=t[l])==null?void 0:u[i]})).size===5).length];this.puzName===Os&&this.server.sendResp(e,{type:Te.MYOSB_RESPONSE,resp:`Our solvers have solved your puzzle and extracted the letter ${n}.`})}}class Hn{constructor(e,t,s,a){p(this,"teamId");p(this,"slot");p(this,"server");p(this,"deck");p(this,"slowSyncTracking");this.teamId=e,this.slot=t,this.server=a,this.deck=s,this.slowSyncTracking={tracker:new Vt(this.server.config,De.DECK,n=>{this.server.dirtyStateTracker.update({teams:{[this.teamId]:{decks:{[this.slot]:n}}}})})}}getTeamController(){return this.server.getTeamController(this.teamId)}overrideDeck(e){const t={},s={displayName:e.displayName,cards:t};for(const[a,n]of Object.entries(this.deck.cards))t[a]=0;for(const[a,n]of Object.entries(e.cards))t[a]=n;this.handleDeckUpdate(s)}handleDeckUpdate(e){mu(this.deck,e),this.slowSyncTracking.tracker.handleModify(),this.server.broadcastGlobalUpdate({type:J.TEAM_DECKS,teamId:this.teamId},{type:$.TEAM_DECKS_UPDATE_DECK,slot:this.slot,deckUpd:e})}handleDeckbuildingStep(e){const{cardUnlocks:t}=this.getTeamController();zc(e,this.deck,new Set(t.keys()),this.server.cardsDB)&&this.handleDeckUpdate(e)}}class Hc{constructor(e,t,s){p(this,"teamId");p(this,"server");p(this,"masteryTree");p(this,"enabledMasteries");p(this,"slowSyncTracking");p(this,"subscriptions");this.teamId=e,this.server=s,this.masteryTree=t,this.enabledMasteries=this.updateEnabledMasteries(),this.slowSyncTracking={tracker:new Vt(this.server.config,De.MASTERY_TREE,a=>{this.server.dirtyStateTracker.update({teams:{[this.teamId]:{masteryTree:a}}})})},this.subscriptions=new Map}getTeamController(){return this.server.getTeamController(this.teamId)}updateEnabledMasteries(){return this.enabledMasteries=new Set(Iu(this.server.masteriesDB,this.masteryTree).map(({masteryId:e})=>e)),this.enabledMasteries}overrideMasteryTree(e){this.masteryTree;const t={reset:!0,newPlacements:Object.values(e.placements),masteriesListOverride:e.masteriesListOverride};this.handleMasteryTreeUpdate(t)}handleMasteryTreeUpdate(e){const t=this.getTeamController(),s=this.getEnabledMasteries();wu(this.masteryTree,e),this.slowSyncTracking.tracker.handleModify(),this.updateEnabledMasteries();const a=this.getEnabledMasteries();this.server.broadcastGlobalUpdate({type:J.TEAM_MASTERY_TREE,teamId:this.teamId},{type:$.TEAM_MASTERY_TREE_UPDATE,masteryTreeUpd:e});const n=[...a].filter(u=>!s.has(u)),o=[...s].filter(u=>!a.has(u));t.handleTeamUpdatesAsync({answerSubmissionsToAdd:[...a].map(u=>os(this.teamId,u,new Date().getTime())),unlocksToAdd:a.size===Object.keys(this.server.masteriesDB).length?[{teamId:this.teamId,puzName:Ps,timestamp:new Date().getTime()}]:void 0});const l=new Set([...n,...o]);if(l.has(Gs)||l.has(nr)){const u=a.has(Gs),c=a.has(nr);if(this.server.handleTeamSummaryUpdate(this.teamId,{hasReputationBoost:u,hasPvP:c}),!c){const{pvpController:d}=t;d.clearAllRequestsAndLeaveRing()}}n.includes(xs)&&t.broadcastTeamGlobalUpdate({type:$.TEAM_UPDATE_PUZZLE_STATS,stats:Object.fromEntries([...t.unlockTimes.keys()].flatMap(u=>this.server.puzzlesDB.battleGroups.has(u)?[[u,this.server.statsController.getPuzzleStats(u)]]:[]))});const i={...Object.fromEntries(n.map(u=>[u,!0])),...Object.fromEntries(o.map(u=>[u,!1]))};t.broadcastTeamGlobalUpdate({type:$.TEAM_UPDATE_STATE,enabledMasteries:i}),this.server.bigBoardStateTracker.updateTeam(this.teamId,{enabledMasteries:i})}handleMasteryTreeStep(e){const t=this.getTeamController(),{puzzlesDB:s}=this.server,a=[...t.solveTimes.keys()].flatMap(n=>{const{battleGroupName:o,answer:l}=s.getPuzzle(n);return n===Cs?[]:l===null?[]:bu(l)});Nu(this.masteryTree,a,e)&&this.handleMasteryTreeUpdate(Cu(e))}getEnabledMasteries(){return this.enabledMasteries}}class Fc{constructor(e,t,s){p(this,"isInactive");p(this,"isHidden");p(this,"isTempBlocked");p(this,"userId");p(this,"teamId");p(this,"displayName");p(this,"faction");p(this,"factionScoreContributions");p(this,"members");p(this,"server");p(this,"deckControllers");p(this,"masteryTreeController");p(this,"battleControllers");p(this,"fishPuzzleControllers");p(this,"pvpController");p(this,"views");p(this,"cardUnlocks");p(this,"unlockTimes");p(this,"solveTimes");p(this,"speedrunTimes");p(this,"cachedSpeedrunInfo");p(this,"subscriptions");p(this,"decksSubscriptions");p(this,"membersSubscriptions");p(this,"backendOwned");p(this,"numAuthsMetrics");p(this,"numRequestsMetrics");p(this,"fastSyncTracking");p(this,"slowSyncTracking");const{userId:a,displayName:n,isHidden:o,isInactive:l,faction:i,factionScoreContributions:u,members:c,decks:d,masteryTree:g,views:w,cardUnlocks:y,unlockTimes:A,solveTimes:S,speedrunTimes:O,numWrongGuesses:k,preferredDecks:P,puzzleSelections:N,checkpoints:U,blockedTeams:Q,isInRing:F,backendOwned:j}=t;this.userId=a,this.teamId=e,this.displayName=n,this.faction=i,this.factionScoreContributions=u,this.members=c,this.server=s,this.deckControllers=new Array(vn).fill(null);for(const{slot:V,deck:ae}of d){if(V<0||V>=this.deckControllers.length)throw new Error(`deck slot ${V} from backend out of bounds`);this.deckControllers[V]=new Hn(this.teamId,V,ae,this.server)}this.masteryTreeController=new Hc(e,g??{placements:{},connectedAnswers:[]},s),this.battleControllers=new Map,this.fishPuzzleControllers=new Map,this.pvpController=new Rc(e,Object.keys(Q),s),this.views=new Set(w),this.cardUnlocks=new Map(Object.entries(y)),this.unlockTimes=new Map(Object.entries(A)),this.solveTimes=new Map(Object.entries(S)),this.speedrunTimes=new Map(Object.entries(O)),this.subscriptions=new Map,this.decksSubscriptions=new Map,this.membersSubscriptions=new Map,this.numAuthsMetrics=new dt(_t),this.numRequestsMetrics=new dt(_t),this.fastSyncTracking={syncLoopController:new jt(async()=>{try{return await this.runFastSyncAsync()}catch(V){return console.error(V),!1}}),syncController:new Ln(this.server.config,De.FAST,V=>{this.server.dirtyStateTracker.update({teams:{[this.teamId]:{fastSync:V}}})})},this.slowSyncTracking={syncController:new Ln(this.server.config,De.MISC,V=>{this.server.dirtyStateTracker.update({teams:{[this.teamId]:{misc:V}}})})};for(const[V,{answer:ae}]of this.server.puzzlesDB.puzzles.entries()){if(ae===null)continue;const ie=k[V]??0,oe=j.extraGuesses[V]??0;(ie>0||oe!==0)&&this.fishPuzzleControllers.set(V,new zn(this.teamId,V,ie,oe,this.server))}for(const[V,ae]of Object.entries(P))this.getBattleController(V).selectedDeckSlot=ae;for(const[V,ae]of Object.entries(N))this.getBattleController(V).selectedPuzName=ae;for(const[V,ae]of Object.entries(U))this.getBattleController(V).checkpoints=ae;F&&this.masteryTreeController.getEnabledMasteries().has(nr)&&this.server.pvpLobbyController.ring.push(e),this.backendOwned=j,this.isInactive=l,this.isHidden=o,this.isTempBlocked=!1}initStats(){this.server.statsController.handleTeamUpdates(this.teamId,{factionScoreChanges:{...this.factionScoreContributions},updateFactionHistory:!1,unlocksToAdd:[...this.unlockTimes.keys()],solvesToAdd:[...this.solveTimes.keys()],speedrunTimes:Object.fromEntries(this.speedrunTimes.entries()),solveTimes:Object.fromEntries(this.solveTimes.entries())})}initRooms(e){for(const t of Object.values(e)){const{puzName:s,hostPuzName:a}=t;this.unlockTimes.has(s)&&this.getBattleController(a).restoreSavedRoom(t)}}broadcastTeamGlobalUpdate(e){this.server.broadcastGlobalUpdate({type:J.TEAM,teamId:this.teamId},e)}getDeckController(e){const t=this.deckControllers[e];if(t!==null)return t;new Date().getTime();const s=uu(e),a=new Hn(this.teamId,e,s,this.server);return this.deckControllers[e]=a,a.handleDeckUpdate({}),a}isValidBattle(e){if(!this.unlockTimes.has(e))return!1;const{battleGroupName:t}=this.server.puzzlesDB.getPuzzle(e),{answer:s}=this.server.puzzlesDB.getPuzzle(t);if(s!==null)return!1;const{numPuzzles:a}=this.server.puzzlesDB.getBattleGroup(t);return!(a>1&&e===t)}isValidFishPuzzle(e){if(!this.unlockTimes.has(e))return!1;const{answer:t,battleGroupName:s}=this.server.puzzlesDB.getPuzzle(e);return!(t===null||e===Cs&&!this.unlockTimes.has(Ps))}getBattleController(e){const t=this.battleControllers.get(e);if(t!==void 0)return t;const{battleGroupName:s}=this.server.getBattleGroup(e),a=s===Ot,n=new vc(this.teamId,e,a?null:e,null,this.server);return this.battleControllers.set(e,n),n}getFishPuzzleController(e){const t=this.fishPuzzleControllers.get(e);if(t!==void 0)return t;const s=new zn(this.teamId,e,0,0,this.server);return this.fishPuzzleControllers.set(e,s),s}isPuzzleUnlocked(e){return this.unlockTimes.has(e)}getClientPuzzleState(e){const t=this.server.puzzlesDB.getPuzzle(e),{answer:s}=t,a=this.unlockTimes.get(e);if(a===void 0)throw new Error(`tried to get client state for locked puzzle ${e}`);const{battleGroupName:n,order:o}=t,l={puzName:e,battleGroupName:n,order:o,hasAnswer:s!==null?!0:void 0,isNew:!this.views.has(e),speedrunTime:this.speedrunTimes.get(e),unlockTime:a,solveTime:this.solveTimes.get(e),puzPrompt:e===Ps?{header:"Restoring peace",text:"With your newfound mastery over the cards, you realize what you need to do next. What do you need to restore peace among the factions?"}:void 0};s!==null&&this.solveTimes.has(e)&&(l.answer=s);const i=this.battleControllers.get(e);if(i!==void 0){const u=i.getRoomStatus();u!==Bt.NONE&&(l.roomStatus=u)}return l}getClientBattleGroupState(e){const{displayName:t,mapPos:s,isLegendary:a,preBattleDialogue:n,postBattleDialogue:o,numPuzzles:l}=this.server.getBattleGroup(e),i=this.server.puzzlesDB.getPuzzle(e),{isCutscene:u,answer:c}=i,d={battleGroupName:e,displayName:t,isCutscene:u?!0:void 0,isLegendary:a?!0:void 0,preBattleDialogue:n,postBattleDialogue:this.solveTimes.has(e)?o:void 0,numPuzzles:l!==1?l:void 0,mapPos:s};return this.masteryTreeController.getEnabledMasteries().has(xs)&&(d.stats=this.server.statsController.getPuzzleStats(e)),d}getLeaderboardNumSolves(){return[...this.solveTimes.keys()].filter(e=>{const t=this.server.puzzlesDB.puzzles.get(e);if(t===void 0)throw new Error("expect solved puzzles to be in puzzlesDB");return mn(e,t.battleGroupName,t.isCutscene)}).length}getClientAdminData(){const{userId:e,displayName:t,isHidden:s,isInactive:a,isTempBlocked:n}=this;return{userId:e,displayName:t,isHidden:s,isInactive:a,isTempBlocked:n}}getHintsUsedMap(){const e={};for(const t of this.backendOwned.hintsUsed)e[t]=(e[t]??0)+1;return e}getClientBigBoardState(){const e=this.getHintsUsedMap();return{numHintsTotal:this.backendOwned.hintsTotal,unlocks:Object.fromEntries(Array.from(this.unlockTimes.keys(),t=>{const{numWrongGuesses:s}=this.fishPuzzleControllers.get(t)??{};return[t,{solveTime:this.solveTimes.get(t),numHintsUsed:e[t],numWrongGuesses:s,numMembers:this.server.gameRoomsController.getNumRoomMembers(this.teamId,t)}]})),cardUnlocks:Object.fromEntries(Array.from(this.cardUnlocks.keys(),t=>[t,!0])),selectedPuzzles:Object.fromEntries([...this.battleControllers.values()].flatMap(({puzName:t,selectedPuzName:s})=>s===null||s===t?[]:[[t,s]])),enabledMasteries:Object.fromEntries(Array.from(this.masteryTreeController.getEnabledMasteries(),t=>[t,!0]))}}getLastSolveTime(){return this.solveTimes.size===0?void 0:Math.max(0,...[...this.solveTimes.entries()].filter(([e,t])=>{const{battleGroupName:s,isCutscene:a}=this.server.puzzlesDB.getPuzzle(e);return mn(e,s,a)}).map(([e,t])=>t))}getCompletionTime(){return this.solveTimes.get(Wr)}getTeamSummaryState(){const{teamId:e,displayName:t,faction:s,factionScoreContributions:a,members:n,masteryTreeController:o,pvpController:l,isHidden:i}=this,u=o.getEnabledMasteries();return{teamId:e,displayName:t,faction:s,factionScoreContribution:s===null?0:a[s],hasReputationBoost:u.has(Gs)?!0:void 0,hasPvP:u.has(nr)?!0:void 0,isPvPGameActive:l.isGameActive()?!0:void 0,numSolves:this.getLeaderboardNumSolves(),lastSolveTime:this.getLastSolveTime(),completionTime:this.getCompletionTime(),speedrunInfo:this.computeSpeedrunInfo(),isHidden:i?!0:void 0}}makeTeamDataForBattle(e){const{teamId:t,displayName:s,faction:a}=this;return{teamId:t,displayName:s,faction:a,factionScoreContribution:a===null?0:this.factionScoreContributions[a],enabledMasteries:Object.fromEntries(Array.from(this.masteryTreeController.getEnabledMasteries(),n=>[n,!0])),isReplay:this.solveTimes.has(e),prevBestSpeedrunTime:this.speedrunTimes.get(e)}}startAIBattle(e,t,s,a,n,o){const l=this.getBattleController(t),{selectedPuzName:i}=l;if(i===null){this.server.sendErr(e,{errCode:K.NEED_PUZZLE});return}const u=l.getInspector();if(!u.hasAI()&&i!=="vanilla"){this.server.sendErr(e,{errCode:K.INVALID_PUZZLE});return}if(l.isRoomActive()){if(!(a??!1))return;if(l.resign()!==null)throw new Error("expect resign to succeed")}if(s!==void 0){const A=l.selectDeck(s);if(A!==null){this.server.sendErr(e,A);return}}const c={},d=[f.P1,f.P2].filter(A=>!(u.hasAI()&&A===f.P2));for(const A of d)c[A]=this.teamId;const{deckSelections:g,err:w}=l.commitDeckSelection(d,n,o==null?void 0:o.allowInvalidDecks);if(w!==void 0){this.server.sendErr(e,w);return}const y=this.server.gameRoomsController.createRoom(i,t,c,g,o);l.activateGame(y)}handleEnterRoom(e,t){const{puzName:s}=t,a=this.battleControllers.get(s);if(a===void 0){this.server.sendEnterRoomErr(e,{errCode:K.NO_ROOM});return}a.handleEnterGameRoom(e)}async runFastSyncAsync(){const{syncController:e}=this.fastSyncTracking,{packet:t}=e;if(t.unlocks!==void 0)for(const[y,A]of Object.entries(t.unlocks))A!==null===this.unlockTimes.has(y)&&delete t.unlocks[y];if(Object.keys(t.unlocks??{}).length===0&&delete t.unlocks,t.cardUnlocks!==void 0)for(const[y,A]of Object.entries(t.cardUnlocks))A!==null===this.cardUnlocks.has(y)&&((A==null?void 0:A.puzName)??null)===(this.cardUnlocks.get(y)??null)&&delete t.cardUnlocks[y];if(Object.keys(t.cardUnlocks??{}).length===0&&delete t.cardUnlocks,t.answerSubmissions!==void 0){for(const[y,A]of Object.entries(t.answerSubmissions))if(A===null&&!this.solveTimes.has(y))delete t.answerSubmissions[y];else if(A!==null&&this.solveTimes.has(y)){for(const[S,O]of Object.entries(A))O.isCorrect&&delete A[S];Object.keys(A??{}).length===0&&delete t.answerSubmissions[y]}}Object.keys(t.answerSubmissions??{}).length===0&&delete t.answerSubmissions;const s=e.startSync();if(s===null)return!0;let a=!1;this.server.fastSyncMetrics.record();try{await this.server.syncDataThrottledAsync({teamState:{[this.teamId]:s}}),a=!0}finally{e.endSync(a?s:null)}const{puzzlesDB:n}=this.server,o=Object.fromEntries(Object.entries(s.answerSubmissions??{}).flatMap(([y,A])=>{if(A===null)return[[y,null]];const S=Object.values(A).find(O=>O.isCorrect);return S===void 0?[]:[[y,S]]})),l=Object.fromEntries(Object.entries(o).flatMap(([y,A])=>{const{answer:S}=this.server.puzzlesDB.getPuzzle(y);return S===null?[]:[[y,S]]})),i=Object.fromEntries(Object.entries(s.unlocks??{}).flatMap(([y,A])=>A!==null&&n.getBattleGroup(y).battleGroupName===y?[[y,this.getClientBattleGroupState(y)]]:[])),u=Object.fromEntries(Object.entries(s.cardUnlocks??{}).map(([y,A])=>{if(A===null)return[y,null];const{puzName:S}=A;return[y,{cardName:y,puzName:S}]})),c=Object.fromEntries(Object.entries(o).map(([y,A])=>A===null?[y,null]:[y,A.timestamp])),d=new Set(Object.entries(s.unlocks??{}).filter(([y,A])=>A===null).map(([y,A])=>y));if(d.size>0){const y=[...this.server.puzzlesDB.puzzles.values()].filter(({puzName:A,battleGroupName:S})=>S===Ot&&A!==Ot);for(const A of d){const S=n.getFirstSubpuzzleInBattleGroup(A).puzName;for(const{puzName:O}of y){const k=this.getBattleController(O);if(k.selectedPuzName!==null&&k.selectedPuzName===A){if(k.isRoomActive()&&k.resign()!==null)throw new Error("failed to resign");if(k.selectPuzzle(this.unlockTimes.has(S)&&!d.has(S)?S:null)!==null)throw new Error("failed to clear selected puzzle");for(const[P,N]of Object.entries(k.checkpoints)){if(N===void 0)continue;JSON.parse(N.serializedState).selectedPuzName===A&&delete k.checkpoints[Number(P)]}}}}}for(const[y,A]of Object.entries(c))A!==null===this.solveTimes.has(y)&&console.error("packet has repeat data from solve state"),A===null?this.solveTimes.delete(y):this.solveTimes.set(y,A);for(const[y,A]of Object.entries(s.unlocks??{}))A!==null===this.unlockTimes.has(y)&&console.error("packet has repeat data from unlock state"),A===null?this.unlockTimes.delete(y):this.unlockTimes.set(y,A.timestamp);for(const[y,A]of Object.entries(s.cardUnlocks??{}))A!==null===this.cardUnlocks.has(y)&&((A==null?void 0:A.puzName)??null)===(this.cardUnlocks.get(y)??null)&&console.error("packet has repeat data from card unlock state"),A===null?this.cardUnlocks.delete(y):this.cardUnlocks.set(y,A.puzName);const g=Object.fromEntries(Object.entries(s.unlocks??{}).map(([y,A])=>[y,A===null?null:this.getClientPuzzleState(y)]));this.broadcastTeamGlobalUpdate({type:$.TEAM_UPDATE_STATE,solveTimes:c,answers:l,unlocks:g,battleGroupUnlocks:i,cardUnlocks:u,masteries:Object.fromEntries(Object.entries(c).flatMap(([y,A])=>{const S=this.server.masteriesDB[y];if(S===void 0)return[];if(A===null)return[[y,null]];const{displayName:O,effectText:k}=S;return[[y,{displayName:O,effectText:k}]]}))});for(const[y,A]of Object.entries(c)){const S=this.server.puzzlesDB.getPuzzle(y),{battleGroupName:O}=S;if(y!==O)continue;const{postBattleDialogue:k}=this.server.puzzlesDB.getBattleGroup(O);k!==void 0&&this.broadcastTeamGlobalUpdate({type:$.TEAM_UPDATE_BATTLE_GROUP,battleGroupName:O,postBattleDialogue:k})}Object.keys(c).length>=0&&this.server.handleTeamSummaryUpdate(this.teamId,{numSolves:this.getLeaderboardNumSolves(),lastSolveTime:this.getLastSolveTime(),completionTime:this.getCompletionTime()});const w=this.getHintsUsedMap();return this.server.bigBoardStateTracker.updateTeam(this.teamId,{unlocks:Object.fromEntries(Array.from(this.unlockTimes.keys(),y=>{var A;return[y,{solveTime:this.solveTimes.get(y),numHintsUsed:w[y],numWrongGuesses:(A=this.fishPuzzleControllers.get(y))==null?void 0:A.numWrongGuesses}]})),cardUnlocks:Object.fromEntries(Object.entries(u).map(([y,A])=>[y,A!==null]))}),this.server.statsController.handleTeamUpdates(this.teamId,{unlocksToAdd:[...Object.keys(g).filter(y=>g[y]!==null)],solvesToAdd:Object.keys(o).filter(y=>o[y]!==null),unlocksToDelete:[...Object.keys(g).filter(y=>g[y]===null)],solvesToDelete:Object.keys(o).filter(y=>o[y]===null),solveTimes:c}),c[Wr]!==void 0&&c[Wr]!==null&&this.server.broadcastNotifToTeam(this.teamId,{type:Mt.VICTORY}),!1}async handleTeamUpdatesAsync(e){const{puzzlesDB:t}=this.server,{puzzles:s,battleGroups:a}=t,n=new Date().getTime(),{syncController:o,syncLoopController:l}=this.fastSyncTracking;if(e.solvesToDelete!==void 0){const k=new Set(e.solvesToDelete);e.solvesToDelete.push(...[...t.puzzles.values()].filter(({puzName:P,battleGroupName:N})=>!k.has(P)&&k.has(N)).map(({puzName:P})=>P))}if(e.unlocksToDelete!==void 0){const k=new Set(e.unlocksToDelete);e.unlocksToDelete.push(...[...t.puzzles.values()].filter(({puzName:P,battleGroupName:N})=>!k.has(P)&&k.has(N)).map(({puzName:P})=>P)),e.solvesToDelete??(e.solvesToDelete=[]),e.solvesToDelete.push(...e.unlocksToDelete)}const i={answerSubmissions:{},unlocks:{...Object.fromEntries((e.unlocksToAdd??[]).map(k=>[k.puzName,k])),...Object.fromEntries((e.unlocksToDelete??[]).map(k=>[k,null]))},cardUnlocks:{...Object.fromEntries((e.cardUnlocksToAdd??[]).map(k=>[k.cardName,k])),...Object.fromEntries((e.cardUnlocksToDelete??[]).map(k=>[k,null]))}};for(const k of e.answerSubmissionsToAdd??[]){const{answer:P,puzName:N}=k;i.answerSubmissions??(i.answerSubmissions={}),i.answerSubmissions[N]=Object.assign(i.answerSubmissions[N]??{},{[P]:k})}for(const k of e.solvesToDelete??[])i.answerSubmissions??(i.answerSubmissions={}),i.answerSubmissions[k]=null;this.mergeFastSyncPacket(i);const u={},c=new Set([...this.solveTimes.keys(),...Object.entries(o.packet.answerSubmissions??{}).flatMap(([k,P])=>P===null?[]:Object.values(P).some(N=>N.isCorrect)?[k]:[])]),d=k=>{if(c.has(k))return;const P=os(this.teamId,k,n);u.answerSubmissions??(u.answerSubmissions={}),u.answerSubmissions[k]=Object.assign(u.answerSubmissions[k]??{},{[P.answer]:P}),c.add(k)},g=new Map;for(const k of c){const{battleGroupName:P,triggersBattleGroupSolve:N}=t.getPuzzle(k);N&&g.set(P,(g.get(P)??0)+1)}for(const[k,P]of g){const{solveReq:N}=t.getBattleGroup(k);P<N||d(k)}for(const k of Object.entries(o.packet.answerSubmissions??{}).flatMap(([P,N])=>N===null?[P]:[]))c.delete(k);const w=new Set([...this.unlockTimes.keys(),...Object.entries(o.packet.unlocks??{}).flatMap(([k,P])=>P===null?[]:[k])]);for(const k of Object.entries(o.packet.unlocks??{}).flatMap(([P,N])=>N===null?[P]:[]))w.delete(k);const y=k=>{w.has(k)||(u.unlocks??(u.unlocks={}),u.unlocks[k]={teamId:this.teamId,puzName:k,timestamp:n},w.add(k))};if(c.has(Ds))for(const{puzName:k,battleGroupName:P}of t.puzzles.values())P===Ds&&(y(k),d(k));const A=new Map([...this.cardUnlocks.entries(),...Object.entries(o.packet.cardUnlocks??{}).flatMap(([k,P])=>P===null?[]:[[k,P.puzName]])]);for(const k of Object.entries(o.packet.cardUnlocks??{}).flatMap(([P,N])=>N===null?[P]:[]))A.delete(k);const S={},O={};for(const{puzName:k,unlockMult:P,dstUnlockGroupId:N}of s.values())c.has(k)&&(S[N]===void 0&&(S[N]=0),S[N]+=P);for(const{puzName:k,cardUnlockGroupId:P}of s.values())c.has(k)&&P!==null&&(O[P]=k);for(const{puzName:k,unlockReq:P,srcUnlockGroupId:N}of s.values())P!==-1&&((S[N]??0)<P||y(k));for(const{puzName:k,battleGroupName:P,unlockReq:N}of s.values())N===-1&&w.has(P)&&y(k);for(const k of Object.values(this.server.cardsDB)){const{name:P,cardUnlockGroupId:N}=k;if(N===null)continue;const U=O[N];if(U===void 0)continue;const Q=A.get(P);Q!==void 0&&Q===U||(u.cardUnlocks??(u.cardUnlocks={}),u.cardUnlocks[P]={teamId:this.teamId,puzName:U,cardName:P,timestamp:n},A.set(P,U))}w.has(cn)||[...s.values()].filter(({puzName:k,answer:P})=>P!==null&&k!==Cs&&c.has(k)).length>0&&y(cn),w.has(dn)||[...a.values()].filter(({battleGroupName:k,isLegendary:P})=>P&&c.has(k)).length>0&&y(dn),w.has(Us)||(this.getBattleController(Us).getInspector(),[...a.values()].filter(({isLegendary:k})=>k).every(({battleGroupName:k})=>c.has(k))&&y(Us)),this.mergeFastSyncPacket(u),await l.triggerLoopAndWaitAsync()}async adminModifyTeamAsync(e){const{isInactive:t,isHidden:s,isTempBlocked:a,displayName:n,overrideSolved:o,overrideUnlocked:l,overrideCardUnlocked:i,overrideMasteriesList:u,overrideDecks:c,overrideMasteryTree:d}=e;t!==void 0&&this.setTeamInactive(t),s!==void 0&&this.setTeamHidden(s),a!==void 0&&this.setTeamTempBlocked(a),n!==void 0&&this.setDisplayName(n),this.masteryTreeController.handleMasteryTreeUpdate({masteriesListOverride:u}),d!==void 0&&this.masteryTreeController.overrideMasteryTree(d);for(const[g,w]of Object.entries(c??{}))this.getDeckController(Number(g)).overrideDeck(w);await this.handleTeamUpdatesAsync({answerSubmissionsToAdd:Object.entries(o??{}).flatMap(([g,w])=>w?[{teamId:this.teamId,puzName:g,answer:this.server.puzzlesDB.getPuzzle(g).answer??"",isCorrect:!0,timestamp:new Date().getTime(),usedFreeAnswer:!1}]:[]),solvesToDelete:Object.entries(o??{}).flatMap(([g,w])=>w?[]:[g]),unlocksToAdd:Object.entries(l??{}).flatMap(([g,w])=>w?[{teamId:this.teamId,puzName:g,timestamp:new Date().getTime()}]:[]),unlocksToDelete:Object.entries(l??{}).flatMap(([g,w])=>w?[]:[g]),cardUnlocksToAdd:Object.entries(i??{}).flatMap(([g,w])=>w?[{teamId:this.teamId,puzName:null,cardName:g,timestamp:new Date().getTime()}]:[]),cardUnlocksToDelete:Object.entries(i??{}).flatMap(([g,w])=>w?[]:[g])})}async overrideIsSolvedAsync(e,t){await this.adminModifyTeamAsync({overrideSolved:{[e]:t}})}async overrideIsUnlockedAsync(e,t){await this.adminModifyTeamAsync({overrideUnlocked:{[e]:t}})}async overrideIsCardUnlockedAsync(e,t){await this.adminModifyTeamAsync({overrideCardUnlocked:{[e]:t}})}setTeamInactive(e){if(e!==this.isInactive){if(this.isInactive=e,this.mergeSlowSyncPacket({isInactive:e}),e){const t=this.server.teamConns.get(this.teamId);if(t!==void 0)for(const s of t.values())s.client.close()}this.server.broadcastAdminGlobalUpdate({type:$.SERVER_UPDATE_TEAM,teamId:this.teamId,isInactive:e})}}setTeamHidden(e){e!==this.isHidden&&(this.isHidden=e,this.mergeSlowSyncPacket({isHidden:e}),e?this.server.statsController.hideTeam(this.teamId):this.server.statsController.unhideTeam(this.teamId),this.server.broadcastAdminGlobalUpdate({type:$.SERVER_UPDATE_TEAM,teamId:this.teamId,isHidden:e}),this.server.handleTeamSummaryUpdate(this.teamId,{isHidden:e}))}setTeamTempBlocked(e){if(e!==this.isTempBlocked&&(this.isTempBlocked=e,e)){const t=this.server.teamConns.get(this.teamId);if(t!==void 0)for(const s of t.values())s.isAdmin||(this.server.sendErr(s,{errCode:K.TEAM_TEMP_BLOCKED}),s.client.close())}}setDisplayName(e){this.displayName=e,this.mergeSlowSyncPacket({displayName:e}),this.broadcastTeamGlobalUpdate({type:$.TEAM_UPDATE_STATE,displayName:e}),this.server.handleTeamSummaryUpdate(this.teamId,{displayName:e}),this.server.broadcastAdminGlobalUpdate({type:$.SERVER_UPDATE_TEAM,teamId:this.teamId,displayName:e})}handleSetFaction(e,t){if(!this.masteryTreeController.getEnabledMasteries().has(pn)){this.server.sendErr(e,{errCode:K.NO_MASTERY});return}this.faction=t,this.mergeSlowSyncPacket({faction:t}),this.broadcastTeamGlobalUpdate({type:$.TEAM_UPDATE_STATE,faction:t}),this.server.handleTeamSummaryUpdate(this.teamId,{faction:t,factionScoreContribution:t===null?0:this.factionScoreContributions[t]})}handleChangeFactionScoreContributions(e){for(const[a,n]of Object.entries(e)){const o=a;this.factionScoreContributions[o]+=n}const t=Object.fromEntries(Object.entries(this.factionScoreContributions).filter(([a,n])=>e[a]??!1));this.mergeSlowSyncPacket({factionScoreContributions:t}),this.broadcastTeamGlobalUpdate({type:$.TEAM_UPDATE_STATE,factionScoreContributions:t});const s=this.faction;s!==null&&(e[s]??0)!==0&&this.server.handleTeamSummaryUpdate(this.teamId,{factionScoreContribution:this.factionScoreContributions[s]}),this.server.statsController.handleTeamUpdates(this.teamId,{factionScoreChanges:e,updateFactionHistory:!0})}handleSetMembers(e){this.members=e,this.server.broadcastGlobalUpdate({type:J.TEAM_MEMBERS,teamId:this.teamId},{type:$.TEAM_MEMBERS_UPDATE_STATE,members:e})}handleNewSpeedrunTime(e,t){const s=this.speedrunTimes.get(e);s!==void 0&&t>=s||(this.speedrunTimes.set(e,t),delete this.cachedSpeedrunInfo,this.broadcastTeamGlobalUpdate({type:$.TEAM_UPDATE_STATE,speedrunTimes:{[e]:t}}),this.server.statsController.handleTeamUpdates(this.teamId,{speedrunTimes:{[e]:t}}),this.server.handleTeamSummaryUpdate(this.teamId,{speedrunInfo:this.computeSpeedrunInfo()}))}computeSpeedrunInfo(){if(this.cachedSpeedrunInfo!==void 0)return this.cachedSpeedrunInfo;const e=[...this.server.puzzlesDB.puzzles.values()].filter(({puzName:t,battleGroupName:s,isCutscene:a})=>ii(t,s,a)).map(({puzName:t})=>this.speedrunTimes.get(t)??0);return this.cachedSpeedrunInfo={numTimes:e.filter(t=>!!t).length,totalTime:e.reduce((t,s)=>t+s,0)},this.cachedSpeedrunInfo}viewPuzzle(e,t){if(!this.unlockTimes.has(t)){this.server.sendErr(e,{errCode:K.INVALID_PUZZLE});return}const{battleGroupName:s}=this.server.getBattleGroup(t),a=new Date().getTime(),n={};this.views.has(t)||(n[t]=a),this.views.has(s)||(n[s]=a);for(const o of Object.keys(n))this.views.add(o),this.broadcastTeamGlobalUpdate({type:$.TEAM_UPDATE_PUZZLE,puzName:o,isNew:!1});this.mergeSlowSyncPacket({viewTimes:n})}mergeFastSyncPacket(e){this.fastSyncTracking.syncController.mergePacket(e)}mergeSlowSyncPacket(e){this.slowSyncTracking.syncController.mergePacket(e)}}var Fn=(r=>(r.AI_BATTLER="ai_battler",r.CREATE_GEMS="create_gems",r.DRAW="draw",r.END_TURN="end_turn",r.FLEX="flex",r.SPECIAL="special",r.POWER="power",r.HEALTH="health",r.GEMS="gems",r))(Fn||{}),kr=(r=>(r.NARRATOR="narrator",r.ENEMY="enemy",r.DINO="dino",r.CAPTAIN_PI="captain_pi",r.KERO="kero",r.ANGRY_KERO="angry_kero",r.KERO_DOS="kero_dos",r))(kr||{});class is{constructor(e,t,s){p(this,"inspector");p(this,"player");p(this,"role");this.inspector=e,this.player=t,this.role=s}getPlayer(e){const t=e??this.player;if(t===void 0)throw new Error("player not provided");return t}getRole(e){const t=e??this.role;if(t===void 0)throw new Error("role not provided");return t}endTurn(e){const t=this.getPlayer(e);return{type:H.END_TURN,player:t,stepNumber:this.inspector.getStepNumber(t)}}spawn(e,t,s,a){const n=(()=>{if(typeof t=="number"){if(s===void 0)throw new Error("incorrect type signature");return{row:t,column:s}}else{if(s!==void 0)throw new Error("incorrect type signature");return t}})();return this.summonOrSpawn({player:a,slot:n,cardName:e})}summon(e,t,s,a){const n=(()=>{if(typeof t=="number"){if(s===void 0)throw new Error("incorrect type signature");return{row:t,column:s}}else{if(s!==void 0)throw new Error("incorrect type signature");return t}})();return this.summonOrSpawn({player:a,slot:n,handCardId:e})}summonOrSpawn(e){const t=this.getPlayer(e.player);return{type:H.SUMMON,...e,player:t,stepNumber:this.inspector.getStepNumber(t)}}create(e,t){return{type:H.CREATE_GEMS,permanentId:e.id,gemColors:t,stepNumber:this.inspector.getStepNumber(e.owner)}}move(e,t,s){const a=(()=>{if(typeof t=="number"){if(typeof s!="number")throw new Error("incorrect type signature");return{row:t,column:s}}else{if(s!==void 0)throw new Error("incorrect type signature");return t}})();return{type:H.MOVE,permanentId:e.id,slot:a,stepNumber:this.inspector.getStepNumber(e.owner)}}attack(e,t){return{type:H.ATTACK,attackerId:e.id,defenderId:t.id,stepNumber:this.inspector.getStepNumber(e.owner)}}activateAbility(e,t,s){return{type:H.ACTIVATE_ABILITY,permanentId:e.id,abilityType:t,effectOpts:s??[],stepNumber:this.inspector.getStepNumber(e.owner)}}draw(e){const t=this.getPlayer(e);return{type:H.DRAW,player:t,stepNumber:this.inspector.getStepNumber(t)}}makeDefaultAttackQuery(e){return{sort:["structuresFirst",{type:"weighted",weights:[{criterion:"health",weight:1},{criterion:"-power",weight:1}]},{type:"euclideanDistance",slot:e.slot}]}}attackFirst(e,t,s){for(const a of this.inspector.getPermanents(t??this.makeDefaultAttackQuery(e))){const n=this.attack(e,a);if(this.inspector.isValid(n,this.getRole(s)))return n}}createCheckpoint(e){return{type:H.CREATE_CHECKPOINT,slot:e}}}var R=(r=>(r.CREATED="created",r.BEFORE_DESTROYED="before_destroyed",r.AFTER_DESTROYED="after_destroyed",r.START_TURN="start_turn",r.END_TURN="end_turn",r.BEFORE_DESTROY_UNIT="before_destroy_unit",r.AFTER_DESTROY_UNIT="after_destroy_unit",r.AFTER_DAMAGED="after_damaged",r.AFTER_DAMAGE_REMOVED="after_damage_removed",r.AFTER_STATS_CHANGED="after_stats_changed",r.AFTER_DEAL_DAMAGE="after_deal_damage",r.OTHER_UNIT_DESTROYED="other_unit_destroyed",r.OTHER_UNIT_SPAWN="other_unit_spawn",r))(R||{});class Yc{constructor(e){p(this,"inspector");p(this,"controller");p(this,"engine");this.inspector=e.inspector,this.controller=e.controller,this.engine=e}getBackdoorController(){return this.controller}getBackdoorEngine(){return this.engine}initExtraState(e){this.engine.getEngineOnly().extraState=e}getExtraState(){const e=this.engine.getEngineOnly().extraState;if(e===void 0)throw new Error("extraState not initialized");return e}initSharedExtraState(e){this.controller.broadcastAndApply({type:W.INIT_SHARED_EXTRA_STATE,sharedExtraState:e})}modifySharedExtraState(e){this.controller.broadcastAndApply({type:W.MODIFY_SHARED_EXTRA_STATE,updInfo:e})}drawCard(e){this.engine.drawCard(e)}addCardToHand(e,t){this.engine.addCardToHand(e,t)}discardCard(e,t){this.controller.discardCard(e,t)}discardRandomCard(e){const t=this.inspector.gameState[e].hand;if(t.length===0)return!1;const s=Math.floor(Math.random()*t.length);return this.discardCard(e,t[s].id),!0}removeCardIndex(e,t){const s=this.inspector.getDrawPile(e);if(t<0||t>=s.length)throw new Error("cardIndex out of bounds for draw pile");this.engine.removeCardIndex(e,t)}addGems(e,t){this.inspector.hasAI()&&e===f.P2&&(this.inspector.gameSpec.aiDisableGemAccounting??!1)||this.controller.addGems(e,t)}spawn(e,t,s,a){const n=(()=>{if(typeof t=="number"){if(typeof s!="number")throw new Error("incorrect type signature");return{row:t,column:s}}else{if(typeof s=="number")throw new Error("incorrect type signature");return t}})(),o=typeof s!="number"?s:a;if(o===void 0)throw new Error("incorrect type signature");return!this.inspector.isSlotInBounds(n)||this.inspector.isSlotOccupied(n)?!1:(this.engine.spawnPermanent(e,o,n),!0)}despawn(e){this.inspector.doesPermanentExist(e)&&this.controller.removePermanent(e.id)}changePermanentOwner(e){return this.inspector.doesPermanentExist(e)?(this.controller.changePermanentOwner(e.id,this.inspector.getOpponentOf(e.owner)),!0):!1}ready(e){return this.inspector.doesPermanentExist(e)?(this.controller.readyPermanent(e.id),!0):!1}unready(e){return this.inspector.doesPermanentExist(e)?(this.controller.unreadyPermanent(e.id),!0):!1}move(e,t,s){const a=(()=>{if(typeof t=="number"){if(typeof s!="number")throw new Error("incorrect type signature");return{row:t,column:s}}else{if(s!==void 0)throw new Error("incorrect type signature");return t}})();return!this.inspector.doesPermanentExist(e)||!this.inspector.isSlotInBounds(a)||this.inspector.isSlotOccupied(a)?!1:(this.controller.move(e.id,a),!0)}moveRel(e,t,s){return this.move(e,e.slot.row+t,e.slot.column+s)}swap(e,t){this.inspector.doesPermanentExist(e)&&this.inspector.doesPermanentExist(t)&&this.controller.swap(e.id,t.id)}attack(e,t,s){this.inspector.doesPermanentExist(e)&&this.inspector.doesPermanentExist(t)&&(s===void 0?this.engine.attack(e,t):this.engine.damagePermanent(t,s,e))}damage(e,t,s){this.inspector.doesPermanentExist(t)&&this.engine.damagePermanent(t,s,e)}damageUnattributed(e,t,s){this.inspector.doesPermanentExist(e)&&this.engine.damagePermanent(e,t,void 0,s)}removeDamage(e,t){return!this.inspector.doesPermanentExist(e)||t<=0?!1:(this.engine.removeDamageFromPermanent(e,t),!0)}adjustPermanentStats(e,t,s){return!this.inspector.doesPermanentExist(e)||t===0&&s===0?!1:(this.engine.adjustPermanentStats(e,t,s),!0)}destroy(e,t){this.inspector.doesPermanentExist(t)&&this.engine.destroyPermanent(t,e)}addCounter(e,t){this.inspector.doesPermanentExist(e)&&this.controller.addCounter(e.id,t)}removeCounterType(e,t){return this.inspector.doesPermanentExist(e)?this.engine.removeCounterType(e,t):!1}updateCounterVal(e,t,s,a){this.inspector.doesPermanentExist(e)&&this.controller.setCounter(e.id,t,s,a&&a(s))}mergeValueCounter(e,t,s,a,n){if(this.inspector.doesPermanentExist(e)){for(const[o,l]of e.counters.entries())if(l.type===t&&l.expiry===n){this.controller.setCounter(e.id,o,l.val+s,a&&a(l.val+s));return}this.controller.addCounter(e.id,{type:t,val:s,explanation:a&&a(s),expiry:n})}}announce(e){this.controller.announce(e)}clearKeyframe(){this.controller.clearKeyframe()}endGame(e,t){e??(e=!0),this.engine.endGame(t??(e?f.P1:f.P2),ft.NORMAL,e?{[f.P1]:!0}:{},{})}}class jc{constructor(e){p(this,"inspector");p(this,"controller");p(this,"engine");p(this,"stepMaker");this.inspector=e.inspector,this.controller=e.controller,this.engine=e,this.stepMaker=new is(this.inspector,f.P2,he.GOD)}speak(e,t={}){const s=this.engine.getEngineOnly();this.controller.setKeyframe({id:`dyn-keyframe-${s.nextKeyframeId}`,dialogue:e.trim(),selector:Fn.AI_BATTLER,showNext:t.blocking,...t}),s.nextKeyframeId++}trySpawn(e,t,s){return this.engine.aiTryStep(this.stepMaker.spawn(e,t,s))}trySummon(e,t,s){return this.engine.aiTryStep(this.stepMaker.summon(e,t,s))}tryMove(e,t,s){return this.engine.aiTryStep(this.stepMaker.move(e,t,s))}tryMoveRel(e,t,s){return this.tryMove(e,e.slot.row+t,e.slot.column+s)}tryAttack(e,t){return this.engine.aiTryStep(this.stepMaker.attack(e,t))}tryActivateAbility(e,t,s){return this.engine.aiTryStep(this.stepMaker.activateAbility(e,t,s))}tryAttackFirst(e,t){const s=this.stepMaker.attackFirst(e,t);return s===void 0?!1:this.engine.aiTryStep(s)}setKeyframe(e){const{keyframes:t}=this.engine,s=typeof e=="string"?t.find(({id:a})=>a===e):e;if(!s)throw new Error("keyframe not found");this.controller.setKeyframe(s)}}class Vc{constructor(e){p(this,"ai");this.ai=e}speak(e,t={}){this.ai.speak(e,t)}setKeyframe(e){typeof e=="string"?this.ai.setKeyframe(e):this.ai.setKeyframe(e)}}const Ar=["Apple Bee","Bumblebee","Carpenter Bee","Drone Bee","Edward Al Bee","Fluffy Bee","Gardening Bee","Honey Bee","Iridescent Bee","Jasmine Bee","Kombucha Bee","Lavender Bee","Mason Bee","Nectar Bee","Orange Bee","Pollinator Bee","Queen Bee","Rosebud Bee","Sunshine Bee","Tangerine Bee","Ultimatefris Bee","Velvet Bee","Worker Bee","Xylophone Bee","Yellow Jacket Bee","Zinger Bee"],Yn={bearhive:{isStructure:!0,isBase:!0,computeText:(r,e)=>{const t=r.counters.find(a=>a.type===I.HAPPY_BEARS),s=r.counters.find(a=>a.type===I.SAD_BEARS);return`Base.
Contains ${(t==null?void 0:t.val)??0} happy bear${(t==null?void 0:t.val)===1?"":"s"} and ${(s==null?void 0:s.val)??0} sad bear${(s==null?void 0:s.val)===1?"":"s"}.`}},beehive:{isStructure:!0,isBase:!0},larva:{specialCost:[C.YELLOW],specialForms:[Uc(Ar,(r,e,t,s)=>{Ar.includes(t)||r.add(D.OPT_TYPE),Dc(r,e,ve.SPECIAL,[{type:me.ONE_CHOICE,choice:t}],s)},"select a bee type")]}};for(const r of Ar)Yn[r.toLocaleLowerCase().replace(/ /g,"-")]={flexCost:[C.YELLOW]};const Wc=54,Kc={allowCheckpoints:!0,hasAI:!0,aiDisableGemAccounting:!0,disableClearGems:!0,deckOverrides:{[f.P1]:new Array(Wc).fill("larva"),[f.P2]:[]},basesOverrides:{[f.P1]:["beehive"],[f.P2]:["bearhive"]},baseColumnOverrides:{[f.P1]:[2],[f.P2]:[2]},cardEffectsShared:Yn,numRows:6,numColumns:8},Xs=r=>{const{permanent:e,attacker:t,ctx:s}=r,{inspector:a,engine:n}=s;t&&(n.announce(`${a.getCardDisplayName(e)} attacks back for 1 damage!`),n.damageUnattributed(t,1))},Zt=(r,e,t,s)=>{const{inspector:a,engine:n}=s,o=e.power||0,l=e.health||0,i=[];o&&i.push(`+${o} power`),l&&i.push(`+${l} health`),n.announce(`${a.getCardDisplayName(t)} buffs ${a.getCardDisplayName(r)} with ${i.join("/")}!`),n.adjustPermanentStats(r,o,l)},jn=(r,e)=>t=>{const{permanent:s,ctx:a}=t;a.inspector.getAdjacentFriendlyPermanents(s).forEach(n=>{e&&!e(n,a)||Zt(n,r,s,a)})},Zc={[I.BASE_GEMS]:{handlers:{[R.START_TURN]:r=>{const{permanent:e,counter:t,ctx:s}=r,{inspector:a,engine:n}=s;if(t===void 0)throw new Error("expect counter in counter event");if(t.val===void 0)throw new Error("counter should have value");return a.isTurnPending(e.owner)&&n.addGems(e.owner,new Array(t.val).fill(C.RAINBOW)),{expire:!1}}}},[I.POISON]:{handlers:{[R.START_TURN]:r=>{const{permanent:e,counter:t,ctx:s}=r,{inspector:a,engine:n}=s;if(t===void 0)throw new Error("expect counter in counter event");if(t.val===void 0)throw new Error("poison counter should have value");a.isTurnPending(e.owner)&&n.damageUnattributed(e,t.val)}}},[I.DOOM]:{handlers:{[R.END_TURN]:r=>{const{permanent:e,counter:t,counterIndex:s,ctx:a}=r,{engine:n,inspector:o}=a;if(!o.isTurnPending(e.owner))return;if(t==null||s==null)throw new Error("counter event should have counter specified");const l=(t.val||0)-1;l<=0?t.val!==0&&n.updateCounterVal(e,s,0):n.updateCounterVal(e,s,l)}}},[I.DESTROY_ON_END_OF_TURN]:{handlers:{[R.END_TURN]:r=>{const{permanent:e,ctx:t}=r,{engine:s}=t;s.destroy(e,e)}}}},Ne=(r,e)=>{const t=r.effectOptsResolved[e];if(t===void 0||t.type!==me.PERMANENT)throw new Error("expected permanent opt");return t.permanent},Js=(r,e)=>{const t=r.effectOptsResolved[e];if(t===void 0||t.type!==me.SLOT)throw new Error("expected slot opt");return t.slot},qc=(r,e)=>{const t=r.effectOptsResolved[e];if(t===void 0||t.type!==me.ONE_CHOICE)throw new Error("expected one-choice string opt");return t.choice},us=(r,e)=>{const{engine:t}=e,s=Ne(r,0);t.attack(r.permanent,s)},Vn={"bb-b":{handlers:{[R.OTHER_UNIT_DESTROYED]:r=>{const{permanent:e,destroyedPermanent:t,ctx:s}=r,{inspector:a,engine:n}=s;e.owner===a.getOpponentOf(t.owner)&&a.getCardType(t)===se.CREATURE&&(a.getPermanents({owner:e.owner,adjacentTo:e.slot,type:se.CREATURE}).forEach(o=>{n.adjustPermanentStats(o,0,1)}),n.addGems(e.owner,[C.RAINBOW]),n.announce(`${a.getCardDisplayName(e)} Creates 1 Pie`))}}},"bee-rider":{onRepeatable:(r,e)=>{const{permanent:t}=r,{engine:s}=e,a=Js(r,0);s.move(t,a),s.addCounter(t,{type:I.FLEXED_THIS_TURN,explanation:"flexed this turn",expiry:R.END_TURN})}},beeflector:{handlers:{[R.CREATED]:r=>{const{engine:e}=r.ctx;e.changePermanentOwner(r.permanent)},[R.AFTER_DAMAGED]:Xs}},beeowulf:{onSpecial:(r,e)=>{const{engine:t}=e,s=Ne(r,0),a=Js(r,1);t.attack(r.permanent,s),t.move(s,a)}},beethoven:{adjustDamageReceived:(r,e,t,s)=>{const{inspector:a,engine:n}=s,o=1,l=a.getCounterValSum(r,I.IGNORED_DAMAGE),u=Math.min(o,l+e)-l;return u>0&&(n.announce(`${a.getCardDisplayName(r)} ignores ${u} damage!`),n.addCounter(r,{type:I.IGNORED_DAMAGE,val:u,explanation:`ignored ${u} damage this turn`,expiry:R.END_TURN})),e-u}},"bell-flower":{handlers:{[R.BEFORE_DESTROYED]:r=>{const{permanent:e,ctx:t}=r,{engine:s}=t;s.drawCard(e.owner)}}},blancmange:{handlers:{[R.CREATED]:r=>{const{permanent:e,ctx:t}=r,{inspector:s,engine:a}=t;if(s.getPermanentsOf(e.owner).filter(l=>s.getCardType(l)===se.CREATURE).length<=1){a.destroy(e,e),a.announce(`${s.getCardDisplayName(e)} destroys itself without a Creature to convert`);return}a.addCounter(e,{type:I.SUMMONED_THIS_TURN,explanation:"can Flex",expiry:R.END_TURN})},[R.END_TURN]:r=>{const{permanent:e,ctx:t}=r,{inspector:s,engine:a}=t;s.doesPermanentHaveCounterType(e,I.SUMMONED_THIS_TURN)&&(a.destroy(e,e),a.announce(`${s.getCardDisplayName(e)} did not convert and destroys itself`))}},onRepeatable:(r,e)=>{const{inspector:t,engine:s}=e,a=Ne(r,0),n=t.getReflectedSlot(a.slot);t.isSlotOccupied(n)||(s.move(a,n),s.changePermanentOwner(a),s.removeCounterType(r.permanent,I.SUMMONED_THIS_TURN))}},"boarnana-tree":{onRepeatable:(r,e)=>{const{engine:t,inspector:s}=e,{permanent:a}=r;s.getPermanents({owner:a.owner,row:a.slot.row,except:a,type:se.CREATURE}).forEach(n=>{Zt(n,{health:1},a,e)}),t.damage(a,a,1)}},camp:{handlers:{[R.CREATED]:r=>{r.ctx.engine.addCounter(r.permanent,{type:I.BASE_GEMS,val:1})}}},chicken:{counterData:{[I.CAT_SPECIAL_PENDING]:{handlers:{[R.START_TURN]:r=>{const{permanent:e,ctx:t}=r,{engine:s}=t;return s.addGems(e.owner,[C.RAINBOW]),{expire:!0}}}}},onSpecial:(r,e)=>{const{engine:t}=e;t.addCounter(r.permanent,{type:I.CAT_SPECIAL_PENDING,explanation:"Get {?} at the start of next turn"})}},"chocolate-calf":{onRepeatable:(r,e)=>{const{engine:t}=e;t.addCounter(r.permanent,{type:I.POWER_ADJUSTMENT,val:1,explanation:"+1 power for the rest of the turn",expiry:R.END_TURN})}},coloring:{handlers:{[R.CREATED]:r=>{const{permanent:e,ctx:t}=r,{engine:s}=t;s.addCounter(e,{type:I.SUMMONED_THIS_TURN,explanation:"can Flex",expiry:R.END_TURN})}},onRepeatable:(r,e)=>{const{engine:t}=e,s=Ne(r,0);t.ready(s),t.removeCounterType(r.permanent,I.SUMMONED_THIS_TURN)}},dargle:{handlers:{[R.AFTER_DEAL_DAMAGE]:r=>{const{permanent:e,damage:t,ctx:s}=r,{engine:a}=s;a.damageUnattributed(e,t),a.addCounter(e,{type:I.POWER_ADJUSTMENT,val:t,explanation:`+${t} porgle`}),a.announce(`${s.inspector.getCardDisplayName(e)} dargle itsergle for ${t} and increargle its porgle by ${t}`)}}},"dino-nugget":{handlers:{[R.CREATED]:r=>{const{permanent:e,ctx:t}=r,{inspector:s}=t;s.getPermanents({row:e.slot.row,type:se.CREATURE,except:e,custom:a=>{const n=s.getCardColor(a);return n!==null&&n===C.GREEN}}).forEach(a=>{Zt(a,{health:1},e,t)})}}},"eager-beever":{handlers:{[R.CREATED]:r=>{const{permanent:e,ctx:t}=r,{engine:s}=t;s.addCounter(e,{type:I.ALLOWS_MOVE_TO_ADJACENT})}}},"flora-the-explora":{onSpecial:(r,e)=>{const{engine:t}=e;t.drawCard(r.permanent.owner)}},giraffatitan:{onSpecial:us},"glass-of-moo":{onSpecial:(r,e)=>{const{engine:t}=e,{permanent:s}=r;t.addGems(s.owner,[C.WHITE,C.BLACK]),t.damage(s,s,1)}},"glass-of-moocha":{onSpecial:(r,e)=>{const{engine:t}=e,{permanent:s}=r;t.addGems(s.owner,[C.BLACK,C.WHITE]),t.damage(s,s,1)}},"hog-hog":{handlers:{[R.AFTER_DESTROYED]:r=>{const{permanent:e,ctx:t}=r;t.engine.addCardToHand(e.owner,{name:"hog"})}}},"hog-on-a-log":{handlers:{[R.AFTER_DESTROYED]:r=>{const{permanent:e,ctx:t}=r;t.engine.spawn("log",e.slot,e.owner)}}},"hog-on-a-log-on-a":{handlers:{[R.AFTER_DESTROYED]:r=>{const{permanent:e,ctx:t}=r;t.engine.spawn("log-on-a-hog-on-a",e.slot,e.owner)}}},jabberwock:{onSpecial:(r,e)=>{const{engine:t}=e,s=Ne(r,0);t.addCounter(s,{type:I.DIVINE_SHIELD,explanation:"The next instance of damage this turn is prevented",expiry:R.END_TURN})}},keep:{handlers:{[R.CREATED]:r=>{r.ctx.engine.addCounter(r.permanent,{type:I.BASE_GEMS,val:3})}}},"king-bee":{handlers:{[R.AFTER_DEAL_DAMAGE]:r=>{const{defender:e,ctx:t}=r,{engine:s}=t;s.addCounter(e,{type:I.POWER_ADJUSTMENT,explanation:"-1 power",val:-1})}}},"lady-jane":{onSpecial:(r,e)=>{const{inspector:t,engine:s}=e,{permanent:a}=r,n=Ne(r,0),o=t.getPower(a);s.damage(a,n,o+1)}},"log-on-a-hog":{handlers:{[R.AFTER_DESTROYED]:r=>{const{permanent:e,ctx:t}=r;t.engine.spawn("hog",e.slot,e.owner)}}},"log-on-a-hog-on-a":{handlers:{[R.AFTER_DESTROYED]:r=>{const{permanent:e,ctx:t}=r;t.engine.spawn("hog-on-a-log-on-a",e.slot,e.owner)}}},"miss-yu":{handlers:{[R.AFTER_DAMAGE_REMOVED]:r=>{const{permanent:e,ctx:t}=r,{engine:s}=t;s.ready(e),s.adjustPermanentStats(e,1,0),s.announce(`${t.inspector.getCardDisplayName(e)} readies and gains 1 power`)},[R.AFTER_STATS_CHANGED]:r=>{if(r.healthDelta<=0)return;const{permanent:e,ctx:t}=r,{engine:s}=t;s.ready(e),s.adjustPermanentStats(e,1,0),s.announce(`${t.inspector.getCardDisplayName(e)} readies and gains 1 power`)}}},"mister-penny":{onRepeatable:(r,e)=>{const{engine:t}=e,s=r.permanent,a=Ne(r,0);t.damage(s,a,1),t.addGems(s.owner,[C.RAINBOW])}},moonick:{handlers:{[R.OTHER_UNIT_SPAWN]:r=>{const{permanent:e,ctx:t}=r,{inspector:s,engine:a}=t,n=r.spawnedPermanent,o=e.owner;if(n.owner!==o)return;const l=s.getDrawPile(o),i=7;let u;if(l.length===0)return;l.length<i?u=l.slice().reverse():u=l.slice(l.length-i,l.length).reverse();const c=s.getCardName(n),d=s.getUnoccupiedSlots(o);if(d.length===0)return;const g=d[Math.floor(Math.random()*d.length)];let w=l.length-1;for(const y of u){if(s.getCardName(y)===c){if(a.removeCardIndex(o,w),a.spawn(s.getCardName(y),g,o))a.announce(`${s.getCardDisplayName(e)} Summons ${s.getCardDisplayName(y)}`);else throw new Error("failed to summon");return}w--}}}},murray:{onRepeatable:(r,e)=>{us(r,e),e.engine.addCounter(r.permanent,{type:I.FLEXED_THIS_TURN,explanation:"flexed this turn",expiry:R.END_TURN})},onSpecial:(r,e)=>{const{engine:t}=e,{permanent:s}=r,a=Ne(r,0);t.destroy(s,a)}},"nam-pam-bee":{handlers:{[R.START_TURN]:r=>{const{permanent:e,ctx:t}=r,{engine:s,inspector:a}=t;a.doesPermanentHaveCounterType(e,I.DAMAGE_TAKEN)&&s.addGems(e.owner,[C.YELLOW])}}},"nepeta-legion":{handlers:{[R.CREATED]:r=>{const{permanent:e,ctx:t}=r,{engine:s}=t;s.drawCard(e.owner)}}},"new-boarn":{handlers:{[R.CREATED]:r=>{const{permanent:e,ctx:t}=r,{inspector:s,engine:a}=t,n=s.getUnoccupiedSlots(e.owner);if(n.length===0)return;const o=n[Math.floor(Math.random()*n.length)];a.move(e,o)}}},"nice-cow":{onSpecial:(r,e)=>{const{engine:t,inspector:s}=e,{permanent:a}=r,n=Ne(r,0);t.attack(a,n),s.getPermanents({owner:a.owner,adjacentTo:a.slot,type:se.CREATURE}).forEach(o=>{Zt(o,{power:1},a,e)})}},nightshade:{handlers:{[R.CREATED]:r=>{r.ctx.engine.addCounter(r.permanent,{type:I.CANNOT_ATTACK})}},onSpecial:(r,e)=>{const{engine:t,inspector:s}=e;if(t.discardRandomCard(r.permanent.owner)){const a=Ne(r,0);t.damage(r.permanent,a,s.getPower(r.permanent))}else t.announce("Nightshade had no card to discard and failed.")}},o:{handlers:{[R.CREATED]:jn({health:1},(r,e)=>{const t=e.inspector.getCardColor(r);return t!==null&&[C.WHITE,C.WHITEBLACK].includes(t)})}},"oklahoma-tusks":{onRepeatable:(r,e)=>{const{engine:t}=e;t.addCounter(r.permanent,{type:I.POWER_ADJUSTMENT,val:1,explanation:"+1 power for the rest of the turn",expiry:R.END_TURN})},onSpecial:(r,e)=>{const{inspector:t,engine:s}=e,{permanent:a}=r,n=a.owner,o=t.getOpponentOf(n),l=t.getPermanentsOf(o).filter(i=>t.getCardType(i)==se.CREATURE&&i.slot.column===a.slot.column).sort((i,u)=>{const c=i.slot,d=u.slot,g=t.getTerrainOf(c),w=t.getTerrainOf(d);return t.isRowInFrontOf(c.row,d.row,o)?-1:t.isRowInFrontOf(d.row,c.row,o)?1:g===n&&w!==n?-1:w===n&&g!==n?1:c.column!==d.column?c.column-d.column:0});for(const i of l)s.attack(a,i)}},othello:{onSpecial:(r,e)=>{const{inspector:t,engine:s}=e,a=Ne(r,0),n=t.getCardName(a),o=Js(r,1),l=t.getAllPermanents();s.spawn(n,o,r.permanent.owner);let i=null;if(n==="new-boarn"){const c=t.getAllPermanents().filter(d=>!l.map(g=>g.id).includes(d.id)&&t.getCardName(d)==="new-boarn");c.length>0&&(i=c[0])}else i=t.getPermanentAtIfExists(o);i&&(s.addCounter(i,{type:I.ATTACKS_FOR_FREE,explanation:"Attacks for free"}),s.addCounter(i,{type:I.DESTROY_ON_END_OF_TURN,explanation:"On end of turn, Destroy this Creature"}),s.ready(i)),s.announce("Othello copies "+t.getCardDisplayName(a))}},payne:{adjustDamageReceived:(r,e,t,s)=>{const{inspector:a}=s;if(t){const n=a.getCardColor(t);if(n!==null&&[C.WHITE,C.BLACK].includes(n))return e+1}return e}},"pbee---j":{handlers:{[R.AFTER_DAMAGED]:Xs}},"petroleum-jelly":{adjustDamageReceived:(r,e,t,s)=>{const{inspector:a,engine:n}=s;return t&&r.slot.column===t.slot.column?(n.announce(`${a.getCardDisplayName(r)} takes 1 less damage!`),Math.max(e-1,0)):e}},"quail-aboard-fiery-steeds":{onSpecial:(r,e)=>{const{permanent:t}=r,{engine:s,inspector:a}=e;a.getPermanents({ownedByOpponentOf:t.owner,notProtectedFrom:t,custom:n=>Math.abs(n.slot.column-t.slot.column)<=1}).forEach(n=>{s.attack(t,n)})}},re:{handlers:{[R.CREATED]:jn({power:1},(r,e)=>{const t=e.inspector.getCardColor(r);return t!==null&&[C.BLACK,C.WHITEBLACK].includes(t)})}},"realistic-rex":{onSpecial:(r,e)=>{const{engine:t}=e,s=Ne(r,0),a=Ne(r,1);t.attack(r.permanent,s),t.attack(r.permanent,a)}},"reckless-medisaur":{onSpecial:(r,e)=>{const{engine:t}=e,{permanent:s}=r,a=Ne(r,0),n=Ne(r,1);t.damage(s,a,2),t.removeDamage(n,n.damage)}},robot:{onSpecial:us},"roe-doe-dendron":{onSpecial:(r,e)=>{const{inspector:t,engine:s}=e,{permanent:a}=r,n=Ne(r,0),o=t.getBehindFriendlyPermanents(n);if(s.attack(a,n),o.length===0)return;const l=o[0];t.getCardType(l)===se.CREATURE&&s.damage(a,o[0],1)}},"rude-cow":{onSpecial:(r,e)=>{const{engine:t,inspector:s}=e,{permanent:a}=r,n=Ne(r,0);t.attack(a,n),s.getPermanents({owner:a.owner,adjacentTo:a.slot,type:se.CREATURE}).forEach(o=>{Zt(o,{health:1},a,e)})}},"sapphire-rose":{onRepeatable(r,e){const{permanent:t}=r,{engine:s}=e;s.drawCard(t.owner),s.damageUnattributed(t,2)}},"slime--slime":{handlers:{[R.CREATED]:r=>{const{permanent:e,ctx:t}=r,{engine:s}=t;s.drawCard(e.owner)},[R.AFTER_DEAL_DAMAGE]:r=>{const{permanent:e,ctx:t}=r,{engine:s}=t;s.addGems(e.owner,[C.RED])}}},"spelling-bee":{handlers:{[R.CREATED]:r=>{const{permanent:e,ctx:t}=r,{engine:s}=t;s.addCounter(e,{type:I.DOOM,val:2-1,explanation:"will explode"})},[R.END_TURN]:r=>{const{permanent:e,ctx:t}=r,{inspector:s,engine:a}=t;s.doesPermanentHaveCounterType(e,I.DOOM)&&s.getCounterValSum(e,I.DOOM)===0&&(s.getPermanents({touching:e.slot,type:se.CREATURE}).forEach(o=>{a.damage(e,o,2)}),a.removeCounterType(e,I.DOOM),a.announce(`${s.getCardDisplayName(e)} explodes`))}}},"swarm-tactics":{handlers:{[R.AFTER_DAMAGED]:Xs},onSpecial:(r,e)=>{const{engine:t}=e;t.addCounter(r.permanent,{type:I.PROTECTS_ADJACENT_COLUMNS,explanation:"protecting adjacent columns",expiry:R.START_TURN})}},"switch-boar-d":{onSpecial:(r,e)=>{const{engine:t}=e,{permanent:s}=r,a=Ne(r,0),n=Ne(r,1);t.attack(s,a),t.swap(s,n)}},thesaurus:{handlers:{[R.AFTER_DESTROY_UNIT]:r=>{const{permanent:e,defender:t,ctx:s}=r,{inspector:a,engine:n}=s;a.getCardType(t)===se.CREATURE&&n.addGems(e.owner,[C.RAINBOW])}}},"touch-grass":{onSpecial:us},"tusk-enhancement":{handlers:{[R.CREATED]:r=>{const{permanent:e,ctx:t}=r;t.inspector.getPermanents({column:e.slot.column,type:se.CREATURE,except:e}).forEach(s=>{Zt(s,{power:1},e,t)})}}},"two-bees":{adjustDamageReceived:(r,e)=>Math.floor(e/2)},"ultra-violet":{handlers:{[R.AFTER_DEAL_DAMAGE]:r=>{const{defender:e,ctx:t}=r,{engine:s}=t;s.addCounter(e,{type:I.FROZEN,explanation:"will not ready on its next turn",expiry:R.START_TURN})}}},"vanilla-calf":{onRepeatable:(r,e)=>{const{engine:t}=e;r.permanent.damage>0&&t.removeDamage(r.permanent,1)}}};for(const r of Ar)Vn[r.toLocaleLowerCase().replace(/ /g,"-")]={onRepeatable:(e,t)=>{const{engine:s}=t;s.despawn(e.permanent)}};const Qs=(r,e)=>{if(e!==void 0)for(const[t,s]of Object.entries(e))r[t]={...r[t]??{},...s}},$c=(r,e)=>{var s;const t={};for(const a of r)Qs(t,a.cardEffects),Qs(t,(s=a.makeCardEffectsShared)==null?void 0:s.call(a,e)),Qs(t,a.cardEffectsShared);return t},Xc=(r,e)=>{const t={};for(const s of r)s.counterData!==void 0&&Object.assign(t,s.counterData);for(const[,s]of Object.entries(e))if(s.counterData)for(const[a,n]of Object.entries(s.counterData))t[a]=n;return t},Jc={cardEffectsShared:Kt,numRows:6,numColumns:5,extraProtectedChecks:(r,e,t)=>{const{inspector:s}=t;return s.getPermanents({owner:r.owner,columnAdjacentTo:r.slot.column,hasCounter:I.PROTECTS_ADJACENT_COLUMNS}).length>0},adjustMoveChecks:(r,e,t,s)=>{const{inspector:a}=s;a.getPermanents({owner:e.owner,adjacentTo:t,hasCounter:I.ALLOWS_MOVE_TO_ADJACENT}).length>0&&r.delete(D.ADJACENT)}},ea="common",Qc={hasAI:!0},ed={allowCheckpoints:!0,hasAI:!0,aiDisableGemAccounting:!0,numColumns:1,numRows:2,deckOverrides:{[f.P1]:[],[f.P2]:[]},basesOverrides:{[f.P1]:[],[f.P2]:[]},adjustEndTurnChecks:(r,e,t)=>{const{inspector:s}=t;if(e!==f.P1)return;const{keyframe:a}=s.gameState;(a===void 0||a.id!=="tutorial1-end-turn-1")&&r.add(D.HIDDEN)}},td={allowCheckpoints:!0,hasAI:!0,aiDisableGemAccounting:!0,numColumns:1,numRows:6,deckOverrides:{[f.P1]:[],[f.P2]:[]},basesOverrides:{[f.P1]:["camp"],[f.P2]:["camp"]},adjustEndTurnChecks:(r,e,t)=>{const{inspector:s}=t;if(e!==f.P1)return;const{keyframe:a}=s.gameState;(s.getTurnNumber()<=3?a===void 0||!["tutorial2-end-turn-1","tutorial2-end-turn-2"].includes(a.id):a!==void 0&&!["tutorial2-free-play"].includes(a.id))&&r.add(D.HIDDEN)}},rd={allowCheckpoints:!0,aiDisableGemAccounting:!0,hasAI:!0,deckOverrides:{[f.P1]:[],[f.P2]:[]},basesOverrides:{[f.P1]:["camp"],[f.P2]:["camp","camp"]}},sd={allowCheckpoints:!0,aiDisableGemAccounting:!0,hasAI:!0,deckOverrides:{[f.P1]:["beeowulf","chocolate-calf"],[f.P2]:[]},basesOverrides:{[f.P1]:["camp","camp","camp"],[f.P2]:["camp"]}},ad={allowCheckpoints:!0,aiDisableGemAccounting:!0,hasAI:!0,deckOverrides:{[f.P1]:["beeowulf","beeowulf","pbee---j","pbee---j","two-bees","two-bees","chocolate-calf","chocolate-calf","new-boarn","new-boarn","hog","hog","hamlet","hamlet","yoshisaur-munchakoopas","yoshisaur-munchakoopas"],[f.P2]:[]}},nd={allowCheckpoints:!0,aiDisableGemAccounting:!0,hasAI:!0,allowNoDeck:!0,basesOverrides:{[f.P2]:["camp"]},adjustDeckChecks:r=>{r.delete(D.DECK_TOO_SMALL)}},od={allowCheckpoints:!0,hasAI:!0,aiDisableGemAccounting:!0,aiDisableTurnCheck:!0,basesOverrides:{[f.P2]:[]}},ld={hasAI:!0,aiDisableGemAccounting:!0,basesOverrides:{[f.P2]:["mint","mint","mint","mint","mint"]},cardEffectsShared:{mint:{isStructure:!0,isBase:!0},"mint--overdrive-":{isStructure:!0,isBase:!0}}},id={allowCheckpoints:!0,hasAI:!0,aiDisableGemAccounting:!0,basesOverrides:{[f.P1]:["keep"],[f.P2]:["keep"]},disableCardEffectsAdjustAttackChecks:!0,adjustAttackChecks:(r,e,t,s)=>{const{inspector:a}=s,n=a.getCardDisplayName(e).charAt(0).toUpperCase();if("KQRBNP".includes(n)){r.delete(D.PROTECTED),Wn(e,t,s)||r.add(D.GENERIC);return}const l=a.getSharedEffects(e).adjustAttackChecks;l&&l(r,e,t,a.makeContext())}},Wn=(r,e,t)=>{const a=t.inspector.getCardDisplayName(r).charAt(0).toUpperCase();return a==="K"?ud(r,e):a==="Q"?Kn(r,e,t)||Zn(r,e,t):a==="R"?Kn(r,e,t):a==="B"?Zn(r,e,t):a==="N"?cd(r,e):a==="P"?dd(r,e,t):!1},ud=(r,e,t)=>{const s=r.slot.row-e.slot.row,a=r.slot.column-e.slot.column;return Math.max(Math.abs(s),Math.abs(a))==1},Kn=(r,e,t)=>{const s=r.slot.row-e.slot.row,a=r.slot.column-e.slot.column;if(s*a!=0)return!1;if(Math.abs(s)+Math.abs(a)==1)return!0;if(Math.abs(s)+Math.abs(a)==0)return!1;for(let n=1;n<Math.abs(s+a);n++){const o={row:e.slot.row+s*n/Math.abs(s+a),column:e.slot.column+a*n/Math.abs(s+a)};if(t.inspector.isSlotOccupied(o))return!1}return!0},Zn=(r,e,t)=>{const s=r.slot.row-e.slot.row,a=r.slot.column-e.slot.column;if(Math.abs(s)!=Math.abs(a)||Math.abs(s)==0)return!1;if(Math.abs(s)==1)return!0;for(let n=1;n<Math.abs(s);n++)if(t.inspector.getPermanentsAt({row:e.slot.row+s*n/Math.abs(s),column:e.slot.column+a*n/Math.abs(a)}).length>0)return!1;return!0},cd=(r,e,t)=>{const s=r.slot.row-e.slot.row,a=r.slot.column-e.slot.column;return Math.abs(s)*Math.abs(a)==2},dd=(r,e,t)=>{const s=r.slot.row-e.slot.row,a=r.slot.column-e.slot.column;return t.inspector.isRowInFrontOf(e.slot.row,r.slot.row,r.owner)&&Math.abs(s)===1&&Math.abs(a)===1},qn="worker-bot",cs="zap-worker-bot",qt="pothole",$n="box",Xn="explosives",ta="friendly-battle-bot",ds="enemy-battle-bot",ra="armored-enemy-battle-bot",sa="armored-camp",fd="eager-beever",aa=new Set([qn,cs]),md=new Set([ta,ds,ra]);function hd(r){switch(r){case"c":case"C":return"camp";case"D":return sa;case"e":case"E":return Xn;case"w":return qn;case"z":return cs;case"X":return qt;case"b":case"B":return $n;case"F":return ds;case"f":return ta;case"A":return ra;case"v":return fd;default:return""}}function pd(r){switch(r){case"w":case"z":case"c":case"f":case"e":case"b":case"v":return f.P1;default:return f.P2}}function Tt(r,e,t){const s=e-t.inspector.getBasePower(r);s!==0&&t.engine.adjustPermanentStats(r,s,0)}function Ee(r,e,t){const s=e-t.inspector.getBaseHealth(r);s!==0&&t.engine.adjustPermanentStats(r,0,s)}function mt(r,e,t,s){Tt(r,e,s),Ee(r,t,s)}const gd=`
..C..
..F..
.....
.....
.fw..
..c..
`,yd=`
..C..
...F.
...F.
..w..
fffff
..c..
`;function Ed(r){const e=r.inspector.getPermanentAtIfExists({row:4,column:2});e&&r.engine.addCounter(e,{type:I.POWER_ADJUSTMENT,val:-1,explanation:"This bot seems defective for some reason."})}const bd=`
.BC..
.....
BBBBB
..wB.
...f.
..c..
`,wd=`
..C..
FFFFF
.FFF.
.....
.fw..
..c..
`;function kd(r){const{inspector:e}=r,t=e.getPermanents({row:1});for(const a of t)Ee(a,3,r);const s=e.getPermanentsAt({row:4,column:1})[0];Ee(s,2,r)}const Jn=`
....C
....F
XX..F
..X..
w?X.f
....c
`;function Ad(r){const{engine:e,inspector:t}=r;e.spawn("chicken",{row:4,column:1},f.P1);const s=t.getPermanents({owner:f.P2,name:ds});for(const n of s)Ee(n,2,r);const a=t.getPermanents({name:"camp"});for(const n of a)Ee(n,1,r)}const Sd=Jn;function _d(r){const{engine:e,inspector:t}=r;e.spawn("chicken",{row:4,column:1},f.P1);const s=t.getPermanents({owner:f.P2,name:ds});for(const n of s)mt(n,100,100,r);const a=t.getPermanents({name:"camp"});for(const n of a)Ee(n,1,r)}const Td=`
FFCFF
FFFFF
.FFF.
.FFF.
.f...
z.c..
`,vd=`
FFFFC
FFFFF
FFFFF
.....
ffzfX
ffffc
`,Id=`
..C..
XXXXX
FFXFF
.???.
.w...
eecee
`;function Rd(r){const{inspector:e,engine:t}=r,s=e.getPermanentAtIfExists({row:0,column:2});s&&Ee(s,9,r);const a=e.getPermanentAtIfExists({row:2,column:0}),n=e.getPermanentAtIfExists({row:2,column:1}),o=e.getPermanentAtIfExists({row:2,column:3}),l=e.getPermanentAtIfExists({row:2,column:4});a&&mt(a,4,5,r),n&&mt(n,3,3,r),o&&mt(o,8,1,r),l&&mt(l,2,3,r);const i="boarry-farmer";t.spawn(i,{row:3,column:1},f.P1),t.spawn(i,{row:3,column:2},f.P1),t.spawn(i,{row:3,column:3},f.P1);const u=e.getPermanentAtIfExists({row:3,column:1}),c=e.getPermanentAtIfExists({row:3,column:2}),d=e.getPermanentAtIfExists({row:3,column:3});u&&mt(u,3,4,r),c&&mt(c,2,5,r),d&&mt(d,1,5,r);const g=e.getPermanentAtIfExists({row:5,column:2});g&&Ee(g,1,r)}const Nd=`
w...C
.E.E.
..E..
.E.E.
..E..
f...c
`;function Cd(r){const{inspector:e}=r,t=e.getPermanentAtIfExists({row:1,column:1}),s=e.getPermanentAtIfExists({row:2,column:2}),a=e.getPermanentAtIfExists({row:1,column:3}),n=e.getPermanentAtIfExists({row:3,column:1}),o=e.getPermanentAtIfExists({row:4,column:2}),l=e.getPermanentAtIfExists({row:3,column:3});t&&Ee(t,1,r),s&&Ee(s,2,r),a&&Ee(a,3,r),n&&Ee(n,4,r),o&&Ee(o,5,r),l&&Ee(l,6,r)}const Pd=`
C...C
Ff.fF
..f..
.f.f.
..f..
c.w.c
`;function Od(r){const{inspector:e}=r,t=e.getPermanentAtIfExists({row:1,column:0}),s=e.getPermanentAtIfExists({row:1,column:4}),a=e.getPermanentAtIfExists({row:1,column:1}),n=e.getPermanentAtIfExists({row:2,column:2}),o=e.getPermanentAtIfExists({row:1,column:3}),l=e.getPermanentAtIfExists({row:3,column:1}),i=e.getPermanentAtIfExists({row:4,column:2}),u=e.getPermanentAtIfExists({row:3,column:3});t&&Ee(t,11,r),s&&Ee(s,53,r),a&&Tt(a,1,r),n&&Tt(n,2,r),o&&Tt(o,3,r),l&&Tt(l,4,r),i&&Tt(i,5,r),u&&Tt(u,6,r)}const Ud=`
D...D
A...A
.....
.?w?.
..b..
eeeec
`;function Dd(r){const{inspector:e,engine:t}=r;t.spawn("switch-boar-d",{row:3,column:1},f.P1),t.spawn("switch-boar-d",{row:3,column:3},f.P1);const s=e.getPermanentAtIfExists({row:0,column:0}),a=e.getPermanentAtIfExists({row:0,column:4}),n=e.getPermanentAtIfExists({row:5,column:4}),o=e.getPermanentAtIfExists({row:5,column:0}),l=e.getPermanentAtIfExists({row:5,column:1}),i=e.getPermanentAtIfExists({row:5,column:2}),u=e.getPermanentAtIfExists({row:5,column:3});s&&Ee(s,1,r),a&&Ee(a,1,r),n&&(Ee(n,2,r),t.mergeValueCounter(n,I.BASE_GEMS,1)),o&&Ee(o,2,r),l&&Ee(l,2,r),i&&Ee(i,2,r),u&&Ee(u,2,r)}const Gd=`
.XF.C
..F.X
..z..
.v.e.
X.X.X
XfcXX
`;function xd(r){const{inspector:e,engine:t}=r,s=e.getPermanentAtIfExists({row:0,column:2}),a=e.getPermanentAtIfExists({row:1,column:2}),n=e.getPermanentAtIfExists({row:3,column:3}),o=e.getPermanentAtIfExists({row:2,column:2}),l=e.getPermanentAtIfExists({row:5,column:2});s&&Ee(s,3,r),a&&Ee(a,3,r),n&&Ee(n,1,r),o&&Ee(o,2,r),l&&Ee(l,1,r)}const Qn=[[gd],[yd,Ed],[bd],[wd,kd],[Jn,Ad],[Td],[vd],[Id,Rd],[Ud,Dd],[Nd,Cd],[Pd,Od],[Sd,_d],[Gd,xd]],na=Qn.map(Bd);function Md(r){return na[r].rows}function Ld(r){return na[r].cols}function Bd(r){const e=r[0],t=e.split(`
`).filter(o=>!!o),s=t.length,a=t[0].length,n=[];for(let o=0;o<s;o++){const l=t[o];if(l.length!=a)throw new Error(`bad sokoban layout :(
`+e);for(let i=0;i<a;i++){const u=l[i],c=hd(u);c&&n.push({name:c,player:pd(u),row:o,column:i})}}return{allItems:n,rows:s,cols:a,extraInit:r[1]}}function zd(r,e){const{engine:t}=r;for(const s of e.allItems)t.spawn(s.name,{row:s.row,column:s.column},s.player);e.extraInit&&e.extraInit(r)}const oa=Qn.map((r,e)=>e),Hd=oa.map(r=>e=>zd(e,na[r])),Fd={allowCheckpoints:!0,aiDisableGemAccounting:!0,hasAI:!0,adjustMoveChecks(r,e,t){if(aa.has(e.card.name||"")){const s=e.slot;Math.abs(t.column-s.column)+Math.abs(t.row-s.row)===1&&r.delete(D.OCCUPIED)}},adjustAttackChecks(r,e,t){t.card.name===qt&&r.add(D.GENERIC)},basesOverrides:{[f.P1]:[],[f.P2]:[]},deckOverrides:{[f.P1]:[],[f.P2]:[]},cardEffectsShared:{[sa]:{isBase:!0,isStructure:!0},[cs]:{flexCost:[C.ROCK],flexForms:[{userPrompt:"Choose an adjacent Unit to zap.",type:me.PERMANENT,validate:(r,e,t)=>{const{permanent:s,inspector:a}=t,n=s.slot,o=e.slot;Math.abs(n.row-o.row)+Math.abs(n.column-o.column)!=1&&r.add(D.ADJACENT),e.card.name===qt&&r.add(D.GENERIC)}}]}}},Me=oa.map(r=>{const e={...Fd,numRows:Md(r),numColumns:Ld(r)};return r===8&&(e.cardEffectsShared=Object.assign({},e.cardEffectsShared??{}),e.cardEffectsShared.camp={computeText:()=>"This camp is super energetic! On start of turn, gain {??}."}),e}),Yd={hasAI:!0,aiDisableGemAccounting:!0,basesOverrides:{[f.P2]:["barn"]},cardEffectsShared:{barn:{isStructure:!0,isBase:!0}},adjustSummonChecks(r,e,t,s,a){const{inspector:n}=a;n.getTurnNumber()>3&&r.add(D.GENERIC)}},jd={allowCheckpoints:!0,hasAI:!0,aiDisableGemAccounting:!0,basesOverrides:{[f.P2]:["camp"]}},Vd={allowCheckpoints:!0,hasAI:!0,aiDisableGemAccounting:!0,basesOverrides:{[f.P2]:[]}},Sr={allowCheckpoints:!0,hasAI:!0,aiDisableGemAccounting:!0,basesOverrides:{[f.P2]:[]},cardEffectsShared:{swargle:{computeText:(r,e)=>{let t="";switch(e.inspector.getCounterValSum(r,I.DOOM)){case 7:t="sergle";break;case 6:t="sirgle";break;case 5:t="firgle";break;case 4:t="forgle";break;case 3:t="thrergle";break;case 2:t="tworgle";break;case 1:t="onergle";break;case 0:t="norgle";break}return`If this Crergle targle Dargle, Dergle all Energle Unirgle.
This Crergle is Dergle autorgle in ${t} turgle.`}}},adjustAttackChecks:(r,e,t,s)=>{const{inspector:a}=s;a.getCardName(t)==="morgle"&&(a.getSharedExtraState().canAttackMorgle||r.add(D.GENERIC));const o=a.getSharedEffects(e).adjustAttackChecks;o&&o(r,e,t,a.makeContext())},modifySharedExtraState(r,e){Object.assign(e,r)}},be={cardEffectsShared:{"b-w-copier":{isStructure:!0,isBase:!0,specialCost:[]},"pasture-planner":{isStructure:!0,isBase:!0,specialCost:[]}},makeCardEffectsShared:r=>Object.fromEntries(Object.values(r).filter(({name:e,text:t})=>e.startsWith("puzzle-50")&&t==="").map(({name:e})=>[e,{computeText:(t,s)=>{const a=t.counters.filter(({type:n})=>[I.CANNOT_BE_DESTROYED,I.INVULNERABLE,I.CANNOT_MOVE].includes(n));return a.length===0?"":`${a.map(n=>{const o=n.type===I.CANNOT_MOVE?"Immobile.":Cc(n);if(o===null)throw new Error("expect the keyworded counters to have explanations");return o.replace(/[^a-zA-Z]/g,"")}).join(", ")}.`}}])),hasAI:!0,aiDisableGemAccounting:!0,numRows:7,numColumns:5,basesOverrides:{[f.P1]:["b-w-copier"],[f.P2]:["pasture-planner"]},adjustSummonChecks:(r,e,t,s,a)=>{s.row>0&&r.delete(D.TERRAIN)},adjustAttackChecks:(r,e)=>{e.owner===f.P2&&r.delete(D.PROTECTED)}},Wd={allowCheckpoints:!0,cardEffectsShared:{yurt:{isBase:!0,isStructure:!0}},hasAI:!0,aiDisableGemAccounting:!0,basesOverrides:{[f.P2]:["yurt","yurt","yurt"]},numRows:16,adjustSummonChecks:(r,e,t,s)=>{e===f.P1&&s.row<=12&&r.add(D.TERRAIN)},adjustAttackChecks:(r,e,t,s)=>{Math.abs(e.slot.row-t.slot.row)>6&&r.add(D.TOO_FAR)},adjustEffectOptChecks:(r,e,t,s)=>{const{permanent:a}=s;switch(e.type){case me.PERMANENT:{const{permanent:n}=e;Math.abs(a.slot.row-n.slot.row)>6&&r.add(D.TOO_FAR);break}case me.SLOT:{const{slot:n}=e;Math.abs(a.slot.row-n.row)>6&&r.add(D.TOO_FAR);break}}}},$t={computeText:(r,e)=>{const{inspector:t}=e,a=t.doesPermanentHaveCounterType(r,I.DOOM)?t.getCounterValSum(r,I.DOOM)+1:0;return t.getCardData(r).text.split(`
`).map(n=>n.startsWith("After")&&n.endsWith("Destroy all Enemy Units.")?`After ${a} ${a===1?"turn":"turns"}, Destroy all Enemy Units.`:n).join(`
`)}},Kd={allowCheckpoints:!0,hasAI:!0,aiDisableGemAccounting:!0,basesOverrides:{[f.P2]:["kero-dos"]},maxNumLegendaries:ni,cardEffectsShared:{"kero-dos":{isBase:!0,isStructure:!0},"dinosaur-tail":$t,"boar-tusks":$t,"dryad-horns":$t,"cow-udder":$t,"bee-wings":$t,kero:$t},modifySharedExtraState(r,e){Object.assign(e,r)},endCutsceneRedirect:`/cutscene/${Wr}/start`},vt={allowCheckpoints:!0,hasAI:!0,aiDisableGemAccounting:!0,basesOverrides:{[f.P2]:[]}},fs="apocalyptic-asteroid",ht="asteroid-fragment",_r="meaty-ore";function la(r){switch(r){case 0:return"BOOM!!!!!!!";case 1:return"This asteroid lands in 1 turn!";default:return`This asteroid lands in ${r} turns!`}}const ia={allowCheckpoints:!0,hasAI:!0,basesOverrides:{[f.P2]:[]},cardEffectsShared:{[fs]:{computeText:(r,e)=>{const t=e.inspector.getCounterValSum(r,I.DOOM);return`${la(t)}
        *If only we had known this were coming!*`}},[ht]:{computeText:(r,e)=>{const t=e.inspector.getCounterValSum(r,I.DOOM);return`${la(t)}
        *I'm not sure what you thought blasting an asteroid would do.*`}},[_r]:{computeText:(r,e)=>{const t=e.inspector.getCounterValSum(r,I.DOOM);return`${la(t)}
        Cannot Attack.
        When this Creature lands, set its Health to equal its Power. For each Enemy Unit, deal damage to this Creature equal to that Unit's Health, then destroy that Unit.
        *You’ve revealed the meaty ore within the asteroid! It looks like you’ll just have to absorb the impact though...*`}}}},ua={isBase:!0,isStructure:!0,adjustMoveChecks:r=>r.delete(D.CARD_TYPE)},Zd={allowCheckpoints:!0,aiDisableGemAccounting:!0,cardEffectsShared:{arvada:ua,burlington:ua,centennial:ua},hasAI:!0,deckOverrides:{[f.P1]:[],[f.P2]:[]},basesOverrides:{[f.P1]:[],[f.P2]:[]},numRows:4,numColumns:7},Ge=10,pe=8,eo=100,to=200;function we(r,e){return Ge*r+e}function Tr(r){return we(r.row,r.column)}function qd(r){return{row:Math.floor(r/Ge),column:r%Ge}}class vr{constructor(e){this.locations=e}static makeStateFromInspector(e){const t={};for(const s of e.getAllPermanents())t[Tr(s.slot)]=s.owner;return new vr(t)}getResultingState(e,t){const s=Tr(e),a={...this.locations,[s]:t},n=[1,Ge-1,Ge,Ge+1,-1,-Ge+1,-Ge,-Ge-1],o=[];for(const l of n){let i=s,u=[];for(;;)if(i+=l,this.locations[i])if(this.locations[i]!==t)u.push(i);else break;else{u=[];break}o.push(...u)}for(const l of o)a[l]=t;return{state:new vr(a),swaps:o.map(qd)}}isLegalMove(e){if(this.hasUnitAtSlot(e))return!1;const t=[1,Ge-1,Ge,Ge+1,-1,-Ge+1,-Ge,-Ge-1],s=Tr(e);for(const a of t){const n=s+a;if(this.hasUnitAtIndex(n))return!0}return!1}hasUnitAtSlot(e){return this.hasUnitAtIndex(Tr(e))}hasUnitAtIndex(e){return this.locations[e]!=null}}const ro={[we(1,0)]:we(0,0),[we(0,1)]:we(0,0),[we(1,1)]:we(0,0),[we(1,pe-1)]:we(0,pe-1),[we(0,pe-2)]:we(0,pe-1),[we(1,pe-2)]:we(0,pe-1),[we(pe-1,1)]:we(pe-1,0),[we(pe-2,0)]:we(pe-1,0),[we(pe-2,1)]:we(pe-1,0),[we(pe-1,pe-1)]:we(pe-1,pe-1),[we(pe-1,pe-2)]:we(pe-1,pe-1),[we(pe-2,pe-2)]:we(pe-1,pe-1)};function $d(r,e){const{row:t,column:s}=r;if((t===0||t===pe-1)&&(s===0||s===pe-1))return 2;const a=Tr(r);return a in ro&&!e.hasUnitAtIndex(ro[a])?-2:t===0||t===pe-1||s===0||s===pe-1?.5:0}const so={[R.CREATED]:r=>{const{permanent:e,ctx:t}=r,{engine:s,inspector:a}=t;s.addCounter(e,{type:I.CANNOT_ATTACK}),s.addCounter(e,{type:I.CANNOT_CREATE}),s.addCounter(e,{type:I.CANNOT_MOVE});const n=vr.makeStateFromInspector(a),{swaps:o}=n.getResultingState(e.slot,e.owner),l=e.owner===f.P1?"light-piece":"dark-piece";for(const i of o){const u=a.getPermanentAtIfExists(i);u&&(s.getBackdoorEngine().transformPermanent(u,l),s.changePermanentOwner(u))}}},Xd={disableNoBasesLossCondition:!0,extraLoseChecks:(r,e)=>{if(e.inspector.getPermanents({owner:r}).length===0)return!0;const t=e.engine.getExtraState();return r===f.P1?t.playerDamage>=eo:t.aiDamage>=to},cardEffects:{"light-piece":{handlers:so},"dark-piece":{handlers:so}},beforeNewGame:r=>{const{engine:e}=r;e.spawn("light-piece",{row:3,column:3},f.P1),e.spawn("light-piece",{row:4,column:4},f.P1),e.spawn("dark-piece",{row:3,column:4},f.P2),e.spawn("dark-piece",{row:4,column:3},f.P2)},aiTurn:r=>{const{ai:e,inspector:t}=r;if(t.getTurnNumber()<2){e.speak("Let’s play my game! On every turn, you get to place a piece, then all your units do an attack down their column. If they don’t have anyone to hit, they hit the opposing player. I get to go first, so hit End Turn and let’s get started!");return}const s=t.getNumColumns(),a=t.getNumRows(),n=vr.makeStateFromInspector(t);let o=-1,l=null;for(let i=0;i<a;i++)for(let u=0;u<s;u++){const c={row:i,column:u};if(!n.isLegalMove(c))continue;const d=n.getResultingState(c,f.P2).swaps.length+$d(c,n);d>o&&(o=d,l=c)}l!=null&&e.trySpawn("dark-piece",l)},afterTurnEnd:(r,e)=>{const{ai:t,inspector:s,engine:a}=e;if(s.getTurnNumber()<=2)return;let n=0;const o=a.getExtraState();for(const i of s.getPermanentsOf(r)){const u=s.getPermanents({column:i.slot.column,rowInFrontOf:{row:i.slot.row,perspective:r},ownedByOpponentOf:r,sort:[{type:"frontToBack",perspective:s.getOpponentOf(r)}]});u.length===0?(n++,r===f.P1?o.aiDamage+=1:r===f.P2&&(o.playerDamage+=1)):a.damage(i,u[0],1)}const l=r===f.P1?"You":"I";t.speak(`${l} dealt ${n} damage this turn.
My health: ${to-o.aiDamage}. Your health: ${eo-o.playerDamage}.`),r===f.P2&&s.getHandForUI(f.P1).length===0&&a.addCardToHand(f.P1,{name:"light-piece"})},afterInitEngine:r=>{r.engine.initExtraState({aiDamage:0,playerDamage:0})}},Jd={allowCheckpoints:!0,hasAI:!0,numRows:pe,numColumns:pe,basesOverrides:{[f.P1]:[],[f.P2]:[]},deckOverrides:{[f.P1]:[],[f.P2]:[]},cardEffectsShared:{"light-piece":{adjustSummonChecks:ao},"dark-piece":{adjustSummonChecks:ao}}};function ao(r,e,t,s,a){r.delete(D.TERRAIN);const{inspector:n}=a;for(const o of n.getAllPermanents())if(Qd(s,o.slot))return;r.add(D.GENERIC)}function Qd(r,e){return Math.abs(r.column-e.column)<=1&&Math.abs(r.row-e.row)<=1&&!ef(r,e)}function ef(r,e){return r.column===e.column&&r.row===e.row}const Ir={allowCheckpoints:!0,hasAI:!0,aiDisableGemAccounting:!0,basesOverrides:{[f.P2]:[]}},ms={allowCheckpoints:!0,hasAI:!0,aiDisableGemAccounting:!0,basesOverrides:{[f.P2]:[]}},Rr="pepper-rich-farm",hs="train-boar-ding-platform",ps="angry-boarry-farmer",tf={allowCheckpoints:!0,hasAI:!0,aiDisableGemAccounting:!0,basesOverrides:{[f.P2]:[Rr,hs,Rr]},cardEffectsShared:{[Rr]:{isStructure:!0,isBase:!0},[hs]:{isStructure:!0,isBase:!0},[ps]:{adjustAttackChecks:(r,e,t,s)=>{e.slot.column!==t.slot.column&&s.inspector.getTerrainOf(t.slot)!==e.owner&&r.add(D.GENERIC)},adjustMoveChecks:(r,e,t,s)=>{s.inspector.getPermanents({owner:e.owner,name:hs})&&r.delete(D.ADJACENT)}}}},no={hasAI:!0,deckOverrides:{[f.P1]:[],[f.P2]:[]}},rf={maxNumLegendaries:0},Nr=r=>({...no,endCutsceneRedirect:r}),sf={[ea]:Jc,pvp:rf,robot:Qc,tutorial1:ed,tutorial2:td,tutorial3:rd,tutorial4:sd,tutorial5:ad,tutorial6:nd,gnutmeg_tree:od,mister_penny:ld,blancmange:id,beebay_fulfillment_center_1:Me[0],beebay_fulfillment_center_2:Me[1],beebay_fulfillment_center_3:Me[2],beebay_fulfillment_center_4:Me[3],beebay_fulfillment_center_5:Me[4],beebay_fulfillment_center_6:Me[5],beebay_fulfillment_center_7:Me[6],beebay_fulfillment_center_8:Me[7],beebay_fulfillment_center_9:Me[8],beebay_fulfillment_center_10:Me[9],beebay_fulfillment_center_11:Me[10],beebay_fulfillment_center_12:Me[11],beebay_fulfillment_center_13:Me[12],miss_yu:Yd,bb_b:jd,slime:Vd,dargle_1:Sr,dargle_2:Sr,dargle_3:Sr,dargle_4:Sr,dargle_5:Sr,moonick_1:be,moonick_2:be,moonick_3:be,moonick_4:be,moonick_5:be,moonick_6:be,moonick_7:be,moonick_8:be,moonick_9:be,moonick_10:be,moonick_11:be,moonick_12:be,moonick_13:be,moonick_14:be,moonick_15:be,moonick_16:be,moonick_17:be,moonick_18:be,moonick_19:be,moonick_20:be,moonick_21:be,moonick_22:be,moonick_23:be,moonick_24:be,moonick_final:be,spelling_bee:Kc,the_swarm:Wd,kero:Kd,jabberwock_1:vt,jabberwock_2:vt,jabberwock_3:vt,jabberwock_4:vt,jabberwock_5:vt,jabberwock_6:vt,jabberwock_7:vt,asteroid_1:ia,asteroid_2:ia,asteroid_3:ia,coloring:Zd,othello:Jd,spirit_of_the_vines_1:Ir,spirit_of_the_vines_2:Ir,spirit_of_the_vines_3:Ir,spirit_of_the_vines_4:Ir,spirit_of_the_vines_5:Ir,infinitely_many_hogs_and_logs_1:ms,infinitely_many_hogs_and_logs_2:ms,infinitely_many_hogs_and_logs_3:ms,infinitely_many_hogs_and_logs_4:ms,angry_boarry_farmer:tf,test_battle:no,treasure_chest:Nr(`/battle/${Jl}/start`),first_answer:Nr("/prep/mastery_tree/start"),first_legendary:Nr("/"),entering_the_water:Nr(`/prep/${Ql}/start`),the_end:Nr("/victory/start")},af={counterData:Zc,cardEffects:Vn},gs={},nf={aiTurn:r=>{const{inspector:e,engine:t,ai:s}=r;s.trySpawn("robot",Math.floor(Math.random()*3),Math.floor(Math.random()*5)),e.getPermanentsOf(f.P2).forEach(a=>{if(!a.ready)return;const n=a.slot.column;for(let o=a.slot.row+1;o<6;o++){const l=e.getPermanentAtIfExists({row:o,column:n});!l||l.owner!==f.P1||s.tryActivateAbility(a,ve.SPECIAL,[{type:me.PERMANENT,permanentId:l.id}])}})}},of={disableNoBasesLossCondition:!0,beforeNewGame:r=>{const{inspector:e,engine:t,ai:s}=r;t.spawn("new-boarn",0,0,f.P2);const a=e.getPermanents({name:"new-boarn"})[0];t.damageUnattributed(a,3),t.addCounter(a,{type:I.CANNOT_MOVE}),t.addCounter(a,{type:I.CANNOT_CREATE}),s.setKeyframe("tutorial1-start-1")},aiTurn:r=>{const{inspector:e,engine:t,ai:s}=r;if(e.getTurnNumber()===0)return;const a=e.getPermanentsOf(f.P2);if(a.length!==1)throw new Error("expect one enemy unit in play");switch(s.tryAttackFirst(a[0]),e.getTurnNumber()){case 2:{s.setKeyframe("tutorial1-start-2");break}}},beforeStep:(r,e)=>{const{inspector:t,engine:s,ai:a}=e;if(r.type===H.ADVANCE_KEYFRAME&&r.keyframeId==="tutorial1-start-1"){s.spawn("yoshisaur-munchakoopas",1,0,f.P1);const n=t.getPermanents({name:"yoshisaur-munchakoopas"})[0];s.addCounter(n,{type:I.CANNOT_MOVE}),s.addCounter(n,{type:I.CANNOT_CREATE})}return r.type===H.END_TURN&&t.getTurnNumber()===1&&s.clearKeyframe(),r.type===H.ADVANCE_KEYFRAME&&r.keyframeId==="tutorial1-before-give-food"&&s.addGems(f.P1,[C.GREEN]),r.type===H.ATTACK&&t.getTurnNumber()===3&&s.clearKeyframe(),!0},afterStep:(r,e)=>{const{inspector:t,engine:s,ai:a}=e;r.type===H.ATTACK&&t.getTurnNumber()===3&&a.setKeyframe("tutorial1-start-3")},afterGameEnd:(r,e,t)=>{const{engine:s}=t;s.clearKeyframe()}},lf={disableP2NoBasesLossCondition:!0,beforeNewGame:r=>{const{inspector:e,engine:t,ai:s}=r;s.setKeyframe("tutorial2-start-1")},aiTurn:r=>{const{inspector:e,engine:t,ai:s}=r;if(e.getTurnNumber()===0)return;const a=e.getPermanentsOf(f.P2);for(const n of a)s.tryAttackFirst(n);switch(e.getTurnNumber()){case 2:{s.setKeyframe("tutorial2-start-2");break}case 4:{s.trySpawn("hog",1,0),s.trySpawn("hamlet",2,0);const n=e.getPermanents({name:"hog"})[0],o=e.getPermanents({name:"hamlet"})[0];t.addCounter(n,{type:I.CANNOT_MOVE}),t.addCounter(n,{type:I.CANNOT_CREATE}),t.addCounter(o,{type:I.CANNOT_MOVE}),t.addCounter(o,{type:I.CANNOT_CREATE}),s.setKeyframe("tutorial2-start-3");break}}},beforeStep:(r,e)=>{const{inspector:t,engine:s,ai:a}=e;if(r.type===H.ADVANCE_KEYFRAME&&r.keyframeId==="tutorial2-before-summon"){s.clearKeyframe(),s.spawn("new-boarn",4,0,f.P1);const n=t.getPermanents({name:"new-boarn"})[0];s.addCounter(n,{type:I.CANNOT_MOVE}),s.addCounter(n,{type:I.CANNOT_CREATE})}return!0},afterStep:(r,e)=>{const{inspector:t,engine:s,ai:a}=e,{keyframe:n}=t.gameState;r.type===H.ATTACK&&t.getTurnNumber()===3&&a.setKeyframe("tutorial2-end-turn-2"),t.getBases(f.P2).length===0&&(n===void 0||n.id==="tutorial2-free-play")&&a.setKeyframe("tutorial2-start-4")},afterGameEnd:(r,e,t)=>{const{engine:s}=t;s.clearKeyframe()}},uf={disableP1NoBasesLossCondition:!0,afterInitEngine:r=>{r.engine.initExtraState({phase:1,wrongMove:!1,summonedAll:!1})},beforeNewGame:r=>{const{engine:e,ai:t}=r;e.spawn("yoshisaur-munchakoopas",3,3,f.P1),e.spawn("beeowulf",1,1,f.P2),e.spawn("beeowulf",1,3,f.P2),t.setKeyframe("tutorial3-start-1")},afterStep:(r,e)=>{const{inspector:t,engine:s,ai:a}=e,n=t.getTurnNumber();t.gameState;const o=s.getExtraState();if(r.type===H.ADVANCE_KEYFRAME&&r.keyframeId==="tutorial3-lose-1"&&o.wrongMove){a.setKeyframe("tutorial3-lose-1-wrong-move");return}if(r.type===H.MOVE&&n===1){ns(r.slot,{row:3,column:2})?a.setKeyframe("tutorial3-after-move"):o.wrongMove=!0;return}if(r.type===H.ADVANCE_KEYFRAME&&r.keyframeId==="tutorial3-before-give-cards"&&(s.addCardToHand(f.P1,{name:"new-boarn"}),s.addCardToHand(f.P1,{name:"hog"}),s.addCardToHand(f.P1,{name:"hamlet"})),o.phase===3&&t.getPermanents({name:"new-boarn"}).length>0){a.setKeyframe("tutorial3-after-summon-new-boarn"),o.phase=4;return}},aiTurn:r=>{const{inspector:e,engine:t,ai:s}=r,a=e.getTurnNumber(),n=t.getExtraState();if(e.getTurnNumber()==0){const i=e.getPermanentAtIfExists({row:5,column:2});if(!i)throw new Error("expect camp to exist");t.adjustPermanentStats(i,0,-3);return}const o=e.getPermanents({owner:f.P2,type:se.CREATURE});for(const i of o){if(e.getBases(f.P1).length===0)break;s.tryAttackFirst(i)}if(a===2){e.getBases(f.P1).length===0?s.setKeyframe("tutorial3-lose-1"):s.setKeyframe("tutorial3-start-2");return}if(n.phase===1&&o.length===0){s.setKeyframe("tutorial3-start-3"),n.stampedeTurnStart=a+3*2,n.phase=2;return}if(a===n.stampedeTurnStart){t.spawn("chocolate-calf",1,0,f.P2),t.spawn("chocolate-calf",1,2,f.P2),t.spawn("chocolate-calf",1,4,f.P2),n.phase===4?(s.setKeyframe("tutorial3-stampede"),n.summonedAll=!0):s.setKeyframe("tutorial3-stampede-fail"),n.phase=5;return}const l=e.getPermanents({owner:f.P1,type:se.CREATURE});if(n.phase===2&&l.length===3){s.setKeyframe("tutorial3-start-5"),n.phase=3;return}},afterGameEnd:(r,e,t)=>{const{engine:s,ai:a}=t,n=s.getExtraState();r===f.P2&&n.summonedAll&&a.setKeyframe("tutorial3-lose-2")},extraLoseChecks:(r,e)=>{const{inspector:t}=e,{keyframe:s}=t.gameState,a=t.getTurnNumber();return r===f.P1?t.getBases(r).length===0&&(a>3||s!==void 0&&["tutorial3-lose-1-wrong-move","tutorial3-lose-1-other"].includes(s.id)):!1}},cf={aiTurn:r=>{const{inspector:e,engine:t,ai:s}=r,a=e.getTurnNumber(),n=e.getPermanents({owner:f.P1,type:se.CREATURE}),o=e.getPermanents({owner:f.P2,type:se.CREATURE});switch(a){case 0:{const l=e.getBases(f.P2)[0];t.adjustPermanentStats(l,0,-2),s.setKeyframe("tutorial4-start-1");return}case 2:{t.spawn("pbee---j",1,0,f.P2),t.spawn("pbee---j",1,1,f.P2),t.spawn("two-bees",2,2,f.P2),t.spawn("pbee---j",1,3,f.P2),t.spawn("pbee---j",1,4,f.P2),n.length===2?s.setKeyframe("tutorial4-start-2"):s.setKeyframe("tutorial4-start-2-not-all-summon");return}}o.forEach(l=>{s.tryAttackFirst(l,{sort:["creaturesFirst","health",{type:"euclideanDistance",slot:l.slot}]})})}},df={beforeNewGame:r=>{const{engine:e,ai:t}=r;e.spawn("roe-doe-dendron",1,0,f.P2),e.spawn("flora-the-explora",2,2,f.P2),e.spawn("nepeta-legion",1,4,f.P2),t.setKeyframe("tutorial5-start")},aiTurn:r=>{const{inspector:e,engine:t,ai:s}=r,a=e.getTurnNumber()/2;if(a==0)return;const n=["flora-the-explora","roe-doe-dendron","nepeta-legion"][(a-1)%3],o=[1,2,0],l=[1,3,2,0,4];let i=!1;for(let c=0;c<3;c++){for(let d=0;d<2;d++)if(s.trySpawn(n,o[c],l[d])){i=!0;break}if(i)break}if(!i)for(let c=0;c<3;c++){for(let d=2;d<5;d++)if(s.trySpawn(n,o[c],l[d])){i=!0;break}if(i)break}e.getPermanents({owner:f.P2,type:se.CREATURE}).forEach(c=>{s.tryAttackFirst(c)})}},ff={disableP2NoBasesLossCondition:!0,beforeNewGame:r=>{},afterStep:(r,e)=>{const{inspector:t,engine:s,ai:a}=e,{keyframe:n}=t.gameState;t.getBases(f.P2).length===0&&n!==void 0&&n.id==="tutorial6-start-2"&&a.setKeyframe("tutorial6-end")},aiTurn:r=>{const{inspector:e,engine:t,ai:s}=r;switch(e.getTurnNumber()){case 0:{const o=e.getPermanents({name:"camp",owner:f.P2});for(const l of o)t.adjustPermanentStats(l,0,-2);e.gameState[f.P1].hand.length<=0?s.setKeyframe("tutorial6-start-no-deck"):s.setKeyframe("tutorial6-start-1");return}case 2:{s.trySpawn("o",1,0),s.trySpawn("payne",1,1),s.trySpawn("vanilla-calf",1,3),s.trySpawn("re",1,4),s.trySpawn("beethoven",2,0),s.trySpawn("chicken",2,1),s.trySpawn("petroleum-jelly",2,3),s.trySpawn("log",2,4),s.setKeyframe("tutorial6-start-2");break}}e.getPermanents({owner:f.P2,type:se.CREATURE}).forEach(o=>{s.tryAttackFirst(o)})},afterGameEnd:(r,e,t)=>{const{engine:s}=t;e[f.P1]!==void 0&&s.clearKeyframe()}},Je=(r,e)=>e.getReflectedSlot(r),st=(r,e)=>e.getPermanentsAt(Je(r.slot,e)).find(({owner:t})=>t!==r.owner),mf=(r,e,t)=>t.getCardName(r)===t.getCardName(e),hf=(r,e)=>{if(r.type===me.SLOT){const{slot:t}=r;return{type:me.SLOT,slot:Je(t,e)}}if(r.type===me.PERMANENT){const{permanentId:t}=r,s=e.getPermanent(t),a=st(s,e);if(a)return{type:me.PERMANENT,permanentId:a.id}}return r},pf=(r,e)=>{if(r.type===me.SLOT){const{slot:t}=r;return{type:me.SLOT,slot:Je(t,e)}}if(r.type===me.PERMANENT){const{permanent:t}=r,s=st(t,e);if(s)return{type:me.PERMANENT,permanentId:s.id}}return r},oo=(r,e,t)=>{const{inspector:s}=t,a=s.getPower(r),n=s.getHealth(e),o=n<=0;return a<=0||s.doesPermanentHaveCounterType(e,I.INVULNERABLE)||s.doesPermanentHaveCounterType(e,I.DIVINE_SHIELD)||s.doesPermanentHaveCounterType(e,I.CANNOT_BE_DESTROYED)?o:a>=n},gf=new Set(["nice-cow","lady-jane","murray","rude-cow","giraffatitan","realistic-rex","touch-grass","roe-doe-dendron","switch-boar-d","oklahoma-tusks","quail-aboard-fiery-steeds","beeowulf","nightshade"]),yf={disableP2NoBasesLossCondition:!0,extraLoseChecks:(r,e)=>{const{inspector:t}=e,s=a=>t.getBases(a).length>0;return r===f.P2?!s(r)&&s(t.getOpponentOf(r)):!1},afterInitEngine:r=>{r.engine.initExtraState({didCopyBeforeStep:!1})},beforeNewGame:r=>{const{inspector:e,engine:t}=r,s=e.getDefaultBases(f.P1),a=e.getBasePositions(f.P2,s.length);for(let n=0;n<s.length;n++){const o={row:e.getPlayerRowIndex(0,f.P2),column:a[n]};t.spawn(s[n],o,f.P2)}},beforeStep:(r,e)=>{const{inspector:t,engine:s,ai:a}=e,n=s.getExtraState(),o=u=>s.getBackdoorEngine().aiTryStep(u),l=new is(t,f.P2,he.GOD);switch(r.type){case H.SUMMON:{const{player:u,slot:c,handCardId:d,cardName:g}=r;if(u!==f.P1)break;const y=(()=>{if(d!==void 0){const A=t.getCardInHandIfExists(u,d);return A?t.getCardName(A):null}return null})()??g;y&&o(l.spawn(y,Je(c,t)));break}case H.MOVE:{const{permanentId:u,slot:c}=r,d=t.getPermanent(u);if(d.owner!==f.P1)break;const g=st(d,t),w=Je(c,t);g&&mf(d,g,t)&&o(l.move(g,w));break}case H.ATTACK:{const{attackerId:u,defenderId:c}=r,d=t.getPermanent(u),g=t.getPermanent(c);if(d.owner!==f.P1||oo(d,g,e))break;const w=st(d,t),y=st(g,t);let A=!1;w&&y&&(A=o(l.attack(w,y))),A&&(n.didCopyBeforeStep=!0);break}case H.ACTIVATE_ABILITY:{const{permanentId:u,abilityType:c,effectOpts:d}=r,g=t.getPermanent(u);if(g.owner!==f.P1)break;const w=s.getBackdoorEngine().getEffects(g);if(c===ve.FLEX?w.onRepeatable:w.onSpecial,gf.has(g.card.name||"")){const O=d[0];if(!O||O.type!==me.PERMANENT)break;const k=t.getPermanent(O.permanentId);if(oo(g,k,e))break}const y=st(g,t),A=d.map(O=>hf(O,t));let S=!1;y&&(S=o(l.activateAbility(y,c,A))),S&&(n.didCopyBeforeStep=!0)}}return s.getBackdoorEngine().resolve(r,he.GOD)!==null},afterStep:(r,e)=>{const{inspector:t,engine:s,ai:a}=e,n=s.getExtraState(),o=c=>s.getBackdoorEngine().aiTryStep(c),l=new is(t,f.P2,he.GOD),i=(c,d,g)=>{if(!t.isSlotInBounds(d)||t.isSlotOccupied(d))return!1;const w=c.card.name,y=s.getBackdoorEngine().cardToPermanent({name:w},g,d);s.getBackdoorController().createPermanent(y);for(const A of c.counters)s.addCounter(y,A);return!0},u=()=>{a.speak("...copy failed... 🥀")};switch(r.type){case H.SUMMON:break;case H.ATTACK:{if(n.didCopyBeforeStep){n.didCopyBeforeStep=!1;break}const{attacker:c,defender:d}=r;if(c.owner!==f.P1)break;const g=st(c,t),w=st(d,t);let y=!1;if(g&&w&&o(l.attack(g,w))&&(y=!0),y)break;const A=d.damage>=t.getMaxHealth(d),S=ns(d.slot,Je(c.slot,t));if(A&&S&&w&&i(c,Je(c.slot,t),f.P2)){const O=t.getPermanentAtIfExists(Je(c.slot,t));O&&(s.ready(O),o(l.attack(O,w))&&(y=!0),s.destroy(c,O))}y||u();break}case H.MOVE:break;case H.ACTIVATE_ABILITY:{if(n.didCopyBeforeStep){n.didCopyBeforeStep=!1;break}const{permanent:c,abilityType:d,effectOptsResolved:g}=r;if(c.owner!==f.P1)break;const w=st(c,t),y=g.map(S=>pf(S,t));let A=!1;if(w&&o(l.activateAbility(w,d,y))&&(A=!0),A)break;if(i(c,Je(c.slot,t),f.P2)){const S=t.getPermanentAtIfExists(Je(c.slot,t));S&&(s.ready(S),o(l.activateAbility(S,d,y))&&(A=!0),s.destroy(c,S))}A||u();break}}},aiTurn:r=>{const{inspector:e,ai:t}=r;e.getTurnNumber()===0&&t.speak(`...watchful gnomes... 🌹 ...mimic foe...
...leave no openings... 🌺 ...none shall pass...`)},afterTurnEnd:(r,e)=>{const{inspector:t,engine:s,ai:a}=e;if(r===f.P2){const n=t.getPermanents({owner:f.P2});for(const o of n)s.ready(o)}}},Ie={CAD:{[C.PURPLE]:10,[C.GREEN]:20,[C.RED]:50},EUR:{[C.WHITEBLACK]:5,[C.RED]:10,[C.GREEN]:100,[C.YELLOW]:200,[C.PURPLE]:500},AUD:{[C.PURPLE]:5,[C.RED]:20,[C.YELLOW]:50,[C.GREEN]:100},KRW:{[C.RED]:5e3,[C.GREEN]:1e4,[C.YELLOW]:5e4},CHF:{[C.YELLOW]:10,[C.RED]:20,[C.GREEN]:50,[C.PURPLE]:1e3},SEK:{[C.PURPLE]:20,[C.GREEN]:200,[C.RED]:500},THB:{[C.GREEN]:20,[C.RED]:100,[C.PURPLE]:500},BRL:{[C.PURPLE]:5,[C.RED]:10,[C.YELLOW]:20,[C.WHITEBLACK]:200}},ca={goose:Ie.CAD,poutine:Ie.CAD,wisent:Ie.EUR,"twelve-stars":Ie.EUR,"consort-on-a-bull-deity":Ie.EUR,"spicy-fermented-cabbage":Ie.KRW,hallyu:Ie.KRW,"wombat-mob":Ie.AUD,"jar-of-vegemite":Ie.AUD,didgeridoo:Ie.AUD,"toblerone-dipped-in-fondue":Ie.CHF,"plus-sign":Ie.CHF,"army-knife":Ie.CHF,"pungent-canned-herring":Ie.SEK,"dala-horse":Ie.SEK,"green-curry":Ie.THB,"red-curry":Ie.THB,"ka-api-ara":Ie.BRL,"toasted-cassava":Ie.BRL,"order-and-progress":Ie.BRL},Ef={adjustDamageReceived:(r,e,t,s)=>{const{inspector:a,engine:n}=s;if(!t)return e;const o=a.getCardName(r),l=ca[o];if(!l)return e;const i=a.getCardColor(r),u=a.getCardColor(t);return!u||!i||i===u?0:l[u]?l[u]:0},afterStep:(r,e)=>{const{engine:t,inspector:s}=e;if(s.getPermanents({owner:f.P2,isBase:!1}).length===0){const n=s.getPermanents({owner:f.P2,isBase:!0});for(const o of n)t.removeCounterType(o,I.INVULNERABLE)}},aiTurn:r=>{const{inspector:e,engine:t,ai:s}=r;e.getTurnNumber()===0&&s.speak("How did you GET in here? I swear this boar treasury is OFF-LIMITS to VISITORS, or my name isn’t MISTER PENNY!");let a=e.getPermanents({owner:f.P2,name:"mint"}),n=1;e.getTurnNumber()/2===5&&(a.forEach(u=>{t.getBackdoorEngine().transformPermanent(u,"mint--overdrive-")}),s.speak("ENTERING MINTY OVERDRIVE!!!")),e.getTurnNumber()/2>=5&&(n=2,a=e.getPermanents({owner:f.P2,name:"mint--overdrive-"}));const o=a.sort(()=>Math.random()-.5);let l=0;for(const u of o){const{row:c,column:d}=u.slot,g=Object.keys(ca)[Math.floor(Math.random()*Object.keys(ca).length)];if(s.trySpawn(g,c+1,d)&&l++,l>=n)break}if(l>0)for(const u of a)t.removeCounterType(u,I.INVULNERABLE),t.addCounter(u,{type:I.INVULNERABLE});const i=e.getPermanents({owner:f.P2,type:se.CREATURE});for(const u of i){let c=!1;u.slot.row<4&&(c=s.tryMoveRel(u,1,0)),c||s.tryAttackFirst(u)}}},lo="vanilla-calf",ys="bell-flower",Cr="petroleum-jelly",Pr="quail-aboard-fiery-steeds",Or="realistic-rex",bf={[Cr]:(r,e)=>{const{inspector:t,engine:s,ai:a}=e;let n=r.slot,o=!1;for(const l of t.getPermanentsOf(f.P1))if(a.tryAttack(r,l)){o=!0;break}o||a.tryMoveRel(r,1,0),n=r.slot,n.row==5&&(s.despawn(r),s.spawn(Pr,n,f.P2))},[lo]:(r,e)=>{const{inspector:t,ai:s}=e;s.tryActivateAbility(r,ve.FLEX);for(const a of t.getPermanentsOf(f.P1))if(s.tryAttack(r,a))return!0;if(s.tryMove(r,r.slot.row,[1,2,2,2,3][r.slot.column])||s.tryMoveRel(r,1,0))return!0},[ys]:(r,e)=>{const{inspector:t,ai:s}=e;s.tryActivateAbility(r,ve.FLEX);for(const a of t.getPermanentsOf(f.P1))if(s.tryAttack(r,a))return!0;if(s.tryMove(r,r.slot.row,[0,0,1,4,4][r.slot.column])||s.tryMoveRel(r,1,0))return!0},[Or]:(r,e)=>{const{inspector:t,ai:s}=e;for(const a of t.getPermanentsOf(f.P1))if(s.tryAttack(r,a))return!0;if(s.tryMove(r,r.slot.row,3)||s.tryMoveRel(r,-1,0))return!0},[Pr]:(r,e)=>{const{inspector:t,ai:s}=e;for(const a of t.getPermanentsOf(f.P1))if(s.tryAttack(r,a))return!0;if(s.tryMove(r,r.slot.row,3)||s.tryMoveRel(r,-1,0))return!0}},wf={counterData:{[I.BODY_SLAM]:{handlers:{[R.AFTER_DESTROY_UNIT]:r=>{const{permanent:e,defender:t,ctx:s}=r,{engine:a}=s;a.move(e,t.slot)}}}},aiTurn:r=>{const{inspector:e,engine:t,ai:s}=r,a=e.getTurnNumber(),n=e.getPermanentsOf(f.P2);if(a==0){for(let o=0;o<5;o++)s.trySpawn(Cr,1,o);s.speak("Behold my confounding moo-gicks! Your Units won’t behave the same as normal here!");return}for(const o of n){const l=bf[e.getCardName(o)];l&&l(o,r)}switch(a){case 4:for(let o=1;o<4;o++)s.trySpawn(lo,1,o);break;case 8:for(const o of[0,4])for(const l of[0,1])s.trySpawn(ys,l,o);break;case 12:for(let o=0;o<5;o++)s.trySpawn(Cr,1,o);break;case 14:for(let o=0;o<5&&!s.trySpawn(Or,0,o);o++);for(let o=4;o>=0&&!s.trySpawn(Or,0,o);o--);break;default:if(a>=18&&a%6==0)for(let o=0;o<5;o++)s.trySpawn(Cr,1,o),s.trySpawn([Or,ys,Pr,ys,Or][o],0,o)}return!0},afterSummon:(r,e)=>{const{inspector:t,engine:s}=e;t.getCardName(r).toLowerCase().match(/^[kqrbnp].*/)&&(s.adjustPermanentStats(r,1,0),s.addCounter(r,{type:I.BODY_SLAM}))},afterInitEngine:r=>{r.engine.initExtraState({lastKnownKeepSlot:{row:0,column:2}})},afterStep:(r,e)=>{const{inspector:t,engine:s}=e,a=t.getPermanentsOf(f.P2).filter(o=>t.getSharedEffects(o).isBase??!1)[0];if(!a)return;const n=s.getExtraState();n.lastKnownKeepSlot=a.slot,r.type==H.MOVE&&r.slot.row==0&&r.permanent.owner==f.P1&&(t.getCardName(r.permanent).toLowerCase().match(/^p.*/)??!1)?(s.despawn(r.permanent),s.spawn(Pr,r.slot,f.P1)):r.type==H.ATTACK&&r.attacker.owner==f.P1&&r.attacker.slot.row==0&&(t.getCardName(r.attacker).toLowerCase().match(/^p.*/)??!1)&&(s.despawn(r.attacker),s.spawn(Pr,r.attacker.slot,f.P1))},extraSolveChecks:(r,e,t)=>{const{inspector:s,engine:a}=t,o=a.getExtraState().lastKnownKeepSlot;for(const l of[-1,0,1])for(const i of[-1,0,1]){if(l===0&&i===0)continue;const u={row:o.row+l,column:o.column+i};if(!s.isSlotInBounds(u))continue;const c=s.getPermanentsAt(u);if(c.length>0&&c[0].owner==f.P2)continue;const d=a.getBackdoorEngine().cardToPermanent({name:Cr},f.P2,u);let g=!1;for(const w of s.getPermanentsOf(f.P1))if(Wn(w,d,t)){g=!0;break}if(!g)return!1}return!0},afterGameEnd:(r,e,t)=>{const{engine:s,ai:a}=t;!(e[f.P1]??!1)&&r==f.P1?a.speak("As you raised the uwuand, Blancmange slid away! It seems you failed to befriend it. How puzzling!",{hideBattler:!0,speaker:kr.NARRATOR}):s.clearKeyframe()}},kf=100;function da(r){return kf*r.row+r.column}const Af=new Set([qt]);var fa=(r=>(r[r.MOVE=0]="MOVE",r[r.APPLY_POWERUP=1]="APPLY_POWERUP",r))(fa||{});class ma{constructor(e,t){this.actors=e,this.inspector=t}static makeStateFromInspector(e){var s;const t={};for(const a of e.getAllPermanents())t[s=da(a.slot)]||(t[s]=[]),t[da(a.slot)].push(a);return new ma(t,e)}get rows(){return this.inspector.getNumRows()}get cols(){return this.inspector.getNumColumns()}getPushResult(e,t,s,a){if(Math.abs(s)+Math.abs(a)!==1){const d=this.getResultingSlot(t.slot,s,a);return d==null||this.slotHasWall(d)?[]:this.getActorAt(d)?[]:[{type:0,permanent:t,rowDiff:s,colDiff:a}]}const n=t.slot;let o=n;const l=[n];let i=0,u=!1;for(;;){const d=this.getResultingSlot(o,s,a);if(d==null||this.slotHasWall(d))break;l.push(d);const g=this.getActorAt(d);if(!g){u=!0;break}const w=i+this.getWeightOf(g);if(w>e)break;i=w,o=d}if(!u)return[];const c=[];for(let d=0;d<l.length&&d!=l.length-1;d++){const g=l[d],w=this.getActorAt(g);if(!w)throw new Error("error in sokoban logic :(");c.push({type:0,permanent:w,rowDiff:s,colDiff:a})}return c.reverse(),c}getWeightOf(e){return e.card.name==="camp"?99:1}getActorsAt(e){return this.actors[da(e)]||[]}getActorAt(e){return this.getActorsAt(e).find(t=>!0)}slotHasWall(e){return!!this.getActorsAt(e).find(t=>Af.has(t.card.name||""))}isSlotInBounds(e){return 0<=e.row&&e.row<this.rows&&0<=e.column&&e.column<this.cols}getResultingSlot(e,t,s){const a={row:e.row+t,column:e.column+s};return this.isSlotInBounds(a)?a:null}}const Ur={[qt]:{handlers:{[R.CREATED]:vf}},[ta]:{handlers:{[R.CREATED]:Tf}},[Xn]:{handlers:{[R.CREATED]:r=>{r.ctx.engine.addCounter(r.permanent,{type:I.CANNOT_MOVE}),r.ctx.engine.addCounter(r.permanent,{type:I.CANNOT_ATTACK}),r.ctx.engine.addCounter(r.permanent,{type:I.CANNOT_CREATE})},[R.AFTER_DESTROYED]:r=>{const{inspector:e,engine:t}=r.ctx;t.announce("Explosives... explode!");for(const s of e.getPermanents({touching:r.permanent.slot}))t.damageUnattributed(s,2)}}},[cs]:{onRepeatable(r,e){const t=r.effectOptsResolved[0];e.engine.damage(r.permanent,t.permanent,e.inspector.getPower(r.permanent)),e.engine.damage(r.permanent,r.permanent,1)}},[sa]:{adjustDamageReceived(r,e){return Math.max(e-1,0)}},[ra]:{adjustDamageReceived(r,e){return Math.max(e-1,0)}}};for(const r of aa)Ur[r]||(Ur[r]={}),Ur[r].handlers={[R.CREATED]:_f};const Sf={cardEffects:Ur,afterTurnEnd:(r,e)=>{const{ai:t,inspector:s,engine:a}=e;if(s.getTurnNumber()<=1)return;const n=s.getPermanents({owner:r,sort:[o=>-100*s.getNthNearestRow(o.slot.row,r)-o.slot.column]});for(const o of n){if(!md.has(o.card.name||"")||s.getPower(o)<=0)continue;const l=s.getPermanents({column:o.slot.column,rowInFrontOf:{row:o.slot.row,perspective:r},sort:[{type:"frontToBack",perspective:s.getOpponentOf(r)}]});for(const i of l){if(i.card.name===$n)break;if(i.card.name!==qt&&i.owner!==r){a.damage(o,i,s.getPower(o));break}}}},overrideStep(r,e){if(r.type!==H.MOVE)return!1;const{inspector:t,engine:s}=e,a=r.permanent;if(!aa.has(a.card.name||""))return!1;const n=a.slot,o=r.slot,l=o.row-n.row,i=o.column-n.column,c=ma.makeStateFromInspector(t).getPushResult(1,a,l,i);for(const d of c)d.type===fa.MOVE?s.moveRel(d.permanent,d.rowDiff,d.colDiff):(d.type,fa.APPLY_POWERUP);return c.length===0&&s.announce("bonk."),!0}},Le=oa.map(r=>({...Sf,afterInitEngine(t){Hd[r](t)}}));function _f(r){const{permanent:e,ctx:t}=r,{engine:s}=t;s.addCounter(e,{type:I.CANNOT_ATTACK}),s.addCounter(e,{type:I.CANNOT_CREATE})}function Tf(r){const{permanent:e,ctx:t}=r,{engine:s}=t;s.addCounter(e,{type:I.CANNOT_ATTACK}),s.addCounter(e,{type:I.CANNOT_CREATE}),s.addCounter(e,{type:I.CANNOT_MOVE})}function vf(r){const{permanent:e,ctx:t}=r,{engine:s}=t;s.addCounter(e,{type:I.DOES_NOT_PROTECT})}const If={0:{final_6:".....b.b....w.w.....b.w.......",moves65:".....D.X....R.D.....U.D.......",moves54:"..........R..X.D...L.......R..",attks_6:".s.s.!!!!!!s!!!!s!!!!!!!!.s.!!",attks_5:"!!!!!!s!!!!!!!!!!!!!!ss!!!!!!.",attks_4:"!!.s.!!sss!!!!s!ss!s!!!!!.s!!!"},1:{final_6:".....b...b.......w..bw..w.....",moves65:".....U...L.......X..UD..L.....",moves54:"S.......S......R.......D..X...",attks_6:".s.s.!!!!!!s!!!!s!!!!!!!!.s.!!",attks_5:"!!!!!!!!!!!!s!!!!!!!!s!!!!!!s.",attks_4:"!!!!!!!!!!!!s!!s!!!!s!ss!.!!!!"},2:{final_6:"......b.w..w.w.....b......b...",moves65:"......X.U..R.S.....D......L...",moves54:"...X........DD..........UR....",attks_6:".s.s.s!!!!s!!!!s!!!!s!ss!.!!!!",attks_5:"!!!!!!!!!!!!!!!!sss!!s!!!!!!s.",attks_4:".s.s.sssssssssss!!!!s!ss!.!!!!"},3:{final_6:"...w.......bwb.......w....b...",moves65:"...L.......LDU.......X....L...",moves54:"..X.....S.U......R.......R....",attks_6:".!!!!s!ss!s!!!!s!!!!s!!!!.!!!!",attks_5:".!!!!s!!!!!!!!!!s!!!!s!!!!!!!!",attks_4:".s.s.!!!!s!ss!s!!s!ss!s!!.!!!!"},4:{final_6:"........wwb.b.......w....b....",moves65:"........LSS.R.......X....R....",moves54:".......U.XD..S............R...",attks_6:".s.!!sss!!!!!!!!s!!!!s!!!!!!!!",attks_5:"!!.!!!!!!!!!!!!s!!!!s!!!!.!!!!",attks_4:"!!!!.!!!!s!!!!s!!!!sss!!!.s!!!"},5:{final_6:"......bww....w.....b......b...",moves65:"......XDU....S.....D......L...",moves54:"...X........DD..........UR....",attks_6:".s.s.s!!!!s!!!!s!!!!s!ss!.!!!!",attks_5:"!!!!!!!!!!!!!!!!sss!!s!!!!!!s.",attks_4:".s.s.sssssssssss!!!!s!ss!.!!!!"},6:{final_6:".....w.b.........b..bww.......",moves65:".....R.U.........L..DXR.......",moves54:"..S...X.........S......D.R....",attks_6:"!!!!!!s!!!!s!ss!s!!!!!!!!.s.!!",attks_5:"!!!!!!!!s!!!!!!!!!!!!s!!!!!!s.",attks_4:".s!!!ss!s!ss!!!s!!!!s!ss!.!!!!"},7:{final_6:"..b.......b..w......b...w...w.",moves65:"..X.......S..S......U...U...L.",moves54:"..........S..S.R...L.......X..",attks_6:".s!!!ss!!!!!!!s!ss!!!!!s!.s!!!",attks_5:"!!!!!!s!!!!!!!!!!!!!!ss!!!!!!.",attks_4:".s.s.sssss!!!!!!!!!!!!sss!!.s."},8:{final_6:".....w.b.........bw.b.w.......",moves65:".....R.U.........LX.D.R.......",moves54:"..S...X.........S......D.R....",attks_6:"!!!!!!s!!!!s!ss!s!!!!!!!!.s.!!",attks_5:"!!!!!!!!s!!!!!!!!!!!!s!!!!!!s.",attks_4:".s!!!ss!s!ss!!!s!!!!s!ss!.!!!!"},9:{final_6:"b.....b.w.........wb.......w..",moves65:"D.....D.L.........RX.......L..",moves54:".....S.S...D.......U......X...",attks_6:"!!!!!!!!!!!!sss!!!!!!!ss!.!!!!",attks_5:".s.!!!!!!!!!!!!!!s!!!!!!!!!!s.",attks_4:".s.!!!!!!!!sss!!!!!!!!sss!!.s."},10:{final_6:"b.w...b............b....w..w..",moves65:"D.D...D............X....U..L..",moves54:".....S.S...D.......U......X...",attks_6:"!!!!.!!!!s!!sss!!!!!!!ss!.!!!!",attks_5:".s.!!!!!!!!!!!!!!s!!!!!!!!!!s.",attks_4:".s.!!!!!!!!sss!!!!!!!!sss!!.s."},11:{final_6:"..w....b....w...w..b......b...",moves65:"..X....U....L...L..S......R...",moves54:"..R........S...X...S.......L..",attks_6:".!!!!!!!!!!!!sss!!!!s!ss!.!!!!",attks_5:".s!!!ss!s!!!!s!!s!!!!s!ss!!!s.",attks_4:"!!!!.!!s!ss!!!ss!!!!s!ss!.!!!!"},12:{final_6:".b.....b...ww.........b....w..",moves65:".L.....L...XR.........L....S..",moves54:"X.....D......D.......L.....R..",attks_6:".!!!!s!!!!s!!ss!!!ss!!!!!.!!!!",attks_5:"!!!!!!!!!!!!s!!!!s!!!!!!s!!!!.",attks_4:"!!.s.!!sss!!!!s!ss!s!!!!!.s!!!"},13:{final_6:"b.w.........w....b..b.w.......",moves65:"R.S.........X....R..U.D.......",moves54:".DL............X..D........S..",attks_6:"!!!!.!s!!s!s!ss!s!!!!!!!!.s.!!",attks_5:".!!!!s!!!!s!!!!!!!!!!ss!!!!!!.",attks_4:"!!!!!!!!!!!!s!!!!s!!s!!!!.!!!!"},14:{final_6:".....b.......b.w..w.b.......w.",moves65:".....D.......D.X..R.U.......L.",moves54:"..........R....D..XL.......R..",attks_6:".s!!.!!!!s!!!!s!!!!!!!!s!.s!!!",attks_5:"!!!!!!s!!!!!!!!!!!!!!ss!!!!!!.",attks_4:"!!.s.!!sss!!!!s!ss!s!!!!!.s!!!"},15:{final_6:".....w.b...........bbww.......",moves65:".....S.R...........DDUX.......",moves54:".....X..L.......U.......UR....",attks_6:"!!!!!!s!!!!s!ss!s!!!!!!!!.s.!!",attks_5:"!!!!!!!!!!!!s!!!!!!!!s!!!!!!s.",attks_4:"!!!!!!!!!!s!!sss!!!!s!ss!.!!!!"},16:{final_6:".w.......b..b...........wbw...",moves65:".S.......X..R...........USR...",moves54:".X...........D.....U.....R.R..",attks_6:"!!!s.!s!!!!!!s!!!!s!!!!s!!!!!!",attks_5:"!!!!!!!!!!!!!!!!sss!!ss!!!!!!.",attks_4:".s.s.sss!!sss!!s!!!!s!ss!.!!!!"},17:{final_6:"...w...b...w......wb......b...",moves65:"...S...X...R......UD......L...",moves54:"...X........DD..........UR....",attks_6:"!!!!!!!!!!s!!sss!!!!s!ss!.!!!!",attks_5:"!!!!!!!!!!!!!!!!sss!!s!!!!!!s.",attks_4:".s.s.sssssssssss!!!!s!ss!.!!!!"},18:{final_6:"..b.........w...w..b....w.b...",moves65:"..S.........L...L..S....X.R...",moves54:"..D........S...X...S.......L..",attks_6:"!!!s.!s!ss!!!sss!!!!s!ss!.!!!!",attks_5:".s!!!ss!s!!!!s!!s!!!!s!ss!!!s.",attks_4:"!!!!!!!!!!s!!sss!!!!s!ss!.!!!!"},19:{final_6:"..w...b........wb..b.......w..",moves65:"..S...U........XL..L.......S..",moves54:".DL............X..D........S..",attks_6:"!!!!.!!!!s!!sss!!!!!!!ss!.!!!!",attks_5:".!!!!s!!!!s!!!!!!!!!!ss!!!!!!.",attks_4:"!!!!!!!!!!!!s!!!!s!!s!!!!.!!!!"},20:{final_6:"..........b.b.w.....b..ww.....",moves65:"..........X.L.D.....D..LS.....",moves54:"...........D.......S..X.SR....",attks_6:".s!!.ss!!!!!!s!!s!!!!!!!!.s.!!",attks_5:"!!.s.!!sss!!!!!!s!!!!s!!!!!!!!",attks_4:".s.s.ssssssss!!s!!!!s!ss!.!!!!"},21:{final_6:"......wb........w..b....w.b...",moves65:"......DU........L..S....X.R...",moves54:"..R........S...X...S.......L..",attks_6:".s.s.!!!ss!!!sss!!!!s!ss!.!!!!",attks_5:".s!!!ss!s!!!!s!!s!!!!s!ss!!!s.",attks_4:"!!!!.!!s!ss!!!ss!!!!s!ss!.!!!!"},22:{final_6:".....b...b.......w..bw.w......",moves65:".....U...L.......X..UD.S......",moves54:"S.......S......R.......D..X...",attks_6:".s.s.!!!!!!s!!!!s!!!!!!!!.s.!!",attks_5:"!!!!!!!!!!!!s!!!!!!!!s!!!!!!s.",attks_4:"!!!!!!!!!!!!s!!s!!!!s!ss!.!!!!"},23:{final_6:"..b....w...ww......b......b...",moves65:"..R....U...LX......D......L...",moves54:"..XS......R.............UR....",attks_6:"!!!s.!!!sss!!sss!!!!s!ss!.!!!!",attks_5:".!!!.!!s!s!ss!!!sss!!s!!!!!!s.",attks_4:"!!!!.!!s!ss!!!ss!!!!s!ss!.!!!!"},24:{final_6:"..w..w...........b.bb.w.......",moves65:"..S..X...........L.DD.U.......",moves54:"..X.............SR......DR....",attks_6:"!!!!.!s!!s!s!ss!s!!!!!!!!.s.!!",attks_5:"!!!!.!!!!s!!s!!!!!!!!s!!!!!!s.",attks_4:".s.s.sssssssssss!!!!s!ss!.!!!!"},25:{final_6:"b......ww.......b..b.......w..",moves65:"R......UX.......L..L.......S..",moves54:".DL............X..D........S..",attks_6:"!!!!!!!!!!!!sss!!!!!!!ss!.!!!!",attks_5:".!!!!s!!!!s!!!!!!!!!!ss!!!!!!.",attks_4:"!!!!!!!!!!!!s!!!!s!!s!!!!.!!!!"},26:{final_6:"b......w....b......w.w.....b..",moves65:"D......R....L......S.D.....X..",moves54:".....S..D..D.......L......X...",attks_6:"!!!s.!s!ss!s!!!!!!s!!!!s!!!!!!",attks_5:".s.s.!!!!!!!!!!!!s!!!!!!!!!!s.",attks_4:".s.s.!!!ss!s!!!!!!!!!!sss!!.s."},27:{final_6:".w...w.b.........b..b.w.......",moves65:".X...S.U.........L..D.R.......",moves54:"..S..X..........S......R.R....",attks_6:"!!!!!!s!!!!s!ss!s!!!!!!!!.s.!!",attks_5:"!!!!!!!!s!!!!!!!!!!!!s!!!!!!s.",attks_4:".s!!!ss!s!ss!!!s!!!!s!ss!.!!!!"},28:{final_6:"......wbw........b..b.w.......",moves65:"......SUX........L..D.R.......",moves54:"..S...X.........S......D.R....",attks_6:".!!!!s!!!!!!!ss!s!!!!!!!!.s.!!",attks_5:"!!!!!!!!s!!!!!!!!!!!!s!!!!!!s.",attks_4:".s!!!ss!s!ss!!!s!!!!s!ss!.!!!!"},29:{final_6:"......b..w.........b.w..w.b...",moves65:"......D..L.........S.L..X.R...",moves54:"........X..D.......SR......L..",attks_6:".s.!!s!!!!s!!!!s!!!!s!ss!.!!!!",attks_5:"!!.!!!!s!!!!!!!!s!!!!s!ss!!!s.",attks_4:".s.s.sssssssssss!!!!s!ss!.!!!!"},30:{final_6:".....w.b....w....b..b.w.......",moves65:".....R.U....X....L..D.R.......",moves54:"..S...X.........S......R.R....",attks_6:"!!!!!!s!!!!s!ss!s!!!!!!!!.s.!!",attks_5:"!!!!!!!!s!!!!!!!!!!!!s!!!!!!s.",attks_4:".s!!!ss!s!ss!!!s!!!!s!ss!.!!!!"},31:{final_6:"......b.w.......b.wb.......w..",moves65:"......L.L.......U.RX.......L..",moves54:".....S.S...D.......U......X...",attks_6:"!!!!!!!!!!!!sss!!!!!!!ss!.!!!!",attks_5:".s.!!!!!!!!!!!!!!s!!!!!!!!!!s.",attks_4:".s.!!!!!!!!sss!!!!!!!!sss!!.s."},32:{final_6:"b..w....w.......b..b.......w..",moves65:"R..L....X.......L..L.......S..",moves54:".DL............X..D........S..",attks_6:"!!!!!!!!!!!!sss!!!!!!!ss!.!!!!",attks_5:".!!!!s!!!!s!!!!!!!!!!ss!!!!!!.",attks_4:"!!!!!!!!!!!!s!!!!s!!s!!!!.!!!!"},33:{final_6:"..ww.......b.b..........w.b...",moves65:"..LX.......R.U..........S.L...",moves54:".S......D...D...........UX....",attks_6:".!!!!s!ss!s!!!!s!!!!s!!!!.!!!!",attks_5:"!!!!!!!!!!!!!!!!s!!!!s!!!!!!!!",attks_4:"!!!!!!!!!!!!!!!!!!s!ss!!!.s!!."},34:{final_6:"b.w..........b......b...w...w.",moves65:"R.S..........D......U...X...L.",moves54:".RR............X..D........S..",attks_6:"!!!!.!ss!s!!!!s!!!!!!!!s!.s!!!",attks_5:".!!!!s!!!!s!!!!!!!!!!ss!!!!!!.",attks_4:".s!!!ss!s!ss!!!sss!!s!!!!.!!!!"},35:{final_6:".w....b.w.......b..b.......w..",moves65:".R....U.X.......L..L.......S..",moves54:".DS............X..R........S..",attks_6:"!!!!!!!!!!!!sss!!!!!!!ss!.!!!!",attks_5:".!!!!s!!!!s!!!!!!!!!!ss!!!!!!.",attks_4:"!!!!.!!!!s!!sss!!!!!!!ss!.!!!!"},36:{final_6:".....b.wb...........b...w...w.",moves65:".....U.XS...........U...U...L.",moves54:"S.......S......R...X.......R..",attks_6:".s.s.!!!!s!ss!s!ss!!!!!s!.s!!!",attks_5:"!!!!!!!!!!!!s!!!!!!!!ss!!!!!!.",attks_4:"!!!!!!!!!!!!s!!s!!!!s!ss!.!!!!"},37:{final_6:".wb........ww......b......b...",moves65:".RX........RR......D......L...",moves54:"..X.........DD..........UR....",attks_6:"!!!s.!!!sss!!sss!!!!s!ss!.!!!!",attks_5:"!!!!.!!!!s!!!!!!sss!!s!!!!!!s.",attks_4:".s.s.sssssssssss!!!!s!ss!.!!!!"},38:{final_6:".....w.b.........b..b.w.w.....",moves65:".....R.U.........L..D.X.L.....",moves54:"..S...X.........S......D.R....",attks_6:"!!!!!!s!!!!s!ss!s!!!!!!!!.s.!!",attks_5:"!!!!!!!!s!!!!!!!!!!!!s!!!!!!s.",attks_4:".s!!!ss!s!ss!!!s!!!!s!ss!.!!!!"},39:{final_6:"...w.b....w.b...........wb....",moves65:"...L.D....R.R...........XR....",moves54:"..R.......DX.S............R...",attks_6:".s!!!!!!s!!s!!!!s!!!!s!!!!!!!!",attks_5:"!!!!.!ss!!!!!!!s!!!!s!!!!.!!!!",attks_4:"!!!!!!!!!!!!!!s!!!!sss!!!.s!!!"},40:{final_6:"...w.w.b.........b..b.w.......",moves65:"...X.R.U.........L..D.R.......",moves54:"..S...X.........S......D.R....",attks_6:"!!!!!!s!!!!s!ss!s!!!!!!!!.s.!!",attks_5:"!!!!!!!!s!!!!!!!!!!!!s!!!!!!s.",attks_4:".s!!!ss!s!ss!!!s!!!!s!ss!.!!!!"},41:{final_6:"...b....w..w.......b.w....b...",moves65:"...L....X..U.......S.L....R...",moves54:"..R...D............SX......L..",attks_6:"!!!!.!!s!ss!!!ss!!!!s!ss!.!!!!",attks_5:"!!!!!!!!s!!!!s!!s!!!!s!ss!!!s.",attks_4:"!!!!.!!s!ss!!!ss!!!!s!ss!.!!!!"},42:{final_6:"b..w....w........b..b.w.......",moves65:"R..L....X........R..U.D.......",moves54:".DS............X..R........S..",attks_6:"!!!!!!s!!!!s!ss!s!!!!!!!!.s.!!",attks_5:".!!!!s!!!!s!!!!!!!!!!ss!!!!!!.",attks_4:"!!!!.!!!!s!!sss!!!!!!!ss!.!!!!"},43:{final_6:".....b..w...wb.....b.......w..",moves65:".....S..R...XD.....D.......L..",moves54:".....S...X........U.....U.R...",attks_6:".s!!.!!!!s!!!!s!!!!!!!ss!.!!!!",attks_5:".s.!!!!!!!!!!!!!!!!!!s!!!!!!s.",attks_4:".s!!.!!!!s!!!!s!!!!!!!ss!.!!!!"},44:{final_6:".w.b....w..w.......b......b...",moves65:".R.S....X..L.......D......L...",moves54:"..XS......R.............UR....",attks_6:"!!!!.!!s!ss!!!ss!!!!s!ss!.!!!!",attks_5:".!!!.!!s!s!ss!!!sss!!s!!!!!!s.",attks_4:"!!!!.!!s!ss!!!ss!!!!s!ss!.!!!!"},45:{final_6:"b..b.........w......bw......w.",moves65:"S..D.........X......UD......L.",moves54:"S.......S......R..........XR..",attks_6:"!!!!.!ss!s!ss!s!ss!!!!!s!.s!!!",attks_5:"!!!!!!!!!!!!s!!!!!!!!ss!!!!!!.",attks_4:"!!!!!!!!!!!!s!!s!!!!s!ss!.!!!!"},46:{final_6:"......wb........w..b......b.w.",moves65:"......DU........L..S......R.X.",moves54:"..R........S...X...S.......L..",attks_6:".s.s.!!!ss!!!sss!!!!s!ss!.!!!!",attks_5:".s!!!ss!s!!!!s!!s!!!!s!ss!!!s.",attks_4:"!!!!.!!s!ss!!!ss!!!!s!ss!.!!!!"},47:{final_6:"..w...b.........b.wb.......w..",moves65:"..D...L.........U.RX.......L..",moves54:".....S.S...D.......U......X...",attks_6:"!!!!.!!!!s!!sss!!!!!!!ss!.!!!!",attks_5:".s.!!!!!!!!!!!!!!s!!!!!!!!!!s.",attks_4:".s.!!!!!!!!sss!!!!!!!!sss!!.s."},48:{final_6:".b.......w.b....w.......b.w...",moves65:".L.......L.U....X.......U.R...",moves54:"X.....S.S..........L.......L..",attks_6:".!!!!s!ss!s!!!!!!!!!!s!!!!!!s.",attks_5:"!!!!!!!!!!!!sss!!!!!!!ss!.!!!!",attks_4:"!!!!!!!!!!!!sss!!!!s!ss!s!!!!."},49:{final_6:".....bw.b.w..........b.....w..",moves65:".....UX.L.S..........R.....L..",moves54:"D......R..X...........L...R...",attks_6:".s.s.!!!!s!!!!s!!!!s!!!!s!!!!.",attks_5:"!!!!!!s!!!!s!ss!!!ss!!!!!!!!!!",attks_4:".s.s.!!!!s!!!!s!!!!s!!!!s!!!!."}},io="chocolate",ha="vanilla",Es="cyclow",uo=r=>({owner:f.P2,custom:e=>pa(r,e)}),pa=(r,e)=>r.getCardName(e).includes(Es),Xt=(r,e,t)=>{const{inspector:s,engine:a}=e;t||(t=s.getPermanents(uo(s))),t.forEach(n=>{s.getCardName(n).startsWith(ha)?a.getBackdoorEngine().transformPermanent(n,ha+"-"+Es+r):a.getBackdoorEngine().transformPermanent(n,io+"-"+Es+r)})},co=(r,e)=>{if(r===6)return e.attks_6;if(r===5)return e.attks_5;if(r===4)return e.attks_4;throw new Error("No attacks found for invalid level: "+r)},Rf=(r,e)=>{let t="";r===6?t=e.moves65:r===5&&(t=e.moves54);for(let s=0;s<6;s++)for(let a=0;a<5;a++){const n=s*5+a;if(t[n]==="X")return{row:s,column:a}}throw new Error("No killable slot found for level: "+r)},fo=(r,e)=>{const{inspector:t,engine:s}=r,a=s.getExtraState(),n=t.getUnoccupiedSlotsClosestTo(e.owner,e.slot);for(const o of n){const l=co(a.level-1,a.game),i=o.row*t.getNumColumns()+o.column;if(l[i]==="!"&&s.move(e,o))return}for(const o of n)if(s.move(e,o))return},Nf=(r,e)=>{const{inspector:t,engine:s}=r;for(let n=0;n<6;n++)for(let o=0;o<5;o++){const l={row:n,column:o},i=e.final_6[n*5+o];if(i!=="."){const u=t.getPermanentAtIfExists(l);u&&fo(r,u);const c=(i==="b"?io:ha)+"-"+Es+"--sleeping-";s.spawn(c,l,f.P2)}}t.getPermanentsOf(f.P2).forEach(n=>{s.addCounter(n,{type:I.INVULNERABLE})})},Cf=(r,e)=>{const{inspector:t,engine:s}=r,a=s.getExtraState();let n="";a.level===6?n=e.moves65:a.level===5&&(n=e.moves54);const o=[];for(let i=0;i<6;i++)for(let u=0;u<5;u++){const c={row:i,column:u},d=n[i*5+u];let g;switch(d){case"L":g={row:i,column:u-1};break;case"R":g={row:i,column:u+1};break;case"U":g={row:i-1,column:u};break;case"D":g={row:i+1,column:u};break;default:continue}const w=t.getPermanentAtIfExists(c);w&&pa(t,w)&&o.push({cow:w,from:c,to:g})}let l=0;for(;o.length>0&&l<10;){l++;const i=o.shift();if(!i)continue;const{cow:u,from:c,to:d}=i,g=t.getPermanentAtIfExists(d);if(g){if(pa(t,g)){o.push(i);continue}fo(r,g)}s.move(u,d)}},Pf={counterData:{},aiTurn:r=>{const{inspector:e,engine:t,ai:s}=r,a=t.getExtraState(),n=e.getTurnNumber(),o=e.getPermanents(uo(e));if(n===0)Nf(r,a.game),s.speak("Howdy! The name’s Miss Yu. This here’s my ranch! Mind the cows.");else switch(a.cows){case"--sleeping-":{a.cows="--awake-",Xt("--awake-",r),a.level===6?s.speak("They like to curl up into li’l balls if ya wake ’em, ya see. Watch yer step!"):s.speak("Hope you know what’s comin’.");break}case"--awake-":{const l=co(a.level,a.game);for(let c=0;c<6;c++)for(let d=0;d<5;d++){const g=c*5+d;if(l[g]==="!"){const y=e.getPermanentAtIfExists({row:c,column:d});y&&y.owner===f.P1&&e.getCardType(y)===se.CREATURE&&t.destroy(y,y)}}if(a.level===6?s.speak(`My husband always said, the cows won’t pay the bills!
Lemme tell ya, he sure shut up after he saw
this ’ere cow-ordinated lasso attack!`):s.speak("Take that!"),a.cows="--tired-",Xt("--tired-",r),a.level<=4){o.forEach(c=>{t.removeCounterType(c,I.INVULNERABLE)}),Xt("--weak-",r);break}const i=Rf(a.level,a.game),u=e.getPermanentAtIfExists(i);u&&(t.removeCounterType(u,I.INVULNERABLE),Xt("--weak-",r,[u]));break}case"--tired-":{if(a.level>o.length){if(a.level<=4){const l=e.getPermanents({name:"barn"})[0];t.removeCounterType(l,I.INVULNERABLE),a.level=3,a.cows="--angry-",Xt("--angry-",r),s.speak("I’ve had it with you! Get off my ranch!");break}Cf(r,a.game),a.level-=1,a.cows="--sleeping-",Xt("--sleeping-",r),s.speak("What in tarnation didya do to my cow? Yer gonna get milked!")}else s.speak("They’re tired, don’t give ’em any trouble now.");break}case"--angry-":for(const l of o)s.tryAttackFirst(l,{sort:["structuresFirst","health",{type:"euclideanDistance",slot:l.slot}]})}},afterInitEngine:r=>{const e=Object.values(If),t=Math.floor(Math.random()*e.length),s=e[t];r.engine.initExtraState({cows:"--sleeping-",level:6,game:s})}},Of={afterInitEngine:r=>{r.engine.initExtraState({lastKnownBaseDamage:0})},afterStep:(r,e)=>{const{inspector:t,engine:s,ai:a}=e,n=t.getPermanents({owner:f.P2,isBase:!0})[0];if(n!==void 0){const o=s.getExtraState();o.lastKnownBaseDamage===0&&n.damage!==0&&(a.speak("i got hit... am i going to l, o, s, e again?"),o.lastKnownBaseDamage=n.damage)}},aiTurn:r=>{const{inspector:e,ai:t}=r,s=e.getPermanentsOf(f.P2),a=s.filter(o=>e.getSharedEffects(o).isBase)[0];if(a===void 0)return;if(e.getTurnNumber()===0){t.speak("if only i could w, i, n just once, i'd be so much braver. if only i had a f, r, i, e, n, d..."),t.trySpawn("beeflector",3,0),t.trySpawn("beeflector",3,1),t.trySpawn("beeflector",3,2),t.trySpawn("beeflector",3,3),t.trySpawn("beeflector",3,4);return}for(const o of s)if(e.getCardName(o)==="reckless-medisaur"){let l=!1;const i=e.getPermanents({sort:[u=>u.owner===f.P1?0:1,u=>-u.damage]});for(const u of i)if(l=t.tryActivateAbility(o,ve.SPECIAL,[{type:me.PERMANENT,permanentId:a.id},{type:me.PERMANENT,permanentId:u.id}]),l)break;l||t.tryAttackFirst(o,{sort:["structuresFirst",{type:"euclideanDistance",slot:o.slot}]})}else e.getSharedEffects(o).isBase||t.tryAttackFirst(o,{sort:["structuresFirst",{type:"euclideanDistance",slot:o.slot}]});for(const o of[1,3,0,4,2])if(t.trySpawn("reckless-medisaur",1,o))break;let n=0;for(const o of[3,4,5]){for(const l of[0,2,4,1,3])if(t.trySpawn("beeflector",o,l)&&(n+=1),n===3)break;if(n===3)break}},disableBattleWonSolvedCondition:!0,extraSolveChecks:(r,e)=>e===f.P2,afterGameEnd:(r,e,t)=>{const{engine:s,ai:a}=t;e[f.P1]??!1?s.clearKeyframe():a.speak("Before you got the chance to use the uwuand, bb b zipped away crying! Looks like you failed to befriend it.",{hideBattler:!0})}},mo=[{parent:"slime",children:["yellow","sepia"]},{parent:"yellow",children:["lemon","amber"]},{parent:"amber",children:["ivory","orange"]},{parent:"lemon",children:["ebony","turquoise"]},{parent:"ivory",children:["harlequin"]},{parent:"harlequin",children:[]},{parent:"ebony",children:["indigo","mauve"]},{parent:"indigo",children:[]},{parent:"sepia",children:["ecru","emerald"]},{parent:"emerald",children:["khaki","apricot"]},{parent:"khaki",children:["eggplant","lavender"]},{parent:"ecru",children:["auburn","teal"]},{parent:"auburn",children:["lava","rust"]},{parent:"lava",children:[]},{parent:"teal",children:["white","saffron"]},{parent:"white",children:[]},{parent:"apricot",children:[]},{parent:"lavender",children:[]},{parent:"turquoise",children:["silver"]},{parent:"silver",children:[]},{parent:"mauve",children:[]},{parent:"orange",children:["red","lilac"]},{parent:"lilac",children:[]},{parent:"red",children:[]},{parent:"rust",children:[]},{parent:"saffron",children:[]},{parent:"eggplant",children:[]}],ga=["yellow","lemon","ebony","indigo","silver","ivory","harlequin","red","ecru","auburn","lava","white","khaki","eggplant"],ya=["sepia","emerald","apricot","lavender","teal","saffron","rust","amber","orange","lilac","turquoise","mauve"],Ea=(r,e)=>{const{inspector:t,ai:s}=e;s.tryAttackFirst(r,{sort:["creaturesFirst",{type:"euclideanDistance",slot:r.slot}]})},Uf=(r,e)=>{Ea(r,e)},Df=(r,e)=>{const{engine:t}=e,s=[{x:0,y:1},{x:0,y:-1},{x:1,y:0},{x:-1,y:0}];for(;s.length>0;){const a=Math.floor(Math.random()*s.length),n=s.splice(a,1)[0];if(t.moveRel(r,n.x,n.y))break}Ea(r,e)},ba={[R.BEFORE_DESTROYED]:r=>{var l;const{inspector:e,engine:t}=r.ctx,s=e.getCardName(r.permanent),a=r.permanent.slot;(l=mo.find(i=>s.startsWith(i.parent)))==null||l.children.forEach(i=>{const u=e.getUnoccupiedSlotsClosestTo(f.P2,a);let c=a;for(const d of u)if(t.spawn(i+"-slime",d,f.P2)){c=d;break}if(ga.includes(i)){const d=e.getPermanentAtIfExists(c);if(!d)return;t.addCounter(d,{type:I.FROZEN,explanation:"will not ready on its next turn",expiry:R.START_TURN})}});const n=t.getExtraState(),o=s.split("-")[0];n.slimeKilledOrder.push(o)}},Gf={disableP2NoBasesLossCondition:!0,counterData:{},cardEffects:{slime:{handlers:ba},...ga.reduce((r,e)=>(r[e+"-slime"]={handlers:{...ba,[R.AFTER_DEAL_DAMAGE]:t=>{const{defender:s,ctx:a}=t,{engine:n}=a;n.mergeValueCounter(s,I.POISON,1,o=>`On start of turn, takes ${o} Damage.`)}}},r),{}),...ya.reduce((r,e)=>(r[e+"-slime"]={handlers:ba},r),{})},aiTurn:r=>{const{inspector:e,engine:t,ai:s}=r,a=e.getTurnNumber(),n=e.getPermanentsOf(f.P2);a==0&&s.trySpawn("slime",1,2);for(const o of n){const l=e.getCardName(o);ga.includes(l.split("-")[0])?Uf(o,r):ya.includes(l.split("-")[0])?Df(o,r):l==="slime"&&Ea(o,r)}},afterSummon:(r,e)=>{const{inspector:t,engine:s}=e,a=t.getCardName(r);ya.includes(a.split("-")[0])},afterInitEngine:r=>{r.engine.initExtraState({slimeKilledOrder:[]})},extraLoseChecks:(r,e)=>{const{inspector:t}=e;return r===f.P2&&t.getPermanentsOf(r).length===0},extraSolveChecks:(r,e,t)=>{const{engine:s}=t,n=s.getExtraState().slimeKilledOrder,o=mo.map(l=>l.parent);if(n.length!==o.length)return!1;for(let l=0;l<n.length;l++)if(n[l]!==o[l])return!1;return!0},afterGameEnd:(r,e,t)=>{const{engine:s,ai:a}=t;(e[f.P1]??!1)||a.speak("The Slime disintegrated back into the sludge! It looks like you failed to befriend it. How puzzling!",{hideBattler:!0,speaker:kr.NARRATOR})}},Dr={disableP2NoBasesLossCondition:!0,counterData:{[I.DOOM]:{handlers:{[R.END_TURN]:r=>{const{permanent:e,counter:t,counterIndex:s,ctx:a}=r,{engine:n,inspector:o,ai:l}=a;if(!o.isTurnPending(e.owner))return;if(t==null||s==null)throw new Error("counter event should have counter specified");const i=o.getCardName(e)==="bargle",u=o.getCardName(e)==="swargle",c=(t.val||0)-1;if(c<=0){if(i){l.speak("Orgle orgle tirgle!");for(const d of o.getPermanentsOf(f.P1))n.destroy(e,d)}else u&&n.destroy(e,e);return{expire:!0}}else i&&(c===1?l.speak("Largle turgle torgle bergle thirgle rorgle!"):c===6?l.speak(`${c} turgle torgle bergle thirgle rorgle.`):l.speak(`${c} turgle torgle bergle thirgle rorgle.`)),n.updateCounterVal(e,s,c)}}}},afterInitEngine:r=>{const{engine:e}=r;e.initSharedExtraState({canAttackMorgle:!1})},cardEffects:{cargle:{insteadOfDamaged(r,e,t,s){const{engine:a}=s;return(t==null?void 0:t.slot.column)===0||(t==null?void 0:t.slot.column)===4?(a.destroy(r,t),!1):!0}},dorgle:{insteadOfDamaged(r,e,t,s){const{engine:a}=s;return(t==null?void 0:t.slot.column)===1||(t==null?void 0:t.slot.column)===3?(a.destroy(r,t),!1):!0}},morgle:{},corgle:{handlers:{[R.AFTER_DAMAGED]:r=>{const{inspector:e,engine:t}=r.ctx,s=r.attacker;!s||e.getPlayerGems(s.owner).length===3||t.destroy(r.permanent,s)}}},bargle:{handlers:{[R.CREATED]:r=>{const{engine:e}=r.ctx;e.addCounter(r.permanent,{type:I.DOOM,val:8})},[R.START_TURN]:r=>{const{inspector:e,engine:t}=r.ctx;[2,3,5,7,11,13,17,19,23,29].includes(e.getHealth(r.permanent))||e.getPermanentsOf(f.P1).forEach(a=>{t.destroy(r.permanent,a)})}}},durgle:{adjustDamageReceived(r,e,t,s){const{inspector:a}=s;if(!t)return 0;const n=a.getCardColor(t);return n!==null&&n===C.GREEN?e:0}},gorgle:{adjustDamageReceived(r,e,t,s){const{inspector:a}=s;return t&&a.getHealth(t)>=4?e*10:e}},swargle:{handlers:{[R.CREATED]:r=>{const{engine:e}=r.ctx;e.addCounter(r.permanent,{type:I.DOOM,val:7})},[R.AFTER_DAMAGED]:r=>{const{inspector:e,engine:t}=r.ctx;e.getPermanentsOf(f.P1).forEach(s=>{t.destroy(r.permanent,s)})}}}},afterStep(r,e){const{inspector:t,engine:s}=e;if(r.type!==H.MOVE)return;const a=t.getPermanents({owner:f.P2,name:"morgle"});if(a.length===0)return;if(a.length>1)throw new Error("multiple morgles found");const n=a[0];r.slot.column===n.slot.column&&s.modifySharedExtraState({canAttackMorgle:!0})},aiTurn:r=>{const{inspector:e,engine:t,ai:s}=r;if(e.getTurnNumber()===0)return;const a=e.getPermanentsOf(f.P2);t.modifySharedExtraState({canAttackMorgle:!1});for(const n of a)s.tryAttackFirst(n)},extraLoseChecks:(r,e)=>{const{inspector:t,engine:s}=e;return r===f.P2?t.getPermanentsOf(r).length===0:!1}};function pt(r,e,t,s){r.engine.spawn(e,{row:t,column:s},f.P2)}const xf={...Dr,beforeNewGame:r=>{pt(r,"cargle",1,0),pt(r,"dorgle",1,4)}},Mf={...Dr,beforeNewGame:r=>{pt(r,"morgle",1,2)}},Lf={...Dr,beforeNewGame:r=>{pt(r,"corgle",1,2)}},Bf={...Dr,beforeNewGame:r=>{pt(r,"bargle",0,2)}},zf={...Dr,beforeNewGame:r=>{pt(r,"durgle",0,0),pt(r,"gorgle",0,2),pt(r,"swargle",0,4)}},ho={cardEffects:{"b-w-copier":{handlers:{[R.CREATED]:r=>{r.ctx.engine.addCounter(r.permanent,{type:I.BASE_GEMS,val:3})}},onSpecial:(r,e)=>{const{inspector:t,engine:s}=e,{permanent:a}=r,n=a.slot,o=n.row;for(let l=0;l<t.getNumColumns();l++)if(l!=n.column){const i=t.getPermanentAtIfExists({row:o,column:l});if(!i)continue;const u=t.getCardColor(i);u!==null&&[C.WHITE,C.BLACK].includes(u)&&s.addCardToHand(i.owner,i.card)}}},"pasture-planner":{adjustAttackChecks:r=>{r.delete(D.CARD_TYPE)},handlers:{[R.CREATED]:r=>{const{permanent:e,ctx:t}=r,{engine:s}=t;s.addCounter(e,{type:I.INVULNERABLE})},[R.OTHER_UNIT_SPAWN]:r=>{const{permanent:e,ctx:t}=r,{engine:s}=t,a=r.spawnedPermanent,n=s.getExtraState();e.owner==a.owner&&(n.isInvulnerable?s.addCounter(a,{type:I.INVULNERABLE}):s.addCounter(a,{type:I.CANNOT_BE_DESTROYED}),s.addCounter(a,{type:I.CANNOT_MOVE}))},[R.END_TURN]:r=>{const{permanent:e,ctx:t}=r,{inspector:s,ai:a}=t;if(!s.doesPermanentHaveCounterType(e,I.DOOM)||!s.isTurnPending(f.P2))return;const n=e.counters.findIndex(u=>u.type===I.DOOM),l=(e.counters[n].val||0)-1,i=Array(l).fill("⏳").join(" ");l===1?a.speak(`Audit is coming!
${i}`):l>1&&a.speak(`Audit in ${l} turns!
${i}`)}}}},aiTurn:r=>{var g,w;const{inspector:e,engine:t,ai:s}=r,a=t.getExtraState(),{globalConstraints:n,clues:o,answer:l,showSolution:i}=a,u=e.getTurnNumber()/2,c=e.getPermanentsOf(f.P2).filter(y=>e.getSharedEffects(y).isBase)[0],d=e.getPermanentsOf(f.P1).filter(y=>e.getSharedEffects(y).isBase)[0];if(u===0){const y=[{row:0,column:0},{row:0,column:1},{row:0,column:3},{row:0,column:4}];for(const{id:A,health:S}of n){const O=y.shift();if(!O)throw new Error("oops");s.trySpawn(A,O);const k=e.getPermanentsAt(O)[0];t.adjustPermanentStats(k,0,S-1)}}if(u>=1&&u<=o.length){const{id:y,health:A,row:S,column:O}=o[u-1],k={row:S+1,column:O};for(const N of e.getPermanentsAt(k))t.destroy(c,N);if(!s.trySpawn(y,k))throw new Error(`why ${y} ${JSON.stringify(k)}`);const P=e.getPermanentsAt(k)[0];t.adjustPermanentStats(P,0,A-1)}if(u===o.length&&(o.length<=2?t.addCounter(c,{type:I.DOOM,val:7-o.length,explanation:"Audit is coming"}):t.addCounter(c,{type:I.DOOM,val:4,explanation:"Audit is coming"})),u>o.length&&e.getCounterValSum(c,I.DOOM)===1){const y=[],A=Hf(e);if(A===null)y.push(c);else{const S=Ff(A);for(const O of e.getPermanentsOf(f.P2)){const k=N=>{const U=parseInt(N.split("-").pop()??"");return U%2===1?`${U}-${U+1}`:`${U-1}-${U}`};let P=!0;(g=O.card.name)!=null&&g.startsWith("puzzle-50-global-")&&(P=Yf[k(O.card.name)](bs(e,O)??!1)(A,S,e.getHealth(O),o)),(w=O.card.name)!=null&&w.startsWith("puzzle-50-local-")&&(P=jf[k(O.card.name)](bs(e,O)??!1)(A,S,e.getHealth(O),O.slot.row-1,O.slot.column)),P||y.push(O)}}for(const S of y)t.addCounter(S,{type:I.POWER_ADJUSTMENT,val:100,explanation:"Failed audit!"});if(i)for(let S=0;S<5;S++)for(let O=0;O<5;O++){const k={row:S+1,column:O},P=l[S][O];for(const N of e.getPermanentsAt(k))bs(e,N)!==P&&t.destroy(c,N);s.trySpawn(`puzzle-50-local-${P?1:2}`,k)}for(const S of y)s.tryAttack(S,d);y.length===0&&t.destroy(c,c)}},afterGameEnd:(r,e,t)=>{const{engine:s,ai:a}=t;e[f.P1]??!1?s.clearKeyframe():a.speak("Audit failed! Violators shall be punished in accordance with the law!")}},bs=(r,e)=>{const t=r.getCardColor(e);if(t===null)return null;switch(t){case C.WHITE:return!1;case C.BLACK:return!0;default:return null}},wa=r=>{const{row:e,column:t}=r;return 0<=e&&e<5&&0<=t&&t<5},Hf=r=>{const e=Array(5).fill(null).map(t=>Array(5).fill(null));return r.getAllPermanents().forEach(t=>{const s=t.slot.row-1,a=t.slot.column;wa({row:s,column:a})&&(e[s][a]=bs(r,t))}),e.every(t=>t.every(s=>s!==null))?e:null},po=(r,e)=>r.row===e.row&&r.column===e.column,It=(r,e)=>r.some(t=>po(t,e)),go=r=>e=>{const t=(n,o)=>n[o.row][o.column],s=[],a=[];for(let n=0;n<5;n++)for(let o=0;o<5;o++)a.push({row:n,column:o});for(;a.length>0;){const n=a[0],o=t(e,n),l=[],i=u=>{const c=a.findIndex(d=>po(u,d));c!==-1&&(a.splice(c,1),l.push(u),r(u).filter(d=>t(e,d)===o).forEach(d=>i(d)))};i(n),s.push({color:o,cells:l})}return s},Ff=go(r=>{const{row:e,column:t}=r;return[{row:e+1,column:t},{row:e-1,column:t},{row:e,column:t+1},{row:e,column:t-1}].filter(wa)}),Yf={"1-2":r=>(e,t,s,a)=>{let n=0;for(let o=0;o<t.length;o++)t[o].color==r&&n++;return n<=1},"3-4":r=>e=>{const t=go(a=>{const{row:n,column:o}=a;return[{row:n+1,column:o},{row:n-1,column:o},{row:n,column:o+1},{row:n,column:o-1},{row:n+1,column:o+1},{row:n-1,column:o+1},{row:n+1,column:o-1},{row:n-1,column:o-1}].filter(wa)})(e);let s=0;for(let a=0;a<t.length;a++)t[a].color==r&&s++;return s<=1},"5-6":r=>(e,t,s,a)=>{for(let n=0;n<t.length;n++)if(t[n].color==r){let o=!1;for(const l of t[n].cells)if(l.row==0||l.row==4||l.column==0||l.column==4){o=!0;break}if(!o)return!1}return!0},"7-8":r=>(e,t,s,a)=>{for(let n=0;n<4;n++)for(let o=0;o<4;o++)if(e[n][o]==r&&e[n+1][o]==r&&e[n][o+1]==r&&e[n+1][o+1]==r)return!1;return!0},"9-10":r=>(e,t,s,a)=>{for(let n=0;n<4;n++)for(let o=0;o<4;o++){let l=0;if(e[n][o]==r&&l++,e[n][o+1]==r&&l++,e[n+1][o]==r&&l++,e[n+1][o+1]==r&&l++,l==3)return!1}return!0},"11-12":r=>(e,t,s,a)=>{for(let n=0;n<5;n++)for(let o=0;o<5;o++){if(e[n][o]!=r)continue;let l,i,u,c;l=i=u=c=0;for(let d=1;d<=n&&e[n-d][o]==r;d++)l++;for(let d=1;d<=4-n&&e[n+d][o]==r;d++)i++;for(let d=1;d<=o&&e[n][o-d]==r;d++)u++;for(let d=1;d<=4-o&&e[n][o+d]==r;d++)c++;if(l+i!=u+c)return!1}return!0},"13-14":r=>(e,t,s,a)=>{for(let n=0;n<t.length;n++){if(t[n].color!=r)continue;let o=0;for(const l of t[n].cells){const{row:i,column:u}=l;let c=0;if(i>0&&e[i-1][u]==r&&c++,i<4&&e[i+1][u]==r&&c++,u>0&&e[i][u-1]==r&&c++,u<4&&e[i][u+1]==r&&c++,c>2||c<1)return!1;c==1&&o++}if(o!=2)return!1}return!0},"15-16":r=>(e,t,s,a)=>{for(let n=0;n<5;n++)for(let o=0;o<5;o++){if(e[n][o]!=r)continue;let l=0;if(n>0&&e[n-1][o]==r&&l++,n<4&&e[n+1][o]==r&&l++,o>0&&e[n][o-1]==r&&l++,o<4&&e[n][o+1]==r&&l++,l!=2)return!1}return!0},"17-18":r=>(e,t,s,a)=>{for(let n=0;n<t.length;n++)if(t[n].color==r&&t[n].cells.length!=s)return!1;return!0},"19-20":r=>(e,t,s,a)=>{for(let n=0;n<t.length;n++){if(t[n].color!=r)continue;let o=0;for(const l of t[n].cells)It(a,l)&&o++;if(o!=s)return!1}return!0},"21-22":r=>(e,t,s,a)=>{for(let n=0;n<t.length;n++){if(t[n].color!=r)continue;let o=0;for(const l of t[n].cells)It(a,l)&&o++;if(o>s)return!1}return!0}},jf={"1-2":r=>(e,t,s,a,n)=>!0,"3-4":r=>(e,t,s,a,n)=>{let o=0;return a>0&&e[a-1][n]==r&&o++,a<4&&e[a+1][n]==r&&o++,n>0&&e[a][n-1]==r&&o++,n<4&&e[a][n+1]==r&&o++,o==s},"5-6":r=>(e,t,s,a,n)=>{let o=0;for(let l=Math.max(0,a-1);l<=Math.min(4,a+1);l++)for(let i=Math.max(0,n-1);i<=Math.min(4,n+1);i++)e[l][i]!=r&&o++;return o==s},"7-8":r=>(e,t,s,a,n)=>{let o=0;for(let l=0;l<5;l++)e[l][n]!=r&&o++;return o==s},"9-10":r=>(e,t,s,a,n)=>{let o=0;for(let l=0;l<5;l++)e[a][l]!=r&&o++;return o==s},"11-12":r=>(e,t,s,a,n)=>{for(let o=0;o<t.length;o++)if(It(t[o].cells,{row:a,column:n}))return t[o].cells.length==s;return!1},"13-14":r=>(e,t,s,a,n)=>{let o=0;for(let l=0;l<t.length;l++)t[l].color!=r&&(It(t[l].cells,{row:a-1,column:n})||It(t[l].cells,{row:a+1,column:n})||It(t[l].cells,{row:a,column:n-1})||It(t[l].cells,{row:a,column:n+1}))&&(o+=t[l].cells.length);return o==s},"15-16":r=>(e,t,s,a,n)=>{let o,l,i,u;o=l=i=u=0;for(let c=1;c<=a&&e[a-c][n]==r;c++)o++;for(let c=1;c<=4-a&&e[a+c][n]==r;c++)l++;for(let c=1;c<=n&&e[a][n-c]==r;c++)i++;for(let c=1;c<=4-n&&e[a][n+c]==r;c++)u++;return o+l+i+u+1==s},"17-18":r=>(e,t,s,a,n)=>{let o,l,i,u;o=l=i=u=0;for(let c=1;c<=a&&e[a-c][n]!=r;c++)o++;for(let c=1;c<=4-a&&e[a+c][n]!=r;c++)l++;for(let c=1;c<=n&&e[a][n-c]!=r;c++)i++;for(let c=1;c<=4-n&&e[a][n+c]!=r;c++)u++;return o+l+i+u==s}};var Vf={global_constraint:[[1,1],[7,1]],puzzles:[{clues:[[18,8,0,4],[18,5,1,2],[18,2,3,3],[18,5,4,0]],answer:[[!0,!0,!0,!0,!1],[!1,!0,!1,!0,!0],[!1,!0,!0,!1,!0],[!0,!0,!1,!1,!0],[!1,!0,!0,!0,!0]]},{clues:[[18,1,0,4],[18,7,1,4],[18,1,3,0],[18,5,3,1]],answer:[[!1,!0,!1,!0,!1],[!0,!0,!0,!0,!1],[!1,!0,!1,!0,!0],[!1,!1,!0,!1,!0],[!0,!0,!0,!0,!0]]},{clues:[[18,4,0,2],[18,7,2,1],[18,1,3,0],[18,2,3,4]],answer:[[!0,!0,!1,!1,!1],[!1,!0,!0,!1,!1],[!1,!1,!0,!0,!0],[!1,!0,!1,!0,!1],[!1,!0,!0,!0,!1]]},{clues:[[18,4,1,3],[18,8,2,2],[18,3,3,4],[18,4,4,4]],answer:[[!0,!0,!0,!0,!0],[!0,!1,!0,!1,!0],[!0,!0,!1,!0,!0],[!0,!1,!0,!1,!1],[!0,!0,!0,!0,!1]]},{clues:[[18,4,1,2],[18,5,1,3],[18,8,2,0],[18,1,4,2]],answer:[[!0,!1,!0,!0,!0],[!0,!0,!1,!1,!0],[!1,!0,!0,!0,!0],[!0,!0,!1,!0,!1],[!0,!1,!1,!0,!1]]},{clues:[[18,2,0,0],[18,6,2,4],[18,6,3,1],[18,4,4,4]],answer:[[!1,!0,!0,!1,!0],[!1,!0,!1,!0,!0],[!0,!0,!0,!0,!1],[!0,!1,!0,!1,!1],[!0,!0,!0,!0,!1]]},{clues:[[18,3,0,0],[18,1,2,3],[18,7,4,4]],answer:[[!1,!1,!0,!0,!0],[!0,!0,!0,!1,!0],[!0,!1,!1,!1,!0],[!0,!0,!1,!1,!0],[!1,!0,!0,!0,!1]]},{clues:[[18,3,0,3],[18,4,0,4],[18,2,1,3],[18,6,2,1],[18,6,3,3]],answer:[[!0,!0,!0,!1,!1],[!0,!1,!1,!1,!0],[!0,!1,!0,!0,!0],[!0,!0,!0,!1,!0],[!1,!0,!1,!0,!0]]},{clues:[[18,4,0,3],[18,3,1,1],[18,1,1,2],[18,2,2,0],[18,3,2,2],[18,1,4,4]],answer:[[!1,!1,!1,!1,!1],[!1,!1,!1,!0,!1],[!1,!0,!1,!0,!1],[!0,!0,!0,!0,!1],[!1,!0,!1,!0,!1]]},{clues:[[18,2,0,1],[18,4,1,4],[18,7,2,1],[18,8,3,3]],answer:[[!0,!1,!1,!0,!1],[!0,!0,!1,!0,!1],[!0,!1,!0,!0,!0],[!0,!0,!0,!1,!0],[!1,!0,!1,!0,!0]]}]},Wf={global_constraint:[[2,1],[5,1]],puzzles:[{clues:[[16,3,0,0],[16,6,0,2],[16,4,1,2],[16,7,2,0],[16,4,3,2],[16,5,3,4]],answer:[[!1,!1,!1,!0,!1],[!0,!0,!1,!0,!1],[!1,!1,!1,!1,!1],[!1,!0,!1,!0,!1],[!1,!0,!0,!0,!1]]},{clues:[[16,6,0,1],[16,5,0,4],[16,7,1,2],[16,9,3,3],[16,7,4,4]],answer:[[!1,!1,!1,!1,!1],[!0,!1,!1,!1,!0],[!0,!0,!1,!1,!1],[!1,!1,!1,!1,!1],[!1,!1,!1,!1,!1]]},{clues:[[16,2,0,1],[16,4,0,2],[16,4,0,4],[16,5,2,2],[16,3,3,3]],answer:[[!0,!1,!1,!0,!1],[!0,!0,!1,!0,!1],[!0,!0,!1,!1,!1],[!0,!0,!0,!1,!1],[!0,!0,!0,!0,!0]]},{clues:[[16,5,1,0],[16,8,2,2],[16,5,2,4],[16,9,4,1],[16,8,4,2],[16,8,4,3]],answer:[[!0,!1,!0,!0,!0],[!1,!1,!1,!1,!0],[!1,!1,!1,!1,!1],[!0,!1,!1,!1,!0],[!1,!1,!1,!1,!1]]},{clues:[[16,7,0,1],[16,6,1,0],[16,7,2,1],[16,6,3,2],[16,8,3,4],[16,5,4,4]],answer:[[!1,!1,!1,!0,!0],[!1,!1,!0,!0,!1],[!1,!1,!1,!0,!1],[!1,!1,!1,!1,!1],[!1,!1,!0,!1,!1]]},{clues:[[16,8,0,0],[16,7,1,0],[16,4,2,0],[16,5,3,1],[16,5,4,3]],answer:[[!1,!1,!1,!1,!1],[!1,!1,!1,!1,!0],[!1,!0,!0,!0,!0],[!1,!1,!1,!1,!0],[!0,!1,!1,!1,!1]]},{clues:[[16,6,0,3],[16,7,1,0],[16,5,2,1],[16,7,2,3],[16,6,3,2],[16,3,4,1]],answer:[[!1,!0,!1,!1,!1],[!1,!1,!1,!1,!1],[!1,!1,!1,!1,!0],[!0,!0,!1,!1,!0],[!1,!1,!1,!0,!0]]},{clues:[[16,4,0,0],[16,3,0,2],[16,5,0,4],[16,5,3,3],[16,3,4,1],[16,6,4,3]],answer:[[!1,!0,!1,!1,!1],[!1,!0,!0,!1,!1],[!1,!1,!1,!1,!1],[!1,!1,!0,!1,!0],[!0,!1,!0,!1,!1]]},{clues:[[16,5,0,3],[16,5,1,0],[16,6,1,1],[16,3,1,4],[16,7,2,1],[16,3,4,2]],answer:[[!1,!1,!1,!1,!1],[!1,!1,!0,!0,!1],[!1,!1,!1,!0,!1],[!1,!1,!0,!0,!0],[!0,!1,!1,!1,!0]]},{clues:[[16,2,0,1],[16,3,1,0],[16,5,3,3],[16,6,4,1],[16,7,4,3],[16,8,4,4]],answer:[[!1,!1,!0,!0,!1],[!1,!0,!0,!1,!1],[!1,!1,!0,!1,!1],[!0,!1,!0,!1,!1],[!0,!1,!1,!1,!1]]}]},Kf={global_constraint:[[2,1],[17,1]],puzzles:[{clues:[[16,9,1,3],[16,5,1,4],[16,2,3,0],[16,6,4,1]],answer:[[!1,!0,!1,!1,!0],[!1,!1,!1,!1,!1],[!0,!1,!1,!1,!0],[!1,!1,!0,!1,!1],[!0,!1,!1,!1,!0]]},{clues:[[16,3,1,1],[16,6,2,1],[16,4,4,2],[16,3,4,4]],answer:[[!1,!0,!1,!1,!1],[!1,!1,!0,!1,!0],[!1,!1,!1,!1,!1],[!1,!0,!1,!1,!1],[!0,!1,!1,!0,!1]]},{clues:[[16,7,1,4],[16,3,2,3],[16,3,4,2]],answer:[[!1,!1,!1,!0,!1],[!0,!1,!1,!1,!1],[!1,!1,!0,!1,!1],[!1,!1,!1,!0,!1],[!1,!0,!1,!1,!0]]},{clues:[[16,3,0,0],[16,4,0,1],[16,4,4,3],[16,8,4,4]],answer:[[!1,!1,!1,!0,!1],[!0,!1,!1,!1,!1],[!1,!0,!1,!1,!1],[!1,!1,!1,!0,!1],[!0,!1,!1,!1,!1]]},{clues:[[16,5,0,0],[16,9,2,3],[16,6,2,4],[16,8,3,3],[16,8,4,2]],answer:[[!1,!1,!1,!1,!1],[!0,!1,!1,!1,!0],[!1,!1,!1,!1,!1],[!0,!1,!1,!1,!1],[!1,!1,!1,!1,!0]]},{clues:[[16,7,1,0],[16,5,3,1],[16,9,3,2],[16,7,4,3]],answer:[[!0,!1,!1,!1,!1],[!1,!1,!1,!1,!0],[!1,!0,!1,!1,!1],[!1,!1,!1,!1,!1],[!1,!0,!1,!1,!1]]},{clues:[[16,5,0,1],[16,4,2,3],[16,8,3,0],[16,8,4,4]],answer:[[!1,!1,!1,!1,!1],[!1,!0,!1,!0,!1],[!1,!1,!0,!1,!1],[!1,!1,!1,!1,!1],[!0,!1,!1,!1,!1]]},{clues:[[16,9,0,1],[16,5,0,2],[16,6,1,0],[16,6,3,4],[16,7,4,2]],answer:[[!1,!1,!1,!1,!1],[!1,!1,!0,!1,!1],[!1,!1,!1,!1,!0],[!1,!1,!1,!1,!1],[!1,!1,!1,!1,!1]]},{clues:[[16,8,1,4],[16,7,2,2],[16,9,2,3],[16,9,3,0],[16,5,4,3]],answer:[[!1,!1,!0,!1,!1],[!1,!1,!1,!1,!1],[!1,!1,!1,!1,!1],[!1,!1,!1,!1,!1],[!1,!1,!0,!1,!0]]},{clues:[[16,6,0,2],[16,5,1,1],[16,7,2,0],[16,3,2,4]],answer:[[!1,!0,!1,!1,!1],[!1,!1,!1,!1,!0],[!1,!1,!1,!0,!1],[!1,!0,!1,!1,!1],[!1,!1,!0,!1,!1]]}]},Zf={global_constraint:[],puzzles:[{clues:[[14,3,0,1],[14,7,1,1],[14,6,1,4],[14,4,3,4],[14,7,4,2]],answer:[[!1,!1,!0,!0,!0],[!0,!1,!1,!1,!1],[!0,!0,!1,!0,!0],[!0,!0,!1,!0,!1],[!0,!0,!1,!1,!0]]},{clues:[[14,9,0,0],[14,9,0,2],[14,9,1,3],[14,10,1,4],[14,3,2,0],[14,10,4,3]],answer:[[!1,!0,!1,!1,!0],[!1,!0,!0,!1,!1],[!1,!1,!0,!0,!0],[!0,!0,!1,!0,!0],[!0,!1,!0,!1,!0]]},{clues:[[14,1,1,0],[14,3,1,4],[14,1,2,2],[14,7,3,2],[14,4,3,4]],answer:[[!0,!1,!1,!0,!0],[!1,!1,!0,!1,!1],[!1,!1,!1,!1,!0],[!0,!0,!1,!0,!1],[!0,!0,!1,!0,!0]]},{clues:[[14,8,0,0],[14,3,0,2],[14,2,0,4],[14,8,2,2],[14,2,3,3],[14,8,4,2]],answer:[[!1,!0,!1,!0,!1],[!0,!1,!0,!1,!0],[!0,!0,!1,!1,!1],[!0,!0,!1,!1,!0],[!0,!0,!1,!0,!1]]},{clues:[[14,3,0,2],[14,2,2,1],[14,5,2,2],[14,7,2,4],[14,2,3,0]],answer:[[!0,!0,!1,!1,!0],[!0,!1,!1,!1,!0],[!1,!1,!1,!0,!1],[!1,!0,!1,!0,!0],[!1,!0,!1,!0,!0]]},{clues:[[14,2,0,4],[14,8,1,4],[14,8,2,3],[14,2,3,0],[14,8,3,1],[14,8,4,4]],answer:[[!1,!1,!0,!0,!1],[!0,!1,!1,!1,!1],[!0,!1,!0,!1,!0],[!1,!1,!0,!0,!0],[!1,!0,!0,!0,!1]]},{clues:[[14,1,0,0],[14,2,1,4],[14,3,2,1],[14,6,2,3],[14,2,4,1],[14,4,4,3]],answer:[[!1,!0,!1,!0,!1],[!1,!1,!1,!0,!1],[!0,!1,!0,!1,!1],[!1,!0,!1,!0,!0],[!1,!1,!0,!1,!0]]},{clues:[[14,2,0,2],[14,3,1,2],[14,8,1,4],[14,9,3,0],[14,7,4,2]],answer:[[!1,!0,!1,!1,!1],[!1,!0,!1,!0,!1],[!0,!1,!1,!1,!0],[!1,!0,!0,!0,!0],[!0,!1,!1,!0,!0]]},{clues:[[14,6,0,2],[14,9,1,3],[14,10,1,4],[14,9,4,0]],answer:[[!0,!0,!1,!1,!0],[!0,!0,!1,!1,!1],[!0,!0,!1,!0,!0],[!1,!1,!0,!0,!0],[!1,!0,!0,!0,!0]]},{clues:[[14,3,0,2],[14,2,0,4],[14,1,1,0],[14,4,2,3],[14,2,3,0],[14,3,3,2],[14,1,4,2]],answer:[[!1,!0,!1,!1,!1],[!1,!1,!0,!1,!0],[!0,!1,!0,!1,!0],[!1,!0,!1,!1,!1],[!1,!1,!1,!0,!1]]}]},qf={global_constraint:[[19,1],[20,1]],puzzles:[{clues:[[12,5,0,3],[12,3,1,0],[11,8,1,3],[2,1,3,3],[1,1,4,2]],answer:[[!1,!0,!1,!1,!1],[!1,!0,!1,!0,!1],[!1,!0,!0,!0,!0],[!0,!1,!1,!1,!0],[!0,!0,!0,!1,!1]]},{clues:[[2,1,0,2],[1,1,0,3],[2,1,0,4],[12,1,1,0],[2,1,3,0],[11,3,3,2],[12,6,3,3],[1,1,3,4]],answer:[[!0,!0,!1,!0,!1],[!1,!0,!0,!0,!0],[!0,!0,!1,!1,!1],[!1,!1,!0,!1,!0],[!1,!0,!0,!1,!1]]},{clues:[[2,1,0,2],[2,1,1,1],[11,3,1,2],[12,3,2,3],[1,1,4,0],[12,1,4,1]],answer:[[!0,!0,!1,!1,!1],[!0,!1,!0,!0,!0],[!0,!0,!1,!1,!1],[!0,!0,!0,!0,!0],[!0,!1,!0,!0,!0]]},{clues:[[1,1,1,2],[2,1,2,0],[11,3,2,1],[12,4,2,2],[11,1,2,4],[1,1,4,4]],answer:[[!1,!1,!1,!1,!1],[!1,!1,!0,!0,!1],[!1,!0,!1,!1,!0],[!1,!0,!0,!1,!1],[!1,!1,!1,!0,!0]]},{clues:[[1,1,0,0],[12,9,1,1],[12,1,1,4],[11,8,2,1],[2,1,4,3]],answer:[[!0,!0,!0,!0,!0],[!1,!1,!1,!0,!1],[!1,!0,!1,!1,!0],[!1,!0,!0,!0,!0],[!1,!1,!0,!1,!0]]},{clues:[[2,1,1,2]],answer:[[!1,!1,!1,!1,!1],[!1,!1,!1,!1,!1],[!1,!1,!1,!1,!1],[!1,!1,!1,!1,!1],[!1,!1,!1,!1,!1]]},{clues:[[12,7,1,4],[12,2,2,3],[1,1,3,3]],answer:[[!1,!1,!1,!1,!1],[!1,!0,!0,!0,!1],[!0,!0,!1,!1,!0],[!0,!0,!0,!0,!0],[!0,!0,!0,!0,!0]]},{clues:[[11,7,0,1],[12,4,0,2],[1,1,0,3],[2,1,0,4],[12,9,2,4]],answer:[[!0,!0,!1,!0,!1],[!0,!1,!1,!0,!0],[!0,!0,!1,!0,!1],[!1,!0,!0,!1,!1],[!1,!1,!1,!1,!1]]},{clues:[[2,1,1,2],[12,5,2,0],[12,7,2,4],[1,1,3,0]],answer:[[!1,!0,!0,!0,!1],[!1,!0,!1,!0,!1],[!1,!1,!0,!0,!1],[!0,!1,!0,!1,!1],[!0,!0,!0,!1,!1]]},{clues:[[12,4,2,2],[12,9,3,3],[1,1,4,0]],answer:[[!0,!0,!0,!0,!1],[!0,!1,!1,!0,!1],[!0,!1,!1,!0,!1],[!0,!0,!0,!1,!1],[!0,!1,!1,!1,!1]]}]},$f={global_constraint:[],puzzles:[{clues:[[6,3,0,0],[6,5,0,3],[6,5,2,2],[6,2,2,4],[6,2,3,0],[6,2,3,4],[6,4,4,2]],answer:[[!1,!0,!0,!1,!0],[!0,!0,!0,!0,!0],[!1,!1,!1,!1,!1],[!1,!0,!0,!1,!1],[!1,!0,!1,!0,!0]]},{clues:[[6,4,0,1],[6,3,0,4],[6,5,1,1],[6,3,2,0],[6,2,3,0],[6,5,3,4],[6,3,4,1]],answer:[[!0,!1,!0,!0,!1],[!0,!1,!0,!0,!0],[!1,!0,!1,!0,!0],[!1,!0,!0,!0,!1],[!1,!1,!0,!0,!0]]},{clues:[[6,3,0,2],[6,3,1,1],[6,3,1,4],[6,2,2,0],[6,5,2,3],[6,5,3,1],[6,3,4,1],[6,3,4,2],[6,3,4,4]],answer:[[!1,!0,!1,!0,!0],[!1,!1,!1,!0,!1],[!1,!0,!0,!1,!1],[!0,!1,!0,!0,!0],[!0,!1,!1,!0,!1]]},{clues:[[6,2,0,2],[6,3,1,0],[6,5,1,1],[6,4,1,3],[6,5,2,3],[6,4,3,0],[6,4,4,1],[6,5,4,3]],answer:[[!0,!1,!1,!0,!0],[!1,!1,!0,!1,!1],[!0,!0,!0,!1,!1],[!1,!0,!0,!0,!0],[!0,!1,!0,!1,!0]]},{clues:[[6,3,0,1],[6,1,0,4],[6,3,1,0],[6,6,1,2],[6,3,2,0],[6,1,2,4],[6,5,3,1],[6,6,3,3]],answer:[[!0,!1,!0,!0,!1],[!1,!0,!1,!1,!1],[!1,!0,!0,!0,!1],[!0,!1,!0,!1,!1],[!1,!1,!0,!0,!0]]},{clues:[[6,1,0,0],[6,4,0,3],[6,5,1,3],[6,3,2,1],[6,2,2,4],[6,3,4,0],[6,2,4,3]],answer:[[!1,!0,!0,!1,!0],[!1,!1,!0,!1,!0],[!1,!1,!1,!0,!1],[!0,!0,!1,!1,!1],[!1,!0,!0,!1,!0]]},{clues:[[6,1,1,0],[6,2,1,2],[6,2,1,3],[6,1,1,4],[6,3,3,1],[6,3,3,2],[6,1,3,3],[6,1,4,2]],answer:[[!1,!1,!1,!1,!0],[!1,!1,!1,!1,!1],[!1,!0,!0,!1,!1],[!1,!1,!1,!1,!1],[!1,!0,!1,!1,!1]]},{clues:[[6,1,0,0],[6,2,0,1],[6,2,0,2],[6,3,1,3],[6,3,3,1],[6,5,3,2],[6,1,4,3]],answer:[[!1,!1,!1,!1,!1],[!1,!0,!0,!1,!1],[!1,!0,!0,!0,!1],[!1,!1,!1,!0,!1],[!1,!0,!1,!1,!1]]},{clues:[[6,2,0,0],[6,6,1,1],[6,6,1,3],[6,4,1,4],[6,4,3,1],[6,4,3,4],[6,4,4,3]],answer:[[!1,!0,!0,!0,!0],[!0,!1,!0,!1,!1],[!0,!0,!1,!0,!0],[!1,!1,!0,!0,!1],[!1,!1,!0,!1,!0]]},{clues:[[6,3,0,4],[6,4,1,0],[6,7,1,1],[6,3,3,0],[6,2,3,4],[6,1,4,1],[6,3,4,2]],answer:[[!0,!0,!0,!0,!1],[!1,!1,!0,!0,!0],[!0,!0,!0,!1,!1],[!1,!0,!1,!0,!1],[!1,!1,!1,!0,!1]]}]},Xf={global_constraint:[[4,1],[7,1],[10,1],[22,1]],puzzles:[{clues:[[12,4,0,4],[12,2,1,0],[12,4,3,3],[12,4,4,1]],answer:[[!0,!0,!0,!1,!1],[!1,!1,!0,!1,!1],[!0,!0,!1,!0,!0],[!1,!1,!0,!1,!1],[!1,!1,!0,!1,!1]]},{clues:[[12,3,1,0],[12,2,1,3],[12,2,3,1],[12,4,3,4]],answer:[[!1,!0,!1,!0,!0],[!1,!0,!0,!1,!1],[!1,!0,!1,!0,!0],[!0,!1,!0,!1,!1],[!0,!1,!0,!1,!1]]},{clues:[[12,3,1,1],[12,2,1,4],[12,2,3,4],[12,4,4,2]],answer:[[!0,!0,!0,!0,!1],[!1,!1,!1,!0,!1],[!0,!0,!0,!1,!0],[!0,!1,!1,!0,!1],[!0,!1,!1,!0,!1]]},{clues:[[12,1,0,2],[12,2,1,0],[12,1,1,4],[12,2,3,0],[12,2,3,4]],answer:[[!0,!0,!1,!0,!0],[!1,!1,!0,!0,!1],[!0,!0,!1,!1,!0],[!1,!1,!0,!0,!1],[!0,!0,!1,!0,!1]]},{clues:[[12,1,0,0],[12,4,1,4],[12,8,4,3]],answer:[[!1,!0,!0,!0,!0],[!0,!1,!1,!1,!1],[!1,!0,!0,!0,!0],[!0,!1,!1,!1,!1],[!0,!1,!1,!1,!1]]},{clues:[[12,2,0,0],[12,1,0,3],[12,4,3,1],[12,4,3,3],[12,1,4,2]],answer:[[!1,!1,!0,!1,!0],[!0,!0,!1,!0,!0],[!1,!1,!0,!1,!1],[!1,!1,!0,!1,!1],[!0,!0,!1,!0,!0]]},{clues:[[12,8,0,3],[12,1,2,1]],answer:[[!0,!1,!0,!1,!1],[!1,!0,!0,!1,!1],[!0,!1,!0,!1,!1],[!1,!0,!0,!1,!1],[!0,!1,!1,!0,!0]]},{clues:[[12,1,0,2],[12,1,0,4],[12,3,1,0],[12,2,2,2],[12,3,4,4]],answer:[[!0,!0,!1,!0,!1],[!1,!0,!0,!1,!0],[!1,!0,!1,!0,!1],[!1,!0,!1,!0,!1],[!0,!1,!0,!0,!1]]},{clues:[[12,3,2,2],[12,3,2,4],[12,3,3,0],[12,1,4,4]],answer:[[!0,!0,!1,!0,!1],[!1,!0,!1,!0,!1],[!1,!0,!1,!0,!1],[!1,!0,!0,!1,!0],[!0,!1,!1,!0,!1]]},{clues:[[12,4,1,1],[12,2,2,4],[12,3,3,1],[12,1,4,0],[12,1,4,4]],answer:[[!0,!1,!1,!0,!0],[!0,!1,!1,!0,!1],[!1,!0,!0,!0,!1],[!0,!1,!1,!1,!0],[!1,!0,!0,!0,!1]]}]},Jf={global_constraint:[[1,1],[7,1],[20,1]],puzzles:[{clues:[[2,1,0,4],[12,3,1,2],[12,1,2,1],[12,6,3,4]],answer:[[!0,!1,!1,!0,!1],[!0,!0,!1,!0,!1],[!0,!1,!0,!0,!0],[!0,!0,!0,!1,!1],[!0,!1,!1,!1,!1]]},{clues:[[12,1,0,0],[12,1,1,1],[12,4,4,1],[12,10,4,3]],answer:[[!1,!0,!0,!1,!1],[!0,!1,!0,!1,!1],[!0,!0,!0,!1,!1],[!1,!1,!0,!1,!1],[!1,!1,!0,!1,!1]]},{clues:[[2,1,0,0],[2,1,0,2],[12,1,0,4],[12,1,3,1]],answer:[[!1,!0,!1,!0,!1],[!1,!0,!1,!0,!0],[!0,!0,!1,!1,!0],[!0,!1,!0,!1,!0],[!0,!0,!0,!0,!0]]},{clues:[[12,2,1,0],[2,1,1,2],[12,6,3,0],[12,6,3,4]],answer:[[!1,!0,!0,!1,!1],[!1,!0,!1,!0,!1],[!0,!0,!0,!0,!1],[!1,!1,!1,!0,!1],[!1,!1,!1,!0,!1]]},{clues:[[12,6,0,3],[2,1,1,2],[12,1,4,0]],answer:[[!0,!0,!0,!1,!1],[!0,!1,!1,!0,!1],[!0,!1,!1,!0,!1],[!0,!0,!1,!0,!1],[!1,!0,!0,!0,!1]]},{clues:[[12,1,0,4],[12,3,1,0],[12,6,3,4],[12,2,4,2]],answer:[[!1,!0,!0,!0,!1],[!1,!0,!1,!0,!0],[!1,!0,!1,!1,!1],[!0,!0,!0,!0,!1],[!0,!1,!1,!0,!1]]},{clues:[[12,4,1,3],[12,1,2,4],[2,1,4,4]],answer:[[!0,!0,!0,!0,!0],[!0,!1,!1,!1,!0],[!0,!0,!1,!0,!1],[!1,!0,!0,!0,!0],[!1,!1,!1,!1,!1]]},{clues:[[12,1,1,0],[12,2,1,3],[12,3,3,3]],answer:[[!0,!0,!0,!0,!0],[!1,!0,!1,!1,!0],[!0,!0,!0,!0,!0],[!0,!1,!1,!1,!0],[!0,!0,!0,!0,!0]]},{clues:[[12,7,2,2],[12,5,3,0],[2,1,3,3]],answer:[[!0,!0,!1,!1,!1],[!1,!0,!1,!1,!1],[!1,!0,!1,!0,!0],[!1,!0,!0,!1,!0],[!1,!1,!0,!0,!0]]},{clues:[[12,2,0,3],[12,4,1,0],[12,1,1,2],[12,1,2,3],[12,1,4,3]],answer:[[!0,!0,!0,!1,!1],[!1,!0,!1,!0,!0],[!1,!0,!0,!1,!0],[!1,!1,!0,!0,!0],[!0,!0,!0,!1,!0]]}]},Qf={global_constraint:[[1,1],[6,1]],puzzles:[{clues:[[3,3,0,1],[4,4,1,3],[3,2,3,1],[3,1,3,2],[4,1,4,0]],answer:[[!0,!0,!0,!1,!1],[!0,!0,!1,!1,!1],[!0,!1,!1,!1,!1],[!0,!0,!0,!1,!1],[!1,!1,!1,!1,!1]]},{clues:[[3,2,0,2],[3,2,1,0],[3,3,1,1],[4,2,2,0],[4,1,2,1],[3,1,2,3],[4,2,4,0],[3,1,4,3]],answer:[[!0,!0,!0,!1,!1],[!0,!0,!0,!1,!1],[!1,!1,!0,!0,!1],[!1,!0,!0,!1,!1],[!1,!1,!0,!0,!1]]},{clues:[[3,2,0,1],[3,2,1,2],[3,1,2,0],[4,4,2,3],[4,2,2,4],[4,3,3,3],[3,1,4,2]],answer:[[!1,!0,!0,!0,!0],[!1,!0,!0,!1,!0],[!0,!0,!1,!1,!1],[!1,!0,!0,!1,!1],[!1,!1,!0,!1,!1]]},{clues:[[4,2,1,0],[4,3,1,2],[4,2,2,4],[3,1,3,0],[4,2,3,1],[4,1,3,2],[4,1,3,4]],answer:[[!1,!1,!1,!1,!1],[!1,!1,!1,!1,!1],[!0,!0,!0,!0,!1],[!0,!1,!1,!0,!1],[!1,!1,!0,!0,!0]]},{clues:[[3,3,0,2],[3,2,0,4],[4,3,1,0],[3,3,1,2],[4,2,2,1],[3,1,2,4],[4,2,3,0],[3,3,4,2],[3,1,4,4]],answer:[[!1,!0,!0,!0,!0],[!1,!1,!0,!0,!0],[!1,!1,!0,!1,!0],[!1,!0,!0,!1,!1],[!1,!0,!0,!0,!0]]},{clues:[[4,2,0,1],[3,3,1,4],[4,3,2,1],[4,4,2,2],[4,1,2,3],[3,1,3,0],[3,2,3,4]],answer:[[!1,!1,!0,!0,!0],[!1,!1,!1,!0,!0],[!1,!1,!1,!1,!0],[!0,!0,!1,!0,!0],[!1,!0,!0,!0,!1]]},{clues:[[4,2,0,1],[3,1,0,2],[4,1,1,1],[3,1,1,3],[4,2,2,3],[3,4,3,1],[3,1,4,1]],answer:[[!1,!1,!0,!1,!1],[!0,!1,!0,!0,!1],[!0,!0,!0,!1,!1],[!0,!0,!0,!1,!1],[!1,!0,!1,!1,!1]]},{clues:[[3,2,0,2],[3,1,0,3],[3,1,2,0],[4,1,2,2],[4,4,2,3],[4,1,4,0],[3,1,4,4]],answer:[[!1,!1,!0,!0,!1],[!1,!0,!0,!1,!1],[!0,!0,!1,!1,!1],[!1,!0,!0,!1,!1],[!1,!0,!0,!0,!0]]},{clues:[[3,1,1,0],[4,3,1,3],[3,2,1,4],[4,3,2,1],[4,3,2,2],[3,3,4,3]],answer:[[!1,!1,!1,!1,!0],[!0,!1,!1,!1,!0],[!0,!1,!1,!1,!0],[!0,!1,!0,!0,!0],[!0,!0,!0,!0,!0]]},{clues:[[4,2,0,2],[4,1,1,3],[3,1,2,1],[3,3,3,1],[3,3,3,2],[3,3,4,1],[3,2,4,4]],answer:[[!1,!1,!1,!0,!0],[!1,!1,!1,!1,!0],[!1,!0,!1,!0,!0],[!1,!0,!0,!0,!0],[!0,!0,!0,!0,!0]]}]},em={global_constraint:[[1,1],[6,1],[13,1]],puzzles:[{clues:[[3,1,0,0],[8,1,0,3],[10,2,2,3],[10,2,3,4],[8,1,4,4]],answer:[[!0,!1,!1,!1,!1],[!0,!1,!0,!0,!0],[!0,!1,!0,!1,!1],[!0,!1,!0,!1,!1],[!0,!0,!0,!1,!1]]},{clues:[[8,3,0,1],[10,2,1,2],[8,3,1,3],[10,3,3,2],[10,4,4,4]],answer:[[!1,!1,!1,!0,!0],[!1,!0,!1,!1,!0],[!0,!0,!1,!1,!0],[!0,!1,!1,!0,!0],[!0,!0,!0,!0,!1]]},{clues:[[3,1,1,1],[8,3,1,3],[3,1,3,2]],answer:[[!1,!0,!0,!0,!0],[!1,!0,!1,!1,!0],[!1,!1,!1,!0,!0],[!1,!1,!0,!0,!1],[!1,!1,!1,!1,!1]]},{clues:[[8,1,1,0],[10,1,2,0],[8,4,4,3],[3,1,4,4]],answer:[[!0,!0,!0,!0,!1],[!1,!1,!1,!0,!1],[!1,!1,!1,!0,!1],[!1,!1,!1,!0,!0],[!1,!1,!1,!1,!0]]},{clues:[[3,2,0,3],[8,3,1,0],[3,1,1,1],[10,3,2,4]],answer:[[!1,!1,!1,!0,!0],[!1,!0,!1,!0,!1],[!0,!0,!1,!0,!1],[!0,!1,!1,!0,!1],[!0,!0,!0,!0,!1]]},{clues:[[3,1,0,0],[10,4,1,4],[8,3,2,2],[10,3,3,4]],answer:[[!0,!1,!1,!1,!1],[!0,!0,!0,!0,!1],[!1,!1,!1,!0,!1],[!0,!1,!0,!0,!1],[!0,!0,!0,!1,!1]]},{clues:[[8,3,0,0],[8,1,0,1],[3,1,1,0],[3,2,1,3],[8,1,2,2],[10,2,2,3]],answer:[[!1,!1,!1,!0,!1],[!0,!1,!1,!0,!0],[!0,!1,!1,!1,!0],[!0,!0,!0,!0,!0],[!1,!1,!1,!1,!1]]},{clues:[[8,1,0,3],[3,1,1,2],[10,4,1,3],[3,2,1,4],[10,3,3,2]],answer:[[!1,!1,!1,!1,!0],[!0,!0,!0,!1,!0],[!0,!1,!1,!1,!0],[!0,!0,!1,!1,!0],[!1,!0,!0,!0,!0]]},{clues:[[3,1,1,3],[10,2,2,2],[8,3,4,0],[3,1,4,1]],answer:[[!0,!0,!0,!0,!1],[!0,!1,!1,!0,!1],[!0,!0,!1,!1,!1],[!1,!0,!1,!1,!1],[!1,!0,!1,!1,!1]]},{clues:[[10,2,0,0],[10,2,1,2],[10,1,2,3],[10,3,4,3],[8,1,4,4]],answer:[[!1,!0,!0,!1,!1],[!0,!0,!1,!1,!1],[!0,!1,!1,!1,!1],[!0,!1,!0,!0,!0],[!0,!0,!0,!1,!1]]}]},tm={global_constraint:[[2,1],[11,1]],puzzles:[{clues:[[14,2,0,1],[14,1,0,2],[14,4,2,4],[14,5,4,2]],answer:[[!0,!1,!1,!0,!1],[!1,!0,!1,!1,!1],[!1,!1,!1,!1,!1],[!1,!1,!1,!0,!0],[!1,!0,!1,!0,!0]]},{clues:[[14,1,0,1],[14,4,1,4],[14,6,2,1],[14,1,4,4]],answer:[[!0,!1,!1,!1,!1],[!1,!1,!0,!0,!1],[!0,!1,!0,!0,!1],[!1,!0,!1,!1,!1],[!1,!1,!1,!0,!1]]},{clues:[[14,1,0,4],[14,1,1,2],[14,2,2,0],[14,2,2,2],[14,1,3,0],[14,2,4,3]],answer:[[!1,!1,!0,!1,!1],[!0,!1,!1,!1,!0],[!1,!0,!1,!0,!1],[!1,!1,!1,!1,!1],[!0,!1,!0,!1,!0]]},{clues:[[14,5,2,1],[14,2,2,3],[14,1,2,4],[14,1,4,2],[14,1,4,4]],answer:[[!0,!0,!1,!1,!1],[!0,!0,!1,!0,!1],[!1,!1,!0,!1,!1],[!1,!1,!1,!1,!0],[!1,!0,!1,!1,!1]]},{clues:[[14,9,1,0],[14,9,1,4],[14,9,4,1],[14,9,4,3]],answer:[[!1,!1,!1,!1,!1],[!1,!0,!0,!0,!1],[!1,!0,!0,!0,!1],[!1,!0,!0,!0,!1],[!1,!1,!1,!1,!1]]},{clues:[[14,5,1,3],[14,2,2,4],[14,2,3,1],[14,1,4,2]],answer:[[!1,!0,!0,!1,!1],[!1,!0,!0,!1,!0],[!1,!1,!1,!1,!1],[!0,!1,!0,!1,!0],[!1,!1,!1,!1,!1]]},{clues:[[14,5,0,3],[14,1,4,0],[14,4,4,4]],answer:[[!1,!0,!0,!1,!0],[!1,!0,!0,!1,!1],[!1,!1,!1,!1,!1],[!0,!1,!0,!0,!1],[!1,!1,!0,!0,!1]]},{clues:[[14,5,1,3],[14,1,3,1],[14,2,3,2]],answer:[[!1,!0,!0,!1,!1],[!1,!0,!0,!1,!0],[!1,!1,!1,!1,!1],[!0,!1,!1,!0,!1],[!1,!1,!0,!1,!1]]},{clues:[[14,2,2,0],[14,5,2,2],[14,1,3,4]],answer:[[!1,!1,!0,!0,!1],[!0,!1,!0,!0,!1],[!1,!1,!1,!1,!1],[!0,!1,!0,!1,!1],[!1,!1,!1,!1,!0]]},{clues:[[14,2,0,3],[14,2,1,1],[14,4,2,3],[14,2,3,1]],answer:[[!1,!1,!0,!1,!0],[!0,!1,!1,!1,!1],[!1,!0,!1,!1,!1],[!1,!1,!1,!0,!0],[!1,!0,!1,!0,!0]]}]},rm={global_constraint:[[1,1],[2,1],[7,1],[8,1]],puzzles:[{clues:[[1,1,0,0],[2,1,0,1],[1,1,0,3],[1,1,1,2],[2,1,3,2]],answer:[[!0,!1,!0,!0,!0],[!0,!1,!0,!1,!0],[!0,!1,!0,!1,!0],[!0,!1,!1,!1,!0],[!0,!0,!0,!0,!0]]},{clues:[[1,1,0,2],[2,1,0,3],[1,1,1,1],[1,1,2,2]],answer:[[!1,!1,!0,!1,!1],[!1,!0,!0,!0,!1],[!1,!1,!0,!1,!1],[!1,!0,!0,!0,!1],[!1,!1,!1,!1,!1]]},{clues:[[1,1,0,0],[2,1,2,1],[2,1,2,2],[2,1,3,2],[2,1,3,3],[2,1,4,0]],answer:[[!0,!0,!0,!0,!0],[!1,!0,!1,!1,!0],[!1,!1,!1,!0,!0],[!1,!0,!1,!1,!0],[!1,!0,!0,!0,!0]]},{clues:[[2,1,0,2],[1,1,0,3],[2,1,0,4],[1,1,2,2],[1,1,3,2]],answer:[[!1,!1,!1,!0,!1],[!1,!0,!0,!0,!1],[!1,!1,!0,!1,!1],[!1,!0,!0,!0,!1],[!1,!1,!1,!1,!1]]},{clues:[[1,1,1,2],[1,1,2,3],[1,1,2,4],[2,1,3,2],[2,1,4,1],[1,1,4,4]],answer:[[!1,!1,!1,!1,!1],[!1,!0,!0,!0,!1],[!1,!0,!1,!0,!0],[!1,!0,!1,!1,!0],[!1,!1,!1,!0,!0]]},{clues:[[2,1,0,3],[2,1,1,1],[2,1,1,2],[2,1,2,2],[1,1,3,0],[2,1,4,4]],answer:[[!0,!0,!1,!1,!1],[!0,!1,!1,!0,!1],[!0,!0,!1,!0,!1],[!0,!1,!1,!0,!1],[!0,!0,!0,!0,!1]]},{clues:[[2,1,1,2],[1,1,1,4],[1,1,3,1],[1,1,3,3],[1,1,4,0]],answer:[[!0,!0,!0,!0,!0],[!0,!1,!1,!1,!0],[!0,!1,!0,!1,!1],[!0,!0,!0,!0,!1],[!0,!1,!1,!1,!1]]},{clues:[[2,1,0,4],[2,1,1,2],[1,1,2,4],[1,1,3,1],[1,1,4,0]],answer:[[!1,!1,!1,!1,!1],[!1,!0,!1,!0,!1],[!1,!0,!1,!0,!0],[!1,!0,!1,!1,!0],[!0,!0,!0,!0,!0]]},{clues:[[2,1,0,1],[2,1,1,2],[2,1,1,3],[2,1,4,1],[1,1,4,4]],answer:[[!1,!1,!1,!0,!0],[!1,!0,!1,!1,!0],[!1,!0,!0,!0,!0],[!1,!0,!1,!1,!0],[!1,!1,!1,!0,!0]]},{clues:[[2,1,2,0],[2,1,2,3],[2,1,3,1],[1,1,3,3]],answer:[[!1,!1,!1,!1,!1],[!1,!0,!0,!0,!1],[!1,!1,!0,!1,!1],[!0,!1,!0,!0,!1],[!0,!0,!0,!1,!1]]}]},sm={global_constraint:[],puzzles:[{clues:[[6,1,0,1],[3,2,0,3],[4,2,2,0],[4,4,2,2],[6,3,2,3],[6,3,3,0],[3,2,3,4],[6,2,4,2]],answer:[[!1,!1,!1,!0,!0],[!0,!1,!1,!0,!1],[!1,!1,!1,!1,!0],[!1,!0,!1,!1,!0],[!0,!0,!1,!1,!0]]},{clues:[[3,1,0,3],[5,2,1,1],[3,1,2,0],[6,8,2,3],[6,7,3,1],[6,2,4,4]],answer:[[!0,!0,!1,!0,!1],[!1,!0,!0,!0,!0],[!0,!0,!0,!1,!0],[!1,!1,!0,!0,!0],[!0,!0,!0,!1,!1]]},{clues:[[6,1,0,0],[4,1,0,4],[5,4,1,2],[3,1,1,4],[6,1,2,0],[5,3,2,3],[5,7,3,1],[6,5,3,2],[3,1,3,4],[5,3,4,3]],answer:[[!1,!0,!0,!1,!1],[!1,!1,!0,!0,!0],[!1,!1,!1,!0,!1],[!1,!0,!1,!0,!0],[!1,!0,!1,!0,!1]]},{clues:[[4,1,0,0],[3,1,0,2],[3,1,0,4],[3,3,1,1],[4,4,2,3],[3,3,3,0],[5,4,3,4],[6,3,4,2],[3,1,4,4]],answer:[[!1,!1,!0,!1,!0],[!0,!0,!0,!1,!0],[!0,!0,!1,!1,!1],[!0,!0,!0,!1,!0],[!0,!0,!1,!1,!0]]},{clues:[[5,4,0,1],[6,3,0,2],[6,4,1,1],[6,3,1,3],[5,4,2,0],[3,1,2,4],[4,1,3,0],[5,4,3,2],[3,1,3,4]],answer:[[!1,!0,!1,!0,!1],[!1,!1,!0,!1,!1],[!0,!0,!1,!1,!0],[!1,!1,!0,!1,!0],[!0,!0,!0,!0,!1]]},{clues:[[6,5,0,3],[3,2,1,0],[3,2,1,1],[4,1,2,2],[5,3,3,0],[6,5,3,4],[6,5,4,2]],answer:[[!0,!1,!0,!1,!0],[!0,!0,!0,!0,!0],[!1,!1,!1,!0,!0],[!0,!0,!0,!0,!1],[!1,!0,!1,!0,!0]]},{clues:[[6,4,0,3],[5,2,1,1],[5,2,1,2],[3,3,1,3],[5,1,2,0],[6,7,2,2],[5,1,3,0],[3,2,3,3],[4,1,3,4],[5,2,4,2],[6,1,4,4]],answer:[[!1,!0,!0,!1,!1],[!0,!0,!0,!0,!0],[!0,!0,!1,!0,!0],[!0,!1,!0,!0,!1],[!0,!0,!0,!1,!1]]},{clues:[[5,1,0,2],[6,3,0,4],[5,3,1,1],[6,5,2,0],[5,3,2,2],[6,7,3,3],[4,1,4,1],[5,2,4,2]],answer:[[!1,!0,!0,!0,!1],[!0,!0,!1,!0,!0],[!1,!0,!0,!1,!0],[!0,!0,!0,!1,!0],[!1,!1,!0,!0,!0]]},{clues:[[5,4,0,1],[4,4,1,2],[6,3,1,4],[3,1,2,0],[6,4,3,0],[6,7,3,2],[6,3,3,4]],answer:[[!0,!0,!1,!0,!0],[!1,!1,!1,!1,!1],[!0,!0,!1,!0,!1],[!1,!0,!1,!0,!1],[!1,!0,!0,!0,!1]]},{clues:[[6,4,0,2],[3,1,0,3],[6,2,1,0],[4,2,2,0],[3,1,2,2],[5,3,2,3],[6,3,3,1],[4,2,4,2],[4,2,4,3],[3,1,4,4]],answer:[[!1,!0,!1,!0,!1],[!1,!0,!1,!0,!0],[!1,!1,!0,!0,!0],[!0,!1,!1,!1,!0],[!1,!0,!1,!1,!0]]}]},am={global_constraint:[],puzzles:[{clues:[[10,2,0,1],[7,2,0,2],[8,1,1,0],[10,2,1,3],[9,1,2,1],[7,1,2,4],[9,4,3,0],[10,3,4,1]],answer:[[!1,!1,!0,!1,!0],[!1,!0,!1,!1,!0],[!1,!0,!0,!0,!0],[!0,!1,!1,!1,!1],[!1,!1,!0,!0,!0]]},{clues:[[10,3,0,3],[10,3,1,1],[7,3,1,4],[7,1,2,0],[9,1,2,1],[7,4,2,3],[10,1,3,0],[7,2,4,1],[9,2,4,4]],answer:[[!0,!0,!0,!1,!1],[!0,!1,!0,!1,!0],[!0,!0,!0,!0,!1],[!1,!1,!0,!1,!1],[!0,!0,!1,!1,!0]]},{clues:[[10,4,0,4],[8,4,1,0],[8,4,1,3],[8,2,1,4],[9,1,2,2],[9,3,3,0],[8,2,4,1],[8,3,4,2]],answer:[[!0,!0,!0,!0,!1],[!1,!0,!0,!1,!1],[!0,!1,!0,!0,!0],[!0,!1,!1,!0,!1],[!0,!1,!1,!0,!0]]},{clues:[[9,3,0,2],[10,2,1,1],[8,2,1,4],[9,4,2,2],[7,3,3,0],[10,4,3,3],[7,2,4,1],[10,4,4,2]],answer:[[!1,!0,!0,!1,!1],[!1,!1,!0,!0,!1],[!1,!1,!0,!1,!1],[!0,!0,!0,!1,!0],[!0,!0,!1,!0,!0]]},{clues:[[9,2,0,0],[10,4,1,0],[9,2,2,0],[9,2,2,1],[9,2,2,4],[10,4,3,4],[7,1,4,1],[9,2,4,2],[7,2,4,3]],answer:[[!0,!1,!0,!1,!0],[!1,!0,!0,!0,!0],[!0,!0,!1,!1,!0],[!0,!0,!0,!0,!1],[!1,!0,!0,!0,!1]]},{clues:[[10,3,0,2],[9,3,1,1],[7,4,1,4],[9,3,2,1],[10,2,3,2],[9,1,4,1],[7,4,4,2],[7,3,4,3]],answer:[[!0,!0,!1,!0,!1],[!1,!0,!1,!1,!0],[!0,!0,!1,!1,!1],[!0,!0,!1,!1,!1],[!0,!0,!0,!0,!1]]},{clues:[[10,1,0,1],[8,1,0,4],[10,3,1,0],[7,4,1,2],[9,3,2,1],[9,3,2,3],[10,2,3,1],[8,3,3,3],[10,2,4,0]],answer:[[!0,!1,!1,!1,!1],[!1,!0,!0,!0,!1],[!1,!0,!1,!0,!1],[!0,!1,!1,!1,!0],[!1,!0,!1,!0,!1]]},{clues:[[9,1,0,3],[10,4,1,0],[9,1,2,2],[10,2,3,0],[8,3,3,1],[9,4,4,1],[8,2,4,3]],answer:[[!0,!1,!0,!0,!0],[!1,!0,!0,!0,!0],[!0,!0,!0,!1,!0],[!1,!1,!0,!1,!0],[!1,!0,!1,!1,!1]]},{clues:[[8,2,0,2],[10,4,1,1],[7,4,1,4],[8,4,2,0],[8,2,2,3],[9,2,3,0],[7,4,4,1]],answer:[[!0,!1,!1,!1,!1],[!0,!1,!0,!0,!0],[!1,!1,!1,!1,!1],[!0,!1,!0,!0,!1],[!0,!0,!1,!1,!1]]},{clues:[[10,3,0,0],[7,2,0,4],[10,2,1,1],[8,4,1,2],[9,3,2,3],[7,2,3,1],[10,4,3,3],[8,2,4,0],[9,3,4,2]],answer:[[!1,!0,!0,!1,!0],[!0,!1,!1,!1,!0],[!1,!1,!0,!0,!1],[!0,!0,!0,!1,!0],[!1,!0,!0,!1,!1]]}]},nm={global_constraint:[],puzzles:[{clues:[[16,3,0,0],[18,2,0,3],[17,2,1,2],[17,5,1,3],[16,5,3,2],[15,2,3,4],[15,2,4,0],[17,4,4,1]],answer:[[!1,!1,!0,!1,!1],[!1,!1,!0,!0,!1],[!0,!0,!0,!1,!0],[!1,!1,!1,!1,!0],[!0,!0,!1,!1,!1]]},{clues:[[18,1,0,2],[18,5,1,0],[15,1,1,4],[15,5,3,0],[15,7,4,1],[15,6,4,3]],answer:[[!0,!1,!1,!1,!1],[!1,!0,!0,!1,!0],[!0,!0,!1,!0,!1],[!0,!0,!0,!0,!1],[!1,!0,!0,!0,!0]]},{clues:[[18,4,0,1],[15,2,1,2],[18,2,1,3],[17,6,2,0],[18,1,2,3],[17,5,3,2],[17,4,4,4]],answer:[[!0,!1,!0,!0,!0],[!1,!1,!0,!1,!1],[!0,!1,!1,!1,!0],[!1,!1,!0,!1,!0],[!1,!1,!1,!1,!0]]},{clues:[[16,6,0,2],[18,2,1,3],[17,3,1,4],[17,7,3,0],[16,6,3,3],[15,4,3,4],[17,3,4,1]],answer:[[!1,!1,!1,!0,!1],[!1,!0,!1,!1,!0],[!1,!1,!1,!1,!0],[!0,!1,!1,!1,!0],[!1,!0,!0,!1,!0]]},{clues:[[18,2,0,1],[16,5,1,2],[15,1,1,4],[17,7,3,0],[15,6,4,0],[17,4,4,3]],answer:[[!1,!1,!1,!1,!1],[!1,!0,!1,!1,!0],[!1,!0,!1,!1,!1],[!0,!1,!1,!1,!1],[!0,!0,!0,!0,!0]]},{clues:[[18,6,0,3],[18,4,1,0],[18,4,1,2],[15,6,3,1],[15,3,3,2],[17,2,4,4]],answer:[[!0,!0,!0,!1,!0],[!1,!0,!1,!0,!0],[!0,!0,!1,!0,!1],[!0,!0,!0,!1,!1],[!1,!1,!1,!0,!0]]},{clues:[[18,4,0,3],[17,5,1,4],[15,1,2,1],[16,1,2,4],[17,4,3,2],[15,6,4,0]],answer:[[!0,!0,!0,!1,!0],[!1,!1,!1,!1,!0],[!1,!0,!1,!0,!1],[!0,!1,!0,!1,!0],[!0,!0,!0,!0,!0]]},{clues:[[17,4,0,1],[18,5,0,2],[16,6,0,3],[16,5,1,0],[17,4,1,2],[15,3,3,4],[16,4,4,1]],answer:[[!0,!0,!1,!1,!1],[!1,!1,!0,!1,!0],[!1,!0,!0,!1,!0],[!1,!1,!0,!1,!0],[!1,!1,!1,!0,!1]]},{clues:[[17,2,0,0],[17,4,0,3],[18,3,2,2],[15,4,3,1],[15,3,3,4],[15,5,4,0],[18,6,4,4]],answer:[[!0,!1,!1,!0,!1],[!0,!1,!1,!1,!1],[!1,!0,!1,!0,!0],[!0,!0,!1,!0,!0],[!0,!0,!0,!0,!1]]},{clues:[[18,2,0,2],[18,3,1,2],[16,2,1,4],[15,1,2,0],[18,2,2,3],[15,2,3,2],[17,3,4,4]],answer:[[!0,!0,!1,!1,!0],[!1,!1,!1,!0,!1],[!0,!1,!0,!1,!1],[!1,!1,!0,!1,!0],[!0,!1,!1,!1,!0]]}]},om={global_constraint:[],puzzles:[{clues:[[14,13,1,1],[13,1,2,4],[14,5,3,0],[12,7,3,2],[11,8,4,2]],answer:[[!0,!0,!1,!1,!0],[!0,!1,!0,!0,!1],[!0,!0,!1,!0,!0],[!1,!1,!1,!1,!0],[!1,!1,!0,!0,!0]]},{clues:[[11,9,0,3],[11,8,1,2],[13,5,3,3],[12,2,4,1]],answer:[[!0,!0,!1,!0,!0],[!0,!0,!0,!1,!0],[!0,!1,!1,!1,!0],[!0,!0,!1,!0,!0],[!1,!1,!0,!0,!0]]},{clues:[[13,6,0,0],[14,11,0,3],[14,14,3,3],[13,11,3,4],[13,4,4,0]],answer:[[!0,!1,!1,!1,!1],[!0,!0,!0,!0,!1],[!0,!0,!0,!0,!1],[!0,!1,!1,!1,!0],[!0,!1,!0,!0,!1]]},{clues:[[14,9,0,2],[11,1,0,3],[12,4,3,2],[14,15,4,0]],answer:[[!0,!0,!1,!0,!1],[!0,!0,!0,!1,!1],[!0,!0,!1,!0,!0],[!0,!1,!1,!1,!0],[!1,!0,!0,!0,!0]]},{clues:[[14,12,1,2],[14,9,3,1],[12,9,4,0],[14,7,4,2]],answer:[[!1,!0,!0,!0,!0],[!1,!1,!1,!0,!1],[!0,!1,!0,!1,!0],[!0,!1,!0,!0,!0],[!1,!1,!1,!0,!0]]},{clues:[[13,3,0,1],[12,3,1,3],[12,1,3,4],[14,14,4,0],[11,5,4,4]],answer:[[!1,!0,!0,!0,!0],[!1,!1,!0,!1,!1],[!0,!0,!0,!1,!0],[!0,!1,!1,!0,!1],[!1,!0,!0,!0,!0]]},{clues:[[12,2,0,1],[12,5,0,3],[14,10,2,0],[14,7,2,3],[14,13,4,2]],answer:[[!1,!1,!0,!1,!0],[!0,!0,!0,!1,!0],[!1,!0,!0,!1,!1],[!0,!1,!0,!1,!0],[!0,!0,!1,!0,!0]]},{clues:[[11,5,1,2],[13,9,3,0],[13,10,3,3],[14,8,3,4],[11,8,4,4]],answer:[[!1,!1,!0,!0,!0],[!1,!1,!0,!1,!0],[!1,!1,!1,!0,!1],[!0,!0,!1,!0,!1],[!1,!0,!0,!0,!0]]},{clues:[[13,3,0,1],[12,5,0,3],[14,1,0,4],[14,9,3,3],[14,9,4,3]],answer:[[!1,!0,!0,!1,!1],[!1,!0,!1,!1,!0],[!1,!0,!1,!0,!1],[!0,!0,!0,!1,!1],[!1,!1,!0,!1,!0]]},{clues:[[14,1,1,4],[12,1,2,2],[13,13,3,3],[11,8,4,2],[14,8,4,4]],answer:[[!0,!1,!1,!1,!0],[!1,!1,!0,!1,!1],[!1,!0,!1,!0,!1],[!1,!0,!0,!0,!1],[!1,!0,!0,!0,!1]]}]},lm={global_constraint:[[19,1],[20,1]],puzzles:[{clues:[[2,1,1,0]],answer:[[!1,!1,!1,!1,!1],[!1,!1,!1,!1,!1],[!1,!1,!1,!1,!1],[!1,!1,!1,!1,!1],[!1,!1,!1,!1,!1]]},{clues:[[1,1,0,2]],answer:[[!0,!0,!0,!0,!0],[!0,!0,!0,!0,!0],[!0,!0,!0,!0,!0],[!0,!0,!0,!0,!0],[!0,!0,!0,!0,!0]]},{clues:[[2,1,4,4]],answer:[[!1,!1,!1,!1,!1],[!1,!1,!1,!1,!1],[!1,!1,!1,!1,!1],[!1,!1,!1,!1,!1],[!1,!1,!1,!1,!1]]},{clues:[[1,1,4,4]],answer:[[!0,!0,!0,!0,!0],[!0,!0,!0,!0,!0],[!0,!0,!0,!0,!0],[!0,!0,!0,!0,!0],[!0,!0,!0,!0,!0]]},{clues:[[1,1,3,1]],answer:[[!0,!0,!0,!0,!0],[!0,!0,!0,!0,!0],[!0,!0,!0,!0,!0],[!0,!0,!0,!0,!0],[!0,!0,!0,!0,!0]]},{clues:[[1,1,2,2]],answer:[[!0,!0,!0,!0,!0],[!0,!0,!0,!0,!0],[!0,!0,!0,!0,!0],[!0,!0,!0,!0,!0],[!0,!0,!0,!0,!0]]},{clues:[[2,1,2,0]],answer:[[!1,!1,!1,!1,!1],[!1,!1,!1,!1,!1],[!1,!1,!1,!1,!1],[!1,!1,!1,!1,!1],[!1,!1,!1,!1,!1]]},{clues:[[2,1,1,2]],answer:[[!1,!1,!1,!1,!1],[!1,!1,!1,!1,!1],[!1,!1,!1,!1,!1],[!1,!1,!1,!1,!1],[!1,!1,!1,!1,!1]]},{clues:[[1,1,4,1]],answer:[[!0,!0,!0,!0,!0],[!0,!0,!0,!0,!0],[!0,!0,!0,!0,!0],[!0,!0,!0,!0,!0],[!0,!0,!0,!0,!0]]},{clues:[[1,1,4,0]],answer:[[!0,!0,!0,!0,!0],[!0,!0,!0,!0,!0],[!0,!0,!0,!0,!0],[!0,!0,!0,!0,!0],[!0,!0,!0,!0,!0]]}]},im={global_constraint:[[17,1],[18,1]],puzzles:[{clues:[[1,1,0,1]],answer:[[!1,!0,!1,!0,!1],[!0,!1,!0,!1,!0],[!1,!0,!1,!0,!1],[!0,!1,!0,!1,!0],[!1,!0,!1,!0,!1]]},{clues:[[1,1,0,4]],answer:[[!0,!1,!0,!1,!0],[!1,!0,!1,!0,!1],[!0,!1,!0,!1,!0],[!1,!0,!1,!0,!1],[!0,!1,!0,!1,!0]]},{clues:[[1,1,2,2]],answer:[[!0,!1,!0,!1,!0],[!1,!0,!1,!0,!1],[!0,!1,!0,!1,!0],[!1,!0,!1,!0,!1],[!0,!1,!0,!1,!0]]},{clues:[[1,1,0,4]],answer:[[!0,!1,!0,!1,!0],[!1,!0,!1,!0,!1],[!0,!1,!0,!1,!0],[!1,!0,!1,!0,!1],[!0,!1,!0,!1,!0]]},{clues:[[2,1,0,3]],answer:[[!0,!1,!0,!1,!0],[!1,!0,!1,!0,!1],[!0,!1,!0,!1,!0],[!1,!0,!1,!0,!1],[!0,!1,!0,!1,!0]]},{clues:[[2,1,4,2]],answer:[[!1,!0,!1,!0,!1],[!0,!1,!0,!1,!0],[!1,!0,!1,!0,!1],[!0,!1,!0,!1,!0],[!1,!0,!1,!0,!1]]},{clues:[[1,1,0,0]],answer:[[!0,!1,!0,!1,!0],[!1,!0,!1,!0,!1],[!0,!1,!0,!1,!0],[!1,!0,!1,!0,!1],[!0,!1,!0,!1,!0]]},{clues:[[2,1,4,4]],answer:[[!1,!0,!1,!0,!1],[!0,!1,!0,!1,!0],[!1,!0,!1,!0,!1],[!0,!1,!0,!1,!0],[!1,!0,!1,!0,!1]]},{clues:[[1,1,1,4]],answer:[[!1,!0,!1,!0,!1],[!0,!1,!0,!1,!0],[!1,!0,!1,!0,!1],[!0,!1,!0,!1,!0],[!1,!0,!1,!0,!1]]},{clues:[[2,1,0,1]],answer:[[!0,!1,!0,!1,!0],[!1,!0,!1,!0,!1],[!0,!1,!0,!1,!0],[!1,!0,!1,!0,!1],[!0,!1,!0,!1,!0]]}]},um={global_constraint:[[9,1],[10,1]],puzzles:[{clues:[[1,1,0,4],[2,1,1,2],[2,1,2,4],[2,1,3,0],[1,1,3,1],[2,1,3,3],[2,1,4,1],[2,1,4,2],[2,1,4,4]],answer:[[!1,!0,!0,!1,!0],[!0,!1,!1,!0,!1],[!0,!1,!1,!0,!1],[!1,!0,!0,!1,!0],[!0,!1,!1,!0,!1]]},{clues:[[2,1,0,2],[2,1,0,3],[2,1,0,4],[1,1,1,1],[2,1,1,4],[2,1,2,4],[1,1,3,0],[2,1,3,3],[2,1,4,2]],answer:[[!0,!0,!1,!1,!1],[!0,!0,!1,!1,!1],[!0,!0,!1,!1,!1],[!0,!0,!1,!1,!1],[!0,!0,!1,!1,!1]]},{clues:[[2,1,0,2],[1,1,1,3],[1,1,2,1],[1,1,2,2],[1,1,2,3],[1,1,3,0],[2,1,3,3],[1,1,4,2],[2,1,4,4]],answer:[[!0,!1,!1,!1,!0],[!1,!0,!0,!0,!1],[!1,!0,!0,!0,!1],[!0,!1,!1,!1,!0],[!1,!0,!0,!0,!1]]},{clues:[[1,1,0,1],[1,1,0,3],[2,1,1,0],[2,1,2,3],[2,1,2,4],[2,1,3,2],[1,1,3,3],[1,1,4,0],[1,1,4,1]],answer:[[!0,!0,!1,!0,!0],[!1,!1,!0,!1,!1],[!1,!1,!0,!1,!1],[!0,!0,!1,!0,!0],[!0,!0,!1,!0,!0]]},{clues:[[1,1,0,1],[2,1,0,2],[2,1,1,0],[2,1,1,2],[1,1,2,2],[1,1,2,3],[2,1,3,1],[1,1,3,4],[1,1,4,2]],answer:[[!1,!0,!1,!1,!1],[!1,!0,!1,!1,!1],[!0,!1,!0,!0,!0],[!0,!1,!0,!0,!0],[!0,!1,!0,!0,!0]]},{clues:[[1,1,0,3],[2,1,0,4],[2,1,1,1],[1,1,1,2],[1,1,2,3],[2,1,3,0],[2,1,4,0],[2,1,4,1],[1,1,4,3]],answer:[[!1,!1,!0,!0,!1],[!1,!1,!0,!0,!1],[!1,!1,!0,!0,!1],[!1,!1,!0,!0,!1],[!1,!1,!0,!0,!1]]},{clues:[[2,1,0,4],[1,1,1,0],[2,1,1,1],[2,1,1,3],[2,1,2,0],[1,1,3,1],[2,1,3,4],[1,1,4,0],[2,1,4,2]],answer:[[!1,!0,!0,!0,!1],[!0,!1,!1,!1,!0],[!1,!0,!0,!0,!1],[!1,!0,!0,!0,!1],[!0,!1,!1,!1,!0]]},{clues:[[2,1,0,0],[2,1,1,2],[2,1,1,4],[1,1,2,4],[2,1,3,0],[2,1,3,3],[1,1,4,0],[2,1,4,1],[1,1,4,4]],answer:[[!1,!0,!1,!1,!1],[!1,!0,!1,!1,!1],[!0,!1,!0,!0,!0],[!1,!0,!1,!1,!1],[!0,!1,!0,!0,!0]]},{clues:[[2,1,0,3],[2,1,1,0],[2,1,1,2],[2,1,2,3],[1,1,3,1],[1,1,3,2],[1,1,3,3],[2,1,4,3],[1,1,4,4]],answer:[[!1,!1,!1,!1,!0],[!1,!1,!1,!1,!0],[!1,!1,!1,!1,!0],[!0,!0,!0,!0,!1],[!1,!1,!1,!1,!0]]},{clues:[[1,1,0,0],[1,1,1,0],[1,1,1,1],[2,1,1,4],[2,1,2,4],[2,1,3,0],[1,1,3,3],[1,1,4,2],[1,1,4,4]],answer:[[!0,!0,!1,!1,!1],[!0,!0,!1,!1,!1],[!0,!0,!1,!1,!1],[!1,!1,!0,!0,!0],[!1,!1,!0,!0,!0]]}]},cm={global_constraint:[[11,1],[12,1]],puzzles:[{clues:[[1,1,2,3],[2,1,4,0]],answer:[[!1,!0,!1,!0,!1],[!0,!1,!0,!1,!0],[!1,!0,!1,!0,!1],[!0,!1,!0,!1,!0],[!1,!0,!1,!0,!1]]},{clues:[[2,1,0,4],[1,1,3,2]],answer:[[!1,!0,!1,!0,!1],[!0,!1,!0,!1,!0],[!1,!0,!1,!0,!1],[!0,!1,!0,!1,!0],[!1,!0,!1,!0,!1]]},{clues:[[1,1,3,0],[2,1,3,1]],answer:[[!1,!0,!1,!0,!1],[!0,!1,!0,!1,!0],[!1,!0,!1,!0,!1],[!0,!1,!0,!1,!0],[!1,!0,!1,!0,!1]]},{clues:[[1,1,1,3],[1,1,4,3]],answer:[[!0,!0,!0,!0,!0],[!0,!0,!0,!0,!0],[!0,!0,!0,!0,!0],[!0,!0,!0,!0,!0],[!0,!0,!0,!0,!0]]},{clues:[[2,1,2,2],[1,1,3,2]],answer:[[!1,!0,!1,!0,!1],[!0,!1,!0,!1,!0],[!1,!0,!1,!0,!1],[!0,!1,!0,!1,!0],[!1,!0,!1,!0,!1]]},{clues:[[1,1,2,1],[1,1,4,4]],answer:[[!0,!0,!0,!0,!0],[!0,!0,!0,!0,!0],[!0,!0,!0,!0,!0],[!0,!0,!0,!0,!0],[!0,!0,!0,!0,!0]]},{clues:[[2,1,1,0],[2,1,4,0]],answer:[[!1,!1,!1,!1,!1],[!1,!1,!1,!1,!1],[!1,!1,!1,!1,!1],[!1,!1,!1,!1,!1],[!1,!1,!1,!1,!1]]},{clues:[[2,1,3,3],[1,1,4,3]],answer:[[!1,!0,!1,!0,!1],[!0,!1,!0,!1,!0],[!1,!0,!1,!0,!1],[!0,!1,!0,!1,!0],[!1,!0,!1,!0,!1]]},{clues:[[1,1,0,1],[2,1,2,4]],answer:[[!1,!0,!1,!0,!1],[!0,!1,!0,!1,!0],[!1,!0,!1,!0,!1],[!0,!1,!0,!1,!0],[!1,!0,!1,!0,!1]]},{clues:[[1,1,1,2],[1,1,4,2]],answer:[[!0,!0,!0,!0,!0],[!0,!0,!0,!0,!0],[!0,!0,!0,!0,!0],[!0,!0,!0,!0,!0],[!0,!0,!0,!0,!0]]}]},dm={global_constraint:[[1,1],[2,1],[13,1],[14,1]],puzzles:[{clues:[[1,1,2,2],[2,1,2,4],[2,1,4,4]],answer:[[!0,!0,!0,!0,!0],[!0,!1,!1,!1,!1],[!0,!1,!0,!0,!1],[!0,!1,!1,!0,!1],[!0,!0,!0,!0,!1]]},{clues:[[2,1,1,1],[2,1,3,3],[2,1,4,2]],answer:[[!0,!0,!0,!0,!0],[!0,!1,!1,!1,!0],[!0,!1,!0,!1,!0],[!0,!0,!0,!1,!0],[!1,!1,!1,!1,!0]]},{clues:[[2,1,0,2],[2,1,1,3],[1,1,4,4]],answer:[[!1,!1,!1,!1,!0],[!0,!0,!0,!1,!0],[!0,!1,!0,!1,!0],[!0,!1,!1,!1,!0],[!0,!0,!0,!0,!0]]},{clues:[[1,1,2,2],[1,1,3,3],[2,1,4,1]],answer:[[!0,!0,!0,!0,!0],[!0,!1,!1,!1,!0],[!0,!1,!0,!1,!0],[!0,!1,!0,!0,!0],[!0,!1,!1,!1,!1]]},{clues:[[1,1,1,4],[1,1,2,3],[1,1,4,4]],answer:[[!0,!0,!0,!0,!0],[!0,!1,!1,!1,!0],[!0,!1,!0,!0,!0],[!0,!1,!1,!1,!1],[!0,!0,!0,!0,!0]]},{clues:[[2,1,0,0],[2,1,1,3],[2,1,2,0],[1,1,4,3]],answer:[[!1,!0,!0,!0,!0],[!1,!0,!1,!1,!0],[!1,!0,!0,!1,!0],[!1,!1,!1,!1,!0],[!0,!0,!0,!0,!0]]},{clues:[[1,1,0,2],[1,1,1,3],[1,1,3,3]],answer:[[!0,!0,!0,!0,!1],[!1,!1,!1,!0,!1],[!1,!0,!1,!0,!1],[!1,!0,!0,!0,!1],[!1,!1,!1,!1,!1]]},{clues:[[2,1,1,1],[2,1,1,4],[2,1,2,1],[2,1,4,2]],answer:[[!0,!1,!1,!1,!1],[!0,!1,!0,!0,!1],[!0,!1,!1,!0,!1],[!0,!0,!0,!0,!1],[!1,!1,!1,!1,!1]]},{clues:[[1,1,2,0],[2,1,2,3],[1,1,3,3]],answer:[[!0,!0,!0,!0,!0],[!0,!1,!1,!1,!0],[!0,!1,!0,!1,!0],[!0,!1,!0,!0,!0],[!0,!1,!1,!1,!1]]},{clues:[[1,1,0,2],[1,1,1,3],[2,1,3,2]],answer:[[!0,!0,!0,!0,!1],[!0,!1,!1,!0,!1],[!0,!1,!0,!0,!1],[!0,!1,!1,!1,!1],[!0,!0,!0,!0,!0]]}]},fm={global_constraint:[[13,1]],puzzles:[{clues:[[6,8,0,3],[6,6,1,2],[6,2,1,4],[6,2,2,1],[6,3,2,4],[6,2,3,2],[6,2,4,3]],answer:[[!1,!0,!0,!1,!1],[!1,!0,!1,!0,!1],[!1,!1,!0,!0,!1],[!1,!1,!1,!1,!0],[!1,!1,!1,!1,!0]]},{clues:[[6,3,1,0],[6,4,1,1],[6,2,1,3],[6,1,1,4],[6,2,2,2],[6,9,2,4],[6,5,3,0],[6,3,3,2]],answer:[[!1,!0,!0,!0,!1],[!1,!1,!1,!1,!1],[!0,!0,!1,!1,!1],[!1,!0,!1,!1,!0],[!0,!0,!1,!1,!0]]},{clues:[[6,8,0,0],[6,5,1,3],[6,1,2,2],[6,2,3,0],[6,1,4,2],[6,2,4,3]],answer:[[!1,!0,!0,!0,!0],[!0,!0,!1,!1,!0],[!1,!1,!1,!1,!0],[!1,!1,!1,!1,!0],[!0,!0,!1,!1,!0]]},{clues:[[6,2,0,0],[6,4,0,2],[6,1,1,4],[6,3,3,3],[6,10,3,4],[6,5,4,1]],answer:[[!1,!0,!1,!1,!1],[!1,!0,!0,!0,!1],[!1,!1,!1,!1,!1],[!0,!0,!0,!1,!1],[!0,!1,!0,!0,!1]]},{clues:[[6,10,0,1],[6,1,1,2],[6,2,1,3],[6,4,3,4],[6,1,4,1]],answer:[[!0,!1,!1,!1,!1],[!0,!0,!1,!1,!0],[!1,!1,!1,!1,!0],[!1,!1,!0,!0,!1],[!1,!1,!1,!0,!0]]},{clues:[[6,2,0,3],[6,7,1,1],[6,4,2,2],[6,5,3,2],[6,2,4,1],[6,9,4,4]],answer:[[!0,!0,!0,!1,!1],[!0,!1,!0,!1,!1],[!0,!0,!1,!0,!0],[!1,!0,!1,!1,!1],[!1,!1,!0,!0,!1]]},{clues:[[6,3,0,3],[6,9,1,0],[6,2,2,3],[6,2,2,4],[6,6,3,1],[6,3,3,3],[6,3,4,3]],answer:[[!1,!0,!0,!1,!0],[!1,!1,!1,!1,!0],[!0,!0,!1,!1,!1],[!0,!1,!1,!1,!0],[!0,!0,!0,!1,!0]]},{clues:[[6,1,1,0],[6,3,1,2],[6,1,2,3],[6,9,3,1],[6,1,4,3]],answer:[[!1,!1,!1,!0,!0],[!1,!1,!1,!1,!1],[!1,!0,!0,!1,!1],[!0,!1,!1,!1,!1],[!0,!0,!0,!1,!1]]},{clues:[[6,2,0,4],[6,4,1,0],[6,4,1,1],[6,4,1,4],[6,5,3,1],[6,2,4,0],[6,9,4,3]],answer:[[!0,!0,!1,!0,!1],[!1,!1,!1,!0,!1],[!0,!0,!1,!0,!0],[!0,!1,!1,!1,!0],[!1,!0,!0,!1,!1]]},{clues:[[6,3,0,1],[6,4,1,1],[6,4,1,3],[6,3,1,4],[6,2,3,0],[6,8,3,2],[6,3,3,4]],answer:[[!0,!1,!0,!0,!0],[!0,!1,!1,!1,!1],[!1,!0,!1,!0,!1],[!1,!0,!1,!0,!1],[!1,!1,!0,!0,!1]]}]},mm={global_constraint:[[2,1]],puzzles:[{clues:[[16,8,0,4],[16,5,1,1],[16,5,1,2],[16,7,1,3],[16,11,3,4],[16,5,4,0]],answer:[[!0,!1,!1,!1,!1],[!0,!1,!1,!1,!1],[!1,!0,!0,!1,!1],[!1,!1,!1,!1,!1],[!1,!1,!1,!0,!1]]},{clues:[[16,3,0,3],[16,6,1,1],[16,3,2,2],[16,5,3,0],[16,6,4,3],[16,11,4,4]],answer:[[!0,!1,!0,!1,!1],[!1,!1,!0,!1,!1],[!1,!1,!1,!0,!1],[!1,!1,!0,!1,!1],[!1,!1,!1,!1,!1]]},{clues:[[16,4,0,0],[16,4,1,1],[16,2,1,3],[16,11,2,2],[16,2,4,0]],answer:[[!1,!1,!1,!1,!0],[!0,!1,!0,!1,!0],[!0,!1,!1,!0,!0],[!1,!1,!0,!0,!0],[!1,!0,!0,!0,!0]]},{clues:[[16,11,1,1],[16,4,2,1],[16,4,2,4],[16,5,3,3],[16,5,4,0],[16,7,4,4]],answer:[[!0,!0,!0,!0,!0],[!0,!1,!0,!1,!0],[!0,!1,!0,!1,!1],[!0,!1,!0,!1,!1],[!1,!1,!1,!1,!1]]},{clues:[[16,3,0,2],[16,5,1,1],[16,11,1,4],[16,6,2,0],[16,7,2,2],[16,9,2,3],[16,4,4,2]],answer:[[!0,!1,!1,!1,!0],[!1,!1,!0,!1,!1],[!1,!1,!1,!1,!1],[!0,!1,!1,!1,!1],[!0,!0,!1,!1,!0]]},{clues:[[16,10,0,1],[16,6,1,4],[16,3,2,0],[16,5,3,2],[16,9,3,3]],answer:[[!1,!1,!1,!1,!1],[!0,!1,!0,!1,!1],[!1,!1,!0,!1,!1],[!1,!1,!1,!1,!1],[!0,!1,!0,!1,!1]]},{clues:[[16,5,0,1],[16,8,1,2],[16,8,2,3],[16,9,2,4],[16,10,3,2],[16,8,4,4]],answer:[[!0,!1,!0,!0,!1],[!1,!1,!1,!1,!1],[!1,!1,!1,!1,!1],[!1,!1,!1,!1,!1],[!0,!1,!1,!1,!1]]},{clues:[[16,12,0,1],[16,8,1,4],[16,5,2,1],[16,7,3,3],[16,9,4,4]],answer:[[!0,!1,!0,!0,!1],[!0,!1,!1,!1,!1],[!0,!1,!0,!1,!1],[!0,!1,!1,!1,!1],[!1,!1,!1,!1,!1]]},{clues:[[16,7,0,4],[16,3,1,0],[16,7,1,4],[16,12,3,4],[16,9,4,3]],answer:[[!1,!0,!1,!1,!1],[!1,!0,!1,!1,!1],[!1,!1,!1,!1,!1],[!0,!0,!1,!1,!1],[!1,!1,!1,!1,!1]]},{clues:[[16,8,0,3],[16,5,1,1],[16,4,2,4],[16,10,3,0],[16,9,4,3]],answer:[[!0,!1,!1,!1,!1],[!1,!1,!1,!1,!0],[!1,!0,!0,!1,!1],[!1,!1,!1,!1,!1],[!1,!1,!1,!1,!1]]}]},hm={global_constraint:[[9,1]],puzzles:[{clues:[[11,13,3,1],[11,8,4,4]],answer:[[!0,!0,!1,!1,!1],[!0,!0,!1,!0,!0],[!0,!0,!1,!0,!0],[!0,!0,!1,!0,!0],[!0,!0,!1,!0,!0]]},{clues:[[11,1,0,1],[11,11,1,2],[11,2,1,4],[11,6,3,0],[11,3,3,3]],answer:[[!1,!0,!1,!1,!0],[!1,!1,!0,!1,!0],[!0,!0,!1,!0,!1],[!0,!0,!1,!0,!1],[!0,!0,!1,!0,!1]]},{clues:[[11,2,0,0],[11,11,2,0],[11,1,3,1],[11,10,3,4],[11,1,4,0]],answer:[[!0,!0,!1,!0,!0],[!1,!1,!1,!0,!0],[!0,!1,!1,!0,!0],[!1,!0,!1,!0,!0],[!0,!1,!1,!0,!0]]},{clues:[[11,10,1,1],[11,11,2,3]],answer:[[!0,!0,!1,!0,!1],[!0,!0,!1,!0,!1],[!0,!0,!1,!0,!1],[!0,!0,!1,!0,!1],[!0,!0,!1,!0,!1]]},{clues:[[11,11,0,1],[11,1,0,4],[11,4,1,3],[11,1,2,0],[11,3,4,2],[11,1,4,4]],answer:[[!1,!0,!1,!1,!0],[!1,!1,!0,!0,!1],[!0,!1,!0,!0,!1],[!1,!1,!1,!1,!1],[!0,!0,!0,!1,!0]]},{clues:[[11,2,1,1],[11,3,2,0],[11,11,3,3]],answer:[[!1,!0,!1,!0,!1],[!1,!0,!1,!0,!1],[!0,!1,!1,!0,!1],[!0,!1,!1,!0,!1],[!0,!1,!1,!0,!1]]},{clues:[[11,4,0,3],[11,6,1,0],[11,11,3,2],[11,2,4,0]],answer:[[!0,!0,!1,!0,!0],[!0,!0,!1,!0,!0],[!0,!0,!1,!1,!1],[!1,!1,!0,!0,!0],[!0,!0,!1,!1,!1]]},{clues:[[11,10,2,0],[11,13,4,3]],answer:[[!0,!0,!1,!1,!1],[!0,!0,!1,!0,!0],[!0,!0,!1,!0,!0],[!0,!0,!1,!0,!0],[!0,!0,!1,!0,!0]]},{clues:[[11,3,0,1],[11,1,0,3],[11,11,4,1],[11,3,4,4]],answer:[[!1,!0,!1,!0,!1],[!1,!0,!1,!1,!1],[!1,!0,!1,!1,!0],[!1,!1,!1,!1,!0],[!0,!0,!0,!1,!0]]},{clues:[[11,5,1,4],[11,11,3,0],[11,1,3,2],[11,1,4,1],[11,2,4,3]],answer:[[!1,!1,!1,!1,!1],[!0,!0,!0,!0,!0],[!1,!1,!1,!1,!1],[!0,!1,!0,!1,!1],[!1,!0,!1,!0,!0]]}]},pm={puzzles:[{global_constraint:[[11,1]],clues:[[14,9,0,1],[13,4,2,4],[5,8,3,1],[6,1,4,0]],answer:[[!1,!1,!0,!0,!0],[!1,!1,!0,!0,!0],[!0,!1,!0,!0,!0],[!1,!0,!1,!1,!1],[!1,!1,!0,!1,!0]]},{global_constraint:[[8,1],[17,1]],clues:[[9,4,0,2],[14,5,1,2],[7,4,1,3],[9,4,3,0]],answer:[[!1,!1,!0,!1,!1],[!1,!0,!1,!0,!1],[!1,!1,!0,!1,!0],[!0,!1,!1,!1,!1],[!1,!1,!0,!1,!0]]},{global_constraint:[[18,1],[1,1]],clues:[[15,7,0,3],[15,11,2,0],[5,3,2,3],[3,1,4,2],[3,2,4,3]],answer:[[!0,!1,!0,!0,!0],[!0,!0,!1,!0,!1],[!0,!0,!0,!0,!0],[!0,!0,!1,!0,!0],[!0,!1,!0,!0,!1]]},{global_constraint:[[11,1]],clues:[[14,1,0,1],[9,4,0,4],[13,6,1,4],[4,4,3,3],[12,3,4,0]],answer:[[!1,!1,!1,!0,!0],[!1,!0,!1,!0,!0],[!0,!1,!0,!1,!1],[!1,!0,!1,!1,!1],[!1,!1,!0,!1,!0]]},{global_constraint:[[22,1],[2,1]],clues:[[3,4,1,3],[13,8,2,1],[6,4,2,3]],answer:[[!0,!0,!0,!0,!0],[!0,!0,!1,!0,!1],[!0,!0,!1,!1,!1],[!0,!0,!0,!0,!0],[!0,!0,!0,!0,!0]]},{global_constraint:[[6,1],[10,1]],clues:[[12,3,0,4],[11,5,3,0],[13,8,3,1],[10,4,4,2]],answer:[[!1,!1,!0,!0,!1],[!1,!1,!0,!0,!1],[!1,!1,!0,!0,!1],[!0,!0,!1,!0,!0],[!0,!0,!1,!0,!0]]},{global_constraint:[[5,1],[14,1],[10,1]],clues:[[11,2,0,4],[11,3,2,0],[7,3,3,2]],answer:[[!0,!1,!0,!1,!0],[!0,!1,!0,!1,!0],[!0,!1,!0,!0,!1],[!1,!0,!0,!0,!1],[!1,!0,!1,!1,!0]]},{global_constraint:[[11,1]],clues:[[17,1,0,1],[16,4,0,2],[18,2,1,4],[15,4,3,1],[10,1,4,4]],answer:[[!0,!0,!1,!0,!1],[!0,!0,!1,!1,!1],[!1,!1,!1,!0,!0],[!1,!0,!1,!0,!0],[!1,!1,!0,!1,!1]]},{global_constraint:[[11,1]],clues:[[15,8,2,2],[17,2,3,0],[6,2,3,4]],answer:[[!0,!1,!0,!0,!0],[!1,!1,!0,!0,!0],[!1,!1,!0,!0,!0],[!0,!0,!1,!1,!1],[!0,!0,!1,!1,!1]]},{global_constraint:[[4,1],[10,1],[7,1]],clues:[[17,4,0,3],[4,2,1,0],[6,7,3,2],[13,5,3,3],[12,2,4,1]],answer:[[!0,!0,!1,!0,!1],[!1,!1,!0,!1,!0],[!1,!1,!0,!1,!0],[!0,!0,!1,!0,!1],[!1,!1,!0,!0,!1]]},{global_constraint:[[12,1]],clues:[[4,4,0,0],[17,2,0,4],[16,1,2,3],[13,1,3,4],[11,1,4,1]],answer:[[!1,!1,!0,!1,!0],[!1,!1,!0,!0,!1],[!0,!0,!0,!1,!0],[!0,!1,!0,!0,!0],[!1,!0,!1,!0,!1]]},{global_constraint:[[3,1],[21,1],[13,1]],clues:[[10,6,0,2],[4,1,1,3],[4,2,2,2],[13,6,3,2],[12,1,3,4]],answer:[[!1,!0,!1,!0,!0],[!1,!0,!0,!1,!0],[!0,!1,!1,!1,!0],[!0,!1,!0,!0,!1],[!0,!0,!1,!0,!0]]},{global_constraint:[[8,1],[13,1],[10,1]],clues:[[14,8,1,4],[12,5,3,0],[16,1,4,3]],answer:[[!1,!0,!1,!0,!0],[!1,!0,!1,!0,!1],[!1,!0,!1,!0,!1],[!1,!0,!1,!0,!0],[!1,!0,!0,!1,!0]]},{global_constraint:[[14,1],[22,1]],clues:[[15,2,0,1],[10,1,1,0],[9,3,2,4],[18,2,3,1],[14,4,4,3]],answer:[[!1,!0,!0,!1,!1],[!1,!1,!1,!0,!1],[!0,!0,!1,!0,!0],[!1,!1,!0,!1,!0],[!0,!1,!0,!1,!1]]},{global_constraint:[[5,1],[11,1]],clues:[[13,3,1,3],[15,1,4,0],[6,4,4,3]],answer:[[!1,!0,!0,!0,!1],[!1,!0,!0,!0,!1],[!1,!0,!0,!0,!1],[!1,!1,!1,!1,!0],[!0,!1,!0,!1,!1]]},{global_constraint:[[11,1]],clues:[[10,3,0,0],[17,9,2,3],[4,2,3,4],[16,6,4,1]],answer:[[!1,!0,!0,!1,!0],[!1,!0,!0,!1,!1],[!1,!1,!1,!0,!1],[!1,!0,!1,!1,!1],[!0,!1,!0,!1,!0]]},{global_constraint:[[1,1],[7,1],[22,1]],clues:[[6,2,1,4],[13,6,2,1],[5,6,2,2],[7,3,4,2],[5,3,4,3]],answer:[[!1,!0,!1,!1,!1],[!1,!0,!1,!0,!1],[!1,!0,!0,!0,!1],[!1,!0,!1,!0,!1],[!1,!1,!0,!0,!1]]},{global_constraint:[[10,1],[21,1]],clues:[[9,2,0,0],[16,2,1,3],[6,6,2,1],[14,8,3,1],[15,2,4,4]],answer:[[!0,!0,!1,!0,!1],[!1,!1,!0,!1,!0],[!1,!1,!0,!1,!0],[!1,!1,!0,!0,!1],[!0,!0,!1,!0,!0]]},{global_constraint:[[12,1]],clues:[[3,3,1,2],[15,4,1,4],[17,2,2,2],[13,3,3,4],[15,1,4,0]],answer:[[!0,!0,!1,!0,!1],[!1,!0,!0,!0,!0],[!0,!1,!0,!0,!1],[!1,!0,!1,!0,!0],[!0,!1,!0,!0,!1]]},{global_constraint:[[9,1],[7,1]],clues:[[14,6,0,3],[6,3,1,0],[14,7,3,0],[11,2,4,4]],answer:[[!1,!0,!0,!1,!0],[!1,!1,!1,!1,!0],[!0,!0,!0,!0,!1],[!1,!1,!1,!1,!0],[!0,!0,!0,!1,!0]]},{global_constraint:[[9,1],[7,1]],clues:[[11,6,1,1],[7,2,1,3],[16,4,1,4],[4,2,3,3],[11,2,4,3]],answer:[[!1,!0,!1,!1,!1],[!1,!0,!1,!0,!1],[!1,!0,!1,!0,!1],[!1,!0,!1,!1,!1],[!1,!0,!1,!0,!0]]},{global_constraint:[[21,1],[3,1],[8,1]],clues:[[16,5,0,1],[4,1,0,3],[14,4,2,0],[4,2,3,3],[4,1,4,1],[17,4,4,4]],answer:[[!1,!1,!0,!1,!1],[!0,!1,!0,!0,!1],[!1,!0,!1,!0,!1],[!0,!0,!1,!1,!1],[!1,!1,!0,!0,!0]]},{global_constraint:[[21,1],[1,1]],clues:[[18,3,0,3],[15,9,1,1],[8,2,2,0],[18,9,3,4],[18,4,4,2]],answer:[[!1,!0,!0,!1,!1],[!0,!0,!0,!0,!0],[!1,!0,!1,!1,!0],[!0,!0,!0,!0,!1],[!1,!0,!1,!0,!0]]},{global_constraint:[[7,1],[12,1]],clues:[[11,1,0,0],[12,4,0,3],[15,3,2,0],[14,6,2,3],[11,4,3,3]],answer:[[!0,!1,!0,!1,!0],[!1,!0,!1,!0,!1],[!0,!1,!0,!1,!0],[!0,!0,!1,!0,!0],[!0,!1,!0,!1,!0]]},{global_constraint:[[4,1],[18,1]],clues:[[3,3,0,3],[11,4,1,1],[3,6,3,3],[5,2,4,0]],answer:[[!0,!1,!0,!0,!0],[!0,!0,!1,!0,!0],[!0,!1,!0,!0,!0],[!1,!0,!0,!0,!0],[!0,!0,!0,!0,!0]]}]};const yo=r=>{const e=r.slice();for(let t=e.length-1;t>0;t--){const s=Math.floor(Math.random()*(t+1));[e[t],e[s]]=[e[s],e[t]]}return e},ke=(r,e,t)=>({...ho,beforeNewGame:s=>{const a=Math.floor(Math.random()*r.puzzles.length);s.engine.initExtraState({globalConstraints:r.global_constraint.map(n=>({id:`puzzle-50-global-${n[0]}`,health:n[1]})),clues:yo(r.puzzles[a].clues.map(n=>({id:`puzzle-50-local-${n[0]}`,health:n[1],row:n[2],column:n[3]}))),cluesPlaced:0,answer:r.puzzles[a].answer,showSolution:e,passed:!1,isInvulnerable:t})}}),gm=(r,e,t)=>({...ho,beforeNewGame:s=>{const a=Math.floor(Math.random()*r.puzzles.length);s.engine.initExtraState({globalConstraints:r.puzzles[a].global_constraint.map(n=>({id:`puzzle-50-global-${n[0]}`,health:n[1]})),clues:yo(r.puzzles[a].clues.map(n=>({id:`puzzle-50-local-${n[0]}`,health:n[1],row:n[2],column:n[3]}))),cluesPlaced:0,answer:r.puzzles[a].answer,showSolution:e,passed:!1,isInvulnerable:t})}}),ym=ke($f,!0,!0),Em=ke(rm,!0,!0),bm=ke(qf,!0,!0),wm=ke(Jf,!0,!0),km=ke(Zf,!0,!0),Am=ke(Kf,!0,!0),Sm=ke(Wf,!0,!0),_m=ke(Qf,!0,!0),Tm=ke(Vf,!0,!0),vm=ke(em,!0,!0),Im=ke(Xf,!0,!0),Rm=ke(tm,!0,!0),Nm=ke(sm,!1,!0),Cm=ke(am,!1,!0),Pm=ke(nm,!1,!0),Om=ke(om,!1,!0),Um=ke(lm,!1,!0),Dm=ke(im,!1,!0),Gm=ke(um,!1,!0),xm=ke(cm,!1,!0),Mm=ke(dm,!1,!0),Lm=ke(fm,!1,!1),Bm=ke(mm,!1,!1),zm=ke(hm,!1,!1),Hm=gm(pm,!1,!1),Fm=new Set(["BIATHLON","BOBSLED","CURLING","LUGE","LUGING","SKATING","SKELETON","SKIING"]),Ym=new Set(["IVYSAUR","VENUSAUR","SQUIRTLE","CATERPIE","METAPOD","WEEDLE","KAKUNA","BEEDRILL","PIDGEY","PIDGEOT","RATTATA","RATICATE","SPEAROW","FEAROW","EKANS","ARBOK","PIKACHU","RAICHU","NIDORAN","NIDORINA","NIDORAN","NIDORINO","NIDOKING","CLEFAIRY","CLEFABLE","VULPIX","ZUBAT","GOLBAT","ODDISH","GLOOM","PARAS","PARASECT","VENONAT","VENOMOTH","DIGLETT","DUGTRIO","MEOWTH","PERSIAN","PSYDUCK","GOLDUCK","MANKEY","PRIMEAPE","ARCANINE","POLIWAG","ABRA","KADABRA","ALAKAZAM","MACHOP","MACHOKE","MACHAMP","GEODUDE","GRAVELER","GOLEM","PONYTA","RAPIDASH","SLOWPOKE","SLOWBRO","MAGNETON","DODUO","DODRIO","SEEL","DEWGONG","GRIMER","MUK","SHELLDER","CLOYSTER","GASTLY","HAUNTER","GENGAR","ONIX","DROWZEE","HYPNO","KRABBY","KINGLER","VOLTORB","CUBONE","MAROWAK","KOFFING","WEEZING","RHYHORN","RHYDON","CHANSEY","TANGELA","HORSEA","SEADRA","GOLDEEN","SEAKING","STARYU","STARMIE","MRMIME","SCYTHER","JYNX","MAGMAR","PINSIR","TAUROS","MAGIKARP","GYARADOS","LAPRAS","DITTO","EEVEE","VAPOREON","JOLTEON","FLAREON","PORYGON","OMANYTE","OMASTAR","KABUTO","KABUTOPS","SNORLAX","ARTICUNO","ZAPDOS","MOLTRES","DRATINI","MEWTWO","MEW"]),jm=new Set(["AERO","ALIZARIN","ALMOND","AMAZON","AMBER","AMETHYST","APRICOT","AQUA","AUREOLIN","AZURE","BEAVER","BEIGE","BISQUE","BISTRE","BLACK","BLUE","BLUSH","BOLE","BONE","BRONZE","BROWN","BUFF","BURGUNDY","CAFNOIR","CAMEL","CANARY","CARDINAL","CARMINE","CATAWBA","CELADON","CELESTE","CERISE","CERULEAN","CHARCOAL","CHESTNUT","CINNABAR","CITRINE","CITRON","CLARET","COFFEE","COOLGREY","COPPER","CORAL","CORDOVAN","CORN","CREAM","CRIMSON","CYAN","CYCLAMEN","DENIM","DESERT","EBONY","ECRU","EGGPLANT","EGGSHELL","EMERALD","EMINENCE","ERIN","FALLOW","FANDANGO","FAWN","FINN","FLAME","FLAX","FLIRT","FUCHSIA","FULVOUS","GAMBOGE","GLAUCOUS","GOLD","GRAY","GREEN","GUNMETAL","HEATWAVE","ICEBERG","INCHWORM","INDIGO","IVORY","JASMINE","JET","JONQUIL","JUNEBUD","KEPPEL","KHAKI","KOBE","KOBI","LAVA","LAVENDER","LEMON","LIBERTY","LILAC","LIME","LINEN","LION","LIVER","LIVID","MAGENTA","MAGNOLIA","MAHOGANY","MAIZE","MANATEE","MANDARIN","MANGO","MANTIS","MAROON","MAUVE","MELON","MIDNIGHT","MINDARO","MING","MINT","MONALISA","MULBERRY","MUSTARD","MYSTIC","NEWCAR","NICKEL","NYANZA","OCHRE","OLDLACE","OLIVE","OLIVINE","ONYX","OPAL","ORANGE","ORCHID","OXBLOOD","PAUA","PEACH","PEAR","PHLOX","PINETREE","PINK","PLATINUM","PLUM","POPSTAR","PRUNE","PUCE","PUMPKIN","PURPLE","RAJAH","RED","RHYTHM","ROCKET","ROSE","RUBER","RUBY","RUFOUS","RUSSET","RUST","SAFFRON","SAGE","SALMON","SAND","SAPPHIRE","SCARLET","SEANCE","SEASHELL","SECRET","SEPIA","SHADOW","SIENNA","SILVER","SINOPIA","SMITTEN","SNOW","STRAW","SUNGLOW","SUNRAY","SUNSET","TAN","TAUPE","TAWNY","TEAL","TENNE","THISTLE","TOMATO","TUSCAN","UMBER","VANILLA","VERONICA","VIOLET","VIRIDIAN","VOLT","WHEAT","WHITE","WINE","WISTERIA","XANADU","XANTHIC","XANTHOUS","YELLOW","ZAFFRE","ZOMP"]),Vm=new Set(["ABIU","ACAI","ACEROLA","ACKEE","AKEBI","APPLE","APRICOT","ARATILES","ARAZA","ATIS","AVOCADO","BANANA","BILBERRY","BRINJAL","CACAO","CANISTEL","CATMON","CEMPEDAK","CHERRY","COCONUT","CUCUMBER","CURRANT","DAMSON","DATE","DURIAN","EGGFRUIT","EGGPLANT","FEIJOA","FIG","GACFRUIT","GRAPE","GUAVA","GUYABANO","HONEYDEW","JALAPENO","JAMBUL","JUJUBE","KIWANO","KUMQUAT","LANZONES","LEMON","LIME","LONGAN","LOQUAT","LULO","LYCHEE","MACOPA","MANGO","MEDLAR","MELON","MULBERRY","NANCE","OLIVE","ORANGE","PAPAYA","PAWPAW","PEA","PITAYA","PLANTAIN","PLINIA","PLUM","PLUOT","POMELO","PRUNE","PUMPKIN","QUINCE","RAISIN","RAMBUTAN","SALAK","SAMPALOC","SANTOL","SAPOTE","SATSUMA","SOURSOP","SQUASH","TAMARIND","TAMBIS","TANGELO","TAYBERRY","TOMATO","XIMENIA","YUZU","ZUCCHINI"]),Wm=new Set(["MON","TUE","WED","THU","FRI","SAT","SUN"]),Km=new Set(["DAB","FLL","RSW","VPS","GNV","JAX","EYW","MLB","MIA","MCO","ECP","PNS","PGD","SFB","SRQ","PIE","TLH","TPA","PBI","FXE","VRB","BCT","CLW","FMY","HWO","CRG","ISM","LAL","TMB","OPF","ORL","SPG","TPF","VNC","LNA","AAF","AVO","BOW","CDK","CEW","CTY","DSI","FPR","IMM","NZC","LCQ","LEE","MTH","MRK","COI","TNT","MPB","APF","OCF","OBE","PHK","FPY","PPM","SEF","UST","SUA","TIX","GIF","ZPH","OCA","COF","EGI","HST","NIP","NEN","NQX","NRB","NSE","PAM","NPA","NUN","MCF","VPS"]),Zm=new Set(["BILLS","DOLPHINS","PATRIOTS","JETS","RAVENS","BENGALS","BROWNS","STEELERS","TEXANS","COLTS","JAGUARS","TITANS","BRONCOS","CHIEFS","RAIDERS","CHARGERS","COWBOYS","GIANTS","EAGLES","BEARS","LIONS","PACKERS","VIKINGS","FALCONS","PANTHERS","SAINTS","RAMS","SEAHAWKS"]),qm=new Set(["AFN","ALL","DZD","USD","EUR","AOA","XCD","XCD","ARS","AMD","AWG","AUD","EUR","AZN","BSD","BHD","BDT","BBD","BYN","EUR","BZD","XOF","BMD","BTN","INR","BOB","BOV","USD","BAM","BWP","NOK","BRL","USD","BND","BGN","XOF","BIF","CVE","KHR","XAF","CAD","KYD","XAF","XAF","CLF","CLP","CNY","AUD","AUD","COP","COU","KMF","CDF","XAF","NZD","CRC","HRK","CUC","CUP","ANG","EUR","CZK","XOF","DKK","DJF","XCD","DOP","USD","EGP","SVC","USD","XAF","ERN","EUR","ETB","EUR","FKP","DKK","FJD","EUR","EUR","EUR","XPF","EUR","XAF","GMD","GEL","EUR","GHS","GIP","EUR","DKK","XCD","EUR","USD","GTQ","GBP","GNF","XOF","GYD","HTG","USD","AUD","EUR","HNL","HKD","HUF","ISK","INR","IDR","XDR","IRR","IQD","EUR","GBP","ILS","EUR","JMD","JPY","GBP","JOD","KZT","KES","AUD","KPW","KRW","KWD","KGS","LAK","EUR","LBP","LSL","ZAR","LRD","LYD","CHF","EUR","EUR","MOP","MGA","MWK","MYR","MVR","XOF","EUR","USD","EUR","MRU","MUR","EUR","XUA","MXN","MXV","USD","MDL","EUR","MNT","EUR","XCD","MAD","MZN","MMK","NAD","ZAR","AUD","NPR","EUR","XPF","NZD","NIO","XOF","NGN","NZD","AUD","USD","NOK","OMR","PKR","USD","PAB","USD","PGK","PYG","PEN","PHP","NZD","PLN","EUR","USD","QAR","MKD","RON","RUB","RWF","EUR","EUR","SHP","XCD","XCD","EUR","EUR","XCD","WST","EUR","STN","SAR","XOF","RSD","SCR","SLE","SGD","ANG","XSU","EUR","EUR","SBD","SOS","ZAR","SSP","EUR","LKR","SDG","SRD","NOK","SZL","SEK","CHE","CHF","CHW","SYP","TWD","TJS","TZS","THB","USD","XOF","NZD","TOP","TTD","TND","TRY","TMT","USD","AUD","UGX","UAH","AED","GBP","USD","USD","USN","UYI","UYU","UZS","VUV","VEF","VED","VND","USD","USD","XPF","MAD","YER","ZMW","ZWL","EUR"]),$m=new Set(["BEGUILED","BILKED","BURNED","CHEATED","CONFUSED","CONNED","DECEIVED","DELUDED","DUPED","FINESSED","FOOLED","HAD","MISLED","MISTAKEN","SCAMMED","SWINDLED","TAKENIN","TOOKIN","WRONGED"]),Eo=[["ONE",1],["TWO",2],["THREE",3],["FOUR",4],["FIVE",5],["SIX",6],["SEVEN",7],["EIGHT",8],["NINE",9]],bo=[["TWENTY",20],["THIRTY",30],["FORTY",40],["FIFTY",50],["SIXTY",60],["SEVENTY",70],["EIGHTY",80],["NINETY",90]],Xm=[["ZERO",0],["TEN",10],["ELEVEN",11],["TWELVE",12],["THIRTEEN",13],["FOURTEEN",14],["FIFTEEN",15],["SIXTEEN",16],["SEVENTEEN",17],["EIGHTEEN",18],["NINETEEN",19],["HUNDRED",100],["THOUSAND",1e3],["MILLION",1e6],["BILLION",1e9],["TRILLION",1e12]],Jm=new Set(["ABUS","ACINACES","ADZE","AIKUCHI","AKINAKA","AKLYS","AKRAFENA","AMIRRE","ANELACE","ANGON","ANKUS","ARBALEST","ARBIR","ARBLAST","ARIT","ARQUEBUS","ARUVAL","ASA","ASSEGAI","ATGEIR","ATHAME","ATLATL","AXE","AYLLO","BADIK","BAGHNAKH","BAKATWA","BALARAO","BALISONG","BALLISTA","BANGKAW","BANGKUNG","BANYAL","BARDICHE","BARONG","BASELARD","BASILARD","BASILISK","BATANGAS","BATON","BAYONET","BHUJ","BICHUWA","BICUCO","BILL","BISENTO","BLADE","BLAKAS","BLOWPIPE","BLOWTUBE","BLUDGEON","BO","BRIQUET","CAESTUS","CAMBUK","CANE","CANNON","CARBINE","CATAPULT","CELURIT","CESTRUS","CESTUS","CETBANG","CHAIN","CHAKO","CHAPE","CHICOTTE","CHOKUTO","CHUI","CHURIKA","CIMPABA","CLAYMORE","CLUB","CORVO","CROP","CUDGEL","CULVERIN","CUTLASS","DAIKYU","DAO","DART","DHA","DIRK","DISACKN","DOLOIRE","DORY","DOTANUKI","DUSACK","DUSAGGE","DUSEGG","DUSSACK","DYSACK","EKU","EMEICI","EPEE","ESPADON","ESTOC","FACON","FALARICA","FALCATA","FALCHION","FALCONET","FALX","FAN","FARANGI","FAUCHARD","FIRANGI","FIREARM","FIRINGHA","FIRINGI","FLAIL","FLYSSA","FOIL","FORK","FU","GAIZAZ","GAR","GAUNTLET","GAYANG","GEIRR","GER","GINGAL","GINSU","GLADIUS","GLAIVE","GOLOK","GRENADE","GUISARME","GUN","HAKAPIK","HALADIE","HALBERD","HAMMER","HANKYU","HARPE","HARPI","HARPOON","HASTA","HATCHET","HOWITZER","HUDUNPAO","HUOCHE","HUOCHONG","HURLBAT","HWAL","HWANDO","IDA","IKLWA","IKUL","IMVUBU","ITAK","JAMBIA","JAMBIYA","JAMBYA","JANBIA","JANBIYA","JANJAL","JI","JO","JUTTE","KABEALA","KAIKEN","KALIS","KAMA","KAMPILAN","KARABELA","KARD","KASKARA","KASTANE","KASUYU","KATANA","KATAR","KERALA","KESTROS","KETERIYA","KHANDA","KHANJALI","KHANJAR","KHUKRI","KILA","KILIJ","KILONDA","KINJAL","KIRPAN","KLEWANG","KNIFE","KNOUT","KOPIS","KOTIATE","KRABI","KRIS","KUDI","KUJANG","KUKRI","KUNAI","KURBASH","LABRYS","LANCE","LANTAKA","LARIAT","LASSO","LATHI","LELA","LITHOS","LITUPA","LIWI","LUWUK","MACANA","MACE","MACHETE","MADUVU","MAHERA","MALLET","MAMBELE","MAMELUKE","MANDAU","MARU","MATTOCK","MERE","MESSER","MINE","MISSILE","MNIGOLO","MONSMEG","MOPLAH","MORTAR","MUBUCHAE","MUCHAN","MUSKET","MYRMEX","NAGAIKA","NAGAMAKI","NAGINATA","NAGYKA","NAIR","NANDAKA","NANGSUN","NAVAJA","NAYAR","NGAO","NIHONTO","NIMCHA","NINJATO","NOGAIKA","NSAPO","NUNCHAKU","NYEPEL","ODACHI","ONO","ONZIL","OTSUCHI","OTTA","OXYBELES","PALITAI","PALUPAD","PANABA","PANDAT","PARANG","PARANKI","PARTISAN","PATA","PATU","PELEKYS","PERNACH","PETRONEL","PEURAWOT","PHURBA","PICK","PIKE","PILUM","PINUTI","PIRAH","PIRANGI","PIRANKI","PISTOL","PLUMBATA","POIGNAL","POLEARM","POTDEFER","PRANGA","PRANGI","PRANGU","PRANKI","PRANKU","PUGIO","PULWAR","PUNAL","PUNYAL","PUUKKO","QAMA","QIANG","QUAMA","RABAULD","RAM","RANSEUR","RAPIER","RAWCON","RESOLZA","REVOLVER","RIBAULT","RICASSO","RIFLE","ROCKET","ROMFEA","ROMPHEA","ROPE","RUDUS","RUNGU","RUNKA","SABER","SABRE","SAI","SAKER","SARISSA","SCHNEPF","SCIMITAR","SCYTHE","SEAX","SEME","SENGESE","SFERE","SHAMSHIR","SHIV","SHOTEL","SHOUM","SHUCKRA","SHURIKEN","SIBAT","SICA","SICKLE","SIDEARM","SLAPJACK","SLING","SOVNYA","SPADE","SPADONE","SPADROON","SPATHA","SPEAR","SPETUM","STAFF","STAVE","STILETTO","SUBURITO","SUMBLING","SURIK","SUWAIYA","SWORD","SZABLA","TABARZIN","TACHI","TAIAHA","TAKOBA","TALWAR","TASER","TEGHA","TEKKAN","TEKKO","TEKPI","TESAK","TOMAHAWK","TONFA","TONGI","TORADAR","TORADOR","TORPEDO","TRIDENT","TRUMBASH","TSURUGI","TUCK","TUMI","TUSECKN","ULFBERHT","ULU","URUMI","UURGA","VEL","VERUTUM","VEUGLAIR","VOULGE","WADDY","WEDUNG","WHIP","WOLDO","WOOMERA","XANADU","XIFOS","XIPHOS","XIXIA","YARI","YATAGAN","YAWARI","ZANBATO","ZAPPOZAP"]),Qm=new Set(["ASPHERE","AXICON","DIFFUSER","ETALON","FILTER","GLASS","GRATE","GRATING","GRISM","ISOLATER","LENS","MIRROR","NULLER","PINHOLE","PRISM","QPLATE","RETICLE","SPLITTER","WINDOW"]),eh=new Set(["MAGE","JUSTIFY","NYQUIST","ORB","BIGBROWN","BARBARO","GIACOMO","GOFORGIN","SEAHERO","LILETEE","ALYSHEBA","SWALE","AFFIRMED","TOMYLEE","TIMTAM","NEEDLES","SWAPS","DARKSTAR","HILLGAIL","PONDER","CITATION","JETPILOT","ASSAULT","HOOPJR","PENSIVE","SHUTOUT","LAWRIN","OMAHA","WHISKERY","ZEV","MORVICH","REGRET","DONERAIL","WORTH","MERIDIAN","DONAU","PINKSTAR","SIRHUON","AGILE","ELWOOD","BABEHURD"]),th=new Set(["ARCHERY","BASEBALL","SOFTBALL","BOXING","BREAKING","CANOE","CANOEING","CYCLING","DIVING","FENCING","FOOTBALL","GOLF","HANDBALL","HOCKEY","JUDO","KARATE","ROWING","RUGBY","SAILING","SHOOTING","SURFING","SWIMMING","TENNIS"]),rh=new Set(["AATROX","AHRI","AKALI","AKSHAN","ALISTAR","AMUMU","ANNIE","APHELIOS","ASHE","AZIR","BARD","BELVETH","BRAND","BRAUM","CAITLYN","CAMILLE","CHOGATH","CORKI","DARIUS","DIANA","DRAVEN","EKKO","ELISE","EVELYNN","EZREAL","FIORA","FIZZ","GALIO","GAREN","GNAR","GRAGAS","GRAVES","GWEN","HECARIM","ILLAOI","IRELIA","IVERN","JANNA","JAX","JAYCE","JHIN","JINX","KAISA","KALISTA","KARMA","KARTHUS","KASSADIN","KATARINA","KAYLE","KAYN","KENNEN","KHAZIX","KINDRED","KLED","KOGMAW","KSANTE","LEBLANC","LEESIN","LEONA","LILLIA","LUCIAN","LULU","LUX","MALPHITE","MALZAHAR","MAOKAI","MILIO","MORGANA","NAAFIRI","NAMI","NASUS","NAUTILUS","NEEKO","NIDALEE","NILAH","NOCTURNE","OLAF","ORIANNA","ORNN","PANTHEON","POPPY","PYKE","QIYANA","QUINN","RAKAN","RAMMUS","REKSAI","RELL","RENEKTON","RENGAR","RIVEN","RUMBLE","RYZE","SAMIRA","SEJUANI","SENNA","SETT","SHACO","SHEN","SHYVANA","SINGED","SION","SKARNER","SONA","SORAKA","SWAIN","SYLAS","SYNDRA","TALIYAH","TALON","TARIC","TEEMO","THRESH","TRISTANA","TRUNDLE","TWITCH","UDYR","URGOT","VARUS","VAYNE","VEIGAR","VELKOZ","VEX","VI","VLADIMIR","VOLIBEAR","WARWICK","WUKONG","XAYAH","XERATH","XINZHAO","YASUO","YONE","YORICK","YUUMI","ZAC","ZED","ZERI","ZIGGS","ZILEAN","ZOE","ZYRA"]),sh=new Set(["ALABAMA","ALASKA","ARIZONA","ARKANSAS","CALIFORNIA","COLORADO","CONNECTICUT","DELAWARE","FLORIDA","GEORGIA","HAWAII","IDAHO","ILLINOIS","INDIANA","IOWA","KANSAS","KENTUCKY","LOUISIANA","MAINE","MARYLAND","MASSACHUSETTS","MICHIGAN","MINNESOTA","MISSISSIPPI","MISSOURI","MONTANA","NEBRASKA","NEVADA","NEWHAMPSHIRE","NEWJERSEY","NEWMEXICO","NEWYORK","NORTHCAROLINA","NORTHDAKOTA","OHIO","OKLAHOMA","OREGON","PENNSYLVANIA","RHODEISLAND","SOUTHCAROLINA","SOUTHDAKOTA","TENNESSEE","TEXAS","UTAH","VERMONT","VIRGINIA","WASHINGTON","WESTVIRGINIA","WISCONSIN","WYOMING"]),ah=new Set(["JANUARY","FEBRUARY","MARCH","APRIL","MAY","JUNE","JULY","AUGUST","SEPTEMBER","OCTOBER","NOVEMBER","DECEMBER"]),nh=new Set(["ACACIA","ALDER","ALMOND","APPLE","APRICOT","ARBUTUS","ARECA","ARGAN","ASH","ASPEN","AVOCADO","BALSA","BAMBOO","BANYAN","BAOBAB","BASSWOOD","BAY","BEADTREE","BEECH","BIRCH","BOOJUM","BUCKEYE","CACAO","CAMPHOR","CATALPA","CEDAR","CEIBA","CHERRY","CHESTNUT","CINCHONA","CINNAMON","CITRUS","COCONUT","COFFEE","CYCAD","CYPRESS","DODO","DOGWOOD","DURIAN","ELDER","ELM","EUCALYPT","EUCOMMIA","FIG","FIR","FOXGLOVE","GINKGO","GUAVA","GURJAN","HACKBERRY","HAWTHORN","HAZEL","HEMLOCK","HICKORY","HOLLY","HORNBEAM","IPE","IRONWOOD","JACARANDA","JOSHUA","JUJUBE","KALYNA","KAPOK","KAURI","KUMQUAT","LAPACHO","LARCH","LAUREL","LEMON","LIME","LINDEN","LYCHEE","MAGNOLIA","MAHOE","MAHOGANY","MANGO","MANGROVE","MAPLE","MIRO","MORINGA","MULBERRY","MYALL","MYRTLE","NARRA","NEEM","NUTMEG","OAK","OLIVE","ORANGE","ORCHID","PALM","PAPAYA","PAWPAW","PEACH","PEAR","PECAN","PEREPAT","PERSIMMON","PINE","PISTACHIO","PLANE","PLUM","POPLAR","REDWOOD","RIMU","ROWAN","RUBBER","SAKHUA","SAL","SARAI","SASSAFRAS","SEQUOIA","SHALA","SOURSOP","SPRUCE","STOPPER","SUGI","SUMAC","SWEETGUM","SYCAMORE","TAMARACK","TEA","THUJA","TOTARA","TULIP","TUPELO","ULLIRI","WALNUT","WILLOW","WINGNUT","YEW","YUCCA"]),wo="bearhive",oh="beehive",ko="larva",lh=15,ue=["luge-bear","stufful-bear","black-bear","banana-bear","sun-bear","ord-bear","bears-bear","confused-bear","eur-bear","three-bear","bludgeon-bear","four-bear","grism-bear","assault-bear","archery-bear","oak-bear","december-bear","alabama-bear","rammus-bear"],Ao=Eo.concat(bo).concat(Xm);function ka(r){var o,l;const e=r.getNumRows(),t=r.getNumColumns(),s=r.getAllPermanents(),a=[];for(let i=0;i<e;i++){const u=[];for(let c=0;c<t;c++)u.push(void 0);a.push(u)}for(const i of s)a[i.slot.row][i.slot.column]=i;const n=new Set;for(let i=0;i<e;i++){let u="";for(let c=0;c<t;c++){const d=a[i][c];d===void 0||d.card.name===ko?(n.add(u),u=""):u+=(o=d.card.name)==null?void 0:o.charAt(0).toUpperCase()}n.add(u)}for(let i=0;i<t;i++){let u="";for(let c=0;c<e;c++){const d=a[c][i];d===void 0||d.card.name===ko?(n.add(u),u=""):u+=(l=d.card.name)==null?void 0:l.charAt(0).toUpperCase()}n.add(u)}return n}function ih(r,e){for(const t of e)for(const s of r)if(t.includes(s))return!0;return!1}const So={[R.CREATED]:r=>{const{ctx:e,permanent:t}=r;e.engine.addCounter(t,{type:I.CANNOT_CREATE}),e.engine.addCounter(t,{type:I.CANNOT_ATTACK}),e.engine.addCounter(t,{type:I.CANNOT_MOVE})}},_o={larva:{onSpecial:(r,e)=>{const{engine:t}=e,{permanent:s}=r,n=qc(r,0).toLowerCase().replace(/ /g,"-"),o=s.slot,l=s.owner;t.despawn(s),t.spawn(n,o,l)},handlers:So}};for(const r of Ar)_o[r.toLocaleLowerCase().replace(/ /g,"-")]={onRepeatable:(e,t)=>{const{engine:s}=t;s.despawn(e.permanent)},handlers:So};const uh={afterInitEngine:r=>{const{engine:e}=r;e.initExtraState({firstNumber:void 0,usedDraw:!1,usedSpecial:!1})},afterTurnEnd:(r,e)=>{const{inspector:t,engine:s}=e;if(r===f.P2){const a=t.getPermanentsOf(f.P1).filter(n=>n.card.name!==oh).length;s.addGems(f.P1,new Array(a).fill(C.YELLOW))}},beforeNewGame:r=>{const{ai:e,engine:t}=r;t.addGems(f.P1,new Array(lh).fill(C.YELLOW)),e.speak(`The B, E, A, R, S are looking rather down today. Help us C, H, E, E, R them up!
We’ll keep the H, O, N, E, Y fresh, so it won’t reset between T, U, R, N, S!`)},cardEffects:_o,aiTurn:r=>{const{ai:e,engine:t,inspector:s}=r,a=t.getExtraState(),n=s.getTurnNumber()/2,o=ka(s),l=s.getPermanentsOf(f.P2).find(y=>y.card.name===wo);if(n===0){if(l===void 0)return;t.addCounter(l,{type:I.HAPPY_BEARS,val:0}),t.addCounter(l,{type:I.SAD_BEARS,val:0})}const i=[],u=(y,A)=>{if(l===void 0)return;const S=A===void 0?"Bear":s.getCardDisplayName(A);t.mergeValueCounter(l,y?I.HAPPY_BEARS:I.SAD_BEARS,1),i.push(`${S} is ${y?"H, A, P, P, Y!":"S, A, D :("}`)};function c(y,A){const S=s.getPermanentsOf(f.P2).find(O=>O.card.name===y);S===void 0||s.getCardDisplayName(S),u(ih(A,o),S),S!==void 0&&t.despawn(S)}switch(n){case 2:c(ue[0],Fm);break;case 5:c(ue[1],Ym);break;case 6:c(ue[2],jm);break;case 7:c(ue[3],Vm);break;case 8:c(ue[4],Wm),c(ue[5],Km);break;case 9:c(ue[6],Zm);break;case 10:c(ue[7],$m),c(ue[8],qm);break;case 11:{const y=ka(s);let A;for(const[k,P]of Ao)for(const N of y)N.includes(k)&&(A===void 0||A>P)&&(A=P);const S=s.getPermanentsOf(f.P2).find(k=>k.card.name===ue[9]),O=A!==void 0;O&&(a.firstNumber=A),u(O,S),S!==void 0&&t.despawn(S),c(ue[10],Jm);break}case 13:{const y=ka(s);let A;const S=[];for(const[P,N]of bo)for(const[U,Q]of Eo)S.push([P+U,N+Q]);for(const[P,N]of Ao.concat(S))for(const U of y)U.includes(P)&&(A===void 0||A<N)&&(A=N);const O=s.getPermanentsOf(f.P2).find(P=>P.card.name===ue[11]),k=A!==void 0&&a.firstNumber!==void 0&&A>a.firstNumber;u(k,O),O!==void 0&&t.despawn(O),c(ue[12],Qm),c(ue[13],eh);break}case 15:c(ue[14],th),c(ue[15],nh),c(ue[16],ah),c(ue[17],sh),c(ue[18],rh);break}const d=n===3&&!t.getExtraState().usedDraw,g="Oh yeah, a certain M, A, S, T, E, R, Y might bee very helpful for this battle!";(i.length>0||d)&&e.speak([...i.length>0?[i.join(d||i.length>4?" ":`
`)]:[],...d?[g]:[]].join(`
`));function w(y,A){s.getAllPermanents().filter(S=>S.slot.column===A&&S.slot.row===y).forEach(S=>t.despawn(S))}switch(n){case 1:w(2,2),e.trySpawn(ue[0],2,2);break;case 4:w(2,2),e.trySpawn(ue[1],2,2);break;case 5:w(2,2),e.trySpawn(ue[2],2,2);break;case 6:w(2,2),e.trySpawn(ue[3],2,2);break;case 7:w(2,2),w(2,3),e.trySpawn(ue[4],2,2),e.trySpawn(ue[5],2,3);break;case 8:w(2,2),e.trySpawn(ue[6],2,2);break;case 9:w(2,2),w(2,3),e.trySpawn(ue[7],2,2),e.trySpawn(ue[8],2,3);break;case 10:w(2,3),w(2,2),e.trySpawn(ue[9],2,3),e.trySpawn(ue[10],2,2);break;case 12:w(2,2),w(2,3),w(2,4),e.trySpawn(ue[11],2,2),e.trySpawn(ue[12],2,3),e.trySpawn(ue[13],2,4);break;case 14:w(1,2),w(2,2),w(0,5),w(1,5),w(2,5),e.trySpawn(ue[14],1,2),e.trySpawn(ue[15],2,2),e.trySpawn(ue[16],0,5),e.trySpawn(ue[17],1,5),e.trySpawn(ue[18],2,5);break}},extraLoseChecks:(r,e)=>{var n;const{inspector:t}=e,s=t.getPermanentsOf(f.P2).find(o=>o.card.name===wo),a=(((n=s==null?void 0:s.counters.find(o=>o.type===I.SAD_BEARS))==null?void 0:n.val)??0)===0;return t.getTurnNumber()>=31&&a===(r===f.P2)},afterStep:(r,e)=>{if(r.type===H.DRAW){e.engine.getExtraState().usedDraw=!0;return}const{ai:t,engine:s}=e,a=s.getExtraState();a.usedSpecial||r.type===H.ACTIVATE_ABILITY&&r.abilityType===ve.SPECIAL&&(a.usedSpecial=!0,t.speak("This battle has a S, P, E, C, I, A, L hotkey! When transforming a Larva into a bee, you can type any letter key to select the bee type whose first letter matches!"))}},To=5,vo=2,Io=14,Ro=4,No=3,Co=5,Jt=(r,e,t)=>{const{ai:s}=r;s.speak(`${e}
${Array(t).fill("⏳").join(" ")}`)},Qt=r=>e=>{const{permanent:t,ctx:s}=e,{engine:a}=s;a.addCounter(t,{type:I.DOOM,val:r})},er=r=>e=>{const{permanent:t,ctx:s}=e,{inspector:a,engine:n,ai:o}=s;if(a.getSharedExtraState(),a.doesPermanentHaveCounterType(t,I.DOOM)){const l=a.getCounterValSum(t,I.DOOM);`${a.getCardDisplayName(t)}`,l===r||l>1||l===1||l===0&&(a.getPermanents({ownedByOpponentOf:t.owner}).forEach(u=>{n.destroy(t,u)}),n.removeCounterType(t,I.DOOM),n.announce(`${a.getCardDisplayName(t)} destroys all enemy units`))}},Po={handlers:{[R.AFTER_DAMAGED]:r=>{const{permanent:e,attacker:t,ctx:s}=r,{inspector:a,engine:n}=s;t&&(n.announce(`${a.getCardDisplayName(e)} attacks back for 1 damage!`),n.damageUnattributed(t,1))},[R.OTHER_UNIT_DESTROYED]:r=>{const{permanent:e,destroyedPermanent:t,ctx:s}=r,{inspector:a,engine:n}=s;e.owner===t.owner&&n.adjustPermanentStats(e,0,1),n.announce(`${a.getCardDisplayName(e)} gains +1 max health`)}}},ch={cardEffects:{"kero-dos":{handlers:{[R.CREATED]:r=>{const{permanent:e,ctx:t}=r,{engine:s}=t;s.addCounter(e,{type:I.INVULNERABLE})}}},"dinosaur-tail":{adjustDamageReceived:(r,e,t,s)=>e>=1?1:e,handlers:{[R.CREATED]:Qt(To),[R.END_TURN]:er(To)}},"boar-tusks":{handlers:{[R.AFTER_DAMAGED]:r=>{const{permanent:e,attacker:t,ctx:s}=r,{inspector:a,engine:n}=s;t&&(n.announce(`${a.getCardDisplayName(e)} attacks back for 3 damage!`),n.damageUnattributed(t,3))},[R.CREATED]:Qt(vo),[R.END_TURN]:er(vo)}},"dryad-horns":{handlers:{[R.CREATED]:Qt(Io),[R.END_TURN]:er(Io)}},"cow-leg-white":Po,"cow-leg-black":Po,"cow-udder":{handlers:{[R.CREATED]:Qt(Ro),[R.END_TURN]:er(Ro),[R.AFTER_DAMAGED]:r=>{const{permanent:e,attacker:t,ctx:s}=r,{inspector:a,engine:n}=s;t&&(n.announce(`${a.getCardDisplayName(e)} attacks back for 1 damage!`),n.damageUnattributed(t,1))},[R.OTHER_UNIT_DESTROYED]:r=>{const{permanent:e,destroyedPermanent:t,ctx:s}=r,{inspector:a,engine:n}=s;e.owner===t.owner&&n.adjustPermanentStats(e,0,1),n.announce(`${a.getCardDisplayName(e)} gains +1 max health`)}}},"bee-wings":{handlers:{[R.CREATED]:Qt(No),[R.END_TURN]:er(No)},insteadOfDamaged:(r,e,t,s)=>{const{inspector:a}=s;return!(t&&r.owner===a.getOpponentOf(t.owner))}},kero:{handlers:{[R.CREATED]:Qt(Co),[R.END_TURN]:er(Co),[R.AFTER_DAMAGED]:r=>{const{permanent:e,ctx:t}=r,{inspector:s,engine:a}=t,n=s.getPermanents({name:"kero",owner:f.P2})[0];if(!n)return;const o=s.getHealth(n);a.adjustPermanentStats(n,0,o),a.announce(`Kero increases its Health by ${o}`)}}}},afterInitEngine:r=>{const{inspector:e,engine:t}=r;t.initSharedExtraState({keroPhase:0})},afterStep:(r,e)=>{const{inspector:t,engine:s}=e,a=t.getSharedExtraState();if(a.keroPhase===4){const o=t.getPermanents({owner:f.P2,name:"cow-udder"})[0];if(!o)return;t.getPermanents({owner:f.P2,name:"cow-leg-white"}).length+t.getPermanents({owner:f.P2,name:"cow-leg-black"}).length===0&&s.removeCounterType(o,I.INVULNERABLE)}t.getPermanentsOf(f.P2).length===0&&(s.modifySharedExtraState({keroPhase:a.keroPhase+1}),s.getBackdoorController().broadcastAndApply({type:W.WAIT_ANIMATE,waitTime:4e3}))},aiTurn:r=>{const{inspector:e,engine:t,ai:s}=r,a=e.getPermanentsOf(f.P2),n=e.getSharedExtraState();if(!a.some(u=>e.getCardType(u)===se.CREATURE)){t.modifySharedExtraState({keroPhase:n.keroPhase+1});const u=a[0];switch(n.keroPhase>1&&t.damageUnattributed(u,Math.round(e.getMaxHealth(u)/6),!0),e.getPermanentsOf(f.P1).forEach(c=>{e.getCardType(c)===se.CREATURE&&t.despawn(c)}),n.keroPhase){case 1:s.trySpawn("dinosaur-tail",1,2);break;case 2:s.trySpawn("boar-tusks",1,2);break;case 3:s.trySpawn("dryad-horns",1,2);break;case 4:{s.trySpawn("cow-udder",1,2);for(let d=1;d<3;d++)for(let g=0;g<5;g++)s.trySpawn((d+g)%2===0?"cow-leg-white":"cow-leg-black",d,g);const c=e.getPermanents({owner:f.P2,name:"cow-udder"})[0];c&&t.addCounter(c,{type:I.INVULNERABLE});break}case 5:s.trySpawn("bee-wings",1,2);break;case 6:{t.despawn(u),t.spawn("kero",0,2,f.P2);break}}}const l=e.getPermanents({hasCounter:I.DOOM})[0],i=l===void 0?0:e.getCounterValSum(l,I.DOOM);switch(n.keroPhase){case 1:{Jt(r,`How dare y'all turn against me?
After everything we've been thruwu!
Hand over the cards, or...
I'll smash all of you to bits with my tail! ( •̀_•́)💢`,i);break}case 2:{Jt(r,`You... destroyed my tail? How is that possible?!
The power of all our Dino friends was stored within it!
No matter. I still have power from all the other Factions!
I'll destroy youwu with my tusks!! (╬ Ò﹏Ó)`,i);break}case 3:{Jt(r,`STOP IT!!! I'll destroy ALL of you! ヽ(#\`Д´)ﾉ
I'll destroy the whole uwuorld!
If these horns would just — *cough* 🌷 — charge up a little faster...
All the cards... will be MINE! MY FRIENDS!!! FOREVER!!!!`,i);break}case 4:{Jt(r,`What, no!!! GIVE THEM BACK!!! (ง ‵□′)ง
You were my FRIEND! ALL of you were my FRIENDS!!!
We were so close... the UWU... Just... give up already!!!
I'll- I'll share some of the UWU with you, I promise!!!`,i);break}case 5:{Jt(r,`No... (๑′°︿°๑) I don't wanna...
I don't wanna go back to being a fish again...
I don't... I CAN'T go back in that box again...
Not another 1000 years... alone...`,i);break}case 6:{Jt(r,`Nouwu~! Everything... EVERYTHING IS RUWUINED!!! (ಥ﹏ಥ)
I... No, I can't give up, not nouwu...!
I don't need you, I NEVER needed you!
Not youwu, not cards... just the power... of UWU...`,i);break}}},disableP2NoBasesLossCondition:!0,extraLoseChecks:(r,e)=>{const{inspector:t,engine:s}=e,a=t.getSharedExtraState();return r===f.P2&&a.keroPhase===7}};function Aa(r,e){return Math.abs(r.slot.row-e.slot.row)+Math.abs(r.slot.column-e.slot.column)}function ws(r){let e=0;for(const t of r)/[0-9a-zA-Z]/.test(t)&&(e+=1);return e}function Oo(r){return r===null?0:r===C.WHITEBLACK?7:/^[A-Z]/.test(r)?r.charCodeAt(0)-"A".charCodeAt(0)+1:0}const dh=[[function(r,e,t){return r.getPower(t)}],[function(r,e,t){return r.getMaxHealth(t)}],[function(r,e,t){return Math.abs(r.getPower(t)-r.getMaxHealth(t))}],[function(r,e,t){return Math.abs(r.getPower(t)-ws(r.getCardDisplayName(t)))}],[function(r,e,t){return Math.abs(Aa(e,t)-Oo(r.getCardColor(t)))}],[function(r,e,t){return Math.abs(ws(r.getCardDisplayName(t))-Aa(e,t)*Oo(r.getCardColor(t)))}],[function(r,e,t){return Math.abs(r.getMaxHealth(t)*ws(r.getCardDisplayName(t))-Aa(e,t))},function(r,e,t){return Math.floor(r.getTurnNumber()/2)*Math.abs(r.getMaxHealth(t)-ws(r.getCardDisplayName(t)))}]];function fh(r){return{[R.START_TURN]:e=>{var l;const t=e.permanent,{inspector:s,engine:a}=e.ctx,n=a.getExtraState(),o=s.getCardDisplayName(t);for(const i of r){const u=s.getPermanentsOf(s.getOpponentOf(t.owner)).filter(c=>!s.isProtectedFrom(c,t));for(const c of u){const d=i(s,t,c),g=s.getCardDisplayName(c);a.announce(`The gostak attacks ${g} for ${d}...`),(l=n.damageMappings)[o]??(l[o]=[]),n.damageMappings[o].push({targetName:g,damage:d}),a.damage(t,c,d)}}}}}const Rt=dh.map((r,e)=>{const t=`gostak${e+1}`;return{disableP2NoBasesLossCondition:!0,counterData:{},cardEffects:{[t]:{handlers:fh(r)}},afterInitEngine:s=>{s.engine.initExtraState({damageMappings:{}})},aiTurn:s=>{const{inspector:a,engine:n,ai:o}=s,l=n.getExtraState();a.getTurnNumber()===0&&o.trySpawn(t,0,2),Object.keys(l.damageMappings).length>0?(o.speak(`A portion of damage to every foe!
${Object.entries(l.damageMappings).map(([i,u])=>u.map(({targetName:c,damage:d})=>`${c}, ${d}.`).join(" ")).join(`
`)}`),l.damageMappings={}):n.clearKeyframe()},extraLoseChecks:(s,a)=>{const{inspector:n}=a;return s===f.P2?n.getPermanentsOf(f.P2).length===0:!1}}}),Sa=(r,e)=>{const{ai:t}=r;t.speak(`Good heavens! The ${e?"asteroids are":"asteroid is"} here! Doom, doom to us all!`,{hideBattler:!0,speaker:kr.DINO})},_a=(r,e)=>{const{ai:t}=r;t.speak(`The asteroid approches. ${e} ${e===1?"turn remains":"turns remain"}!
${Array(e).fill("⏳").join(" ")}`,{speaker:kr.DINO})},mh={disableP2NoBasesLossCondition:!0,extraLoseChecks:Ta,beforeNewGame(r){const{engine:e}=r;e.spawn(fs,{row:0,column:2},f.P2)},counterData:{[I.DOOM]:{handlers:{[R.START_TURN]:va(Ia)}}},cardEffects:{[fs]:{handlers:{[R.CREATED]:r=>{r.ctx.engine.addCounter(r.permanent,{type:I.DOOM,val:11})}}}},aiTurn:r=>{const{inspector:e,engine:t,ai:s}=r,a=e.getPermanentsOf(f.P2),n=a.find(l=>e.doesPermanentHaveCounterType(l,I.DOOM));if(n){_a(r,e.getCounterValSum(n,I.DOOM));return}const o=a.find(l=>l.card.name===fs);for(const l of e.getPermanentsOf(f.P1))o?t.destroy(o,l):t.despawn(l);Sa(r,!1)}},hh={disableP2NoBasesLossCondition:!0,extraLoseChecks:Ta,beforeNewGame(r){const{engine:e}=r;e.spawn(ht,{row:0,column:0},f.P2),e.spawn(ht,{row:1,column:1},f.P2),e.spawn(ht,{row:2,column:2},f.P2),e.spawn(ht,{row:1,column:3},f.P2),e.spawn(ht,{row:0,column:4},f.P2)},counterData:{[I.DOOM]:{handlers:{[R.START_TURN]:va(Ia)}}},cardEffects:{[ht]:{handlers:{[R.CREATED]:r=>{r.ctx.engine.addCounter(r.permanent,{type:I.DOOM,val:11})}}}},aiTurn:r=>{const{inspector:e,engine:t}=r,s=e.getPermanentsOf(f.P2),a=s.find(o=>e.doesPermanentHaveCounterType(o,I.DOOM));if(a){_a(r,e.getCounterValSum(a,I.DOOM));return}const n=s.find(o=>o.card.name===ht);for(const o of e.getPermanentsOf(f.P1))n?t.destroy(n,o):t.despawn(o);Sa(r,!0)}},ph={disableP2NoBasesLossCondition:!0,extraLoseChecks:Ta,beforeNewGame(r){const{engine:e}=r;e.spawn(_r,{row:0,column:2},f.P2)},counterData:{[I.DOOM]:{handlers:{[R.START_TURN]:va(Ia)}}},cardEffects:{[_r]:{handlers:{[R.CREATED]:r=>{r.ctx.engine.addCounter(r.permanent,{type:I.DOOM,val:11})}}}},aiTurn:r=>{const{inspector:e,engine:t}=r,s=e.getPermanentsOf(f.P2),a=s.find(c=>e.doesPermanentHaveCounterType(c,I.DOOM));if(a){_a(r,e.getCounterValSum(a,I.DOOM));return}const n=s.find(c=>c.card.name===_r);if(!n)return;const o=e.getPower(n);t.removeDamage(n,e.getBaseHealth(n));const l=e.getHealth(n),i=o-l;i!==0&&t.adjustPermanentStats(n,0,i);let u=o;for(const c of e.getPermanents({owner:f.P1,sort:["creaturesFirst",{type:"frontToBack",perspective:f.P1}]})){const d=e.getHealth(c);if(d>u){t.announce(`${c.card.name} catches the Meaty Ore!`),t.damage(c,n,d);break}t.damage(c,n,d),t.adjustPermanentStats(n,-d,0),t.destroy(n,c),u-=d}e.getPermanents({name:_r}).length!==0&&Sa(r,!1)}};function Ta(r,e){const{inspector:t}=e;return r===f.P2&&t.getPermanentsOf(r).length===0}function va(r){return e=>{const{permanent:t,counter:s,counterIndex:a,ctx:n}=e,{engine:o,inspector:l}=n;if(!l.isTurnPending(t.owner))return;if(s==null||a==null)throw new Error("counter event should have counter specified");const i=(s.val||0)-1;if(i<=0)return{expire:!0};o.updateCounterVal(t,a,i,r)}}function Ia(r){switch(r){case 0:return"BOOM!!!!!!!";case 1:return"This asteroid lands in 1 turn!";default:return`This asteroid lands in ${r} turns.`}}const gh=["arvada","burlington","centennial","grover","cow-butte","ramsey-peak","saddle-mountain","finger-rock"],Ra=8,yh={arvada:[0,4],grover:[2,0],burlington:[0,2],centennial:[3,4],"cow-butte":[3,3],"ramsey-peak":[3,1],"saddle-mountain":[0,1],"finger-rock":[0,3]},Eh={arvada:[1,3],grover:[0,4],burlington:[1,6],centennial:[1,4],"cow-butte":[2,5],"ramsey-peak":[0,3],"saddle-mountain":[2,1],"finger-rock":[0,2]},Uo=r=>({row:r[0],column:r[1]}),Na={handlers:{[R.CREATED]:r=>{r.ctx.engine.addCounter(r.permanent,{type:I.BASE_GEMS,val:1})}}},bh={cardEffects:{arvada:Na,burlington:Na,centennial:Na},disableNoBasesLossCondition:!0,afterInitEngine:r=>{r.engine.initExtraState({isAngry:!1})},beforeNewGame:r=>{for(const e of gh)r.engine.addCardToHand(f.P1,{name:e}),r.engine.spawn(e,Uo(Eh[e]),f.P2)},extraLoseChecks:(r,e)=>{const{inspector:t}=e;if(r===f.P1){const n=t.getPermanentsOf(r).length+t.gameState[r].hand.length===Ra;return n||e.ai.speak("...you have no hope of victory now..."),!n}const s=t.getPermanentsOf(f.P1);return(n=>s.length>=Ra&&s.every(o=>{if(!o.card.name)throw new Error("oops");const l=n[o.card.name];return l&&ns(o.slot,Uo(l))}))(yh)?(e.ai.speak(""),!0):!1},afterStep:(r,e)=>{const t=e.engine.getExtraState();t.isAngry||e.inspector.getPermanentsOf(f.P2).length!==Ra&&(e.ai.speak("...must coordinate troops... ...partition the land... ...degree by degree..."),t.isAngry=!0),r.type===H.ATTACK&&e.inspector.getPermanentsOf(f.P2).length===0&&e.ai.speak("...my strength is gone... ...but you won’t take me... ...not with that formation...")},aiTurn:r=>{const{inspector:e,ai:t}=r;if(r.engine.getExtraState().isAngry)for(const s of e.getPermanentsOf(f.P2))!s.ready||e.getPower(s)<=0||r.ai.tryAttackFirst(s,{sort:["health"]})}},wh={disableP2NoBasesLossCondition:!0,cardEffects:{"miracle-growth":{handlers:{[R.OTHER_UNIT_SPAWN]:r=>{const e=r.permanent,{inspector:t,engine:s}=r.ctx,a=t.getPower(e);a>0&&s.adjustPermanentStats(e,a,0);const n=t.getMaxHealth(e),o=t.getHealth(e);s.adjustPermanentStats(e,0,n),n-o&&s.damageUnattributed(e,n-o)}}}},aiTurn:r=>{const{inspector:e,ai:t}=r;e.getTurnNumber()===0&&t.trySpawn("miracle-growth",0,2),e.getPermanentsOf(f.P2).forEach(s=>t.tryAttackFirst(s,{sort:[{type:"weighted",weights:[{criterion:"-power",weight:1},{criterion:"health",weight:1}]},{type:"euclideanDistance",slot:s.slot}]}))},extraLoseChecks:(r,e)=>{const{inspector:t}=e;return r===f.P2&&t.getPermanentsOf(r).length===0}},kh={disableP2NoBasesLossCondition:!0,cardEffects:{"leech-seed":{handlers:{[R.START_TURN]:r=>{const e=r.permanent,{inspector:t,engine:s}=r.ctx,a=t.getPermanents({type:se.CREATURE}).map(n=>t.getPower(n)).reduce((n,o)=>n+o,0);a>0&&s.adjustPermanentStats(e,0,a)}}}},aiTurn:r=>{const{inspector:e,ai:t}=r;e.getTurnNumber()===0&&t.trySpawn("leech-seed",0,2),e.getPermanentsOf(f.P2).forEach(s=>t.tryAttackFirst(s))},extraLoseChecks:(r,e)=>{const{inspector:t}=e;return r===f.P2&&t.getPermanentsOf(r).length===0}},Ah={disableP2NoBasesLossCondition:!0,cardEffects:{"wild-weed":{handlers:{[R.OTHER_UNIT_SPAWN]:r=>{const{permanent:e,spawnedPermanent:t}=r;if(e.owner!==t.owner){const{engine:s,inspector:a}=r.ctx;let n=a.getPower(t);if(!n)return;const o=a.getUnoccupiedSlotsClosestTo(f.P2,e.slot);for(const l of o)if(s.spawn("wild-weed",l,f.P2)&&(n--,n===0))break}}}}},aiTurn:r=>{const{inspector:e,ai:t}=r;e.getTurnNumber()===0&&t.trySpawn("wild-weed",0,2),e.getPermanentsOf(f.P2).forEach(s=>t.tryAttackFirst(s,{sort:[{type:"weighted",weights:[{criterion:"-power",weight:1},{criterion:"health",weight:1}]},{type:"euclideanDistance",slot:s.slot}]}))},extraLoseChecks:(r,e)=>{const{inspector:t}=e;return r===f.P2&&t.getPermanentsOf(r).length===0}},Sh={disableP2NoBasesLossCondition:!0,cardEffects:{"spirit-of-the-vines":{handlers:{[R.START_TURN]:r=>{const{permanent:e}=r,{engine:t}=r.ctx;t.adjustPermanentStats(e,0,2)},[R.OTHER_UNIT_DESTROYED]:r=>{const{permanent:e,destroyedPermanent:t}=r,{engine:s}=r.ctx;t.owner===e.owner&&s.adjustPermanentStats(e,1e4,1e4)}}},"overgrown-vines":{handlers:{[R.OTHER_UNIT_SPAWN]:r=>{const{spawnedPermanent:e}=r,{engine:t}=r.ctx;t.addCounter(e,{type:I.CANNOT_MOVE,explanation:"Immobile."})}}}},aiTurn:r=>{const{inspector:e,ai:t}=r;e.getTurnNumber()===0&&(t.trySpawn("spirit-of-the-vines",0,2),t.trySpawn("overgrown-vines",1,2)),e.getPermanentsOf(f.P2).forEach(s=>t.tryAttackFirst(s))},extraLoseChecks:(r,e)=>{const{inspector:t}=e;return r===f.P2&&t.getPermanentsOf(r).length===0}},_h={disableP2NoBasesLossCondition:!0,cardEffects:{"venus-bee-trap":{handlers:{[R.START_TURN]:r=>{const{permanent:e}=r,{engine:t}=r.ctx;t.adjustPermanentStats(e,0,3)},[R.OTHER_UNIT_DESTROYED]:r=>{const{permanent:e}=r,{engine:t}=r.ctx;t.adjustPermanentStats(e,1e4,1e4)}}}},aiTurn:r=>{const{inspector:e,ai:t}=r;e.getTurnNumber()===0&&t.trySpawn("venus-bee-trap",0,2),e.getPermanentsOf(f.P2).forEach(s=>t.tryAttackFirst(s,{sort:["creaturesFirst","health",{type:"euclideanDistance",slot:s.slot}]}))},extraLoseChecks:(r,e)=>{const{inspector:t}=e;return r===f.P2&&t.getPermanentsOf(r).length===0}},Th={cardEffects:{yurt:{handlers:{[R.START_TURN]:r=>{const{permanent:e,ctx:t}=r,{inspector:s,engine:a}=t;s.isTurnPending(e.owner)&&a.addGems(e.owner,[C.YELLOW])}}}},adjustDamageReceived:(r,e,t,s)=>{const{inspector:a,engine:n,ai:o}=s;return t&&Math.abs(t.slot.row-r.slot.row)>6?(n.announce(`${a.getCardDisplayName(t)} failed to damage ${a.getCardDisplayName(r)} because it was too far.`),0):e},disableP2NoBasesLossCondition:!0,extraLoseChecks:(r,e)=>{const{inspector:t}=e;return r===f.P2&&t.getPermanentsOf(r).length===0},aiTurn:r=>{const{inspector:e,ai:t}=r;if(e.getTurnNumber()===0){for(let s=0;s<=6;s++)for(let a=0;a<=4;a++)t.trySpawn("bee-rider",{row:s,column:a});return}e.getPermanentsOf(f.P2).filter(s=>e.getSharedEffects(s).isBase).forEach(s=>{const{row:a,column:n}=s.slot;for(let o=-1;o<=1;o++)for(let l=-1;l<=1;l++)t.trySpawn("bee-rider",{row:a+o,column:n+l})}),e.getPermanents({owner:f.P2,type:se.CREATURE,sort:[s=>-s.slot.row]}).forEach(s=>{const{row:a,column:n}=s.slot;t.tryActivateAbility(s,ve.FLEX,[{type:me.SLOT,slot:{row:a+1,column:n}}]),t.tryMoveRel(s,1,0),t.tryAttackFirst(s,{owner:f.P1,notProtectedFrom:s,custom:o=>Ht(s.slot,o.slot)<2})})}},ks=[{beforeNewGame:r=>{const{engine:e}=r;e.spawn("hog-factory",{row:0,column:1},f.P2),e.spawn("log-factory",{row:0,column:3},f.P2)},aiTurn:r=>{r.inspector.getTurnNumber()!==0&&(xo(r),As(r))}},{beforeNewGame:r=>{const{engine:e}=r;e.spawn("hog-factory",{row:0,column:0},f.P2),e.spawn("log-factory",{row:0,column:4},f.P2),e.spawn("stacktory",{row:0,column:2},f.P2)},aiTurn:r=>{Do(r).length==3?Oh(r):xo(r),r.inspector.getTurnNumber()!==0&&As(r)}},{beforeNewGame:r=>{const{engine:e}=r;e.spawn("hog-factorytorytory",{row:0,column:0},f.P2),e.spawn("log-factorytorytory",{row:0,column:1},f.P2)},aiTurn:r=>{const{inspector:e,ai:t}=r;if(e.getTurnNumber()===0)return;const s=e.getPermanents({owner:f.P2,sort:[a=>100*a.slot.row+a.slot.column]});for(const a of s){const n=Ph(a.card.name);if(n){let o=!1;for(const l of Ch(r))if(t.trySpawn(n,l)){o=!0;break}if(!o)break}}As(r)}},{beforeNewGame:r=>{const{engine:e}=r;e.spawn("stackstack-tory",{row:0,column:2},f.P2)},aiTurn:r=>{const{inspector:e,ai:t}=r;if(e.getTurnNumber()===0)return;const s=e.getPermanents({owner:f.P2,name:"stackstack-tory"})[0];if(s){const a=s.slot.column;for(const n of[0,1,2])if(t.trySpawn("hog-on-a-log-on-a",n,a))break}As(r)}}];function vh(r,e){if(e.ai.tryAttackFirst(r,{column:r.slot.column,sort:[{type:"frontToBack",perspective:f.P2}]}))return!0;const s=e.inspector.getPermanents({owner:f.P1,notProtectedFrom:r,sort:[a=>Math.abs(a.slot.column-r.slot.column)]});if(s[0]){const a=s[0].slot.column>r.slot.column?1:-1;e.ai.tryMoveRel(r,0,a)}return!1}function Ih(r,e){return e.ai.tryAttackFirst(r)}function Rh(r,e){return(r.card.name||"").startsWith("hog")?vh(r,e):Ih(r,e)}function As(r){const{inspector:e}=r,t=e.getPermanents({owner:f.P2,sort:[s=>(s.card.name||"").startsWith("h")?0:1,s=>-10*s.slot.row+s.slot.column]});for(const s of t)e.getPower(s)<=0||s.ready&&Rh(s,r)}const Nh=new Set(["hog-factory","log-factory","stacktory","stackstack-tory"]);function Do(r){const{inspector:e}=r;return e.getPermanentsOf(f.P2).filter(t=>Nh.has(t.card.name||""))}function*Go(r){const e=Do(r),t=new Set(e.map(s=>s.slot.column));for(const s of[1,2,0])for(let a=0;a<=4;a++)t.has(a)&&(yield{row:s,column:a});for(const s of[1,2,0])for(let a=0;a<=4;a++)t.has(a)||(yield{row:s,column:a})}function*Ch(r){for(let e=0;e<3;e++)for(let t=0;t<5;t++)r.inspector.isSlotOccupied({row:e,column:t})||(yield{row:e,column:t})}function Ph(r){switch(r){case"hog-factory":return"hog";case"hog-factorytory":return"hog-factory";case"hog-factorytorytory":return"hog-factorytory";case"log-factory":return"log";case"log-factorytory":return"log-factory";case"log-factorytorytory":return"log-factorytory";default:return null}}function xo(r){const{inspector:e,ai:t}=r,s=e.getPermanentsOf(f.P2);let a=!!s.find(o=>o.card.name==="hog-factory"),n=!!s.find(o=>o.card.name==="log-factory");for(const o of Go(r)){if(!a&&!n)break;t.trySpawn(a?"hog":"log",o)&&(a?a=!1:n=!1)}}function Oh(r){const{inspector:e,ai:t}=r,a=e.getTurnNumber()/2%2===0?"hog-on-a-log":"log-on-a-hog";for(const n of Go(r))if(t.trySpawn(a,n))break}const Uh={cardEffects:{[Rr]:{handlers:{[R.END_TURN]:r=>{const{engine:e,inspector:t}=r.ctx,{permanent:s}=r;for(const a of t.getPermanents({column:s.slot.column,type:se.CREATURE}))e.adjustPermanentStats(a,1,0)}}},[ps]:{handlers:{[R.END_TURN]:r=>{const{engine:e}=r.ctx,{permanent:t}=r;e.adjustPermanentStats(t,1,0)}}}},aiTurn:r=>{const{ai:e,engine:t,inspector:s}=r;if(s.getTurnNumber()===0){e.speak(`What are y’all trespassers DOING on my FARM?
GIT yer butts OUTTA here and keep yer hands off my dang BOARRIES!`),e.trySpawn(ps,{row:2,column:2});return}const a=s.getPermanents({name:ps,owner:f.P2})[0];if(!a)return;const n=s.getPower(a),l=!!s.getPermanents({owner:f.P2,type:se.STRUCTURE}).find(u=>u.card.name===hs),i=s.getPermanents({owner:f.P1,notProtectedFrom:a,sort:["creaturesFirst",u=>s.getTerrainOf(u.slot)===f.P2?0:1,u=>s.getHealth(u)<=n?0:1,"-power",u=>Math.abs(u.slot.column-a.slot.column)]});if(l){const u=i[0];if(!u)return;if(s.getTerrainOf(u.slot)===f.P2){const c=s.getPermanents({owner:f.P2,name:Rr,sort:["health"]});let d=!1;for(const g of c){for(const w of[2,1,0])if(d=Mo(r,a,{column:g.slot.column,row:w}),d)break;if(d)break}e.tryAttack(a,u);return}if(u.slot.column!==a.slot.column){let c=!1;for(const d of[2,1,0])if(c=Mo(r,a,{column:u.slot.column,row:d}),c)break}e.tryAttack(a,u)}else{const u=i.find(g=>g.slot.column===a.slot.column||s.getTerrainOf(g.slot)===f.P2);if(u){e.tryAttack(a,u);return}const c=i[0];if(!c)return;const d=c.slot.column>a.slot.column?1:-1;e.tryMoveRel(a,0,d)}}};function Mo(r,e,t){const s=r.ai.tryMove(e,t);return s&&r.engine.ready(e),s}const Dh={extraLoseChecks:(r,e)=>r===f.P2&&e.inspector.getTurnNumber()>=2*1},Gr=r=>({beforeNewGame:e=>{e.ai.setKeyframe(r)}}),Gh={[ea]:af,vanilla:gs,pvp:gs,intra_pvp_1:gs,intra_pvp_2:gs,robot:nf,tutorial1:of,tutorial2:lf,tutorial3:uf,tutorial4:cf,tutorial5:df,tutorial6:ff,gnutmeg_tree:yf,mister_penny:Ef,blancmange:wf,beebay_fulfillment_center_1:Le[0],beebay_fulfillment_center_2:Le[1],beebay_fulfillment_center_3:Le[2],beebay_fulfillment_center_4:Le[3],beebay_fulfillment_center_5:Le[4],beebay_fulfillment_center_6:Le[5],beebay_fulfillment_center_7:Le[6],beebay_fulfillment_center_8:Le[7],beebay_fulfillment_center_9:Le[8],beebay_fulfillment_center_10:Le[9],beebay_fulfillment_center_11:Le[10],beebay_fulfillment_center_12:Le[11],beebay_fulfillment_center_13:Le[12],miss_yu:Pf,bb_b:Of,slime:Gf,dargle_1:xf,dargle_2:Mf,dargle_3:Lf,dargle_4:Bf,dargle_5:zf,moonick_1:ym,moonick_2:Em,moonick_3:bm,moonick_4:wm,moonick_5:km,moonick_6:Am,moonick_7:Sm,moonick_8:_m,moonick_9:Tm,moonick_10:vm,moonick_11:Im,moonick_12:Rm,moonick_13:Nm,moonick_14:Cm,moonick_15:Pm,moonick_16:Om,moonick_17:Um,moonick_18:Dm,moonick_19:Gm,moonick_20:xm,moonick_21:Mm,moonick_22:Lm,moonick_23:Bm,moonick_24:zm,moonick_final:Hm,spelling_bee:uh,the_swarm:Th,kero:ch,jabberwock_1:Rt[0],jabberwock_2:Rt[1],jabberwock_3:Rt[2],jabberwock_4:Rt[3],jabberwock_5:Rt[4],jabberwock_6:Rt[5],jabberwock_7:Rt[6],asteroid_1:mh,asteroid_2:hh,asteroid_3:ph,coloring:bh,othello:Xd,spirit_of_the_vines_1:wh,spirit_of_the_vines_2:kh,spirit_of_the_vines_3:Ah,spirit_of_the_vines_4:_h,spirit_of_the_vines_5:Sh,infinitely_many_hogs_and_logs_1:ks[0],infinitely_many_hogs_and_logs_2:ks[1],infinitely_many_hogs_and_logs_3:ks[2],infinitely_many_hogs_and_logs_4:ks[3],angry_boarry_farmer:Uh,test_battle:Dh,treasure_chest:Gr("intro-start"),first_answer:Gr("masteries-start"),first_legendary:Gr("legendary-start"),entering_the_water:Gr("pre-final-battle-start"),the_end:Gr("post-final-battle-start")},xh=r=>{const e=sf[r],t=Gh[r];if(e===void 0&&t===void 0)throw new Error(`unknown puzzle name ${r} requested`);return{...e??{},...t??{}}};var Lo=(r=>(r.BOARS="boars",r.COWS="cows",r.BEES="bees",r.DINOSAURS="dinosaurs",r.DRYADS="dryads",r))(Lo||{});E.nativeEnum(Lo);const Ca=()=>({boars:0,cows:0,bees:0,dinosaurs:0,dryads:0}),Mh=(r,e)=>{if(e===null||r===null)return!1;switch(e){case"boars":return r===C.RED;case"cows":return[C.WHITE,C.BLACK,C.WHITEBLACK].includes(r);case"bees":return r===C.YELLOW;case"dinosaurs":return r===C.GREEN;case"dryads":return r===C.PURPLE}},Nt={SOLVE_BONUS:100,SUMMONS_MULTIPLIER:10,FACTION_SUMMONS_MULTIPLIER:30,DESTROYS_MULTIPLIER:10,DAMAGE_DEALT_MULTIPLIER:1,DAMAGE_DEALT_CAP:100,PVP_MULTIPLIER:5},Lh=(r,e,t)=>e&&!t?0:(Nt.SOLVE_BONUS+r.summons*Nt.SUMMONS_MULTIPLIER+r.factionSummons*Nt.FACTION_SUMMONS_MULTIPLIER+r.destroys*Nt.DESTROYS_MULTIPLIER+Math.min(r.damageDealt,Nt.DAMAGE_DEALT_CAP)*Nt.DAMAGE_DEALT_MULTIPLIER)*(e?Nt.PVP_MULTIPLIER:1),Pa=(r,e,t)=>{if(typeof e=="function")return e(r);if(typeof e=="string")switch(e){case"health":return t.getHealth(r);case"-health":return-t.getHealth(r);case"power":return t.getPower(r);case"-power":return-t.getPower(r);case"shell":return t.getShell(r);case"-shell":return-t.getShell(r);case"creaturesFirst":return t.getCardType(r)===se.CREATURE?-1:0;case"structuresFirst":return t.getCardType(r)===se.STRUCTURE?-1:0}switch(e.type){case"frontToBack":return-t.getNthNearestRow(r.slot.row,e.perspective);case"prioritize":return e.cardNames.includes(t.getCardName(r))?-1:0;case"deprioritize":return e.cardNames.includes(t.getCardName(r))?1:0;case"euclideanDistance":return Ht(r.slot,e.slot);case"-euclideanDistance":return-Ht(r.slot,e.slot);case"weighted":{const{weights:s}=e;let a=0;for(const n of s){const{criterion:o,weight:l}=n;a+=l*Pa(r,o,t)}return a}}},Bh=(r,e)=>{const t=r.getAllPermanents().filter(s=>{for(const[a,n]of Object.entries(e))if(!(()=>{switch(a){case"name":return r.getCardName(s)===e.name;case"ready":return s.ready===e.ready;case"terrain":return r.getTerrainOf(s.slot)===e.terrain;case"owner":return s.owner===e.owner;case"ownedByOpponentOf":return s.owner!==e.ownedByOpponentOf;case"type":return r.getCardType(s)===e.type;case"isBase":return(r.getSharedEffects(s).isBase??!1)===e.isBase;case"row":return s.slot.row===e.row;case"column":return s.slot.column===e.column;case"slot":if(e.slot===void 0)throw new Error;return ns(s.slot,e.slot);case"rowInFrontOf":if(e.rowInFrontOf===void 0)throw new Error;return r.isRowInFrontOf(s.slot.row,e.rowInFrontOf.row,e.rowInFrontOf.perspective);case"rowBehind":if(e.rowBehind===void 0)throw new Error;return r.isRowInFrontOf(e.rowBehind.row,s.slot.row,e.rowBehind.perspective);case"adjacentTo":if(e.adjacentTo===void 0)throw new Error;return zt(s.slot,e.adjacentTo);case"touching":if(e.touching===void 0)throw new Error;return Ht(s.slot,e.touching)<2;case"columnAdjacentTo":if(e.columnAdjacentTo===void 0)throw new Error;return Math.abs(s.slot.column-e.columnAdjacentTo)===1;case"protectedFrom":if(e.protectedFrom===void 0)throw new Error;return r.isProtectedFrom(s,e.protectedFrom);case"notProtectedFrom":if(e.notProtectedFrom===void 0)throw new Error;return!r.isProtectedFrom(s,e.notProtectedFrom);case"except":if(e.except===void 0)throw new Error;return s.id!==e.except.id;case"custom":if(e.custom===void 0)throw new Error;return e.custom(s);case"hasCounter":if(e.hasCounter===void 0)throw new Error;return r.doesPermanentHaveCounterType(s,e.hasCounter);case"sort":return!0}throw new Error(`unrecognized permanent filter key ${a}`)})())return!1;return!0});return e.sort&&t.sort((s,a)=>{if(e.sort===void 0)throw new Error;for(const n of e.sort){const o=Pa(s,n,r)-Pa(a,n,r);if(o!==0)return o}return 0}),t};class Bo{constructor(e,t,s){p(this,"cardsDB");p(this,"effectsDB");p(this,"allSpecs");this.allSpecs=e,this.cardsDB=t,this.effectsDB=s}makeContext(){return{inspector:this}}hasAI(){return this.allSpecs.some(e=>e.hasAI??!1)}getDefaultRole(){return this.hasAI()?he.P1:he.GOD}isNoDeckAllowed(){for(const e of this.allSpecs.slice().reverse())if(e.allowNoDeck??!1)return!0;return!1}areCheckpointsAllowed(){return this.allSpecs.some(e=>e.allowCheckpoints??!1)}getDeckOverride(e){var t;for(const s of this.allSpecs.slice().reverse()){const a=((t=s.deckOverrides)==null?void 0:t[e])??null;if(a!==null)return a}return this.hasAI()&&e===f.P2?[]:null}getMaxNumCards(){return 30}getMaxNumLegendaries(){for(const{maxNumLegendaries:e}of this.allSpecs)if(e!==void 0)return e;return 1}validateDeck(e,t,s){const a=this.getMaxNumCards(),n=this.getMaxNumLegendaries();s!==void 0&&Lc(e,s,a,n);for(const o of this.allSpecs)o.adjustDeckChecks&&o.adjustDeckChecks(e,t,s??null,this.makeContext())}getCardName(e){if(typeof e=="string")return e;if(e.card!==void 0)return this.getCardName(e.card);if(e.displayName!==void 0)return e.name;if(e.name===void 0)throw new Error("card not known");return e.name}getCardData(e){const t=typeof e=="string"?e:this.getCardName(e);return this.cardsDB[t]}getSharedEffects(e){const t=this.effectsDB[this.getCardName(e)];return t||{}}isLegendary(e){return this.getSharedEffects(e).isLegendary??!1}}class zo{constructor(e,t,s,a,n){p(this,"cardsDB");p(this,"effectsDB");p(this,"gameSpec");p(this,"allSpecs");p(this,"gameState");p(this,"staticInspector");this.gameSpec=e,this.allSpecs=t,this.cardsDB=s,this.effectsDB=a,this.gameState=n,this.staticInspector=new Bo(this.allSpecs,this.cardsDB,this.effectsDB)}makeContext(){return{inspector:this}}doesPlayerHaveMastery(e,t){var s;return((s=this.gameState[e].teamData)==null?void 0:s.enabledMasteries[t])??!1}getNumRows(){for(const e of this.allSpecs.slice().reverse())if(e.numRows!==void 0)return e.numRows;throw new Error("no definition for num rows")}getNumColumns(){for(const e of this.allSpecs.slice().reverse())if(e.numColumns!==void 0)return e.numColumns;throw new Error("no definition for num columns")}getSlotBackground(e){return this.gameSpec.getSlotBackground?this.gameSpec.getSlotBackground(e,this.makeContext()):""}isNoDeckAllowed(){return this.staticInspector.isNoDeckAllowed()}getDeckOverride(e){return this.staticInspector.getDeckOverride(e)}getBasesOverride(e){var t;return((t=this.gameSpec.basesOverrides)==null?void 0:t[e])??null}getDefaultBases(e){return this.getBasesOverride(e)??["camp","camp","camp"]}getBasePositions(e,t){var o;const s=(o=this.gameSpec.baseColumnOverrides)==null?void 0:o[e];if(s!==void 0){if(s.length!==t)throw new Error("base column override has wrong number of columns");return s}const a=this.getNumColumns();if(t>a)throw new Error("too many bases");if(t==1)return[Math.floor((a-1)/2)];const n=[];for(let l=0;l<t;l++)n.push(Math.round(l*(a-1)/(t-1)));return n}getEndCutsceneRedirect(){for(const{endCutsceneRedirect:e}of this.allSpecs)if(e!==void 0)return e;return null}getEndCutsceneRedirectDjango(){for(const{endCutsceneRedirectDjango:e}of this.allSpecs)if(e!==void 0)return e;return null}hasGameStarted(){return Yt[this.gameState.phase]>=Yt[Ft.ACTIVE]}isGameActive(){return this.gameState.phase===Ft.ACTIVE}hasGameEnded(){return Yt[this.gameState.phase]>=Yt[Ft.ENDED]}getSpeedrunTime(){if(!this.hasGameEnded())throw new Error("getting speedrun time not supported before the game has ended");const e=this.gameState[f.P1],t=this.gameState[f.P2];if(e.startTurnTime!==null||t.startTurnTime!==null)throw new Error("expect start turn times to be unset once game has ended");return e.prevTurnsTime+t.prevTurnsTime}calcFactionScore(e,t,s){if(!t&&(!s||e!==f.P1))return 0;const a=this.gameState[e],n=this.gameState.winner,{stats:o}=a;return Lh(o,t,n===e)}getTurnNumber(){return this.gameState.turnNumber}getOpponentOf(e){return e===f.P1?f.P2:f.P1}getCardName(e){return this.staticInspector.getCardName(e)}getCardData(e){return this.staticInspector.getCardData(e)}getCardDisplayName(e){return this.getCardData(e).displayName}getCardColor(e){return this.getCardData(e).color}getDrawPile(e){const t=this.gameState[e].drawPile;if(t===void 0)throw new Error("draw pile not visible");return t}getCreateGemsColors(e){const t=this.getSharedEffects(e);if(t.createGemColors)return t.createGemColors;const s=this.getCardColor(e);return s!==null?uc(s):[]}getTopCardsInDrawPile(e){const t=this.gameState[e].drawPile;if(t===void 0)throw new Error("draw pile not visible");const s=t.length;return{topCard:s>0?t[s-1]:null,nextTopCard:s>1?t[s-2]:null}}getCardInHandIfExists(e,t){const s=this.gameState[e].hand.find(a=>a.id===t);return s===void 0?null:s}getCardInHand(e,t){const s=this.getCardInHandIfExists(e,t);if(s===null)throw new Error("card does not exist in hand");return s}getRowForPlayer(e,t){return t===f.P1?this.getNumRows()-e-1:e}getAllSlots(){return nc(this.getNumRows(),this.getNumColumns())}getUnoccupiedSlots(e){return this.getAllSlots().filter(t=>this.getTerrainOf(t)===e&&!this.isSlotOccupied(t))}getUnoccupiedSlotsClosestTo(e,t){return this.getUnoccupiedSlots(e).sort((s,a)=>Ht(s,t)-Ht(a,t))}getReflectedSlot(e){return{row:this.getNumRows()-e.row-1,column:e.column}}getAdjacentFriendlyPermanents(e){return this.getPermanents({owner:e.owner,adjacentTo:e.slot})}getBehindFriendlyPermanents(e){const t=e.owner;return this.getPermanents({owner:t,column:e.slot.column,rowBehind:{row:e.slot.row,perspective:t},sort:[{type:"frontToBack",perspective:t}]})}getBases(e){return this.getPermanents({owner:e,isBase:!0})}isColumnInBounds(e){return!(e<0||e>=this.getNumColumns())}getPlayerRowIndex(e,t){switch(t){case f.P1:return this.getNumRows()-e-1;case f.P2:return e}}getNthNearestRow(e,t){switch(t){case f.P1:return this.getNumRows()-e-1;case f.P2:return e}}isRowInFrontOf(e,t,s){return this.getPlayerRowIndex(e,s)>this.getPlayerRowIndex(t,s)}isSneaky(e){const t=this.getTerrainOf(e.slot);return e.owner!==t}isProtectedFrom(e,t){const s=e.slot,a=t.slot,n=e.owner,o=t.owner,l=this.getTerrainOf(s),i=this.getTerrainOf(a);if(o===l)return!1;const u=this.getPermanentsOf(n);if(n===i)return!1;if(u.some(c=>this.getTerrainOf(c.slot)===l&&c.slot.column===s.column&&this.isRowInFrontOf(c.slot.row,s.row,n)&&!this.doesPermanentHaveCounterType(c,I.DOES_NOT_PROTECT)))return!0;for(const c of this.allSpecs)if(c.extraProtectedChecks&&c.extraProtectedChecks(e,t,this.makeContext()))return!0;return!1}isSlotInBounds(e){const{row:t,column:s}=e;return!(t<0||t>=this.getNumRows()||!this.isColumnInBounds(s))}getTerrainOf(e){return e.row<this.getNumRows()/2?f.P2:f.P1}getPermanentAtIfExists(e){const t=this.getPermanentsAt(e);if(t.length>1)throw new Error("should have at most one permanent per slot");return t[0]??null}getPermanentsAt(e){return this.getPermanents({slot:e})}isSlotOccupied(e){return this.getPermanentsAt(e).length>0}getAllPermanents(){return Object.values(this.gameState.permanents)}getPermanents(e){return Bh(this,e)}getPermanentsOf(e){return this.getPermanents({owner:e})}getPermanentIfExists(e){return this.gameState.permanents[e]??null}getPermanent(e){const t=this.getPermanentIfExists(e);if(t===null)throw new Error(`permanent ${e} does not exist`);return t}doesPermanentExist(e){return this.getPermanentIfExists(e.id)!==null}getPlayerGems(e){return this.gameState[e].gems}getDrawCardCost(){return[C.ROCK,C.ROCK]}resolvePayment(e,t){if(e===f.P2&&this.gameSpec.aiDisableGemAccounting)return[];const s=this.getPlayerGems(e),a=new Map;for(const S of s)a.set(S,(a.get(S)??0)+1);const n=new Map;for(const S of t)n.set(S,(n.get(S)??0)+1);const o=[],l=(S,O,k)=>{if(k===0)return;if(k<0)throw new Error("negative payment");const P=(a.get(S)??0)-k,N=(n.get(O)??0)-k;if(N<0)throw new Error("overpaid");if(P<0)throw new Error("overspent");a.set(S,P),n.set(O,N);for(let U=0;U<k;U++)o.push(S)},i=(S,O)=>{l(S,O,Math.min(a.get(S)??0,n.get(O)??0))},u=S=>{switch(S){case C.RED:case C.YELLOW:case C.GREEN:case C.PURPLE:case C.WHITE:case C.BLACK:return S;default:return null}};for(const[S,O]of n){const k=u(S);k!==null&&(i(k,S),i(C.RAINBOW,S))}const c=new Map,d=S=>{c.set(S,(c.get(S)??0)+1)};if(e){for(const S of this.gameState[e].hand)if(S.card.name!==void 0)for(const O of this.getCardData(S).cost)O!==C.ROCK&&d(O);for(const S of this.getPermanents({owner:e,ready:!0})){if(S.card.name===void 0)continue;const O=this.getCardColor(S);O!==null&&d(O)}}const g={[C.RED]:0,[C.YELLOW]:1,[C.GREEN]:2,[C.PURPLE]:3,[C.WHITE]:4,[C.BLACK]:5,[C.WHITEBLACK]:6,[C.ROCK]:7};for(const S of a.keys())S!==C.RAINBOW&&(c.has(S)||c.set(S,0));const w=Array.from(c).sort((S,O)=>{const k=S[1]-O[1];return k==0?g[S[0]]-g[O[0]]:k}),y=w.find(([S,O])=>S===C.WHITE),A=w.find(([S,O])=>S===C.BLACK);(y??w.length)<=(A??w.length)?(i(C.WHITE,C.WHITEBLACK),i(C.BLACK,C.WHITEBLACK)):(i(C.BLACK,C.WHITEBLACK),i(C.WHITE,C.WHITEBLACK)),i(C.RAINBOW,C.WHITEBLACK);for(const[S,O]of w){const k=u(S);k!==null&&i(k,C.ROCK)}return i(C.RAINBOW,C.ROCK),o.length<t.length?null:o}subtractGems(e,t){const s=e.slice();for(const a of t){const n=s.findIndex(o=>o===a);if(n===-1)throw new Error("payment not a subset of gems");s.splice(n,1)}return s}isTurnPending(e){return this.isNoTurnCheck()?!0:this.isGameActive()?this.gameState.currentTurnPlayer===e:!1}getCardText(e){if(!(typeof e=="object"&&e.counters!==void 0))return this.getCardData(e).text;const t=e,s=this.getSharedEffects(t).computeText;return s!==void 0?s(t,this.makeContext()):this.getCardData(t).text}getCounterValSum(e,t){let s=0;for(const a of e.counters)a.type===t&&(s+=a.val);return s}doesPermanentHaveCounterType(e,t){return e.counters.some(s=>s.type===t)}getSharedEffects(e){return this.staticInspector.getSharedEffects(e)}isLegendary(e){return this.staticInspector.isLegendary(e)}getAbilityCostIfExists(e,t){const s=this.getSharedEffects(e);switch(t){case ve.FLEX:return s.flexCost??null;case ve.SPECIAL:return s.specialCost??null}}getCardType(e){return this.getSharedEffects(e).isStructure??!1?se.STRUCTURE:se.CREATURE}getBasePower(e){const t=this.getSharedEffects(e).power;return t!==void 0?t:this.getCardData(e).power}getPower(e){if(!(typeof e=="object"&&e.counters!==void 0))return this.getBasePower(e);const t=e,s=this.getCounterValSum(t,I.POWER_ADJUSTMENT);return Math.max(this.getBasePower(t)+s,0)}getBaseHealth(e){const t=this.getSharedEffects(e).maxHealth;return t!==void 0?t:this.getCardData(e).maxHealth}getMaxHealth(e){const t=this.getCounterValSum(e,I.MAX_HEALTH_ADJUSTMENT);return Math.max(this.getBaseHealth(e)+t,0)}getHealth(e){if(!(typeof e=="object"&&e.counters!==void 0))return this.getBaseHealth(e);const t=e,s=this.getMaxHealth(t)-t.damage;if(s<0)throw new Error("health should not be negative");return s}getBaseShell(e){return this.getCardData(e).shell}getShell(e){if(!(typeof e=="object"&&e.counters!==void 0))return this.getBaseShell(e);const t=e,s=this.getCounterValSum(t,I.SHELL_ADJUSTMENT);return Math.max(this.getBaseShell(t)+s,0)}getUndamagedShell(e){const t=this.getShell(e),s=this.getCounterValSum(e,I.SHELL_DAMAGE_TAKEN);return Math.max(t-s,0)}hasAI(){return this.staticInspector.hasAI()}isPlayerAI(e){return this.hasAI()&&e===f.P2}areCheckpointsAllowed(){return this.staticInspector.areCheckpointsAllowed()}isGemClearingDisabled(){return this.gameSpec.disableClearGems??!1}getSharedExtraState(){const e=this.gameState.sharedExtraState;if(e===void 0)throw new Error("sharedExtraState not initialized");return e}getDevKnobs(){return this.gameState.devKnobs??{}}isAllCardsAvailable(){return this.getDevKnobs().allCardsAvailable??!1}getHandForUI(e){if(this.isAllCardsAvailable()){const t=Object.keys(this.cardsDB);return t.sort(),t.map((s,a)=>({card:{name:s},id:`${a}`}))}return this.gameState[e].hand}isAlwaysReady(){return this.getDevKnobs().alwaysReady??!1}isNoTurnCheck(){return this.getDevKnobs().noTurnCheck??!1}validateCreateGems(e,t,s){const a=this.getCardType(t);this.doesPermanentHaveCounterType(t,I.CANNOT_CREATE)&&e.add(D.CANNOT_CREATE),a!==se.CREATURE&&e.add(D.CARD_TYPE),this.getCreateGemsColors(t).some(n=>n.length===s.length&&n.every((o,l)=>o===s[l]))||e.add(D.COLOR)}validateSummon(e,t,s,a){const n=this.getSharedEffects(s),o=this.gameSpec.disableCardEffectsAdjustSummonChecks?void 0:n.adjustSummonChecks,l=this.cardsDB[s];if(this.getCardType(l),!this.isSlotInBounds(a)){e.add(D.BOUNDS);return}this.isSlotOccupied(a)&&e.add(D.OCCUPIED),this.getTerrainOf(a)!==t&&e.add(D.TERRAIN),o&&o(e,t,s,a,this.makeContext());for(const i of this.allSpecs)i.adjustSummonChecks&&i.adjustSummonChecks(e,t,s,a,this.makeContext())}validateMove(e,t,s){const a=this.getSharedEffects(t),n=this.gameSpec.disableCardEffectsAdjustMoveChecks?void 0:a.adjustMoveChecks,o=this.getCardType(t);if(!this.isSlotInBounds(s)){e.add(D.BOUNDS);return}o!==se.CREATURE&&e.add(D.CARD_TYPE),this.doesPermanentHaveCounterType(t,I.CANNOT_MOVE)&&e.add(D.CANNOT_MOVE),this.isSlotOccupied(s)&&e.add(D.OCCUPIED),zt(t.slot,s)||e.add(D.ADJACENT),n&&n(e,t,s,this.makeContext());for(const l of this.allSpecs)l.adjustMoveChecks&&l.adjustMoveChecks(e,t,s,this.makeContext())}validateAttack(e,t,s){const a=this.getSharedEffects(t),n=this.gameSpec.disableCardEffectsAdjustAttackChecks?void 0:a.adjustAttackChecks;this.doesPermanentHaveCounterType(t,I.CANNOT_ATTACK)&&e.add(D.CANNOT_ATTACK),this.getCardType(t)!==se.CREATURE&&e.add(D.CARD_TYPE),t.owner===s.owner&&e.add(D.ALLIED),this.doesPermanentHaveCounterType(s,I.INVULNERABLE)&&e.add(D.INVULNERABLE),this.isProtectedFrom(s,t)&&e.add(D.PROTECTED),n&&n(e,t,s,this.makeContext());for(const o of this.allSpecs)o.adjustAttackChecks&&o.adjustAttackChecks(e,t,s,this.makeContext())}getSummonCost(e){return this.getDevKnobs().freeSummon??!1?[]:this.getCardData(e).cost}resolveEffectOptIfExists(e){switch(e.type){case me.PERMANENT:{const t=this.getPermanentIfExists(e.permanentId);return t===null?null:{...e,permanent:t}}default:return e}}resolveEffectOptsIfExist(e){const t=[];for(const s of e){const a=this.resolveEffectOptIfExists(s);if(a===null)return null;t.push(a)}return t}validateEffectOpt(e,t,s,a){Gc(e,t,s,a);for(const n of this.allSpecs)n.adjustEffectOptChecks&&n.adjustEffectOptChecks(e,t,s,a)}validateActivateAbility(e,t,s,a){const n=this.getSharedEffects(t);if(!(s===ve.FLEX?n.flexCost:n.specialCost)){e.add(D.ABILITY_EXISTS);return}const l=(s===ve.FLEX?n.flexForms:n.specialForms)??[];a.length!==l.length&&e.add(D.NUM_OPTS);const i={permanent:t,effectOpts:a,inspector:this};for(const[u,c]of l.entries()){const d=a[u];if(!d)break;this.validateEffectOpt(e,d,c,i)}}resolveStep(e){switch(e.type){case H.SUMMON:{const{player:t,handCardId:s,cardName:a}=e,n=(()=>{if(s!==void 0){const l=this.getCardInHandIfExists(t,s);return l?this.getCardName(l):null}return(this.isAllCardsAvailable()||this.isPlayerAI(t))&&a!==void 0?a:null})();if(!n)return null;const o=this.resolvePayment(t,this.getSummonCost(n));return{...e,cardName:n,cannotPay:o===null,payment:o??[]}}case H.ATTACK:{const{attackerId:t,defenderId:s}=e,a=this.getPermanentIfExists(t),n=this.getPermanentIfExists(s);if(!a||!n)return null;const l=this.doesPermanentHaveCounterType(a,I.ATTACKS_FOR_FREE)?null:this.getCardColor(a),i=l===null?[]:this.resolvePayment(a.owner,[l]);return{...e,attacker:a,defender:n,cannotPay:i===null,payment:i??[]}}case H.CREATE_GEMS:case H.MOVE:case H.REMOVE:{const{permanentId:t}=e,s=this.getPermanentIfExists(t);return s?{...e,permanent:s}:null}case H.DRAW:{const{player:t}=e,s=this.resolvePayment(t,this.getDrawCardCost());return{...e,cannotPay:s===null,payment:s??[]}}case H.ACTIVATE_ABILITY:{const{permanentId:t,abilityType:s,effectOpts:a}=e,n=this.getPermanentIfExists(t);if(!n)return null;const o=this.getAbilityCostIfExists(n,s);if(o===null)return null;const l=this.resolvePayment(n.owner,o),i=this.resolveEffectOptsIfExist(a);return i===null?null:{...e,permanent:n,effectOptsResolved:i,cannotPay:l===null,payment:l??[]}}case H.ADVANCE_KEYFRAME:{const{keyframe:t}=this.gameState;return t===void 0?null:{...e,keyframe:t}}default:return e}}validateResolvedStep(e,t,s){const a=Mn(t),n=(()=>{switch(t.type){case H.ATTACK:return t.attacker;case H.CREATE_GEMS:case H.MOVE:return t.permanent;case H.ACTIVATE_ABILITY:return t.abilityType===ve.SPECIAL?t.permanent:null;default:return null}})(),o=(()=>{switch(t.type){case H.DRAW:case H.SUMMON:case H.ATTACK:case H.ACTIVATE_ABILITY:return t.cannotPay;default:return!1}})(),l=(()=>{switch(t.type){case H.SUMMON:case H.ATTACK:case H.CREATE_GEMS:case H.MOVE:case H.DRAW:case H.ACTIVATE_ABILITY:case H.END_TURN:return t.stepNumber;default:return null}})();if(this.isGameActive()||e.add(D.GAME_ENDED),a!==null&&!Zs(s,a)&&e.add(D.ROLE),a!==null&&o&&e.add(D.COST),a!==null&&!this.isTurnPending(a)&&(this.isPlayerAI(a)&&this.gameSpec.aiDisableTurnCheck||e.add(D.TURN)),n!==null&&!n.ready&&e.add(D.READY),this.gameState.keyframe!==void 0&&(this.gameState.keyframe.blocking??!1)&&![H.ADVANCE_KEYFRAME,H.CREATE_CHECKPOINT].includes(t.type)&&e.add(D.KEYFRAME),l!==null){if(a===null)throw new Error("expect player to check step number for");l!==this.gameState[a].stepNumber&&e.add(D.STALE)}switch(t.type){case H.CREATE_GEMS:{const{permanent:i,gemColors:u}=t;this.validateCreateGems(e,i,u);break}case H.SUMMON:{const{player:i,cardName:u,slot:c}=t;this.validateSummon(e,i,u,c);break}case H.MOVE:{const{permanent:i,slot:u}=t;this.validateMove(e,i,u);break}case H.ATTACK:{const{attacker:i,defender:u}=t;this.validateAttack(e,i,u);break}case H.ACTIVATE_ABILITY:{const{permanent:i,abilityType:u,effectOptsResolved:c}=t;this.validateActivateAbility(e,i,u,c);break}case H.DRAW:{const{player:i}=t,u=this.gameState[i];this.doesPlayerHaveMastery(i,mi)||e.add(D.MASTERY);const c=(()=>u.drawPileSize!==void 0?u.drawPileSize:u.drawPile!==void 0?u.drawPile.length:null)();if(c===null){e.add(D.ROLE);break}c<=0&&e.add(D.DECK_EMPTY);break}case H.END_TURN:{const{player:i}=t;for(const u of this.allSpecs)u.adjustEndTurnChecks&&u.adjustEndTurnChecks(e,i,this.makeContext());break}case H.ADVANCE_KEYFRAME:{const{keyframeId:i,keyframe:u,dialogOptionIndex:c}=t,{dialogOptions:d}=u;c!==void 0&&d!==void 0&&(!Number.isInteger(c)||c<0||c>=d.length)&&e.add(D.INVALID_DIALOG_OPTION),u.id!==i&&e.add(D.STALE);break}case H.CREATE_CHECKPOINT:{const{slot:i}=t;this.areCheckpointsAllowed()||e.add(D.GENERIC),(!Gn(i)||i===0)&&e.add(D.INVALID_CHECKPOINT_SLOT);break}case H.REMOVE:{s!==he.GOD&&e.add(D.ROLE);break}}}resolveAndValidate(e,t){const s=new Set,a=this.resolveStep(e);return a?this.validateResolvedStep(s,a,t):s.add(D.RESOLVE),{resolved:a,failedChecks:s,isValid:s.size===0}}isValid(e,t){return this.resolveAndValidate(e,t).isValid}hasActions(e){var o,l;e.id;const t=e.owner,s=t===f.P1?he.P1:he.P2,a=this.getSharedEffects(e),n=new is(this,e.owner,s);return this.isTurnPending(t)?a.flexCost&&this.resolvePayment(t,a.flexCost)?((o=a.flexForms)==null?void 0:o.length)===0?this.isValid(n.activateAbility(e,ve.FLEX,[]),s):!0:e.ready?this.getCreateGemsColors(e).some(i=>this.isValid(n.create(e,i),s))||this.getAllSlots().sort(i=>zt(i,e.slot)?0:1).some(i=>this.isValid(n.move(e,i),s))||this.getPermanents({sort:[i=>i.owner!==t?0:1]}).some(i=>this.isValid(n.attack(e,i),s))?!0:a.specialCost&&this.resolvePayment(t,a.specialCost)?((l=a.specialForms)==null?void 0:l.length)===0?this.isValid(n.activateAbility(e,ve.SPECIAL,[]),s):!0:!1:!1:!1}getStepNumber(e){return this.gameState[e].stepNumber}}class zh{constructor(e,t,s){p(this,"gameSpec");p(this,"allSpecs");p(this,"gameState");p(this,"inspector");this.gameSpec=e,this.allSpecs=t,this.gameState=s,this.inspector=new zo(this.gameSpec,this.allSpecs,{},{},this.gameState)}makeContext(){return{inspector:this.inspector,reducer:this}}getPermanent(e){const t=this.gameState.permanents[e];if(t===void 0)throw new Error(`permanent ${e} does not exist`);return t}takeCardFromHand(e,t){const s=this.gameState[e].hand,a=s.findIndex(o=>o.id===t);if(a===-1)throw new Error(`${e} has no hand card with id ${t}`);const[n]=s.splice(a,1);return n}removeFromDrawPile(e,t){const s=this.gameState[e],{drawPile:a}=s;return s.drawPileSize!==void 0&&s.drawPileSize--,a?(()=>t===void 0?a.pop():a.splice(t,1)[0])()??null:null}addCardToDiscard(e,t){const s=this.gameState[e].discardPile;s!==void 0&&s.push(t)}applyUpdate(e){switch(e.type){case W.OVERRIDE_STATE:{const{state:t}=e;Object.keys(this.gameState).forEach(s=>{delete this.gameState[s]}),Object.assign(this.gameState,t);break}case W.ADVANCE_PHASE:{const{phase:t}=e;if(Yt[t]<=Yt[this.gameState.phase])throw new Error("cannot go backwards in phase");this.gameState.phase=t;break}case W.SET_GAME_RESULT:{const{winner:t,loseReason:s,solves:a,cardUnlocks:n,endTime:o}=e;this.gameState.winner=t,this.gameState.loseReason=s;for(const l of[f.P1,f.P2]){const i=this.gameState[l],{startTurnTime:u}=i;u!==null&&(i.prevTurnsTime+=o-u,i.startTurnTime=null),(a[l]??!1)&&(i.isSolved=!0),n[l]!==void 0&&(i.cardUnlocks=n[l])}break}case W.START_TURN:{const{player:t,startTurnTime:s}=e,a=this.gameState[t];a.startTurnTime=s;break}case W.END_TURN:{const{player:t,endTurnTime:s}=e;this.gameState.currentTurnPlayer=this.inspector.getOpponentOf(t),this.gameState.turnNumber++;const a=this.gameState[t],{startTurnTime:n}=a;if(n===null)throw new Error("no start turn timestamp found");a.prevTurnsTime+=s-n,a.startTurnTime=null;break}case W.SET_KEYFRAME:{const{keyframe:t}=e;t===null?delete this.gameState.keyframe:this.gameState.keyframe=t;break}case W.ADD_GEMS:{const{player:t,gems:s}=e;if(this.gameSpec.aiDisableGemAccounting&&t===f.P2)break;this.gameState[t].gems.push(...s);break}case W.REMOVE_GEMS:{const{player:t,gems:s}=e;if(this.gameSpec.aiDisableGemAccounting&&t===f.P2)break;const a=this.inspector.subtractGems(this.inspector.getPlayerGems(t),s);if(a===null)throw new Error("can't pay");this.gameState[t].gems=a;break}case W.CLEAR_GEMS:{const{player:t}=e;this.gameState[t].gems=[];break}case W.CREATE_PERMANENT:{const{handCardId:t,permanent:s}=e;t!=null&&this.takeCardFromHand(s.owner,t),this.gameState.permanents[s.id]=JSON.parse(JSON.stringify(s));break}case W.READY_PERMANENT:{const{permanentId:t}=e,s=this.getPermanent(t);s.ready=!0;break}case W.UNREADY_PERMANENT:{const{permanentId:t}=e,s=this.getPermanent(t);s.ready=!1;break}case W.CHANGE_PERMANENT_OWNER:{const{permanentId:t,owner:s}=e,a=this.getPermanent(t);a.owner=s;break}case W.MOVE:{const{permanentId:t,slot:s}=e,a=this.getPermanent(t);a.slot=s;break}case W.SWAP:{const{permanent1Id:t,permanent2Id:s}=e,a=this.getPermanent(t),n=this.getPermanent(s),o=a.slot,l=n.slot;a.slot=l,n.slot=o;break}case W.DRAW_CARD:{const{player:t,card:s,handCardId:a,nextTopCard:n,shouldPopDrawPile:o}=e;o&&this.removeFromDrawPile(t);const l=this.gameState[t];l.topCard!==void 0&&(l.drawPileSize!==void 0&&l.drawPileSize===0?l.topCard=null:n!==void 0&&(l.topCard=n)),l.hand.push({card:s,id:a});break}case W.REMOVE_FROM_DRAW_PILE:{const{player:t,drawPileIndex:s,nextTopCard:a}=e,n=this.gameState[t];this.removeFromDrawPile(t,s),n.topCard!==void 0&&a!==void 0&&(n.topCard=a);break}case W.DISCARD_CARD:{const{player:t,handCardId:s}=e;this.takeCardFromHand(t,s);break}case W.DAMAGE_PERMANENT:{const{permanentId:t,damage:s}=e,a=this.getPermanent(t);a.damage=Math.max(a.damage+s,0);break}case W.REMOVE_PERMANENT:{const{permanentId:t,discard:s}=e,a=this.getPermanent(t);delete this.gameState.permanents[t],s&&this.addCardToDiscard(a.owner,a.card);break}case W.TRANSFORM_PERMANENT:{const{permanentId:t,newCardName:s}=e,a=this.getPermanent(t);a.card.name=s;break}case W.ADD_COUNTER:{const{permanentId:t,counter:s}=e;this.getPermanent(t).counters.push(s);break}case W.REMOVE_COUNTER:{const{permanentId:t,counterIndex:s}=e;this.getPermanent(t).counters.splice(s,1);break}case W.SET_COUNTER:{const{permanentId:t,counterIndex:s,counterVal:a}=e,n=this.getPermanent(t);n.counters[s].val=a,e.explanation&&(n.counters[s].explanation=e.explanation);break}case W.SET_DRAW_PILE:{const{player:t,drawPile:s}=e,a=this.gameState[t];if(a.drawPile===void 0)throw new Error("player should not have access to drawPile");a.drawPile=[...s];break}case W.SET_DEV_KNOBS:{this.gameState.devKnobs=e.devKnobs;break}case W.INIT_SHARED_EXTRA_STATE:{this.gameState.sharedExtraState=e.sharedExtraState;break}case W.MODIFY_SHARED_EXTRA_STATE:{const{updInfo:t}=e,s=this.gameSpec.modifySharedExtraState;if(s===void 0)throw new Error("game spec does not support modifying shared extra state");if(this.gameState.sharedExtraState===void 0)throw new Error("shared extra state not initialized");s(t,this.gameState.sharedExtraState);break}case W.MODIFY_STATS:{const{player:t,diffSummons:s,diffDestroys:a,diffDamageDealt:n,diffFactionSummons:o}=e,{stats:l}=this.gameState[t];l.summons+=s??0,l.destroys+=a??0,l.damageDealt+=n??0,l.factionSummons+=o??0;break}case W.SET_STEP_NUMBER:{const{player:t,stepNumber:s}=e;this.gameState[t].stepNumber=s;break}}}}class Hh{constructor(e){p(this,"multicaster");this.multicaster=e}stepAck(e,t){this.multicaster.send(e,{type:W.STEP_ACK,err:t})}respSuccess(e){this.stepAck(e)}respInvalidStep(e){this.stepAck(e,{errCode:K.INVALID_STEP})}advancePhase(e){this.broadcastAndApply({type:W.ADVANCE_PHASE,phase:e})}startTurn(e){this.broadcastAndApply({type:W.START_TURN,player:e,startTurnTime:new Date().getTime()})}endTurn(e){this.broadcastAndApply({type:W.END_TURN,player:e,endTurnTime:new Date().getTime()})}setDrawPile(e,t){this.broadcastAndApply({type:W.SET_DRAW_PILE,player:e,drawPile:t})}setDevKnobs(e){this.broadcastAndApply({type:W.SET_DEV_KNOBS,devKnobs:e})}addGems(e,t){this.broadcastAndApply({type:W.ADD_GEMS,player:e,gems:t})}removeGems(e,t){this.broadcastAndApply({type:W.REMOVE_GEMS,player:e,gems:t})}clearGems(e){this.broadcastAndApply({type:W.CLEAR_GEMS,player:e})}createPermanent(e,t){this.broadcastAndApply({type:W.CREATE_PERMANENT,handCardId:t,permanent:JSON.parse(JSON.stringify(e))})}readyPermanent(e){this.broadcastAndApply({type:W.READY_PERMANENT,permanentId:e})}unreadyPermanent(e){this.broadcastAndApply({type:W.UNREADY_PERMANENT,permanentId:e})}changePermanentOwner(e,t){this.broadcastAndApply({type:W.CHANGE_PERMANENT_OWNER,permanentId:e,owner:t})}transformPermanent(e,t){this.broadcastAndApply({type:W.TRANSFORM_PERMANENT,permanentId:e,newCardName:t})}move(e,t){this.broadcastAndApply({type:W.MOVE,permanentId:e,slot:t})}swap(e,t){this.broadcastAndApply({type:W.SWAP,permanent1Id:e,permanent2Id:t})}drawCard(e,t,s,a,n){const o={type:W.DRAW_CARD,player:e,card:t,handCardId:s,nextTopCard:a,shouldPopDrawPile:n??!0};this.broadcastAndApplyAsymmetric(e,o,{...o,nextTopCard:void 0,card:{}})}removeFromDrawPile(e,t,s){const a={type:W.REMOVE_FROM_DRAW_PILE,player:e,drawPileIndex:t,nextTopCard:s};this.broadcastAndApplyAsymmetric(e,a,{...a,nextTopCard:void 0})}discardCard(e,t){this.broadcastAndApply({type:W.DISCARD_CARD,player:e,handCardId:t})}damagePermanent(e,t,s){this.broadcastAndApply({type:W.DAMAGE_PERMANENT,permanentId:e,damage:t,attackerId:s})}removePermanent(e,t){this.broadcastAndApply({type:W.REMOVE_PERMANENT,permanentId:e,discard:t})}addCounter(e,t){this.broadcastAndApply({type:W.ADD_COUNTER,permanentId:e,counter:t})}removeCounter(e,t){this.broadcastAndApply({type:W.REMOVE_COUNTER,permanentId:e,counterIndex:t})}setCounter(e,t,s,a){this.broadcastAndApply({type:W.SET_COUNTER,permanentId:e,counterIndex:t,counterVal:s,explanation:a})}setKeyframe(e){this.broadcastAndApply({type:W.SET_KEYFRAME,keyframe:e})}clearKeyframe(){this.broadcastAndApply({type:W.SET_KEYFRAME,keyframe:null})}announce(e){this.broadcastAndApply({type:W.ANNOUNCE,message:e})}announceSummonPermanent(e,t){this.broadcastAndApply({type:W.ANNOUNCE_SUMMON_PERMANENT,player:e,cardName:t})}announceMove(e,t){this.broadcastAndApply({type:W.ANNOUNCE_MOVE,player:e,cardName:t})}announceAttackCard(e,t,s){this.broadcastAndApply({type:W.ANNOUNCE_ATTACK_CARD,cardName:e,target:s,damage:t})}overrideState(e,t,s,a){this.multicaster.broadcastPerRoleAndApply({[he.GOD]:{type:W.OVERRIDE_STATE,roomId:e,state:t},[he.P1]:{type:W.OVERRIDE_STATE,roomId:e,state:s},[he.P2]:{type:W.OVERRIDE_STATE,roomId:e,state:a}})}respOverrideState(e,t,s){this.multicaster.send(e,{type:W.OVERRIDE_STATE,roomId:t,state:s})}notifySystem(e){this.multicaster.notifySystem(e)}broadcastAndApply(e){this.multicaster.broadcastAndApply(e)}broadcastAndApplyAsymmetric(e,t,s){this.multicaster.broadcastAndApplyAsymmetric(e,t,s)}}const Fh=4;class Yh{constructor(e,t,s,a,n,o,l,i,u,c,d,g,w,y,A){p(this,"multicaster");p(this,"puzName");p(this,"roomId");p(this,"gameSpec");p(this,"allSpecs");p(this,"getCardUnlocks");p(this,"cardsDB");p(this,"effectsDB");p(this,"countersDB");p(this,"keyframes");p(this,"gameState");p(this,"inspector");p(this,"controller");p(this,"hooksApi");p(this,"hooksAiApi");p(this,"hooksOutOfTurnAiApi");p(this,"needCheckpoint");p(this,"checkpointHandler");p(this,"cutsceneChoiceHandler");this.multicaster=e,this.puzName=t,this.roomId=s,this.allSpecs=a,this.gameSpec=this.allSpecs[1],this.getCardUnlocks=n,this.cardsDB=o,this.effectsDB=l,this.countersDB=i,this.keyframes=u;for(const k of Object.keys(this.effectsDB))if(this.cardsDB[k]===void 0)throw new Error(`card ${k} not found in cards database -- perhaps the card names in the deck sheet and code got out of sync, or a card name was misspelled.`);const S=A??(()=>{const k=lc(this.puzName,this.gameSpec);for(const[P,N]of Object.entries(c)){const U=P;k[U].teamData=N}return k.devKnobs=y,k.engineOnly.deckSelections=d,k})();this.gameState=S,this.inspector=new zo(this.gameSpec,this.allSpecs,this.cardsDB,this.effectsDB,this.gameState);const O=new zh(this.gameSpec,this.allSpecs,S);this.multicaster.setApplyUpdateFunc(k=>{O.applyUpdate(k)}),this.controller=new Hh(this.multicaster),this.hooksApi=new Yc(this),this.hooksAiApi=new jc(this),this.hooksOutOfTurnAiApi=new Vc(this.hooksAiApi),this.needCheckpoint=[],this.checkpointHandler=g,this.cutsceneChoiceHandler=w}init(){for(const e of this.allSpecs)e.afterInitEngine&&e.afterInitEngine(this.makeContext());if(this.startNewGame(),!this.inspector.isGameActive())throw new Error("expect game to still be active after starting")}makeContext(){return{inspector:this.inspector,engine:this.hooksApi,ai:this.hooksOutOfTurnAiApi}}makeAIContext(){return{...this.makeContext(),ai:this.hooksAiApi}}getEffects(e){const t=this.effectsDB[this.inspector.getCardName(e)];return t||{}}getEngineOnly(){const e=this.gameState.engineOnly;if(e===void 0)throw new Error("engine should have access to engine-only state");return e}getWinner(){const e=t=>!!(!(this.gameSpec.disableNoBasesLossCondition??!1)&&!(t===f.P1&&(this.gameSpec.disableP1NoBasesLossCondition??!1))&&!(t===f.P2&&(this.gameSpec.disableP2NoBasesLossCondition??!1))&&this.inspector.getBases(t).length===0||this.gameSpec.extraLoseChecks&&this.gameSpec.extraLoseChecks(t,this.makeContext()));return e(f.P2)?f.P1:e(f.P1)?f.P2:null}getIsSolved(e,t){return!(!this.inspector.hasAI()||e!==f.P1||!this.gameSpec.disableBattleWonSolvedCondition&&t!==e||this.gameSpec.extraSolveChecks&&!this.gameSpec.extraSolveChecks(e,t,this.makeContext()))}cardToPermanent(e,t,s){return{id:(this.getEngineOnly().nextPermanentId++).toString(),card:e,damage:0,counters:[],ready:this.inspector.isAlwaysReady(),owner:t,slot:s}}drawCard(e){const{topCard:t,nextTopCard:s}=this.inspector.getTopCardsInDrawPile(e);t!==null&&this.controller.drawCard(e,t,`${this.getEngineOnly().nextHandCardId++}`,s===null?void 0:s)}addCardToHand(e,t){this.controller.drawCard(e,t,`${this.getEngineOnly().nextHandCardId++}`,void 0,!1)}removeCardIndex(e,t){const s=this.inspector.getDrawPile(e);this.controller.removeFromDrawPile(e,t,t===s.length-1&&s.length>1&&this.inspector.doesPlayerHaveMastery(e,hn)?s[s.length-2]:void 0)}startNewGame(){this.controller.broadcastAndApply({type:W.RESET});const e=this.inspector.getDevKnobs(),t=e.noShuffle!==void 0&&e.noShuffle,s=n=>{for(let o=n.length-1;o>=1;o--){const l=Math.floor(Math.random()*(o+1));[n[l],n[o]]=[n[o],n[l]]}};for(const n of[f.P1,f.P2]){const{deckCardList:o,priorityCard:l}=(()=>{const d=this.inspector.getDeckOverride(n);if(d!==null)return{deckCardList:[...d]};if(this.inspector.isAllCardsAvailable())return{deckCardList:[]};const g=this.getEngineOnly().deckSelections[n];if(g===void 0){if(this.inspector.isNoDeckAllowed())return{deckCardList:[]};throw new Error(`expect deck to be defined for ${n}`)}const{deck:w}=g;return{deckCardList:fu(w),priorityCard:w.priorityCard}})(),u=this.inspector.doesPlayerHaveMastery(n,fi)?l:void 0,c=u===void 0?-1:o.indexOf(u);if(c!==-1&&o.splice(c,1),t||s(o),c!==-1){if(u===void 0)throw new Error("expect there to be a priority card if we removed one");o.push(u)}this.controller.setDrawPile(n,o.map(d=>({name:d})))}for(const n of this.allSpecs)n.beforeNewGame&&n.beforeNewGame(this.makeContext());const a=this.inspector.getNumColumns();this.inspector.getNumRows();for(const n of[f.P1,f.P2]){const o=this.inspector.getDefaultBases(n);if(o.length>a)throw new Error("invalid number of bases (no more than one per column)");const l=this.inspector.getBasePositions(n,o.length);if(l.length!==o.length)throw new Error("the number of base positions specified does not equal the number of bases");for(let i=0;i<o.length;i++){const u={row:this.inspector.getPlayerRowIndex(0,n),column:l[i]};this.spawnPermanent(o[i],n,u)}}for(const n of[f.P1,f.P2])for(let o=0;o<Fh;o++)this.drawCard(n);this.getEngineOnly().hasGameStarted=!0,this.startTurn(f.P2)}endGame(e,t,s,a){var l,i;this.controller.broadcastAndApply({type:W.SET_GAME_RESULT,winner:e,loseReason:t,solves:s,cardUnlocks:a,endTime:new Date().getTime()}),this.controller.advancePhase(Ft.ENDED),this.gameSpec.afterGameEnd&&this.gameSpec.afterGameEnd(e,s,this.makeContext());const n=[],o=[];for(const u of[f.P1,f.P2]){if(s[u]??!1){const c=(l=this.gameState[u].teamData)==null?void 0:l.teamId;if(c===void 0)throw new Error("if puzzle is solved, expect a team to exist");n.push(c)}for(const c of a[u]??[]){const d=(i=this.gameState[u].teamData)==null?void 0:i.teamId;if(d===void 0)throw new Error("if there are cards unlocked, expect a team to exist");o.push({teamId:d,cardName:c})}}this.controller.notifySystem({type:W.SYSTEM_ROOM_COMPLETE,solvedTeamIds:n,cardUnlocks:o})}destroyPermanent(e,t){if(!(e!==t&&this.inspector.doesPermanentHaveCounterType(e,I.INVULNERABLE))){this.handlePermanentEvent({type:R.BEFORE_DESTROYED,permanent:e,attacker:t,ctx:this.makeContext()}),t&&this.handlePermanentEvent({type:R.BEFORE_DESTROY_UNIT,permanent:t,defender:e,ctx:this.makeContext()}),this.controller.removePermanent(e.id),t&&(this.controller.broadcastAndApply({type:W.MODIFY_STATS,player:t.owner,diffDestroys:1}),this.handlePermanentEvent({type:R.AFTER_DESTROY_UNIT,permanent:t,defender:e,ctx:this.makeContext()})),this.handlePermanentEvent({type:R.AFTER_DESTROYED,permanent:e,attacker:t,ctx:this.makeContext()});for(const s of this.inspector.getAllPermanents())s.id!==e.id&&this.handlePermanentEvent({type:R.OTHER_UNIT_DESTROYED,permanent:s,destroyedPermanent:e,attacker:t,ctx:this.makeContext()})}}damagePermanent(e,t,s,a){const n=this.getEffects(e),o=n.adjustDamageReceived,l=n.insteadOfDamaged;o&&(t=o(e,t,s,this.makeContext()));for(const w of this.allSpecs)w.adjustDamageReceived&&(t=w.adjustDamageReceived(e,t,s,this.makeContext()));if(t<=0||!(a??!1)&&this.inspector.doesPermanentHaveCounterType(e,I.INVULNERABLE)||l&&!l(e,t,s,this.makeContext()))return;if(this.inspector.doesPermanentHaveCounterType(e,I.DIVINE_SHIELD)){this.removeCounterType(e,I.DIVINE_SHIELD);return}const i=this.inspector.getUndamagedShell(e),u=this.inspector.getHealth(e)+i,c=Math.min(t,u),d=Math.min(c,i);d>0&&this.controller.addCounter(e.id,{type:I.SHELL_DAMAGE_TAKEN,val:d,explanation:`shell received ${d} damage`,expiry:R.START_TURN});const g=c-d;if(g>0){const w=this.inspector.doesPermanentHaveCounterType(e,I.CANNOT_BE_DESTROYED),y=this.inspector.getHealth(e);this.controller.damagePermanent(e.id,w?Math.min(g,y-1):g,s==null?void 0:s.id)}if(s&&(this.controller.broadcastAndApply({type:W.MODIFY_STATS,player:s.owner,diffDamageDealt:c}),this.handlePermanentEvent({type:R.AFTER_DEAL_DAMAGE,permanent:s,damage:c,defender:e,ctx:this.makeContext()})),this.handlePermanentEvent({type:R.AFTER_DAMAGED,permanent:e,damage:c,attacker:s,ctx:this.makeContext()}),!!this.inspector.doesPermanentExist(e)){if(this.inspector.getHealth(e)<=0){this.destroyPermanent(e,s);return}this.controller.addCounter(e.id,{type:I.DAMAGE_TAKEN,val:c,expiry:R.START_TURN})}}removeDamageFromPermanent(e,t){const s=Math.min(e.damage,t);this.controller.damagePermanent(e.id,-s),this.handlePermanentEvent({type:R.AFTER_DAMAGE_REMOVED,permanent:e,damage:s,ctx:this.makeContext()})}mergeValueCounter(e,t,s,a,n){if(this.inspector.doesPermanentExist(e)){for(const[o,l]of e.counters.entries())if(l.type===t&&l.expiry===n){this.controller.setCounter(e.id,o,l.val+s,a&&a(l.val+s));return}this.controller.addCounter(e.id,{type:t,val:s,explanation:a&&a(s),expiry:n})}}adjustPermanentStats(e,t,s){t!==0&&this.mergeValueCounter(e,I.POWER_ADJUSTMENT,t),s!==0&&this.mergeValueCounter(e,I.MAX_HEALTH_ADJUSTMENT,s),this.handlePermanentEvent({type:R.AFTER_STATS_CHANGED,permanent:e,powerDelta:t,healthDelta:s,ctx:this.makeContext()})}removeCounterType(e,t){for(const[s,a]of e.counters.entries())if(a.type===t)return this.controller.removeCounter(e.id,s),!0;return!1}attack(e,t){const s=this.inspector.getPower(e);this.damagePermanent(t,s,e)}unreadyPermanentForAction(e){this.inspector.isAlwaysReady()||this.controller.unreadyPermanent(e.id)}transformPermanent(e,t){this.controller.transformPermanent(e.id,t)}handlePermanentEventWithHandlers(e,t){switch(e.type){case R.CREATED:{const s=t[R.CREATED];if(s)return s(e);break}case R.BEFORE_DESTROYED:{const s=t[R.BEFORE_DESTROYED];if(s)return s(e);break}case R.AFTER_DESTROYED:{const s=t[R.AFTER_DESTROYED];if(s)return s(e);break}case R.START_TURN:{const s=t[R.START_TURN];if(s)return s(e);break}case R.END_TURN:{const s=t[R.END_TURN];if(s)return s(e);break}case R.BEFORE_DESTROY_UNIT:{const s=t[R.BEFORE_DESTROY_UNIT];if(s)return s(e);break}case R.AFTER_DESTROY_UNIT:{const s=t[R.AFTER_DESTROY_UNIT];if(s)return s(e);break}case R.AFTER_DAMAGED:{const s=t[R.AFTER_DAMAGED];if(s)return s(e);break}case R.AFTER_DAMAGE_REMOVED:{const s=t[R.AFTER_DAMAGE_REMOVED];if(s)return s(e);break}case R.AFTER_STATS_CHANGED:{const s=t[R.AFTER_STATS_CHANGED];if(s)return s(e);break}case R.AFTER_DEAL_DAMAGE:{const s=t[R.AFTER_DEAL_DAMAGE];if(s)return s(e);break}case R.OTHER_UNIT_DESTROYED:{const s=t[R.OTHER_UNIT_DESTROYED];if(s)return s(e);break}case R.OTHER_UNIT_SPAWN:{const s=t[R.OTHER_UNIT_SPAWN];if(s)return s(e);break}default:throw new Error("unknown permanent event type")}}handlePermanentEvent(e){const{permanent:t}=e,s=this.getEffects(t).handlers;s!==void 0&&this.handlePermanentEventWithHandlers(e,s);let a=0;for(;this.inspector.doesPermanentExist(t);){const n=t.counters[a];if(n===void 0)break;const o=this.countersDB[n.type];let l=!1;if(o!==void 0&&o.handlers!==void 0){const i=this.handlePermanentEventWithHandlers({...e,counter:n,counterIndex:a},o.handlers);i&&i.expire!==void 0&&i.expire&&(l=!0)}if(n.expiry&&n.expiry===e.type&&(l=!0),l&&this.inspector.doesPermanentExist(t)){this.controller.removeCounter(t.id,a);continue}a++}}startTurn(e){this.inspector.getPermanentsOf(e).forEach(s=>{this.inspector.doesPermanentHaveCounterType(s,I.FROZEN)||s.ready||this.controller.readyPermanent(s.id)});const t=this.inspector.getDevKnobs().extraGemsPerTurn;if(t!==void 0){const s=new Array(t).fill(C.RAINBOW);this.controller.addGems(e,s),this.controller.addGems(this.inspector.getOpponentOf(e),s)}this.drawCard(e);for(const s of this.inspector.getPermanentsOf(e))this.handlePermanentEvent({type:R.START_TURN,permanent:s,ctx:this.makeContext()});if(this.gameState.turnNumber===0){const s=this.inspector.resolvePayment(e,[C.ROCK,C.ROCK]);if(s!==null)this.controller.removeGems(e,s);else if(!this.inspector.hasAI())throw new Error("only AI can be exempt from first-turn handicap")}if(this.controller.startTurn(e),this.gameSpec.hasAI&&e===f.P2){for(const s of this.allSpecs)s.aiTurn&&s.aiTurn(this.makeAIContext());this.inspector.isGameActive()&&this.endTurn(f.P2),this.inspector.isGameActive()&&this.startTurn(f.P1)}}endTurn(e){for(const t of this.inspector.getPermanentsOf(e))this.handlePermanentEvent({type:R.END_TURN,permanent:t,ctx:this.makeContext()});if(this.inspector.getPermanentsOf(e).forEach(t=>{t.ready&&this.controller.unreadyPermanent(t.id)}),this.inspector.isGemClearingDisabled()||this.controller.clearGems(e),this.inspector.isNoTurnCheck()){const t=this.inspector.getOpponentOf(e);this.controller.clearGems(t)}this.controller.endTurn(e),this.gameSpec.afterTurnEnd&&this.gameSpec.afterTurnEnd(e,this.makeContext())}applySummon(e){var u;const{player:t,handCardId:s,slot:a,cardName:n,payment:o}=e;this.controller.announceSummonPermanent(t,this.inspector.getCardDisplayName(n)),this.controller.removeGems(t,o);const l=((u=this.gameState[t].teamData)==null?void 0:u.faction)??null,i=Mh(this.inspector.getCardColor(n),l);this.controller.broadcastAndApply({type:W.MODIFY_STATS,player:t,diffSummons:1,diffFactionSummons:i?1:void 0}),this.spawnPermanent(n,t,a,s)}spawnPermanent(e,t,s,a){const n=this.cardToPermanent({name:e},t,s);this.controller.createPermanent(n,a),this.handlePermanentEvent({type:R.CREATED,permanent:n,ctx:this.makeContext()});for(const o of this.inspector.getAllPermanents())o.id!==n.id&&this.handlePermanentEvent({type:R.OTHER_UNIT_SPAWN,permanent:o,spawnedPermanent:n,ctx:this.makeContext()});for(const o of this.allSpecs)o.afterSummon&&o.afterSummon(n,this.makeContext())}applyRemove(e){const{permanent:t}=e;this.controller.removePermanent(t.id)}applyMove(e){const{permanent:t,slot:s}=e,a=this.inspector.getCardData(t);this.controller.announceMove(t.owner,a.displayName),this.unreadyPermanentForAction(t),this.controller.move(t.id,s)}applyAttack(e){const{attacker:t,defender:s,payment:a}=e,n=this.inspector.getCardData(t),o=this.inspector.getCardData(s);this.controller.announceAttackCard(n.displayName,this.inspector.getPower(t),o.displayName),this.unreadyPermanentForAction(t),this.controller.removeGems(t.owner,a),this.attack(t,s)}applyCreateGems(e){const{permanent:t,gemColors:s}=e;this.unreadyPermanentForAction(t),this.controller.addGems(t.owner,s)}applyDraw(e){const{player:t,payment:s}=e;this.controller.removeGems(t,s),this.drawCard(t)}applyActivateAbility(e){const{permanent:t,abilityType:s,payment:a}=e;switch(s){case ve.SPECIAL:{this.unreadyPermanentForAction(t);break}}this.controller.removeGems(t.owner,a);const n=this.getEffects(t),o=(()=>{switch(s){case ve.FLEX:return n.onRepeatable;case ve.SPECIAL:return n.onSpecial}})();o&&o(e,this.makeContext())}applyEndTurn(e){const{player:t}=e;if(this.gameSpec.hasAI&&t!==f.P1)throw new Error("validations should only allow P1 steps for AI games");this.endTurn(t),this.startTurn(this.inspector.getOpponentOf(t))}applyAdvanceKeyframe(e){const{keyframe:t,dialogOptionIndex:s}=e,{dialogOptions:a}=t;a!==void 0&&a.length>1&&this.cutsceneChoiceHandler(this,t.id,s??0);const n=o=>o.endGame??!1?(this.endGame(f.P1,ft.NORMAL,{[f.P1]:!0},{}),!0):o.endGameUnsolved??!1?(this.endGame(f.P2,ft.NORMAL,{},{}),!0):!1;if(!n(t)){if(!t.endCutscene){const{nextIds:o,dialogOptions:l}=t,i=this.keyframes,u=g=>i.find(({id:w})=>w===g),c=g=>i.findIndex(({id:w})=>w===g),d=(()=>{if(o===void 0){const y=c(t.id);if(y===-1)throw new Error(`could not find index of current keyframe ${t.id}`);return i[y+1]}const g=(()=>{if(o.length===1)return o[0];if(s===void 0)return null;const y=o[s];return y===void 0?null:y})();if(g===null)return null;const w=u(g);if(w===void 0)throw new Error(`could not find next keyframe ${g}`);return w})();if(d!==null)return this.controller.setKeyframe(d),!(d.blocking??!1)&&n(d),void 0}this.controller.clearKeyframe()}}resolve(e,t){const{resolved:s,isValid:a}=this.inspector.resolveAndValidate(e,t);return a?s:null}execute(e){for(const t of this.allSpecs)if(t.overrideStep&&t.overrideStep(e,this.makeContext()))return;switch(e.type){case H.SUMMON:{this.applySummon(e);break}case H.ATTACK:{this.applyAttack(e);break}case H.CREATE_GEMS:{this.applyCreateGems(e);break}case H.MOVE:{this.applyMove(e);break}case H.DRAW:{this.applyDraw(e);break}case H.ACTIVATE_ABILITY:{this.applyActivateAbility(e);break}case H.END_TURN:{this.applyEndTurn(e);break}case H.ADVANCE_KEYFRAME:{this.applyAdvanceKeyframe(e);break}case H.REMOVE:{this.applyRemove(e);break}case H.CREATE_CHECKPOINT:{this.needCheckpoint.push(e.slot);break}default:this.gameSpec.applyStep&&this.gameSpec.applyStep(e,this.makeContext())}}tryStep(e,t){if(!this.inspector.isGameActive())return!1;if(this.inspector.isTurnPending(f.P1)&&(this.inspector.getDevKnobs().instasolve??!1))return this.endGame(f.P1,ft.NORMAL,{[f.P1]:!0},{}),!0;const s=this.resolve(e,t);if(s===null)return!1;let a=!1;for(const l of this.allSpecs)l.beforeStep&&(l.beforeStep(e,this.makeContext())||(a=!0));a||this.execute(s);for(const l of this.allSpecs)l.afterStep&&l.afterStep(s,this.makeContext());const n=Mn(s);if(n!==null&&!(this.inspector.hasAI()&&n===f.P2)&&this.controller.broadcastAndApply({type:W.SET_STEP_NUMBER,player:n,stepNumber:this.gameState[n].stepNumber+1}),!this.inspector.isGameActive())return!0;const o=this.getWinner();if(o){const l={},i={};for(const u of[f.P1,f.P2]){if(!this.getIsSolved(u,o))continue;l[u]=!0;const c=this.getCardUnlocks(u);c.length>0&&(i[u]=c)}return this.endGame(o,ft.NORMAL,l,i),!0}return(this.inspector.getDevKnobs().checkpointAfterEveryStep||this.inspector.areCheckpointsAllowed()&&s.type==H.END_TURN)&&this.needCheckpoint.push(0),this.needCheckpoint.length&&(this.checkpointHandler(this,this.needCheckpoint),this.needCheckpoint.length=0),!0}getPublicPlayerState(e,t){const s=t[e],{teamData:a,stepNumber:n,drawPile:o,prevTurnsTime:l,startTurnTime:i,stats:u}=s;return{teamData:a,stepNumber:n,hand:s.hand.map(c=>({...c,card:{...c.card,name:void 0}})),gems:s.gems,drawPileSize:o.length,prevTurnsTime:l,startTurnTime:i,stats:u}}getClientPlayerState(e,t){const s=t[e],{drawPile:a}=s,{topCard:n}=this.inspector.getTopCardsInDrawPile(e);return{...s,drawPile:void 0,discardPile:void 0,drawPileSize:a.length,topCard:this.inspector.doesPlayerHaveMastery(e,hn)?n:void 0}}getClientGameStateForRole(e,t){switch(e){case he.GOD:return{...t};case he.P1:{const{engineOnly:s,...a}={...t,[f.P1]:this.getClientPlayerState(f.P1,t),[f.P2]:this.getPublicPlayerState(f.P2,t)};return a}case he.P2:{const{engineOnly:s,...a}={...t,[f.P1]:this.getPublicPlayerState(f.P1,t),[f.P2]:this.getClientPlayerState(f.P2,t)};return a}}}respOverrideState(e){this.controller.respOverrideState(e.id,this.roomId,this.getClientGameStateForRole(e.role,this.gameState))}broadcastOverrideState(e){this.controller.overrideState(this.roomId,e,this.getClientGameStateForRole(he.P1,e),this.getClientGameStateForRole(he.P2,e))}acceptMember(e){this.multicaster.enableMember(e),this.respOverrideState(e)}applySystemStep(e){switch(e.type){case H.SYSTEM_JOIN:{const{teamId:t,roomMember:s,role:a}=e;this.acceptMember(s);break}case H.SYSTEM_RESIGN:{if(!this.inspector.isGameActive())break;this.endGame(this.inspector.getOpponentOf(e.player),ft.RESIGN,{},{});break}case H.SYSTEM_TIME_OUT:{if(!this.inspector.isGameActive())break;this.endGame(this.inspector.getOpponentOf(e.player),ft.TIME,{},{});break}default:throw new Error("Invalid system step type.")}}applyStep(e,t){if(this.needCheckpoint.length)throw new Error("needCheckpoint should only be used during the processing of a step, and consumed when the step is done");this.tryStep(t,e.role)?this.controller.respSuccess(e.id):this.controller.respInvalidStep(e.id)}aiTryStep(e){return this.tryStep(e,he.GOD)}}var Ct=(r=>(r.SYSTEM="system",r.ROOM_MEMBER_ID="room_member_id",r.BROADCAST="broadcast",r.ROLE="role",r.ROLE_FILTER="role_filter",r))(Ct||{});class jh{constructor(){p(this,"updates");p(this,"applyUpdateFunc");this.updates=[]}setApplyUpdateFunc(e){this.applyUpdateFunc=e}applyUpdate(e){if(this.applyUpdateFunc===void 0)throw new Error("apply update func not initialized");this.applyUpdateFunc(e)}notifySystem(e){this.updates.push({type:"system",upd:e})}send(e,t){this.updates.push({type:"room_member_id",upd:t,roomMemberId:e})}broadcastAndApply(e){this.updates.push({type:"broadcast",upd:e}),this.applyUpdate(e)}broadcastAndApplyAsymmetric(e,t,s){this.applyUpdate(t),this.updates.push({type:"role_filter",upd:t,pred:a=>Zs(a,e)}),s!=null&&this.updates.push({type:"role_filter",upd:s,pred:a=>!Zs(a,e)})}broadcastPerRoleAndApply(e){const t=e[he.GOD];if(t===void 0)throw new Error("full update not provided");this.applyUpdate(t);for(const[s,a]of Object.entries(e))this.updates.push({type:"role",upd:a,role:s})}readOutUpdates(){const e=this.updates;return this.updates=[],e}enableMember(e){this.notifySystem({type:W.SYSTEM_ENABLE_MEMBER,roomMember:e})}}class Vh{constructor(e){p(this,"server");p(this,"seenTeamIds");p(this,"syncLoopController");this.server=e,this.seenTeamIds=new Set,this.syncLoopController=new jt(async()=>await this.runSyncAsync())}async runSyncAsync(){const e={};for(const s of this.server.teamControllers.values()){if(this.seenTeamIds.has(s.teamId))continue;if(Object.keys(e).length>=this.server.config.miscTeamStateTeamsSyncLimit)break;const{teamId:a,slowSyncTracking:{syncController:n}}=s,o=n.startSync();o!==null&&(this.seenTeamIds.add(a),e[a]=o)}if(Object.keys(e).length===0)return this.seenTeamIds.clear(),!0;this.server.recordSlowSyncPacket();const t=await(async()=>{try{return await this.server.syncDataThrottledAsync({teamState:e}),!0}catch(s){return console.error(s),!1}})();for(const[s,a]of Object.entries(e)){const n=this.server.getTeamController(s),{syncController:o}=n.slowSyncTracking;o.endSync(t?a:null)}return!1}}class Wh{constructor(e){p(this,"server");p(this,"seenTeamIds");p(this,"syncLoopController");this.server=e,this.seenTeamIds=new Set,this.syncLoopController=new jt(async()=>await this.runSyncAsync())}async runSyncAsync(){const e={};for(const s of this.server.teamControllers.values()){if(this.seenTeamIds.has(s.teamId))continue;if(Object.keys(e).length>=this.server.config.decksAndMasteryTreesTeamsSyncLimit)break;const{teamId:a,deckControllers:n,masteryTreeController:o}=s,l={};for(const[c,d]of n.entries()){if(d===null)continue;const{deck:g,slowSyncTracking:{tracker:w}}=d;w.snapshot()&&(l.decks??(l.decks={}),l.decks[c]={teamId:a,slot:c,deck:g})}const{masteryTree:i,slowSyncTracking:{tracker:u}}=o;u.snapshot()&&(l.masteryTree=i),this.seenTeamIds.add(a),Object.keys(l).length!==0&&(e[a]=l)}if(Object.keys(e).length===0)return this.seenTeamIds.clear(),!0;this.server.recordSlowSyncPacket();const t=await(async()=>{try{return await this.server.syncDataThrottledAsync({teamState:e}),!0}catch(s){return console.error(s),!1}})();for(const[s,a]of Object.entries(e)){const n=this.server.getTeamController(s);for(const{slot:o,deck:l}of Object.values(a.decks??{})){const{tracker:i}=n.getDeckController(o).slowSyncTracking;i.handleSyncResult(t)}if(a.masteryTree!==void 0){const{tracker:o}=n.masteryTreeController.slowSyncTracking;o.handleSyncResult(t)}}return!1}}class Kh{constructor(e){p(this,"server");p(this,"seenTeamIds");p(this,"syncLoopController");this.server=e,this.seenTeamIds=new Set,this.syncLoopController=new jt(async()=>await this.runSyncAsync())}async runSyncAsync(){const e={};let t=0;for(const a of this.server.teamControllers.values()){if(this.seenTeamIds.has(a.teamId))continue;if(t>=this.server.config.checkpointsSyncLimit)break;const{teamId:n,battleControllers:o}=a,l={};for(const[i,u]of o.entries()){const{checkpoints:c,checkpointsSyncTracker:d}=u;d.snapshot()&&(l.checkpoints??(l.checkpoints={}),l.checkpoints[i]=c,t+=Object.keys(c).length)}this.seenTeamIds.add(n),Object.keys(l).length!==0&&(e[n]=l)}if(Object.keys(e).length===0)return this.seenTeamIds.clear(),!0;this.server.recordSlowSyncPacket();const s=await(async()=>{try{return await this.server.syncDataThrottledAsync({teamState:e}),!0}catch(a){return console.error(a),!1}})();for(const[a,n]of Object.entries(e)){const o=this.server.getTeamController(a);for(const[l,i]of Object.entries(n.checkpoints??{})){const{checkpointsSyncTracker:u}=o.getBattleController(l);u.handleSyncResult(s)}}return!1}}class Zh{constructor(e){p(this,"server");p(this,"seenRoomIds");p(this,"seenTeamIds");p(this,"syncLoopController");this.server=e,this.seenRoomIds=new Set,this.seenTeamIds=new Set,this.syncLoopController=new jt(async()=>await this.runSyncAsync())}async runSyncAsync(){const e={},t=[];for(const n of this.server.teamControllers.values()){const{teamId:o,battleControllers:l}=n;if(this.seenTeamIds.has(o))continue;if(Object.keys(e).length>=this.server.config.activeRoomsSyncLimit)break;let i=!1;for(const[u,c]of l){if(Object.keys(e).length>=this.server.config.activeRoomsSyncLimit){i=!0;break}const d=c.getActiveRoom();if(d===null||!c.isRoomActive()||c.getPlayer()!==f.P1)continue;const{engine:g,roomId:w,hostPuzName:y,createTime:A,tracker:S}=d;if(!this.seenRoomIds.has(w)&&S.snapshot()){const{puzName:O,gameState:k}=g,P=k[f.P1].teamData,N=k[f.P2].teamData,U=P==null?void 0:P.teamId,Q=N==null?void 0:N.teamId;this.seenRoomIds.add(w),e[w]={roomId:w,puzName:O,hostPuzName:y,createTime:A,p1TeamId:U,p2TeamId:Q,p1Faction:(P==null?void 0:P.faction)??void 0,p2Faction:(N==null?void 0:N.faction)??void 0,savedRoom:{gameState:k}},t.push(S)}}i||this.seenTeamIds.add(o)}if(Object.keys(e).length===0)return this.seenRoomIds.clear(),this.seenTeamIds.clear(),!0;const{lockedRoomIds:s}=this.server.gameRoomsController.slowSyncTracking.completedRoomsSyncController;for(const n of Object.keys(e))s.add(n);this.server.recordSlowSyncPacket();const a=await(async()=>{try{return await this.server.syncDataThrottledAsync({rooms:e}),!0}catch(n){return console.error(n),!1}})();for(const n of Object.keys(e))s.delete(n);s.size!==0&&console.error("locked rooms found in active rooms sync not owned by current sync loop");for(const n of t)n.handleSyncResult(a);return!1}}class qh{constructor(e){p(this,"server");p(this,"roomsToSync");p(this,"lockedRoomIds");p(this,"seenRoomIds");p(this,"syncLoopController");this.server=e,this.roomsToSync=[],this.lockedRoomIds=new Set,this.seenRoomIds=new Set,this.syncLoopController=new jt(async()=>await this.runSyncAsync())}addRoom(e){this.roomsToSync.push(e)}async runSyncAsync(){const e={};for(const s of this.roomsToSync){const{roomId:a}=s;if(Object.keys(e).length>=this.server.config.completedRoomsSyncLimit)break;this.lockedRoomIds.has(a)||this.seenRoomIds.has(a)||(this.seenRoomIds.add(a),e[a]=s)}return Object.keys(e).length===0?(this.seenRoomIds.clear(),!0):(this.server.recordSlowSyncPacket(),await(async()=>{try{return await this.server.syncDataThrottledAsync({rooms:e}),!0}catch(s){return console.error(s),!1}})()&&(this.roomsToSync=this.roomsToSync.filter(s=>e[s.roomId]===void 0)),!1)}}class $h{constructor(e){p(this,"server");p(this,"rooms");p(this,"activeRoomIds");p(this,"slowSyncTracking");p(this,"puzDataCache");this.server=e,this.rooms=new Map,this.activeRoomIds=new Map,this.slowSyncTracking={activeRoomsSyncController:new Zh(this.server),completedRoomsSyncController:new qh(this.server)},this.puzDataCache={}}getPuzData(e){const t=this.puzDataCache[e];if(t!==void 0)return t;const s=[ea,...e.split(",")].map(i=>xh(i)),a=$c(s,this.server.cardsDB),n=Xc(s,a),o=new Bo(s,this.server.cardsDB,a),l={allSpecs:s,effectsDB:a,countersDB:n,inspector:o};return this.puzDataCache[e]=l,l}getInspector(e){return this.getPuzData(e).inspector}createRoomWithTeamData(e,t,s,a,n,o,l){l??(l=this.server.genGameRoomId());const i=new jh,{allSpecs:u,effectsDB:c,countersDB:d}=this.getPuzData(e),g=new Yh(i,e,l,u,y=>[],this.server.cardsDB,c,d,this.server.keyframes,s,a,(y,A)=>{for(const{teamId:S}of Object.values(s))this.server.getBattleController(S,t).makeCheckpoint(y,A)},(y,A,S)=>{for(const{teamId:O}of Object.values(s))this.server.getTeamController(O).mergeFastSyncPacket({cutsceneChoices:[{keyframeId:A,dialogOptionIndex:S}]})},n,o);o===void 0&&g.init();const w={engine:g,roomId:l,hostPuzName:t,createTime:new Date().getTime(),members:new Map,multicaster:i,tracker:new Vt(this.server.config,De.ROOM,y=>{const A={teams:{}};for(const{teamId:S}of Object.values(s)){const O=this.getActiveRoom(S,t);O===null||O.roomId!==l||!this.server.getBattleController(S,t).isRoomActive()||(A.teams[S]={rooms:{[t]:y}})}this.server.dirtyStateTracker.update(A)})};return this.server.prepareRoom(w),this.rooms.set(l,{room:w,refcount:0}),w}createRoomFromGameState(e,t,s,a){const n=Object.fromEntries([f.P1,f.P2].flatMap(o=>{const l=s[o].teamData;return l===void 0?[]:[[o,l]]}));return this.server.gameRoomsController.createRoomWithTeamData(e,t,n,s.engineOnly.deckSelections,s.devKnobs,s,a)}createRoom(e,t,s,a,n){const o=Object.fromEntries(Object.entries(s).map(([l,i])=>{const u=this.server.getTeamController(i);return[l,u.makeTeamDataForBattle(e)]}));return this.createRoomWithTeamData(e,t,o,a,n)}getActiveRoom(e,t){const s=this.activeRoomIds.get(e);if(s===void 0)return null;const a=s.get(t);if(a===void 0)return null;const n=this.rooms.get(a);if(n===void 0)throw new Error("expect active room to be available");return n.room}setActiveRoom(e,t,s){const a=this.rooms.get(s);if(a===void 0)throw new Error("expect room to exist if setting active");a.refcount++;const n=(()=>{const l=this.activeRoomIds.get(e);if(l!==void 0)return l;const i=new Map;return this.activeRoomIds.set(e,i),i})(),o=n.get(t);if(o!==void 0){const l=this.rooms.get(o);if(l===void 0)throw new Error("expect prev room to exist if unsetting");l.refcount--,l.refcount<=0&&this.rooms.delete(o)}n.set(t,s)}getNumRoomMembers(e,t){const s=this.getActiveRoom(e,t);return s===null?0:[...s.members.values()].filter(a=>a.conn.teamId===e).length}handleRoomMembersUpdate(e,t){this.server.bigBoardStateTracker.updateTeam(e,{unlocks:{[t]:{numMembers:this.getNumRoomMembers(e,t)}}})}async handleRoomCompleteAsync(e,t,s){const{roomId:a,hostPuzName:n,engine:o,createTime:l}=e,{inspector:i}=o,{puzName:u,gameState:c}=e.engine,d=oi(u),g=d===ot,w=new Date().getTime(),y=c[f.P1].teamData,A=c[f.P2].teamData,S=y==null?void 0:y.teamId,O=A==null?void 0:A.teamId,k=new Set([...S===void 0?[]:[S],...O===void 0?[]:[O]]),P=Array.from(k,ie=>this.server.getTeamController(ie)),N=t.length>0,U=i.getSpeedrunTime(),Q=N?[f.P1]:[],F={};for(const ie of[f.P1,f.P2]){let oe=i.calcFactionScore(ie,g,N);g||(oe>c.engineOnly.gainedScore?(oe-=c.engineOnly.gainedScore,c.engineOnly.gainedScore+=oe):oe=0),oe!==0&&(F[ie]=oe)}const{winner:j,loseReason:V}=c;if(j===void 0||V===void 0)throw new Error("winner/loseReason should be defined on game end");const ae={roomId:a,puzName:d,hostPuzName:n,createTime:l,p1TeamId:S,p2TeamId:O,p1Faction:(y==null?void 0:y.faction)??void 0,p2Faction:(A==null?void 0:A.faction)??void 0,savedRoom:{gameState:c},gameEndInfo:{totalTime:U,isSolved:N,winner:j,loseReason:V,p1FactionScoreContribution:F[f.P1],p2FactionScoreContribution:F[f.P2]}};if(e.tracker.revNumber>0||!i.hasAI()){const ie={rooms:{[n]:{type:Lt.SYNCED,lastSyncTime:Date.now()}}};this.server.dirtyStateTracker.update({teams:Object.fromEntries([...k].map(oe=>[oe,ie]))}),this.slowSyncTracking,this.slowSyncTracking.completedRoomsSyncController.addRoom(ae)}await Promise.all(Array.from(P,ie=>ie.handleTeamUpdatesAsync({answerSubmissionsToAdd:t.filter(oe=>oe===ie.teamId).map(oe=>os(oe,d,w)),cardUnlocksToAdd:s.filter(({teamId:oe})=>oe===ie.teamId).map(({teamId:oe,cardName:Pe})=>({teamId:oe,puzName:d,cardName:Pe,timestamp:w}))})));for(const ie of Q){const{teamData:oe}=c[ie];if(oe===void 0)throw new Error("expect speedrunning players to belong to a team");const{teamId:Pe,enabledMasteries:Qe}=oe;this.server.getTeamController(Pe).handleNewSpeedrunTime(d,U)}for(const[ie,oe]of Object.entries(F)){const Pe=ie,{teamData:Qe}=c[Pe];if(Qe===void 0)throw new Error("expect scored players to belong to teams");const{teamId:at,faction:rr,enabledMasteries:gt}=Qe,Ss=this.server.getTeamController(at);(gt[pn]??!1)&&rr!==null&&Ss.handleChangeFactionScoreContributions({[rr]:oe})}for(const ie of P)ie.getBattleController(n).handleRoomComplete(a,c.engineOnly.gainedScore)}async triggerSlowSyncAsync(){await this.slowSyncTracking.completedRoomsSyncController.syncLoopController.triggerLoopAsync(),await this.slowSyncTracking.activeRoomsSyncController.syncLoopController.triggerLoopAsync()}}class Xh{constructor(e){p(this,"server");p(this,"unlockCounts");p(this,"solveCounts");p(this,"factionScores");p(this,"factionHistory");p(this,"factionHistoryUnsynced");p(this,"speedrunLeaderboards");p(this,"solveTimeLeaderboards");this.server=e,this.unlockCounts=new Map(Array.from(this.server.puzzlesDB.battleGroups.keys(),t=>[t,0])),this.solveCounts=new Map(Array.from(this.server.puzzlesDB.battleGroups.keys(),t=>[t,0])),this.factionScores=Ca(),this.factionHistory={},this.factionHistoryUnsynced={},this.server.puzzlesDB,this.speedrunLeaderboards={},this.solveTimeLeaderboards={}}getSpeedrunLeaderboard(e){var t;return(t=this.speedrunLeaderboards)[e]??(t[e]=new Dn(s=>s.teamId,(s,a)=>s.speedrunTime-a.speedrunTime)),this.speedrunLeaderboards[e]}getSolveTimeLeaderboard(e){var t;return(t=this.solveTimeLeaderboards)[e]??(t[e]=new Dn(s=>s.teamId,(s,a)=>s.solveTime-a.solveTime)),this.solveTimeLeaderboards[e]}getPuzzleStats(e){const t=this.unlockCounts.get(e),s=this.solveCounts.get(e);if(t===void 0||s===void 0)throw new Error("expect stats to be defined");return{unlockCount:t,solveCount:s}}getSpeedrunRank(e,t){if(this.server.getTeamController(e).speedrunTimes.get(t)===void 0)return null;const{sortedList:a}=this.getSpeedrunLeaderboard(t),n=a.findIndex(o=>o.teamId===e);return n===void 0?(console.error("expect team to exist in leaderboard"),null):n}getSpeedrunLeaderboardSummary(e){const{sortedList:t}=this.getSpeedrunLeaderboard(e);return t.slice(0,as).map(({teamId:s,speedrunTime:a})=>({teamData:this.server.getTeamController(s).getTeamSummaryState(),speedrunTime:a}))}handleTeamUpdates(e,t){const{factionScoreChanges:s,updateFactionHistory:a,solvesToDelete:n,unlocksToDelete:o,solvesToAdd:l,unlocksToAdd:i,solveTimes:u,speedrunTimes:c,forceIfHidden:d=!1}=t,g=this.server.getTeamController(e).isHidden;if(!d&&g)return;if(s!==void 0){const A=Math.floor(Date.now()/1e3/60/60),S={};for(const[k,P]of Object.entries(s??{})){const N=k;if(this.factionScores[N]+=P,a&&P){const U=`${k}.${A}`,Q=(this.factionHistory[U]??0)+P;this.factionHistory[U]=Q,this.factionHistoryUnsynced[U]=Q,S[U]=Q}}const O=Object.fromEntries(Object.entries(this.factionScores).filter(([k,P])=>s[k]??!1));for(const k of this.server.teamControllers.values())k.broadcastTeamGlobalUpdate({type:$.TEAM_UPDATE_STATE,factionScores:O});Object.keys(S).length&&this.server.broadcastGlobalUpdate({type:J.FACTION_HISTORY},{type:$.FACTION_HISTORY_UPDATE_STATE,factionHistory:S})}for(const A of n??[]){const S=this.solveCounts.get(A);S!==void 0&&this.solveCounts.set(A,S-1)}for(const A of l??[]){const S=this.solveCounts.get(A);S!==void 0&&this.solveCounts.set(A,S+1)}for(const A of o??[]){const S=this.unlockCounts.get(A);S!==void 0&&this.unlockCounts.set(A,S-1)}for(const A of i??[]){const S=this.unlockCounts.get(A);S!==void 0&&this.unlockCounts.set(A,S+1)}const w=new Set([...i??[],...o??[],...l??[],...n??[]]),y=Object.fromEntries([...w].flatMap(A=>this.server.puzzlesDB.battleGroups.has(A)?[[A,this.getPuzzleStats(A)]]:[]));for(const A of this.server.teamControllers.values())A.masteryTreeController.getEnabledMasteries().has(xs)&&A.broadcastTeamGlobalUpdate({type:$.TEAM_UPDATE_PUZZLE_STATS,stats:Object.fromEntries(Object.entries(y).filter(([S,O])=>A.unlockTimes.has(S)))});for(const[A,S]of Object.entries(u??{})){const O=this.getSolveTimeLeaderboard(A);if(S===null){O.remove(e);continue}this.addSolveTimeRecord(e,A,S)}for(const[A,S]of Object.entries(c??{}))S===null?this.removeSpeedrunRecord(e,A):this.addSpeedrunRecord(e,A,S)}startSync(){return{...this.factionHistoryUnsynced}}endSync(e){for(const[t,s]of Object.entries(e))this.factionHistoryUnsynced[t]==s&&delete this.factionHistoryUnsynced[t]}addSolveTimeRecord(e,t,s){this.getSolveTimeLeaderboard(t).insert({teamId:e,solveTime:s},!1)}addSpeedrunRecord(e,t,s){const a=this.getSpeedrunLeaderboard(t),{oldIndex:n,newIndex:o}=a.insert({teamId:e,speedrunTime:s},!0);this.broadcastSpeedrunLeaderboardUpdates(t,o,n===null?a.sortedList.length:n+1,{speedrunRecordsToAdd:[{teamData:this.server.getTeamController(e).getTeamSummaryState(),speedrunTime:s}]})}removeSpeedrunRecord(e,t){const s=this.getSpeedrunLeaderboard(t),a=s.remove(e);if(a===null)return;const{oldIndex:n}=a,o=s.sortedList[as-1];this.broadcastSpeedrunLeaderboardUpdates(t,n,s.sortedList.length,{speedrunRecordsToAdd:o===void 0?void 0:[{teamData:this.server.getTeamController(o.teamId).getTeamSummaryState(),speedrunTime:o.speedrunTime}],speedrunRecordsToRemove:[e]})}hideTeam(e){const t=this.server.getTeamController(e);this.handleTeamUpdates(e,{factionScoreChanges:Object.fromEntries(Object.entries(t.factionScoreContributions).map(([s,a])=>[s,-a])),updateFactionHistory:!0,solvesToDelete:[...t.solveTimes.keys()],unlocksToDelete:[...t.unlockTimes.keys()],solveTimes:Object.fromEntries(Array.from(t.solveTimes.keys(),s=>[s,null])),speedrunTimes:Object.fromEntries(Array.from(t.speedrunTimes.keys(),s=>[s,null])),forceIfHidden:!0})}unhideTeam(e){const t=this.server.getTeamController(e);this.handleTeamUpdates(e,{factionScoreChanges:t.factionScoreContributions,updateFactionHistory:!0,solvesToAdd:[...t.solveTimes.keys()],unlocksToAdd:[...t.unlockTimes.keys()],solveTimes:Object.fromEntries(t.solveTimes.entries()),speedrunTimes:Object.fromEntries(t.speedrunTimes.entries()),forceIfHidden:!0})}broadcastSpeedrunLeaderboardUpdates(e,t,s,a){const n=this.getSpeedrunLeaderboard(e),o=t<as,l=o?0:t,i=o?n.sortedList.length:Math.min(s,n.sortedList.length);for(let u=l;u<i;u++){const{teamId:c}=n.sortedList[u];this.server.getTeamController(c).getBattleController(e).broadcastTeamSpeedrunLeaderboardSummaryGlobalUpdate({type:$.TEAM_SPEEDRUN_LEADERBOARD_SUMMARY_UPDATE_STATE,speedrunRank:u,...o?a:void 0})}}handleTeamSummaryUpdates(e){for(const[t,s]of Object.entries(this.speedrunLeaderboards)){const a={};for(const{teamId:n}of s.sortedList.slice(0,as)){const o=e[n];if(o===void 0)continue;const l=Bu(o);Object.keys(l).length!==0&&(a[n]=l)}if(Object.keys(a).length!==0)for(const n of this.server.teamControllers.values())n.getBattleController(t).broadcastTeamSpeedrunLeaderboardSummaryGlobalUpdate({type:$.TEAM_SPEEDRUN_LEADERBOARD_SUMMARY_UPDATE_STATE,teamNameDisplayUpds:a})}}}var tr=(r=>(r.MOVE="move",r.REMOVE="remove",r.CLICK="click",r))(tr||{});const Jh=E.object({type:E.literal("move"),rX:E.number(),rY:E.number()}),Qh=E.object({type:E.literal("remove")}),ep=E.object({type:E.literal("click"),rX:E.number(),rY:E.number()});E.union([Jh,Qh,ep]);class tp{constructor(e){p(this,"server");p(this,"cursorGroups");this.server=e,this.cursorGroups=new Map}getTeamCursorGroups(e){const t=this.cursorGroups.get(e);if(t!==void 0)return t;const s=new Map;return this.cursorGroups.set(e,s),s}getCursorGroup(e,t){const s=this.getTeamCursorGroups(e),a=s.get(t);if(a!==void 0)return a;const n=new rp;return s.set(t,n),n}getConnCursorGroup(e){const{teamId:t,cursorGroupName:s}=e;return t===void 0||s===void 0?null:this.getCursorGroup(t,s)}removeConnFromGroup(e){this.broadcastEvent(e,{type:tr.REMOVE});const{teamId:t,cursorGroupName:s}=e;if(t===void 0||s===void 0)return;const a=this.cursorGroups.get(t);if(a===void 0){console.error("expect team cursor group to exist");return}const n=a.get(s);if(n===void 0){console.error("expect cursor group to exist");return}n.conns.delete(e.connId),n.conns.size===0&&a.delete(s),a.size===0&&this.cursorGroups.delete(t),delete e.cursorGroupName}addConnToGroup(e,t){this.removeConnFromGroup(e);const{teamId:s}=e;s!==void 0&&(this.getCursorGroup(s,t).conns.set(e.connId,e),e.cursorGroupName=t)}async broadcastEvent(e,t){if(e.cursorGroupName===void 0)return;const s=this.getConnCursorGroup(e);if(s===null||(s.addEvent(e,t),s.locked))return;s.locked=!0,await new Promise(n=>setTimeout(n,0));const a=s.pullEvents();for(const n of s.conns.values()){const o=a.filter(({connId:l})=>n.connId!==l);o.length&&this.server.sendResp(n,{type:Te.CURSOR_EVENT,events:o})}s.locked=!1}}class rp{constructor(){p(this,"conns");p(this,"queuedMoves");p(this,"queuedEvents");p(this,"locked");this.conns=new Map,this.queuedMoves=new Map,this.queuedEvents=[],this.locked=!1}addEvent({connId:e},t){t.type==tr.MOVE?this.queuedMoves.set(e,t):this.queuedEvents.push([e,t])}pullEvents(){const e=[...this.queuedMoves.entries(),...this.queuedEvents];return this.queuedMoves.clear(),this.queuedEvents.length=0,e.map(([t,s])=>({connId:t,event:s}))}}const sp=r=>{if(typeof r!="object"||typeof r.type!="string")return null;switch(r.type){case tr.REMOVE:return r;case tr.MOVE:case tr.CLICK:{const{rX:e,rY:t}=r;return typeof e!="number"||typeof t!="number"?null:r}}return null};class ap{constructor(e,t,s,a,n){p(this,"gameServerId");p(this,"cardsDB");p(this,"puzzlesDB");p(this,"masteriesDB");p(this,"keyframes");p(this,"opts");p(this,"onReadyCallbacks");p(this,"maxGuessesPerPuzzle");p(this,"huntStartTime");p(this,"huntEndTime");p(this,"backend");p(this,"numActiveConns");p(this,"teamConns");p(this,"teamControllers");p(this,"gameRoomsController");p(this,"pvpLobbyController");p(this,"statsController");p(this,"cursorsController");p(this,"dirtyStateTracker");p(this,"bigBoardStateTracker");p(this,"teamListStateTracker");p(this,"teamMetricsTracker");p(this,"fastSyncMetrics");p(this,"slowSyncMetrics");p(this,"checkAnswerMetrics");p(this,"cursorEventsMetrics");p(this,"numAuthsMetrics");p(this,"numRequestsMetrics");p(this,"metricsDumpTracking");p(this,"subscriptions");p(this,"teamListSubscriptions");p(this,"factionHistorySubscriptions");p(this,"serverHealthSubscriptions");p(this,"bigBoardSubscriptions");p(this,"isInitPending");p(this,"isReady");p(this,"isStopped");p(this,"queuedTeamInits");p(this,"isTeamInitInFlight");p(this,"nextConnId");p(this,"nextRoomMemberId");p(this,"nextGameRoomId");p(this,"nextAnswerSubmissionId");p(this,"syncThrottle");p(this,"slowSyncTracking");p(this,"numActivePeriodicTasksHandlers");p(this,"periodicSyncInterval");p(this,"periodicTasksTimer");p(this,"numPendingSubmissionTasks");p(this,"errata");p(this,"unclaimedHints");p(this,"jwtCache");p(this,"config");this.gameServerId="__UNINITIALIZED__",this.maxGuessesPerPuzzle=0,this.huntStartTime=0,this.huntEndTime=0,this.puzzlesDB=e,this.cardsDB=t,this.masteriesDB=s,this.keyframes=a,this.opts=n,this.onReadyCallbacks=[],this.opts.dumpBackendRequests,this.backend=new Tc({backend:this.opts.backend,dumpBackendRequests:this.opts.dumpBackendRequests}),this.numActiveConns=0,this.teamConns=new Map,this.teamControllers=new Map,this.gameRoomsController=new $h(this),this.pvpLobbyController=new Nc(this),this.statsController=new Xh(this),this.cursorsController=new tp(this),this.dirtyStateTracker=new Uu,this.bigBoardStateTracker=new Lu,this.teamListStateTracker=new Fu,this.teamMetricsTracker=new Gu(this),this.fastSyncMetrics=new dt(_t),this.slowSyncMetrics=new dt(_t),this.checkAnswerMetrics=new dt(_t),this.cursorEventsMetrics=new dt(Pu),this.numAuthsMetrics=new dt(_t),this.numRequestsMetrics=new dt(_t),this.metricsDumpTracking={lastDumpTime:0,lastUserTime:0,lastSystemTime:0,userTimeUsage:0,systemTimeUsage:0},this.subscriptions=new Map,this.teamListSubscriptions=new Map,this.factionHistorySubscriptions=new Map,this.serverHealthSubscriptions=new Map,this.bigBoardSubscriptions=new Map,this.isInitPending=!1,this.isReady=!1,this.isStopped=!1,this.queuedTeamInits=new Set,this.isTeamInitInFlight=!1,this.nextConnId=0,this.nextRoomMemberId=0,this.nextGameRoomId=0,this.nextAnswerSubmissionId=0,this.syncThrottle={numSyncsInFlight:0,queue:[]},this.slowSyncTracking={isDownloadInFlight:!1,decksAndMasteryTreesSyncController:new Wh(this),checkpointsSyncController:new Kh(this),miscTeamStateSyncController:new Vh(this),notifsNextIndex:0},this.numActivePeriodicTasksHandlers=0,this.periodicSyncInterval=this.opts.periodicSyncInterval??3e3,this.periodicTasksTimer=setInterval(()=>{this.runPeriodicTasks()},this.periodicSyncInterval),this.numPendingSubmissionTasks=0,this.errata={},this.unclaimedHints=0,this.jwtCache=new Map,this.config={completedRoomsSyncLimit:10,activeRoomsSyncLimit:10,decksAndMasteryTreesTeamsSyncLimit:10,checkpointsSyncLimit:10,miscTeamStateTeamsSyncLimit:10,syncThrottleParallelism:2,slowSyncThrottle:{[De.FAST]:0,[De.MISC]:0,[De.MASTERY_TREE]:0,[De.DECK]:0,[De.ROOM]:0,[De.CHECKPOINTS]:0,[De.ANSWER]:0}}}teardown(){this.periodicTasksTimer!==void 0&&clearInterval(this.periodicTasksTimer);for(const e of this.teamConns.values())for(const t of e.values())t.client.close();this.isStopped=!0}genConnId(){const e=this.nextConnId;return this.nextConnId++,`${e}`}genRoomMemberId(){const e=this.nextRoomMemberId;return this.nextRoomMemberId++,`${e}`}genGameRoomId(){const e=`${this.gameServerId}_room_${this.nextGameRoomId}`;return this.nextGameRoomId++,e}getTeamController(e){const t=this.teamControllers.get(e);if(t===void 0)throw new Error(`team ${e} not initialized yet`);return t}getBattleController(e,t){return this.getTeamController(e).getBattleController(t)}getDeckController(e,t){return this.getTeamController(e).getDeckController(t)}getMasteryTreeController(e){return this.getTeamController(e).masteryTreeController}isValidPuzzle(e,t){return this.puzzlesDB.puzzles.has(t)&&e.isPuzzleUnlocked(t)}isValidDeckSlot(e){return Number.isInteger(e)&&e>=0&&e<vn}async waitForReadyAsync(){this.isReady||await new Promise((e,t)=>{this.onReadyCallbacks.push(e)})}async tryInitAsync(){if(!this.isReady&&!this.isInitPending){this.isInitPending=!0;try{const e=await(async()=>{try{return await this.backend.getInitData()}catch(t){console.error(t)}})();if(e!==void 0){const{gameServerId:t,teams:s,factionHistory:a,maxGuessesPerPuzzle:n,huntStartTime:o,huntEndTime:l,notifsNextIndex:i,errata:u,unclaimedHints:c}=e;this.gameServerId=t,this.maxGuessesPerPuzzle=n,this.huntStartTime=o,this.huntEndTime=l,this.slowSyncTracking.notifsNextIndex=i,this.errata=u,this.unclaimedHints=c;for(const[d,g]of Object.entries(s))await this.createTeamAsync(d,g);Object.assign(this.statsController.factionHistory,a),this.isReady=!0;for(const d of this.onReadyCallbacks)d();this.onReadyCallbacks=[],console.log("Game server init complete.")}}finally{this.isInitPending=!1}}}async initAsync(){if(this.isReady||this.isInitPending)throw new Error("don't expect to request init more than once");if(this.opts.cursorsMode??!1){this.isReady=!0;return}await this.tryInitAsync(),await this.waitForReadyAsync()}addClient(e,t){this.numActiveConns++;const s={connId:t??this.genConnId(),client:e,isAdmin:!1,subscriptions:new Map};return{handleMsg:a=>{(async()=>{try{await this.handleMsg(s,a)}catch(n){console.error(n),this.sendErr(s,{errCode:K.SERVER_ERROR})}})()},removeClient:()=>{this.removeClient(s)}}}removeClient(e){this.numActiveConns--;const{connId:t,teamId:s,roomMember:a,subscriptions:n}=e;for(const o of n.keys())this.unsubscribeFromUpdates(e,o);if(this.cursorsController.removeConnFromGroup(e),a!==void 0&&this.kickRoomMember(a),s!==void 0){const o=this.teamConns.get(s);if(o===void 0)throw new Error("expect team conns to be defined for team");o.delete(t)}}async createTeamAsync(e,t){const s=new Fc(e,t,this);this.teamControllers.set(e,s),s.initStats(),s.initRooms(t.rooms),this.broadcastAdminGlobalUpdate({type:$.SERVER_ADD_TEAM,teamId:s.teamId,teamAdminData:s.getClientAdminData()}),this.handleTeamListAddTeam(e);const a=s.getClientBigBoardState();this.bigBoardStateTracker.addTeam(e,a),this.broadcastBigBoardGlobalUpdate({type:$.BIG_BOARD_UPDATE_STATE,addTeams:{[e]:a}}),await s.handleTeamUpdatesAsync({})}async triggerTeamInits(){if(!this.isTeamInitInFlight){this.isTeamInitInFlight=!0;for(const e of[...this.queuedTeamInits])try{await this.initTeamAsync(e)}catch(t){console.error(t)}this.isTeamInitInFlight=!1}}async initTeamAsync(e){var s;let t=null;try{t=await this.backend.getInitTeamData(e)}catch(a){console.error(a)}if(t!==null){if(this.queuedTeamInits.delete(e),await this.createTeamAsync(e,t),!(this.opts.cursorsMode??!1)){const a=this.getTeamController(e);for(let n=0;n<(((s=this.teamConns.get(e))==null?void 0:s.size)??0);n++)a.numAuthsMetrics.record(),this.teamMetricsTracker.recordAuth(e)}this.broadcastRespToTeam(e,{type:Te.AUTH_SUCCESS})}}prepareRoom(e){this.broadcastUpdates(e)}completeEnterRoom({reqId:e,conn:t,role:s},a){const{puzName:n}=a.engine,o=s??he.GOD;this.sendResp(t,{type:Te.ENTERED_ROOM,reqId:e,params:{puzName:n,role:o}}),this.joinConnToRoom(t,a,o)}joinConnToRoom(e,t,s){const a={id:this.genRoomMemberId(),conn:e,room:t,role:s,enabled:!1};e.roomMember=a,t.members.set(a.id,a);const n=e.teamId;if(n===void 0)throw new Error("expect client to be authed");this.gameRoomsController.handleRoomMembersUpdate(n,t.hostPuzName),this.sendSystemStep(t,{type:H.SYSTEM_JOIN,teamId:n,roomMember:a,role:s})}kickRoomMember(e){const{id:t,room:s,conn:a}=e;s.members.delete(t),delete a.roomMember;const n=a.teamId;if(n===void 0)throw new Error("expect client to be authed");this.gameRoomsController.handleRoomMembersUpdate(n,s.hostPuzName)}tryGetBattleGroup(e){return this.puzzlesDB.tryGetBattleGroup(e)}getBattleGroup(e){return this.puzzlesDB.getBattleGroup(e)}getSubscriptions(e){switch(e.type){case J.SERVER:return this.subscriptions;case J.SERVER_HEALTH:return this.serverHealthSubscriptions;case J.BIG_BOARD:return this.bigBoardSubscriptions;case J.PVP:return this.pvpLobbyController.subscriptions;case J.TEAM_LIST:return this.teamListSubscriptions;case J.TEAM_MEMBERS:return this.getTeamController(e.teamId).membersSubscriptions;case J.FACTION_HISTORY:return this.factionHistorySubscriptions;case J.TEAM:return this.getTeamController(e.teamId).subscriptions;case J.TEAM_BATTLE:return this.getTeamController(e.teamId).getBattleController(e.puzName).subscriptions;case J.TEAM_FISH_PUZZLE:return this.getTeamController(e.teamId).getFishPuzzleController(e.puzName).subscriptions;case J.TEAM_DECKS:return this.getTeamController(e.teamId).decksSubscriptions;case J.TEAM_MASTERY_TREE:return this.getMasteryTreeController(e.teamId).subscriptions;case J.TEAM_PVP:return this.getTeamController(e.teamId).pvpController.subscriptions;case J.TEAM_SPEEDRUN_LEADERBOARD_SUMMARY:return this.getTeamController(e.teamId).getBattleController(e.puzName).speedrunLeaderboardSummarySubscriptions}}unsubscribeFromUpdates(e,t){const s=e.subscriptions.get(t);s!==void 0&&this.getSubscriptions(s).delete(e.connId)}validateSubscribeToUpdates(e,t){switch(t.type){case J.SERVER:case J.SERVER_HEALTH:case J.BIG_BOARD:return e.isAdmin?null:{errCode:K.PERMISSION_DENIED};case J.PVP:return null;case J.TEAM_LIST:return null;case J.TEAM_MEMBERS:{const{teamId:s}=t;return this.teamControllers.get(s)===void 0?{errCode:K.INVALID_TEAM}:null}case J.FACTION_HISTORY:return null;case J.TEAM:{const{teamId:s}=t;return e.teamId!==s&&!e.isAdmin?{errCode:K.PERMISSION_DENIED}:null}case J.TEAM_FISH_PUZZLE:{const{teamId:s,puzName:a}=t;return e.teamId!==s&&!e.isAdmin?{errCode:K.PERMISSION_DENIED}:this.getTeamController(s).isValidFishPuzzle(a)?null:{errCode:K.INVALID_PUZZLE}}case J.TEAM_BATTLE:{const{teamId:s,puzName:a}=t;return e.teamId!==s&&!e.isAdmin?{errCode:K.PERMISSION_DENIED}:this.getTeamController(s).isValidBattle(a)?null:{errCode:K.INVALID_PUZZLE}}case J.TEAM_DECKS:case J.TEAM_MASTERY_TREE:case J.TEAM_PVP:{const{teamId:s}=t;return e.teamId!==s&&!e.isAdmin?{errCode:K.PERMISSION_DENIED}:null}case J.TEAM_SPEEDRUN_LEADERBOARD_SUMMARY:{const{teamId:s,puzName:a}=t;return e.teamId!==s&&!e.isAdmin?{errCode:K.PERMISSION_DENIED}:this.getTeamController(s).isValidBattle(a)?null:{errCode:K.INVALID_PUZZLE}}}}subscribeToUpdates(e,t){const s=this.validateSubscribeToUpdates(e,t);if(s!==null)return this.sendErr(e,s);switch(this.unsubscribeFromUpdates(e,t.type),this.getSubscriptions(t).set(e.connId,e),e.subscriptions.set(t.type,t),t.type){case J.SERVER:{this.respGlobalUpdate(e,{type:$.SERVER_OVERRIDE_STATE,teamAdminData:Object.fromEntries(Array.from(this.teamControllers.values(),n=>[n.teamId,n.getClientAdminData()])),puzzles:Object.fromEntries(this.puzzlesDB.puzzles.entries()),battleGroups:Object.fromEntries(this.puzzlesDB.battleGroups.entries()),masteries:Object.fromEntries(Object.values(this.masteriesDB).map(({masteryId:n,displayName:o})=>[n,{displayName:o}])),unclaimedHints:this.unclaimedHints});break}case J.SERVER_HEALTH:{this.respGlobalUpdate(e,{type:$.SERVER_HEALTH_OVERRIDE_STATE,state:{slowSyncMetrics:this.slowSyncMetrics.getSummary(),fastSyncMetrics:this.fastSyncMetrics.getSummary(),checkAnswerMetrics:this.checkAnswerMetrics.getSummary(),numAuthsMetrics:this.numAuthsMetrics.getSummary(),numRequestsMetrics:this.numRequestsMetrics.getSummary(),teamNumAuthsMetrics:this.teamMetricsTracker.numAuthsSummaries,teamNumRequestsMetrics:this.teamMetricsTracker.numRequestsSummaries,fastSyncQueueLength:this.syncThrottle.queue.length,numActivePeriodicTasksHandlers:this.numActivePeriodicTasksHandlers,numPendingSubmissionTasks:this.numPendingSubmissionTasks,numCompletedRoomsToSync:this.gameRoomsController.slowSyncTracking.completedRoomsSyncController.roomsToSync.length,teamInitQueueLength:this.queuedTeamInits.size,numActiveConns:this.numActiveConns,userTimeUsage:this.metricsDumpTracking.userTimeUsage,systemTimeUsage:this.metricsDumpTracking.systemTimeUsage,dirtyState:this.dirtyStateTracker.dirtyState}});break}case J.BIG_BOARD:{this.respGlobalUpdate(e,{type:$.BIG_BOARD_OVERRIDE_STATE,state:{teams:Object.fromEntries(Array.from(this.teamControllers.values(),n=>[n.teamId,n.getClientBigBoardState()]))}});break}case J.PVP:{this.respGlobalUpdate(e,{type:$.PVP_OVERRIDE_STATE,state:{ring:this.pvpLobbyController.ring}});break}case J.TEAM_LIST:{this.sendRespRaw(e,this.teamListStateTracker.getSerializedOverrideGlobalUpdate());break}case J.TEAM_MEMBERS:{const{teamId:n}=t,o=this.getTeamController(n);this.respGlobalUpdate(e,{type:$.TEAM_MEMBERS_OVERRIDE_STATE,state:{teamId:n,members:o.members}});break}case J.FACTION_HISTORY:{this.respGlobalUpdate(e,{type:$.FACTION_HISTORY_OVERRIDE_STATE,factionHistory:this.statsController.factionHistory});break}case J.TEAM:{const{teamId:n}=t,o=this.getTeamController(n),{displayName:l,faction:i,factionScoreContributions:u,solveTimes:c,unlockTimes:d,cardUnlocks:g,speedrunTimes:w}=o,y=o.masteryTreeController.getEnabledMasteries();Object.fromEntries(Array.from(c.keys(),N=>[N,!0]));const A=Object.fromEntries([...this.puzzlesDB.puzzles.keys()].flatMap(N=>d.has(N)?[[N,o.getClientPuzzleState(N)]]:[])),S=Object.fromEntries([...this.puzzlesDB.battleGroups.entries()].flatMap(([N,U])=>d.has(N)?[[N,o.getClientBattleGroupState(N)]]:[])),O=Object.fromEntries(Object.values(this.masteriesDB).map(({masteryId:N,order:U,x:Q,y:F,displayName:j,effectText:V})=>{const ae={masteryId:N,order:U,x:Q,y:F,isEnabled:y.has(N)};return o.solveTimes.has(N)&&Object.assign(ae,{displayName:j,effectText:V}),[N,ae]})),{hintsTotal:k,hintsUsed:P}=o.backendOwned;this.respGlobalUpdate(e,{type:$.TEAM_OVERRIDE_STATE,state:{teamId:n,displayName:l,faction:i,factionScoreContributions:u,factionScores:this.statsController.factionScores,puzzles:A,battleGroups:S,cardUnlocks:Object.fromEntries(Array.from(g.entries(),([N,U])=>[N,{cardName:N,puzName:U}])),masteries:O,hintsInfo:{numHintsTotal:k,numHintsUsed:P.length},huntEndTime:this.huntEndTime}});break}case J.TEAM_FISH_PUZZLE:{const{teamId:n,puzName:o}=t,i=this.getTeamController(n).getFishPuzzleController(o);this.respGlobalUpdate(e,{type:$.TEAM_FISH_PUZZLE_OVERRIDE_STATE,state:{teamId:n,puzName:o,numGuessesRemaining:i.getNumGuessesRemaining(),previousGuesses:i.recentSubmissions.map(({answer:u,timestamp:c})=>({submittedAnswer:u,timestamp:c}))}});break}case J.TEAM_BATTLE:{const{teamId:n,puzName:o}=t,l=this.getBattleController(n,o);this.getTeamController(n),this.respGlobalUpdate(e,{type:$.TEAM_BATTLE_OVERRIDE_STATE,state:{teamId:n,puzName:o,selectedPuzName:l.selectedPuzName,roomPuzName:l.getRoomPuzName(),selectedDeckSlot:l.selectedDeckSlot,lockedDeckSelection:l.getLockedDeckSelection(),activeGame:l.getClientActiveGameState(),errata:l.filterErrata(e),checkpointSummaries:l.summarizeCheckpoints()}});break}case J.TEAM_DECKS:{const{teamId:n}=t,{deckControllers:o}=this.getTeamController(n);this.respGlobalUpdate(e,{type:$.TEAM_DECKS_OVERRIDE_STATE,state:{teamId:n,decks:o.map(l=>l===null?null:l.deck)}});break}case J.TEAM_MASTERY_TREE:{const{teamId:n}=t,{masteryTree:o}=this.getMasteryTreeController(n);this.respGlobalUpdate(e,{type:$.TEAM_MASTERY_TREE_OVERRIDE_STATE,state:{teamId:n,masteryTree:o}});break}case J.TEAM_PVP:{const{teamId:n}=t,o=this.getTeamController(n).pvpController;this.respGlobalUpdate(e,{type:$.TEAM_PVP_OVERRIDE_STATE,state:{teamId:n,outgoingRequests:Object.fromEntries(o.outgoingRequests),incomingRequests:Object.fromEntries(o.incomingRequests),blockedTeams:Object.fromEntries(Array.from(o.blockedTeams,l=>[l,!0])),blockedByTeams:Object.fromEntries([...this.teamControllers.values()].filter(({pvpController:l})=>l.blockedTeams.has(n)).map(({teamId:l})=>[l,!0]))}});break}case J.TEAM_SPEEDRUN_LEADERBOARD_SUMMARY:{const{teamId:n,puzName:o}=t;this.getBattleController(n,o),this.respGlobalUpdate(e,{type:$.TEAM_SPEEDRUN_LEADERBOARD_SUMMARY_OVERRIDE_STATE,state:{teamId:n,puzName:o,speedrunRank:this.statsController.getSpeedrunRank(n,o)??void 0,speedrunLeaderboardSummary:this.statsController.getSpeedrunLeaderboardSummary(o)}});break}}}sendRespRaw(e,t){this.opts.dumpWsMessages&&console.log(`${e.connId} < ${JSON.stringify(JSON.parse(t),null,2)}`),e.client.send(t)}sendResp(e,t){this.sendRespRaw(e,JSON.stringify(t))}sendRespMultiple(e,t){const s=JSON.stringify(t);for(const a of e)this.sendRespRaw(a,s)}sendEnterRoomErr({reqId:e,conn:t},s){this.sendResp(t,{type:Te.ENTER_ROOM_ERROR,reqId:e,err:s})}sendErr(e,t){this.sendResp(e,{type:Te.ERROR,err:t})}respBadRequest(e){this.sendErr(e,{errCode:K.BAD_REQUEST})}checkIsAdmin(e){return e.isAdmin?!0:(this.sendErr(e,{errCode:K.PERMISSION_DENIED}),!1)}async handleMsg(e,t){if(this.isStopped){e.client.close();return}this.numRequestsMetrics.record();const s=JSON.parse(t.toString());if(typeof s!="object"||typeof s.type!="string")return this.respBadRequest(e);if(this.opts.dumpWsMessages&&console.log(`${e.connId} > ${JSON.stringify(s,null,2)}`),s.type===fe.AUTH){const{jwt:l}=s;if(typeof l!="string")return this.respBadRequest(e);this.numAuthsMetrics.record();const i=this.jwtCache.get(l)??this.opts.authInterface.verify(l);if(i===null){this.sendErr(e,{errCode:K.AUTH_ERROR});return}const{teamId:u,isAdmin:c=!1}=i;e.teamId=u,e.isAdmin=c;const d=this.teamConns.get(u);if(d===void 0){const g=new Map;g.set(e.connId,e),this.teamConns.set(u,g)}else d.set(e.connId,e);if(!(this.opts.cursorsMode??!1)){const g=this.teamControllers.get(u);if(g===void 0){if(this.queuedTeamInits.has(u))return;this.queuedTeamInits.add(u),await this.triggerTeamInits();return}this.teamMetricsTracker.recordAuth(u),g.numAuthsMetrics.record()}this.sendResp(e,{type:Te.AUTH_SUCCESS});return}const a=e.teamId;if(a===void 0){this.sendErr(e,{errCode:K.PERMISSION_DENIED}),e.client.close();return}switch(s.type){case fe.PING:{this.sendResp(e,{type:Te.PONG});return}case fe.SET_CURSOR_GROUP:{const{reqId:l,cursorGroupName:i}=s;if(!(i===null||typeof i=="string"))return this.respBadRequest(e);i===null?this.cursorsController.removeConnFromGroup(e):this.cursorsController.addConnToGroup(e,i),this.sendResp(e,{type:Te.SET_CURSOR_GROUP_ACK,reqId:l});return}case fe.CURSOR_EVENT:{const{event:l}=s;if(typeof l!="object")return this.respBadRequest(e);const i=sp(l);if(i===null)return this.respBadRequest(e);this.cursorsController.broadcastEvent(e,i),this.cursorEventsMetrics.record();return}}const n=this.teamControllers.get(a);if(n===void 0){this.sendErr(e,{errCode:K.PERMISSION_DENIED}),e.client.close();return}if(n.isInactive&&!e.isAdmin){this.sendErr(e,{errCode:K.TEAM_INACTIVE}),e.client.close();return}if(n.isTempBlocked&&!e.isAdmin){this.sendErr(e,{errCode:K.TEAM_TEMP_BLOCKED}),e.client.close();return}if(e.spectateTeamId!==void 0&&s.type!==fe.ENTER_ROOM&&s.type!==fe.SUBSCRIBE_TO_UPDATES){this.sendErr(e,{errCode:K.SPECTATE_ACTION});return}if(this.teamMetricsTracker.recordRequest(a),n.numRequestsMetrics.record(),!this.opts.parseWSReq(s)){this.sendErr(e,{errCode:K.BAD_REQUEST});return}await this.handleZodReq(e,s,n)}async handleZodReq(e,t,s){var a,n;switch(t.type){case fe.SET_FACTION:{const{faction:o}=t;s.handleSetFaction(e,o);break}case fe.ENTER_ROOM:{const{reqId:o,params:l}=t;if(e.roomMember!==void 0&&this.kickRoomMember(e.roomMember),l===null)break;const i={reqId:o,conn:e,role:l.role};if(l.spectateTeamId===void 0){s.handleEnterRoom(i,l);break}if(!e.isAdmin){this.sendEnterRoomErr(i,{errCode:K.PERMISSION_DENIED});break}const u=this.teamControllers.get(l.spectateTeamId??"");if(u===void 0){this.sendEnterRoomErr(i,{errCode:K.SPECTATE_INVALID});break}e.spectateTeamId=l.spectateTeamId,u.handleEnterRoom(i,l);break}case fe.STEP:{const o=e.roomMember;if(o===void 0){this.sendErr(e,{errCode:K.NO_ROOM});return}const{room:l}=o;l.tracker.handleModify(),this.handleStep(o,l,t.step),(n=(a=this.opts).afterStepBackdoor)==null||n.call(a,l);break}case fe.DECKBUILDING_STEP:{const{slot:o,deckUpd:l}=t;s.getDeckController(o).handleDeckbuildingStep(l);break}case fe.MASTERY_TREE_STEP:{const{step:o}=t;s.masteryTreeController.handleMasteryTreeStep(o);break}case fe.NEXT_BATTLE:{const o=e.roomMember;if(o===void 0){this.sendErr(e,{errCode:K.NO_ROOM});return}const{room:l}=o;for(const i of l.members.values())i.conn.spectateTeamId===void 0&&this.sendResp(i.conn,{type:Te.NEXT_BATTLE,roomId:l.roomId});break}case fe.SELECT_PUZZLE:{const{hostPuzName:o,selectedPuzName:l}=t;if(!s.isValidBattle(o)||!s.isValidBattle(l)){this.sendErr(e,{errCode:K.INVALID_PUZZLE});return}const i=s.getBattleController(o).selectPuzzle(l);i!==null&&this.sendErr(e,i);break}case fe.SELECT_DECK_FOR_BATTLE:{const{puzName:o,slot:l}=t;if(!s.isValidBattle(o)){this.sendErr(e,{errCode:K.INVALID_PUZZLE});return}if(!this.isValidDeckSlot(l)){this.sendErr(e,{errCode:K.DECK_SLOT_OUT_OF_BOUNDS});return}const i=s.getBattleController(o).selectDeck(l);i!==null&&this.sendErr(e,i);break}case fe.START_AI_BATTLE:{const{puzName:o,slot:l,restart:i,reuseDeck:u,devKnobs:c}=t;if(!s.isValidBattle(o)){this.sendErr(e,{errCode:K.INVALID_PUZZLE});return}if(l!==void 0&&!this.isValidDeckSlot(l)){this.sendErr(e,{errCode:K.DECK_SLOT_OUT_OF_BOUNDS});return}s.startAIBattle(e,o,l,i,u,e.isAdmin?c:void 0);break}case fe.RESTORE_CHECKPOINT:{const{puzName:o,slot:l}=t;if(!s.isValidBattle(o)){this.sendErr(e,{errCode:K.INVALID_PUZZLE});return}if(!this.isValidDeckSlot(l)){this.sendErr(e,{errCode:K.DECK_SLOT_OUT_OF_BOUNDS});return}s.getBattleController(o).restoreCheckpoint(e,l);break}case fe.RESIGN:{const{player:o,puzName:l}=t;if(!s.isValidBattle(l)){this.sendErr(e,{errCode:K.INVALID_PUZZLE});return}const i=s.getBattleController(l).resign();i!==null&&this.sendErr(e,i);break}case fe.PVP_CLAIM_TIME_VICTORY:{const o=s.pvpController.claimTimeVictory();o!==null&&this.sendErr(e,o);break}case fe.PVP_UNLOCK_DECK:{const o=s.pvpController.handleUnlockDeck(e);o!==null&&this.sendErr(e,o);break}case fe.PVP_MAKE_REQUEST:{const{targetTeamId:o,autoAccept:l}=t;if(l!==void 0&&!this.checkIsAdmin(e))break;const i=s.pvpController.handleMakePvPRequest(o,l);i!==null&&this.sendErr(e,i);break}case fe.PVP_CANCEL_REQUEST:{const{targetTeamId:o}=t,l=s.pvpController.handleCancelPvPRequest(e,o);l!==null&&this.sendErr(e,l);break}case fe.PVP_ACCEPT_REQUEST:{const{targetTeamId:o,devKnobs:l}=t,i=s.pvpController.acceptPvPRequest(o,e.isAdmin?l:void 0);i!==null&&this.sendErr(e,i);break}case fe.PVP_SET_IS_BLOCKED:{const{targetTeamId:o,isBlocked:l}=t,i=s.pvpController.setIsTeamBlocked(e,o,l);i!==null&&this.sendErr(e,i);break}case fe.PVP_ENTER_RING:{const o=s.pvpController.enterRing();o!==null&&this.sendErr(e,o);break}case fe.PVP_LEAVE_RING:{s.pvpController.leaveRing();break}case fe.VIEW_PUZZLE:{const{puzName:o}=t;if(!this.isValidPuzzle(s,o)){this.sendErr(e,{errCode:K.INVALID_PUZZLE});return}s.viewPuzzle(e,o);break}case fe.SUBMIT_ANSWER:{const{teamId:o,puzName:l,answer:i}=t,u=this.getTeamController(o);if(u.teamId!==o&&!e.isAdmin){this.sendErr(e,{errCode:K.PERMISSION_DENIED});return}if(!u.isValidFishPuzzle(l)){this.sendErr(e,{errCode:K.INVALID_PUZZLE});break}await u.getFishPuzzleController(l).handleSubmitAnswerAsync(e,i);break}case fe.MYOSB_REQUEST:{const{teamId:o,components:l}=t,i=this.getTeamController(o);if(i.teamId!==o&&!e.isAdmin){this.sendErr(e,{errCode:K.PERMISSION_DENIED});return}if(!i.isValidFishPuzzle(Os)){this.sendErr(e,{errCode:K.INVALID_PUZZLE});break}await i.getFishPuzzleController(Os).handleMyosbRequest(e,l);break}case fe.ADMIN_MODIFY:{if(!this.checkIsAdmin(e))break;for(const[o,l]of Object.entries(t.teams??{}))await this.getTeamController(o).adminModifyTeamAsync(l);t.config!==void 0&&Object.assign(this.config,t.config);break}case fe.SUBSCRIBE_TO_UPDATES:{this.subscribeToUpdates(e,t.scope);break}}}useUpdatesContext(e,t){var s;if(e.multicaster.updates.length!==0)throw new Error("updates leakage from a previous step or async event");try{t()}catch(a){const{gameState:n}=e.engine;throw console.error(`Error in room ${e.roomId} (team ${((s=n[f.P1].teamData)==null?void 0:s.teamId)??"unknown"}, puzzle ${n.puzName})`),a}finally{this.broadcastUpdates(e)}}handleStep(e,t,s){this.useUpdatesContext(t,()=>{t.engine.applyStep(e,s)})}sendSystemStep(e,t){this.useUpdatesContext(e,()=>{e.engine.applySystemStep(t)})}handleSystemUpdate(e,t){switch(t.type){case W.SYSTEM_ROOM_COMPLETE:{const{solvedTeamIds:s,cardUnlocks:a}=t;this.gameRoomsController.handleRoomCompleteAsync(e,s,a);break}}}broadcastUpdates(e){const t=e.multicaster.readOutUpdates();if(t.length!==0){for(const[s,a]of e.members){const n=[];for(const o of t){const{upd:l}=o;if(l.type===W.SYSTEM_ENABLE_MEMBER){a.enabled=!0;continue}a.enabled&&(()=>{switch(o.type){case Ct.SYSTEM:return!1;case Ct.ROOM_MEMBER_ID:return s===o.roomMemberId;case Ct.BROADCAST:return!0;case Ct.ROLE:return a.role===o.role;case Ct.ROLE_FILTER:return o.pred(a.role)}})()&&n.push(l)}n.length>0&&this.sendResp(a.conn,{type:Te.UPDATES,updates:n})}for(const s of t)s.type===Ct.SYSTEM&&this.handleSystemUpdate(e,s.upd)}}respGlobalUpdate(e,t){this.sendResp(e,{type:Te.GLOBAL_UPDATE,upd:t})}broadcastGlobalUpdate(e,t){const s=this.getSubscriptions(e),a={type:Te.GLOBAL_UPDATE,upd:t};this.sendRespMultiple(s.values(),a)}broadcastAdminGlobalUpdate(e){return this.broadcastGlobalUpdate({type:J.SERVER},e)}broadcastServerHealthGlobalUpdate(e){return this.broadcastGlobalUpdate({type:J.SERVER_HEALTH},e)}handleTeamSummaryUpdate(e,t){this.teamListStateTracker.updateTeam(e,t)}handleTeamListAddTeam(e){const s=this.getTeamController(e).getTeamSummaryState();this.teamListStateTracker.addTeam(e,s),this.broadcastTeamListGlobalUpdate({type:$.TEAM_LIST_UPDATE_STATE,addTeams:{[e]:s}})}handleTeamListRemoveTeam(e){this.teamListStateTracker.removeTeam(e),this.broadcastTeamListGlobalUpdate({type:$.TEAM_LIST_UPDATE_STATE,removeTeams:{[e]:!0}})}broadcastTeamListGlobalUpdate(e){return this.broadcastGlobalUpdate({type:J.TEAM_LIST},e)}broadcastAndCommitTeamSummaryUpdates(){const{pendingUpds:e}=this.teamListStateTracker;Object.keys(e).length<=0||(this.broadcastTeamListGlobalUpdate({type:$.TEAM_LIST_UPDATE_STATE,updTeams:e}),this.statsController.handleTeamSummaryUpdates(e),this.teamListStateTracker.commitUpds())}broadcastBigBoardGlobalUpdate(e){return this.broadcastGlobalUpdate({type:J.BIG_BOARD},e)}broadcastRespToTeam(e,t){const s=this.teamConns.get(e);s!==void 0&&this.sendRespMultiple(s.values(),t)}broadcastNotifToTeam(e,t){this.broadcastRespToTeam(e,{type:Te.NOTIFICATION,notif:t})}processFastSyncQueue(){for(;this.syncThrottle.numSyncsInFlight<this.config.syncThrottleParallelism;){const e=this.syncThrottle.queue.shift();if(e===void 0)break;this.syncThrottle.numSyncsInFlight++,e()}}async waitSyncThrottleAsync(){await new Promise((e,t)=>{this.syncThrottle.queue.push(e),this.processFastSyncQueue()})}signalSyncThrotleAsync(){this.syncThrottle.numSyncsInFlight--,this.processFastSyncQueue()}async runWithSyncThrottleAsync(e){let t=!1;try{return await this.waitSyncThrottleAsync(),t=!0,await e()}finally{t&&this.signalSyncThrotleAsync()}}async syncDataThrottledAsync(e){return await this.runWithSyncThrottleAsync(async()=>await this.backend.syncData(e))}async triggerSlowSyncDownloadAsync(){var l,i;if(this.slowSyncTracking.isDownloadInFlight)return;const e=this.statsController.startSync(),t={factionHistory:e,notifsStartIndex:this.slowSyncTracking.notifsNextIndex};this.slowSyncTracking.isDownloadInFlight=!0;const s=await(async()=>{try{return await this.syncDataThrottledAsync(t)}catch(u){console.error(u)}finally{this.slowSyncTracking.isDownloadInFlight=!1}})();if(s===void 0)return;const{notifs:a,notifsNextIndex:n}=s;this.statsController.endSync(e),n!==void 0&&(this.slowSyncTracking.notifsNextIndex=n);for(const u of a??[])try{switch(u.type){case ls.HINT_ANSWERED:{const{teamId:c,puzName:d}=u;this.broadcastNotifToTeam(c,{type:Mt.HINT_ANSWERED,puzName:d});break}case ls.TEAM_MEMBERS:{const{teamId:c,members:d}=u;(l=this.teamControllers.get(c))==null||l.handleSetMembers(d);break}case ls.ERRATUM:{const{erratumId:c,puzzle:d,published:g}=u,w=g&&!((i=this.errata[c])!=null&&i.published);this.errata[c]=u;for(const[y,A]of this.teamControllers){w&&(!d||A.unlockTimes.has(d))&&this.broadcastNotifToTeam(y,{type:Mt.ERRATUM});for(const[S,O]of A.battleControllers)O.broadcastErrataGlobalUpdate({})}break}}}catch(c){console.error(c)}s.unclaimedHints!==void 0&&s.unclaimedHints!==this.unclaimedHints&&(this.unclaimedHints=s.unclaimedHints,this.broadcastAdminGlobalUpdate({type:$.SERVER_UNCLAIMED_HINTS,unclaimedHints:s.unclaimedHints}));const{teams:o}=s;for(const[u,c]of Object.entries(o??{}))try{const d=this.teamControllers.get(u);if(d===void 0)continue;const{hintsTotal:g,hintsUsed:w}=c;(d.backendOwned.hintsTotal!==g||d.backendOwned.hintsUsed.length!==w.length)&&(d.backendOwned=c,d.broadcastTeamGlobalUpdate({type:$.TEAM_UPDATE_STATE,hintsInfo:{numHintsTotal:g,numHintsUsed:w.length}}));const y=d.getHintsUsedMap();this.bigBoardStateTracker.updateTeam(u,{numHintsTotal:g,unlocks:Object.fromEntries(Object.entries(y).map(([S,O])=>[S,{numHintsUsed:O}]))});const{extraGuesses:A}=c;for(const[S,O]of Object.entries(A??{})){const k=d.getFishPuzzleController(S);k.numExtraGuesses!==O&&(k.numExtraGuesses=O,k.handleUpdateNumGuessesRemaining())}}catch(d){console.error(d)}for(const u of this.teamControllers.values())try{const c=o?o[u.teamId]:void 0,d=c?c.extraGuesses:{};for(const g of u.fishPuzzleControllers.values()){const w=d[g.puzName]??0;g.numExtraGuesses!==w&&(g.numExtraGuesses=w,g.handleUpdateNumGuessesRemaining())}}catch(c){console.error(c)}}async triggerSlowSyncUpload(){await this.gameRoomsController.triggerSlowSyncAsync(),await this.slowSyncTracking.decksAndMasteryTreesSyncController.syncLoopController.triggerLoopAsync(),await this.slowSyncTracking.checkpointsSyncController.syncLoopController.triggerLoopAsync(),await this.slowSyncTracking.miscTeamStateSyncController.syncLoopController.triggerLoopAsync()}async runPeriodicSyncTasks(){for(const[e,t]of this.teamControllers)try{await t.fastSyncTracking.syncLoopController.triggerLoopAsync()}catch(s){console.error(s)}try{await this.triggerSlowSyncUpload()}catch(e){console.error(e)}try{await this.triggerSlowSyncDownloadAsync()}catch(e){console.error(e)}}runPeriodicTasks(){(async()=>{var e,t,s,a,n,o;if(!this.isReady){await this.tryInitAsync();return}try{const l=Date.now(),{lastDumpTime:i,lastUserTime:u,lastSystemTime:c}=this.metricsDumpTracking;if(l>i+(this.opts.metricsDumpInterval??30*1e3)){const{user:d,system:g}=((t=(e=this.opts).getCpuUsage)==null?void 0:t.call(e))??{user:0,system:0},w=(d-u)/1e3/(l-i),y=(g-c)/1e3/(l-i);this.metricsDumpTracking={lastDumpTime:l,lastUserTime:d,lastSystemTime:g,userTimeUsage:w,systemTimeUsage:y},(a=(s=this.opts).logMetrics)==null||a.call(s,`[${l}] Metrics: ${JSON.stringify([0,this.fastSyncMetrics.getSummary().totNumEvents,this.slowSyncMetrics.getSummary().totNumEvents,this.checkAnswerMetrics.getSummary().totNumEvents,this.numAuthsMetrics.getSummary().totNumEvents,this.numRequestsMetrics.getSummary().totNumEvents,this.syncThrottle.queue.length,this.numActivePeriodicTasksHandlers,this.numPendingSubmissionTasks,this.gameRoomsController.slowSyncTracking.completedRoomsSyncController.roomsToSync.length,this.queuedTeamInits.size,d,g])}`)}}catch(l){console.error(l)}this.numActivePeriodicTasksHandlers++;try{this.cursorEventsMetrics.prevNumEvents>0&&((o=(n=this.opts).logCursorsMetrics)==null||o.call(n,`[${new Date().toLocaleString()}] Cursor events: ${this.cursorEventsMetrics.getSummaryString()}`))}catch(l){console.error(l)}if(!(this.opts.cursorsMode??!1)){try{this.broadcastServerHealthGlobalUpdate({type:$.SERVER_HEALTH_UPDATE_STATE,slowSyncMetrics:this.slowSyncMetrics.getSummary(),fastSyncMetrics:this.fastSyncMetrics.getSummary(),checkAnswerMetrics:this.checkAnswerMetrics.getSummary(),numAuthsMetrics:this.numAuthsMetrics.getSummary(),numRequestsMetrics:this.numRequestsMetrics.getSummary(),...this.teamMetricsTracker.getAndCommitUpds(),fastSyncQueueLength:this.syncThrottle.queue.length,numActivePeriodicTasksHandlers:this.numActivePeriodicTasksHandlers,numPendingSubmissionTasks:this.numPendingSubmissionTasks,numCompletedRoomsToSync:this.gameRoomsController.slowSyncTracking.completedRoomsSyncController.roomsToSync.length,teamInitQueueLength:this.queuedTeamInits.size,numActiveConns:this.numActiveConns,userTimeUsage:this.metricsDumpTracking.userTimeUsage,systemTimeUsage:this.metricsDumpTracking.systemTimeUsage,dirtyStateUpd:this.dirtyStateTracker.pendingDirtyStateUpd}),this.dirtyStateTracker.commitUpds()}catch(l){console.error(l)}try{this.broadcastAndCommitTeamSummaryUpdates()}catch(l){console.error(l)}try{const{pendingUpds:l}=this.bigBoardStateTracker;Object.keys(l).length>0&&(this.broadcastBigBoardGlobalUpdate({type:$.BIG_BOARD_UPDATE_STATE,updTeams:l}),this.bigBoardStateTracker.commitUpds())}catch(l){console.error(l)}await this.runPeriodicSyncTasks();try{for(const l of this.teamControllers.values())l.pvpController.unlockDeckIfUnneeded()}catch(l){console.error(l)}}this.numActivePeriodicTasksHandlers--})()}recordSlowSyncPacket(){this.slowSyncMetrics.record()}}const Ho=72,Pt="postsolver",np="BAREBONES_TEST_TEAM",op=20,Fo=r=>[...r.normalize("NFKD")].flatMap(e=>e.match(/[a-z]/i)?[e.toUpperCase()]:[]).join(""),Oa=(r,e,t,s)=>{var o;const a={},n=new Set(Object.keys(r));for(const[l,i]of Object.entries(r))if($s(l,n,r)&&!(((o=Kt[l])==null?void 0:o.isLegendary)??!1)){if(Object.keys(a).length>=30)break;a[l]=1}return{teamId:e,slot:t,deck:{displayName:s,cards:{...a}}}},lp=r=>[Oa(r,Pt,0,"Default deck"),Oa(r,Pt,1,"Default opponent deck"),{teamId:Pt,slot:2,deck:{displayName:"Test deck",cards:{"two-bees":1,"switch-boar-d":2}}}],ip=(r,e,t,s,a)=>{const n=new Date().getTime(),o=a&&s?{[un]:[os(Pt,un,new Date().getTime())]}:{},l=a&&s?lp(e):[],i=g=>s?Object.fromEntries([...r.battleGroups.keys()].filter(y=>{if(a)return!0;const A=r.puzzles.get(y);if(A===void 0)throw new Error(`could not find puz data entry for battle group ${y}`);const{isFullPuzzle:S,isCutscene:O}=A;return!!(S||O||[ot,Ot].includes(y))}).map(y=>[y,{teamId:g,puzName:y,timestamp:n}])):{},u={};for(const[g,w]of Object.entries(e))s&&w.cardUnlockGroupId!==null&&(!a&&["master-bramble","kero--floppy","professor-galactic","stalactica","test-card"].includes(g)||(u[g]={teamId:Pt,puzName:null,cardName:g,timestamp:n}));const c=Ca(),d={[Pt]:{displayName:"Postsolver",isInactive:!1,isHidden:!1,faction:null,factionScoreContributions:{...c},answerSubmissions:o,viewTimes:{},unlocks:i(Pt),cardUnlocks:u,decks:l,masteryTree:{placements:{},connectedAnswers:[],masteriesListOverride:a&&s?Object.keys(t):void 0},preferredDecks:{},puzzleSelections:{},checkpoints:{},blockedTeams:{},isInRing:!1}};if(a){d[np]={displayName:"barebones team",isInactive:!1,isHidden:!1,faction:null,factionScoreContributions:{...c},answerSubmissions:{},viewTimes:{},unlocks:{},cardUnlocks:{},decks:[],masteryTree:null,preferredDecks:{},puzzleSelections:{},checkpoints:{},blockedTeams:{},isInRing:!1};for(let g=0;g<30;g++){const w=`solver${g}`;d[w]={displayName:`pvp test team ${g}`,isInactive:!1,isHidden:!1,faction:null,factionScoreContributions:{...c},answerSubmissions:{},viewTimes:{},unlocks:i(w),cardUnlocks:{},decks:[Oa(e,w,0,"Default deck")],masteryTree:{placements:{},connectedAnswers:[],masteriesListOverride:Object.keys(t)},preferredDecks:{[ot]:0},puzzleSelections:{},checkpoints:{},blockedTeams:{},isInRing:!1}}}return{version:Ho,nextGameServerId:0,teams:d,rooms:{},notifs:[]}};class up{constructor(e,t,s,a,n,o){p(this,"puzzlesDB");p(this,"saveDbFunc");p(this,"nextRoomUid");p(this,"db");p(this,"isDirty");p(this,"isSaving");this.puzzlesDB=e,this.saveDbFunc=n,this.nextRoomUid=0,this.db=a===null||a.version<Ho?ip(e,t,s,o??!1,!1):a,this.isDirty=!1,this.isSaving=!1}genGameServerId(){const e=`gameServer_${this.db.nextGameServerId}`;return this.db.nextGameServerId++,this.isDirty=!0,e}async getInitData(){return{gameServerId:this.genGameServerId(),teams:Object.fromEntries(await Promise.all(Object.keys(this.db.teams).map(e=>(async()=>[e,await this.getInitTeamData(e)])()))),factionHistory:{},maxGuessesPerPuzzle:op,huntStartTime:new Date(2023,5,1).getTime(),huntEndTime:new Date(2023,12,1).getTime(),notifsNextIndex:this.db.notifs.length,errata:{},unclaimedHints:0}}async getInitTeamData(e){this.db.teams[e]===void 0&&(console.log(`creating new team ${e}`),this.db.teams[e]={displayName:e,isInactive:!1,isHidden:!1,faction:null,factionScoreContributions:Ca(),answerSubmissions:{},viewTimes:{},unlocks:{},cardUnlocks:{},decks:[],masteryTree:null,preferredDecks:{},puzzleSelections:{},checkpoints:{},blockedTeams:{},isInRing:!1});const{displayName:s,isInactive:a,isHidden:n,faction:o,factionScoreContributions:l,answerSubmissions:i,viewTimes:u,unlocks:c,cardUnlocks:d,decks:g,masteryTree:w,preferredDecks:y,puzzleSelections:A,checkpoints:S,blockedTeams:O,isInRing:k}=this.db.teams[e],P={};for(const[F,j]of Object.entries(i)){const V=j.filter(({isCorrect:ae})=>!ae).length;V>0&&(P[F]=V)}const N={},U={};for(const[F,j]of Object.entries(this.db.rooms)){const{puzName:V,hostPuzName:ae,gameEndInfo:ie,p1TeamId:oe,p2TeamId:Pe}=j;if(!(oe!==void 0&&j.p1TeamId===e||Pe!==void 0&&j.p2TeamId===e)||(U[ae]=j,ie===void 0))continue;const{isSolved:Qe,totalTime:at}=ie;ie.isSolved&&(N[V]===void 0||at<N[V])&&(N[V]=at)}const Q=Object.fromEntries(Object.entries(i).flatMap(([F,j])=>{const V=j.filter(({isCorrect:ae})=>ae);return V.length===0?[]:[[F,V[0].timestamp]]}));return{userId:e,displayName:s,isInactive:a,isHidden:n,faction:o,factionScoreContributions:l,members:[],rooms:U,views:Object.keys(u),cardUnlocks:Object.fromEntries(Object.values(d).map(({cardName:F,puzName:j})=>[F,j])),unlockTimes:Object.fromEntries(Object.values(c).map(({puzName:F,timestamp:j})=>[F,j])),solveTimes:Q,speedrunTimes:N,numWrongGuesses:P,decks:g,masteryTree:w,preferredDecks:y,puzzleSelections:A,checkpoints:S,blockedTeams:O,isInRing:k,backendOwned:{hintsTotal:0,hintsUsed:[],extraGuesses:{}}}}getTeamData(e){if(this.db.teams[e]===void 0)throw new Error(`unknown team ${e}`);return this.db.teams[e]}async syncData(e){var a;const{rooms:t,teamState:s}=e;for(const[n,o]of Object.entries(s??{})){const{isInactive:l,isHidden:i,displayName:u,faction:c,factionScoreContributions:d,decks:g,masteryTree:w,answerSubmissions:y,unlocks:A,cardUnlocks:S,viewTimes:O,preferredDecks:k,puzzleSelections:P,checkpoints:N,blockedTeams:U,isInRing:Q}=o,F=this.getTeamData(n);l!==void 0&&(F.isInactive=l,this.isDirty=!0),i!==void 0&&(F.isHidden=i,this.isDirty=!0),u!==void 0&&(F.displayName=u,this.isDirty=!0),c!==void 0&&(F.faction=c,this.isDirty=!0);for(const[j,V]of Object.entries(d??{})){const ae=j;F.factionScoreContributions[ae]=V}for(const j of Object.values(g??{})){const{slot:V}=j,ae=F.decks,ie=ae.findIndex(({slot:oe})=>oe===V);ie===-1?ae.push(j):ae[ie]=j,this.isDirty=!0}w!==void 0&&(F.masteryTree=w,this.isDirty=!0);for(const[j,V]of Object.entries(y??{})){if(V===null)F.answerSubmissions[j]=F.answerSubmissions[j].filter(ae=>!ae.isCorrect);else{(a=F.answerSubmissions)[j]??(a[j]=[]);for(const ae of Object.values(V))F.answerSubmissions[j].push(ae)}this.isDirty=!0}for(const[j,V]of Object.entries(A??{}))V===null?delete F.unlocks[j]:F.unlocks[j]=V,this.isDirty=!0;for(const[j,V]of Object.entries(S??{}))V===null?delete F.cardUnlocks[j]:F.cardUnlocks[j]=V,this.isDirty=!0;for(const[j,V]of Object.entries(O??{}))F.viewTimes[j]=V,this.isDirty=!0;for(const[j,V]of Object.entries(k??{}))F.preferredDecks[j]=V,this.isDirty=!0;for(const[j,V]of Object.entries(P??{}))V===null?delete F.puzzleSelections[j]:F.puzzleSelections[j]=V,this.isDirty=!0;for(const[j,V]of Object.entries(N??{}))F.checkpoints[j]=V,this.isDirty=!0;for(const[j,V]of Object.entries(U??{}))V?F.blockedTeams[j]=!0:delete F.blockedTeams[j],this.isDirty=!0;Q!==void 0&&(F.isInRing=Q,this.isDirty=!0)}for(const[n,o]of Object.entries(t??{}))this.db.rooms[n]={...this.db.rooms[n]??{},...o},this.isDirty=!0;return this.isDirty&&!this.isSaving&&(this.isDirty=!1,this.isSaving=!0,await this.saveDbFunc(this.db).finally(()=>{this.isSaving=!1})),{}}async checkAnswer(e){const{teamId:t,puzName:s,answer:a}=e,n=this.puzzlesDB.puzzles.get(s);if(n===void 0)throw new Error(`unknown puzName ${s}`);if(n.answer===null)throw new Error(`no answer exists for ${s}`);const o=Fo(a),l=o===Fo(n.answer);return s==="animal_shelter"&&o==="RESIDENCE"?{type:br.PUZZLE_MESSAGES,messages:["Almost! Check your last letter."]}:s==="mastery_tree"&&o==="CAPTAINPI"?{type:br.PUZZLE_MESSAGES,messages:["Almost!"]}:{type:br.SUCCESS,submittedAnswer:o,isCorrect:l}}}class cp{verify(e){return JSON.parse(e)}}const Yo="__game_mockdb";let xr,Ua=!1;const jo=async(r,e)=>{if(e??(e=!1),xr===void 0||e&&!Ua){ar.config({driver:ar.INDEXEDDB}),e&&(Ua=!0,await ar.clear());const t=xr,s=new ui(hl),a=di(gl),n=hi(El);xr=new ap(s,a,n,wl,{backend:new up(s,a,n,await ar.getItem(Yo),async o=>{await ar.setItem(Yo,o)},!e),dumpWsMessages:!1,dumpBackendRequests:r.dumpBackendRequests??!1,periodicSyncInterval:200,authInterface:new cp,parseWSReq:o=>!0}),await xr.initAsync(),t!==void 0&&t.teardown(),e&&(Ua=!1)}return xr};class dp{constructor(e){p(this,"port");p(this,"handleMsg");p(this,"removeClient");this.port=e}init(){this.port.onmessage=e=>{this.handlePortMsg(e).catch(t=>console.error)},this.port.start()}async handleInit(e,t,s){if(s??!1){await jo(e,!0);return}const n=(await jo(e)).addClient({send:o=>{this.port.postMessage({type:Be.RESP,msg:o})},close:()=>{this.port.postMessage({type:Be.CLOSE})}},t);this.handleMsg=n.handleMsg,this.removeClient=n.removeClient,this.port.postMessage({type:Be.INIT_ACK})}async handlePortMsg({data:e}){var t,s;switch(e.type){case We.INIT:{await this.handleInit(e.mockServerOpts,e.connUid,e.resetServer);break}case We.HANDLE_MSG:{(t=this.handleMsg)==null||t.call(this,e.msg);break}case We.REMOVE_CLIENT:{(s=this.removeClient)==null||s.call(this);break}}}}onconnect=r=>{new dp(r.ports[0]).init()}})();
//# sourceMappingURL=sharedWorkerServer-81430ea6.js.map
