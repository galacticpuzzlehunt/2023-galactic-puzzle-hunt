{"version":3,"file":"sharedWorkerServer-81430ea6.js","sources":["../../interactive/src/game-server/server-interface/SharedWorkerInterface.ts","../node_modules/localforage/dist/localforage.js","../../interactive/src/engine/puzzles/all-puzzles.json?raw","../../interactive/src/engine/puzzles/all-puzzles-client.ts","../../interactive/src/engine/cards/all-cards.json?raw","../../interactive/src/engine/cards/all-cards-client.ts","../../interactive/src/engine/puzzles/all-masteries.json?raw","../../interactive/src/engine/puzzles/all-masteries-client.ts","../../interactive/src/engine/puzzles/all-keyframes.json?raw","../../interactive/src/engine/puzzles/all-keyframes-client.ts","../../interactive/node_modules/csv-parse/dist/esm/sync.js","../../interactive/src/engine/puzzles/puzzle-data.ts","../../interactive/src/engine/cards/CardsDB.ts","../../interactive/src/engine/puzzles/mastery-data.ts","../../interactive/node_modules/zod/lib/index.mjs","../../interactive/src/game-server/ws.ts","../../interactive/src/game-server/notifications.ts","../../interactive/src/engine/types/decks.ts","../../interactive/src/game-server/masteries.ts","../../interactive/src/game-server/monitoring.ts","../../interactive/src/game-server/global-updates.ts","../../interactive/src/engine/types/game-state.ts","../../interactive/src/engine/types/card-data.ts","../../interactive/src/engine/types/effects.ts","../../interactive/src/engine/types/steps.ts","../../interactive/src/engine/types/updates.ts","../../interactive/src/game-server/backend-interface/BackendInterfaceController.ts","../../interactive/src/game-server/backend-interface/BackendInterface.ts","../../interactive/src/game-server/backend-interface/backend-sync.ts","../../interactive/src/game-server/server-controllers/battle-controller.ts","../../interactive/src/game-server/server-controllers/pvp-controller.ts","../../interactive/src/engine/types/action-validation.ts","../../interactive/src/engine/types/counters.ts","../../interactive/src/engine/cards/card-effects-shared.ts","../../interactive/src/game-server/deckbuilding.ts","../../interactive/src/game-server/server-controllers/team-aux-controller.ts","../../interactive/src/game-server/server-controllers/team-controller.ts","../../interactive/src/engine/types/keyframes.ts","../../interactive/src/engine/StepMaker.ts","../../interactive/src/engine/server-hooks.ts","../../interactive/src/engine/game-specs/puzzle-51-shared.ts","../../interactive/src/engine/cards/card-effects.ts","../../interactive/src/engine/game-specs/common-shared.ts","../../interactive/src/engine/game-specs/robot-shared.ts","../../interactive/src/engine/game-specs/tutorial1-shared.ts","../../interactive/src/engine/game-specs/tutorial2-shared.ts","../../interactive/src/engine/game-specs/tutorial3-shared.ts","../../interactive/src/engine/game-specs/tutorial4-shared.ts","../../interactive/src/engine/game-specs/tutorial5-shared.ts","../../interactive/src/engine/game-specs/tutorial6-shared.ts","../../interactive/src/engine/game-specs/puzzle-4-shared.ts","../../interactive/src/engine/game-specs/puzzle-8-shared.ts","../../interactive/src/engine/game-specs/puzzle-9-shared.ts","../../interactive/src/engine/game-specs/puzzle-22-data.ts","../../interactive/src/engine/game-specs/puzzle-22-shared.ts","../../interactive/src/engine/game-specs/puzzle-28-shared.ts","../../interactive/src/engine/game-specs/puzzle-31-shared.ts","../../interactive/src/engine/game-specs/puzzle-44-shared.ts","../../interactive/src/engine/game-specs/puzzle-46-shared.ts","../../interactive/src/engine/game-specs/puzzle-50-shared.ts","../../interactive/src/engine/game-specs/puzzle-53-shared.ts","../../interactive/src/engine/game-specs/puzzle-76-shared.ts","../../interactive/src/engine/game-specs/puzzle-80-shared.ts","../../interactive/src/engine/game-specs/puzzle-82-shared.ts","../../interactive/src/engine/game-specs/puzzle-90-shared.ts","../../interactive/src/engine/game-specs/puzzle-93.ts","../../interactive/src/engine/game-specs/puzzle-93-shared.ts","../../interactive/src/engine/game-specs/puzzle-98-shared.ts","../../interactive/src/engine/game-specs/puzzle-101-shared.ts","../../interactive/src/engine/game-specs/puzzle-109-shared.ts","../../interactive/src/engine/game-specs/cutscene-shared.ts","../../interactive/src/engine/all-shared-game-specs.ts","../../interactive/src/engine/game-specs/common.ts","../../interactive/src/engine/game-specs/radlands.ts","../../interactive/src/engine/game-specs/robot.ts","../../interactive/src/engine/game-specs/tutorial1.ts","../../interactive/src/engine/game-specs/tutorial2.ts","../../interactive/src/engine/game-specs/tutorial3.ts","../../interactive/src/engine/game-specs/tutorial4.ts","../../interactive/src/engine/game-specs/tutorial5.ts","../../interactive/src/engine/game-specs/tutorial6.ts","../../interactive/src/engine/game-specs/puzzle-4.ts","../../interactive/src/engine/game-specs/puzzle-8.ts","../../interactive/src/engine/game-specs/puzzle-9.ts","../../interactive/src/engine/game-specs/puzzle-22-logic.ts","../../interactive/src/engine/game-specs/puzzle-22.ts","../../interactive/src/engine/game-specs/puzzle-28-SPOILERS-data.ts","../../interactive/src/engine/game-specs/puzzle-28.ts","../../interactive/src/engine/game-specs/puzzle-31.ts","../../interactive/src/engine/game-specs/puzzle-44.ts","../../interactive/src/engine/game-specs/puzzle-46.ts","../../interactive/src/engine/game-specs/puzzle-50-common.ts","../../interactive/src/engine/game-specs/puzzle-50-data/canalview.ts","../../interactive/src/engine/game-specs/puzzle-50-data/cave.ts","../../interactive/src/engine/game-specs/puzzle-50-data/kurodoko.ts","../../interactive/src/engine/game-specs/puzzle-50-data/kurotto.ts","../../interactive/src/engine/game-specs/puzzle-50-data/lightandshadow.ts","../../interactive/src/engine/game-specs/puzzle-50-data/minesweeper.ts","../../interactive/src/engine/game-specs/puzzle-50-data/mochikoro.ts","../../interactive/src/engine/game-specs/puzzle-50-data/nurikabe.ts","../../interactive/src/engine/game-specs/puzzle-50-data/slitherlink.ts","../../interactive/src/engine/game-specs/puzzle-50-data/snake.ts","../../interactive/src/engine/game-specs/puzzle-50-data/tasquare.ts","../../interactive/src/engine/game-specs/puzzle-50-data/yinyang.ts","../../interactive/src/engine/game-specs/puzzle-50-data/neighbors.ts","../../interactive/src/engine/game-specs/puzzle-50-data/rowcolumn.ts","../../interactive/src/engine/game-specs/puzzle-50-data/visions.ts","../../interactive/src/engine/game-specs/puzzle-50-data/areas.ts","../../interactive/src/engine/game-specs/puzzle-50-data/single.ts","../../interactive/src/engine/game-specs/puzzle-50-data/ones.ts","../../interactive/src/engine/game-specs/puzzle-50-data/rectangles.ts","../../interactive/src/engine/game-specs/puzzle-50-data/squares.ts","../../interactive/src/engine/game-specs/puzzle-50-data/twosnakes.ts","../../interactive/src/engine/game-specs/puzzle-50-data/touchingpaths.ts","../../interactive/src/engine/game-specs/puzzle-50-data/connectedvision.ts","../../interactive/src/engine/game-specs/puzzle-50-data/rectangleareas.ts","../../interactive/src/engine/game-specs/puzzle-50-data/final.ts","../../interactive/src/engine/game-specs/puzzle-50.ts","../../interactive/src/engine/game-specs/puzzle-51-server-data.ts","../../interactive/src/engine/game-specs/puzzle-51.ts","../../interactive/src/engine/game-specs/puzzle-76.ts","../../interactive/src/engine/game-specs/puzzle-80.ts","../../interactive/src/engine/game-specs/puzzle-82.ts","../../interactive/src/engine/game-specs/puzzle-90.ts","../../interactive/src/engine/game-specs/puzzle-98-ramp.ts","../../interactive/src/engine/game-specs/puzzle-98-shadow.ts","../../interactive/src/engine/game-specs/puzzle-98-splitter.ts","../../interactive/src/engine/game-specs/puzzle-98-yinyang.ts","../../interactive/src/engine/game-specs/puzzle-98-vulture.ts","../../interactive/src/engine/game-specs/puzzle-53.ts","../../interactive/src/engine/game-specs/puzzle-101.ts","../../interactive/src/engine/game-specs/puzzle-109.ts","../../interactive/src/engine/game-specs/test-battle.ts","../../interactive/src/engine/all-game-specs.ts","../../interactive/src/engine/types/factions.ts","../../interactive/src/engine/PermanentQuery.ts","../../interactive/src/engine/Inspector.ts","../../interactive/src/engine/Reducer.ts","../../interactive/src/engine/Controller.ts","../../interactive/src/engine/Engine.ts","../../interactive/src/game-server/UpdatesMulticaster.ts","../../interactive/src/game-server/sync-controllers.ts","../../interactive/src/game-server/server-controllers/rooms-controller.ts","../../interactive/src/game-server/server-controllers/stats-controller.ts","../../interactive/src/engine/types/presence.ts","../../interactive/src/game-server/server-controllers/cursors-controller.ts","../../interactive/src/game-server/manual-validation.ts","../../interactive/src/game-server/GameServer.ts","../../interactive/src/game-server/backend-interface/MockBackendInterface.ts","../../interactive/src/game-server/authentication-interface/MockAuthenticationInterface.ts","../src/makeMockServer.ts","../src/sharedWorkerServer.ts"],"sourcesContent":["import {\n  ServerInterface,\n  ServerInterfaceCallbacks,\n} from \"game-server/server-interface/ServerInterface\";\nimport { MockServerOpts } from \"makeMockServer\";\n\nexport enum SharedWorkerReqType {\n  INIT = \"init\",\n  HANDLE_MSG = \"handle_msg\",\n  REMOVE_CLIENT = \"remove_client\",\n}\n\nexport type SharedWorkerReq =\n  | {\n      type: SharedWorkerReqType.INIT;\n      mockServerOpts: MockServerOpts;\n      connUid?: string;\n      resetServer?: true;\n    }\n  | {\n      type: SharedWorkerReqType.HANDLE_MSG;\n      msg: string;\n    }\n  | {\n      type: SharedWorkerReqType.REMOVE_CLIENT;\n    };\n\nexport enum SharedWorkerRespType {\n  INIT_ACK = \"init_ack\",\n  RESP = \"resp\",\n  CLOSE = \"close\",\n}\n\nexport type SharedWorkerResp =\n  | {\n      type: SharedWorkerRespType.INIT_ACK;\n    }\n  | {\n      type: SharedWorkerRespType.RESP;\n      msg: string;\n    }\n  | {\n      type: SharedWorkerRespType.CLOSE;\n    };\n\nexport class SharedWorkerInterface implements ServerInterface {\n  worker: SharedWorker;\n  callbacks?: ServerInterfaceCallbacks;\n  mockServerOpts: MockServerOpts;\n  connUid?: string;\n  handleMsg: (msg: string) => void;\n  disconnect: () => void;\n  isClosed: boolean;\n\n  constructor(\n    worker: SharedWorker,\n    mockServerOpts: MockServerOpts,\n    connUid?: string\n  ) {\n    this.worker = worker;\n    this.mockServerOpts = mockServerOpts;\n    this.connUid = connUid;\n    this.handleMsg = () => {\n      throw new Error(\"connection not initialized yet\");\n    };\n    this.disconnect = () => {\n      throw new Error(\"connection not initialized yet\");\n    };\n    this.isClosed = false;\n  }\n\n  init(callbacks: ServerInterfaceCallbacks) {\n    this.callbacks = callbacks;\n    this.connect();\n  }\n\n  private connect(): void {\n    if (this.callbacks === undefined)\n      throw new Error(\"expect callbacks to be defined\");\n    const { onOpen, onResp, afterDisconnect } = this.callbacks;\n\n    this.worker.port.onmessage = ({ data }: MessageEvent<SharedWorkerResp>) => {\n      switch (data.type) {\n        case SharedWorkerRespType.INIT_ACK: {\n          onOpen();\n          break;\n        }\n        case SharedWorkerRespType.RESP: {\n          if (this.isClosed) return;\n          Promise.resolve().then(() => {\n            onResp(data.msg);\n          });\n          break;\n        }\n        case SharedWorkerRespType.CLOSE: {\n          this.reconnect();\n          break;\n        }\n      }\n    };\n\n    this.handleMsg = (msg) => {\n      this.worker.port.postMessage({\n        type: SharedWorkerReqType.HANDLE_MSG,\n        msg,\n      });\n    };\n\n    this.disconnect = () => {\n      this.worker.port.postMessage({\n        type: SharedWorkerReqType.REMOVE_CLIENT,\n      });\n      afterDisconnect({\n        numReconnections: 0,\n        reconnectDelayInSeconds: 0,\n      });\n    };\n\n    this.worker.port.start();\n\n    this.worker.port.postMessage({\n      type: SharedWorkerReqType.INIT,\n      mockServerOpts: this.mockServerOpts,\n      connUid: this.connUid,\n    });\n  }\n\n  send(msg: string) {\n    Promise.resolve().then(() => {\n      this.handleMsg(msg);\n    });\n  }\n\n  reconnect() {\n    this.disconnect();\n    this.connect();\n  }\n\n  close() {\n    this.disconnect();\n    this.isClosed = true;\n    this.worker.port.close();\n  }\n\n  resetServer() {\n    this.worker.port.postMessage({\n      type: SharedWorkerReqType.INIT,\n      mockServerOpts: this.mockServerOpts,\n      connUid: this.connUid,\n      resetServer: true,\n    });\n  }\n}\n","/*!\n    localForage -- Offline Storage, Improved\n    Version 1.10.0\n    https://localforage.github.io/localForage\n    (c) 2013-2017 Mozilla, Apache License 2.0\n*/\n(function(f){if(typeof exports===\"object\"&&typeof module!==\"undefined\"){module.exports=f()}else if(typeof define===\"function\"&&define.amd){define([],f)}else{var g;if(typeof window!==\"undefined\"){g=window}else if(typeof global!==\"undefined\"){g=global}else if(typeof self!==\"undefined\"){g=self}else{g=this}g.localforage = f()}})(function(){var define,module,exports;return (function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw (f.code=\"MODULE_NOT_FOUND\", f)}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(_dereq_,module,exports){\n(function (global){\n'use strict';\nvar Mutation = global.MutationObserver || global.WebKitMutationObserver;\n\nvar scheduleDrain;\n\n{\n  if (Mutation) {\n    var called = 0;\n    var observer = new Mutation(nextTick);\n    var element = global.document.createTextNode('');\n    observer.observe(element, {\n      characterData: true\n    });\n    scheduleDrain = function () {\n      element.data = (called = ++called % 2);\n    };\n  } else if (!global.setImmediate && typeof global.MessageChannel !== 'undefined') {\n    var channel = new global.MessageChannel();\n    channel.port1.onmessage = nextTick;\n    scheduleDrain = function () {\n      channel.port2.postMessage(0);\n    };\n  } else if ('document' in global && 'onreadystatechange' in global.document.createElement('script')) {\n    scheduleDrain = function () {\n\n      // Create a <script> element; its readystatechange event will be fired asynchronously once it is inserted\n      // into the document. Do so, thus queuing up the task. Remember to clean up once it's been called.\n      var scriptEl = global.document.createElement('script');\n      scriptEl.onreadystatechange = function () {\n        nextTick();\n\n        scriptEl.onreadystatechange = null;\n        scriptEl.parentNode.removeChild(scriptEl);\n        scriptEl = null;\n      };\n      global.document.documentElement.appendChild(scriptEl);\n    };\n  } else {\n    scheduleDrain = function () {\n      setTimeout(nextTick, 0);\n    };\n  }\n}\n\nvar draining;\nvar queue = [];\n//named nextTick for less confusing stack traces\nfunction nextTick() {\n  draining = true;\n  var i, oldQueue;\n  var len = queue.length;\n  while (len) {\n    oldQueue = queue;\n    queue = [];\n    i = -1;\n    while (++i < len) {\n      oldQueue[i]();\n    }\n    len = queue.length;\n  }\n  draining = false;\n}\n\nmodule.exports = immediate;\nfunction immediate(task) {\n  if (queue.push(task) === 1 && !draining) {\n    scheduleDrain();\n  }\n}\n\n}).call(this,typeof global !== \"undefined\" ? global : typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {})\n},{}],2:[function(_dereq_,module,exports){\n'use strict';\nvar immediate = _dereq_(1);\n\n/* istanbul ignore next */\nfunction INTERNAL() {}\n\nvar handlers = {};\n\nvar REJECTED = ['REJECTED'];\nvar FULFILLED = ['FULFILLED'];\nvar PENDING = ['PENDING'];\n\nmodule.exports = Promise;\n\nfunction Promise(resolver) {\n  if (typeof resolver !== 'function') {\n    throw new TypeError('resolver must be a function');\n  }\n  this.state = PENDING;\n  this.queue = [];\n  this.outcome = void 0;\n  if (resolver !== INTERNAL) {\n    safelyResolveThenable(this, resolver);\n  }\n}\n\nPromise.prototype[\"catch\"] = function (onRejected) {\n  return this.then(null, onRejected);\n};\nPromise.prototype.then = function (onFulfilled, onRejected) {\n  if (typeof onFulfilled !== 'function' && this.state === FULFILLED ||\n    typeof onRejected !== 'function' && this.state === REJECTED) {\n    return this;\n  }\n  var promise = new this.constructor(INTERNAL);\n  if (this.state !== PENDING) {\n    var resolver = this.state === FULFILLED ? onFulfilled : onRejected;\n    unwrap(promise, resolver, this.outcome);\n  } else {\n    this.queue.push(new QueueItem(promise, onFulfilled, onRejected));\n  }\n\n  return promise;\n};\nfunction QueueItem(promise, onFulfilled, onRejected) {\n  this.promise = promise;\n  if (typeof onFulfilled === 'function') {\n    this.onFulfilled = onFulfilled;\n    this.callFulfilled = this.otherCallFulfilled;\n  }\n  if (typeof onRejected === 'function') {\n    this.onRejected = onRejected;\n    this.callRejected = this.otherCallRejected;\n  }\n}\nQueueItem.prototype.callFulfilled = function (value) {\n  handlers.resolve(this.promise, value);\n};\nQueueItem.prototype.otherCallFulfilled = function (value) {\n  unwrap(this.promise, this.onFulfilled, value);\n};\nQueueItem.prototype.callRejected = function (value) {\n  handlers.reject(this.promise, value);\n};\nQueueItem.prototype.otherCallRejected = function (value) {\n  unwrap(this.promise, this.onRejected, value);\n};\n\nfunction unwrap(promise, func, value) {\n  immediate(function () {\n    var returnValue;\n    try {\n      returnValue = func(value);\n    } catch (e) {\n      return handlers.reject(promise, e);\n    }\n    if (returnValue === promise) {\n      handlers.reject(promise, new TypeError('Cannot resolve promise with itself'));\n    } else {\n      handlers.resolve(promise, returnValue);\n    }\n  });\n}\n\nhandlers.resolve = function (self, value) {\n  var result = tryCatch(getThen, value);\n  if (result.status === 'error') {\n    return handlers.reject(self, result.value);\n  }\n  var thenable = result.value;\n\n  if (thenable) {\n    safelyResolveThenable(self, thenable);\n  } else {\n    self.state = FULFILLED;\n    self.outcome = value;\n    var i = -1;\n    var len = self.queue.length;\n    while (++i < len) {\n      self.queue[i].callFulfilled(value);\n    }\n  }\n  return self;\n};\nhandlers.reject = function (self, error) {\n  self.state = REJECTED;\n  self.outcome = error;\n  var i = -1;\n  var len = self.queue.length;\n  while (++i < len) {\n    self.queue[i].callRejected(error);\n  }\n  return self;\n};\n\nfunction getThen(obj) {\n  // Make sure we only access the accessor once as required by the spec\n  var then = obj && obj.then;\n  if (obj && (typeof obj === 'object' || typeof obj === 'function') && typeof then === 'function') {\n    return function appyThen() {\n      then.apply(obj, arguments);\n    };\n  }\n}\n\nfunction safelyResolveThenable(self, thenable) {\n  // Either fulfill, reject or reject with error\n  var called = false;\n  function onError(value) {\n    if (called) {\n      return;\n    }\n    called = true;\n    handlers.reject(self, value);\n  }\n\n  function onSuccess(value) {\n    if (called) {\n      return;\n    }\n    called = true;\n    handlers.resolve(self, value);\n  }\n\n  function tryToUnwrap() {\n    thenable(onSuccess, onError);\n  }\n\n  var result = tryCatch(tryToUnwrap);\n  if (result.status === 'error') {\n    onError(result.value);\n  }\n}\n\nfunction tryCatch(func, value) {\n  var out = {};\n  try {\n    out.value = func(value);\n    out.status = 'success';\n  } catch (e) {\n    out.status = 'error';\n    out.value = e;\n  }\n  return out;\n}\n\nPromise.resolve = resolve;\nfunction resolve(value) {\n  if (value instanceof this) {\n    return value;\n  }\n  return handlers.resolve(new this(INTERNAL), value);\n}\n\nPromise.reject = reject;\nfunction reject(reason) {\n  var promise = new this(INTERNAL);\n  return handlers.reject(promise, reason);\n}\n\nPromise.all = all;\nfunction all(iterable) {\n  var self = this;\n  if (Object.prototype.toString.call(iterable) !== '[object Array]') {\n    return this.reject(new TypeError('must be an array'));\n  }\n\n  var len = iterable.length;\n  var called = false;\n  if (!len) {\n    return this.resolve([]);\n  }\n\n  var values = new Array(len);\n  var resolved = 0;\n  var i = -1;\n  var promise = new this(INTERNAL);\n\n  while (++i < len) {\n    allResolver(iterable[i], i);\n  }\n  return promise;\n  function allResolver(value, i) {\n    self.resolve(value).then(resolveFromAll, function (error) {\n      if (!called) {\n        called = true;\n        handlers.reject(promise, error);\n      }\n    });\n    function resolveFromAll(outValue) {\n      values[i] = outValue;\n      if (++resolved === len && !called) {\n        called = true;\n        handlers.resolve(promise, values);\n      }\n    }\n  }\n}\n\nPromise.race = race;\nfunction race(iterable) {\n  var self = this;\n  if (Object.prototype.toString.call(iterable) !== '[object Array]') {\n    return this.reject(new TypeError('must be an array'));\n  }\n\n  var len = iterable.length;\n  var called = false;\n  if (!len) {\n    return this.resolve([]);\n  }\n\n  var i = -1;\n  var promise = new this(INTERNAL);\n\n  while (++i < len) {\n    resolver(iterable[i]);\n  }\n  return promise;\n  function resolver(value) {\n    self.resolve(value).then(function (response) {\n      if (!called) {\n        called = true;\n        handlers.resolve(promise, response);\n      }\n    }, function (error) {\n      if (!called) {\n        called = true;\n        handlers.reject(promise, error);\n      }\n    });\n  }\n}\n\n},{\"1\":1}],3:[function(_dereq_,module,exports){\n(function (global){\n'use strict';\nif (typeof global.Promise !== 'function') {\n  global.Promise = _dereq_(2);\n}\n\n}).call(this,typeof global !== \"undefined\" ? global : typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {})\n},{\"2\":2}],4:[function(_dereq_,module,exports){\n'use strict';\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction getIDB() {\n    /* global indexedDB,webkitIndexedDB,mozIndexedDB,OIndexedDB,msIndexedDB */\n    try {\n        if (typeof indexedDB !== 'undefined') {\n            return indexedDB;\n        }\n        if (typeof webkitIndexedDB !== 'undefined') {\n            return webkitIndexedDB;\n        }\n        if (typeof mozIndexedDB !== 'undefined') {\n            return mozIndexedDB;\n        }\n        if (typeof OIndexedDB !== 'undefined') {\n            return OIndexedDB;\n        }\n        if (typeof msIndexedDB !== 'undefined') {\n            return msIndexedDB;\n        }\n    } catch (e) {\n        return;\n    }\n}\n\nvar idb = getIDB();\n\nfunction isIndexedDBValid() {\n    try {\n        // Initialize IndexedDB; fall back to vendor-prefixed versions\n        // if needed.\n        if (!idb || !idb.open) {\n            return false;\n        }\n        // We mimic PouchDB here;\n        //\n        // We test for openDatabase because IE Mobile identifies itself\n        // as Safari. Oh the lulz...\n        var isSafari = typeof openDatabase !== 'undefined' && /(Safari|iPhone|iPad|iPod)/.test(navigator.userAgent) && !/Chrome/.test(navigator.userAgent) && !/BlackBerry/.test(navigator.platform);\n\n        var hasFetch = typeof fetch === 'function' && fetch.toString().indexOf('[native code') !== -1;\n\n        // Safari <10.1 does not meet our requirements for IDB support\n        // (see: https://github.com/pouchdb/pouchdb/issues/5572).\n        // Safari 10.1 shipped with fetch, we can use that to detect it.\n        // Note: this creates issues with `window.fetch` polyfills and\n        // overrides; see:\n        // https://github.com/localForage/localForage/issues/856\n        return (!isSafari || hasFetch) && typeof indexedDB !== 'undefined' &&\n        // some outdated implementations of IDB that appear on Samsung\n        // and HTC Android devices <4.4 are missing IDBKeyRange\n        // See: https://github.com/mozilla/localForage/issues/128\n        // See: https://github.com/mozilla/localForage/issues/272\n        typeof IDBKeyRange !== 'undefined';\n    } catch (e) {\n        return false;\n    }\n}\n\n// Abstracts constructing a Blob object, so it also works in older\n// browsers that don't support the native Blob constructor. (i.e.\n// old QtWebKit versions, at least).\n// Abstracts constructing a Blob object, so it also works in older\n// browsers that don't support the native Blob constructor. (i.e.\n// old QtWebKit versions, at least).\nfunction createBlob(parts, properties) {\n    /* global BlobBuilder,MSBlobBuilder,MozBlobBuilder,WebKitBlobBuilder */\n    parts = parts || [];\n    properties = properties || {};\n    try {\n        return new Blob(parts, properties);\n    } catch (e) {\n        if (e.name !== 'TypeError') {\n            throw e;\n        }\n        var Builder = typeof BlobBuilder !== 'undefined' ? BlobBuilder : typeof MSBlobBuilder !== 'undefined' ? MSBlobBuilder : typeof MozBlobBuilder !== 'undefined' ? MozBlobBuilder : WebKitBlobBuilder;\n        var builder = new Builder();\n        for (var i = 0; i < parts.length; i += 1) {\n            builder.append(parts[i]);\n        }\n        return builder.getBlob(properties.type);\n    }\n}\n\n// This is CommonJS because lie is an external dependency, so Rollup\n// can just ignore it.\nif (typeof Promise === 'undefined') {\n    // In the \"nopromises\" build this will just throw if you don't have\n    // a global promise object, but it would throw anyway later.\n    _dereq_(3);\n}\nvar Promise$1 = Promise;\n\nfunction executeCallback(promise, callback) {\n    if (callback) {\n        promise.then(function (result) {\n            callback(null, result);\n        }, function (error) {\n            callback(error);\n        });\n    }\n}\n\nfunction executeTwoCallbacks(promise, callback, errorCallback) {\n    if (typeof callback === 'function') {\n        promise.then(callback);\n    }\n\n    if (typeof errorCallback === 'function') {\n        promise[\"catch\"](errorCallback);\n    }\n}\n\nfunction normalizeKey(key) {\n    // Cast the key to a string, as that's all we can set as a key.\n    if (typeof key !== 'string') {\n        console.warn(key + ' used as a key, but it is not a string.');\n        key = String(key);\n    }\n\n    return key;\n}\n\nfunction getCallback() {\n    if (arguments.length && typeof arguments[arguments.length - 1] === 'function') {\n        return arguments[arguments.length - 1];\n    }\n}\n\n// Some code originally from async_storage.js in\n// [Gaia](https://github.com/mozilla-b2g/gaia).\n\nvar DETECT_BLOB_SUPPORT_STORE = 'local-forage-detect-blob-support';\nvar supportsBlobs = void 0;\nvar dbContexts = {};\nvar toString = Object.prototype.toString;\n\n// Transaction Modes\nvar READ_ONLY = 'readonly';\nvar READ_WRITE = 'readwrite';\n\n// Transform a binary string to an array buffer, because otherwise\n// weird stuff happens when you try to work with the binary string directly.\n// It is known.\n// From http://stackoverflow.com/questions/14967647/ (continues on next line)\n// encode-decode-image-with-base64-breaks-image (2013-04-21)\nfunction _binStringToArrayBuffer(bin) {\n    var length = bin.length;\n    var buf = new ArrayBuffer(length);\n    var arr = new Uint8Array(buf);\n    for (var i = 0; i < length; i++) {\n        arr[i] = bin.charCodeAt(i);\n    }\n    return buf;\n}\n\n//\n// Blobs are not supported in all versions of IndexedDB, notably\n// Chrome <37 and Android <5. In those versions, storing a blob will throw.\n//\n// Various other blob bugs exist in Chrome v37-42 (inclusive).\n// Detecting them is expensive and confusing to users, and Chrome 37-42\n// is at very low usage worldwide, so we do a hacky userAgent check instead.\n//\n// content-type bug: https://code.google.com/p/chromium/issues/detail?id=408120\n// 404 bug: https://code.google.com/p/chromium/issues/detail?id=447916\n// FileReader bug: https://code.google.com/p/chromium/issues/detail?id=447836\n//\n// Code borrowed from PouchDB. See:\n// https://github.com/pouchdb/pouchdb/blob/master/packages/node_modules/pouchdb-adapter-idb/src/blobSupport.js\n//\nfunction _checkBlobSupportWithoutCaching(idb) {\n    return new Promise$1(function (resolve) {\n        var txn = idb.transaction(DETECT_BLOB_SUPPORT_STORE, READ_WRITE);\n        var blob = createBlob(['']);\n        txn.objectStore(DETECT_BLOB_SUPPORT_STORE).put(blob, 'key');\n\n        txn.onabort = function (e) {\n            // If the transaction aborts now its due to not being able to\n            // write to the database, likely due to the disk being full\n            e.preventDefault();\n            e.stopPropagation();\n            resolve(false);\n        };\n\n        txn.oncomplete = function () {\n            var matchedChrome = navigator.userAgent.match(/Chrome\\/(\\d+)/);\n            var matchedEdge = navigator.userAgent.match(/Edge\\//);\n            // MS Edge pretends to be Chrome 42:\n            // https://msdn.microsoft.com/en-us/library/hh869301%28v=vs.85%29.aspx\n            resolve(matchedEdge || !matchedChrome || parseInt(matchedChrome[1], 10) >= 43);\n        };\n    })[\"catch\"](function () {\n        return false; // error, so assume unsupported\n    });\n}\n\nfunction _checkBlobSupport(idb) {\n    if (typeof supportsBlobs === 'boolean') {\n        return Promise$1.resolve(supportsBlobs);\n    }\n    return _checkBlobSupportWithoutCaching(idb).then(function (value) {\n        supportsBlobs = value;\n        return supportsBlobs;\n    });\n}\n\nfunction _deferReadiness(dbInfo) {\n    var dbContext = dbContexts[dbInfo.name];\n\n    // Create a deferred object representing the current database operation.\n    var deferredOperation = {};\n\n    deferredOperation.promise = new Promise$1(function (resolve, reject) {\n        deferredOperation.resolve = resolve;\n        deferredOperation.reject = reject;\n    });\n\n    // Enqueue the deferred operation.\n    dbContext.deferredOperations.push(deferredOperation);\n\n    // Chain its promise to the database readiness.\n    if (!dbContext.dbReady) {\n        dbContext.dbReady = deferredOperation.promise;\n    } else {\n        dbContext.dbReady = dbContext.dbReady.then(function () {\n            return deferredOperation.promise;\n        });\n    }\n}\n\nfunction _advanceReadiness(dbInfo) {\n    var dbContext = dbContexts[dbInfo.name];\n\n    // Dequeue a deferred operation.\n    var deferredOperation = dbContext.deferredOperations.pop();\n\n    // Resolve its promise (which is part of the database readiness\n    // chain of promises).\n    if (deferredOperation) {\n        deferredOperation.resolve();\n        return deferredOperation.promise;\n    }\n}\n\nfunction _rejectReadiness(dbInfo, err) {\n    var dbContext = dbContexts[dbInfo.name];\n\n    // Dequeue a deferred operation.\n    var deferredOperation = dbContext.deferredOperations.pop();\n\n    // Reject its promise (which is part of the database readiness\n    // chain of promises).\n    if (deferredOperation) {\n        deferredOperation.reject(err);\n        return deferredOperation.promise;\n    }\n}\n\nfunction _getConnection(dbInfo, upgradeNeeded) {\n    return new Promise$1(function (resolve, reject) {\n        dbContexts[dbInfo.name] = dbContexts[dbInfo.name] || createDbContext();\n\n        if (dbInfo.db) {\n            if (upgradeNeeded) {\n                _deferReadiness(dbInfo);\n                dbInfo.db.close();\n            } else {\n                return resolve(dbInfo.db);\n            }\n        }\n\n        var dbArgs = [dbInfo.name];\n\n        if (upgradeNeeded) {\n            dbArgs.push(dbInfo.version);\n        }\n\n        var openreq = idb.open.apply(idb, dbArgs);\n\n        if (upgradeNeeded) {\n            openreq.onupgradeneeded = function (e) {\n                var db = openreq.result;\n                try {\n                    db.createObjectStore(dbInfo.storeName);\n                    if (e.oldVersion <= 1) {\n                        // Added when support for blob shims was added\n                        db.createObjectStore(DETECT_BLOB_SUPPORT_STORE);\n                    }\n                } catch (ex) {\n                    if (ex.name === 'ConstraintError') {\n                        console.warn('The database \"' + dbInfo.name + '\"' + ' has been upgraded from version ' + e.oldVersion + ' to version ' + e.newVersion + ', but the storage \"' + dbInfo.storeName + '\" already exists.');\n                    } else {\n                        throw ex;\n                    }\n                }\n            };\n        }\n\n        openreq.onerror = function (e) {\n            e.preventDefault();\n            reject(openreq.error);\n        };\n\n        openreq.onsuccess = function () {\n            var db = openreq.result;\n            db.onversionchange = function (e) {\n                // Triggered when the database is modified (e.g. adding an objectStore) or\n                // deleted (even when initiated by other sessions in different tabs).\n                // Closing the connection here prevents those operations from being blocked.\n                // If the database is accessed again later by this instance, the connection\n                // will be reopened or the database recreated as needed.\n                e.target.close();\n            };\n            resolve(db);\n            _advanceReadiness(dbInfo);\n        };\n    });\n}\n\nfunction _getOriginalConnection(dbInfo) {\n    return _getConnection(dbInfo, false);\n}\n\nfunction _getUpgradedConnection(dbInfo) {\n    return _getConnection(dbInfo, true);\n}\n\nfunction _isUpgradeNeeded(dbInfo, defaultVersion) {\n    if (!dbInfo.db) {\n        return true;\n    }\n\n    var isNewStore = !dbInfo.db.objectStoreNames.contains(dbInfo.storeName);\n    var isDowngrade = dbInfo.version < dbInfo.db.version;\n    var isUpgrade = dbInfo.version > dbInfo.db.version;\n\n    if (isDowngrade) {\n        // If the version is not the default one\n        // then warn for impossible downgrade.\n        if (dbInfo.version !== defaultVersion) {\n            console.warn('The database \"' + dbInfo.name + '\"' + \" can't be downgraded from version \" + dbInfo.db.version + ' to version ' + dbInfo.version + '.');\n        }\n        // Align the versions to prevent errors.\n        dbInfo.version = dbInfo.db.version;\n    }\n\n    if (isUpgrade || isNewStore) {\n        // If the store is new then increment the version (if needed).\n        // This will trigger an \"upgradeneeded\" event which is required\n        // for creating a store.\n        if (isNewStore) {\n            var incVersion = dbInfo.db.version + 1;\n            if (incVersion > dbInfo.version) {\n                dbInfo.version = incVersion;\n            }\n        }\n\n        return true;\n    }\n\n    return false;\n}\n\n// encode a blob for indexeddb engines that don't support blobs\nfunction _encodeBlob(blob) {\n    return new Promise$1(function (resolve, reject) {\n        var reader = new FileReader();\n        reader.onerror = reject;\n        reader.onloadend = function (e) {\n            var base64 = btoa(e.target.result || '');\n            resolve({\n                __local_forage_encoded_blob: true,\n                data: base64,\n                type: blob.type\n            });\n        };\n        reader.readAsBinaryString(blob);\n    });\n}\n\n// decode an encoded blob\nfunction _decodeBlob(encodedBlob) {\n    var arrayBuff = _binStringToArrayBuffer(atob(encodedBlob.data));\n    return createBlob([arrayBuff], { type: encodedBlob.type });\n}\n\n// is this one of our fancy encoded blobs?\nfunction _isEncodedBlob(value) {\n    return value && value.__local_forage_encoded_blob;\n}\n\n// Specialize the default `ready()` function by making it dependent\n// on the current database operations. Thus, the driver will be actually\n// ready when it's been initialized (default) *and* there are no pending\n// operations on the database (initiated by some other instances).\nfunction _fullyReady(callback) {\n    var self = this;\n\n    var promise = self._initReady().then(function () {\n        var dbContext = dbContexts[self._dbInfo.name];\n\n        if (dbContext && dbContext.dbReady) {\n            return dbContext.dbReady;\n        }\n    });\n\n    executeTwoCallbacks(promise, callback, callback);\n    return promise;\n}\n\n// Try to establish a new db connection to replace the\n// current one which is broken (i.e. experiencing\n// InvalidStateError while creating a transaction).\nfunction _tryReconnect(dbInfo) {\n    _deferReadiness(dbInfo);\n\n    var dbContext = dbContexts[dbInfo.name];\n    var forages = dbContext.forages;\n\n    for (var i = 0; i < forages.length; i++) {\n        var forage = forages[i];\n        if (forage._dbInfo.db) {\n            forage._dbInfo.db.close();\n            forage._dbInfo.db = null;\n        }\n    }\n    dbInfo.db = null;\n\n    return _getOriginalConnection(dbInfo).then(function (db) {\n        dbInfo.db = db;\n        if (_isUpgradeNeeded(dbInfo)) {\n            // Reopen the database for upgrading.\n            return _getUpgradedConnection(dbInfo);\n        }\n        return db;\n    }).then(function (db) {\n        // store the latest db reference\n        // in case the db was upgraded\n        dbInfo.db = dbContext.db = db;\n        for (var i = 0; i < forages.length; i++) {\n            forages[i]._dbInfo.db = db;\n        }\n    })[\"catch\"](function (err) {\n        _rejectReadiness(dbInfo, err);\n        throw err;\n    });\n}\n\n// FF doesn't like Promises (micro-tasks) and IDDB store operations,\n// so we have to do it with callbacks\nfunction createTransaction(dbInfo, mode, callback, retries) {\n    if (retries === undefined) {\n        retries = 1;\n    }\n\n    try {\n        var tx = dbInfo.db.transaction(dbInfo.storeName, mode);\n        callback(null, tx);\n    } catch (err) {\n        if (retries > 0 && (!dbInfo.db || err.name === 'InvalidStateError' || err.name === 'NotFoundError')) {\n            return Promise$1.resolve().then(function () {\n                if (!dbInfo.db || err.name === 'NotFoundError' && !dbInfo.db.objectStoreNames.contains(dbInfo.storeName) && dbInfo.version <= dbInfo.db.version) {\n                    // increase the db version, to create the new ObjectStore\n                    if (dbInfo.db) {\n                        dbInfo.version = dbInfo.db.version + 1;\n                    }\n                    // Reopen the database for upgrading.\n                    return _getUpgradedConnection(dbInfo);\n                }\n            }).then(function () {\n                return _tryReconnect(dbInfo).then(function () {\n                    createTransaction(dbInfo, mode, callback, retries - 1);\n                });\n            })[\"catch\"](callback);\n        }\n\n        callback(err);\n    }\n}\n\nfunction createDbContext() {\n    return {\n        // Running localForages sharing a database.\n        forages: [],\n        // Shared database.\n        db: null,\n        // Database readiness (promise).\n        dbReady: null,\n        // Deferred operations on the database.\n        deferredOperations: []\n    };\n}\n\n// Open the IndexedDB database (automatically creates one if one didn't\n// previously exist), using any options set in the config.\nfunction _initStorage(options) {\n    var self = this;\n    var dbInfo = {\n        db: null\n    };\n\n    if (options) {\n        for (var i in options) {\n            dbInfo[i] = options[i];\n        }\n    }\n\n    // Get the current context of the database;\n    var dbContext = dbContexts[dbInfo.name];\n\n    // ...or create a new context.\n    if (!dbContext) {\n        dbContext = createDbContext();\n        // Register the new context in the global container.\n        dbContexts[dbInfo.name] = dbContext;\n    }\n\n    // Register itself as a running localForage in the current context.\n    dbContext.forages.push(self);\n\n    // Replace the default `ready()` function with the specialized one.\n    if (!self._initReady) {\n        self._initReady = self.ready;\n        self.ready = _fullyReady;\n    }\n\n    // Create an array of initialization states of the related localForages.\n    var initPromises = [];\n\n    function ignoreErrors() {\n        // Don't handle errors here,\n        // just makes sure related localForages aren't pending.\n        return Promise$1.resolve();\n    }\n\n    for (var j = 0; j < dbContext.forages.length; j++) {\n        var forage = dbContext.forages[j];\n        if (forage !== self) {\n            // Don't wait for itself...\n            initPromises.push(forage._initReady()[\"catch\"](ignoreErrors));\n        }\n    }\n\n    // Take a snapshot of the related localForages.\n    var forages = dbContext.forages.slice(0);\n\n    // Initialize the connection process only when\n    // all the related localForages aren't pending.\n    return Promise$1.all(initPromises).then(function () {\n        dbInfo.db = dbContext.db;\n        // Get the connection or open a new one without upgrade.\n        return _getOriginalConnection(dbInfo);\n    }).then(function (db) {\n        dbInfo.db = db;\n        if (_isUpgradeNeeded(dbInfo, self._defaultConfig.version)) {\n            // Reopen the database for upgrading.\n            return _getUpgradedConnection(dbInfo);\n        }\n        return db;\n    }).then(function (db) {\n        dbInfo.db = dbContext.db = db;\n        self._dbInfo = dbInfo;\n        // Share the final connection amongst related localForages.\n        for (var k = 0; k < forages.length; k++) {\n            var forage = forages[k];\n            if (forage !== self) {\n                // Self is already up-to-date.\n                forage._dbInfo.db = dbInfo.db;\n                forage._dbInfo.version = dbInfo.version;\n            }\n        }\n    });\n}\n\nfunction getItem(key, callback) {\n    var self = this;\n\n    key = normalizeKey(key);\n\n    var promise = new Promise$1(function (resolve, reject) {\n        self.ready().then(function () {\n            createTransaction(self._dbInfo, READ_ONLY, function (err, transaction) {\n                if (err) {\n                    return reject(err);\n                }\n\n                try {\n                    var store = transaction.objectStore(self._dbInfo.storeName);\n                    var req = store.get(key);\n\n                    req.onsuccess = function () {\n                        var value = req.result;\n                        if (value === undefined) {\n                            value = null;\n                        }\n                        if (_isEncodedBlob(value)) {\n                            value = _decodeBlob(value);\n                        }\n                        resolve(value);\n                    };\n\n                    req.onerror = function () {\n                        reject(req.error);\n                    };\n                } catch (e) {\n                    reject(e);\n                }\n            });\n        })[\"catch\"](reject);\n    });\n\n    executeCallback(promise, callback);\n    return promise;\n}\n\n// Iterate over all items stored in database.\nfunction iterate(iterator, callback) {\n    var self = this;\n\n    var promise = new Promise$1(function (resolve, reject) {\n        self.ready().then(function () {\n            createTransaction(self._dbInfo, READ_ONLY, function (err, transaction) {\n                if (err) {\n                    return reject(err);\n                }\n\n                try {\n                    var store = transaction.objectStore(self._dbInfo.storeName);\n                    var req = store.openCursor();\n                    var iterationNumber = 1;\n\n                    req.onsuccess = function () {\n                        var cursor = req.result;\n\n                        if (cursor) {\n                            var value = cursor.value;\n                            if (_isEncodedBlob(value)) {\n                                value = _decodeBlob(value);\n                            }\n                            var result = iterator(value, cursor.key, iterationNumber++);\n\n                            // when the iterator callback returns any\n                            // (non-`undefined`) value, then we stop\n                            // the iteration immediately\n                            if (result !== void 0) {\n                                resolve(result);\n                            } else {\n                                cursor[\"continue\"]();\n                            }\n                        } else {\n                            resolve();\n                        }\n                    };\n\n                    req.onerror = function () {\n                        reject(req.error);\n                    };\n                } catch (e) {\n                    reject(e);\n                }\n            });\n        })[\"catch\"](reject);\n    });\n\n    executeCallback(promise, callback);\n\n    return promise;\n}\n\nfunction setItem(key, value, callback) {\n    var self = this;\n\n    key = normalizeKey(key);\n\n    var promise = new Promise$1(function (resolve, reject) {\n        var dbInfo;\n        self.ready().then(function () {\n            dbInfo = self._dbInfo;\n            if (toString.call(value) === '[object Blob]') {\n                return _checkBlobSupport(dbInfo.db).then(function (blobSupport) {\n                    if (blobSupport) {\n                        return value;\n                    }\n                    return _encodeBlob(value);\n                });\n            }\n            return value;\n        }).then(function (value) {\n            createTransaction(self._dbInfo, READ_WRITE, function (err, transaction) {\n                if (err) {\n                    return reject(err);\n                }\n\n                try {\n                    var store = transaction.objectStore(self._dbInfo.storeName);\n\n                    // The reason we don't _save_ null is because IE 10 does\n                    // not support saving the `null` type in IndexedDB. How\n                    // ironic, given the bug below!\n                    // See: https://github.com/mozilla/localForage/issues/161\n                    if (value === null) {\n                        value = undefined;\n                    }\n\n                    var req = store.put(value, key);\n\n                    transaction.oncomplete = function () {\n                        // Cast to undefined so the value passed to\n                        // callback/promise is the same as what one would get out\n                        // of `getItem()` later. This leads to some weirdness\n                        // (setItem('foo', undefined) will return `null`), but\n                        // it's not my fault localStorage is our baseline and that\n                        // it's weird.\n                        if (value === undefined) {\n                            value = null;\n                        }\n\n                        resolve(value);\n                    };\n                    transaction.onabort = transaction.onerror = function () {\n                        var err = req.error ? req.error : req.transaction.error;\n                        reject(err);\n                    };\n                } catch (e) {\n                    reject(e);\n                }\n            });\n        })[\"catch\"](reject);\n    });\n\n    executeCallback(promise, callback);\n    return promise;\n}\n\nfunction removeItem(key, callback) {\n    var self = this;\n\n    key = normalizeKey(key);\n\n    var promise = new Promise$1(function (resolve, reject) {\n        self.ready().then(function () {\n            createTransaction(self._dbInfo, READ_WRITE, function (err, transaction) {\n                if (err) {\n                    return reject(err);\n                }\n\n                try {\n                    var store = transaction.objectStore(self._dbInfo.storeName);\n                    // We use a Grunt task to make this safe for IE and some\n                    // versions of Android (including those used by Cordova).\n                    // Normally IE won't like `.delete()` and will insist on\n                    // using `['delete']()`, but we have a build step that\n                    // fixes this for us now.\n                    var req = store[\"delete\"](key);\n                    transaction.oncomplete = function () {\n                        resolve();\n                    };\n\n                    transaction.onerror = function () {\n                        reject(req.error);\n                    };\n\n                    // The request will be also be aborted if we've exceeded our storage\n                    // space.\n                    transaction.onabort = function () {\n                        var err = req.error ? req.error : req.transaction.error;\n                        reject(err);\n                    };\n                } catch (e) {\n                    reject(e);\n                }\n            });\n        })[\"catch\"](reject);\n    });\n\n    executeCallback(promise, callback);\n    return promise;\n}\n\nfunction clear(callback) {\n    var self = this;\n\n    var promise = new Promise$1(function (resolve, reject) {\n        self.ready().then(function () {\n            createTransaction(self._dbInfo, READ_WRITE, function (err, transaction) {\n                if (err) {\n                    return reject(err);\n                }\n\n                try {\n                    var store = transaction.objectStore(self._dbInfo.storeName);\n                    var req = store.clear();\n\n                    transaction.oncomplete = function () {\n                        resolve();\n                    };\n\n                    transaction.onabort = transaction.onerror = function () {\n                        var err = req.error ? req.error : req.transaction.error;\n                        reject(err);\n                    };\n                } catch (e) {\n                    reject(e);\n                }\n            });\n        })[\"catch\"](reject);\n    });\n\n    executeCallback(promise, callback);\n    return promise;\n}\n\nfunction length(callback) {\n    var self = this;\n\n    var promise = new Promise$1(function (resolve, reject) {\n        self.ready().then(function () {\n            createTransaction(self._dbInfo, READ_ONLY, function (err, transaction) {\n                if (err) {\n                    return reject(err);\n                }\n\n                try {\n                    var store = transaction.objectStore(self._dbInfo.storeName);\n                    var req = store.count();\n\n                    req.onsuccess = function () {\n                        resolve(req.result);\n                    };\n\n                    req.onerror = function () {\n                        reject(req.error);\n                    };\n                } catch (e) {\n                    reject(e);\n                }\n            });\n        })[\"catch\"](reject);\n    });\n\n    executeCallback(promise, callback);\n    return promise;\n}\n\nfunction key(n, callback) {\n    var self = this;\n\n    var promise = new Promise$1(function (resolve, reject) {\n        if (n < 0) {\n            resolve(null);\n\n            return;\n        }\n\n        self.ready().then(function () {\n            createTransaction(self._dbInfo, READ_ONLY, function (err, transaction) {\n                if (err) {\n                    return reject(err);\n                }\n\n                try {\n                    var store = transaction.objectStore(self._dbInfo.storeName);\n                    var advanced = false;\n                    var req = store.openKeyCursor();\n\n                    req.onsuccess = function () {\n                        var cursor = req.result;\n                        if (!cursor) {\n                            // this means there weren't enough keys\n                            resolve(null);\n\n                            return;\n                        }\n\n                        if (n === 0) {\n                            // We have the first key, return it if that's what they\n                            // wanted.\n                            resolve(cursor.key);\n                        } else {\n                            if (!advanced) {\n                                // Otherwise, ask the cursor to skip ahead n\n                                // records.\n                                advanced = true;\n                                cursor.advance(n);\n                            } else {\n                                // When we get here, we've got the nth key.\n                                resolve(cursor.key);\n                            }\n                        }\n                    };\n\n                    req.onerror = function () {\n                        reject(req.error);\n                    };\n                } catch (e) {\n                    reject(e);\n                }\n            });\n        })[\"catch\"](reject);\n    });\n\n    executeCallback(promise, callback);\n    return promise;\n}\n\nfunction keys(callback) {\n    var self = this;\n\n    var promise = new Promise$1(function (resolve, reject) {\n        self.ready().then(function () {\n            createTransaction(self._dbInfo, READ_ONLY, function (err, transaction) {\n                if (err) {\n                    return reject(err);\n                }\n\n                try {\n                    var store = transaction.objectStore(self._dbInfo.storeName);\n                    var req = store.openKeyCursor();\n                    var keys = [];\n\n                    req.onsuccess = function () {\n                        var cursor = req.result;\n\n                        if (!cursor) {\n                            resolve(keys);\n                            return;\n                        }\n\n                        keys.push(cursor.key);\n                        cursor[\"continue\"]();\n                    };\n\n                    req.onerror = function () {\n                        reject(req.error);\n                    };\n                } catch (e) {\n                    reject(e);\n                }\n            });\n        })[\"catch\"](reject);\n    });\n\n    executeCallback(promise, callback);\n    return promise;\n}\n\nfunction dropInstance(options, callback) {\n    callback = getCallback.apply(this, arguments);\n\n    var currentConfig = this.config();\n    options = typeof options !== 'function' && options || {};\n    if (!options.name) {\n        options.name = options.name || currentConfig.name;\n        options.storeName = options.storeName || currentConfig.storeName;\n    }\n\n    var self = this;\n    var promise;\n    if (!options.name) {\n        promise = Promise$1.reject('Invalid arguments');\n    } else {\n        var isCurrentDb = options.name === currentConfig.name && self._dbInfo.db;\n\n        var dbPromise = isCurrentDb ? Promise$1.resolve(self._dbInfo.db) : _getOriginalConnection(options).then(function (db) {\n            var dbContext = dbContexts[options.name];\n            var forages = dbContext.forages;\n            dbContext.db = db;\n            for (var i = 0; i < forages.length; i++) {\n                forages[i]._dbInfo.db = db;\n            }\n            return db;\n        });\n\n        if (!options.storeName) {\n            promise = dbPromise.then(function (db) {\n                _deferReadiness(options);\n\n                var dbContext = dbContexts[options.name];\n                var forages = dbContext.forages;\n\n                db.close();\n                for (var i = 0; i < forages.length; i++) {\n                    var forage = forages[i];\n                    forage._dbInfo.db = null;\n                }\n\n                var dropDBPromise = new Promise$1(function (resolve, reject) {\n                    var req = idb.deleteDatabase(options.name);\n\n                    req.onerror = function () {\n                        var db = req.result;\n                        if (db) {\n                            db.close();\n                        }\n                        reject(req.error);\n                    };\n\n                    req.onblocked = function () {\n                        // Closing all open connections in onversionchange handler should prevent this situation, but if\n                        // we do get here, it just means the request remains pending - eventually it will succeed or error\n                        console.warn('dropInstance blocked for database \"' + options.name + '\" until all open connections are closed');\n                    };\n\n                    req.onsuccess = function () {\n                        var db = req.result;\n                        if (db) {\n                            db.close();\n                        }\n                        resolve(db);\n                    };\n                });\n\n                return dropDBPromise.then(function (db) {\n                    dbContext.db = db;\n                    for (var i = 0; i < forages.length; i++) {\n                        var _forage = forages[i];\n                        _advanceReadiness(_forage._dbInfo);\n                    }\n                })[\"catch\"](function (err) {\n                    (_rejectReadiness(options, err) || Promise$1.resolve())[\"catch\"](function () {});\n                    throw err;\n                });\n            });\n        } else {\n            promise = dbPromise.then(function (db) {\n                if (!db.objectStoreNames.contains(options.storeName)) {\n                    return;\n                }\n\n                var newVersion = db.version + 1;\n\n                _deferReadiness(options);\n\n                var dbContext = dbContexts[options.name];\n                var forages = dbContext.forages;\n\n                db.close();\n                for (var i = 0; i < forages.length; i++) {\n                    var forage = forages[i];\n                    forage._dbInfo.db = null;\n                    forage._dbInfo.version = newVersion;\n                }\n\n                var dropObjectPromise = new Promise$1(function (resolve, reject) {\n                    var req = idb.open(options.name, newVersion);\n\n                    req.onerror = function (err) {\n                        var db = req.result;\n                        db.close();\n                        reject(err);\n                    };\n\n                    req.onupgradeneeded = function () {\n                        var db = req.result;\n                        db.deleteObjectStore(options.storeName);\n                    };\n\n                    req.onsuccess = function () {\n                        var db = req.result;\n                        db.close();\n                        resolve(db);\n                    };\n                });\n\n                return dropObjectPromise.then(function (db) {\n                    dbContext.db = db;\n                    for (var j = 0; j < forages.length; j++) {\n                        var _forage2 = forages[j];\n                        _forage2._dbInfo.db = db;\n                        _advanceReadiness(_forage2._dbInfo);\n                    }\n                })[\"catch\"](function (err) {\n                    (_rejectReadiness(options, err) || Promise$1.resolve())[\"catch\"](function () {});\n                    throw err;\n                });\n            });\n        }\n    }\n\n    executeCallback(promise, callback);\n    return promise;\n}\n\nvar asyncStorage = {\n    _driver: 'asyncStorage',\n    _initStorage: _initStorage,\n    _support: isIndexedDBValid(),\n    iterate: iterate,\n    getItem: getItem,\n    setItem: setItem,\n    removeItem: removeItem,\n    clear: clear,\n    length: length,\n    key: key,\n    keys: keys,\n    dropInstance: dropInstance\n};\n\nfunction isWebSQLValid() {\n    return typeof openDatabase === 'function';\n}\n\n// Sadly, the best way to save binary data in WebSQL/localStorage is serializing\n// it to Base64, so this is how we store it to prevent very strange errors with less\n// verbose ways of binary <-> string data storage.\nvar BASE_CHARS = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';\n\nvar BLOB_TYPE_PREFIX = '~~local_forage_type~';\nvar BLOB_TYPE_PREFIX_REGEX = /^~~local_forage_type~([^~]+)~/;\n\nvar SERIALIZED_MARKER = '__lfsc__:';\nvar SERIALIZED_MARKER_LENGTH = SERIALIZED_MARKER.length;\n\n// OMG the serializations!\nvar TYPE_ARRAYBUFFER = 'arbf';\nvar TYPE_BLOB = 'blob';\nvar TYPE_INT8ARRAY = 'si08';\nvar TYPE_UINT8ARRAY = 'ui08';\nvar TYPE_UINT8CLAMPEDARRAY = 'uic8';\nvar TYPE_INT16ARRAY = 'si16';\nvar TYPE_INT32ARRAY = 'si32';\nvar TYPE_UINT16ARRAY = 'ur16';\nvar TYPE_UINT32ARRAY = 'ui32';\nvar TYPE_FLOAT32ARRAY = 'fl32';\nvar TYPE_FLOAT64ARRAY = 'fl64';\nvar TYPE_SERIALIZED_MARKER_LENGTH = SERIALIZED_MARKER_LENGTH + TYPE_ARRAYBUFFER.length;\n\nvar toString$1 = Object.prototype.toString;\n\nfunction stringToBuffer(serializedString) {\n    // Fill the string into a ArrayBuffer.\n    var bufferLength = serializedString.length * 0.75;\n    var len = serializedString.length;\n    var i;\n    var p = 0;\n    var encoded1, encoded2, encoded3, encoded4;\n\n    if (serializedString[serializedString.length - 1] === '=') {\n        bufferLength--;\n        if (serializedString[serializedString.length - 2] === '=') {\n            bufferLength--;\n        }\n    }\n\n    var buffer = new ArrayBuffer(bufferLength);\n    var bytes = new Uint8Array(buffer);\n\n    for (i = 0; i < len; i += 4) {\n        encoded1 = BASE_CHARS.indexOf(serializedString[i]);\n        encoded2 = BASE_CHARS.indexOf(serializedString[i + 1]);\n        encoded3 = BASE_CHARS.indexOf(serializedString[i + 2]);\n        encoded4 = BASE_CHARS.indexOf(serializedString[i + 3]);\n\n        /*jslint bitwise: true */\n        bytes[p++] = encoded1 << 2 | encoded2 >> 4;\n        bytes[p++] = (encoded2 & 15) << 4 | encoded3 >> 2;\n        bytes[p++] = (encoded3 & 3) << 6 | encoded4 & 63;\n    }\n    return buffer;\n}\n\n// Converts a buffer to a string to store, serialized, in the backend\n// storage library.\nfunction bufferToString(buffer) {\n    // base64-arraybuffer\n    var bytes = new Uint8Array(buffer);\n    var base64String = '';\n    var i;\n\n    for (i = 0; i < bytes.length; i += 3) {\n        /*jslint bitwise: true */\n        base64String += BASE_CHARS[bytes[i] >> 2];\n        base64String += BASE_CHARS[(bytes[i] & 3) << 4 | bytes[i + 1] >> 4];\n        base64String += BASE_CHARS[(bytes[i + 1] & 15) << 2 | bytes[i + 2] >> 6];\n        base64String += BASE_CHARS[bytes[i + 2] & 63];\n    }\n\n    if (bytes.length % 3 === 2) {\n        base64String = base64String.substring(0, base64String.length - 1) + '=';\n    } else if (bytes.length % 3 === 1) {\n        base64String = base64String.substring(0, base64String.length - 2) + '==';\n    }\n\n    return base64String;\n}\n\n// Serialize a value, afterwards executing a callback (which usually\n// instructs the `setItem()` callback/promise to be executed). This is how\n// we store binary data with localStorage.\nfunction serialize(value, callback) {\n    var valueType = '';\n    if (value) {\n        valueType = toString$1.call(value);\n    }\n\n    // Cannot use `value instanceof ArrayBuffer` or such here, as these\n    // checks fail when running the tests using casper.js...\n    //\n    // TODO: See why those tests fail and use a better solution.\n    if (value && (valueType === '[object ArrayBuffer]' || value.buffer && toString$1.call(value.buffer) === '[object ArrayBuffer]')) {\n        // Convert binary arrays to a string and prefix the string with\n        // a special marker.\n        var buffer;\n        var marker = SERIALIZED_MARKER;\n\n        if (value instanceof ArrayBuffer) {\n            buffer = value;\n            marker += TYPE_ARRAYBUFFER;\n        } else {\n            buffer = value.buffer;\n\n            if (valueType === '[object Int8Array]') {\n                marker += TYPE_INT8ARRAY;\n            } else if (valueType === '[object Uint8Array]') {\n                marker += TYPE_UINT8ARRAY;\n            } else if (valueType === '[object Uint8ClampedArray]') {\n                marker += TYPE_UINT8CLAMPEDARRAY;\n            } else if (valueType === '[object Int16Array]') {\n                marker += TYPE_INT16ARRAY;\n            } else if (valueType === '[object Uint16Array]') {\n                marker += TYPE_UINT16ARRAY;\n            } else if (valueType === '[object Int32Array]') {\n                marker += TYPE_INT32ARRAY;\n            } else if (valueType === '[object Uint32Array]') {\n                marker += TYPE_UINT32ARRAY;\n            } else if (valueType === '[object Float32Array]') {\n                marker += TYPE_FLOAT32ARRAY;\n            } else if (valueType === '[object Float64Array]') {\n                marker += TYPE_FLOAT64ARRAY;\n            } else {\n                callback(new Error('Failed to get type for BinaryArray'));\n            }\n        }\n\n        callback(marker + bufferToString(buffer));\n    } else if (valueType === '[object Blob]') {\n        // Conver the blob to a binaryArray and then to a string.\n        var fileReader = new FileReader();\n\n        fileReader.onload = function () {\n            // Backwards-compatible prefix for the blob type.\n            var str = BLOB_TYPE_PREFIX + value.type + '~' + bufferToString(this.result);\n\n            callback(SERIALIZED_MARKER + TYPE_BLOB + str);\n        };\n\n        fileReader.readAsArrayBuffer(value);\n    } else {\n        try {\n            callback(JSON.stringify(value));\n        } catch (e) {\n            console.error(\"Couldn't convert value into a JSON string: \", value);\n\n            callback(null, e);\n        }\n    }\n}\n\n// Deserialize data we've inserted into a value column/field. We place\n// special markers into our strings to mark them as encoded; this isn't\n// as nice as a meta field, but it's the only sane thing we can do whilst\n// keeping localStorage support intact.\n//\n// Oftentimes this will just deserialize JSON content, but if we have a\n// special marker (SERIALIZED_MARKER, defined above), we will extract\n// some kind of arraybuffer/binary data/typed array out of the string.\nfunction deserialize(value) {\n    // If we haven't marked this string as being specially serialized (i.e.\n    // something other than serialized JSON), we can just return it and be\n    // done with it.\n    if (value.substring(0, SERIALIZED_MARKER_LENGTH) !== SERIALIZED_MARKER) {\n        return JSON.parse(value);\n    }\n\n    // The following code deals with deserializing some kind of Blob or\n    // TypedArray. First we separate out the type of data we're dealing\n    // with from the data itself.\n    var serializedString = value.substring(TYPE_SERIALIZED_MARKER_LENGTH);\n    var type = value.substring(SERIALIZED_MARKER_LENGTH, TYPE_SERIALIZED_MARKER_LENGTH);\n\n    var blobType;\n    // Backwards-compatible blob type serialization strategy.\n    // DBs created with older versions of localForage will simply not have the blob type.\n    if (type === TYPE_BLOB && BLOB_TYPE_PREFIX_REGEX.test(serializedString)) {\n        var matcher = serializedString.match(BLOB_TYPE_PREFIX_REGEX);\n        blobType = matcher[1];\n        serializedString = serializedString.substring(matcher[0].length);\n    }\n    var buffer = stringToBuffer(serializedString);\n\n    // Return the right type based on the code/type set during\n    // serialization.\n    switch (type) {\n        case TYPE_ARRAYBUFFER:\n            return buffer;\n        case TYPE_BLOB:\n            return createBlob([buffer], { type: blobType });\n        case TYPE_INT8ARRAY:\n            return new Int8Array(buffer);\n        case TYPE_UINT8ARRAY:\n            return new Uint8Array(buffer);\n        case TYPE_UINT8CLAMPEDARRAY:\n            return new Uint8ClampedArray(buffer);\n        case TYPE_INT16ARRAY:\n            return new Int16Array(buffer);\n        case TYPE_UINT16ARRAY:\n            return new Uint16Array(buffer);\n        case TYPE_INT32ARRAY:\n            return new Int32Array(buffer);\n        case TYPE_UINT32ARRAY:\n            return new Uint32Array(buffer);\n        case TYPE_FLOAT32ARRAY:\n            return new Float32Array(buffer);\n        case TYPE_FLOAT64ARRAY:\n            return new Float64Array(buffer);\n        default:\n            throw new Error('Unkown type: ' + type);\n    }\n}\n\nvar localforageSerializer = {\n    serialize: serialize,\n    deserialize: deserialize,\n    stringToBuffer: stringToBuffer,\n    bufferToString: bufferToString\n};\n\n/*\n * Includes code from:\n *\n * base64-arraybuffer\n * https://github.com/niklasvh/base64-arraybuffer\n *\n * Copyright (c) 2012 Niklas von Hertzen\n * Licensed under the MIT license.\n */\n\nfunction createDbTable(t, dbInfo, callback, errorCallback) {\n    t.executeSql('CREATE TABLE IF NOT EXISTS ' + dbInfo.storeName + ' ' + '(id INTEGER PRIMARY KEY, key unique, value)', [], callback, errorCallback);\n}\n\n// Open the WebSQL database (automatically creates one if one didn't\n// previously exist), using any options set in the config.\nfunction _initStorage$1(options) {\n    var self = this;\n    var dbInfo = {\n        db: null\n    };\n\n    if (options) {\n        for (var i in options) {\n            dbInfo[i] = typeof options[i] !== 'string' ? options[i].toString() : options[i];\n        }\n    }\n\n    var dbInfoPromise = new Promise$1(function (resolve, reject) {\n        // Open the database; the openDatabase API will automatically\n        // create it for us if it doesn't exist.\n        try {\n            dbInfo.db = openDatabase(dbInfo.name, String(dbInfo.version), dbInfo.description, dbInfo.size);\n        } catch (e) {\n            return reject(e);\n        }\n\n        // Create our key/value table if it doesn't exist.\n        dbInfo.db.transaction(function (t) {\n            createDbTable(t, dbInfo, function () {\n                self._dbInfo = dbInfo;\n                resolve();\n            }, function (t, error) {\n                reject(error);\n            });\n        }, reject);\n    });\n\n    dbInfo.serializer = localforageSerializer;\n    return dbInfoPromise;\n}\n\nfunction tryExecuteSql(t, dbInfo, sqlStatement, args, callback, errorCallback) {\n    t.executeSql(sqlStatement, args, callback, function (t, error) {\n        if (error.code === error.SYNTAX_ERR) {\n            t.executeSql('SELECT name FROM sqlite_master ' + \"WHERE type='table' AND name = ?\", [dbInfo.storeName], function (t, results) {\n                if (!results.rows.length) {\n                    // if the table is missing (was deleted)\n                    // re-create it table and retry\n                    createDbTable(t, dbInfo, function () {\n                        t.executeSql(sqlStatement, args, callback, errorCallback);\n                    }, errorCallback);\n                } else {\n                    errorCallback(t, error);\n                }\n            }, errorCallback);\n        } else {\n            errorCallback(t, error);\n        }\n    }, errorCallback);\n}\n\nfunction getItem$1(key, callback) {\n    var self = this;\n\n    key = normalizeKey(key);\n\n    var promise = new Promise$1(function (resolve, reject) {\n        self.ready().then(function () {\n            var dbInfo = self._dbInfo;\n            dbInfo.db.transaction(function (t) {\n                tryExecuteSql(t, dbInfo, 'SELECT * FROM ' + dbInfo.storeName + ' WHERE key = ? LIMIT 1', [key], function (t, results) {\n                    var result = results.rows.length ? results.rows.item(0).value : null;\n\n                    // Check to see if this is serialized content we need to\n                    // unpack.\n                    if (result) {\n                        result = dbInfo.serializer.deserialize(result);\n                    }\n\n                    resolve(result);\n                }, function (t, error) {\n                    reject(error);\n                });\n            });\n        })[\"catch\"](reject);\n    });\n\n    executeCallback(promise, callback);\n    return promise;\n}\n\nfunction iterate$1(iterator, callback) {\n    var self = this;\n\n    var promise = new Promise$1(function (resolve, reject) {\n        self.ready().then(function () {\n            var dbInfo = self._dbInfo;\n\n            dbInfo.db.transaction(function (t) {\n                tryExecuteSql(t, dbInfo, 'SELECT * FROM ' + dbInfo.storeName, [], function (t, results) {\n                    var rows = results.rows;\n                    var length = rows.length;\n\n                    for (var i = 0; i < length; i++) {\n                        var item = rows.item(i);\n                        var result = item.value;\n\n                        // Check to see if this is serialized content\n                        // we need to unpack.\n                        if (result) {\n                            result = dbInfo.serializer.deserialize(result);\n                        }\n\n                        result = iterator(result, item.key, i + 1);\n\n                        // void(0) prevents problems with redefinition\n                        // of `undefined`.\n                        if (result !== void 0) {\n                            resolve(result);\n                            return;\n                        }\n                    }\n\n                    resolve();\n                }, function (t, error) {\n                    reject(error);\n                });\n            });\n        })[\"catch\"](reject);\n    });\n\n    executeCallback(promise, callback);\n    return promise;\n}\n\nfunction _setItem(key, value, callback, retriesLeft) {\n    var self = this;\n\n    key = normalizeKey(key);\n\n    var promise = new Promise$1(function (resolve, reject) {\n        self.ready().then(function () {\n            // The localStorage API doesn't return undefined values in an\n            // \"expected\" way, so undefined is always cast to null in all\n            // drivers. See: https://github.com/mozilla/localForage/pull/42\n            if (value === undefined) {\n                value = null;\n            }\n\n            // Save the original value to pass to the callback.\n            var originalValue = value;\n\n            var dbInfo = self._dbInfo;\n            dbInfo.serializer.serialize(value, function (value, error) {\n                if (error) {\n                    reject(error);\n                } else {\n                    dbInfo.db.transaction(function (t) {\n                        tryExecuteSql(t, dbInfo, 'INSERT OR REPLACE INTO ' + dbInfo.storeName + ' ' + '(key, value) VALUES (?, ?)', [key, value], function () {\n                            resolve(originalValue);\n                        }, function (t, error) {\n                            reject(error);\n                        });\n                    }, function (sqlError) {\n                        // The transaction failed; check\n                        // to see if it's a quota error.\n                        if (sqlError.code === sqlError.QUOTA_ERR) {\n                            // We reject the callback outright for now, but\n                            // it's worth trying to re-run the transaction.\n                            // Even if the user accepts the prompt to use\n                            // more storage on Safari, this error will\n                            // be called.\n                            //\n                            // Try to re-run the transaction.\n                            if (retriesLeft > 0) {\n                                resolve(_setItem.apply(self, [key, originalValue, callback, retriesLeft - 1]));\n                                return;\n                            }\n                            reject(sqlError);\n                        }\n                    });\n                }\n            });\n        })[\"catch\"](reject);\n    });\n\n    executeCallback(promise, callback);\n    return promise;\n}\n\nfunction setItem$1(key, value, callback) {\n    return _setItem.apply(this, [key, value, callback, 1]);\n}\n\nfunction removeItem$1(key, callback) {\n    var self = this;\n\n    key = normalizeKey(key);\n\n    var promise = new Promise$1(function (resolve, reject) {\n        self.ready().then(function () {\n            var dbInfo = self._dbInfo;\n            dbInfo.db.transaction(function (t) {\n                tryExecuteSql(t, dbInfo, 'DELETE FROM ' + dbInfo.storeName + ' WHERE key = ?', [key], function () {\n                    resolve();\n                }, function (t, error) {\n                    reject(error);\n                });\n            });\n        })[\"catch\"](reject);\n    });\n\n    executeCallback(promise, callback);\n    return promise;\n}\n\n// Deletes every item in the table.\n// TODO: Find out if this resets the AUTO_INCREMENT number.\nfunction clear$1(callback) {\n    var self = this;\n\n    var promise = new Promise$1(function (resolve, reject) {\n        self.ready().then(function () {\n            var dbInfo = self._dbInfo;\n            dbInfo.db.transaction(function (t) {\n                tryExecuteSql(t, dbInfo, 'DELETE FROM ' + dbInfo.storeName, [], function () {\n                    resolve();\n                }, function (t, error) {\n                    reject(error);\n                });\n            });\n        })[\"catch\"](reject);\n    });\n\n    executeCallback(promise, callback);\n    return promise;\n}\n\n// Does a simple `COUNT(key)` to get the number of items stored in\n// localForage.\nfunction length$1(callback) {\n    var self = this;\n\n    var promise = new Promise$1(function (resolve, reject) {\n        self.ready().then(function () {\n            var dbInfo = self._dbInfo;\n            dbInfo.db.transaction(function (t) {\n                // Ahhh, SQL makes this one soooooo easy.\n                tryExecuteSql(t, dbInfo, 'SELECT COUNT(key) as c FROM ' + dbInfo.storeName, [], function (t, results) {\n                    var result = results.rows.item(0).c;\n                    resolve(result);\n                }, function (t, error) {\n                    reject(error);\n                });\n            });\n        })[\"catch\"](reject);\n    });\n\n    executeCallback(promise, callback);\n    return promise;\n}\n\n// Return the key located at key index X; essentially gets the key from a\n// `WHERE id = ?`. This is the most efficient way I can think to implement\n// this rarely-used (in my experience) part of the API, but it can seem\n// inconsistent, because we do `INSERT OR REPLACE INTO` on `setItem()`, so\n// the ID of each key will change every time it's updated. Perhaps a stored\n// procedure for the `setItem()` SQL would solve this problem?\n// TODO: Don't change ID on `setItem()`.\nfunction key$1(n, callback) {\n    var self = this;\n\n    var promise = new Promise$1(function (resolve, reject) {\n        self.ready().then(function () {\n            var dbInfo = self._dbInfo;\n            dbInfo.db.transaction(function (t) {\n                tryExecuteSql(t, dbInfo, 'SELECT key FROM ' + dbInfo.storeName + ' WHERE id = ? LIMIT 1', [n + 1], function (t, results) {\n                    var result = results.rows.length ? results.rows.item(0).key : null;\n                    resolve(result);\n                }, function (t, error) {\n                    reject(error);\n                });\n            });\n        })[\"catch\"](reject);\n    });\n\n    executeCallback(promise, callback);\n    return promise;\n}\n\nfunction keys$1(callback) {\n    var self = this;\n\n    var promise = new Promise$1(function (resolve, reject) {\n        self.ready().then(function () {\n            var dbInfo = self._dbInfo;\n            dbInfo.db.transaction(function (t) {\n                tryExecuteSql(t, dbInfo, 'SELECT key FROM ' + dbInfo.storeName, [], function (t, results) {\n                    var keys = [];\n\n                    for (var i = 0; i < results.rows.length; i++) {\n                        keys.push(results.rows.item(i).key);\n                    }\n\n                    resolve(keys);\n                }, function (t, error) {\n                    reject(error);\n                });\n            });\n        })[\"catch\"](reject);\n    });\n\n    executeCallback(promise, callback);\n    return promise;\n}\n\n// https://www.w3.org/TR/webdatabase/#databases\n// > There is no way to enumerate or delete the databases available for an origin from this API.\nfunction getAllStoreNames(db) {\n    return new Promise$1(function (resolve, reject) {\n        db.transaction(function (t) {\n            t.executeSql('SELECT name FROM sqlite_master ' + \"WHERE type='table' AND name <> '__WebKitDatabaseInfoTable__'\", [], function (t, results) {\n                var storeNames = [];\n\n                for (var i = 0; i < results.rows.length; i++) {\n                    storeNames.push(results.rows.item(i).name);\n                }\n\n                resolve({\n                    db: db,\n                    storeNames: storeNames\n                });\n            }, function (t, error) {\n                reject(error);\n            });\n        }, function (sqlError) {\n            reject(sqlError);\n        });\n    });\n}\n\nfunction dropInstance$1(options, callback) {\n    callback = getCallback.apply(this, arguments);\n\n    var currentConfig = this.config();\n    options = typeof options !== 'function' && options || {};\n    if (!options.name) {\n        options.name = options.name || currentConfig.name;\n        options.storeName = options.storeName || currentConfig.storeName;\n    }\n\n    var self = this;\n    var promise;\n    if (!options.name) {\n        promise = Promise$1.reject('Invalid arguments');\n    } else {\n        promise = new Promise$1(function (resolve) {\n            var db;\n            if (options.name === currentConfig.name) {\n                // use the db reference of the current instance\n                db = self._dbInfo.db;\n            } else {\n                db = openDatabase(options.name, '', '', 0);\n            }\n\n            if (!options.storeName) {\n                // drop all database tables\n                resolve(getAllStoreNames(db));\n            } else {\n                resolve({\n                    db: db,\n                    storeNames: [options.storeName]\n                });\n            }\n        }).then(function (operationInfo) {\n            return new Promise$1(function (resolve, reject) {\n                operationInfo.db.transaction(function (t) {\n                    function dropTable(storeName) {\n                        return new Promise$1(function (resolve, reject) {\n                            t.executeSql('DROP TABLE IF EXISTS ' + storeName, [], function () {\n                                resolve();\n                            }, function (t, error) {\n                                reject(error);\n                            });\n                        });\n                    }\n\n                    var operations = [];\n                    for (var i = 0, len = operationInfo.storeNames.length; i < len; i++) {\n                        operations.push(dropTable(operationInfo.storeNames[i]));\n                    }\n\n                    Promise$1.all(operations).then(function () {\n                        resolve();\n                    })[\"catch\"](function (e) {\n                        reject(e);\n                    });\n                }, function (sqlError) {\n                    reject(sqlError);\n                });\n            });\n        });\n    }\n\n    executeCallback(promise, callback);\n    return promise;\n}\n\nvar webSQLStorage = {\n    _driver: 'webSQLStorage',\n    _initStorage: _initStorage$1,\n    _support: isWebSQLValid(),\n    iterate: iterate$1,\n    getItem: getItem$1,\n    setItem: setItem$1,\n    removeItem: removeItem$1,\n    clear: clear$1,\n    length: length$1,\n    key: key$1,\n    keys: keys$1,\n    dropInstance: dropInstance$1\n};\n\nfunction isLocalStorageValid() {\n    try {\n        return typeof localStorage !== 'undefined' && 'setItem' in localStorage &&\n        // in IE8 typeof localStorage.setItem === 'object'\n        !!localStorage.setItem;\n    } catch (e) {\n        return false;\n    }\n}\n\nfunction _getKeyPrefix(options, defaultConfig) {\n    var keyPrefix = options.name + '/';\n\n    if (options.storeName !== defaultConfig.storeName) {\n        keyPrefix += options.storeName + '/';\n    }\n    return keyPrefix;\n}\n\n// Check if localStorage throws when saving an item\nfunction checkIfLocalStorageThrows() {\n    var localStorageTestKey = '_localforage_support_test';\n\n    try {\n        localStorage.setItem(localStorageTestKey, true);\n        localStorage.removeItem(localStorageTestKey);\n\n        return false;\n    } catch (e) {\n        return true;\n    }\n}\n\n// Check if localStorage is usable and allows to save an item\n// This method checks if localStorage is usable in Safari Private Browsing\n// mode, or in any other case where the available quota for localStorage\n// is 0 and there wasn't any saved items yet.\nfunction _isLocalStorageUsable() {\n    return !checkIfLocalStorageThrows() || localStorage.length > 0;\n}\n\n// Config the localStorage backend, using options set in the config.\nfunction _initStorage$2(options) {\n    var self = this;\n    var dbInfo = {};\n    if (options) {\n        for (var i in options) {\n            dbInfo[i] = options[i];\n        }\n    }\n\n    dbInfo.keyPrefix = _getKeyPrefix(options, self._defaultConfig);\n\n    if (!_isLocalStorageUsable()) {\n        return Promise$1.reject();\n    }\n\n    self._dbInfo = dbInfo;\n    dbInfo.serializer = localforageSerializer;\n\n    return Promise$1.resolve();\n}\n\n// Remove all keys from the datastore, effectively destroying all data in\n// the app's key/value store!\nfunction clear$2(callback) {\n    var self = this;\n    var promise = self.ready().then(function () {\n        var keyPrefix = self._dbInfo.keyPrefix;\n\n        for (var i = localStorage.length - 1; i >= 0; i--) {\n            var key = localStorage.key(i);\n\n            if (key.indexOf(keyPrefix) === 0) {\n                localStorage.removeItem(key);\n            }\n        }\n    });\n\n    executeCallback(promise, callback);\n    return promise;\n}\n\n// Retrieve an item from the store. Unlike the original async_storage\n// library in Gaia, we don't modify return values at all. If a key's value\n// is `undefined`, we pass that value to the callback function.\nfunction getItem$2(key, callback) {\n    var self = this;\n\n    key = normalizeKey(key);\n\n    var promise = self.ready().then(function () {\n        var dbInfo = self._dbInfo;\n        var result = localStorage.getItem(dbInfo.keyPrefix + key);\n\n        // If a result was found, parse it from the serialized\n        // string into a JS object. If result isn't truthy, the key\n        // is likely undefined and we'll pass it straight to the\n        // callback.\n        if (result) {\n            result = dbInfo.serializer.deserialize(result);\n        }\n\n        return result;\n    });\n\n    executeCallback(promise, callback);\n    return promise;\n}\n\n// Iterate over all items in the store.\nfunction iterate$2(iterator, callback) {\n    var self = this;\n\n    var promise = self.ready().then(function () {\n        var dbInfo = self._dbInfo;\n        var keyPrefix = dbInfo.keyPrefix;\n        var keyPrefixLength = keyPrefix.length;\n        var length = localStorage.length;\n\n        // We use a dedicated iterator instead of the `i` variable below\n        // so other keys we fetch in localStorage aren't counted in\n        // the `iterationNumber` argument passed to the `iterate()`\n        // callback.\n        //\n        // See: github.com/mozilla/localForage/pull/435#discussion_r38061530\n        var iterationNumber = 1;\n\n        for (var i = 0; i < length; i++) {\n            var key = localStorage.key(i);\n            if (key.indexOf(keyPrefix) !== 0) {\n                continue;\n            }\n            var value = localStorage.getItem(key);\n\n            // If a result was found, parse it from the serialized\n            // string into a JS object. If result isn't truthy, the\n            // key is likely undefined and we'll pass it straight\n            // to the iterator.\n            if (value) {\n                value = dbInfo.serializer.deserialize(value);\n            }\n\n            value = iterator(value, key.substring(keyPrefixLength), iterationNumber++);\n\n            if (value !== void 0) {\n                return value;\n            }\n        }\n    });\n\n    executeCallback(promise, callback);\n    return promise;\n}\n\n// Same as localStorage's key() method, except takes a callback.\nfunction key$2(n, callback) {\n    var self = this;\n    var promise = self.ready().then(function () {\n        var dbInfo = self._dbInfo;\n        var result;\n        try {\n            result = localStorage.key(n);\n        } catch (error) {\n            result = null;\n        }\n\n        // Remove the prefix from the key, if a key is found.\n        if (result) {\n            result = result.substring(dbInfo.keyPrefix.length);\n        }\n\n        return result;\n    });\n\n    executeCallback(promise, callback);\n    return promise;\n}\n\nfunction keys$2(callback) {\n    var self = this;\n    var promise = self.ready().then(function () {\n        var dbInfo = self._dbInfo;\n        var length = localStorage.length;\n        var keys = [];\n\n        for (var i = 0; i < length; i++) {\n            var itemKey = localStorage.key(i);\n            if (itemKey.indexOf(dbInfo.keyPrefix) === 0) {\n                keys.push(itemKey.substring(dbInfo.keyPrefix.length));\n            }\n        }\n\n        return keys;\n    });\n\n    executeCallback(promise, callback);\n    return promise;\n}\n\n// Supply the number of keys in the datastore to the callback function.\nfunction length$2(callback) {\n    var self = this;\n    var promise = self.keys().then(function (keys) {\n        return keys.length;\n    });\n\n    executeCallback(promise, callback);\n    return promise;\n}\n\n// Remove an item from the store, nice and simple.\nfunction removeItem$2(key, callback) {\n    var self = this;\n\n    key = normalizeKey(key);\n\n    var promise = self.ready().then(function () {\n        var dbInfo = self._dbInfo;\n        localStorage.removeItem(dbInfo.keyPrefix + key);\n    });\n\n    executeCallback(promise, callback);\n    return promise;\n}\n\n// Set a key's value and run an optional callback once the value is set.\n// Unlike Gaia's implementation, the callback function is passed the value,\n// in case you want to operate on that value only after you're sure it\n// saved, or something like that.\nfunction setItem$2(key, value, callback) {\n    var self = this;\n\n    key = normalizeKey(key);\n\n    var promise = self.ready().then(function () {\n        // Convert undefined values to null.\n        // https://github.com/mozilla/localForage/pull/42\n        if (value === undefined) {\n            value = null;\n        }\n\n        // Save the original value to pass to the callback.\n        var originalValue = value;\n\n        return new Promise$1(function (resolve, reject) {\n            var dbInfo = self._dbInfo;\n            dbInfo.serializer.serialize(value, function (value, error) {\n                if (error) {\n                    reject(error);\n                } else {\n                    try {\n                        localStorage.setItem(dbInfo.keyPrefix + key, value);\n                        resolve(originalValue);\n                    } catch (e) {\n                        // localStorage capacity exceeded.\n                        // TODO: Make this a specific error/event.\n                        if (e.name === 'QuotaExceededError' || e.name === 'NS_ERROR_DOM_QUOTA_REACHED') {\n                            reject(e);\n                        }\n                        reject(e);\n                    }\n                }\n            });\n        });\n    });\n\n    executeCallback(promise, callback);\n    return promise;\n}\n\nfunction dropInstance$2(options, callback) {\n    callback = getCallback.apply(this, arguments);\n\n    options = typeof options !== 'function' && options || {};\n    if (!options.name) {\n        var currentConfig = this.config();\n        options.name = options.name || currentConfig.name;\n        options.storeName = options.storeName || currentConfig.storeName;\n    }\n\n    var self = this;\n    var promise;\n    if (!options.name) {\n        promise = Promise$1.reject('Invalid arguments');\n    } else {\n        promise = new Promise$1(function (resolve) {\n            if (!options.storeName) {\n                resolve(options.name + '/');\n            } else {\n                resolve(_getKeyPrefix(options, self._defaultConfig));\n            }\n        }).then(function (keyPrefix) {\n            for (var i = localStorage.length - 1; i >= 0; i--) {\n                var key = localStorage.key(i);\n\n                if (key.indexOf(keyPrefix) === 0) {\n                    localStorage.removeItem(key);\n                }\n            }\n        });\n    }\n\n    executeCallback(promise, callback);\n    return promise;\n}\n\nvar localStorageWrapper = {\n    _driver: 'localStorageWrapper',\n    _initStorage: _initStorage$2,\n    _support: isLocalStorageValid(),\n    iterate: iterate$2,\n    getItem: getItem$2,\n    setItem: setItem$2,\n    removeItem: removeItem$2,\n    clear: clear$2,\n    length: length$2,\n    key: key$2,\n    keys: keys$2,\n    dropInstance: dropInstance$2\n};\n\nvar sameValue = function sameValue(x, y) {\n    return x === y || typeof x === 'number' && typeof y === 'number' && isNaN(x) && isNaN(y);\n};\n\nvar includes = function includes(array, searchElement) {\n    var len = array.length;\n    var i = 0;\n    while (i < len) {\n        if (sameValue(array[i], searchElement)) {\n            return true;\n        }\n        i++;\n    }\n\n    return false;\n};\n\nvar isArray = Array.isArray || function (arg) {\n    return Object.prototype.toString.call(arg) === '[object Array]';\n};\n\n// Drivers are stored here when `defineDriver()` is called.\n// They are shared across all instances of localForage.\nvar DefinedDrivers = {};\n\nvar DriverSupport = {};\n\nvar DefaultDrivers = {\n    INDEXEDDB: asyncStorage,\n    WEBSQL: webSQLStorage,\n    LOCALSTORAGE: localStorageWrapper\n};\n\nvar DefaultDriverOrder = [DefaultDrivers.INDEXEDDB._driver, DefaultDrivers.WEBSQL._driver, DefaultDrivers.LOCALSTORAGE._driver];\n\nvar OptionalDriverMethods = ['dropInstance'];\n\nvar LibraryMethods = ['clear', 'getItem', 'iterate', 'key', 'keys', 'length', 'removeItem', 'setItem'].concat(OptionalDriverMethods);\n\nvar DefaultConfig = {\n    description: '',\n    driver: DefaultDriverOrder.slice(),\n    name: 'localforage',\n    // Default DB size is _JUST UNDER_ 5MB, as it's the highest size\n    // we can use without a prompt.\n    size: 4980736,\n    storeName: 'keyvaluepairs',\n    version: 1.0\n};\n\nfunction callWhenReady(localForageInstance, libraryMethod) {\n    localForageInstance[libraryMethod] = function () {\n        var _args = arguments;\n        return localForageInstance.ready().then(function () {\n            return localForageInstance[libraryMethod].apply(localForageInstance, _args);\n        });\n    };\n}\n\nfunction extend() {\n    for (var i = 1; i < arguments.length; i++) {\n        var arg = arguments[i];\n\n        if (arg) {\n            for (var _key in arg) {\n                if (arg.hasOwnProperty(_key)) {\n                    if (isArray(arg[_key])) {\n                        arguments[0][_key] = arg[_key].slice();\n                    } else {\n                        arguments[0][_key] = arg[_key];\n                    }\n                }\n            }\n        }\n    }\n\n    return arguments[0];\n}\n\nvar LocalForage = function () {\n    function LocalForage(options) {\n        _classCallCheck(this, LocalForage);\n\n        for (var driverTypeKey in DefaultDrivers) {\n            if (DefaultDrivers.hasOwnProperty(driverTypeKey)) {\n                var driver = DefaultDrivers[driverTypeKey];\n                var driverName = driver._driver;\n                this[driverTypeKey] = driverName;\n\n                if (!DefinedDrivers[driverName]) {\n                    // we don't need to wait for the promise,\n                    // since the default drivers can be defined\n                    // in a blocking manner\n                    this.defineDriver(driver);\n                }\n            }\n        }\n\n        this._defaultConfig = extend({}, DefaultConfig);\n        this._config = extend({}, this._defaultConfig, options);\n        this._driverSet = null;\n        this._initDriver = null;\n        this._ready = false;\n        this._dbInfo = null;\n\n        this._wrapLibraryMethodsWithReady();\n        this.setDriver(this._config.driver)[\"catch\"](function () {});\n    }\n\n    // Set any config values for localForage; can be called anytime before\n    // the first API call (e.g. `getItem`, `setItem`).\n    // We loop through options so we don't overwrite existing config\n    // values.\n\n\n    LocalForage.prototype.config = function config(options) {\n        // If the options argument is an object, we use it to set values.\n        // Otherwise, we return either a specified config value or all\n        // config values.\n        if ((typeof options === 'undefined' ? 'undefined' : _typeof(options)) === 'object') {\n            // If localforage is ready and fully initialized, we can't set\n            // any new configuration values. Instead, we return an error.\n            if (this._ready) {\n                return new Error(\"Can't call config() after localforage \" + 'has been used.');\n            }\n\n            for (var i in options) {\n                if (i === 'storeName') {\n                    options[i] = options[i].replace(/\\W/g, '_');\n                }\n\n                if (i === 'version' && typeof options[i] !== 'number') {\n                    return new Error('Database version must be a number.');\n                }\n\n                this._config[i] = options[i];\n            }\n\n            // after all config options are set and\n            // the driver option is used, try setting it\n            if ('driver' in options && options.driver) {\n                return this.setDriver(this._config.driver);\n            }\n\n            return true;\n        } else if (typeof options === 'string') {\n            return this._config[options];\n        } else {\n            return this._config;\n        }\n    };\n\n    // Used to define a custom driver, shared across all instances of\n    // localForage.\n\n\n    LocalForage.prototype.defineDriver = function defineDriver(driverObject, callback, errorCallback) {\n        var promise = new Promise$1(function (resolve, reject) {\n            try {\n                var driverName = driverObject._driver;\n                var complianceError = new Error('Custom driver not compliant; see ' + 'https://mozilla.github.io/localForage/#definedriver');\n\n                // A driver name should be defined and not overlap with the\n                // library-defined, default drivers.\n                if (!driverObject._driver) {\n                    reject(complianceError);\n                    return;\n                }\n\n                var driverMethods = LibraryMethods.concat('_initStorage');\n                for (var i = 0, len = driverMethods.length; i < len; i++) {\n                    var driverMethodName = driverMethods[i];\n\n                    // when the property is there,\n                    // it should be a method even when optional\n                    var isRequired = !includes(OptionalDriverMethods, driverMethodName);\n                    if ((isRequired || driverObject[driverMethodName]) && typeof driverObject[driverMethodName] !== 'function') {\n                        reject(complianceError);\n                        return;\n                    }\n                }\n\n                var configureMissingMethods = function configureMissingMethods() {\n                    var methodNotImplementedFactory = function methodNotImplementedFactory(methodName) {\n                        return function () {\n                            var error = new Error('Method ' + methodName + ' is not implemented by the current driver');\n                            var promise = Promise$1.reject(error);\n                            executeCallback(promise, arguments[arguments.length - 1]);\n                            return promise;\n                        };\n                    };\n\n                    for (var _i = 0, _len = OptionalDriverMethods.length; _i < _len; _i++) {\n                        var optionalDriverMethod = OptionalDriverMethods[_i];\n                        if (!driverObject[optionalDriverMethod]) {\n                            driverObject[optionalDriverMethod] = methodNotImplementedFactory(optionalDriverMethod);\n                        }\n                    }\n                };\n\n                configureMissingMethods();\n\n                var setDriverSupport = function setDriverSupport(support) {\n                    if (DefinedDrivers[driverName]) {\n                        console.info('Redefining LocalForage driver: ' + driverName);\n                    }\n                    DefinedDrivers[driverName] = driverObject;\n                    DriverSupport[driverName] = support;\n                    // don't use a then, so that we can define\n                    // drivers that have simple _support methods\n                    // in a blocking manner\n                    resolve();\n                };\n\n                if ('_support' in driverObject) {\n                    if (driverObject._support && typeof driverObject._support === 'function') {\n                        driverObject._support().then(setDriverSupport, reject);\n                    } else {\n                        setDriverSupport(!!driverObject._support);\n                    }\n                } else {\n                    setDriverSupport(true);\n                }\n            } catch (e) {\n                reject(e);\n            }\n        });\n\n        executeTwoCallbacks(promise, callback, errorCallback);\n        return promise;\n    };\n\n    LocalForage.prototype.driver = function driver() {\n        return this._driver || null;\n    };\n\n    LocalForage.prototype.getDriver = function getDriver(driverName, callback, errorCallback) {\n        var getDriverPromise = DefinedDrivers[driverName] ? Promise$1.resolve(DefinedDrivers[driverName]) : Promise$1.reject(new Error('Driver not found.'));\n\n        executeTwoCallbacks(getDriverPromise, callback, errorCallback);\n        return getDriverPromise;\n    };\n\n    LocalForage.prototype.getSerializer = function getSerializer(callback) {\n        var serializerPromise = Promise$1.resolve(localforageSerializer);\n        executeTwoCallbacks(serializerPromise, callback);\n        return serializerPromise;\n    };\n\n    LocalForage.prototype.ready = function ready(callback) {\n        var self = this;\n\n        var promise = self._driverSet.then(function () {\n            if (self._ready === null) {\n                self._ready = self._initDriver();\n            }\n\n            return self._ready;\n        });\n\n        executeTwoCallbacks(promise, callback, callback);\n        return promise;\n    };\n\n    LocalForage.prototype.setDriver = function setDriver(drivers, callback, errorCallback) {\n        var self = this;\n\n        if (!isArray(drivers)) {\n            drivers = [drivers];\n        }\n\n        var supportedDrivers = this._getSupportedDrivers(drivers);\n\n        function setDriverToConfig() {\n            self._config.driver = self.driver();\n        }\n\n        function extendSelfWithDriver(driver) {\n            self._extend(driver);\n            setDriverToConfig();\n\n            self._ready = self._initStorage(self._config);\n            return self._ready;\n        }\n\n        function initDriver(supportedDrivers) {\n            return function () {\n                var currentDriverIndex = 0;\n\n                function driverPromiseLoop() {\n                    while (currentDriverIndex < supportedDrivers.length) {\n                        var driverName = supportedDrivers[currentDriverIndex];\n                        currentDriverIndex++;\n\n                        self._dbInfo = null;\n                        self._ready = null;\n\n                        return self.getDriver(driverName).then(extendSelfWithDriver)[\"catch\"](driverPromiseLoop);\n                    }\n\n                    setDriverToConfig();\n                    var error = new Error('No available storage method found.');\n                    self._driverSet = Promise$1.reject(error);\n                    return self._driverSet;\n                }\n\n                return driverPromiseLoop();\n            };\n        }\n\n        // There might be a driver initialization in progress\n        // so wait for it to finish in order to avoid a possible\n        // race condition to set _dbInfo\n        var oldDriverSetDone = this._driverSet !== null ? this._driverSet[\"catch\"](function () {\n            return Promise$1.resolve();\n        }) : Promise$1.resolve();\n\n        this._driverSet = oldDriverSetDone.then(function () {\n            var driverName = supportedDrivers[0];\n            self._dbInfo = null;\n            self._ready = null;\n\n            return self.getDriver(driverName).then(function (driver) {\n                self._driver = driver._driver;\n                setDriverToConfig();\n                self._wrapLibraryMethodsWithReady();\n                self._initDriver = initDriver(supportedDrivers);\n            });\n        })[\"catch\"](function () {\n            setDriverToConfig();\n            var error = new Error('No available storage method found.');\n            self._driverSet = Promise$1.reject(error);\n            return self._driverSet;\n        });\n\n        executeTwoCallbacks(this._driverSet, callback, errorCallback);\n        return this._driverSet;\n    };\n\n    LocalForage.prototype.supports = function supports(driverName) {\n        return !!DriverSupport[driverName];\n    };\n\n    LocalForage.prototype._extend = function _extend(libraryMethodsAndProperties) {\n        extend(this, libraryMethodsAndProperties);\n    };\n\n    LocalForage.prototype._getSupportedDrivers = function _getSupportedDrivers(drivers) {\n        var supportedDrivers = [];\n        for (var i = 0, len = drivers.length; i < len; i++) {\n            var driverName = drivers[i];\n            if (this.supports(driverName)) {\n                supportedDrivers.push(driverName);\n            }\n        }\n        return supportedDrivers;\n    };\n\n    LocalForage.prototype._wrapLibraryMethodsWithReady = function _wrapLibraryMethodsWithReady() {\n        // Add a stub for each driver API method that delays the call to the\n        // corresponding driver method until localForage is ready. These stubs\n        // will be replaced by the driver methods as soon as the driver is\n        // loaded, so there is no performance impact.\n        for (var i = 0, len = LibraryMethods.length; i < len; i++) {\n            callWhenReady(this, LibraryMethods[i]);\n        }\n    };\n\n    LocalForage.prototype.createInstance = function createInstance(options) {\n        return new LocalForage(options);\n    };\n\n    return LocalForage;\n}();\n\n// The actual localForage object that we expose as a module or via a\n// global. It's extended by pulling in one of our other libraries.\n\n\nvar localforage_js = new LocalForage();\n\nmodule.exports = localforage_js;\n\n},{\"3\":3}]},{},[4])(4)\n});\n","export default \"{\\\"puzzles\\\":[{\\\"puzName\\\":\\\"treasure_chest\\\",\\\"battleGroupName\\\":\\\"treasure_chest\\\",\\\"order\\\":0,\\\"round\\\":\\\"cutscenes\\\",\\\"unlockReq\\\":0,\\\"unlockMult\\\":1,\\\"srcUnlockGroupId\\\":\\\"start\\\",\\\"dstUnlockGroupId\\\":\\\"intro\\\",\\\"cardUnlockGroupId\\\":null,\\\"answer\\\":null,\\\"triggersBattleGroupSolve\\\":false,\\\"isCutscene\\\":true,\\\"isFullPuzzle\\\":false},{\\\"puzName\\\":\\\"tutorial\\\",\\\"battleGroupName\\\":\\\"tutorial\\\",\\\"order\\\":1,\\\"round\\\":\\\"battles\\\",\\\"unlockReq\\\":1,\\\"unlockMult\\\":1,\\\"srcUnlockGroupId\\\":\\\"intro\\\",\\\"dstUnlockGroupId\\\":\\\"tutorial_complete\\\",\\\"cardUnlockGroupId\\\":null,\\\"answer\\\":null,\\\"triggersBattleGroupSolve\\\":false,\\\"isCutscene\\\":false,\\\"isFullPuzzle\\\":true},{\\\"puzName\\\":\\\"tutorial1\\\",\\\"battleGroupName\\\":\\\"tutorial\\\",\\\"order\\\":2,\\\"round\\\":\\\"battles\\\",\\\"unlockReq\\\":-1,\\\"unlockMult\\\":1,\\\"srcUnlockGroupId\\\":\\\"none\\\",\\\"dstUnlockGroupId\\\":\\\"tutorial\\\",\\\"cardUnlockGroupId\\\":\\\"tutorial1\\\",\\\"answer\\\":null,\\\"triggersBattleGroupSolve\\\":false,\\\"isCutscene\\\":false,\\\"isFullPuzzle\\\":false},{\\\"puzName\\\":\\\"tutorial2\\\",\\\"battleGroupName\\\":\\\"tutorial\\\",\\\"order\\\":3,\\\"round\\\":\\\"battles\\\",\\\"unlockReq\\\":1,\\\"unlockMult\\\":1,\\\"srcUnlockGroupId\\\":\\\"tutorial\\\",\\\"dstUnlockGroupId\\\":\\\"tutorial\\\",\\\"cardUnlockGroupId\\\":\\\"tutorial2\\\",\\\"answer\\\":null,\\\"triggersBattleGroupSolve\\\":false,\\\"isCutscene\\\":false,\\\"isFullPuzzle\\\":false},{\\\"puzName\\\":\\\"tutorial3\\\",\\\"battleGroupName\\\":\\\"tutorial\\\",\\\"order\\\":4,\\\"round\\\":\\\"battles\\\",\\\"unlockReq\\\":2,\\\"unlockMult\\\":1,\\\"srcUnlockGroupId\\\":\\\"tutorial\\\",\\\"dstUnlockGroupId\\\":\\\"tutorial\\\",\\\"cardUnlockGroupId\\\":\\\"tutorial3\\\",\\\"answer\\\":null,\\\"triggersBattleGroupSolve\\\":false,\\\"isCutscene\\\":false,\\\"isFullPuzzle\\\":false},{\\\"puzName\\\":\\\"tutorial4\\\",\\\"battleGroupName\\\":\\\"tutorial\\\",\\\"order\\\":5,\\\"round\\\":\\\"battles\\\",\\\"unlockReq\\\":3,\\\"unlockMult\\\":1,\\\"srcUnlockGroupId\\\":\\\"tutorial\\\",\\\"dstUnlockGroupId\\\":\\\"tutorial\\\",\\\"cardUnlockGroupId\\\":\\\"tutorial4\\\",\\\"answer\\\":null,\\\"triggersBattleGroupSolve\\\":false,\\\"isCutscene\\\":false,\\\"isFullPuzzle\\\":false},{\\\"puzName\\\":\\\"tutorial5\\\",\\\"battleGroupName\\\":\\\"tutorial\\\",\\\"order\\\":6,\\\"round\\\":\\\"battles\\\",\\\"unlockReq\\\":4,\\\"unlockMult\\\":1,\\\"srcUnlockGroupId\\\":\\\"tutorial\\\",\\\"dstUnlockGroupId\\\":\\\"tutorial\\\",\\\"cardUnlockGroupId\\\":\\\"tutorial5\\\",\\\"answer\\\":null,\\\"triggersBattleGroupSolve\\\":false,\\\"isCutscene\\\":false,\\\"isFullPuzzle\\\":false},{\\\"puzName\\\":\\\"tutorial6\\\",\\\"battleGroupName\\\":\\\"tutorial\\\",\\\"order\\\":7,\\\"round\\\":\\\"battles\\\",\\\"unlockReq\\\":5,\\\"unlockMult\\\":1,\\\"srcUnlockGroupId\\\":\\\"tutorial\\\",\\\"dstUnlockGroupId\\\":\\\"none\\\",\\\"cardUnlockGroupId\\\":\\\"tutorial6\\\",\\\"answer\\\":null,\\\"triggersBattleGroupSolve\\\":true,\\\"isCutscene\\\":false,\\\"isFullPuzzle\\\":false},{\\\"puzName\\\":\\\"first_answer\\\",\\\"battleGroupName\\\":\\\"first_answer\\\",\\\"order\\\":8,\\\"round\\\":\\\"cutscenes\\\",\\\"unlockReq\\\":1,\\\"unlockMult\\\":1,\\\"srcUnlockGroupId\\\":\\\"fish\\\",\\\"dstUnlockGroupId\\\":\\\"first_answer_complete\\\",\\\"cardUnlockGroupId\\\":null,\\\"answer\\\":null,\\\"triggersBattleGroupSolve\\\":false,\\\"isCutscene\\\":true,\\\"isFullPuzzle\\\":false},{\\\"puzName\\\":\\\"first_legendary\\\",\\\"battleGroupName\\\":\\\"first_legendary\\\",\\\"order\\\":9,\\\"round\\\":\\\"cutscenes\\\",\\\"unlockReq\\\":1,\\\"unlockMult\\\":1,\\\"srcUnlockGroupId\\\":\\\"legendaries\\\",\\\"dstUnlockGroupId\\\":\\\"first_legendary_complete\\\",\\\"cardUnlockGroupId\\\":null,\\\"answer\\\":null,\\\"triggersBattleGroupSolve\\\":false,\\\"isCutscene\\\":true,\\\"isFullPuzzle\\\":false},{\\\"puzName\\\":\\\"trigram_hell\\\",\\\"battleGroupName\\\":\\\"trigram_hell\\\",\\\"order\\\":10,\\\"round\\\":\\\"fish\\\",\\\"unlockReq\\\":30,\\\"unlockMult\\\":2,\\\"srcUnlockGroupId\\\":\\\"main\\\",\\\"dstUnlockGroupId\\\":\\\"main\\\",\\\"cardUnlockGroupId\\\":\\\"fish1\\\",\\\"answer\\\":\\\"PERMANENT\\\",\\\"triggersBattleGroupSolve\\\":false,\\\"isCutscene\\\":false,\\\"isFullPuzzle\\\":true},{\\\"puzName\\\":\\\"petroglyph\\\",\\\"battleGroupName\\\":\\\"petroglyph\\\",\\\"order\\\":11,\\\"round\\\":\\\"fish\\\",\\\"unlockReq\\\":30,\\\"unlockMult\\\":2,\\\"srcUnlockGroupId\\\":\\\"main\\\",\\\"dstUnlockGroupId\\\":\\\"main\\\",\\\"cardUnlockGroupId\\\":\\\"fish2\\\",\\\"answer\\\":\\\"CIRCUIT\\\",\\\"triggersBattleGroupSolve\\\":false,\\\"isCutscene\\\":false,\\\"isFullPuzzle\\\":true},{\\\"puzName\\\":\\\"limericks\\\",\\\"battleGroupName\\\":\\\"limericks\\\",\\\"order\\\":12,\\\"round\\\":\\\"fish\\\",\\\"unlockReq\\\":38,\\\"unlockMult\\\":2,\\\"srcUnlockGroupId\\\":\\\"main\\\",\\\"dstUnlockGroupId\\\":\\\"main\\\",\\\"cardUnlockGroupId\\\":\\\"fish3\\\",\\\"answer\\\":\\\"QUALIFIER\\\",\\\"triggersBattleGroupSolve\\\":false,\\\"isCutscene\\\":false,\\\"isFullPuzzle\\\":true},{\\\"puzName\\\":\\\"make_your_own_star_battle\\\",\\\"battleGroupName\\\":\\\"make_your_own_star_battle\\\",\\\"order\\\":13,\\\"round\\\":\\\"fish\\\",\\\"unlockReq\\\":46,\\\"unlockMult\\\":2,\\\"srcUnlockGroupId\\\":\\\"main\\\",\\\"dstUnlockGroupId\\\":\\\"main\\\",\\\"cardUnlockGroupId\\\":\\\"fish4\\\",\\\"answer\\\":\\\"LOTTERY\\\",\\\"triggersBattleGroupSolve\\\":false,\\\"isCutscene\\\":false,\\\"isFullPuzzle\\\":true},{\\\"puzName\\\":\\\"now_i_know\\\",\\\"battleGroupName\\\":\\\"now_i_know\\\",\\\"order\\\":14,\\\"round\\\":\\\"fish\\\",\\\"unlockReq\\\":54,\\\"unlockMult\\\":2,\\\"srcUnlockGroupId\\\":\\\"main\\\",\\\"dstUnlockGroupId\\\":\\\"main\\\",\\\"cardUnlockGroupId\\\":\\\"fish5\\\",\\\"answer\\\":\\\"REPETITION\\\",\\\"triggersBattleGroupSolve\\\":false,\\\"isCutscene\\\":false,\\\"isFullPuzzle\\\":true},{\\\"puzName\\\":\\\"gessner_mom\\\",\\\"battleGroupName\\\":\\\"gessner_mom\\\",\\\"order\\\":15,\\\"round\\\":\\\"fish\\\",\\\"unlockReq\\\":62,\\\"unlockMult\\\":2,\\\"srcUnlockGroupId\\\":\\\"main\\\",\\\"dstUnlockGroupId\\\":\\\"main\\\",\\\"cardUnlockGroupId\\\":\\\"fish6\\\",\\\"answer\\\":\\\"SOCCER\\\",\\\"triggersBattleGroupSolve\\\":false,\\\"isCutscene\\\":false,\\\"isFullPuzzle\\\":true},{\\\"puzName\\\":\\\"console-ation_prize\\\",\\\"battleGroupName\\\":\\\"console-ation_prize\\\",\\\"order\\\":16,\\\"round\\\":\\\"fish\\\",\\\"unlockReq\\\":70,\\\"unlockMult\\\":2,\\\"srcUnlockGroupId\\\":\\\"main\\\",\\\"dstUnlockGroupId\\\":\\\"main\\\",\\\"cardUnlockGroupId\\\":\\\"fish7\\\",\\\"answer\\\":\\\"EVALUATION\\\",\\\"triggersBattleGroupSolve\\\":false,\\\"isCutscene\\\":false,\\\"isFullPuzzle\\\":true},{\\\"puzName\\\":\\\"faces\\\",\\\"battleGroupName\\\":\\\"faces\\\",\\\"order\\\":17,\\\"round\\\":\\\"fish\\\",\\\"unlockReq\\\":78,\\\"unlockMult\\\":2,\\\"srcUnlockGroupId\\\":\\\"main\\\",\\\"dstUnlockGroupId\\\":\\\"main\\\",\\\"cardUnlockGroupId\\\":\\\"fish8\\\",\\\"answer\\\":\\\"PAYMENT METHOD\\\",\\\"triggersBattleGroupSolve\\\":false,\\\"isCutscene\\\":false,\\\"isFullPuzzle\\\":true},{\\\"puzName\\\":\\\"beige_flags\\\",\\\"battleGroupName\\\":\\\"beige_flags\\\",\\\"order\\\":18,\\\"round\\\":\\\"fish\\\",\\\"unlockReq\\\":86,\\\"unlockMult\\\":2,\\\"srcUnlockGroupId\\\":\\\"main\\\",\\\"dstUnlockGroupId\\\":\\\"main\\\",\\\"cardUnlockGroupId\\\":\\\"fish9\\\",\\\"answer\\\":\\\"VACATION\\\",\\\"triggersBattleGroupSolve\\\":false,\\\"isCutscene\\\":false,\\\"isFullPuzzle\\\":true},{\\\"puzName\\\":\\\"animal_shelter\\\",\\\"battleGroupName\\\":\\\"animal_shelter\\\",\\\"order\\\":19,\\\"round\\\":\\\"fish\\\",\\\"unlockReq\\\":94,\\\"unlockMult\\\":2,\\\"srcUnlockGroupId\\\":\\\"main\\\",\\\"dstUnlockGroupId\\\":\\\"main\\\",\\\"cardUnlockGroupId\\\":\\\"fish10\\\",\\\"answer\\\":\\\"RESIDENCY\\\",\\\"triggersBattleGroupSolve\\\":false,\\\"isCutscene\\\":false,\\\"isFullPuzzle\\\":true},{\\\"puzName\\\":\\\"vent\\\",\\\"battleGroupName\\\":\\\"vent\\\",\\\"order\\\":20,\\\"round\\\":\\\"fish\\\",\\\"unlockReq\\\":102,\\\"unlockMult\\\":2,\\\"srcUnlockGroupId\\\":\\\"main\\\",\\\"dstUnlockGroupId\\\":\\\"main\\\",\\\"cardUnlockGroupId\\\":\\\"fish11\\\",\\\"answer\\\":\\\"SPACED\\\",\\\"triggersBattleGroupSolve\\\":false,\\\"isCutscene\\\":false,\\\"isFullPuzzle\\\":true},{\\\"puzName\\\":\\\"paint_by_numbers\\\",\\\"battleGroupName\\\":\\\"paint_by_numbers\\\",\\\"order\\\":21,\\\"round\\\":\\\"fish\\\",\\\"unlockReq\\\":110,\\\"unlockMult\\\":2,\\\"srcUnlockGroupId\\\":\\\"main\\\",\\\"dstUnlockGroupId\\\":\\\"main\\\",\\\"cardUnlockGroupId\\\":\\\"fish12\\\",\\\"answer\\\":\\\"SCHOLASTIC\\\",\\\"triggersBattleGroupSolve\\\":false,\\\"isCutscene\\\":false,\\\"isFullPuzzle\\\":true},{\\\"puzName\\\":\\\"bovine_social_media_corp\\\",\\\"battleGroupName\\\":\\\"bovine_social_media_corp\\\",\\\"order\\\":22,\\\"round\\\":\\\"fish\\\",\\\"unlockReq\\\":118,\\\"unlockMult\\\":2,\\\"srcUnlockGroupId\\\":\\\"main\\\",\\\"dstUnlockGroupId\\\":\\\"main\\\",\\\"cardUnlockGroupId\\\":\\\"fish13\\\",\\\"answer\\\":\\\"EJECTION\\\",\\\"triggersBattleGroupSolve\\\":false,\\\"isCutscene\\\":false,\\\"isFullPuzzle\\\":true},{\\\"puzName\\\":\\\"op_pls_nerf\\\",\\\"battleGroupName\\\":\\\"op_pls_nerf\\\",\\\"order\\\":23,\\\"round\\\":\\\"fish\\\",\\\"unlockReq\\\":126,\\\"unlockMult\\\":2,\\\"srcUnlockGroupId\\\":\\\"main\\\",\\\"dstUnlockGroupId\\\":\\\"main\\\",\\\"cardUnlockGroupId\\\":\\\"fish14\\\",\\\"answer\\\":\\\"TICKET\\\",\\\"triggersBattleGroupSolve\\\":false,\\\"isCutscene\\\":false,\\\"isFullPuzzle\\\":true},{\\\"puzName\\\":\\\"gausss_sketches\\\",\\\"battleGroupName\\\":\\\"gausss_sketches\\\",\\\"order\\\":24,\\\"round\\\":\\\"fish\\\",\\\"unlockReq\\\":134,\\\"unlockMult\\\":2,\\\"srcUnlockGroupId\\\":\\\"main\\\",\\\"dstUnlockGroupId\\\":\\\"main\\\",\\\"cardUnlockGroupId\\\":\\\"fish15\\\",\\\"answer\\\":\\\"INTEGRATED\\\",\\\"triggersBattleGroupSolve\\\":false,\\\"isCutscene\\\":false,\\\"isFullPuzzle\\\":true},{\\\"puzName\\\":\\\"postseason_tournaments\\\",\\\"battleGroupName\\\":\\\"postseason_tournaments\\\",\\\"order\\\":25,\\\"round\\\":\\\"fish\\\",\\\"unlockReq\\\":142,\\\"unlockMult\\\":2,\\\"srcUnlockGroupId\\\":\\\"main\\\",\\\"dstUnlockGroupId\\\":\\\"main\\\",\\\"cardUnlockGroupId\\\":\\\"fish16\\\",\\\"answer\\\":\\\"PLAYOFFS\\\",\\\"triggersBattleGroupSolve\\\":false,\\\"isCutscene\\\":false,\\\"isFullPuzzle\\\":true},{\\\"puzName\\\":\\\"two_worlds_collide\\\",\\\"battleGroupName\\\":\\\"two_worlds_collide\\\",\\\"order\\\":26,\\\"round\\\":\\\"fish\\\",\\\"unlockReq\\\":150,\\\"unlockMult\\\":2,\\\"srcUnlockGroupId\\\":\\\"main\\\",\\\"dstUnlockGroupId\\\":\\\"main\\\",\\\"cardUnlockGroupId\\\":\\\"fish17\\\",\\\"answer\\\":\\\"PLASTIC\\\",\\\"triggersBattleGroupSolve\\\":false,\\\"isCutscene\\\":false,\\\"isFullPuzzle\\\":true},{\\\"puzName\\\":\\\"areciboar\\\",\\\"battleGroupName\\\":\\\"areciboar\\\",\\\"order\\\":27,\\\"round\\\":\\\"fish\\\",\\\"unlockReq\\\":158,\\\"unlockMult\\\":2,\\\"srcUnlockGroupId\\\":\\\"main\\\",\\\"dstUnlockGroupId\\\":\\\"main\\\",\\\"cardUnlockGroupId\\\":\\\"fish18\\\",\\\"answer\\\":\\\"MESSAGE\\\",\\\"triggersBattleGroupSolve\\\":false,\\\"isCutscene\\\":false,\\\"isFullPuzzle\\\":true},{\\\"puzName\\\":\\\"mastery_tree\\\",\\\"battleGroupName\\\":\\\"mastery_tree\\\",\\\"order\\\":28,\\\"round\\\":\\\"fish\\\",\\\"unlockReq\\\":1,\\\"unlockMult\\\":1,\\\"srcUnlockGroupId\\\":\\\"first_answer_complete\\\",\\\"dstUnlockGroupId\\\":\\\"none\\\",\\\"cardUnlockGroupId\\\":\\\"legendary-14\\\",\\\"answer\\\":\\\"CAPTAIN PI CARD\\\",\\\"triggersBattleGroupSolve\\\":false,\\\"isCutscene\\\":false,\\\"isFullPuzzle\\\":true},{\\\"puzName\\\":\\\"m1\\\",\\\"battleGroupName\\\":\\\"mastery_tree\\\",\\\"order\\\":29,\\\"round\\\":\\\"fish\\\",\\\"unlockReq\\\":-1,\\\"unlockMult\\\":1,\\\"srcUnlockGroupId\\\":\\\"none\\\",\\\"dstUnlockGroupId\\\":\\\"none\\\",\\\"cardUnlockGroupId\\\":null,\\\"answer\\\":null,\\\"triggersBattleGroupSolve\\\":false,\\\"isCutscene\\\":false,\\\"isFullPuzzle\\\":false},{\\\"puzName\\\":\\\"m2\\\",\\\"battleGroupName\\\":\\\"mastery_tree\\\",\\\"order\\\":30,\\\"round\\\":\\\"fish\\\",\\\"unlockReq\\\":-1,\\\"unlockMult\\\":1,\\\"srcUnlockGroupId\\\":\\\"none\\\",\\\"dstUnlockGroupId\\\":\\\"none\\\",\\\"cardUnlockGroupId\\\":null,\\\"answer\\\":null,\\\"triggersBattleGroupSolve\\\":false,\\\"isCutscene\\\":false,\\\"isFullPuzzle\\\":false},{\\\"puzName\\\":\\\"m3\\\",\\\"battleGroupName\\\":\\\"mastery_tree\\\",\\\"order\\\":31,\\\"round\\\":\\\"fish\\\",\\\"unlockReq\\\":-1,\\\"unlockMult\\\":1,\\\"srcUnlockGroupId\\\":\\\"none\\\",\\\"dstUnlockGroupId\\\":\\\"none\\\",\\\"cardUnlockGroupId\\\":null,\\\"answer\\\":null,\\\"triggersBattleGroupSolve\\\":false,\\\"isCutscene\\\":false,\\\"isFullPuzzle\\\":false},{\\\"puzName\\\":\\\"m4\\\",\\\"battleGroupName\\\":\\\"mastery_tree\\\",\\\"order\\\":32,\\\"round\\\":\\\"fish\\\",\\\"unlockReq\\\":-1,\\\"unlockMult\\\":1,\\\"srcUnlockGroupId\\\":\\\"none\\\",\\\"dstUnlockGroupId\\\":\\\"none\\\",\\\"cardUnlockGroupId\\\":null,\\\"answer\\\":null,\\\"triggersBattleGroupSolve\\\":false,\\\"isCutscene\\\":false,\\\"isFullPuzzle\\\":false},{\\\"puzName\\\":\\\"m5\\\",\\\"battleGroupName\\\":\\\"mastery_tree\\\",\\\"order\\\":33,\\\"round\\\":\\\"fish\\\",\\\"unlockReq\\\":-1,\\\"unlockMult\\\":1,\\\"srcUnlockGroupId\\\":\\\"none\\\",\\\"dstUnlockGroupId\\\":\\\"none\\\",\\\"cardUnlockGroupId\\\":null,\\\"answer\\\":null,\\\"triggersBattleGroupSolve\\\":false,\\\"isCutscene\\\":false,\\\"isFullPuzzle\\\":false},{\\\"puzName\\\":\\\"m6\\\",\\\"battleGroupName\\\":\\\"mastery_tree\\\",\\\"order\\\":34,\\\"round\\\":\\\"fish\\\",\\\"unlockReq\\\":-1,\\\"unlockMult\\\":1,\\\"srcUnlockGroupId\\\":\\\"none\\\",\\\"dstUnlockGroupId\\\":\\\"none\\\",\\\"cardUnlockGroupId\\\":null,\\\"answer\\\":null,\\\"triggersBattleGroupSolve\\\":false,\\\"isCutscene\\\":false,\\\"isFullPuzzle\\\":false},{\\\"puzName\\\":\\\"m7\\\",\\\"battleGroupName\\\":\\\"mastery_tree\\\",\\\"order\\\":35,\\\"round\\\":\\\"fish\\\",\\\"unlockReq\\\":-1,\\\"unlockMult\\\":1,\\\"srcUnlockGroupId\\\":\\\"none\\\",\\\"dstUnlockGroupId\\\":\\\"none\\\",\\\"cardUnlockGroupId\\\":null,\\\"answer\\\":null,\\\"triggersBattleGroupSolve\\\":false,\\\"isCutscene\\\":false,\\\"isFullPuzzle\\\":false},{\\\"puzName\\\":\\\"m8\\\",\\\"battleGroupName\\\":\\\"mastery_tree\\\",\\\"order\\\":36,\\\"round\\\":\\\"fish\\\",\\\"unlockReq\\\":-1,\\\"unlockMult\\\":1,\\\"srcUnlockGroupId\\\":\\\"none\\\",\\\"dstUnlockGroupId\\\":\\\"none\\\",\\\"cardUnlockGroupId\\\":null,\\\"answer\\\":null,\\\"triggersBattleGroupSolve\\\":false,\\\"isCutscene\\\":false,\\\"isFullPuzzle\\\":false},{\\\"puzName\\\":\\\"m9\\\",\\\"battleGroupName\\\":\\\"mastery_tree\\\",\\\"order\\\":37,\\\"round\\\":\\\"fish\\\",\\\"unlockReq\\\":-1,\\\"unlockMult\\\":1,\\\"srcUnlockGroupId\\\":\\\"none\\\",\\\"dstUnlockGroupId\\\":\\\"none\\\",\\\"cardUnlockGroupId\\\":null,\\\"answer\\\":null,\\\"triggersBattleGroupSolve\\\":false,\\\"isCutscene\\\":false,\\\"isFullPuzzle\\\":false},{\\\"puzName\\\":\\\"mastery_tree_prompt\\\",\\\"battleGroupName\\\":\\\"mastery_tree\\\",\\\"order\\\":38,\\\"round\\\":\\\"fish\\\",\\\"unlockReq\\\":9,\\\"unlockMult\\\":1,\\\"srcUnlockGroupId\\\":\\\"masteries\\\",\\\"dstUnlockGroupId\\\":\\\"none\\\",\\\"cardUnlockGroupId\\\":null,\\\"answer\\\":null,\\\"triggersBattleGroupSolve\\\":false,\\\"isCutscene\\\":false,\\\"isFullPuzzle\\\":false},{\\\"puzName\\\":\\\"angry_boarry_farmer\\\",\\\"battleGroupName\\\":\\\"angry_boarry_farmer\\\",\\\"order\\\":39,\\\"round\\\":\\\"battles\\\",\\\"unlockReq\\\":1,\\\"unlockMult\\\":10,\\\"srcUnlockGroupId\\\":\\\"tutorial_complete\\\",\\\"dstUnlockGroupId\\\":\\\"main\\\",\\\"cardUnlockGroupId\\\":\\\"booster1\\\",\\\"answer\\\":null,\\\"triggersBattleGroupSolve\\\":false,\\\"isCutscene\\\":false,\\\"isFullPuzzle\\\":true},{\\\"puzName\\\":\\\"dargle\\\",\\\"battleGroupName\\\":\\\"dargle\\\",\\\"order\\\":40,\\\"round\\\":\\\"battles\\\",\\\"unlockReq\\\":1,\\\"unlockMult\\\":10,\\\"srcUnlockGroupId\\\":\\\"tutorial_complete\\\",\\\"dstUnlockGroupId\\\":\\\"main\\\",\\\"cardUnlockGroupId\\\":\\\"legendary-1\\\",\\\"answer\\\":null,\\\"triggersBattleGroupSolve\\\":false,\\\"isCutscene\\\":false,\\\"isFullPuzzle\\\":true},{\\\"puzName\\\":\\\"dargle_1\\\",\\\"battleGroupName\\\":\\\"dargle\\\",\\\"order\\\":41,\\\"round\\\":\\\"battles\\\",\\\"unlockReq\\\":-1,\\\"unlockMult\\\":1,\\\"srcUnlockGroupId\\\":\\\"none\\\",\\\"dstUnlockGroupId\\\":\\\"dargle\\\",\\\"cardUnlockGroupId\\\":null,\\\"answer\\\":null,\\\"triggersBattleGroupSolve\\\":false,\\\"isCutscene\\\":false,\\\"isFullPuzzle\\\":false},{\\\"puzName\\\":\\\"dargle_2\\\",\\\"battleGroupName\\\":\\\"dargle\\\",\\\"order\\\":42,\\\"round\\\":\\\"battles\\\",\\\"unlockReq\\\":1,\\\"unlockMult\\\":1,\\\"srcUnlockGroupId\\\":\\\"dargle\\\",\\\"dstUnlockGroupId\\\":\\\"dargle\\\",\\\"cardUnlockGroupId\\\":null,\\\"answer\\\":null,\\\"triggersBattleGroupSolve\\\":false,\\\"isCutscene\\\":false,\\\"isFullPuzzle\\\":false},{\\\"puzName\\\":\\\"dargle_3\\\",\\\"battleGroupName\\\":\\\"dargle\\\",\\\"order\\\":43,\\\"round\\\":\\\"battles\\\",\\\"unlockReq\\\":2,\\\"unlockMult\\\":1,\\\"srcUnlockGroupId\\\":\\\"dargle\\\",\\\"dstUnlockGroupId\\\":\\\"dargle\\\",\\\"cardUnlockGroupId\\\":null,\\\"answer\\\":null,\\\"triggersBattleGroupSolve\\\":false,\\\"isCutscene\\\":false,\\\"isFullPuzzle\\\":false},{\\\"puzName\\\":\\\"dargle_4\\\",\\\"battleGroupName\\\":\\\"dargle\\\",\\\"order\\\":44,\\\"round\\\":\\\"battles\\\",\\\"unlockReq\\\":3,\\\"unlockMult\\\":1,\\\"srcUnlockGroupId\\\":\\\"dargle\\\",\\\"dstUnlockGroupId\\\":\\\"dargle\\\",\\\"cardUnlockGroupId\\\":null,\\\"answer\\\":null,\\\"triggersBattleGroupSolve\\\":false,\\\"isCutscene\\\":false,\\\"isFullPuzzle\\\":false},{\\\"puzName\\\":\\\"dargle_5\\\",\\\"battleGroupName\\\":\\\"dargle\\\",\\\"order\\\":45,\\\"round\\\":\\\"battles\\\",\\\"unlockReq\\\":4,\\\"unlockMult\\\":1,\\\"srcUnlockGroupId\\\":\\\"dargle\\\",\\\"dstUnlockGroupId\\\":\\\"none\\\",\\\"cardUnlockGroupId\\\":null,\\\"answer\\\":null,\\\"triggersBattleGroupSolve\\\":true,\\\"isCutscene\\\":false,\\\"isFullPuzzle\\\":false},{\\\"puzName\\\":\\\"beebay_fulfillment_center\\\",\\\"battleGroupName\\\":\\\"beebay_fulfillment_center\\\",\\\"order\\\":46,\\\"round\\\":\\\"battles\\\",\\\"unlockReq\\\":10,\\\"unlockMult\\\":10,\\\"srcUnlockGroupId\\\":\\\"main\\\",\\\"dstUnlockGroupId\\\":\\\"main\\\",\\\"cardUnlockGroupId\\\":\\\"booster2\\\",\\\"answer\\\":null,\\\"triggersBattleGroupSolve\\\":false,\\\"isCutscene\\\":false,\\\"isFullPuzzle\\\":true},{\\\"puzName\\\":\\\"beebay_fulfillment_center_1\\\",\\\"battleGroupName\\\":\\\"beebay_fulfillment_center\\\",\\\"order\\\":47,\\\"round\\\":\\\"battles\\\",\\\"unlockReq\\\":-1,\\\"unlockMult\\\":1,\\\"srcUnlockGroupId\\\":\\\"none\\\",\\\"dstUnlockGroupId\\\":\\\"beebay_fulfillment_center\\\",\\\"cardUnlockGroupId\\\":null,\\\"answer\\\":null,\\\"triggersBattleGroupSolve\\\":true,\\\"isCutscene\\\":false,\\\"isFullPuzzle\\\":false},{\\\"puzName\\\":\\\"beebay_fulfillment_center_2\\\",\\\"battleGroupName\\\":\\\"beebay_fulfillment_center\\\",\\\"order\\\":48,\\\"round\\\":\\\"battles\\\",\\\"unlockReq\\\":-1,\\\"unlockMult\\\":1,\\\"srcUnlockGroupId\\\":\\\"none\\\",\\\"dstUnlockGroupId\\\":\\\"beebay_fulfillment_center\\\",\\\"cardUnlockGroupId\\\":null,\\\"answer\\\":null,\\\"triggersBattleGroupSolve\\\":true,\\\"isCutscene\\\":false,\\\"isFullPuzzle\\\":false},{\\\"puzName\\\":\\\"beebay_fulfillment_center_3\\\",\\\"battleGroupName\\\":\\\"beebay_fulfillment_center\\\",\\\"order\\\":49,\\\"round\\\":\\\"battles\\\",\\\"unlockReq\\\":1,\\\"unlockMult\\\":1,\\\"srcUnlockGroupId\\\":\\\"beebay_fulfillment_center\\\",\\\"dstUnlockGroupId\\\":\\\"beebay_fulfillment_center\\\",\\\"cardUnlockGroupId\\\":null,\\\"answer\\\":null,\\\"triggersBattleGroupSolve\\\":true,\\\"isCutscene\\\":false,\\\"isFullPuzzle\\\":false},{\\\"puzName\\\":\\\"beebay_fulfillment_center_4\\\",\\\"battleGroupName\\\":\\\"beebay_fulfillment_center\\\",\\\"order\\\":50,\\\"round\\\":\\\"battles\\\",\\\"unlockReq\\\":2,\\\"unlockMult\\\":1,\\\"srcUnlockGroupId\\\":\\\"beebay_fulfillment_center\\\",\\\"dstUnlockGroupId\\\":\\\"beebay_fulfillment_center\\\",\\\"cardUnlockGroupId\\\":null,\\\"answer\\\":null,\\\"triggersBattleGroupSolve\\\":true,\\\"isCutscene\\\":false,\\\"isFullPuzzle\\\":false},{\\\"puzName\\\":\\\"beebay_fulfillment_center_5\\\",\\\"battleGroupName\\\":\\\"beebay_fulfillment_center\\\",\\\"order\\\":51,\\\"round\\\":\\\"battles\\\",\\\"unlockReq\\\":3,\\\"unlockMult\\\":1,\\\"srcUnlockGroupId\\\":\\\"beebay_fulfillment_center\\\",\\\"dstUnlockGroupId\\\":\\\"beebay_fulfillment_center\\\",\\\"cardUnlockGroupId\\\":null,\\\"answer\\\":null,\\\"triggersBattleGroupSolve\\\":true,\\\"isCutscene\\\":false,\\\"isFullPuzzle\\\":false},{\\\"puzName\\\":\\\"beebay_fulfillment_center_6\\\",\\\"battleGroupName\\\":\\\"beebay_fulfillment_center\\\",\\\"order\\\":52,\\\"round\\\":\\\"battles\\\",\\\"unlockReq\\\":4,\\\"unlockMult\\\":1,\\\"srcUnlockGroupId\\\":\\\"beebay_fulfillment_center\\\",\\\"dstUnlockGroupId\\\":\\\"beebay_fulfillment_center\\\",\\\"cardUnlockGroupId\\\":null,\\\"answer\\\":null,\\\"triggersBattleGroupSolve\\\":true,\\\"isCutscene\\\":false,\\\"isFullPuzzle\\\":false},{\\\"puzName\\\":\\\"beebay_fulfillment_center_7\\\",\\\"battleGroupName\\\":\\\"beebay_fulfillment_center\\\",\\\"order\\\":53,\\\"round\\\":\\\"battles\\\",\\\"unlockReq\\\":5,\\\"unlockMult\\\":1,\\\"srcUnlockGroupId\\\":\\\"beebay_fulfillment_center\\\",\\\"dstUnlockGroupId\\\":\\\"beebay_fulfillment_center\\\",\\\"cardUnlockGroupId\\\":null,\\\"answer\\\":null,\\\"triggersBattleGroupSolve\\\":true,\\\"isCutscene\\\":false,\\\"isFullPuzzle\\\":false},{\\\"puzName\\\":\\\"beebay_fulfillment_center_8\\\",\\\"battleGroupName\\\":\\\"beebay_fulfillment_center\\\",\\\"order\\\":54,\\\"round\\\":\\\"battles\\\",\\\"unlockReq\\\":6,\\\"unlockMult\\\":1,\\\"srcUnlockGroupId\\\":\\\"beebay_fulfillment_center\\\",\\\"dstUnlockGroupId\\\":\\\"beebay_fulfillment_center\\\",\\\"cardUnlockGroupId\\\":null,\\\"answer\\\":null,\\\"triggersBattleGroupSolve\\\":true,\\\"isCutscene\\\":false,\\\"isFullPuzzle\\\":false},{\\\"puzName\\\":\\\"beebay_fulfillment_center_9\\\",\\\"battleGroupName\\\":\\\"beebay_fulfillment_center\\\",\\\"order\\\":55,\\\"round\\\":\\\"battles\\\",\\\"unlockReq\\\":7,\\\"unlockMult\\\":1,\\\"srcUnlockGroupId\\\":\\\"beebay_fulfillment_center\\\",\\\"dstUnlockGroupId\\\":\\\"beebay_fulfillment_center\\\",\\\"cardUnlockGroupId\\\":null,\\\"answer\\\":null,\\\"triggersBattleGroupSolve\\\":true,\\\"isCutscene\\\":false,\\\"isFullPuzzle\\\":false},{\\\"puzName\\\":\\\"beebay_fulfillment_center_10\\\",\\\"battleGroupName\\\":\\\"beebay_fulfillment_center\\\",\\\"order\\\":56,\\\"round\\\":\\\"battles\\\",\\\"unlockReq\\\":8,\\\"unlockMult\\\":1,\\\"srcUnlockGroupId\\\":\\\"beebay_fulfillment_center\\\",\\\"dstUnlockGroupId\\\":\\\"beebay_fulfillment_center\\\",\\\"cardUnlockGroupId\\\":null,\\\"answer\\\":null,\\\"triggersBattleGroupSolve\\\":true,\\\"isCutscene\\\":false,\\\"isFullPuzzle\\\":false},{\\\"puzName\\\":\\\"beebay_fulfillment_center_11\\\",\\\"battleGroupName\\\":\\\"beebay_fulfillment_center\\\",\\\"order\\\":57,\\\"round\\\":\\\"battles\\\",\\\"unlockReq\\\":9,\\\"unlockMult\\\":1,\\\"srcUnlockGroupId\\\":\\\"beebay_fulfillment_center\\\",\\\"dstUnlockGroupId\\\":\\\"beebay_fulfillment_center\\\",\\\"cardUnlockGroupId\\\":null,\\\"answer\\\":null,\\\"triggersBattleGroupSolve\\\":true,\\\"isCutscene\\\":false,\\\"isFullPuzzle\\\":false},{\\\"puzName\\\":\\\"beebay_fulfillment_center_12\\\",\\\"battleGroupName\\\":\\\"beebay_fulfillment_center\\\",\\\"order\\\":58,\\\"round\\\":\\\"battles\\\",\\\"unlockReq\\\":10,\\\"unlockMult\\\":1,\\\"srcUnlockGroupId\\\":\\\"beebay_fulfillment_center\\\",\\\"dstUnlockGroupId\\\":\\\"beebay_fulfillment_center\\\",\\\"cardUnlockGroupId\\\":null,\\\"answer\\\":null,\\\"triggersBattleGroupSolve\\\":true,\\\"isCutscene\\\":false,\\\"isFullPuzzle\\\":false},{\\\"puzName\\\":\\\"beebay_fulfillment_center_13\\\",\\\"battleGroupName\\\":\\\"beebay_fulfillment_center\\\",\\\"order\\\":59,\\\"round\\\":\\\"battles\\\",\\\"unlockReq\\\":11,\\\"unlockMult\\\":1,\\\"srcUnlockGroupId\\\":\\\"beebay_fulfillment_center\\\",\\\"dstUnlockGroupId\\\":\\\"none\\\",\\\"cardUnlockGroupId\\\":null,\\\"answer\\\":null,\\\"triggersBattleGroupSolve\\\":true,\\\"isCutscene\\\":false,\\\"isFullPuzzle\\\":false},{\\\"puzName\\\":\\\"miss_yu\\\",\\\"battleGroupName\\\":\\\"miss_yu\\\",\\\"order\\\":60,\\\"round\\\":\\\"battles\\\",\\\"unlockReq\\\":10,\\\"unlockMult\\\":10,\\\"srcUnlockGroupId\\\":\\\"main\\\",\\\"dstUnlockGroupId\\\":\\\"main\\\",\\\"cardUnlockGroupId\\\":\\\"legendary-7\\\",\\\"answer\\\":null,\\\"triggersBattleGroupSolve\\\":false,\\\"isCutscene\\\":false,\\\"isFullPuzzle\\\":true},{\\\"puzName\\\":\\\"gnutmeg_tree\\\",\\\"battleGroupName\\\":\\\"gnutmeg_tree\\\",\\\"order\\\":61,\\\"round\\\":\\\"battles\\\",\\\"unlockReq\\\":20,\\\"unlockMult\\\":10,\\\"srcUnlockGroupId\\\":\\\"main\\\",\\\"dstUnlockGroupId\\\":\\\"main\\\",\\\"cardUnlockGroupId\\\":\\\"booster3\\\",\\\"answer\\\":null,\\\"triggersBattleGroupSolve\\\":false,\\\"isCutscene\\\":false,\\\"isFullPuzzle\\\":true},{\\\"puzName\\\":\\\"coloring\\\",\\\"battleGroupName\\\":\\\"coloring\\\",\\\"order\\\":62,\\\"round\\\":\\\"battles\\\",\\\"unlockReq\\\":30,\\\"unlockMult\\\":10,\\\"srcUnlockGroupId\\\":\\\"main\\\",\\\"dstUnlockGroupId\\\":\\\"main\\\",\\\"cardUnlockGroupId\\\":\\\"legendary-8\\\",\\\"answer\\\":null,\\\"triggersBattleGroupSolve\\\":false,\\\"isCutscene\\\":false,\\\"isFullPuzzle\\\":true},{\\\"puzName\\\":\\\"spirit_of_the_vines\\\",\\\"battleGroupName\\\":\\\"spirit_of_the_vines\\\",\\\"order\\\":63,\\\"round\\\":\\\"battles\\\",\\\"unlockReq\\\":40,\\\"unlockMult\\\":10,\\\"srcUnlockGroupId\\\":\\\"main\\\",\\\"dstUnlockGroupId\\\":\\\"main\\\",\\\"cardUnlockGroupId\\\":\\\"booster4\\\",\\\"answer\\\":null,\\\"triggersBattleGroupSolve\\\":false,\\\"isCutscene\\\":false,\\\"isFullPuzzle\\\":true},{\\\"puzName\\\":\\\"spirit_of_the_vines_1\\\",\\\"battleGroupName\\\":\\\"spirit_of_the_vines\\\",\\\"order\\\":64,\\\"round\\\":\\\"battles\\\",\\\"unlockReq\\\":-1,\\\"unlockMult\\\":1,\\\"srcUnlockGroupId\\\":\\\"none\\\",\\\"dstUnlockGroupId\\\":\\\"spirit_of_the_vines\\\",\\\"cardUnlockGroupId\\\":null,\\\"answer\\\":null,\\\"triggersBattleGroupSolve\\\":false,\\\"isCutscene\\\":false,\\\"isFullPuzzle\\\":false},{\\\"puzName\\\":\\\"spirit_of_the_vines_2\\\",\\\"battleGroupName\\\":\\\"spirit_of_the_vines\\\",\\\"order\\\":65,\\\"round\\\":\\\"battles\\\",\\\"unlockReq\\\":1,\\\"unlockMult\\\":1,\\\"srcUnlockGroupId\\\":\\\"spirit_of_the_vines\\\",\\\"dstUnlockGroupId\\\":\\\"spirit_of_the_vines\\\",\\\"cardUnlockGroupId\\\":null,\\\"answer\\\":null,\\\"triggersBattleGroupSolve\\\":false,\\\"isCutscene\\\":false,\\\"isFullPuzzle\\\":false},{\\\"puzName\\\":\\\"spirit_of_the_vines_3\\\",\\\"battleGroupName\\\":\\\"spirit_of_the_vines\\\",\\\"order\\\":66,\\\"round\\\":\\\"battles\\\",\\\"unlockReq\\\":2,\\\"unlockMult\\\":1,\\\"srcUnlockGroupId\\\":\\\"spirit_of_the_vines\\\",\\\"dstUnlockGroupId\\\":\\\"spirit_of_the_vines\\\",\\\"cardUnlockGroupId\\\":null,\\\"answer\\\":null,\\\"triggersBattleGroupSolve\\\":false,\\\"isCutscene\\\":false,\\\"isFullPuzzle\\\":false},{\\\"puzName\\\":\\\"spirit_of_the_vines_4\\\",\\\"battleGroupName\\\":\\\"spirit_of_the_vines\\\",\\\"order\\\":67,\\\"round\\\":\\\"battles\\\",\\\"unlockReq\\\":3,\\\"unlockMult\\\":1,\\\"srcUnlockGroupId\\\":\\\"spirit_of_the_vines\\\",\\\"dstUnlockGroupId\\\":\\\"spirit_of_the_vines\\\",\\\"cardUnlockGroupId\\\":null,\\\"answer\\\":null,\\\"triggersBattleGroupSolve\\\":false,\\\"isCutscene\\\":false,\\\"isFullPuzzle\\\":false},{\\\"puzName\\\":\\\"spirit_of_the_vines_5\\\",\\\"battleGroupName\\\":\\\"spirit_of_the_vines\\\",\\\"order\\\":68,\\\"round\\\":\\\"battles\\\",\\\"unlockReq\\\":4,\\\"unlockMult\\\":1,\\\"srcUnlockGroupId\\\":\\\"spirit_of_the_vines\\\",\\\"dstUnlockGroupId\\\":\\\"none\\\",\\\"cardUnlockGroupId\\\":null,\\\"answer\\\":null,\\\"triggersBattleGroupSolve\\\":true,\\\"isCutscene\\\":false,\\\"isFullPuzzle\\\":false},{\\\"puzName\\\":\\\"othello\\\",\\\"battleGroupName\\\":\\\"othello\\\",\\\"order\\\":69,\\\"round\\\":\\\"battles\\\",\\\"unlockReq\\\":50,\\\"unlockMult\\\":10,\\\"srcUnlockGroupId\\\":\\\"main\\\",\\\"dstUnlockGroupId\\\":\\\"main\\\",\\\"cardUnlockGroupId\\\":\\\"legendary-10\\\",\\\"answer\\\":null,\\\"triggersBattleGroupSolve\\\":false,\\\"isCutscene\\\":false,\\\"isFullPuzzle\\\":true},{\\\"puzName\\\":\\\"jabberwock\\\",\\\"battleGroupName\\\":\\\"jabberwock\\\",\\\"order\\\":70,\\\"round\\\":\\\"battles\\\",\\\"unlockReq\\\":60,\\\"unlockMult\\\":10,\\\"srcUnlockGroupId\\\":\\\"main\\\",\\\"dstUnlockGroupId\\\":\\\"main\\\",\\\"cardUnlockGroupId\\\":\\\"legendary-6\\\",\\\"answer\\\":null,\\\"triggersBattleGroupSolve\\\":false,\\\"isCutscene\\\":false,\\\"isFullPuzzle\\\":true},{\\\"puzName\\\":\\\"jabberwock_1\\\",\\\"battleGroupName\\\":\\\"jabberwock\\\",\\\"order\\\":71,\\\"round\\\":\\\"battles\\\",\\\"unlockReq\\\":-1,\\\"unlockMult\\\":1,\\\"srcUnlockGroupId\\\":\\\"none\\\",\\\"dstUnlockGroupId\\\":\\\"jabberwock\\\",\\\"cardUnlockGroupId\\\":null,\\\"answer\\\":null,\\\"triggersBattleGroupSolve\\\":false,\\\"isCutscene\\\":false,\\\"isFullPuzzle\\\":false},{\\\"puzName\\\":\\\"jabberwock_2\\\",\\\"battleGroupName\\\":\\\"jabberwock\\\",\\\"order\\\":72,\\\"round\\\":\\\"battles\\\",\\\"unlockReq\\\":1,\\\"unlockMult\\\":1,\\\"srcUnlockGroupId\\\":\\\"jabberwock\\\",\\\"dstUnlockGroupId\\\":\\\"jabberwock\\\",\\\"cardUnlockGroupId\\\":null,\\\"answer\\\":null,\\\"triggersBattleGroupSolve\\\":false,\\\"isCutscene\\\":false,\\\"isFullPuzzle\\\":false},{\\\"puzName\\\":\\\"jabberwock_3\\\",\\\"battleGroupName\\\":\\\"jabberwock\\\",\\\"order\\\":73,\\\"round\\\":\\\"battles\\\",\\\"unlockReq\\\":2,\\\"unlockMult\\\":1,\\\"srcUnlockGroupId\\\":\\\"jabberwock\\\",\\\"dstUnlockGroupId\\\":\\\"jabberwock\\\",\\\"cardUnlockGroupId\\\":null,\\\"answer\\\":null,\\\"triggersBattleGroupSolve\\\":false,\\\"isCutscene\\\":false,\\\"isFullPuzzle\\\":false},{\\\"puzName\\\":\\\"jabberwock_4\\\",\\\"battleGroupName\\\":\\\"jabberwock\\\",\\\"order\\\":74,\\\"round\\\":\\\"battles\\\",\\\"unlockReq\\\":3,\\\"unlockMult\\\":1,\\\"srcUnlockGroupId\\\":\\\"jabberwock\\\",\\\"dstUnlockGroupId\\\":\\\"jabberwock\\\",\\\"cardUnlockGroupId\\\":null,\\\"answer\\\":null,\\\"triggersBattleGroupSolve\\\":false,\\\"isCutscene\\\":false,\\\"isFullPuzzle\\\":false},{\\\"puzName\\\":\\\"jabberwock_5\\\",\\\"battleGroupName\\\":\\\"jabberwock\\\",\\\"order\\\":75,\\\"round\\\":\\\"battles\\\",\\\"unlockReq\\\":4,\\\"unlockMult\\\":1,\\\"srcUnlockGroupId\\\":\\\"jabberwock\\\",\\\"dstUnlockGroupId\\\":\\\"jabberwock\\\",\\\"cardUnlockGroupId\\\":null,\\\"answer\\\":null,\\\"triggersBattleGroupSolve\\\":false,\\\"isCutscene\\\":false,\\\"isFullPuzzle\\\":false},{\\\"puzName\\\":\\\"jabberwock_6\\\",\\\"battleGroupName\\\":\\\"jabberwock\\\",\\\"order\\\":76,\\\"round\\\":\\\"battles\\\",\\\"unlockReq\\\":5,\\\"unlockMult\\\":1,\\\"srcUnlockGroupId\\\":\\\"jabberwock\\\",\\\"dstUnlockGroupId\\\":\\\"jabberwock\\\",\\\"cardUnlockGroupId\\\":null,\\\"answer\\\":null,\\\"triggersBattleGroupSolve\\\":false,\\\"isCutscene\\\":false,\\\"isFullPuzzle\\\":false},{\\\"puzName\\\":\\\"jabberwock_7\\\",\\\"battleGroupName\\\":\\\"jabberwock\\\",\\\"order\\\":77,\\\"round\\\":\\\"battles\\\",\\\"unlockReq\\\":6,\\\"unlockMult\\\":1,\\\"srcUnlockGroupId\\\":\\\"jabberwock\\\",\\\"dstUnlockGroupId\\\":\\\"none\\\",\\\"cardUnlockGroupId\\\":null,\\\"answer\\\":null,\\\"triggersBattleGroupSolve\\\":true,\\\"isCutscene\\\":false,\\\"isFullPuzzle\\\":false},{\\\"puzName\\\":\\\"asteroid\\\",\\\"battleGroupName\\\":\\\"asteroid\\\",\\\"order\\\":78,\\\"round\\\":\\\"battles\\\",\\\"unlockReq\\\":70,\\\"unlockMult\\\":10,\\\"srcUnlockGroupId\\\":\\\"main\\\",\\\"dstUnlockGroupId\\\":\\\"main\\\",\\\"cardUnlockGroupId\\\":\\\"booster5\\\",\\\"answer\\\":null,\\\"triggersBattleGroupSolve\\\":false,\\\"isCutscene\\\":false,\\\"isFullPuzzle\\\":true},{\\\"puzName\\\":\\\"asteroid_1\\\",\\\"battleGroupName\\\":\\\"asteroid\\\",\\\"order\\\":79,\\\"round\\\":\\\"battles\\\",\\\"unlockReq\\\":-1,\\\"unlockMult\\\":1,\\\"srcUnlockGroupId\\\":\\\"none\\\",\\\"dstUnlockGroupId\\\":\\\"asteroid\\\",\\\"cardUnlockGroupId\\\":null,\\\"answer\\\":null,\\\"triggersBattleGroupSolve\\\":false,\\\"isCutscene\\\":false,\\\"isFullPuzzle\\\":false},{\\\"puzName\\\":\\\"asteroid_2\\\",\\\"battleGroupName\\\":\\\"asteroid\\\",\\\"order\\\":80,\\\"round\\\":\\\"battles\\\",\\\"unlockReq\\\":1,\\\"unlockMult\\\":1,\\\"srcUnlockGroupId\\\":\\\"asteroid\\\",\\\"dstUnlockGroupId\\\":\\\"asteroid\\\",\\\"cardUnlockGroupId\\\":null,\\\"answer\\\":null,\\\"triggersBattleGroupSolve\\\":false,\\\"isCutscene\\\":false,\\\"isFullPuzzle\\\":false},{\\\"puzName\\\":\\\"asteroid_3\\\",\\\"battleGroupName\\\":\\\"asteroid\\\",\\\"order\\\":81,\\\"round\\\":\\\"battles\\\",\\\"unlockReq\\\":2,\\\"unlockMult\\\":1,\\\"srcUnlockGroupId\\\":\\\"asteroid\\\",\\\"dstUnlockGroupId\\\":\\\"none\\\",\\\"cardUnlockGroupId\\\":null,\\\"answer\\\":null,\\\"triggersBattleGroupSolve\\\":true,\\\"isCutscene\\\":false,\\\"isFullPuzzle\\\":false},{\\\"puzName\\\":\\\"bb_b\\\",\\\"battleGroupName\\\":\\\"bb_b\\\",\\\"order\\\":82,\\\"round\\\":\\\"battles\\\",\\\"unlockReq\\\":82,\\\"unlockMult\\\":10,\\\"srcUnlockGroupId\\\":\\\"main\\\",\\\"dstUnlockGroupId\\\":\\\"main\\\",\\\"cardUnlockGroupId\\\":\\\"legendary-9\\\",\\\"answer\\\":null,\\\"triggersBattleGroupSolve\\\":false,\\\"isCutscene\\\":false,\\\"isFullPuzzle\\\":true},{\\\"puzName\\\":\\\"moonick\\\",\\\"battleGroupName\\\":\\\"moonick\\\",\\\"order\\\":83,\\\"round\\\":\\\"battles\\\",\\\"unlockReq\\\":94,\\\"unlockMult\\\":10,\\\"srcUnlockGroupId\\\":\\\"main\\\",\\\"dstUnlockGroupId\\\":\\\"main\\\",\\\"cardUnlockGroupId\\\":\\\"legendary-5\\\",\\\"answer\\\":null,\\\"triggersBattleGroupSolve\\\":false,\\\"isCutscene\\\":false,\\\"isFullPuzzle\\\":true},{\\\"puzName\\\":\\\"moonick_1\\\",\\\"battleGroupName\\\":\\\"moonick\\\",\\\"order\\\":84,\\\"round\\\":\\\"battles\\\",\\\"unlockReq\\\":-1,\\\"unlockMult\\\":1,\\\"srcUnlockGroupId\\\":\\\"none\\\",\\\"dstUnlockGroupId\\\":\\\"moonick-phase1\\\",\\\"cardUnlockGroupId\\\":null,\\\"answer\\\":null,\\\"triggersBattleGroupSolve\\\":false,\\\"isCutscene\\\":false,\\\"isFullPuzzle\\\":false},{\\\"puzName\\\":\\\"moonick_2\\\",\\\"battleGroupName\\\":\\\"moonick\\\",\\\"order\\\":85,\\\"round\\\":\\\"battles\\\",\\\"unlockReq\\\":-1,\\\"unlockMult\\\":1,\\\"srcUnlockGroupId\\\":\\\"none\\\",\\\"dstUnlockGroupId\\\":\\\"moonick-phase1\\\",\\\"cardUnlockGroupId\\\":null,\\\"answer\\\":null,\\\"triggersBattleGroupSolve\\\":false,\\\"isCutscene\\\":false,\\\"isFullPuzzle\\\":false},{\\\"puzName\\\":\\\"moonick_3\\\",\\\"battleGroupName\\\":\\\"moonick\\\",\\\"order\\\":86,\\\"round\\\":\\\"battles\\\",\\\"unlockReq\\\":-1,\\\"unlockMult\\\":1,\\\"srcUnlockGroupId\\\":\\\"none\\\",\\\"dstUnlockGroupId\\\":\\\"moonick-phase1\\\",\\\"cardUnlockGroupId\\\":null,\\\"answer\\\":null,\\\"triggersBattleGroupSolve\\\":false,\\\"isCutscene\\\":false,\\\"isFullPuzzle\\\":false},{\\\"puzName\\\":\\\"moonick_4\\\",\\\"battleGroupName\\\":\\\"moonick\\\",\\\"order\\\":87,\\\"round\\\":\\\"battles\\\",\\\"unlockReq\\\":-1,\\\"unlockMult\\\":1,\\\"srcUnlockGroupId\\\":\\\"none\\\",\\\"dstUnlockGroupId\\\":\\\"moonick-phase1\\\",\\\"cardUnlockGroupId\\\":null,\\\"answer\\\":null,\\\"triggersBattleGroupSolve\\\":false,\\\"isCutscene\\\":false,\\\"isFullPuzzle\\\":false},{\\\"puzName\\\":\\\"moonick_5\\\",\\\"battleGroupName\\\":\\\"moonick\\\",\\\"order\\\":88,\\\"round\\\":\\\"battles\\\",\\\"unlockReq\\\":-1,\\\"unlockMult\\\":1,\\\"srcUnlockGroupId\\\":\\\"none\\\",\\\"dstUnlockGroupId\\\":\\\"moonick-phase1\\\",\\\"cardUnlockGroupId\\\":null,\\\"answer\\\":null,\\\"triggersBattleGroupSolve\\\":false,\\\"isCutscene\\\":false,\\\"isFullPuzzle\\\":false},{\\\"puzName\\\":\\\"moonick_6\\\",\\\"battleGroupName\\\":\\\"moonick\\\",\\\"order\\\":89,\\\"round\\\":\\\"battles\\\",\\\"unlockReq\\\":-1,\\\"unlockMult\\\":1,\\\"srcUnlockGroupId\\\":\\\"none\\\",\\\"dstUnlockGroupId\\\":\\\"moonick-phase1\\\",\\\"cardUnlockGroupId\\\":null,\\\"answer\\\":null,\\\"triggersBattleGroupSolve\\\":false,\\\"isCutscene\\\":false,\\\"isFullPuzzle\\\":false},{\\\"puzName\\\":\\\"moonick_7\\\",\\\"battleGroupName\\\":\\\"moonick\\\",\\\"order\\\":90,\\\"round\\\":\\\"battles\\\",\\\"unlockReq\\\":-1,\\\"unlockMult\\\":1,\\\"srcUnlockGroupId\\\":\\\"none\\\",\\\"dstUnlockGroupId\\\":\\\"moonick-phase1\\\",\\\"cardUnlockGroupId\\\":null,\\\"answer\\\":null,\\\"triggersBattleGroupSolve\\\":false,\\\"isCutscene\\\":false,\\\"isFullPuzzle\\\":false},{\\\"puzName\\\":\\\"moonick_8\\\",\\\"battleGroupName\\\":\\\"moonick\\\",\\\"order\\\":91,\\\"round\\\":\\\"battles\\\",\\\"unlockReq\\\":-1,\\\"unlockMult\\\":1,\\\"srcUnlockGroupId\\\":\\\"none\\\",\\\"dstUnlockGroupId\\\":\\\"moonick-phase1\\\",\\\"cardUnlockGroupId\\\":null,\\\"answer\\\":null,\\\"triggersBattleGroupSolve\\\":false,\\\"isCutscene\\\":false,\\\"isFullPuzzle\\\":false},{\\\"puzName\\\":\\\"moonick_9\\\",\\\"battleGroupName\\\":\\\"moonick\\\",\\\"order\\\":92,\\\"round\\\":\\\"battles\\\",\\\"unlockReq\\\":-1,\\\"unlockMult\\\":1,\\\"srcUnlockGroupId\\\":\\\"none\\\",\\\"dstUnlockGroupId\\\":\\\"moonick-phase1\\\",\\\"cardUnlockGroupId\\\":null,\\\"answer\\\":null,\\\"triggersBattleGroupSolve\\\":false,\\\"isCutscene\\\":false,\\\"isFullPuzzle\\\":false},{\\\"puzName\\\":\\\"moonick_10\\\",\\\"battleGroupName\\\":\\\"moonick\\\",\\\"order\\\":93,\\\"round\\\":\\\"battles\\\",\\\"unlockReq\\\":-1,\\\"unlockMult\\\":1,\\\"srcUnlockGroupId\\\":\\\"none\\\",\\\"dstUnlockGroupId\\\":\\\"moonick-phase1\\\",\\\"cardUnlockGroupId\\\":null,\\\"answer\\\":null,\\\"triggersBattleGroupSolve\\\":false,\\\"isCutscene\\\":false,\\\"isFullPuzzle\\\":false},{\\\"puzName\\\":\\\"moonick_11\\\",\\\"battleGroupName\\\":\\\"moonick\\\",\\\"order\\\":94,\\\"round\\\":\\\"battles\\\",\\\"unlockReq\\\":-1,\\\"unlockMult\\\":1,\\\"srcUnlockGroupId\\\":\\\"none\\\",\\\"dstUnlockGroupId\\\":\\\"moonick-phase1\\\",\\\"cardUnlockGroupId\\\":null,\\\"answer\\\":null,\\\"triggersBattleGroupSolve\\\":false,\\\"isCutscene\\\":false,\\\"isFullPuzzle\\\":false},{\\\"puzName\\\":\\\"moonick_12\\\",\\\"battleGroupName\\\":\\\"moonick\\\",\\\"order\\\":95,\\\"round\\\":\\\"battles\\\",\\\"unlockReq\\\":-1,\\\"unlockMult\\\":1,\\\"srcUnlockGroupId\\\":\\\"none\\\",\\\"dstUnlockGroupId\\\":\\\"moonick-phase1\\\",\\\"cardUnlockGroupId\\\":null,\\\"answer\\\":null,\\\"triggersBattleGroupSolve\\\":false,\\\"isCutscene\\\":false,\\\"isFullPuzzle\\\":false},{\\\"puzName\\\":\\\"moonick_13\\\",\\\"battleGroupName\\\":\\\"moonick\\\",\\\"order\\\":96,\\\"round\\\":\\\"battles\\\",\\\"unlockReq\\\":9,\\\"unlockMult\\\":1,\\\"srcUnlockGroupId\\\":\\\"moonick-phase1\\\",\\\"dstUnlockGroupId\\\":\\\"moonick-phase2\\\",\\\"cardUnlockGroupId\\\":null,\\\"answer\\\":null,\\\"triggersBattleGroupSolve\\\":false,\\\"isCutscene\\\":false,\\\"isFullPuzzle\\\":false},{\\\"puzName\\\":\\\"moonick_14\\\",\\\"battleGroupName\\\":\\\"moonick\\\",\\\"order\\\":97,\\\"round\\\":\\\"battles\\\",\\\"unlockReq\\\":9,\\\"unlockMult\\\":1,\\\"srcUnlockGroupId\\\":\\\"moonick-phase1\\\",\\\"dstUnlockGroupId\\\":\\\"moonick-phase2\\\",\\\"cardUnlockGroupId\\\":null,\\\"answer\\\":null,\\\"triggersBattleGroupSolve\\\":false,\\\"isCutscene\\\":false,\\\"isFullPuzzle\\\":false},{\\\"puzName\\\":\\\"moonick_15\\\",\\\"battleGroupName\\\":\\\"moonick\\\",\\\"order\\\":98,\\\"round\\\":\\\"battles\\\",\\\"unlockReq\\\":9,\\\"unlockMult\\\":1,\\\"srcUnlockGroupId\\\":\\\"moonick-phase1\\\",\\\"dstUnlockGroupId\\\":\\\"moonick-phase2\\\",\\\"cardUnlockGroupId\\\":null,\\\"answer\\\":null,\\\"triggersBattleGroupSolve\\\":false,\\\"isCutscene\\\":false,\\\"isFullPuzzle\\\":false},{\\\"puzName\\\":\\\"moonick_16\\\",\\\"battleGroupName\\\":\\\"moonick\\\",\\\"order\\\":99,\\\"round\\\":\\\"battles\\\",\\\"unlockReq\\\":9,\\\"unlockMult\\\":1,\\\"srcUnlockGroupId\\\":\\\"moonick-phase1\\\",\\\"dstUnlockGroupId\\\":\\\"moonick-phase2\\\",\\\"cardUnlockGroupId\\\":null,\\\"answer\\\":null,\\\"triggersBattleGroupSolve\\\":false,\\\"isCutscene\\\":false,\\\"isFullPuzzle\\\":false},{\\\"puzName\\\":\\\"moonick_17\\\",\\\"battleGroupName\\\":\\\"moonick\\\",\\\"order\\\":100,\\\"round\\\":\\\"battles\\\",\\\"unlockReq\\\":9,\\\"unlockMult\\\":1,\\\"srcUnlockGroupId\\\":\\\"moonick-phase1\\\",\\\"dstUnlockGroupId\\\":\\\"moonick-phase2\\\",\\\"cardUnlockGroupId\\\":null,\\\"answer\\\":null,\\\"triggersBattleGroupSolve\\\":false,\\\"isCutscene\\\":false,\\\"isFullPuzzle\\\":false},{\\\"puzName\\\":\\\"moonick_18\\\",\\\"battleGroupName\\\":\\\"moonick\\\",\\\"order\\\":101,\\\"round\\\":\\\"battles\\\",\\\"unlockReq\\\":9,\\\"unlockMult\\\":1,\\\"srcUnlockGroupId\\\":\\\"moonick-phase1\\\",\\\"dstUnlockGroupId\\\":\\\"moonick-phase2\\\",\\\"cardUnlockGroupId\\\":null,\\\"answer\\\":null,\\\"triggersBattleGroupSolve\\\":false,\\\"isCutscene\\\":false,\\\"isFullPuzzle\\\":false},{\\\"puzName\\\":\\\"moonick_19\\\",\\\"battleGroupName\\\":\\\"moonick\\\",\\\"order\\\":102,\\\"round\\\":\\\"battles\\\",\\\"unlockReq\\\":9,\\\"unlockMult\\\":1,\\\"srcUnlockGroupId\\\":\\\"moonick-phase1\\\",\\\"dstUnlockGroupId\\\":\\\"moonick-phase2\\\",\\\"cardUnlockGroupId\\\":null,\\\"answer\\\":null,\\\"triggersBattleGroupSolve\\\":false,\\\"isCutscene\\\":false,\\\"isFullPuzzle\\\":false},{\\\"puzName\\\":\\\"moonick_20\\\",\\\"battleGroupName\\\":\\\"moonick\\\",\\\"order\\\":103,\\\"round\\\":\\\"battles\\\",\\\"unlockReq\\\":9,\\\"unlockMult\\\":1,\\\"srcUnlockGroupId\\\":\\\"moonick-phase1\\\",\\\"dstUnlockGroupId\\\":\\\"moonick-phase2\\\",\\\"cardUnlockGroupId\\\":null,\\\"answer\\\":null,\\\"triggersBattleGroupSolve\\\":false,\\\"isCutscene\\\":false,\\\"isFullPuzzle\\\":false},{\\\"puzName\\\":\\\"moonick_21\\\",\\\"battleGroupName\\\":\\\"moonick\\\",\\\"order\\\":104,\\\"round\\\":\\\"battles\\\",\\\"unlockReq\\\":9,\\\"unlockMult\\\":1,\\\"srcUnlockGroupId\\\":\\\"moonick-phase1\\\",\\\"dstUnlockGroupId\\\":\\\"moonick-phase2\\\",\\\"cardUnlockGroupId\\\":null,\\\"answer\\\":null,\\\"triggersBattleGroupSolve\\\":false,\\\"isCutscene\\\":false,\\\"isFullPuzzle\\\":false},{\\\"puzName\\\":\\\"moonick_22\\\",\\\"battleGroupName\\\":\\\"moonick\\\",\\\"order\\\":105,\\\"round\\\":\\\"battles\\\",\\\"unlockReq\\\":7,\\\"unlockMult\\\":1,\\\"srcUnlockGroupId\\\":\\\"moonick-phase2\\\",\\\"dstUnlockGroupId\\\":\\\"moonick-phase3\\\",\\\"cardUnlockGroupId\\\":null,\\\"answer\\\":null,\\\"triggersBattleGroupSolve\\\":false,\\\"isCutscene\\\":false,\\\"isFullPuzzle\\\":false},{\\\"puzName\\\":\\\"moonick_23\\\",\\\"battleGroupName\\\":\\\"moonick\\\",\\\"order\\\":106,\\\"round\\\":\\\"battles\\\",\\\"unlockReq\\\":7,\\\"unlockMult\\\":1,\\\"srcUnlockGroupId\\\":\\\"moonick-phase2\\\",\\\"dstUnlockGroupId\\\":\\\"moonick-phase3\\\",\\\"cardUnlockGroupId\\\":null,\\\"answer\\\":null,\\\"triggersBattleGroupSolve\\\":false,\\\"isCutscene\\\":false,\\\"isFullPuzzle\\\":false},{\\\"puzName\\\":\\\"moonick_24\\\",\\\"battleGroupName\\\":\\\"moonick\\\",\\\"order\\\":107,\\\"round\\\":\\\"battles\\\",\\\"unlockReq\\\":7,\\\"unlockMult\\\":1,\\\"srcUnlockGroupId\\\":\\\"moonick-phase2\\\",\\\"dstUnlockGroupId\\\":\\\"moonick-phase3\\\",\\\"cardUnlockGroupId\\\":null,\\\"answer\\\":null,\\\"triggersBattleGroupSolve\\\":false,\\\"isCutscene\\\":false,\\\"isFullPuzzle\\\":false},{\\\"puzName\\\":\\\"moonick_final\\\",\\\"battleGroupName\\\":\\\"moonick\\\",\\\"order\\\":108,\\\"round\\\":\\\"battles\\\",\\\"unlockReq\\\":2,\\\"unlockMult\\\":1,\\\"srcUnlockGroupId\\\":\\\"moonick-phase3\\\",\\\"dstUnlockGroupId\\\":\\\"none\\\",\\\"cardUnlockGroupId\\\":null,\\\"answer\\\":null,\\\"triggersBattleGroupSolve\\\":true,\\\"isCutscene\\\":false,\\\"isFullPuzzle\\\":false},{\\\"puzName\\\":\\\"the_swarm\\\",\\\"battleGroupName\\\":\\\"the_swarm\\\",\\\"order\\\":109,\\\"round\\\":\\\"battles\\\",\\\"unlockReq\\\":106,\\\"unlockMult\\\":10,\\\"srcUnlockGroupId\\\":\\\"main\\\",\\\"dstUnlockGroupId\\\":\\\"main\\\",\\\"cardUnlockGroupId\\\":\\\"booster6\\\",\\\"answer\\\":null,\\\"triggersBattleGroupSolve\\\":false,\\\"isCutscene\\\":false,\\\"isFullPuzzle\\\":true},{\\\"puzName\\\":\\\"spelling_bee\\\",\\\"battleGroupName\\\":\\\"spelling_bee\\\",\\\"order\\\":110,\\\"round\\\":\\\"battles\\\",\\\"unlockReq\\\":118,\\\"unlockMult\\\":10,\\\"srcUnlockGroupId\\\":\\\"main\\\",\\\"dstUnlockGroupId\\\":\\\"main\\\",\\\"cardUnlockGroupId\\\":\\\"legendary-4\\\",\\\"answer\\\":null,\\\"triggersBattleGroupSolve\\\":false,\\\"isCutscene\\\":false,\\\"isFullPuzzle\\\":true},{\\\"puzName\\\":\\\"blancmange\\\",\\\"battleGroupName\\\":\\\"blancmange\\\",\\\"order\\\":111,\\\"round\\\":\\\"battles\\\",\\\"unlockReq\\\":130,\\\"unlockMult\\\":10,\\\"srcUnlockGroupId\\\":\\\"main\\\",\\\"dstUnlockGroupId\\\":\\\"main\\\",\\\"cardUnlockGroupId\\\":\\\"legendary-2\\\",\\\"answer\\\":null,\\\"triggersBattleGroupSolve\\\":false,\\\"isCutscene\\\":false,\\\"isFullPuzzle\\\":true},{\\\"puzName\\\":\\\"infinitely_many_hogs_and_logs\\\",\\\"battleGroupName\\\":\\\"infinitely_many_hogs_and_logs\\\",\\\"order\\\":112,\\\"round\\\":\\\"battles\\\",\\\"unlockReq\\\":142,\\\"unlockMult\\\":10,\\\"srcUnlockGroupId\\\":\\\"main\\\",\\\"dstUnlockGroupId\\\":\\\"main\\\",\\\"cardUnlockGroupId\\\":\\\"booster7\\\",\\\"answer\\\":null,\\\"triggersBattleGroupSolve\\\":false,\\\"isCutscene\\\":false,\\\"isFullPuzzle\\\":true},{\\\"puzName\\\":\\\"infinitely_many_hogs_and_logs_1\\\",\\\"battleGroupName\\\":\\\"infinitely_many_hogs_and_logs\\\",\\\"order\\\":113,\\\"round\\\":\\\"battles\\\",\\\"unlockReq\\\":-1,\\\"unlockMult\\\":1,\\\"srcUnlockGroupId\\\":\\\"none\\\",\\\"dstUnlockGroupId\\\":\\\"infinitely_many_hogs_and_logs\\\",\\\"cardUnlockGroupId\\\":null,\\\"answer\\\":null,\\\"triggersBattleGroupSolve\\\":false,\\\"isCutscene\\\":false,\\\"isFullPuzzle\\\":false},{\\\"puzName\\\":\\\"infinitely_many_hogs_and_logs_2\\\",\\\"battleGroupName\\\":\\\"infinitely_many_hogs_and_logs\\\",\\\"order\\\":114,\\\"round\\\":\\\"battles\\\",\\\"unlockReq\\\":1,\\\"unlockMult\\\":1,\\\"srcUnlockGroupId\\\":\\\"infinitely_many_hogs_and_logs\\\",\\\"dstUnlockGroupId\\\":\\\"infinitely_many_hogs_and_logs\\\",\\\"cardUnlockGroupId\\\":null,\\\"answer\\\":null,\\\"triggersBattleGroupSolve\\\":false,\\\"isCutscene\\\":false,\\\"isFullPuzzle\\\":false},{\\\"puzName\\\":\\\"infinitely_many_hogs_and_logs_3\\\",\\\"battleGroupName\\\":\\\"infinitely_many_hogs_and_logs\\\",\\\"order\\\":115,\\\"round\\\":\\\"battles\\\",\\\"unlockReq\\\":2,\\\"unlockMult\\\":1,\\\"srcUnlockGroupId\\\":\\\"infinitely_many_hogs_and_logs\\\",\\\"dstUnlockGroupId\\\":\\\"infinitely_many_hogs_and_logs\\\",\\\"cardUnlockGroupId\\\":null,\\\"answer\\\":null,\\\"triggersBattleGroupSolve\\\":false,\\\"isCutscene\\\":false,\\\"isFullPuzzle\\\":false},{\\\"puzName\\\":\\\"infinitely_many_hogs_and_logs_4\\\",\\\"battleGroupName\\\":\\\"infinitely_many_hogs_and_logs\\\",\\\"order\\\":116,\\\"round\\\":\\\"battles\\\",\\\"unlockReq\\\":3,\\\"unlockMult\\\":1,\\\"srcUnlockGroupId\\\":\\\"infinitely_many_hogs_and_logs\\\",\\\"dstUnlockGroupId\\\":\\\"none\\\",\\\"cardUnlockGroupId\\\":null,\\\"answer\\\":null,\\\"triggersBattleGroupSolve\\\":true,\\\"isCutscene\\\":false,\\\"isFullPuzzle\\\":false},{\\\"puzName\\\":\\\"slime\\\",\\\"battleGroupName\\\":\\\"slime\\\",\\\"order\\\":117,\\\"round\\\":\\\"battles\\\",\\\"unlockReq\\\":154,\\\"unlockMult\\\":10,\\\"srcUnlockGroupId\\\":\\\"main\\\",\\\"dstUnlockGroupId\\\":\\\"main\\\",\\\"cardUnlockGroupId\\\":\\\"legendary-3\\\",\\\"answer\\\":null,\\\"triggersBattleGroupSolve\\\":false,\\\"isCutscene\\\":false,\\\"isFullPuzzle\\\":true},{\\\"puzName\\\":\\\"mister_penny\\\",\\\"battleGroupName\\\":\\\"mister_penny\\\",\\\"order\\\":118,\\\"round\\\":\\\"battles\\\",\\\"unlockReq\\\":166,\\\"unlockMult\\\":10,\\\"srcUnlockGroupId\\\":\\\"main\\\",\\\"dstUnlockGroupId\\\":\\\"main\\\",\\\"cardUnlockGroupId\\\":\\\"legendary-11\\\",\\\"answer\\\":null,\\\"triggersBattleGroupSolve\\\":false,\\\"isCutscene\\\":false,\\\"isFullPuzzle\\\":true},{\\\"puzName\\\":\\\"entering_the_water\\\",\\\"battleGroupName\\\":\\\"entering_the_water\\\",\\\"order\\\":119,\\\"round\\\":\\\"cutscenes\\\",\\\"unlockReq\\\":12,\\\"unlockMult\\\":1,\\\"srcUnlockGroupId\\\":\\\"legendaries\\\",\\\"dstUnlockGroupId\\\":\\\"pre_kero_complete\\\",\\\"cardUnlockGroupId\\\":null,\\\"answer\\\":null,\\\"triggersBattleGroupSolve\\\":false,\\\"isCutscene\\\":true,\\\"isFullPuzzle\\\":false},{\\\"puzName\\\":\\\"kero\\\",\\\"battleGroupName\\\":\\\"kero\\\",\\\"order\\\":120,\\\"round\\\":\\\"battles\\\",\\\"unlockReq\\\":1,\\\"unlockMult\\\":1,\\\"srcUnlockGroupId\\\":\\\"pre_kero_complete\\\",\\\"dstUnlockGroupId\\\":\\\"kero_complete\\\",\\\"cardUnlockGroupId\\\":null,\\\"answer\\\":null,\\\"triggersBattleGroupSolve\\\":false,\\\"isCutscene\\\":false,\\\"isFullPuzzle\\\":true},{\\\"puzName\\\":\\\"the_end\\\",\\\"battleGroupName\\\":\\\"the_end\\\",\\\"order\\\":121,\\\"round\\\":\\\"cutscenes\\\",\\\"unlockReq\\\":1,\\\"unlockMult\\\":1,\\\"srcUnlockGroupId\\\":\\\"kero_complete\\\",\\\"dstUnlockGroupId\\\":\\\"\\\",\\\"cardUnlockGroupId\\\":null,\\\"answer\\\":null,\\\"triggersBattleGroupSolve\\\":false,\\\"isCutscene\\\":true,\\\"isFullPuzzle\\\":false},{\\\"puzName\\\":\\\"intra_pvp\\\",\\\"battleGroupName\\\":\\\"intra_pvp\\\",\\\"order\\\":122,\\\"round\\\":\\\"battles\\\",\\\"unlockReq\\\":-1,\\\"unlockMult\\\":1,\\\"srcUnlockGroupId\\\":\\\"none\\\",\\\"dstUnlockGroupId\\\":\\\"none\\\",\\\"cardUnlockGroupId\\\":null,\\\"answer\\\":null,\\\"triggersBattleGroupSolve\\\":false,\\\"isCutscene\\\":false,\\\"isFullPuzzle\\\":false},{\\\"puzName\\\":\\\"intra_pvp_1\\\",\\\"battleGroupName\\\":\\\"intra_pvp\\\",\\\"order\\\":123,\\\"round\\\":\\\"battles\\\",\\\"unlockReq\\\":-1,\\\"unlockMult\\\":1,\\\"srcUnlockGroupId\\\":\\\"none\\\",\\\"dstUnlockGroupId\\\":\\\"none\\\",\\\"cardUnlockGroupId\\\":null,\\\"answer\\\":null,\\\"triggersBattleGroupSolve\\\":false,\\\"isCutscene\\\":false,\\\"isFullPuzzle\\\":false},{\\\"puzName\\\":\\\"intra_pvp_2\\\",\\\"battleGroupName\\\":\\\"intra_pvp\\\",\\\"order\\\":124,\\\"round\\\":\\\"battles\\\",\\\"unlockReq\\\":-1,\\\"unlockMult\\\":1,\\\"srcUnlockGroupId\\\":\\\"none\\\",\\\"dstUnlockGroupId\\\":\\\"none\\\",\\\"cardUnlockGroupId\\\":null,\\\"answer\\\":null,\\\"triggersBattleGroupSolve\\\":false,\\\"isCutscene\\\":false,\\\"isFullPuzzle\\\":false},{\\\"puzName\\\":\\\"pvp\\\",\\\"battleGroupName\\\":\\\"pvp\\\",\\\"order\\\":125,\\\"round\\\":\\\"battles\\\",\\\"unlockReq\\\":1,\\\"unlockMult\\\":1,\\\"srcUnlockGroupId\\\":\\\"tutorial_complete\\\",\\\"dstUnlockGroupId\\\":\\\"none\\\",\\\"cardUnlockGroupId\\\":null,\\\"answer\\\":null,\\\"triggersBattleGroupSolve\\\":false,\\\"isCutscene\\\":false,\\\"isFullPuzzle\\\":false},{\\\"puzName\\\":\\\"instancer\\\",\\\"battleGroupName\\\":\\\"instancer\\\",\\\"order\\\":126,\\\"round\\\":\\\"battles\\\",\\\"unlockReq\\\":1,\\\"unlockMult\\\":1,\\\"srcUnlockGroupId\\\":\\\"intro\\\",\\\"dstUnlockGroupId\\\":\\\"none\\\",\\\"cardUnlockGroupId\\\":null,\\\"answer\\\":null,\\\"triggersBattleGroupSolve\\\":false,\\\"isCutscene\\\":false,\\\"isFullPuzzle\\\":false},{\\\"puzName\\\":\\\"instancer1\\\",\\\"battleGroupName\\\":\\\"instancer\\\",\\\"order\\\":127,\\\"round\\\":\\\"battles\\\",\\\"unlockReq\\\":-1,\\\"unlockMult\\\":1,\\\"srcUnlockGroupId\\\":\\\"none\\\",\\\"dstUnlockGroupId\\\":\\\"none\\\",\\\"cardUnlockGroupId\\\":null,\\\"answer\\\":null,\\\"triggersBattleGroupSolve\\\":false,\\\"isCutscene\\\":false,\\\"isFullPuzzle\\\":false},{\\\"puzName\\\":\\\"instancer2\\\",\\\"battleGroupName\\\":\\\"instancer\\\",\\\"order\\\":128,\\\"round\\\":\\\"battles\\\",\\\"unlockReq\\\":-1,\\\"unlockMult\\\":1,\\\"srcUnlockGroupId\\\":\\\"none\\\",\\\"dstUnlockGroupId\\\":\\\"none\\\",\\\"cardUnlockGroupId\\\":null,\\\"answer\\\":null,\\\"triggersBattleGroupSolve\\\":false,\\\"isCutscene\\\":false,\\\"isFullPuzzle\\\":false},{\\\"puzName\\\":\\\"instancer3\\\",\\\"battleGroupName\\\":\\\"instancer\\\",\\\"order\\\":129,\\\"round\\\":\\\"battles\\\",\\\"unlockReq\\\":-1,\\\"unlockMult\\\":1,\\\"srcUnlockGroupId\\\":\\\"none\\\",\\\"dstUnlockGroupId\\\":\\\"none\\\",\\\"cardUnlockGroupId\\\":null,\\\"answer\\\":null,\\\"triggersBattleGroupSolve\\\":false,\\\"isCutscene\\\":false,\\\"isFullPuzzle\\\":false},{\\\"puzName\\\":\\\"vanilla\\\",\\\"battleGroupName\\\":\\\"vanilla\\\",\\\"order\\\":130,\\\"round\\\":\\\"battles\\\",\\\"unlockReq\\\":-1,\\\"unlockMult\\\":1,\\\"srcUnlockGroupId\\\":\\\"none\\\",\\\"dstUnlockGroupId\\\":\\\"none\\\",\\\"cardUnlockGroupId\\\":null,\\\"answer\\\":null,\\\"triggersBattleGroupSolve\\\":false,\\\"isCutscene\\\":false,\\\"isFullPuzzle\\\":false},{\\\"puzName\\\":\\\"test_battle\\\",\\\"battleGroupName\\\":\\\"test_battle\\\",\\\"order\\\":131,\\\"round\\\":\\\"battles\\\",\\\"unlockReq\\\":-1,\\\"unlockMult\\\":1,\\\"srcUnlockGroupId\\\":\\\"none\\\",\\\"dstUnlockGroupId\\\":\\\"none\\\",\\\"cardUnlockGroupId\\\":\\\"test-group\\\",\\\"answer\\\":null,\\\"triggersBattleGroupSolve\\\":false,\\\"isCutscene\\\":false,\\\"isFullPuzzle\\\":false}],\\\"battleGroups\\\":[{\\\"battleGroupName\\\":\\\"treasure_chest\\\",\\\"displayName\\\":\\\"The Treasure Chest\\\",\\\"emoji\\\":\\\"\\\",\\\"mapPos\\\":{\\\"x\\\":50,\\\"y\\\":72.39819005},\\\"isLegendary\\\":false,\\\"numPuzzles\\\":1,\\\"solveReq\\\":0},{\\\"battleGroupName\\\":\\\"tutorial\\\",\\\"displayName\\\":\\\"Tutorial\\\",\\\"emoji\\\":\\\"🔰\\\",\\\"mapPos\\\":{\\\"x\\\":74.01960784,\\\"y\\\":81.37254902},\\\"isLegendary\\\":false,\\\"numPuzzles\\\":6,\\\"solveReq\\\":1},{\\\"battleGroupName\\\":\\\"first_answer\\\",\\\"displayName\\\":\\\"Your First ANSWER\\\",\\\"emoji\\\":\\\"\\\",\\\"mapPos\\\":{\\\"x\\\":49.01960784,\\\"y\\\":182.8808446},\\\"isLegendary\\\":false,\\\"numPuzzles\\\":1,\\\"solveReq\\\":0},{\\\"battleGroupName\\\":\\\"first_legendary\\\",\\\"displayName\\\":\\\"Your First Legendary\\\",\\\"emoji\\\":\\\"\\\",\\\"mapPos\\\":{\\\"x\\\":49.01960784,\\\"y\\\":116.892911},\\\"isLegendary\\\":false,\\\"numPuzzles\\\":1,\\\"solveReq\\\":0},{\\\"battleGroupName\\\":\\\"trigram_hell\\\",\\\"displayName\\\":\\\"Trigram Hell\\\",\\\"emoji\\\":\\\"🇰🇷\\\",\\\"mapPos\\\":{\\\"x\\\":29.41176471,\\\"y\\\":201.3574661},\\\"isLegendary\\\":false,\\\"numPuzzles\\\":1,\\\"solveReq\\\":0},{\\\"battleGroupName\\\":\\\"petroglyph\\\",\\\"displayName\\\":\\\"Petroglyph\\\",\\\"emoji\\\":\\\"🪨\\\",\\\"mapPos\\\":{\\\"x\\\":23.0015083,\\\"y\\\":234.1628959},\\\"isLegendary\\\":false,\\\"numPuzzles\\\":1,\\\"solveReq\\\":0},{\\\"battleGroupName\\\":\\\"limericks\\\",\\\"displayName\\\":\\\"Limericks\\\",\\\"emoji\\\":\\\"🍋\\\",\\\"mapPos\\\":{\\\"x\\\":59.57767722,\\\"y\\\":249.2458522},\\\"isLegendary\\\":false,\\\"numPuzzles\\\":1,\\\"solveReq\\\":0},{\\\"battleGroupName\\\":\\\"make_your_own_star_battle\\\",\\\"displayName\\\":\\\"Make Your Own Star Battle\\\",\\\"emoji\\\":\\\"🌟\\\",\\\"mapPos\\\":{\\\"x\\\":32.05128205,\\\"y\\\":282.0512821},\\\"isLegendary\\\":false,\\\"numPuzzles\\\":1,\\\"solveReq\\\":0},{\\\"battleGroupName\\\":\\\"now_i_know\\\",\\\"displayName\\\":\\\"Now I Know\\\",\\\"emoji\\\":\\\"🔤\\\",\\\"mapPos\\\":{\\\"x\\\":30.54298643,\\\"y\\\":307.6923077},\\\"isLegendary\\\":false,\\\"numPuzzles\\\":1,\\\"solveReq\\\":0},{\\\"battleGroupName\\\":\\\"gessner_mom\\\",\\\"displayName\\\":\\\"Gessner Mom\\\",\\\"emoji\\\":\\\"🛣️\\\",\\\"mapPos\\\":{\\\"x\\\":71.64404223,\\\"y\\\":321.0784314},\\\"isLegendary\\\":false,\\\"numPuzzles\\\":1,\\\"solveReq\\\":0},{\\\"battleGroupName\\\":\\\"console-ation_prize\\\",\\\"displayName\\\":\\\"Console-ation Prize\\\",\\\"emoji\\\":\\\"📈\\\",\\\"mapPos\\\":{\\\"x\\\":81.82503771,\\\"y\\\":369.9095023},\\\"isLegendary\\\":false,\\\"numPuzzles\\\":1,\\\"solveReq\\\":0},{\\\"battleGroupName\\\":\\\"faces\\\",\\\"displayName\\\":\\\"Faces\\\",\\\"emoji\\\":\\\"💵\\\",\\\"mapPos\\\":{\\\"x\\\":46.7571644,\\\"y\\\":373.6802413},\\\"isLegendary\\\":false,\\\"numPuzzles\\\":1,\\\"solveReq\\\":0},{\\\"battleGroupName\\\":\\\"beige_flags\\\",\\\"displayName\\\":\\\"Beige Flags\\\",\\\"emoji\\\":\\\"🟫\\\",\\\"mapPos\\\":{\\\"x\\\":29.41176471,\\\"y\\\":425.7164404},\\\"isLegendary\\\":false,\\\"numPuzzles\\\":1,\\\"solveReq\\\":0},{\\\"battleGroupName\\\":\\\"animal_shelter\\\",\\\"displayName\\\":\\\"Animal Shelter\\\",\\\"emoji\\\":\\\"🕸️\\\",\\\"mapPos\\\":{\\\"x\\\":53.92156863,\\\"y\\\":490.1960784},\\\"isLegendary\\\":false,\\\"numPuzzles\\\":1,\\\"solveReq\\\":0},{\\\"battleGroupName\\\":\\\"vent\\\",\\\"displayName\\\":\\\"#vent\\\",\\\"emoji\\\":\\\"⌨️\\\",\\\"mapPos\\\":{\\\"x\\\":31.29713424,\\\"y\\\":503.7707391},\\\"isLegendary\\\":false,\\\"numPuzzles\\\":1,\\\"solveReq\\\":0},{\\\"battleGroupName\\\":\\\"paint_by_numbers\\\",\\\"displayName\\\":\\\"Paint By Numbers\\\",\\\"emoji\\\":\\\"🎨\\\",\\\"mapPos\\\":{\\\"x\\\":30.92006033,\\\"y\\\":536.9532428},\\\"isLegendary\\\":false,\\\"numPuzzles\\\":1,\\\"solveReq\\\":0},{\\\"battleGroupName\\\":\\\"bovine_social_media_corp\\\",\\\"displayName\\\":\\\"Bovine Social Media Corp\\\",\\\"emoji\\\":\\\"✖️\\\",\\\"mapPos\\\":{\\\"x\\\":29.78883861,\\\"y\\\":588.9894419},\\\"isLegendary\\\":false,\\\"numPuzzles\\\":1,\\\"solveReq\\\":0},{\\\"battleGroupName\\\":\\\"op_pls_nerf\\\",\\\"displayName\\\":\\\"OP pls nerf\\\",\\\"emoji\\\":\\\"📊\\\",\\\"mapPos\\\":{\\\"x\\\":72.02111614,\\\"y\\\":594.2684766},\\\"isLegendary\\\":false,\\\"numPuzzles\\\":1,\\\"solveReq\\\":0},{\\\"battleGroupName\\\":\\\"gausss_sketches\\\",\\\"displayName\\\":\\\"Gauss's Sketches\\\",\\\"emoji\\\":\\\"🧮\\\",\\\"mapPos\\\":{\\\"x\\\":71.64404223,\\\"y\\\":647.4358974},\\\"isLegendary\\\":false,\\\"numPuzzles\\\":1,\\\"solveReq\\\":0},{\\\"battleGroupName\\\":\\\"postseason_tournaments\\\",\\\"displayName\\\":\\\"Postseason Tournaments\\\",\\\"emoji\\\":\\\"🥊\\\",\\\"mapPos\\\":{\\\"x\\\":56.56108597,\\\"y\\\":672.8883861},\\\"isLegendary\\\":false,\\\"numPuzzles\\\":1,\\\"solveReq\\\":0},{\\\"battleGroupName\\\":\\\"two_worlds_collide\\\",\\\"displayName\\\":\\\"Two Worlds Collide\\\",\\\"emoji\\\":\\\"💫\\\",\\\"mapPos\\\":{\\\"x\\\":31.67420814,\\\"y\\\":702.4886878},\\\"isLegendary\\\":false,\\\"numPuzzles\\\":1,\\\"solveReq\\\":0},{\\\"battleGroupName\\\":\\\"areciboar\\\",\\\"displayName\\\":\\\"ARECIBOAR\\\",\\\"emoji\\\":\\\"📡\\\",\\\"mapPos\\\":{\\\"x\\\":53.73303167,\\\"y\\\":730.3921569},\\\"isLegendary\\\":false,\\\"numPuzzles\\\":1,\\\"solveReq\\\":0},{\\\"battleGroupName\\\":\\\"mastery_tree\\\",\\\"displayName\\\":\\\"Mastery Tree\\\",\\\"emoji\\\":\\\"🃏\\\",\\\"mapPos\\\":{\\\"x\\\":52.48868778,\\\"y\\\":215.3092006},\\\"isLegendary\\\":true,\\\"postBattleDialogue\\\":\\\"Yay! You befriended a legendary!\\\",\\\"numPuzzles\\\":10,\\\"solveReq\\\":0},{\\\"battleGroupName\\\":\\\"angry_boarry_farmer\\\",\\\"displayName\\\":\\\"Angry Boarry Farmer\\\",\\\"emoji\\\":\\\"🧑‍🌾\\\",\\\"mapPos\\\":{\\\"x\\\":70.13574661,\\\"y\\\":103.6953243},\\\"isLegendary\\\":false,\\\"preBattleDialogue\\\":\\\"kero: I’m not sure what that Boarry Farmer is angry about, but boy do they look angry! Maybe if you use the uwuand on them, you can get them under control?\\\",\\\"postBattleDialogue\\\":\\\"That farmer definitely looks calmer now. I think it worked! $(*°▽°*)$\\\",\\\"numPuzzles\\\":1,\\\"solveReq\\\":0},{\\\"battleGroupName\\\":\\\"dargle\\\",\\\"displayName\\\":\\\"Dargle\\\",\\\"emoji\\\":\\\"🐢\\\",\\\"mapPos\\\":{\\\"x\\\":30.54298643,\\\"y\\\":128.2051282},\\\"isLegendary\\\":true,\\\"preBattleDialogue\\\":\\\"Plergle, turgle bargle. The crergle you accorgle mergle to dorgle urgle argle. \\\\nkero: Sorry, I don’t really speak Jargle... $(⁄ ⁄•⁄ω⁄•⁄ ⁄)$\\\",\\\"postBattleDialogue\\\":\\\"Dargle is now our friend!!... I think? $┐('～`;)┌$\\\",\\\"numPuzzles\\\":5,\\\"solveReq\\\":1},{\\\"battleGroupName\\\":\\\"beebay_fulfillment_center\\\",\\\"displayName\\\":\\\"beeBay Fulfillment Center\\\",\\\"emoji\\\":\\\"📦\\\",\\\"mapPos\\\":{\\\"x\\\":73.15233786,\\\"y\\\":135.7466063},\\\"isLegendary\\\":false,\\\"preBattleDialogue\\\":\\\"Make way! These deliveries have got P, L, A, C, E, S to bee!\\\\nkero: We’re going to have to clear out all the rooms if we want to beefriend these bees!\\\",\\\"postBattleDialogue\\\":\\\"It looks like you managed to convince some of them to pack their bags and come along with us! $(ﾉ◕ヮ◕)ﾉ*:･ﾟ✧$\\\",\\\"numPuzzles\\\":13,\\\"solveReq\\\":13},{\\\"battleGroupName\\\":\\\"miss_yu\\\",\\\"displayName\\\":\\\"Miss Yu\\\",\\\"emoji\\\":\\\"🤠\\\",\\\"mapPos\\\":{\\\"x\\\":32.05128205,\\\"y\\\":153.8461538},\\\"isLegendary\\\":true,\\\"preBattleDialogue\\\":\\\"kero: I hear Miss Yu keeps a ranch somewhere ’round these parts. I’m sure she won’t mind a visitor!\\\",\\\"postBattleDialogue\\\":\\\"Now that Miss Yu is our friend, I-- I mean *we* will be udderly unstoppable! $(o´▽`o)$\\\",\\\"numPuzzles\\\":1,\\\"solveReq\\\":0},{\\\"battleGroupName\\\":\\\"gnutmeg_tree\\\",\\\"displayName\\\":\\\"Gnutmeg Tree\\\",\\\"emoji\\\":\\\"🌲\\\",\\\"mapPos\\\":{\\\"x\\\":80.69381599,\\\"y\\\":177.9788839},\\\"isLegendary\\\":false,\\\"preBattleDialogue\\\":\\\"kero: Hi there! $ヾ(*'▽'*)$ We could use your help!\\\\n...hi there... 🌷$(*'▽'*)$ ...we could use your help...\\\\nkero: That’s what I said... $(￢_￢;)$\\\\n...that’s what i said... $(￢_￢🥀)$\\\",\\\"postBattleDialogue\\\":\\\"STOP COPYING ME!!!!\\\\n... Oh, whew, it’s over. I mean, yay! New friends! $(*≧ω≦*)$\\\",\\\"numPuzzles\\\":1,\\\"solveReq\\\":0},{\\\"battleGroupName\\\":\\\"coloring\\\",\\\"displayName\\\":\\\"Coloring\\\",\\\"emoji\\\":\\\"🖍️\\\",\\\"mapPos\\\":{\\\"x\\\":70.51282051,\\\"y\\\":194.1930618},\\\"isLegendary\\\":true,\\\"preBattleDialogue\\\":\\\"kero: Hi there! $ヾ(*'▽'*)$ We could use your help!\\\\n...\\\\nkero: ... Hm, they’re not responding. Could you get their attention?\\\",\\\"postBattleDialogue\\\":\\\"Good. We’ve put them in their place. As our friend!! $(╯✧▽✧)╯$\\\",\\\"numPuzzles\\\":1,\\\"solveReq\\\":0},{\\\"battleGroupName\\\":\\\"spirit_of_the_vines\\\",\\\"displayName\\\":\\\"Spirit of the Vines\\\",\\\"emoji\\\":\\\"🌿\\\",\\\"mapPos\\\":{\\\"x\\\":75.7918552,\\\"y\\\":269.2307692},\\\"isLegendary\\\":false,\\\"preBattleDialogue\\\":\\\"...vile creature... ...begone...🌱🌿\\\\nkero: Well that’s not very nice. Looks like *someone* could use more uwu!\\\",\\\"postBattleDialogue\\\":\\\"Well, I guess they won’t need to be guard-en that place anymore. Eh? Eh? Get it? $(｡•̀ᴗ-)✧ $\\\",\\\"numPuzzles\\\":5,\\\"solveReq\\\":1},{\\\"battleGroupName\\\":\\\"othello\\\",\\\"displayName\\\":\\\"Othello\\\",\\\"emoji\\\":\\\"⚪\\\",\\\"mapPos\\\":{\\\"x\\\":71.64404223,\\\"y\\\":292.2322775},\\\"isLegendary\\\":true,\\\"preBattleDialogue\\\":\\\"Intrudder! Moove out, or you’ll be seeing spots!\\\\nkero: Othello’s one tough cow! We’ll hafta find another way to get to the other side of this ’un!\\\",\\\"postBattleDialogue\\\":\\\"Good job flipping Othello over to our side! $ヽ(^o^)ρ┳┳σ(^o^)ノ$\\\",\\\"numPuzzles\\\":1,\\\"solveReq\\\":0},{\\\"battleGroupName\\\":\\\"jabberwock\\\",\\\"displayName\\\":\\\"Jabberwock\\\",\\\"emoji\\\":\\\"🔣\\\",\\\"mapPos\\\":{\\\"x\\\":56.56108597,\\\"y\\\":313.3484163},\\\"isLegendary\\\":true,\\\"preBattleDialogue\\\":\\\"“Gadzooks, is that the dog-♡ed varlet of yore?”\\\\nkero: Owo was that an insult or a compliment? Eh whatever, it’s uwu time!\\\",\\\"postBattleDialogue\\\":\\\"Take that you dog-farted carseat for ④!\\\\n...Sorry $(*_ _)人$ I was just trying to figure out how to talk like Jabberwock $|･ω･)$\\\",\\\"numPuzzles\\\":7,\\\"solveReq\\\":1},{\\\"battleGroupName\\\":\\\"asteroid\\\",\\\"displayName\\\":\\\"Asteroid\\\",\\\"emoji\\\":\\\"☄️\\\",\\\"mapPos\\\":{\\\"x\\\":85.21870287,\\\"y\\\":340.5354449},\\\"isLegendary\\\":false,\\\"preBattleDialogue\\\":\\\"dino: I say, is that an asteroid, whacked from the past? Quite the predicament, this is.\\\",\\\"postBattleDialogue\\\":\\\"Looks like the dinos will assist you, now that you’ve defeated them! I mean, helped them! Sorry, force of habit. $╮(︶▽︶)╭$\\\",\\\"numPuzzles\\\":3,\\\"solveReq\\\":1},{\\\"battleGroupName\\\":\\\"bb_b\\\",\\\"displayName\\\":\\\"bb b\\\",\\\"emoji\\\":\\\"👶\\\",\\\"mapPos\\\":{\\\"x\\\":63.46153846,\\\"y\\\":420.1357466},\\\"isLegendary\\\":true,\\\"preBattleDialogue\\\":\\\"the world is so scary. i always l, o, s, e. $t_t$ i don’t wanna leave my hive...\\\",\\\"postBattleDialogue\\\":\\\"My old master once told me that the greatest gains sometimes come from defeats. I’m not really sure what she was getting at, but I guess maybe that applies today? $(¯ . ¯٥)$\\\",\\\"numPuzzles\\\":1,\\\"solveReq\\\":0},{\\\"battleGroupName\\\":\\\"moonick\\\",\\\"displayName\\\":\\\"Moonick\\\",\\\"emoji\\\":\\\"🆓\\\",\\\"mapPos\\\":{\\\"x\\\":73.83107089,\\\"y\\\":452.4886878},\\\"isLegendary\\\":true,\\\"preBattleDialogue\\\":\\\"These pastures need to get up to code, stat! The Agency will not tolerate such flagrant violations!\\\",\\\"postBattleDialogue\\\":\\\"Your pasture eyes have satisfied all of Moonick’s constraints! $(^_<)〜☆$ Now he is ours! Our friend, that is!\\\",\\\"numPuzzles\\\":25,\\\"solveReq\\\":1},{\\\"battleGroupName\\\":\\\"the_swarm\\\",\\\"displayName\\\":\\\"The Swarm\\\",\\\"emoji\\\":\\\"🐎\\\",\\\"mapPos\\\":{\\\"x\\\":66.36500754,\\\"y\\\":527.9034691},\\\"isLegendary\\\":false,\\\"preBattleDialogue\\\":\\\"*buzz buzz buzz*\\\\nkero: Is that a LOT of bees off in the distance?\\\\n*B, U, Z, Z! B, U, Z, Z! B, U, Z, Z!*\\\\nkero: AHH! They’re getting closer!! $＼(º □ º l|l)/$\\\",\\\"postBattleDialogue\\\":\\\"Friends! Friends! So many friends~!!! $°˖✧◝(⁰▿⁰)◜✧˖°$\\\",\\\"numPuzzles\\\":1,\\\"solveReq\\\":0},{\\\"battleGroupName\\\":\\\"spelling_bee\\\",\\\"displayName\\\":\\\"Spelling Bee\\\",\\\"emoji\\\":\\\"🧸\\\",\\\"mapPos\\\":{\\\"x\\\":47.13423831,\\\"y\\\":562.2171946},\\\"isLegendary\\\":true,\\\"preBattleDialogue\\\":\\\"I spy, I S, P, Y, the B, E, A, R, S! Bees! Get in L, I, N, E and raise some spell!\\\",\\\"postBattleDialogue\\\":\\\"Hooray for V, I, C, T, O, R, Y! Oh no, they’ve got bee doing it too! $( ◡‿◡ *)$\\\\nAll our friendship must be working! $(･ω<)☆$\\\",\\\"numPuzzles\\\":1,\\\"solveReq\\\":0},{\\\"battleGroupName\\\":\\\"blancmange\\\",\\\"displayName\\\":\\\"Blancmange\\\",\\\"emoji\\\":\\\"♟️\\\",\\\"mapPos\\\":{\\\"x\\\":49.77375566,\\\"y\\\":618.7782805},\\\"isLegendary\\\":true,\\\"preBattleDialogue\\\":\\\"Away with you, wicked one! MOO SHALL NOT PASS!!!\\\",\\\"postBattleDialogue\\\":\\\"Wow! Blancmange’s moo-gicks are now m--ours! $(〃＾▽＾〃)$\\\",\\\"numPuzzles\\\":1,\\\"solveReq\\\":0},{\\\"battleGroupName\\\":\\\"infinitely_many_hogs_and_logs\\\",\\\"displayName\\\":\\\"Infinitely Many Hogs (and Logs)\\\",\\\"emoji\\\":\\\"🪵\\\",\\\"mapPos\\\":{\\\"x\\\":39.21568627,\\\"y\\\":653.8461538},\\\"isLegendary\\\":false,\\\"preBattleDialogue\\\":\\\"Hog knows ONE Hog not enough to stop you, so Hog bring INFINITELY MANY Hog. And Log. Hog SMART!\\\",\\\"postBattleDialogue\\\":\\\"With those infinite hogs out of the way, we’ve gained power. INFINITE POWER!! And friendship! $(ﾉ≧∀≦)ﾉ ‥…━━━★$\\\",\\\"numPuzzles\\\":4,\\\"solveReq\\\":1},{\\\"battleGroupName\\\":\\\"slime\\\",\\\"displayName\\\":\\\"Slime\\\",\\\"emoji\\\":\\\"🧪\\\",\\\"mapPos\\\":{\\\"x\\\":74.28355958,\\\"y\\\":711.9155354},\\\"isLegendary\\\":true,\\\"preBattleDialogue\\\":\\\"kero: What’s this? A vat of Boarry sludge has congealed into a giant, sentient slime! $(°ロ°) !$\\\",\\\"postBattleDialogue\\\":\\\"That was a lot more slime than I was expecting. But more slime is more power... $( ಠ ͜ʖ ಠ)$\\\",\\\"numPuzzles\\\":1,\\\"solveReq\\\":0},{\\\"battleGroupName\\\":\\\"mister_penny\\\",\\\"displayName\\\":\\\"Mister Penny\\\",\\\"emoji\\\":\\\"🪙\\\",\\\"mapPos\\\":{\\\"x\\\":25.26395173,\\\"y\\\":743.9668175},\\\"isLegendary\\\":true,\\\"preBattleDialogue\\\":\\\"kero: I’d no idea the Boars kept all their spoils this deep! Let’s break into their treasury and steal the loot for ourselves!\\\",\\\"postBattleDialogue\\\":\\\"Mister Penny tried to run home and tell his wife he “retired” and is living off his “investments”... Little does she know he’ll be working the junkyard as our friend forever! $ᕕ(｀∇´)ᕗ$\\\",\\\"numPuzzles\\\":1,\\\"solveReq\\\":0},{\\\"battleGroupName\\\":\\\"entering_the_water\\\",\\\"displayName\\\":\\\"Entering the Water\\\",\\\"emoji\\\":\\\"\\\",\\\"mapPos\\\":{\\\"x\\\":50,\\\"y\\\":771.1161388},\\\"isLegendary\\\":false,\\\"numPuzzles\\\":1,\\\"solveReq\\\":0},{\\\"battleGroupName\\\":\\\"kero\\\",\\\"displayName\\\":\\\"Kero\\\",\\\"emoji\\\":\\\"🐉\\\",\\\"mapPos\\\":{\\\"x\\\":50,\\\"y\\\":867.2699849},\\\"isLegendary\\\":false,\\\"preBattleDialogue\\\":\\\"captain pi: The legendaries stand united for the first time in history! Let us join our hands and vanquish this evil once and for all!\\\",\\\"numPuzzles\\\":1,\\\"solveReq\\\":0},{\\\"battleGroupName\\\":\\\"the_end\\\",\\\"displayName\\\":\\\"The End\\\",\\\"emoji\\\":\\\"\\\",\\\"mapPos\\\":{\\\"x\\\":50,\\\"y\\\":894.4193062},\\\"isLegendary\\\":false,\\\"numPuzzles\\\":1,\\\"solveReq\\\":0},{\\\"battleGroupName\\\":\\\"intra_pvp\\\",\\\"displayName\\\":\\\"Intra-team PvP\\\",\\\"emoji\\\":\\\"\\\",\\\"isLegendary\\\":false,\\\"numPuzzles\\\":2,\\\"solveReq\\\":0},{\\\"battleGroupName\\\":\\\"pvp\\\",\\\"displayName\\\":\\\"PvP Arena\\\",\\\"emoji\\\":\\\"\\\",\\\"mapPos\\\":{\\\"x\\\":88.34841629,\\\"y\\\":151.2066365},\\\"isLegendary\\\":false,\\\"numPuzzles\\\":1,\\\"solveReq\\\":0},{\\\"battleGroupName\\\":\\\"instancer\\\",\\\"displayName\\\":\\\"Instancer\\\",\\\"emoji\\\":\\\"\\\",\\\"mapPos\\\":{\\\"x\\\":30.16591252,\\\"y\\\":95.02262443},\\\"isLegendary\\\":false,\\\"numPuzzles\\\":3,\\\"solveReq\\\":0},{\\\"battleGroupName\\\":\\\"vanilla\\\",\\\"displayName\\\":\\\"Vanilla\\\",\\\"emoji\\\":\\\"\\\",\\\"isLegendary\\\":false,\\\"numPuzzles\\\":1,\\\"solveReq\\\":0},{\\\"battleGroupName\\\":\\\"test_battle\\\",\\\"displayName\\\":\\\"Test Battle Please Ignore\\\",\\\"emoji\\\":\\\"\\\",\\\"isLegendary\\\":false,\\\"numPuzzles\\\":1,\\\"solveReq\\\":0}]}\"","import allPuzzlesJson from \"engine/puzzles/all-puzzles.json?raw\";\nimport { AllPuzzles } from \"engine/puzzles/puzzle-data\";\n\nconst ALL_PUZZLES = JSON.parse(allPuzzlesJson) as AllPuzzles;\nexport default ALL_PUZZLES;\n","export default \"[{\\\"name\\\":\\\"boarry-farmer\\\",\\\"displayName\\\":\\\"Boarry Farmer\\\",\\\"text\\\":\\\"This Creature can only Attack Units in its column.\\\\n*“Want to try my strawboarries? Or my raspboarries? Rhuboarb? Boarnanas?”*\\\",\\\"power\\\":3,\\\"cost\\\":[\\\".\\\",\\\"R\\\"],\\\"shell\\\":0,\\\"maxHealth\\\":2,\\\"color\\\":\\\"R\\\",\\\"capturable\\\":true,\\\"implemented\\\":true,\\\"cardUnlockGroupId\\\":\\\"booster1\\\"},{\\\"name\\\":\\\"tusk-enhancement\\\",\\\"displayName\\\":\\\"Tusk Enhancement\\\",\\\"text\\\":\\\"When this Creature is Summoned, other Creatures in its column gain +1 Power.\\\\n*Shinier, sturdier, pokier.*\\\",\\\"power\\\":0,\\\"cost\\\":[\\\".\\\",\\\"R\\\",\\\"R\\\"],\\\"shell\\\":0,\\\"maxHealth\\\":2,\\\"color\\\":\\\"R\\\",\\\"capturable\\\":true,\\\"implemented\\\":true,\\\"cardUnlockGroupId\\\":\\\"booster1\\\"},{\\\"name\\\":\\\"eager-beever\\\",\\\"displayName\\\":\\\"Eager Beever\\\",\\\"text\\\":\\\"When a Friendly Creature moves, it may move to an Empty Space Adjacent to this Creature.\\\\n*“Let’s get it D, O, N, E, yes yes!”*\\\",\\\"power\\\":0,\\\"cost\\\":[\\\"Y\\\"],\\\"shell\\\":0,\\\"maxHealth\\\":2,\\\"color\\\":\\\"Y\\\",\\\"capturable\\\":true,\\\"implemented\\\":true,\\\"cardUnlockGroupId\\\":\\\"booster2\\\"},{\\\"name\\\":\\\"king-bee\\\",\\\"displayName\\\":\\\"King Bee (who sends his regards)\\\",\\\"text\\\":\\\"When Attacking, Defender gets -1 Power.\\\\n*“i will b out til next week, ask queen b if u need the army”*\\\",\\\"power\\\":2,\\\"cost\\\":[\\\".\\\",\\\".\\\",\\\".\\\",\\\"Y\\\",\\\"Y\\\"],\\\"shell\\\":0,\\\"maxHealth\\\":5,\\\"color\\\":\\\"Y\\\",\\\"capturable\\\":true,\\\"implemented\\\":true,\\\"cardUnlockGroupId\\\":\\\"booster2\\\"},{\\\"name\\\":\\\"nightshade\\\",\\\"displayName\\\":\\\"Nightshade\\\",\\\"text\\\":\\\"Cannot Attack.\\\\nSpecial: Choose an Enemy Unit. Discard a random card to deal Damage to it equal to this Creature’s Power.\\\\n*Seek out the midnight bloom.*\\\",\\\"power\\\":3,\\\"cost\\\":[\\\"P\\\",\\\"P\\\"],\\\"shell\\\":0,\\\"maxHealth\\\":3,\\\"color\\\":\\\"P\\\",\\\"capturable\\\":true,\\\"implemented\\\":true,\\\"cardUnlockGroupId\\\":\\\"booster3\\\"},{\\\"name\\\":\\\"ultra-violet\\\",\\\"displayName\\\":\\\"Ultra Violet\\\",\\\"text\\\":\\\"When Attacking, Defender does not Ready on start of next turn.\\\\n*“...power, strength... 🌼...flowers, earth... ”*\\\",\\\"power\\\":2,\\\"cost\\\":[\\\".\\\",\\\".\\\",\\\".\\\",\\\"P\\\",\\\"P\\\"],\\\"shell\\\":0,\\\"maxHealth\\\":4,\\\"color\\\":\\\"P\\\",\\\"capturable\\\":true,\\\"implemented\\\":true,\\\"cardUnlockGroupId\\\":\\\"booster3\\\"},{\\\"name\\\":\\\"sapphire-rose\\\",\\\"displayName\\\":\\\"Sapphire Rose\\\",\\\"text\\\":\\\"Flex: Draw a card. Deal 2 Damage to this Creature.\\\\n*This mischievous flower spirit appears like a curious child and vanishes like a hooded thief.*\\\",\\\"power\\\":0,\\\"cost\\\":[\\\"P\\\"],\\\"shell\\\":0,\\\"maxHealth\\\":2,\\\"color\\\":\\\"P\\\",\\\"capturable\\\":true,\\\"implemented\\\":true,\\\"cardUnlockGroupId\\\":\\\"booster4\\\"},{\\\"name\\\":\\\"bell-flower\\\",\\\"displayName\\\":\\\"Bell Flower\\\",\\\"text\\\":\\\"When Destroyed, draw a card.\\\\n*Boarry Farmers know that when the Bell Flower begins to chime, the spring harvest has arrived.*\\\",\\\"power\\\":2,\\\"cost\\\":[\\\".\\\",\\\"P\\\"],\\\"shell\\\":0,\\\"maxHealth\\\":3,\\\"color\\\":\\\"P\\\",\\\"capturable\\\":true,\\\"implemented\\\":true,\\\"cardUnlockGroupId\\\":\\\"booster4\\\"},{\\\"name\\\":\\\"realistic-rex\\\",\\\"displayName\\\":\\\"Realistic Rex\\\",\\\"text\\\":\\\"{G}, Special: Choose an Unprotected Enemy Unit. Choose an Unprotected Enemy Unit. Attack the first Unit. Attack the second Unit.\\\\n*Now more historically accurate!*\\\",\\\"power\\\":2,\\\"cost\\\":[\\\".\\\",\\\".\\\",\\\"G\\\",\\\"G\\\"],\\\"shell\\\":0,\\\"maxHealth\\\":5,\\\"color\\\":\\\"G\\\",\\\"capturable\\\":true,\\\"implemented\\\":true,\\\"cardUnlockGroupId\\\":\\\"booster5\\\"},{\\\"name\\\":\\\"thesaurus\\\",\\\"displayName\\\":\\\"Thesaurus\\\",\\\"text\\\":\\\"When this Creature Destroys another Creature, gain {?}.\\\\n*“Ay, so you need a word? Desire a term? Fancy a phrase? Lack a lexeme?”*\\\",\\\"power\\\":5,\\\"cost\\\":[\\\".\\\",\\\".\\\",\\\".\\\",\\\"G\\\",\\\"G\\\"],\\\"shell\\\":0,\\\"maxHealth\\\":5,\\\"color\\\":\\\"G\\\",\\\"capturable\\\":true,\\\"implemented\\\":true,\\\"cardUnlockGroupId\\\":\\\"booster5\\\"},{\\\"name\\\":\\\"bee-rider\\\",\\\"displayName\\\":\\\"Bee Rider\\\",\\\"text\\\":\\\"Flex: Move to an Adjacent Space. Can only be done once per turn.\\\\n*Open skies await!*\\\",\\\"power\\\":2,\\\"cost\\\":[\\\"Y\\\",\\\"Y\\\"],\\\"shell\\\":0,\\\"maxHealth\\\":2,\\\"color\\\":\\\"Y\\\",\\\"capturable\\\":true,\\\"implemented\\\":true,\\\"cardUnlockGroupId\\\":\\\"booster6\\\"},{\\\"name\\\":\\\"swarm-tactics\\\",\\\"displayName\\\":\\\"Swarm Tactics\\\",\\\"text\\\":\\\"When Damaged by a Creature, that Creature takes 1 Damage.\\\\n{Y}, Special: Until the start of your next turn, this Creature additionally Protects Friendly Units in Friendly Spaces in the columns to its left and right from Units in Enemy Spaces.\\\\n*On the day of the Final Swarming, the sky will darken and the air will be filled with a deafening buzz.*\\\",\\\"power\\\":2,\\\"cost\\\":[\\\".\\\",\\\"Y\\\",\\\"Y\\\"],\\\"shell\\\":0,\\\"maxHealth\\\":5,\\\"color\\\":\\\"Y\\\",\\\"capturable\\\":true,\\\"implemented\\\":true,\\\"cardUnlockGroupId\\\":\\\"booster6\\\"},{\\\"name\\\":\\\"log-on-a-hog\\\",\\\"displayName\\\":\\\"Log on a Hog\\\",\\\"text\\\":\\\"When Destroyed, Summon a Hog in this Creature’s Space.\\\\n*You don’t see that every day!*\\\",\\\"power\\\":1,\\\"cost\\\":[\\\".\\\",\\\".\\\",\\\"P\\\"],\\\"shell\\\":0,\\\"maxHealth\\\":2,\\\"color\\\":\\\"P\\\",\\\"capturable\\\":true,\\\"implemented\\\":true,\\\"cardUnlockGroupId\\\":\\\"booster7\\\"},{\\\"name\\\":\\\"hog-on-a-log\\\",\\\"displayName\\\":\\\"Hog on a Log\\\",\\\"text\\\":\\\"This Creature can only Attack Units in its column.\\\\nWhen Destroyed, Summon a Log in this Creature’s Space.\\\\n*Now this Hog is going places!*\\\",\\\"power\\\":2,\\\"cost\\\":[\\\".\\\",\\\".\\\",\\\"R\\\"],\\\"shell\\\":0,\\\"maxHealth\\\":1,\\\"color\\\":\\\"R\\\",\\\"capturable\\\":true,\\\"implemented\\\":true,\\\"cardUnlockGroupId\\\":\\\"booster7\\\"},{\\\"name\\\":\\\"nam-pam-bee\\\",\\\"displayName\\\":\\\"Nam & Pam Bee\\\",\\\"text\\\":\\\"On start of turn, if this Creature was Damaged last turn, gain {Y}. *(Only if it’s still on the field.)*\\\\n*“On Fridays we play B, O, A, R, D, G, A, M, Es with Miss Yu.”*\\\",\\\"power\\\":2,\\\"cost\\\":[\\\"Y\\\",\\\"Y\\\"],\\\"shell\\\":0,\\\"maxHealth\\\":3,\\\"color\\\":\\\"Y\\\",\\\"capturable\\\":true,\\\"implemented\\\":true,\\\"cardUnlockGroupId\\\":\\\"fish1\\\"},{\\\"name\\\":\\\"murray\\\",\\\"displayName\\\":\\\"Murray\\\",\\\"text\\\":\\\"{(W/B)}, Flex: Attack. Use at most once per turn.\\\\n{RYPGWB}, Special: Choose an Enemy Base. Destroy it.\\\\n*Murray found that he had much more ability on the tennis court than in the royal Court of Cows.*\\\",\\\"power\\\":1,\\\"cost\\\":[\\\"B\\\",\\\"B\\\",\\\"W/B\\\",\\\"W\\\",\\\"W\\\"],\\\"shell\\\":0,\\\"maxHealth\\\":7,\\\"color\\\":\\\"W/B\\\",\\\"capturable\\\":true,\\\"implemented\\\":true,\\\"cardUnlockGroupId\\\":\\\"fish10\\\"},{\\\"name\\\":\\\"quantum-butter-churner\\\",\\\"displayName\\\":\\\"Quantum Butter Churner\\\",\\\"text\\\":\\\"This Creature can only Attack if it is Unprotected.\\\\n*The key to getting smooth cream is the rotation by 1/√2 + i/√2.*\\\",\\\"power\\\":4,\\\"cost\\\":[\\\"B\\\",\\\"W/B\\\",\\\"W/B\\\",\\\"W\\\"],\\\"shell\\\":0,\\\"maxHealth\\\":6,\\\"color\\\":\\\"W/B\\\",\\\"capturable\\\":true,\\\"implemented\\\":true,\\\"cardUnlockGroupId\\\":\\\"fish11\\\"},{\\\"name\\\":\\\"boarnana-tree\\\",\\\"displayName\\\":\\\"Boarnana Tree\\\",\\\"text\\\":\\\"{R}, Flex: Other Friendly Creatures in this Creature’s row gain +1 Health. Take 1 Damage.\\\\n*Be careful not to upset the unripe boarnanas!*\\\",\\\"power\\\":0,\\\"cost\\\":[\\\".\\\",\\\".\\\",\\\"R\\\"],\\\"shell\\\":0,\\\"maxHealth\\\":1,\\\"color\\\":\\\"R\\\",\\\"capturable\\\":true,\\\"implemented\\\":true,\\\"cardUnlockGroupId\\\":\\\"fish12\\\"},{\\\"name\\\":\\\"glass-of-moocha\\\",\\\"displayName\\\":\\\"Glass of Moocha\\\",\\\"text\\\":\\\"Special: Gain {BW}. Take 1 Damage.\\\\n*Tired bees and boars start their morning with a bit of cowfee.*\\\",\\\"power\\\":0,\\\"cost\\\":[\\\"B\\\",\\\".\\\"],\\\"shell\\\":0,\\\"maxHealth\\\":1,\\\"color\\\":\\\"B\\\",\\\"capturable\\\":true,\\\"implemented\\\":true,\\\"cardUnlockGroupId\\\":\\\"fish13\\\"},{\\\"name\\\":\\\"glass-of-moo\\\",\\\"displayName\\\":\\\"Glass of Moo\\\",\\\"text\\\":\\\"Special: Gain {BW}. Take 1 Damage.\\\\n*Torrents of milk flow thicker than water in some parts of the cave.*\\\",\\\"power\\\":0,\\\"cost\\\":[\\\"W\\\",\\\".\\\"],\\\"shell\\\":0,\\\"maxHealth\\\":1,\\\"color\\\":\\\"W\\\",\\\"capturable\\\":true,\\\"implemented\\\":true,\\\"cardUnlockGroupId\\\":\\\"fish14\\\"},{\\\"name\\\":\\\"oklahoma-tusks\\\",\\\"displayName\\\":\\\"Oklahoma Tusks\\\",\\\"text\\\":\\\"{R}, Flex: Gain +1 Power for this turn only.\\\\n{R}, Special: Attack all Enemy Creatures in this Creature’s column.\\\\n*Two-time tusk wrestling champion Oklahoma Tusks is also famous for a line of raisin-based energy bars.*\\\",\\\"power\\\":2,\\\"cost\\\":[\\\".\\\",\\\".\\\",\\\"R\\\",\\\"R\\\"],\\\"shell\\\":0,\\\"maxHealth\\\":6,\\\"color\\\":\\\"R\\\",\\\"capturable\\\":true,\\\"implemented\\\":true,\\\"cardUnlockGroupId\\\":\\\"fish15\\\"},{\\\"name\\\":\\\"dino-nugget\\\",\\\"displayName\\\":\\\"Dino Nugget\\\",\\\"text\\\":\\\"When this Creature is Summoned, other {G} Creatures in its row gain +1 Health.\\\\n*Made with certified organic dinosaurs (non-GMO).*\\\",\\\"power\\\":1,\\\"cost\\\":[\\\"G\\\"],\\\"shell\\\":0,\\\"maxHealth\\\":1,\\\"color\\\":\\\"G\\\",\\\"capturable\\\":true,\\\"implemented\\\":true,\\\"cardUnlockGroupId\\\":\\\"fish16\\\"},{\\\"name\\\":\\\"lady-jane\\\",\\\"displayName\\\":\\\"Lady Jane\\\",\\\"text\\\":\\\"{(W/B)}, Special: Choose an Enemy Unit that has taken Damage this turn. Deal Damage to it equal to this Creature’s Power +1.\\\\n*Maintaining balance between choco and vanilla cows is a cultural responsibility.*\\\",\\\"power\\\":1,\\\"cost\\\":[\\\"W/B\\\"],\\\"shell\\\":0,\\\"maxHealth\\\":1,\\\"color\\\":\\\"W/B\\\",\\\"capturable\\\":true,\\\"implemented\\\":true,\\\"cardUnlockGroupId\\\":\\\"fish17\\\"},{\\\"name\\\":\\\"hog-hog\\\",\\\"displayName\\\":\\\"Hog Hog\\\",\\\"text\\\":\\\"This Creature can only Attack Units in its column.\\\\nWhen Destroyed, add a Hog card to hand.\\\\n*Hog Hog hogs Hog; Hog hogs Hog Hog.*\\\",\\\"power\\\":2,\\\"cost\\\":[\\\".\\\",\\\"R\\\"],\\\"shell\\\":0,\\\"maxHealth\\\":1,\\\"color\\\":\\\"R\\\",\\\"capturable\\\":true,\\\"implemented\\\":true,\\\"cardUnlockGroupId\\\":\\\"fish18\\\"},{\\\"name\\\":\\\"nice-cow\\\",\\\"displayName\\\":\\\"Nice Cow\\\",\\\"text\\\":\\\"{B.}, Special: Attack. Adjacent Friendly Creatures gain +1 Power.\\\\n*Also known as vache.*\\\",\\\"power\\\":1,\\\"cost\\\":[\\\"B\\\",\\\"B\\\"],\\\"shell\\\":0,\\\"maxHealth\\\":3,\\\"color\\\":\\\"B\\\",\\\"capturable\\\":true,\\\"implemented\\\":true,\\\"cardUnlockGroupId\\\":\\\"fish2\\\"},{\\\"name\\\":\\\"quail-aboard-fiery-steeds\\\",\\\"displayName\\\":\\\"Quail Aboard Fiery Steeds\\\",\\\"text\\\":\\\"{RR}, Special: Attack all Unprotected Enemy Units in this Creature’s column and the two adjacent columns.\\\\n*Quail before the quail!*\\\",\\\"power\\\":3,\\\"cost\\\":[\\\"R\\\",\\\"R\\\",\\\"R\\\",\\\"R\\\",\\\"R\\\"],\\\"shell\\\":0,\\\"maxHealth\\\":9,\\\"color\\\":\\\"R\\\",\\\"capturable\\\":true,\\\"implemented\\\":true,\\\"cardUnlockGroupId\\\":\\\"fish3\\\"},{\\\"name\\\":\\\"touch-grass\\\",\\\"displayName\\\":\\\"Touch Grass\\\",\\\"text\\\":\\\"{P}, Special: Choose a Protected Creature. Attack it.\\\\n*[gentle caressing] “Oooooooooooooh.”*\\\",\\\"power\\\":1,\\\"cost\\\":[\\\"P\\\"],\\\"shell\\\":0,\\\"maxHealth\\\":1,\\\"color\\\":\\\"P\\\",\\\"capturable\\\":true,\\\"implemented\\\":true,\\\"cardUnlockGroupId\\\":\\\"fish4\\\"},{\\\"name\\\":\\\"rude-cow\\\",\\\"displayName\\\":\\\"Rude Cow\\\",\\\"text\\\":\\\"{W}, Special: Attack. Adjacent Friendly Creatures gain +1 Health.\\\\n*What do you call a rude cow? Beef jerky.*\\\",\\\"power\\\":4,\\\"cost\\\":[\\\".\\\",\\\".\\\",\\\"W\\\",\\\"W\\\"],\\\"shell\\\":0,\\\"maxHealth\\\":5,\\\"color\\\":\\\"W\\\",\\\"capturable\\\":true,\\\"implemented\\\":true,\\\"cardUnlockGroupId\\\":\\\"fish5\\\"},{\\\"name\\\":\\\"king-of-bison\\\",\\\"displayName\\\":\\\"King of Bison, Grand Overseer of the Emerald Grasslands, Lord of the Horned Throne, Protector of Bovine Nobility, Keeper of Sacred Meadows, Emissary of Moonlit Pastures, Sovereign Guardian of the Seven Ruminant Realms, Conqueror of the Golden Haystacks, and Embodiment of the Eternal Herd’s Spirit\\\",\\\"text\\\":\\\"*Long live the king!*\\\",\\\"power\\\":1,\\\"cost\\\":[\\\"B\\\",\\\"B\\\",\\\"W/B\\\",\\\"W/B\\\",\\\"W\\\",\\\"W\\\"],\\\"shell\\\":0,\\\"maxHealth\\\":10,\\\"color\\\":\\\"W/B\\\",\\\"capturable\\\":true,\\\"implemented\\\":true,\\\"cardUnlockGroupId\\\":\\\"fish6\\\"},{\\\"name\\\":\\\"queen-of-bison\\\",\\\"displayName\\\":\\\"Queen of Bison, Supreme Sovereign of the Verdant Pastures, Guardian of the Grazing Lands, Ruler of the Majestic Herds, Mistress of the Bovine Dominion, Regent of Fertile Meadows, Enchantress of the Sacred Clover Fields, Seraphic Patroness of Milk and Butter, Monarch of Hooves and Horns, Empress of Mooo-nifest Destiny, Lady of Lush Plains and Grazing Glory\\\",\\\"text\\\":\\\"*Her Moojesty.*\\\",\\\"power\\\":10,\\\"cost\\\":[\\\"B\\\",\\\"B\\\",\\\"W/B\\\",\\\"W/B\\\",\\\"W\\\",\\\"W\\\"],\\\"shell\\\":0,\\\"maxHealth\\\":1,\\\"color\\\":\\\"W/B\\\",\\\"capturable\\\":true,\\\"implemented\\\":true,\\\"cardUnlockGroupId\\\":\\\"fish7\\\"},{\\\"name\\\":\\\"switch-boar-d\\\",\\\"displayName\\\":\\\"Switch Boar’d\\\",\\\"text\\\":\\\"{R}, Special: Choose an Unprotected Enemy Unit, then choose a Friendly Unit Adjacent to this Creature. Attack that Enemy Unit. Swap this Creature with that Friendly Unit.\\\\n*Is it immoral to flip the switch?*\\\",\\\"power\\\":1,\\\"cost\\\":[\\\"R\\\"],\\\"shell\\\":0,\\\"maxHealth\\\":1,\\\"color\\\":\\\"R\\\",\\\"capturable\\\":true,\\\"implemented\\\":true,\\\"cardUnlockGroupId\\\":\\\"fish8\\\"},{\\\"name\\\":\\\"giraffatitan\\\",\\\"displayName\\\":\\\"Giraffatitan\\\",\\\"text\\\":\\\"Special: Attack a Protected Creature in this column.\\\\n*Giraffatitan and Gigabun, the two largest known herbivores, together consume 85% of all plant matter.*\\\",\\\"power\\\":2,\\\"cost\\\":[\\\".\\\",\\\".\\\",\\\"G\\\"],\\\"shell\\\":0,\\\"maxHealth\\\":5,\\\"color\\\":\\\"G\\\",\\\"capturable\\\":true,\\\"implemented\\\":true,\\\"cardUnlockGroupId\\\":\\\"fish9\\\"},{\\\"name\\\":\\\"dargle\\\",\\\"displayName\\\":\\\"Dargle, Dargle Deargle\\\",\\\"text\\\":\\\"Legendargle. \\\\nWhergle this Crergle deargle Dargle, it deargle that argle of Dargle to itsergle, and increargle its Porgle by the sargle argle.\\\",\\\"power\\\":2,\\\"cost\\\":[\\\"G\\\",\\\"G\\\",\\\"G\\\"],\\\"shell\\\":0,\\\"maxHealth\\\":3,\\\"color\\\":\\\"G\\\",\\\"capturable\\\":true,\\\"implemented\\\":true,\\\"cardUnlockGroupId\\\":\\\"legendary-1\\\"},{\\\"name\\\":\\\"othello\\\",\\\"displayName\\\":\\\"Othello, Mimic Moonipulator\\\",\\\"text\\\":\\\"Legendairy. \\\\nSpecial: Choose another Friendly Creature and an Empty Friendly Space. Summon a copy of that Creature on that Space. Give the copy “Attacks for free. On end of turn, Destroy this Creature” and Ready it.\\\",\\\"power\\\":1,\\\"cost\\\":[\\\".\\\",\\\"W\\\",\\\"W\\\",\\\"W\\\"],\\\"shell\\\":0,\\\"maxHealth\\\":1,\\\"color\\\":\\\"W\\\",\\\"capturable\\\":true,\\\"implemented\\\":true,\\\"cardUnlockGroupId\\\":\\\"legendary-10\\\"},{\\\"name\\\":\\\"mister-penny\\\",\\\"displayName\\\":\\\"Mister Penny, Scrapyard Refurbisher\\\",\\\"text\\\":\\\"Legendary. \\\\nFlex: Choose a Friendly Base. Deal 1 Damage to it. Gain {?}.\\\",\\\"power\\\":1,\\\"cost\\\":[\\\".\\\",\\\"R\\\",\\\"R\\\",\\\"R\\\"],\\\"shell\\\":0,\\\"maxHealth\\\":1,\\\"color\\\":\\\"R\\\",\\\"capturable\\\":true,\\\"implemented\\\":true,\\\"cardUnlockGroupId\\\":\\\"legendary-11\\\"},{\\\"name\\\":\\\"master-bramble\\\",\\\"displayName\\\":\\\"Master Bramble, Olive Branch\\\",\\\"text\\\":\\\"Legendary.\\\",\\\"power\\\":11,\\\"cost\\\":[\\\"P\\\",\\\"P\\\",\\\"P\\\",\\\"P\\\",\\\"P\\\",\\\"P\\\",\\\"P\\\",\\\"P\\\",\\\"P\\\",\\\"P\\\",\\\"P\\\"],\\\"shell\\\":0,\\\"maxHealth\\\":11,\\\"color\\\":null,\\\"capturable\\\":true,\\\"implemented\\\":true,\\\"cardUnlockGroupId\\\":\\\"legendary-12\\\"},{\\\"name\\\":\\\"kero--floppy\\\",\\\"displayName\\\":\\\"Kero, Floppy Fish\\\",\\\"text\\\":\\\"Legendary.\\\\nIf Kero is Summoned Touching eight Friendly Legendaries, transform into Super Kero.\\\",\\\"power\\\":0,\\\"cost\\\":[\\\"Y\\\",\\\"Y\\\",\\\"Y\\\",\\\"B\\\",\\\"B\\\",\\\"B\\\",\\\"W\\\",\\\"W\\\",\\\"W\\\",\\\"P\\\",\\\"P\\\",\\\"P\\\",\\\"G\\\",\\\"G\\\",\\\"G\\\",\\\"R\\\",\\\"R\\\",\\\"R\\\"],\\\"shell\\\":0,\\\"maxHealth\\\":1,\\\"color\\\":null,\\\"capturable\\\":true,\\\"implemented\\\":true,\\\"cardUnlockGroupId\\\":\\\"legendary-13\\\"},{\\\"name\\\":\\\"captain-pi\\\",\\\"displayName\\\":\\\"Captain Pi\\\",\\\"text\\\":\\\"Legendary.\\\",\\\"power\\\":35,\\\"cost\\\":[\\\".\\\",\\\".\\\",\\\".\\\",\\\"Y\\\",\\\"Y\\\",\\\"B\\\",\\\"B\\\",\\\"W\\\",\\\"W\\\",\\\"P\\\",\\\"P\\\",\\\"G\\\",\\\"G\\\",\\\"R\\\",\\\"R\\\"],\\\"shell\\\":0,\\\"maxHealth\\\":5,\\\"color\\\":null,\\\"capturable\\\":true,\\\"implemented\\\":true,\\\"cardUnlockGroupId\\\":\\\"legendary-14\\\"},{\\\"name\\\":\\\"professor-galactic\\\",\\\"displayName\\\":\\\"Professor Galactic\\\",\\\"text\\\":\\\"Legendary.\\\",\\\"power\\\":20,\\\"cost\\\":[\\\".\\\",\\\".\\\",\\\".\\\",\\\".\\\",\\\".\\\",\\\".\\\",\\\"Y\\\",\\\"B\\\",\\\"W\\\",\\\"P\\\",\\\"G\\\",\\\"R\\\"],\\\"shell\\\":0,\\\"maxHealth\\\":17,\\\"color\\\":null,\\\"capturable\\\":true,\\\"implemented\\\":true,\\\"cardUnlockGroupId\\\":\\\"legendary-15\\\"},{\\\"name\\\":\\\"stalactica\\\",\\\"displayName\\\":\\\"Stalactica, The Ninth Continent\\\",\\\"text\\\":\\\"Legendary.\\\\nOn start of turn, this Creature takes 1 Damage and increases its Power by its Current Health.\\\",\\\"power\\\":0,\\\"cost\\\":[\\\".\\\",\\\".\\\",\\\".\\\",\\\".\\\",\\\".\\\",\\\".\\\",\\\".\\\",\\\".\\\",\\\".\\\"],\\\"shell\\\":0,\\\"maxHealth\\\":9,\\\"color\\\":null,\\\"capturable\\\":true,\\\"implemented\\\":true,\\\"cardUnlockGroupId\\\":\\\"legendary-16\\\"},{\\\"name\\\":\\\"blancmange\\\",\\\"displayName\\\":\\\"Blancmange, Black Mage\\\",\\\"text\\\":\\\"Legendairy.\\\\nFlex: Choose another Friendly Creature. Change it to an Enemy Creature. Move it to its reflected Space. Can only be done once. Can only be done on turn this Creature is Summoned.\\\\nOn end of turn, if this Creature did not Flex, destroy it.\\\\n*That’s a lotta blamage!*\\\",\\\"power\\\":5,\\\"cost\\\":[\\\".\\\",\\\".\\\",\\\"B\\\",\\\"B\\\",\\\"B\\\"],\\\"shell\\\":0,\\\"maxHealth\\\":5,\\\"color\\\":\\\"B\\\",\\\"capturable\\\":true,\\\"implemented\\\":true,\\\"cardUnlockGroupId\\\":\\\"legendary-2\\\"},{\\\"name\\\":\\\"slime--slime\\\",\\\"displayName\\\":\\\"Slime, Duplication Glitch\\\",\\\"text\\\":\\\"Legendary. You may put any number of copies of this card into your deck.\\\\nWhen this Creature is Summoned, draw a card.\\\\nWhen Attacking, gain {R}.\\\",\\\"power\\\":1,\\\"cost\\\":[\\\".\\\",\\\".\\\",\\\"R\\\",\\\"R\\\",\\\"R\\\"],\\\"shell\\\":0,\\\"maxHealth\\\":1,\\\"color\\\":\\\"R\\\",\\\"capturable\\\":true,\\\"implemented\\\":true,\\\"cardUnlockGroupId\\\":\\\"legendary-3\\\"},{\\\"name\\\":\\\"spelling-bee\\\",\\\"displayName\\\":\\\"Spelling Bee, Lexicographer’s Wrath\\\",\\\"text\\\":\\\"Legendary. \\\\nAfter 2 turns, deal 2 Damage to all Creatures in Touching Spaces.\\\",\\\"power\\\":0,\\\"cost\\\":[\\\"Y\\\"],\\\"shell\\\":0,\\\"maxHealth\\\":1,\\\"color\\\":\\\"Y\\\",\\\"capturable\\\":true,\\\"implemented\\\":true,\\\"cardUnlockGroupId\\\":\\\"legendary-4\\\"},{\\\"name\\\":\\\"moonick\\\",\\\"displayName\\\":\\\"Moonick, Auditor for the Ruminant Revenue Agency\\\",\\\"text\\\":\\\"Legendairy. \\\\nWhenever you Summon a Creature, if any of the top seven cards of your deck has the same name as that Creature, Summon one at no cost to a random Friendly Empty Space.\\\",\\\"power\\\":1,\\\"cost\\\":[\\\".\\\",\\\".\\\",\\\"W\\\",\\\"W\\\"],\\\"shell\\\":0,\\\"maxHealth\\\":1,\\\"color\\\":\\\"W\\\",\\\"capturable\\\":true,\\\"implemented\\\":true,\\\"cardUnlockGroupId\\\":\\\"legendary-5\\\"},{\\\"name\\\":\\\"jabberwock\\\",\\\"displayName\\\":\\\"Jabberwock, Enigmatic Guardian\\\",\\\"text\\\":\\\"Legendary. \\\\nSpecial: Choose a Friendly Creature. The next time that Creature is Damaged this turn, instead, it takes §∮∮ Damage.\\\",\\\"power\\\":1,\\\"cost\\\":[\\\"G\\\"],\\\"shell\\\":0,\\\"maxHealth\\\":1,\\\"color\\\":\\\"G\\\",\\\"capturable\\\":true,\\\"implemented\\\":true,\\\"cardUnlockGroupId\\\":\\\"legendary-6\\\"},{\\\"name\\\":\\\"miss-yu\\\",\\\"displayName\\\":\\\"Miss Yu, Udder Uplifter\\\",\\\"text\\\":\\\"Legendairy.\\\\nWhen this Creature gains Health, Ready it and gain +1 Power.\\\",\\\"power\\\":1,\\\"cost\\\":[\\\"B\\\"],\\\"shell\\\":0,\\\"maxHealth\\\":2,\\\"color\\\":\\\"B\\\",\\\"capturable\\\":true,\\\"implemented\\\":true,\\\"cardUnlockGroupId\\\":\\\"legendary-7\\\"},{\\\"name\\\":\\\"coloring\\\",\\\"displayName\\\":\\\"Coloring, Motivational Speakerria\\\",\\\"text\\\":\\\"Legendary. \\\\nFlex: Choose another Friendly Creature. Ready it. Can only be done once. Can only be done on turn this Creature is Summoned.\\\",\\\"power\\\":2,\\\"cost\\\":[\\\"P\\\",\\\"P\\\"],\\\"shell\\\":0,\\\"maxHealth\\\":1,\\\"color\\\":\\\"P\\\",\\\"capturable\\\":true,\\\"implemented\\\":true,\\\"cardUnlockGroupId\\\":\\\"legendary-8\\\"},{\\\"name\\\":\\\"bb-b\\\",\\\"displayName\\\":\\\"bb b, brave as can b\\\",\\\"text\\\":\\\"Legendary.\\\\nWhen an Enemy Creature is Destroyed, Adjacent Friendly Creatures gain +1 Health, and you gain {?}.\\\",\\\"power\\\":1,\\\"cost\\\":[\\\".\\\",\\\"Y\\\",\\\"Y\\\",\\\"Y\\\"],\\\"shell\\\":0,\\\"maxHealth\\\":4,\\\"color\\\":\\\"Y\\\",\\\"capturable\\\":true,\\\"implemented\\\":true,\\\"cardUnlockGroupId\\\":\\\"legendary-9\\\"},{\\\"name\\\":\\\"test-card\\\",\\\"displayName\\\":\\\"Test Card Please Ignore\\\",\\\"text\\\":\\\"Test card for testing.\\\",\\\"power\\\":99,\\\"cost\\\":[],\\\"shell\\\":0,\\\"maxHealth\\\":99,\\\"color\\\":\\\"G\\\",\\\"capturable\\\":true,\\\"implemented\\\":true,\\\"cardUnlockGroupId\\\":\\\"test-group\\\"},{\\\"name\\\":\\\"yoshisaur-munchakoopas\\\",\\\"displayName\\\":\\\"Yoshisaur Munchakoopas\\\",\\\"text\\\":\\\"*That doesn’t look like Yoshi at all...*\\\",\\\"power\\\":2,\\\"cost\\\":[\\\".\\\",\\\"G\\\"],\\\"shell\\\":0,\\\"maxHealth\\\":4,\\\"color\\\":\\\"G\\\",\\\"capturable\\\":true,\\\"implemented\\\":true,\\\"cardUnlockGroupId\\\":\\\"tutorial1\\\"},{\\\"name\\\":\\\"new-boarn\\\",\\\"displayName\\\":\\\"New Boarn\\\",\\\"text\\\":\\\"When this Creature is Summoned, move it to a random Empty Friendly Space.\\\\n*No one expected that the child of Hamanda and Boaris would one day become the Great Baconator.*\\\",\\\"power\\\":3,\\\"cost\\\":[\\\"R\\\",\\\"R\\\",\\\"R\\\"],\\\"shell\\\":0,\\\"maxHealth\\\":4,\\\"color\\\":\\\"R\\\",\\\"capturable\\\":true,\\\"implemented\\\":true,\\\"cardUnlockGroupId\\\":\\\"tutorial1\\\"},{\\\"name\\\":\\\"hamlet\\\",\\\"displayName\\\":\\\"Hamlet\\\",\\\"text\\\":\\\"*Little Hamlet doesn’t have his tusks yet, but when he gets ’em, the world had better watch out.*\\\",\\\"power\\\":1,\\\"cost\\\":[\\\"R\\\"],\\\"shell\\\":0,\\\"maxHealth\\\":1,\\\"color\\\":\\\"R\\\",\\\"capturable\\\":true,\\\"implemented\\\":true,\\\"cardUnlockGroupId\\\":\\\"tutorial2\\\"},{\\\"name\\\":\\\"hog\\\",\\\"displayName\\\":\\\"Hog\\\",\\\"text\\\":\\\"This Creature can only Attack Units in its column.\\\\n*Ah, life is good as a simple Hog: just run forward!*\\\",\\\"power\\\":2,\\\"cost\\\":[\\\"R\\\"],\\\"shell\\\":0,\\\"maxHealth\\\":1,\\\"color\\\":\\\"R\\\",\\\"capturable\\\":true,\\\"implemented\\\":true,\\\"cardUnlockGroupId\\\":\\\"tutorial2\\\"},{\\\"name\\\":\\\"chocolate-calf\\\",\\\"displayName\\\":\\\"Chocolate Calf\\\",\\\"text\\\":\\\"{W}, Flex: Gain +1 Power for this turn only.\\\\n*Each year, the herd loses several Chocolate Calves that wander into bright sunshine and melt.*\\\",\\\"power\\\":1,\\\"cost\\\":[\\\".\\\",\\\"B\\\"],\\\"shell\\\":0,\\\"maxHealth\\\":3,\\\"color\\\":\\\"B\\\",\\\"capturable\\\":true,\\\"implemented\\\":true,\\\"cardUnlockGroupId\\\":\\\"tutorial3\\\"},{\\\"name\\\":\\\"beeowulf\\\",\\\"displayName\\\":\\\"Beeowulf\\\",\\\"text\\\":\\\"{Y}, Special: Choose an Unprotected Enemy Creature and a Space Adjacent to it. Attack that Creature and Move it to that Space.\\\\n*“May ever soar the great Beeowulf / praised by Hivelyng and Honeyschild akin”*\\\\n*― excerpt from the epic of Beeowulf*\\\",\\\"power\\\":1,\\\"cost\\\":[\\\"Y\\\"],\\\"shell\\\":0,\\\"maxHealth\\\":1,\\\"color\\\":\\\"Y\\\",\\\"capturable\\\":true,\\\"implemented\\\":true,\\\"cardUnlockGroupId\\\":\\\"tutorial3\\\"},{\\\"name\\\":\\\"pbee---j\\\",\\\"displayName\\\":\\\"PBee & J\\\",\\\"text\\\":\\\"When Damaged by a Creature, that Creature takes 1 Damage.\\\\n*Wise spelunkers know not to eat PBee & J.*\\\",\\\"power\\\":1,\\\"cost\\\":[\\\"Y\\\"],\\\"shell\\\":0,\\\"maxHealth\\\":1,\\\"color\\\":\\\"Y\\\",\\\"capturable\\\":true,\\\"implemented\\\":true,\\\"cardUnlockGroupId\\\":\\\"tutorial4\\\"},{\\\"name\\\":\\\"two-bees\\\",\\\"displayName\\\":\\\"2 Bees or not 2 Bees?\\\",\\\"text\\\":\\\"When this Creature is Damaged, instead, it takes half the Damage, rounded down.\\\\n*Is it 2 bees or not 2 bees? Maybe Hamlet knows?*\\\",\\\"power\\\":1,\\\"cost\\\":[\\\"Y\\\",\\\"Y\\\",\\\"Y\\\"],\\\"shell\\\":0,\\\"maxHealth\\\":2,\\\"color\\\":\\\"Y\\\",\\\"capturable\\\":true,\\\"implemented\\\":true,\\\"cardUnlockGroupId\\\":\\\"tutorial4\\\"},{\\\"name\\\":\\\"flora-the-explora\\\",\\\"displayName\\\":\\\"Flora the Explora\\\",\\\"text\\\":\\\"Special: Draw a card.\\\\n*“Can you say “Hydrangea macrophylla titanum” with me? Come on, say it with me!”*\\\",\\\"power\\\":0,\\\"cost\\\":[\\\"P\\\"],\\\"shell\\\":0,\\\"maxHealth\\\":1,\\\"color\\\":\\\"P\\\",\\\"capturable\\\":true,\\\"implemented\\\":true,\\\"cardUnlockGroupId\\\":\\\"tutorial5\\\"},{\\\"name\\\":\\\"roe-doe-dendron\\\",\\\"displayName\\\":\\\"Roe Doe Dendron\\\",\\\"text\\\":\\\"{P}, Special: Choose an Unprotected Enemy Creature. Attack it. Deal 1 Damage to the next Enemy Creature behind it, if there is one.\\\\n*In times of chaos, Roe Doe Dendron appears.*\\\",\\\"power\\\":1,\\\"cost\\\":[\\\".\\\",\\\"P\\\"],\\\"shell\\\":0,\\\"maxHealth\\\":2,\\\"color\\\":\\\"P\\\",\\\"capturable\\\":true,\\\"implemented\\\":true,\\\"cardUnlockGroupId\\\":\\\"tutorial5\\\"},{\\\"name\\\":\\\"nepeta-legion\\\",\\\"displayName\\\":\\\"Nepeta Legion\\\",\\\"text\\\":\\\"When this Creature is Summoned, draw a card.\\\\n*A living army of catnip plants and... wait, are those trolls?*\\\",\\\"power\\\":2,\\\"cost\\\":[\\\"P\\\",\\\"P\\\",\\\"P\\\"],\\\"shell\\\":0,\\\"maxHealth\\\":4,\\\"color\\\":\\\"P\\\",\\\"capturable\\\":true,\\\"implemented\\\":true,\\\"cardUnlockGroupId\\\":\\\"tutorial5\\\"},{\\\"name\\\":\\\"o\\\",\\\"displayName\\\":\\\"o\\\",\\\"text\\\":\\\"When this Creature is Summoned, Adjacent Friendly {W} and {(W/B)} Creatures gain +1 Health.\\\\n*Goes perfect with re!*\\\",\\\"power\\\":1,\\\"cost\\\":[\\\"B\\\"],\\\"shell\\\":0,\\\"maxHealth\\\":1,\\\"color\\\":\\\"B\\\",\\\"capturable\\\":true,\\\"implemented\\\":true,\\\"cardUnlockGroupId\\\":\\\"tutorial6\\\"},{\\\"name\\\":\\\"payne\\\",\\\"displayName\\\":\\\"Payne\\\",\\\"text\\\":\\\"When Attacked by a {W} or {B} Creature, this Creature takes 1 additional Damage.\\\\n*The color of milk and butter fused into cream.*\\\",\\\"power\\\":1,\\\"cost\\\":[\\\"W/B\\\"],\\\"shell\\\":0,\\\"maxHealth\\\":2,\\\"color\\\":\\\"W/B\\\",\\\"capturable\\\":true,\\\"implemented\\\":true,\\\"cardUnlockGroupId\\\":\\\"tutorial6\\\"},{\\\"name\\\":\\\"re\\\",\\\"displayName\\\":\\\"re\\\",\\\"text\\\":\\\"When this Creature is Summoned, Adjacent Friendly {B} and {(W/B)} Creatures gain +1 Power.\\\\n*Goes perfect with o!*\\\",\\\"power\\\":1,\\\"cost\\\":[\\\"W\\\"],\\\"shell\\\":0,\\\"maxHealth\\\":1,\\\"color\\\":\\\"W\\\",\\\"capturable\\\":true,\\\"implemented\\\":true,\\\"cardUnlockGroupId\\\":\\\"tutorial6\\\"},{\\\"name\\\":\\\"vanilla-calf\\\",\\\"displayName\\\":\\\"Vanilla Calf\\\",\\\"text\\\":\\\"{B}, Flex: Remove 1 Damage from this Creature.\\\\n*This calf will grow up to produce high-quality cream.*\\\",\\\"power\\\":1,\\\"cost\\\":[\\\".\\\",\\\"W\\\"],\\\"shell\\\":0,\\\"maxHealth\\\":3,\\\"color\\\":\\\"W\\\",\\\"capturable\\\":true,\\\"implemented\\\":true,\\\"cardUnlockGroupId\\\":\\\"tutorial6\\\"},{\\\"name\\\":\\\"chicken\\\",\\\"displayName\\\":\\\"Chicken\\\",\\\"text\\\":\\\"Special: On start of next turn, gain {?}. *(Only if this Creature is still on the field then.)*\\\\n*“I will destroy you all!”*\\\",\\\"power\\\":1,\\\"cost\\\":[\\\"G\\\"],\\\"shell\\\":0,\\\"maxHealth\\\":1,\\\"color\\\":\\\"G\\\",\\\"capturable\\\":true,\\\"implemented\\\":true,\\\"cardUnlockGroupId\\\":\\\"tutorial6\\\"},{\\\"name\\\":\\\"petroleum-jelly\\\",\\\"displayName\\\":\\\"Petroleum Jelly\\\",\\\"text\\\":\\\"When Damaged by a Creature in this column, instead, take 1 less Damage.\\\\n*This dinosaur has been through a lot.*\\\",\\\"power\\\":1,\\\"cost\\\":[\\\"G\\\"],\\\"shell\\\":0,\\\"maxHealth\\\":1,\\\"color\\\":\\\"G\\\",\\\"capturable\\\":true,\\\"implemented\\\":true,\\\"cardUnlockGroupId\\\":\\\"tutorial6\\\"},{\\\"name\\\":\\\"log\\\",\\\"displayName\\\":\\\"Log\\\",\\\"text\\\":\\\"*The trees that grow deep underground typically get their sunlight imported.*\\\",\\\"power\\\":1,\\\"cost\\\":[\\\"P\\\"],\\\"shell\\\":0,\\\"maxHealth\\\":2,\\\"color\\\":\\\"P\\\",\\\"capturable\\\":true,\\\"implemented\\\":true,\\\"cardUnlockGroupId\\\":\\\"tutorial6\\\"},{\\\"name\\\":\\\"beethoven\\\",\\\"displayName\\\":\\\"Beethoven\\\",\\\"text\\\":\\\"The first time this Creature is Damaged each turn, instead, it takes 1 less Damage.\\\\n*“Let the music take flight with passion! P, A, S, S, I, O, N!”*\\\",\\\"power\\\":2,\\\"cost\\\":[\\\".\\\",\\\"Y\\\"],\\\"shell\\\":0,\\\"maxHealth\\\":3,\\\"color\\\":\\\"Y\\\",\\\"capturable\\\":true,\\\"implemented\\\":true,\\\"cardUnlockGroupId\\\":\\\"tutorial6\\\"},{\\\"name\\\":\\\"camp\\\",\\\"displayName\\\":\\\"Camp\\\",\\\"text\\\":\\\"Base.\\\\nOn start of turn, gain {?}.\\\\n*A good camp can be unpacked fast, and packed up faster.*\\\",\\\"power\\\":0,\\\"cost\\\":[],\\\"shell\\\":0,\\\"maxHealth\\\":4,\\\"color\\\":null,\\\"capturable\\\":true,\\\"implemented\\\":true,\\\"cardUnlockGroupId\\\":null},{\\\"name\\\":\\\"mint\\\",\\\"displayName\\\":\\\"Mint\\\",\\\"text\\\":\\\"Base.\\\\nThis Base is Invulnerable if any Friendly Creatures are on the field.\\\\nOn start of turn, Summon a Creature in front of this Base.\\\\nAt most one Mint can Summon per turn.\\\",\\\"power\\\":0,\\\"cost\\\":[],\\\"shell\\\":0,\\\"maxHealth\\\":5,\\\"color\\\":null,\\\"capturable\\\":false,\\\"implemented\\\":true,\\\"cardUnlockGroupId\\\":null},{\\\"name\\\":\\\"mint--overdrive-\\\",\\\"displayName\\\":\\\"Mint (OVERDRIVE)\\\",\\\"text\\\":\\\"Base.\\\\nThis Base is Invulnerable if any Friendly Creatures are on the field.\\\\nOn start of turn, Summon a Creature in front of this Base.\\\\nAt most two Mints can Summon per turn.\\\",\\\"power\\\":0,\\\"cost\\\":[],\\\"shell\\\":0,\\\"maxHealth\\\":5,\\\"color\\\":null,\\\"capturable\\\":false,\\\"implemented\\\":true,\\\"cardUnlockGroupId\\\":null},{\\\"name\\\":\\\"goose\\\",\\\"displayName\\\":\\\"Goose\\\",\\\"text\\\":\\\"This Creature cannot be Damaged by {G} Creatures.\\\",\\\"power\\\":2,\\\"cost\\\":[\\\"G\\\"],\\\"shell\\\":0,\\\"maxHealth\\\":20,\\\"color\\\":\\\"G\\\",\\\"capturable\\\":false,\\\"implemented\\\":true,\\\"cardUnlockGroupId\\\":null},{\\\"name\\\":\\\"poutine\\\",\\\"displayName\\\":\\\"Poutine\\\",\\\"text\\\":\\\"This Creature cannot be Damaged by {P} Creatures.\\\",\\\"power\\\":2,\\\"cost\\\":[\\\"P\\\"],\\\"shell\\\":0,\\\"maxHealth\\\":10,\\\"color\\\":\\\"P\\\",\\\"capturable\\\":false,\\\"implemented\\\":true,\\\"cardUnlockGroupId\\\":null},{\\\"name\\\":\\\"wisent\\\",\\\"displayName\\\":\\\"Wisent\\\",\\\"text\\\":\\\"This Creature cannot be Damaged by {R} Creatures.\\\",\\\"power\\\":2,\\\"cost\\\":[\\\"R\\\"],\\\"shell\\\":0,\\\"maxHealth\\\":10,\\\"color\\\":\\\"R\\\",\\\"capturable\\\":false,\\\"implemented\\\":true,\\\"cardUnlockGroupId\\\":null},{\\\"name\\\":\\\"twelve-stars\\\",\\\"displayName\\\":\\\"Twelve stars\\\",\\\"text\\\":\\\"This Creature cannot be Damaged by {G} Creatures.\\\",\\\"power\\\":2,\\\"cost\\\":[\\\"G\\\"],\\\"shell\\\":0,\\\"maxHealth\\\":100,\\\"color\\\":\\\"G\\\",\\\"capturable\\\":false,\\\"implemented\\\":true,\\\"cardUnlockGroupId\\\":null},{\\\"name\\\":\\\"consort-on-a-bull-deity\\\",\\\"displayName\\\":\\\"Consort on a bull deity\\\",\\\"text\\\":\\\"This Creature cannot be Damaged by {(W/B)} Creatures.\\\",\\\"power\\\":2,\\\"cost\\\":[\\\"W/B\\\"],\\\"shell\\\":0,\\\"maxHealth\\\":5,\\\"color\\\":\\\"W/B\\\",\\\"capturable\\\":false,\\\"implemented\\\":true,\\\"cardUnlockGroupId\\\":null},{\\\"name\\\":\\\"spicy-fermented-cabbage\\\",\\\"displayName\\\":\\\"Spicy fermented cabbage\\\",\\\"text\\\":\\\"This Creature cannot be Damaged by {R} Creatures.\\\",\\\"power\\\":2,\\\"cost\\\":[\\\"R\\\"],\\\"shell\\\":0,\\\"maxHealth\\\":5000,\\\"color\\\":\\\"R\\\",\\\"capturable\\\":false,\\\"implemented\\\":true,\\\"cardUnlockGroupId\\\":null},{\\\"name\\\":\\\"hallyu\\\",\\\"displayName\\\":\\\"Hallyu\\\",\\\"text\\\":\\\"This Creature cannot be Damaged by {G} Creatures.\\\",\\\"power\\\":2,\\\"cost\\\":[\\\"G\\\"],\\\"shell\\\":0,\\\"maxHealth\\\":10000,\\\"color\\\":\\\"G\\\",\\\"capturable\\\":false,\\\"implemented\\\":true,\\\"cardUnlockGroupId\\\":null},{\\\"name\\\":\\\"wombat-mob\\\",\\\"displayName\\\":\\\"Wombat mob\\\",\\\"text\\\":\\\"This Creature cannot be Damaged by {P} Creatures.\\\",\\\"power\\\":2,\\\"cost\\\":[\\\"P\\\"],\\\"shell\\\":0,\\\"maxHealth\\\":5,\\\"color\\\":\\\"P\\\",\\\"capturable\\\":false,\\\"implemented\\\":true,\\\"cardUnlockGroupId\\\":null},{\\\"name\\\":\\\"jar-of-vegemite\\\",\\\"displayName\\\":\\\"Jar of Vegemite\\\",\\\"text\\\":\\\"This Creature cannot be Damaged by {R} Creatures.\\\",\\\"power\\\":2,\\\"cost\\\":[\\\"R\\\"],\\\"shell\\\":0,\\\"maxHealth\\\":20,\\\"color\\\":\\\"R\\\",\\\"capturable\\\":false,\\\"implemented\\\":true,\\\"cardUnlockGroupId\\\":null},{\\\"name\\\":\\\"didgeridoo\\\",\\\"displayName\\\":\\\"Didgeridoo\\\",\\\"text\\\":\\\"This Creature cannot be Damaged by {Y} Creatures.\\\",\\\"power\\\":2,\\\"cost\\\":[\\\"Y\\\"],\\\"shell\\\":0,\\\"maxHealth\\\":50,\\\"color\\\":\\\"Y\\\",\\\"capturable\\\":false,\\\"implemented\\\":true,\\\"cardUnlockGroupId\\\":null},{\\\"name\\\":\\\"toblerone-dipped-in-fondue\\\",\\\"displayName\\\":\\\"Toblerone dipped in fondue\\\",\\\"text\\\":\\\"This Creature cannot be Damaged by {Y} Creatures.\\\",\\\"power\\\":2,\\\"cost\\\":[\\\"Y\\\"],\\\"shell\\\":0,\\\"maxHealth\\\":10,\\\"color\\\":\\\"Y\\\",\\\"capturable\\\":false,\\\"implemented\\\":true,\\\"cardUnlockGroupId\\\":null},{\\\"name\\\":\\\"plus-sign\\\",\\\"displayName\\\":\\\"Plus sign\\\",\\\"text\\\":\\\"This Creature cannot be Damaged by {R} Creatures.\\\",\\\"power\\\":2,\\\"cost\\\":[\\\"R\\\"],\\\"shell\\\":0,\\\"maxHealth\\\":20,\\\"color\\\":\\\"R\\\",\\\"capturable\\\":false,\\\"implemented\\\":true,\\\"cardUnlockGroupId\\\":null},{\\\"name\\\":\\\"army-knife\\\",\\\"displayName\\\":\\\"Army knife\\\",\\\"text\\\":\\\"This Creature cannot be Damaged by {G} Creatures.\\\",\\\"power\\\":2,\\\"cost\\\":[\\\"G\\\"],\\\"shell\\\":0,\\\"maxHealth\\\":50,\\\"color\\\":\\\"G\\\",\\\"capturable\\\":false,\\\"implemented\\\":true,\\\"cardUnlockGroupId\\\":null},{\\\"name\\\":\\\"pungent-canned-herring\\\",\\\"displayName\\\":\\\"Pungent canned herring\\\",\\\"text\\\":\\\"This Creature cannot be Damaged by {P} Creatures.\\\",\\\"power\\\":2,\\\"cost\\\":[\\\"P\\\"],\\\"shell\\\":0,\\\"maxHealth\\\":20,\\\"color\\\":\\\"P\\\",\\\"capturable\\\":false,\\\"implemented\\\":true,\\\"cardUnlockGroupId\\\":null},{\\\"name\\\":\\\"dala-horse\\\",\\\"displayName\\\":\\\"Dala horse\\\",\\\"text\\\":\\\"This Creature cannot be Damaged by {G} Creatures.\\\",\\\"power\\\":2,\\\"cost\\\":[\\\"G\\\"],\\\"shell\\\":0,\\\"maxHealth\\\":200,\\\"color\\\":\\\"G\\\",\\\"capturable\\\":false,\\\"implemented\\\":true,\\\"cardUnlockGroupId\\\":null},{\\\"name\\\":\\\"green-curry\\\",\\\"displayName\\\":\\\"Green curry\\\",\\\"text\\\":\\\"This Creature cannot be Damaged by {G} Creatures.\\\",\\\"power\\\":2,\\\"cost\\\":[\\\"G\\\"],\\\"shell\\\":0,\\\"maxHealth\\\":20,\\\"color\\\":\\\"G\\\",\\\"capturable\\\":false,\\\"implemented\\\":true,\\\"cardUnlockGroupId\\\":null},{\\\"name\\\":\\\"red-curry\\\",\\\"displayName\\\":\\\"Red curry\\\",\\\"text\\\":\\\"This Creature cannot be Damaged by {R} Creatures.\\\",\\\"power\\\":2,\\\"cost\\\":[\\\"R\\\"],\\\"shell\\\":0,\\\"maxHealth\\\":100,\\\"color\\\":\\\"R\\\",\\\"capturable\\\":false,\\\"implemented\\\":true,\\\"cardUnlockGroupId\\\":null},{\\\"name\\\":\\\"ka-api-ara\\\",\\\"displayName\\\":\\\"Ka'apiûara\\\",\\\"text\\\":\\\"This Creature cannot be Damaged by {P} Creatures.\\\",\\\"power\\\":2,\\\"cost\\\":[\\\"P\\\"],\\\"shell\\\":0,\\\"maxHealth\\\":5,\\\"color\\\":\\\"P\\\",\\\"capturable\\\":false,\\\"implemented\\\":true,\\\"cardUnlockGroupId\\\":null},{\\\"name\\\":\\\"toasted-cassava\\\",\\\"displayName\\\":\\\"Toasted cassava\\\",\\\"text\\\":\\\"This Creature cannot be Damaged by {R} Creatures.\\\",\\\"power\\\":2,\\\"cost\\\":[\\\"R\\\"],\\\"shell\\\":0,\\\"maxHealth\\\":10,\\\"color\\\":\\\"R\\\",\\\"capturable\\\":false,\\\"implemented\\\":true,\\\"cardUnlockGroupId\\\":null},{\\\"name\\\":\\\"order-and-progress\\\",\\\"displayName\\\":\\\"Order and Progress\\\",\\\"text\\\":\\\"This Creature cannot be Damaged by {Y} Creatures.\\\",\\\"power\\\":2,\\\"cost\\\":[\\\"Y\\\"],\\\"shell\\\":0,\\\"maxHealth\\\":20,\\\"color\\\":\\\"Y\\\",\\\"capturable\\\":false,\\\"implemented\\\":true,\\\"cardUnlockGroupId\\\":null},{\\\"name\\\":\\\"angry-boarry-farmer\\\",\\\"displayName\\\":\\\"Angry Boarry Farmer\\\",\\\"text\\\":\\\"Can only Attack Units in this Creature’s column, or in Friendly Spaces.\\\\nOn end of turn, gain +1 Power.\\\\n*“GET OFF MY FARM!!!”*\\\",\\\"power\\\":1,\\\"cost\\\":[\\\"R\\\",\\\"R\\\",\\\"R\\\",\\\"R\\\",\\\"R\\\"],\\\"shell\\\":0,\\\"maxHealth\\\":64,\\\"color\\\":\\\"R\\\",\\\"capturable\\\":false,\\\"implemented\\\":true,\\\"cardUnlockGroupId\\\":null},{\\\"name\\\":\\\"keep\\\",\\\"displayName\\\":\\\"Keep\\\",\\\"text\\\":\\\"Base.\\\\nOn start of turn, gain {???}.\\\",\\\"power\\\":10,\\\"cost\\\":[],\\\"shell\\\":0,\\\"maxHealth\\\":10,\\\"color\\\":null,\\\"capturable\\\":false,\\\"implemented\\\":true,\\\"cardUnlockGroupId\\\":null},{\\\"name\\\":\\\"worker-bot\\\",\\\"displayName\\\":\\\"Worker Bot\\\",\\\"text\\\":\\\"Cannot Attack or Create.\\\\nWhen Moving, does not Unready. Can push.\\\",\\\"power\\\":0,\\\"cost\\\":[\\\"W\\\"],\\\"shell\\\":0,\\\"maxHealth\\\":1,\\\"color\\\":\\\"W\\\",\\\"capturable\\\":false,\\\"implemented\\\":true,\\\"cardUnlockGroupId\\\":null},{\\\"name\\\":\\\"zap-worker-bot\\\",\\\"displayName\\\":\\\"Zap Worker Bot\\\",\\\"text\\\":\\\"Cannot Attack normally or Create.\\\\nWhen Moving, does not Unready. Can push.\\\\n{.}, Flex: Choose an Adjacent Unit. Attack it. Take 1 Damage.\\\",\\\"power\\\":1,\\\"cost\\\":[\\\"W\\\"],\\\"shell\\\":0,\\\"maxHealth\\\":4,\\\"color\\\":\\\"W\\\",\\\"capturable\\\":false,\\\"implemented\\\":true,\\\"cardUnlockGroupId\\\":null},{\\\"name\\\":\\\"box\\\",\\\"displayName\\\":\\\"Box\\\",\\\"text\\\":\\\"Pushable. Blocks auto-combat.\\\",\\\"power\\\":0,\\\"cost\\\":[\\\"B\\\"],\\\"shell\\\":0,\\\"maxHealth\\\":1,\\\"color\\\":\\\"B\\\",\\\"capturable\\\":false,\\\"implemented\\\":true,\\\"cardUnlockGroupId\\\":null},{\\\"name\\\":\\\"explosives\\\",\\\"displayName\\\":\\\"Explosives\\\",\\\"text\\\":\\\"Cannot Attack or Create. Immobile.\\\\nWhen this Unit is Destroyed, deal 2 Damage to all Units in Touching Spaces.\\\",\\\"power\\\":0,\\\"cost\\\":[\\\"R\\\"],\\\"shell\\\":0,\\\"maxHealth\\\":1,\\\"color\\\":\\\"R\\\",\\\"capturable\\\":false,\\\"implemented\\\":true,\\\"cardUnlockGroupId\\\":null},{\\\"name\\\":\\\"friendly-battle-bot\\\",\\\"displayName\\\":\\\"Friendly Battle Bot\\\",\\\"text\\\":\\\"Cannot Attack normally or Create. Immobile.\\\\nOn end of turn, Attack in this Unit’s column.\\\",\\\"power\\\":1,\\\"cost\\\":[\\\"P\\\"],\\\"shell\\\":0,\\\"maxHealth\\\":1,\\\"color\\\":\\\"P\\\",\\\"capturable\\\":false,\\\"implemented\\\":true,\\\"cardUnlockGroupId\\\":null},{\\\"name\\\":\\\"enemy-battle-bot\\\",\\\"displayName\\\":\\\"Enemy Battle Bot\\\",\\\"text\\\":\\\"Cannot Attack normally or Create. Immobile.\\\\nOn end of turn, Attack in this Unit’s column.\\\",\\\"power\\\":1,\\\"cost\\\":[\\\"Y\\\"],\\\"shell\\\":0,\\\"maxHealth\\\":1,\\\"color\\\":\\\"Y\\\",\\\"capturable\\\":false,\\\"implemented\\\":true,\\\"cardUnlockGroupId\\\":null},{\\\"name\\\":\\\"armored-enemy-battle-bot\\\",\\\"displayName\\\":\\\"Armored Enemy Battle Bot\\\",\\\"text\\\":\\\"Cannot Attack normally or Create. Immobile.\\\\nWhen this Creature is Damaged, instead, it takes 1 less Damage.\\\\nOn end of turn, Attack in this Unit’s column.\\\",\\\"power\\\":1,\\\"cost\\\":[\\\"Y\\\"],\\\"shell\\\":0,\\\"maxHealth\\\":1,\\\"color\\\":\\\"Y\\\",\\\"capturable\\\":false,\\\"implemented\\\":true,\\\"cardUnlockGroupId\\\":null},{\\\"name\\\":\\\"armored-camp\\\",\\\"displayName\\\":\\\"Armored Camp\\\",\\\"text\\\":\\\"Base.\\\\nWhen this Base is Damaged, instead, it takes 1 less Damage.\\\",\\\"power\\\":0,\\\"cost\\\":[],\\\"shell\\\":0,\\\"maxHealth\\\":4,\\\"color\\\":null,\\\"capturable\\\":false,\\\"implemented\\\":true,\\\"cardUnlockGroupId\\\":null},{\\\"name\\\":\\\"pothole\\\",\\\"displayName\\\":\\\"Pothole\\\",\\\"text\\\":\\\"Immobile. Auto-combat ignores this Unit. Does not Protect.\\\",\\\"power\\\":0,\\\"cost\\\":[\\\"G\\\"],\\\"shell\\\":0,\\\"maxHealth\\\":99,\\\"color\\\":\\\"G\\\",\\\"capturable\\\":false,\\\"implemented\\\":true,\\\"cardUnlockGroupId\\\":null},{\\\"name\\\":\\\"barn\\\",\\\"displayName\\\":\\\"Barn\\\",\\\"text\\\":\\\"Base.\\\\nYou and your opponent can only Summon on the first two turns.\\\\nWhen there are four or more Friendly Cows in play, Barn is Invulnerable.\\\",\\\"power\\\":0,\\\"cost\\\":[],\\\"shell\\\":0,\\\"maxHealth\\\":10,\\\"color\\\":\\\"W/B\\\",\\\"capturable\\\":false,\\\"implemented\\\":true,\\\"cardUnlockGroupId\\\":null},{\\\"name\\\":\\\"chocolate-cyclow--sleeping-\\\",\\\"displayName\\\":\\\"Chocolate Cyclow (SLEEPING)\\\",\\\"text\\\":\\\"*The peaceful cow is sleeping.*\\\",\\\"power\\\":0,\\\"cost\\\":[\\\"B\\\"],\\\"shell\\\":0,\\\"maxHealth\\\":5,\\\"color\\\":\\\"B\\\",\\\"capturable\\\":false,\\\"implemented\\\":true,\\\"cardUnlockGroupId\\\":null},{\\\"name\\\":\\\"chocolate-cyclow--awake-\\\",\\\"displayName\\\":\\\"Chocolate Cyclow (AWAKE)\\\",\\\"text\\\":\\\"*“How dairy you discurd my slumber!”*\\\",\\\"power\\\":0,\\\"cost\\\":[\\\"B\\\"],\\\"shell\\\":0,\\\"maxHealth\\\":5,\\\"color\\\":\\\"B\\\",\\\"capturable\\\":false,\\\"implemented\\\":true,\\\"cardUnlockGroupId\\\":null},{\\\"name\\\":\\\"chocolate-cyclow--tired-\\\",\\\"displayName\\\":\\\"Chocolate Cyclow (TIRED)\\\",\\\"text\\\":\\\"*Moo.*\\\",\\\"power\\\":0,\\\"cost\\\":[\\\"B\\\"],\\\"shell\\\":0,\\\"maxHealth\\\":5,\\\"color\\\":\\\"B\\\",\\\"capturable\\\":false,\\\"implemented\\\":true,\\\"cardUnlockGroupId\\\":null},{\\\"name\\\":\\\"chocolate-cyclow--weak-\\\",\\\"displayName\\\":\\\"Chocolate Cyclow (WEAK)\\\",\\\"text\\\":\\\"*Moo.*\\\",\\\"power\\\":0,\\\"cost\\\":[\\\"B\\\"],\\\"shell\\\":0,\\\"maxHealth\\\":5,\\\"color\\\":\\\"B\\\",\\\"capturable\\\":false,\\\"implemented\\\":true,\\\"cardUnlockGroupId\\\":null},{\\\"name\\\":\\\"chocolate-cyclow--angry-\\\",\\\"displayName\\\":\\\"Chocolate Cyclow (ANGRY)\\\",\\\"text\\\":\\\"*Muenster Form*\\\",\\\"power\\\":3,\\\"cost\\\":[\\\"B\\\"],\\\"shell\\\":0,\\\"maxHealth\\\":5,\\\"color\\\":\\\"B\\\",\\\"capturable\\\":false,\\\"implemented\\\":true,\\\"cardUnlockGroupId\\\":null},{\\\"name\\\":\\\"vanilla-cyclow--sleeping-\\\",\\\"displayName\\\":\\\"Vanilla Cyclow (SLEEPING)\\\",\\\"text\\\":\\\"*The peaceful cow is sleeping.*\\\",\\\"power\\\":0,\\\"cost\\\":[\\\"W\\\"],\\\"shell\\\":0,\\\"maxHealth\\\":5,\\\"color\\\":\\\"W\\\",\\\"capturable\\\":false,\\\"implemented\\\":true,\\\"cardUnlockGroupId\\\":null},{\\\"name\\\":\\\"vanilla-cyclow--awake-\\\",\\\"displayName\\\":\\\"Vanilla Cyclow (AWAKE)\\\",\\\"text\\\":\\\"*“How dairy you discurd my slumber!”*\\\",\\\"power\\\":0,\\\"cost\\\":[\\\"W\\\"],\\\"shell\\\":0,\\\"maxHealth\\\":5,\\\"color\\\":\\\"W\\\",\\\"capturable\\\":false,\\\"implemented\\\":true,\\\"cardUnlockGroupId\\\":null},{\\\"name\\\":\\\"vanilla-cyclow--tired-\\\",\\\"displayName\\\":\\\"Vanilla Cyclow (TIRED)\\\",\\\"text\\\":\\\"*Moo.*\\\",\\\"power\\\":0,\\\"cost\\\":[\\\"W\\\"],\\\"shell\\\":0,\\\"maxHealth\\\":5,\\\"color\\\":\\\"W\\\",\\\"capturable\\\":false,\\\"implemented\\\":true,\\\"cardUnlockGroupId\\\":null},{\\\"name\\\":\\\"vanilla-cyclow--weak-\\\",\\\"displayName\\\":\\\"Vanilla Cyclow (WEAK)\\\",\\\"text\\\":\\\"*Moo.*\\\",\\\"power\\\":0,\\\"cost\\\":[\\\"W\\\"],\\\"shell\\\":0,\\\"maxHealth\\\":5,\\\"color\\\":\\\"W\\\",\\\"capturable\\\":false,\\\"implemented\\\":true,\\\"cardUnlockGroupId\\\":null},{\\\"name\\\":\\\"vanilla-cyclow--angry-\\\",\\\"displayName\\\":\\\"Vanilla Cyclow (ANGRY)\\\",\\\"text\\\":\\\"*Muenster Form*\\\",\\\"power\\\":3,\\\"cost\\\":[\\\"W\\\"],\\\"shell\\\":0,\\\"maxHealth\\\":5,\\\"color\\\":\\\"W\\\",\\\"capturable\\\":false,\\\"implemented\\\":true,\\\"cardUnlockGroupId\\\":null},{\\\"name\\\":\\\"beeflector\\\",\\\"displayName\\\":\\\"Beeflector\\\",\\\"text\\\":\\\"When Damaged by a Creature, that Creature takes 1 Damage.\\\\n*You hear Bees sniggering in the background, but it doesn’t seem like you’re the one they’re laughing at...*\\\",\\\"power\\\":0,\\\"cost\\\":[\\\"Y\\\"],\\\"shell\\\":0,\\\"maxHealth\\\":5,\\\"color\\\":\\\"Y\\\",\\\"capturable\\\":false,\\\"implemented\\\":true,\\\"cardUnlockGroupId\\\":null},{\\\"name\\\":\\\"reckless-medisaur\\\",\\\"displayName\\\":\\\"Reckless Medisaur\\\",\\\"text\\\":\\\"Cannot Attack normally or Create. Immobile.\\\\nSpecial: Choose a Friendly Base and a Creature that has taken Damage. Deal 2 Damage to the Base. Remove all Damage from the Creature.\\\\nSpecial: Attack the nearest Unprotected Enemy Base, or if there isn’t one, the nearest Unprotected Enemy Creature.\\\\n*“Every wound must be mended, no matter the cost!”*\\\",\\\"power\\\":1,\\\"cost\\\":[\\\".\\\",\\\".\\\",\\\"G\\\"],\\\"shell\\\":0,\\\"maxHealth\\\":1,\\\"color\\\":\\\"G\\\",\\\"capturable\\\":false,\\\"implemented\\\":true,\\\"cardUnlockGroupId\\\":null},{\\\"name\\\":\\\"slime\\\",\\\"displayName\\\":\\\"Slime\\\",\\\"text\\\":\\\"*A Slime congealed out of the Boarry sludge!*\\\",\\\"power\\\":3,\\\"cost\\\":[\\\"R\\\"],\\\"shell\\\":0,\\\"maxHealth\\\":10,\\\"color\\\":\\\"R\\\",\\\"capturable\\\":false,\\\"implemented\\\":true,\\\"cardUnlockGroupId\\\":null},{\\\"name\\\":\\\"amber-slime\\\",\\\"displayName\\\":\\\"Amber Slime\\\",\\\"text\\\":\\\"Speedy.\\\\n*This slime likes to dash!*\\\",\\\"power\\\":2,\\\"cost\\\":[\\\"R\\\"],\\\"shell\\\":0,\\\"maxHealth\\\":6,\\\"color\\\":\\\"R\\\",\\\"capturable\\\":false,\\\"implemented\\\":true,\\\"cardUnlockGroupId\\\":null},{\\\"name\\\":\\\"apricot-slime\\\",\\\"displayName\\\":\\\"Apricot Slime\\\",\\\"text\\\":\\\"Speedy.\\\\n*This slime likes to dash!*\\\",\\\"power\\\":1,\\\"cost\\\":[\\\"R\\\"],\\\"shell\\\":0,\\\"maxHealth\\\":4,\\\"color\\\":\\\"R\\\",\\\"capturable\\\":false,\\\"implemented\\\":true,\\\"cardUnlockGroupId\\\":null},{\\\"name\\\":\\\"auburn-slime\\\",\\\"displayName\\\":\\\"Auburn Slime\\\",\\\"text\\\":\\\"Poisonous.\\\\n*This slime deals Damage Over Time!*\\\",\\\"power\\\":1,\\\"cost\\\":[\\\"R\\\"],\\\"shell\\\":0,\\\"maxHealth\\\":4,\\\"color\\\":\\\"R\\\",\\\"capturable\\\":false,\\\"implemented\\\":true,\\\"cardUnlockGroupId\\\":null},{\\\"name\\\":\\\"ebony-slime\\\",\\\"displayName\\\":\\\"Ebony Slime\\\",\\\"text\\\":\\\"Poisonous.\\\\n*This slime deals Damage Over Time!*\\\",\\\"power\\\":1,\\\"cost\\\":[\\\"R\\\"],\\\"shell\\\":0,\\\"maxHealth\\\":4,\\\"color\\\":\\\"R\\\",\\\"capturable\\\":false,\\\"implemented\\\":true,\\\"cardUnlockGroupId\\\":null},{\\\"name\\\":\\\"ecru-slime\\\",\\\"displayName\\\":\\\"Ecru Slime\\\",\\\"text\\\":\\\"Poisonous.\\\\n*This slime deals Damage Over Time!*\\\",\\\"power\\\":2,\\\"cost\\\":[\\\"R\\\"],\\\"shell\\\":0,\\\"maxHealth\\\":6,\\\"color\\\":\\\"R\\\",\\\"capturable\\\":false,\\\"implemented\\\":true,\\\"cardUnlockGroupId\\\":null},{\\\"name\\\":\\\"eggplant-slime\\\",\\\"displayName\\\":\\\"Eggplant Slime\\\",\\\"text\\\":\\\"Poisonous.\\\\n*This slime deals Damage Over Time!*\\\",\\\"power\\\":1,\\\"cost\\\":[\\\"R\\\"],\\\"shell\\\":0,\\\"maxHealth\\\":2,\\\"color\\\":\\\"R\\\",\\\"capturable\\\":false,\\\"implemented\\\":true,\\\"cardUnlockGroupId\\\":null},{\\\"name\\\":\\\"emerald-slime\\\",\\\"displayName\\\":\\\"Emerald Slime\\\",\\\"text\\\":\\\"Speedy.\\\\n*This slime likes to dash!*\\\",\\\"power\\\":2,\\\"cost\\\":[\\\"R\\\"],\\\"shell\\\":0,\\\"maxHealth\\\":6,\\\"color\\\":\\\"R\\\",\\\"capturable\\\":false,\\\"implemented\\\":true,\\\"cardUnlockGroupId\\\":null},{\\\"name\\\":\\\"harlequin-slime\\\",\\\"displayName\\\":\\\"Harlequin Slime\\\",\\\"text\\\":\\\"Poisonous.\\\\n*This slime deals Damage Over Time!*\\\",\\\"power\\\":1,\\\"cost\\\":[\\\"R\\\"],\\\"shell\\\":0,\\\"maxHealth\\\":2,\\\"color\\\":\\\"R\\\",\\\"capturable\\\":false,\\\"implemented\\\":true,\\\"cardUnlockGroupId\\\":null},{\\\"name\\\":\\\"indigo-slime\\\",\\\"displayName\\\":\\\"Indigo Slime\\\",\\\"text\\\":\\\"Poisonous.\\\\n*This slime deals Damage Over Time!*\\\",\\\"power\\\":1,\\\"cost\\\":[\\\"R\\\"],\\\"shell\\\":0,\\\"maxHealth\\\":2,\\\"color\\\":\\\"R\\\",\\\"capturable\\\":false,\\\"implemented\\\":true,\\\"cardUnlockGroupId\\\":null},{\\\"name\\\":\\\"ivory-slime\\\",\\\"displayName\\\":\\\"Ivory Slime\\\",\\\"text\\\":\\\"Poisonous.\\\\n*This slime deals Damage Over Time!*\\\",\\\"power\\\":1,\\\"cost\\\":[\\\"R\\\"],\\\"shell\\\":0,\\\"maxHealth\\\":4,\\\"color\\\":\\\"R\\\",\\\"capturable\\\":false,\\\"implemented\\\":true,\\\"cardUnlockGroupId\\\":null},{\\\"name\\\":\\\"khaki-slime\\\",\\\"displayName\\\":\\\"Khaki Slime\\\",\\\"text\\\":\\\"Poisonous.\\\\n*This slime deals Damage Over Time!*\\\",\\\"power\\\":1,\\\"cost\\\":[\\\"R\\\"],\\\"shell\\\":0,\\\"maxHealth\\\":4,\\\"color\\\":\\\"R\\\",\\\"capturable\\\":false,\\\"implemented\\\":true,\\\"cardUnlockGroupId\\\":null},{\\\"name\\\":\\\"lava-slime\\\",\\\"displayName\\\":\\\"Lava Slime\\\",\\\"text\\\":\\\"Poisonous.\\\\n*This slime deals Damage Over Time!*\\\",\\\"power\\\":1,\\\"cost\\\":[\\\"R\\\"],\\\"shell\\\":0,\\\"maxHealth\\\":2,\\\"color\\\":\\\"R\\\",\\\"capturable\\\":false,\\\"implemented\\\":true,\\\"cardUnlockGroupId\\\":null},{\\\"name\\\":\\\"lavender-slime\\\",\\\"displayName\\\":\\\"Lavender Slime\\\",\\\"text\\\":\\\"Speedy.\\\\n*This slime likes to dash!*\\\",\\\"power\\\":1,\\\"cost\\\":[\\\"R\\\"],\\\"shell\\\":0,\\\"maxHealth\\\":2,\\\"color\\\":\\\"R\\\",\\\"capturable\\\":false,\\\"implemented\\\":true,\\\"cardUnlockGroupId\\\":null},{\\\"name\\\":\\\"lemon-slime\\\",\\\"displayName\\\":\\\"Lemon Slime\\\",\\\"text\\\":\\\"Poisonous.\\\\n*This slime deals Damage Over Time!*\\\",\\\"power\\\":2,\\\"cost\\\":[\\\"R\\\"],\\\"shell\\\":0,\\\"maxHealth\\\":6,\\\"color\\\":\\\"R\\\",\\\"capturable\\\":false,\\\"implemented\\\":true,\\\"cardUnlockGroupId\\\":null},{\\\"name\\\":\\\"lilac-slime\\\",\\\"displayName\\\":\\\"Lilac Slime\\\",\\\"text\\\":\\\"Speedy.\\\\n*This slime likes to dash!*\\\",\\\"power\\\":1,\\\"cost\\\":[\\\"R\\\"],\\\"shell\\\":0,\\\"maxHealth\\\":2,\\\"color\\\":\\\"R\\\",\\\"capturable\\\":false,\\\"implemented\\\":true,\\\"cardUnlockGroupId\\\":null},{\\\"name\\\":\\\"mauve-slime\\\",\\\"displayName\\\":\\\"Mauve Slime\\\",\\\"text\\\":\\\"Speedy.\\\\n*This slime likes to dash!*\\\",\\\"power\\\":1,\\\"cost\\\":[\\\"R\\\"],\\\"shell\\\":0,\\\"maxHealth\\\":2,\\\"color\\\":\\\"R\\\",\\\"capturable\\\":false,\\\"implemented\\\":true,\\\"cardUnlockGroupId\\\":null},{\\\"name\\\":\\\"orange-slime\\\",\\\"displayName\\\":\\\"Orange Slime\\\",\\\"text\\\":\\\"Speedy.\\\\n*This slime likes to dash!*\\\",\\\"power\\\":1,\\\"cost\\\":[\\\"R\\\"],\\\"shell\\\":0,\\\"maxHealth\\\":4,\\\"color\\\":\\\"R\\\",\\\"capturable\\\":false,\\\"implemented\\\":true,\\\"cardUnlockGroupId\\\":null},{\\\"name\\\":\\\"red-slime\\\",\\\"displayName\\\":\\\"Red Slime\\\",\\\"text\\\":\\\"Poisonous.\\\\n*This slime deals Damage Over Time!*\\\",\\\"power\\\":1,\\\"cost\\\":[\\\"R\\\"],\\\"shell\\\":0,\\\"maxHealth\\\":2,\\\"color\\\":\\\"R\\\",\\\"capturable\\\":false,\\\"implemented\\\":true,\\\"cardUnlockGroupId\\\":null},{\\\"name\\\":\\\"rust-slime\\\",\\\"displayName\\\":\\\"Rust Slime\\\",\\\"text\\\":\\\"Speedy.\\\\n*This slime likes to dash!*\\\",\\\"power\\\":1,\\\"cost\\\":[\\\"R\\\"],\\\"shell\\\":0,\\\"maxHealth\\\":2,\\\"color\\\":\\\"R\\\",\\\"capturable\\\":false,\\\"implemented\\\":true,\\\"cardUnlockGroupId\\\":null},{\\\"name\\\":\\\"saffron-slime\\\",\\\"displayName\\\":\\\"Saffron Slime\\\",\\\"text\\\":\\\"Speedy.\\\\n*This slime likes to dash!*\\\",\\\"power\\\":1,\\\"cost\\\":[\\\"R\\\"],\\\"shell\\\":0,\\\"maxHealth\\\":2,\\\"color\\\":\\\"R\\\",\\\"capturable\\\":false,\\\"implemented\\\":true,\\\"cardUnlockGroupId\\\":null},{\\\"name\\\":\\\"sepia-slime\\\",\\\"displayName\\\":\\\"Sepia Slime\\\",\\\"text\\\":\\\"Speedy.\\\\n*This slime likes to dash!*\\\",\\\"power\\\":2,\\\"cost\\\":[\\\"R\\\"],\\\"shell\\\":0,\\\"maxHealth\\\":8,\\\"color\\\":\\\"R\\\",\\\"capturable\\\":false,\\\"implemented\\\":true,\\\"cardUnlockGroupId\\\":null},{\\\"name\\\":\\\"silver-slime\\\",\\\"displayName\\\":\\\"Silver Slime\\\",\\\"text\\\":\\\"Poisonous.\\\\n*This slime deals Damage Over Time!*\\\",\\\"power\\\":1,\\\"cost\\\":[\\\"R\\\"],\\\"shell\\\":0,\\\"maxHealth\\\":2,\\\"color\\\":\\\"R\\\",\\\"capturable\\\":false,\\\"implemented\\\":true,\\\"cardUnlockGroupId\\\":null},{\\\"name\\\":\\\"teal-slime\\\",\\\"displayName\\\":\\\"Teal Slime\\\",\\\"text\\\":\\\"Speedy.\\\\n*This slime likes to dash!*\\\",\\\"power\\\":1,\\\"cost\\\":[\\\"R\\\"],\\\"shell\\\":0,\\\"maxHealth\\\":4,\\\"color\\\":\\\"R\\\",\\\"capturable\\\":false,\\\"implemented\\\":true,\\\"cardUnlockGroupId\\\":null},{\\\"name\\\":\\\"turquoise-slime\\\",\\\"displayName\\\":\\\"Turquoise Slime\\\",\\\"text\\\":\\\"Speedy.\\\\n*This slime likes to dash!*\\\",\\\"power\\\":1,\\\"cost\\\":[\\\"R\\\"],\\\"shell\\\":0,\\\"maxHealth\\\":4,\\\"color\\\":\\\"R\\\",\\\"capturable\\\":false,\\\"implemented\\\":true,\\\"cardUnlockGroupId\\\":null},{\\\"name\\\":\\\"white-slime\\\",\\\"displayName\\\":\\\"White Slime\\\",\\\"text\\\":\\\"Poisonous.\\\\n*This slime deals Damage Over Time!*\\\",\\\"power\\\":1,\\\"cost\\\":[\\\"R\\\"],\\\"shell\\\":0,\\\"maxHealth\\\":2,\\\"color\\\":\\\"R\\\",\\\"capturable\\\":false,\\\"implemented\\\":true,\\\"cardUnlockGroupId\\\":null},{\\\"name\\\":\\\"yellow-slime\\\",\\\"displayName\\\":\\\"Yellow Slime\\\",\\\"text\\\":\\\"Poisonous.\\\\n*This slime deals Damage Over Time!*\\\",\\\"power\\\":2,\\\"cost\\\":[\\\"R\\\"],\\\"shell\\\":0,\\\"maxHealth\\\":8,\\\"color\\\":\\\"R\\\",\\\"capturable\\\":false,\\\"implemented\\\":true,\\\"cardUnlockGroupId\\\":null},{\\\"name\\\":\\\"cargle\\\",\\\"displayName\\\":\\\"Cargle\\\",\\\"text\\\":\\\"If any Energle Crergle worgle dergle Dargle from the firgle or largle corgle, Dergle it instergle.\\\",\\\"power\\\":1,\\\"cost\\\":[\\\"B\\\"],\\\"shell\\\":0,\\\"maxHealth\\\":2,\\\"color\\\":\\\"B\\\",\\\"capturable\\\":false,\\\"implemented\\\":true,\\\"cardUnlockGroupId\\\":null},{\\\"name\\\":\\\"dorgle\\\",\\\"displayName\\\":\\\"Dorgle\\\",\\\"text\\\":\\\"If any Energle Crergle worgle dergle Dargle from the sergle or forgle corgle, Dergle it instergle.\\\",\\\"power\\\":2,\\\"cost\\\":[\\\"B\\\"],\\\"shell\\\":0,\\\"maxHealth\\\":1,\\\"color\\\":\\\"B\\\",\\\"capturable\\\":false,\\\"implemented\\\":true,\\\"cardUnlockGroupId\\\":null},{\\\"name\\\":\\\"morgle\\\",\\\"displayName\\\":\\\"Morgle\\\",\\\"text\\\":\\\"This Crergle can only be Attargle if anorgle Crergle morgle intorgle its corgle this turgle.\\\",\\\"power\\\":2,\\\"cost\\\":[\\\"B\\\"],\\\"shell\\\":0,\\\"maxHealth\\\":7,\\\"color\\\":\\\"B\\\",\\\"capturable\\\":false,\\\"implemented\\\":true,\\\"cardUnlockGroupId\\\":null},{\\\"name\\\":\\\"corgle\\\",\\\"displayName\\\":\\\"Corgle\\\",\\\"text\\\":\\\"Whergle this Crergle is Dargle, Dergle the Attargle Crergle unlergle the plargle corgle it has exargle thrergle Forgle aftergle. \\\",\\\"power\\\":3,\\\"cost\\\":[\\\"B\\\"],\\\"shell\\\":0,\\\"maxHealth\\\":10,\\\"color\\\":\\\"B\\\",\\\"capturable\\\":false,\\\"implemented\\\":true,\\\"cardUnlockGroupId\\\":null},{\\\"name\\\":\\\"bargle\\\",\\\"displayName\\\":\\\"Bargle\\\",\\\"text\\\":\\\"Bargle.\\\\nAt the bergle of yorgle turgle, if this Bargle Currgle Hergle is norgle prirgle, Dergle all Energle Unirgle.\\\",\\\"power\\\":0,\\\"cost\\\":[\\\"B\\\"],\\\"shell\\\":0,\\\"maxHealth\\\":29,\\\"color\\\":\\\"B\\\",\\\"capturable\\\":false,\\\"implemented\\\":true,\\\"cardUnlockGroupId\\\":null},{\\\"name\\\":\\\"durgle\\\",\\\"displayName\\\":\\\"Durgle\\\",\\\"text\\\":\\\"This Crergle dorgle norgle targle Dargle from norgle-Dirgle Crergle.\\\",\\\"power\\\":2,\\\"cost\\\":[\\\"B\\\"],\\\"shell\\\":0,\\\"maxHealth\\\":2,\\\"color\\\":\\\"B\\\",\\\"capturable\\\":false,\\\"implemented\\\":true,\\\"cardUnlockGroupId\\\":null},{\\\"name\\\":\\\"gorgle\\\",\\\"displayName\\\":\\\"Gorgle\\\",\\\"text\\\":\\\"This Crergle targle tergle tirgle as much Dargle whergle it is Attargle by Crergle with at lergle forgle Currgle Hergle.\\\",\\\"power\\\":1,\\\"cost\\\":[\\\"B\\\"],\\\"shell\\\":0,\\\"maxHealth\\\":70,\\\"color\\\":\\\"B\\\",\\\"capturable\\\":false,\\\"implemented\\\":true,\\\"cardUnlockGroupId\\\":null},{\\\"name\\\":\\\"swargle\\\",\\\"displayName\\\":\\\"Swargle\\\",\\\"text\\\":\\\"If this Crergle targle Dargle, Dergle all Energle Unirgle.\\\\nThis Crergle is Dergle autorgle in sirgle* turgle.\\\",\\\"power\\\":1,\\\"cost\\\":[\\\"B\\\"],\\\"shell\\\":0,\\\"maxHealth\\\":2,\\\"color\\\":\\\"B\\\",\\\"capturable\\\":false,\\\"implemented\\\":true,\\\"cardUnlockGroupId\\\":null},{\\\"name\\\":\\\"b-w-copier\\\",\\\"displayName\\\":\\\"B/W Copier\\\",\\\"text\\\":\\\"Base.\\\\nOn start of turn, gain {???}.\\\\nSpecial: Add a copy of all {B} or {W} Units in the same row as this Base to your hand.\\\",\\\"power\\\":0,\\\"cost\\\":[],\\\"shell\\\":0,\\\"maxHealth\\\":1,\\\"color\\\":null,\\\"capturable\\\":false,\\\"implemented\\\":true,\\\"cardUnlockGroupId\\\":null},{\\\"name\\\":\\\"pasture-planner\\\",\\\"displayName\\\":\\\"Pasture Planner\\\",\\\"text\\\":\\\"Base, Invulnerable.\\\\nSpecial: Audit the plan.\\\",\\\"power\\\":0,\\\"cost\\\":[],\\\"shell\\\":0,\\\"maxHealth\\\":1,\\\"color\\\":null,\\\"capturable\\\":false,\\\"implemented\\\":true,\\\"cardUnlockGroupId\\\":null},{\\\"name\\\":\\\"fences\\\",\\\"displayName\\\":\\\"Fences\\\",\\\"text\\\":\\\"Immobile, Invulnerable\\\",\\\"power\\\":0,\\\"cost\\\":[],\\\"shell\\\":0,\\\"maxHealth\\\":1,\\\"color\\\":null,\\\"capturable\\\":false,\\\"implemented\\\":true,\\\"cardUnlockGroupId\\\":null},{\\\"name\\\":\\\"puzzle-50-global-1\\\",\\\"displayName\\\":\\\"Tight-knit Community\\\",\\\"text\\\":\\\"\\\",\\\"power\\\":0,\\\"cost\\\":[\\\"B\\\"],\\\"shell\\\":0,\\\"maxHealth\\\":1,\\\"color\\\":\\\"B\\\",\\\"capturable\\\":false,\\\"implemented\\\":true,\\\"cardUnlockGroupId\\\":null},{\\\"name\\\":\\\"puzzle-50-global-2\\\",\\\"displayName\\\":\\\"Tight-knit Community\\\",\\\"text\\\":\\\"\\\",\\\"power\\\":0,\\\"cost\\\":[\\\"W\\\"],\\\"shell\\\":0,\\\"maxHealth\\\":1,\\\"color\\\":\\\"W\\\",\\\"capturable\\\":false,\\\"implemented\\\":true,\\\"cardUnlockGroupId\\\":null},{\\\"name\\\":\\\"puzzle-50-global-3\\\",\\\"displayName\\\":\\\"Loose-knit Communities\\\",\\\"text\\\":\\\"\\\",\\\"power\\\":0,\\\"cost\\\":[\\\"B\\\"],\\\"shell\\\":0,\\\"maxHealth\\\":1,\\\"color\\\":\\\"B\\\",\\\"capturable\\\":false,\\\"implemented\\\":true,\\\"cardUnlockGroupId\\\":null},{\\\"name\\\":\\\"puzzle-50-global-4\\\",\\\"displayName\\\":\\\"Loose-knit Communities\\\",\\\"text\\\":\\\"\\\",\\\"power\\\":0,\\\"cost\\\":[\\\"W\\\"],\\\"shell\\\":0,\\\"maxHealth\\\":1,\\\"color\\\":\\\"W\\\",\\\"capturable\\\":false,\\\"implemented\\\":true,\\\"cardUnlockGroupId\\\":null},{\\\"name\\\":\\\"puzzle-50-global-5\\\",\\\"displayName\\\":\\\"Coastal Communities\\\",\\\"text\\\":\\\"\\\",\\\"power\\\":0,\\\"cost\\\":[\\\"B\\\"],\\\"shell\\\":0,\\\"maxHealth\\\":1,\\\"color\\\":\\\"B\\\",\\\"capturable\\\":false,\\\"implemented\\\":true,\\\"cardUnlockGroupId\\\":null},{\\\"name\\\":\\\"puzzle-50-global-6\\\",\\\"displayName\\\":\\\"Coastal Communities\\\",\\\"text\\\":\\\"\\\",\\\"power\\\":0,\\\"cost\\\":[\\\"W\\\"],\\\"shell\\\":0,\\\"maxHealth\\\":1,\\\"color\\\":\\\"W\\\",\\\"capturable\\\":false,\\\"implemented\\\":true,\\\"cardUnlockGroupId\\\":null},{\\\"name\\\":\\\"puzzle-50-global-7\\\",\\\"displayName\\\":\\\"Narrow Communities\\\",\\\"text\\\":\\\"\\\",\\\"power\\\":0,\\\"cost\\\":[\\\"B\\\"],\\\"shell\\\":0,\\\"maxHealth\\\":1,\\\"color\\\":\\\"B\\\",\\\"capturable\\\":false,\\\"implemented\\\":true,\\\"cardUnlockGroupId\\\":null},{\\\"name\\\":\\\"puzzle-50-global-8\\\",\\\"displayName\\\":\\\"Narrow Communities\\\",\\\"text\\\":\\\"\\\",\\\"power\\\":0,\\\"cost\\\":[\\\"W\\\"],\\\"shell\\\":0,\\\"maxHealth\\\":1,\\\"color\\\":\\\"W\\\",\\\"capturable\\\":false,\\\"implemented\\\":true,\\\"cardUnlockGroupId\\\":null},{\\\"name\\\":\\\"puzzle-50-global-9\\\",\\\"displayName\\\":\\\"Courtyards\\\",\\\"text\\\":\\\"\\\",\\\"power\\\":0,\\\"cost\\\":[\\\"B\\\"],\\\"shell\\\":0,\\\"maxHealth\\\":1,\\\"color\\\":\\\"B\\\",\\\"capturable\\\":false,\\\"implemented\\\":true,\\\"cardUnlockGroupId\\\":null},{\\\"name\\\":\\\"puzzle-50-global-10\\\",\\\"displayName\\\":\\\"Courtyards\\\",\\\"text\\\":\\\"\\\",\\\"power\\\":0,\\\"cost\\\":[\\\"W\\\"],\\\"shell\\\":0,\\\"maxHealth\\\":1,\\\"color\\\":\\\"W\\\",\\\"capturable\\\":false,\\\"implemented\\\":true,\\\"cardUnlockGroupId\\\":null},{\\\"name\\\":\\\"puzzle-50-global-11\\\",\\\"displayName\\\":\\\"Plazas\\\",\\\"text\\\":\\\"\\\",\\\"power\\\":0,\\\"cost\\\":[\\\"B\\\"],\\\"shell\\\":0,\\\"maxHealth\\\":1,\\\"color\\\":\\\"B\\\",\\\"capturable\\\":false,\\\"implemented\\\":true,\\\"cardUnlockGroupId\\\":null},{\\\"name\\\":\\\"puzzle-50-global-12\\\",\\\"displayName\\\":\\\"Plazas\\\",\\\"text\\\":\\\"\\\",\\\"power\\\":0,\\\"cost\\\":[\\\"W\\\"],\\\"shell\\\":0,\\\"maxHealth\\\":1,\\\"color\\\":\\\"W\\\",\\\"capturable\\\":false,\\\"implemented\\\":true,\\\"cardUnlockGroupId\\\":null},{\\\"name\\\":\\\"puzzle-50-global-13\\\",\\\"displayName\\\":\\\"Esplanades\\\",\\\"text\\\":\\\"\\\",\\\"power\\\":0,\\\"cost\\\":[\\\"B\\\"],\\\"shell\\\":0,\\\"maxHealth\\\":1,\\\"color\\\":\\\"B\\\",\\\"capturable\\\":false,\\\"implemented\\\":true,\\\"cardUnlockGroupId\\\":null},{\\\"name\\\":\\\"puzzle-50-global-14\\\",\\\"displayName\\\":\\\"Esplanades\\\",\\\"text\\\":\\\"\\\",\\\"power\\\":0,\\\"cost\\\":[\\\"W\\\"],\\\"shell\\\":0,\\\"maxHealth\\\":1,\\\"color\\\":\\\"W\\\",\\\"capturable\\\":false,\\\"implemented\\\":true,\\\"cardUnlockGroupId\\\":null},{\\\"name\\\":\\\"puzzle-50-global-15\\\",\\\"displayName\\\":\\\"Circuits\\\",\\\"text\\\":\\\"\\\",\\\"power\\\":0,\\\"cost\\\":[\\\"B\\\"],\\\"shell\\\":0,\\\"maxHealth\\\":1,\\\"color\\\":\\\"B\\\",\\\"capturable\\\":false,\\\"implemented\\\":true,\\\"cardUnlockGroupId\\\":null},{\\\"name\\\":\\\"puzzle-50-global-16\\\",\\\"displayName\\\":\\\"Circuits\\\",\\\"text\\\":\\\"\\\",\\\"power\\\":0,\\\"cost\\\":[\\\"W\\\"],\\\"shell\\\":0,\\\"maxHealth\\\":1,\\\"color\\\":\\\"W\\\",\\\"capturable\\\":false,\\\"implemented\\\":true,\\\"cardUnlockGroupId\\\":null},{\\\"name\\\":\\\"puzzle-50-global-17\\\",\\\"displayName\\\":\\\"Uniform Communities\\\",\\\"text\\\":\\\"\\\",\\\"power\\\":0,\\\"cost\\\":[\\\"B\\\"],\\\"shell\\\":0,\\\"maxHealth\\\":1,\\\"color\\\":\\\"B\\\",\\\"capturable\\\":false,\\\"implemented\\\":true,\\\"cardUnlockGroupId\\\":null},{\\\"name\\\":\\\"puzzle-50-global-18\\\",\\\"displayName\\\":\\\"Uniform Communities\\\",\\\"text\\\":\\\"\\\",\\\"power\\\":0,\\\"cost\\\":[\\\"W\\\"],\\\"shell\\\":0,\\\"maxHealth\\\":1,\\\"color\\\":\\\"W\\\",\\\"capturable\\\":false,\\\"implemented\\\":true,\\\"cardUnlockGroupId\\\":null},{\\\"name\\\":\\\"puzzle-50-global-19\\\",\\\"displayName\\\":\\\"Signposted Communities\\\",\\\"text\\\":\\\"\\\",\\\"power\\\":0,\\\"cost\\\":[\\\"B\\\"],\\\"shell\\\":0,\\\"maxHealth\\\":1,\\\"color\\\":\\\"B\\\",\\\"capturable\\\":false,\\\"implemented\\\":true,\\\"cardUnlockGroupId\\\":null},{\\\"name\\\":\\\"puzzle-50-global-20\\\",\\\"displayName\\\":\\\"Signposted Communities\\\",\\\"text\\\":\\\"\\\",\\\"power\\\":0,\\\"cost\\\":[\\\"W\\\"],\\\"shell\\\":0,\\\"maxHealth\\\":1,\\\"color\\\":\\\"W\\\",\\\"capturable\\\":false,\\\"implemented\\\":true,\\\"cardUnlockGroupId\\\":null},{\\\"name\\\":\\\"puzzle-50-global-21\\\",\\\"displayName\\\":\\\"Optionally Signposted Communities\\\",\\\"text\\\":\\\"\\\",\\\"power\\\":0,\\\"cost\\\":[\\\"B\\\"],\\\"shell\\\":0,\\\"maxHealth\\\":1,\\\"color\\\":\\\"B\\\",\\\"capturable\\\":false,\\\"implemented\\\":true,\\\"cardUnlockGroupId\\\":null},{\\\"name\\\":\\\"puzzle-50-global-22\\\",\\\"displayName\\\":\\\"Optionally Signposted Communities\\\",\\\"text\\\":\\\"\\\",\\\"power\\\":0,\\\"cost\\\":[\\\"W\\\"],\\\"shell\\\":0,\\\"maxHealth\\\":1,\\\"color\\\":\\\"W\\\",\\\"capturable\\\":false,\\\"implemented\\\":true,\\\"cardUnlockGroupId\\\":null},{\\\"name\\\":\\\"puzzle-50-local-1\\\",\\\"displayName\\\":\\\"Resident\\\",\\\"text\\\":\\\"\\\",\\\"power\\\":0,\\\"cost\\\":[\\\"B\\\"],\\\"shell\\\":0,\\\"maxHealth\\\":1,\\\"color\\\":\\\"B\\\",\\\"capturable\\\":false,\\\"implemented\\\":true,\\\"cardUnlockGroupId\\\":null},{\\\"name\\\":\\\"puzzle-50-local-2\\\",\\\"displayName\\\":\\\"Resident\\\",\\\"text\\\":\\\"\\\",\\\"power\\\":0,\\\"cost\\\":[\\\"W\\\"],\\\"shell\\\":0,\\\"maxHealth\\\":1,\\\"color\\\":\\\"W\\\",\\\"capturable\\\":false,\\\"implemented\\\":true,\\\"cardUnlockGroupId\\\":null},{\\\"name\\\":\\\"puzzle-50-local-3\\\",\\\"displayName\\\":\\\"Neighbors\\\",\\\"text\\\":\\\"\\\",\\\"power\\\":0,\\\"cost\\\":[\\\"B\\\"],\\\"shell\\\":0,\\\"maxHealth\\\":1,\\\"color\\\":\\\"B\\\",\\\"capturable\\\":false,\\\"implemented\\\":true,\\\"cardUnlockGroupId\\\":null},{\\\"name\\\":\\\"puzzle-50-local-4\\\",\\\"displayName\\\":\\\"Neighbors\\\",\\\"text\\\":\\\"\\\",\\\"power\\\":0,\\\"cost\\\":[\\\"W\\\"],\\\"shell\\\":0,\\\"maxHealth\\\":1,\\\"color\\\":\\\"W\\\",\\\"capturable\\\":false,\\\"implemented\\\":true,\\\"cardUnlockGroupId\\\":null},{\\\"name\\\":\\\"puzzle-50-local-5\\\",\\\"displayName\\\":\\\"Inverted Scanner\\\",\\\"text\\\":\\\"\\\",\\\"power\\\":0,\\\"cost\\\":[\\\"B\\\"],\\\"shell\\\":0,\\\"maxHealth\\\":1,\\\"color\\\":\\\"B\\\",\\\"capturable\\\":false,\\\"implemented\\\":true,\\\"cardUnlockGroupId\\\":null},{\\\"name\\\":\\\"puzzle-50-local-6\\\",\\\"displayName\\\":\\\"Inverted Scanner\\\",\\\"text\\\":\\\"\\\",\\\"power\\\":0,\\\"cost\\\":[\\\"W\\\"],\\\"shell\\\":0,\\\"maxHealth\\\":1,\\\"color\\\":\\\"W\\\",\\\"capturable\\\":false,\\\"implemented\\\":true,\\\"cardUnlockGroupId\\\":null},{\\\"name\\\":\\\"puzzle-50-local-7\\\",\\\"displayName\\\":\\\"Inverted Vertical Scout\\\",\\\"text\\\":\\\"\\\",\\\"power\\\":0,\\\"cost\\\":[\\\"B\\\"],\\\"shell\\\":0,\\\"maxHealth\\\":1,\\\"color\\\":\\\"B\\\",\\\"capturable\\\":false,\\\"implemented\\\":true,\\\"cardUnlockGroupId\\\":null},{\\\"name\\\":\\\"puzzle-50-local-8\\\",\\\"displayName\\\":\\\"Inverted Vertical Scout\\\",\\\"text\\\":\\\"\\\",\\\"power\\\":0,\\\"cost\\\":[\\\"W\\\"],\\\"shell\\\":0,\\\"maxHealth\\\":1,\\\"color\\\":\\\"W\\\",\\\"capturable\\\":false,\\\"implemented\\\":true,\\\"cardUnlockGroupId\\\":null},{\\\"name\\\":\\\"puzzle-50-local-9\\\",\\\"displayName\\\":\\\"Inverted Horizontal Scout\\\",\\\"text\\\":\\\"\\\",\\\"power\\\":0,\\\"cost\\\":[\\\"B\\\"],\\\"shell\\\":0,\\\"maxHealth\\\":1,\\\"color\\\":\\\"B\\\",\\\"capturable\\\":false,\\\"implemented\\\":true,\\\"cardUnlockGroupId\\\":null},{\\\"name\\\":\\\"puzzle-50-local-10\\\",\\\"displayName\\\":\\\"Inverted Horizontal Scout\\\",\\\"text\\\":\\\"\\\",\\\"power\\\":0,\\\"cost\\\":[\\\"W\\\"],\\\"shell\\\":0,\\\"maxHealth\\\":1,\\\"color\\\":\\\"W\\\",\\\"capturable\\\":false,\\\"implemented\\\":true,\\\"cardUnlockGroupId\\\":null},{\\\"name\\\":\\\"puzzle-50-local-11\\\",\\\"displayName\\\":\\\"Neighborhood Surveyor\\\",\\\"text\\\":\\\"\\\",\\\"power\\\":0,\\\"cost\\\":[\\\"B\\\"],\\\"shell\\\":0,\\\"maxHealth\\\":1,\\\"color\\\":\\\"B\\\",\\\"capturable\\\":false,\\\"implemented\\\":true,\\\"cardUnlockGroupId\\\":null},{\\\"name\\\":\\\"puzzle-50-local-12\\\",\\\"displayName\\\":\\\"Neighborhood Surveyor\\\",\\\"text\\\":\\\"\\\",\\\"power\\\":0,\\\"cost\\\":[\\\"W\\\"],\\\"shell\\\":0,\\\"maxHealth\\\":1,\\\"color\\\":\\\"W\\\",\\\"capturable\\\":false,\\\"implemented\\\":true,\\\"cardUnlockGroupId\\\":null},{\\\"name\\\":\\\"puzzle-50-local-13\\\",\\\"displayName\\\":\\\"Inverted Surveyor\\\",\\\"text\\\":\\\"\\\",\\\"power\\\":0,\\\"cost\\\":[\\\"B\\\"],\\\"shell\\\":0,\\\"maxHealth\\\":1,\\\"color\\\":\\\"B\\\",\\\"capturable\\\":false,\\\"implemented\\\":true,\\\"cardUnlockGroupId\\\":null},{\\\"name\\\":\\\"puzzle-50-local-14\\\",\\\"displayName\\\":\\\"Inverted Surveyor\\\",\\\"text\\\":\\\"\\\",\\\"power\\\":0,\\\"cost\\\":[\\\"W\\\"],\\\"shell\\\":0,\\\"maxHealth\\\":1,\\\"color\\\":\\\"W\\\",\\\"capturable\\\":false,\\\"implemented\\\":true,\\\"cardUnlockGroupId\\\":null},{\\\"name\\\":\\\"puzzle-50-local-15\\\",\\\"displayName\\\":\\\"Watchtower\\\",\\\"text\\\":\\\"\\\",\\\"power\\\":0,\\\"cost\\\":[\\\"B\\\"],\\\"shell\\\":0,\\\"maxHealth\\\":1,\\\"color\\\":\\\"B\\\",\\\"capturable\\\":false,\\\"implemented\\\":true,\\\"cardUnlockGroupId\\\":null},{\\\"name\\\":\\\"puzzle-50-local-16\\\",\\\"displayName\\\":\\\"Watchtower\\\",\\\"text\\\":\\\"\\\",\\\"power\\\":0,\\\"cost\\\":[\\\"W\\\"],\\\"shell\\\":0,\\\"maxHealth\\\":1,\\\"color\\\":\\\"W\\\",\\\"capturable\\\":false,\\\"implemented\\\":true,\\\"cardUnlockGroupId\\\":null},{\\\"name\\\":\\\"puzzle-50-local-17\\\",\\\"displayName\\\":\\\"Inverted Watchtower\\\",\\\"text\\\":\\\"\\\",\\\"power\\\":0,\\\"cost\\\":[\\\"B\\\"],\\\"shell\\\":0,\\\"maxHealth\\\":1,\\\"color\\\":\\\"B\\\",\\\"capturable\\\":false,\\\"implemented\\\":true,\\\"cardUnlockGroupId\\\":null},{\\\"name\\\":\\\"puzzle-50-local-18\\\",\\\"displayName\\\":\\\"Inverted Watchtower\\\",\\\"text\\\":\\\"\\\",\\\"power\\\":0,\\\"cost\\\":[\\\"W\\\"],\\\"shell\\\":0,\\\"maxHealth\\\":1,\\\"color\\\":\\\"W\\\",\\\"capturable\\\":false,\\\"implemented\\\":true,\\\"cardUnlockGroupId\\\":null},{\\\"name\\\":\\\"beehive\\\",\\\"displayName\\\":\\\"Beehive\\\",\\\"text\\\":\\\"Base.\\\\n*A home for bees.*\\\",\\\"power\\\":0,\\\"cost\\\":[],\\\"shell\\\":0,\\\"maxHealth\\\":1,\\\"color\\\":\\\"Y\\\",\\\"capturable\\\":false,\\\"implemented\\\":true,\\\"cardUnlockGroupId\\\":null},{\\\"name\\\":\\\"larva\\\",\\\"displayName\\\":\\\"Larva\\\",\\\"text\\\":\\\"Cannot Attack or Create. Immobile.\\\\n{Y}, Special: Turn into a Bee.\\\\nOn the start of your turn, gain {Y}.\\\\n*“One day, I’ll bee a big bee!”*\\\",\\\"power\\\":0,\\\"cost\\\":[\\\"Y\\\"],\\\"shell\\\":0,\\\"maxHealth\\\":1,\\\"color\\\":\\\"Y\\\",\\\"capturable\\\":false,\\\"implemented\\\":true,\\\"cardUnlockGroupId\\\":null},{\\\"name\\\":\\\"bearhive\\\",\\\"displayName\\\":\\\"Bearhive\\\",\\\"text\\\":\\\"Base.\\\\n*A home for bears.*\\\",\\\"power\\\":0,\\\"cost\\\":[],\\\"shell\\\":0,\\\"maxHealth\\\":99,\\\"color\\\":null,\\\"capturable\\\":false,\\\"implemented\\\":true,\\\"cardUnlockGroupId\\\":null},{\\\"name\\\":\\\"luge-bear\\\",\\\"displayName\\\":\\\"Luge Bear\\\",\\\"text\\\":\\\"Wants to see a winter olympic sport before it enters the Bearhive next turn.\\\",\\\"power\\\":0,\\\"cost\\\":[\\\".\\\"],\\\"shell\\\":0,\\\"maxHealth\\\":99,\\\"color\\\":null,\\\"capturable\\\":false,\\\"implemented\\\":true,\\\"cardUnlockGroupId\\\":null},{\\\"name\\\":\\\"stufful-bear\\\",\\\"displayName\\\":\\\"Stufful Bear\\\",\\\"text\\\":\\\"Wants to see a Generation I Pokémon before it enters the Bearhive next turn.\\\",\\\"power\\\":0,\\\"cost\\\":[\\\".\\\"],\\\"shell\\\":0,\\\"maxHealth\\\":99,\\\"color\\\":null,\\\"capturable\\\":false,\\\"implemented\\\":true,\\\"cardUnlockGroupId\\\":null},{\\\"name\\\":\\\"black-bear\\\",\\\"displayName\\\":\\\"Black Bear\\\",\\\"text\\\":\\\"Wants to see a color before it enters the Bearhive next turn.\\\",\\\"power\\\":0,\\\"cost\\\":[\\\".\\\"],\\\"shell\\\":0,\\\"maxHealth\\\":99,\\\"color\\\":null,\\\"capturable\\\":false,\\\"implemented\\\":true,\\\"cardUnlockGroupId\\\":null},{\\\"name\\\":\\\"banana-bear\\\",\\\"displayName\\\":\\\"Banana Bear\\\",\\\"text\\\":\\\"Wants to see a fruit before it enters the Bearhive next turn.\\\",\\\"power\\\":0,\\\"cost\\\":[\\\".\\\"],\\\"shell\\\":0,\\\"maxHealth\\\":99,\\\"color\\\":null,\\\"capturable\\\":false,\\\"implemented\\\":true,\\\"cardUnlockGroupId\\\":null},{\\\"name\\\":\\\"sun-bear\\\",\\\"displayName\\\":\\\"SUN Bear\\\",\\\"text\\\":\\\"Wants to see an abbreviation for a day of the week before it enters the Bearhive next turn.\\\",\\\"power\\\":0,\\\"cost\\\":[\\\".\\\"],\\\"shell\\\":0,\\\"maxHealth\\\":99,\\\"color\\\":null,\\\"capturable\\\":false,\\\"implemented\\\":true,\\\"cardUnlockGroupId\\\":null},{\\\"name\\\":\\\"ord-bear\\\",\\\"displayName\\\":\\\"ORD Bear\\\",\\\"text\\\":\\\"Wants to see an IATA airport code for an airport in Florida before it enters the Bearhive next turn.\\\",\\\"power\\\":0,\\\"cost\\\":[\\\".\\\"],\\\"shell\\\":0,\\\"maxHealth\\\":99,\\\"color\\\":null,\\\"capturable\\\":false,\\\"implemented\\\":true,\\\"cardUnlockGroupId\\\":null},{\\\"name\\\":\\\"bears-bear\\\",\\\"displayName\\\":\\\"Bears Bear\\\",\\\"text\\\":\\\"Wants to see an NFL team name before it enters the Bearhive next turn.\\\",\\\"power\\\":0,\\\"cost\\\":[\\\".\\\"],\\\"shell\\\":0,\\\"maxHealth\\\":99,\\\"color\\\":null,\\\"capturable\\\":false,\\\"implemented\\\":true,\\\"cardUnlockGroupId\\\":null},{\\\"name\\\":\\\"confused-bear\\\",\\\"displayName\\\":\\\"Confused Bear\\\",\\\"text\\\":\\\"Wants to see a synonym of \\\\\\\"tricked\\\\\\\" before it enters the Bearhive next turn.\\\",\\\"power\\\":0,\\\"cost\\\":[\\\".\\\"],\\\"shell\\\":0,\\\"maxHealth\\\":99,\\\"color\\\":null,\\\"capturable\\\":false,\\\"implemented\\\":true,\\\"cardUnlockGroupId\\\":null},{\\\"name\\\":\\\"eur-bear\\\",\\\"displayName\\\":\\\"EUR Bear\\\",\\\"text\\\":\\\"Wants to see a currency code before it enters the Bearhive next turn.\\\",\\\"power\\\":0,\\\"cost\\\":[\\\".\\\"],\\\"shell\\\":0,\\\"maxHealth\\\":99,\\\"color\\\":null,\\\"capturable\\\":false,\\\"implemented\\\":true,\\\"cardUnlockGroupId\\\":null},{\\\"name\\\":\\\"three-bear\\\",\\\"displayName\\\":\\\"Three Bear\\\",\\\"text\\\":\\\"Wants to see a number before it enters the Bearhive next turn.\\\",\\\"power\\\":0,\\\"cost\\\":[\\\".\\\"],\\\"shell\\\":0,\\\"maxHealth\\\":99,\\\"color\\\":null,\\\"capturable\\\":false,\\\"implemented\\\":true,\\\"cardUnlockGroupId\\\":null},{\\\"name\\\":\\\"bludgeon-bear\\\",\\\"displayName\\\":\\\"Bludgeon Bear\\\",\\\"text\\\":\\\"Wants to see a weapon before it enters the Bearhive next turn.\\\",\\\"power\\\":0,\\\"cost\\\":[\\\".\\\"],\\\"shell\\\":0,\\\"maxHealth\\\":99,\\\"color\\\":null,\\\"capturable\\\":false,\\\"implemented\\\":true,\\\"cardUnlockGroupId\\\":null},{\\\"name\\\":\\\"four-bear\\\",\\\"displayName\\\":\\\"Four Bear\\\",\\\"text\\\":\\\"Wants to see a larger number than last time before it enters the Bearhive next turn.\\\",\\\"power\\\":0,\\\"cost\\\":[\\\".\\\"],\\\"shell\\\":0,\\\"maxHealth\\\":99,\\\"color\\\":null,\\\"capturable\\\":false,\\\"implemented\\\":true,\\\"cardUnlockGroupId\\\":null},{\\\"name\\\":\\\"grism-bear\\\",\\\"displayName\\\":\\\"Grism Bear\\\",\\\"text\\\":\\\"Wants to see an optical component before it enters the Bearhive next turn.\\\",\\\"power\\\":0,\\\"cost\\\":[\\\".\\\"],\\\"shell\\\":0,\\\"maxHealth\\\":99,\\\"color\\\":null,\\\"capturable\\\":false,\\\"implemented\\\":true,\\\"cardUnlockGroupId\\\":null},{\\\"name\\\":\\\"assault-bear\\\",\\\"displayName\\\":\\\"Assault Bear\\\",\\\"text\\\":\\\"Wants to see a post-1900 Kentucky Derby winner before it enters the Bearhive next turn.\\\",\\\"power\\\":0,\\\"cost\\\":[\\\".\\\"],\\\"shell\\\":0,\\\"maxHealth\\\":99,\\\"color\\\":null,\\\"capturable\\\":false,\\\"implemented\\\":true,\\\"cardUnlockGroupId\\\":null},{\\\"name\\\":\\\"archery-bear\\\",\\\"displayName\\\":\\\"Archery Bear\\\",\\\"text\\\":\\\"Wants to see a summer olympic sport before it enters the Bearhive next turn.\\\",\\\"power\\\":0,\\\"cost\\\":[\\\".\\\"],\\\"shell\\\":0,\\\"maxHealth\\\":99,\\\"color\\\":null,\\\"capturable\\\":false,\\\"implemented\\\":true,\\\"cardUnlockGroupId\\\":null},{\\\"name\\\":\\\"oak-bear\\\",\\\"displayName\\\":\\\"Oak Bear\\\",\\\"text\\\":\\\"Wants to see a tree before it enters the Bearhive next turn.\\\",\\\"power\\\":0,\\\"cost\\\":[\\\".\\\"],\\\"shell\\\":0,\\\"maxHealth\\\":99,\\\"color\\\":null,\\\"capturable\\\":false,\\\"implemented\\\":true,\\\"cardUnlockGroupId\\\":null},{\\\"name\\\":\\\"december-bear\\\",\\\"displayName\\\":\\\"December Bear\\\",\\\"text\\\":\\\"Wants to see a month before it enters the Bearhive next turn.\\\",\\\"power\\\":0,\\\"cost\\\":[\\\".\\\"],\\\"shell\\\":0,\\\"maxHealth\\\":99,\\\"color\\\":null,\\\"capturable\\\":false,\\\"implemented\\\":true,\\\"cardUnlockGroupId\\\":null},{\\\"name\\\":\\\"alabama-bear\\\",\\\"displayName\\\":\\\"Alabama Bear\\\",\\\"text\\\":\\\"Wants to see a US state before it enters the Bearhive next turn.\\\",\\\"power\\\":0,\\\"cost\\\":[\\\".\\\"],\\\"shell\\\":0,\\\"maxHealth\\\":99,\\\"color\\\":null,\\\"capturable\\\":false,\\\"implemented\\\":true,\\\"cardUnlockGroupId\\\":null},{\\\"name\\\":\\\"rammus-bear\\\",\\\"displayName\\\":\\\"Rammus Bear\\\",\\\"text\\\":\\\"Wants to see a champion in League of Legends before it enters the Bearhive next turn.\\\",\\\"power\\\":0,\\\"cost\\\":[\\\".\\\"],\\\"shell\\\":0,\\\"maxHealth\\\":99,\\\"color\\\":null,\\\"capturable\\\":false,\\\"implemented\\\":true,\\\"cardUnlockGroupId\\\":null},{\\\"name\\\":\\\"apple-bee\\\",\\\"displayName\\\":\\\"Apple Bee\\\",\\\"text\\\":\\\"Cannot Attack or Create. Immobile.\\\\n{Y}, Flex: Destroy this Creature.\\\\nOn the start of your turn, gain {Y}.\\\\n*Buzz buzz!*\\\",\\\"power\\\":0,\\\"cost\\\":[\\\"Y\\\"],\\\"shell\\\":0,\\\"maxHealth\\\":1,\\\"color\\\":\\\"Y\\\",\\\"capturable\\\":false,\\\"implemented\\\":true,\\\"cardUnlockGroupId\\\":null},{\\\"name\\\":\\\"bumblebee\\\",\\\"displayName\\\":\\\"Bumblebee\\\",\\\"text\\\":\\\"Cannot Attack or Create. Immobile.\\\\n{Y}, Flex: Destroy this Creature.\\\\nOn the start of your turn, gain {Y}.\\\\n*Buzz buzz!*\\\",\\\"power\\\":0,\\\"cost\\\":[\\\"Y\\\"],\\\"shell\\\":0,\\\"maxHealth\\\":1,\\\"color\\\":\\\"Y\\\",\\\"capturable\\\":false,\\\"implemented\\\":true,\\\"cardUnlockGroupId\\\":null},{\\\"name\\\":\\\"carpenter-bee\\\",\\\"displayName\\\":\\\"Carpenter Bee\\\",\\\"text\\\":\\\"Cannot Attack or Create. Immobile.\\\\n{Y}, Flex: Destroy this Creature.\\\\nOn the start of your turn, gain {Y}.\\\\n*Buzz buzz!*\\\",\\\"power\\\":0,\\\"cost\\\":[\\\"Y\\\"],\\\"shell\\\":0,\\\"maxHealth\\\":1,\\\"color\\\":\\\"Y\\\",\\\"capturable\\\":false,\\\"implemented\\\":true,\\\"cardUnlockGroupId\\\":null},{\\\"name\\\":\\\"drone-bee\\\",\\\"displayName\\\":\\\"Drone Bee\\\",\\\"text\\\":\\\"Cannot Attack or Create. Immobile.\\\\n{Y}, Flex: Destroy this Creature.\\\\nOn the start of your turn, gain {Y}.\\\\n*Buzz buzz!*\\\",\\\"power\\\":0,\\\"cost\\\":[\\\"Y\\\"],\\\"shell\\\":0,\\\"maxHealth\\\":1,\\\"color\\\":\\\"Y\\\",\\\"capturable\\\":false,\\\"implemented\\\":true,\\\"cardUnlockGroupId\\\":null},{\\\"name\\\":\\\"edward-al-bee\\\",\\\"displayName\\\":\\\"Edward Al Bee\\\",\\\"text\\\":\\\"Cannot Attack or Create. Immobile.\\\\n{Y}, Flex: Destroy this Creature.\\\\nOn the start of your turn, gain {Y}.\\\\n*Buzz buzz!*\\\",\\\"power\\\":0,\\\"cost\\\":[\\\"Y\\\"],\\\"shell\\\":0,\\\"maxHealth\\\":1,\\\"color\\\":\\\"Y\\\",\\\"capturable\\\":false,\\\"implemented\\\":true,\\\"cardUnlockGroupId\\\":null},{\\\"name\\\":\\\"fluffy-bee\\\",\\\"displayName\\\":\\\"Fluffy Bee\\\",\\\"text\\\":\\\"Cannot Attack or Create. Immobile.\\\\n{Y}, Flex: Destroy this Creature.\\\\nOn the start of your turn, gain {Y}.\\\\n*Buzz buzz!*\\\",\\\"power\\\":0,\\\"cost\\\":[\\\"Y\\\"],\\\"shell\\\":0,\\\"maxHealth\\\":1,\\\"color\\\":\\\"Y\\\",\\\"capturable\\\":false,\\\"implemented\\\":true,\\\"cardUnlockGroupId\\\":null},{\\\"name\\\":\\\"gardening-bee\\\",\\\"displayName\\\":\\\"Gardening Bee\\\",\\\"text\\\":\\\"Cannot Attack or Create. Immobile.\\\\n{Y}, Flex: Destroy this Creature.\\\\nOn the start of your turn, gain {Y}.\\\\n*Buzz buzz!*\\\",\\\"power\\\":0,\\\"cost\\\":[\\\"Y\\\"],\\\"shell\\\":0,\\\"maxHealth\\\":1,\\\"color\\\":\\\"Y\\\",\\\"capturable\\\":false,\\\"implemented\\\":true,\\\"cardUnlockGroupId\\\":null},{\\\"name\\\":\\\"honey-bee\\\",\\\"displayName\\\":\\\"Honey Bee\\\",\\\"text\\\":\\\"Cannot Attack or Create. Immobile.\\\\n{Y}, Flex: Destroy this Creature.\\\\nOn the start of your turn, gain {Y}.\\\\n*Buzz buzz!*\\\",\\\"power\\\":0,\\\"cost\\\":[\\\"Y\\\"],\\\"shell\\\":0,\\\"maxHealth\\\":1,\\\"color\\\":\\\"Y\\\",\\\"capturable\\\":false,\\\"implemented\\\":true,\\\"cardUnlockGroupId\\\":null},{\\\"name\\\":\\\"iridescent-bee\\\",\\\"displayName\\\":\\\"Iridescent Bee\\\",\\\"text\\\":\\\"Cannot Attack or Create. Immobile.\\\\n{Y}, Flex: Destroy this Creature.\\\\nOn the start of your turn, gain {Y}.\\\\n*Buzz buzz!*\\\",\\\"power\\\":0,\\\"cost\\\":[\\\"Y\\\"],\\\"shell\\\":0,\\\"maxHealth\\\":1,\\\"color\\\":\\\"Y\\\",\\\"capturable\\\":false,\\\"implemented\\\":true,\\\"cardUnlockGroupId\\\":null},{\\\"name\\\":\\\"jasmine-bee\\\",\\\"displayName\\\":\\\"Jasmine Bee\\\",\\\"text\\\":\\\"Cannot Attack or Create. Immobile.\\\\n{Y}, Flex: Destroy this Creature.\\\\nOn the start of your turn, gain {Y}.\\\\n*Buzz buzz!*\\\",\\\"power\\\":0,\\\"cost\\\":[\\\"Y\\\"],\\\"shell\\\":0,\\\"maxHealth\\\":1,\\\"color\\\":\\\"Y\\\",\\\"capturable\\\":false,\\\"implemented\\\":true,\\\"cardUnlockGroupId\\\":null},{\\\"name\\\":\\\"kombucha-bee\\\",\\\"displayName\\\":\\\"Kombucha Bee\\\",\\\"text\\\":\\\"Cannot Attack or Create. Immobile.\\\\n{Y}, Flex: Destroy this Creature.\\\\nOn the start of your turn, gain {Y}.\\\\n*Buzz buzz!*\\\",\\\"power\\\":0,\\\"cost\\\":[\\\"Y\\\"],\\\"shell\\\":0,\\\"maxHealth\\\":1,\\\"color\\\":\\\"Y\\\",\\\"capturable\\\":false,\\\"implemented\\\":true,\\\"cardUnlockGroupId\\\":null},{\\\"name\\\":\\\"lavender-bee\\\",\\\"displayName\\\":\\\"Lavender Bee\\\",\\\"text\\\":\\\"Cannot Attack or Create. Immobile.\\\\n{Y}, Flex: Destroy this Creature.\\\\nOn the start of your turn, gain {Y}.\\\\n*Buzz buzz!*\\\",\\\"power\\\":0,\\\"cost\\\":[\\\"Y\\\"],\\\"shell\\\":0,\\\"maxHealth\\\":1,\\\"color\\\":\\\"Y\\\",\\\"capturable\\\":false,\\\"implemented\\\":true,\\\"cardUnlockGroupId\\\":null},{\\\"name\\\":\\\"mason-bee\\\",\\\"displayName\\\":\\\"Mason Bee\\\",\\\"text\\\":\\\"Cannot Attack or Create. Immobile.\\\\n{Y}, Flex: Destroy this Creature.\\\\nOn the start of your turn, gain {Y}.\\\\n*Buzz buzz!*\\\",\\\"power\\\":0,\\\"cost\\\":[\\\"Y\\\"],\\\"shell\\\":0,\\\"maxHealth\\\":1,\\\"color\\\":\\\"Y\\\",\\\"capturable\\\":false,\\\"implemented\\\":true,\\\"cardUnlockGroupId\\\":null},{\\\"name\\\":\\\"nectar-bee\\\",\\\"displayName\\\":\\\"Nectar Bee\\\",\\\"text\\\":\\\"Cannot Attack or Create. Immobile.\\\\n{Y}, Flex: Destroy this Creature.\\\\nOn the start of your turn, gain {Y}.\\\\n*Buzz buzz!*\\\",\\\"power\\\":0,\\\"cost\\\":[\\\"Y\\\"],\\\"shell\\\":0,\\\"maxHealth\\\":1,\\\"color\\\":\\\"Y\\\",\\\"capturable\\\":false,\\\"implemented\\\":true,\\\"cardUnlockGroupId\\\":null},{\\\"name\\\":\\\"orange-bee\\\",\\\"displayName\\\":\\\"Orange Bee\\\",\\\"text\\\":\\\"Cannot Attack or Create. Immobile.\\\\n{Y}, Flex: Destroy this Creature.\\\\nOn the start of your turn, gain {Y}.\\\\n*Buzz buzz!*\\\",\\\"power\\\":0,\\\"cost\\\":[\\\"Y\\\"],\\\"shell\\\":0,\\\"maxHealth\\\":1,\\\"color\\\":\\\"Y\\\",\\\"capturable\\\":false,\\\"implemented\\\":true,\\\"cardUnlockGroupId\\\":null},{\\\"name\\\":\\\"pollinator-bee\\\",\\\"displayName\\\":\\\"Pollinator Bee\\\",\\\"text\\\":\\\"Cannot Attack or Create. Immobile.\\\\n{Y}, Flex: Destroy this Creature.\\\\nOn the start of your turn, gain {Y}.\\\\n*Buzz buzz!*\\\",\\\"power\\\":0,\\\"cost\\\":[\\\"Y\\\"],\\\"shell\\\":0,\\\"maxHealth\\\":1,\\\"color\\\":\\\"Y\\\",\\\"capturable\\\":false,\\\"implemented\\\":true,\\\"cardUnlockGroupId\\\":null},{\\\"name\\\":\\\"queen-bee\\\",\\\"displayName\\\":\\\"Queen Bee\\\",\\\"text\\\":\\\"Cannot Attack or Create. Immobile.\\\\n{Y}, Flex: Destroy this Creature.\\\\nOn the start of your turn, gain {Y}.\\\\n*Buzz buzz!*\\\",\\\"power\\\":0,\\\"cost\\\":[\\\"Y\\\"],\\\"shell\\\":0,\\\"maxHealth\\\":1,\\\"color\\\":\\\"Y\\\",\\\"capturable\\\":false,\\\"implemented\\\":true,\\\"cardUnlockGroupId\\\":null},{\\\"name\\\":\\\"rosebud-bee\\\",\\\"displayName\\\":\\\"Rosebud Bee\\\",\\\"text\\\":\\\"Cannot Attack or Create. Immobile.\\\\n{Y}, Flex: Destroy this Creature.\\\\nOn the start of your turn, gain {Y}.\\\\n*Buzz buzz!*\\\",\\\"power\\\":0,\\\"cost\\\":[\\\"Y\\\"],\\\"shell\\\":0,\\\"maxHealth\\\":1,\\\"color\\\":\\\"Y\\\",\\\"capturable\\\":false,\\\"implemented\\\":true,\\\"cardUnlockGroupId\\\":null},{\\\"name\\\":\\\"sunshine-bee\\\",\\\"displayName\\\":\\\"Sunshine Bee\\\",\\\"text\\\":\\\"Cannot Attack or Create. Immobile.\\\\n{Y}, Flex: Destroy this Creature.\\\\nOn the start of your turn, gain {Y}.\\\\n*Buzz buzz!*\\\",\\\"power\\\":0,\\\"cost\\\":[\\\"Y\\\"],\\\"shell\\\":0,\\\"maxHealth\\\":1,\\\"color\\\":\\\"Y\\\",\\\"capturable\\\":false,\\\"implemented\\\":true,\\\"cardUnlockGroupId\\\":null},{\\\"name\\\":\\\"tangerine-bee\\\",\\\"displayName\\\":\\\"Tangerine Bee\\\",\\\"text\\\":\\\"Cannot Attack or Create. Immobile.\\\\n{Y}, Flex: Destroy this Creature.\\\\nOn the start of your turn, gain {Y}.\\\\n*Buzz buzz!*\\\",\\\"power\\\":0,\\\"cost\\\":[\\\"Y\\\"],\\\"shell\\\":0,\\\"maxHealth\\\":1,\\\"color\\\":\\\"Y\\\",\\\"capturable\\\":false,\\\"implemented\\\":true,\\\"cardUnlockGroupId\\\":null},{\\\"name\\\":\\\"ultimatefris-bee\\\",\\\"displayName\\\":\\\"Ultimatefris Bee\\\",\\\"text\\\":\\\"Cannot Attack or Create. Immobile.\\\\n{Y}, Flex: Destroy this Creature.\\\\nOn the start of your turn, gain {Y}.\\\\n*Buzz buzz!*\\\",\\\"power\\\":0,\\\"cost\\\":[\\\"Y\\\"],\\\"shell\\\":0,\\\"maxHealth\\\":1,\\\"color\\\":\\\"Y\\\",\\\"capturable\\\":false,\\\"implemented\\\":true,\\\"cardUnlockGroupId\\\":null},{\\\"name\\\":\\\"velvet-bee\\\",\\\"displayName\\\":\\\"Velvet Bee\\\",\\\"text\\\":\\\"Cannot Attack or Create. Immobile.\\\\n{Y}, Flex: Destroy this Creature.\\\\nOn the start of your turn, gain {Y}.\\\\n*Buzz buzz!*\\\",\\\"power\\\":0,\\\"cost\\\":[\\\"Y\\\"],\\\"shell\\\":0,\\\"maxHealth\\\":1,\\\"color\\\":\\\"Y\\\",\\\"capturable\\\":false,\\\"implemented\\\":true,\\\"cardUnlockGroupId\\\":null},{\\\"name\\\":\\\"worker-bee\\\",\\\"displayName\\\":\\\"Worker Bee\\\",\\\"text\\\":\\\"Cannot Attack or Create. Immobile.\\\\n{Y}, Flex: Destroy this Creature.\\\\nOn the start of your turn, gain {Y}.\\\\n*Buzz buzz!*\\\",\\\"power\\\":0,\\\"cost\\\":[\\\"Y\\\"],\\\"shell\\\":0,\\\"maxHealth\\\":1,\\\"color\\\":\\\"Y\\\",\\\"capturable\\\":false,\\\"implemented\\\":true,\\\"cardUnlockGroupId\\\":null},{\\\"name\\\":\\\"xylophone-bee\\\",\\\"displayName\\\":\\\"Xylophone Bee\\\",\\\"text\\\":\\\"Cannot Attack or Create. Immobile.\\\\n{Y}, Flex: Destroy this Creature.\\\\nOn the start of your turn, gain {Y}.\\\\n*Buzz buzz!*\\\",\\\"power\\\":0,\\\"cost\\\":[\\\"Y\\\"],\\\"shell\\\":0,\\\"maxHealth\\\":1,\\\"color\\\":\\\"Y\\\",\\\"capturable\\\":false,\\\"implemented\\\":true,\\\"cardUnlockGroupId\\\":null},{\\\"name\\\":\\\"yellow-jacket-bee\\\",\\\"displayName\\\":\\\"Yellow Jacket Bee\\\",\\\"text\\\":\\\"Cannot Attack or Create. Immobile.\\\\n{Y}, Flex: Destroy this Creature.\\\\nOn the start of your turn, gain {Y}.\\\\n*Buzz buzz!*\\\",\\\"power\\\":0,\\\"cost\\\":[\\\"Y\\\"],\\\"shell\\\":0,\\\"maxHealth\\\":1,\\\"color\\\":\\\"Y\\\",\\\"capturable\\\":false,\\\"implemented\\\":true,\\\"cardUnlockGroupId\\\":null},{\\\"name\\\":\\\"zinger-bee\\\",\\\"displayName\\\":\\\"Zinger Bee\\\",\\\"text\\\":\\\"Cannot Attack or Create. Immobile.\\\\n{Y}, Flex: Destroy this Creature.\\\\nOn the start of your turn, gain {Y}.\\\\n*Buzz buzz!*\\\",\\\"power\\\":0,\\\"cost\\\":[\\\"Y\\\"],\\\"shell\\\":0,\\\"maxHealth\\\":1,\\\"color\\\":\\\"Y\\\",\\\"capturable\\\":false,\\\"implemented\\\":true,\\\"cardUnlockGroupId\\\":null},{\\\"name\\\":\\\"yurt\\\",\\\"displayName\\\":\\\"Yurt\\\",\\\"text\\\":\\\"Base.\\\\nOn start of turn, gain {Y}.\\\",\\\"power\\\":0,\\\"cost\\\":[],\\\"shell\\\":0,\\\"maxHealth\\\":4,\\\"color\\\":\\\"Y\\\",\\\"capturable\\\":false,\\\"implemented\\\":true,\\\"cardUnlockGroupId\\\":null},{\\\"name\\\":\\\"kero-dos\\\",\\\"displayName\\\":\\\"Kero Dos\\\",\\\"text\\\":\\\"Base, Invulnerable.\\\\nOn start of turn, if there are no Friendly Creatures, this Base loses 50 Health, Obliterates all Enemy Creatures, and Summons a new wave of defenders.\\\",\\\"power\\\":0,\\\"cost\\\":[],\\\"shell\\\":0,\\\"maxHealth\\\":300,\\\"color\\\":null,\\\"capturable\\\":false,\\\"implemented\\\":true,\\\"cardUnlockGroupId\\\":null},{\\\"name\\\":\\\"dinosaur-tail\\\",\\\"displayName\\\":\\\"Dinosaur Tail\\\",\\\"text\\\":\\\"When this Creature is Damaged, instead, it takes 1 Damage.\\\\nAfter 5 turns, Destroy all Enemy Units.\\\",\\\"power\\\":0,\\\"cost\\\":[],\\\"shell\\\":0,\\\"maxHealth\\\":20,\\\"color\\\":\\\"G\\\",\\\"capturable\\\":false,\\\"implemented\\\":true,\\\"cardUnlockGroupId\\\":null},{\\\"name\\\":\\\"boar-tusks\\\",\\\"displayName\\\":\\\"Boar Tusks\\\",\\\"text\\\":\\\"When Damaged by a Creature, that Creature takes 3 Damage.\\\\nAfter 2 turns, Destroy all Enemy Units.\\\",\\\"power\\\":0,\\\"cost\\\":[],\\\"shell\\\":0,\\\"maxHealth\\\":12,\\\"color\\\":\\\"R\\\",\\\"capturable\\\":false,\\\"implemented\\\":true,\\\"cardUnlockGroupId\\\":null},{\\\"name\\\":\\\"dryad-horns\\\",\\\"displayName\\\":\\\"Dryad Horns\\\",\\\"text\\\":\\\"After 14 turns, Destroy all Enemy Units.\\\",\\\"power\\\":0,\\\"cost\\\":[],\\\"shell\\\":0,\\\"maxHealth\\\":15000,\\\"color\\\":\\\"P\\\",\\\"capturable\\\":false,\\\"implemented\\\":true,\\\"cardUnlockGroupId\\\":null},{\\\"name\\\":\\\"cow-udder\\\",\\\"displayName\\\":\\\"Cow Udder\\\",\\\"text\\\":\\\"When Damaged by a Creature, that Creature takes 1 Damage.\\\\nWhen a Friendly Unit is Destroyed, gain +1 Health.\\\\nThis Creature is Invulnerable if any Friendly Cow Leg is on the field.\\\\nAfter 4 turns, Destroy all Enemy Units.\\\",\\\"power\\\":0,\\\"cost\\\":[],\\\"shell\\\":0,\\\"maxHealth\\\":10,\\\"color\\\":\\\"W/B\\\",\\\"capturable\\\":false,\\\"implemented\\\":true,\\\"cardUnlockGroupId\\\":null},{\\\"name\\\":\\\"cow-leg-white\\\",\\\"displayName\\\":\\\"Cow Leg\\\",\\\"text\\\":\\\"When Damaged by a Creature, that Creature takes 1 Damage.\\\\nWhen a Friendly Unit is Destroyed, gain +1 Health.\\\",\\\"power\\\":0,\\\"cost\\\":[],\\\"shell\\\":0,\\\"maxHealth\\\":1,\\\"color\\\":\\\"W\\\",\\\"capturable\\\":false,\\\"implemented\\\":false,\\\"cardUnlockGroupId\\\":null},{\\\"name\\\":\\\"cow-leg-black\\\",\\\"displayName\\\":\\\"Cow Leg\\\",\\\"text\\\":\\\"When Damaged by a Creature, that Creature takes 1 Damage.\\\\nWhen a Friendly Unit is Destroyed, gain +1 Health.\\\",\\\"power\\\":0,\\\"cost\\\":[],\\\"shell\\\":0,\\\"maxHealth\\\":1,\\\"color\\\":\\\"B\\\",\\\"capturable\\\":false,\\\"implemented\\\":true,\\\"cardUnlockGroupId\\\":null},{\\\"name\\\":\\\"bee-wings\\\",\\\"displayName\\\":\\\"Bee Wings\\\",\\\"text\\\":\\\"When Damaged by an Enemy Creature, instead, take 0 Damage.\\\\nAfter 3 turns, Destroy all Enemy Units.\\\",\\\"power\\\":0,\\\"cost\\\":[],\\\"shell\\\":0,\\\"maxHealth\\\":1,\\\"color\\\":\\\"Y\\\",\\\"capturable\\\":false,\\\"implemented\\\":true,\\\"cardUnlockGroupId\\\":null},{\\\"name\\\":\\\"kero\\\",\\\"displayName\\\":\\\"Kero\\\",\\\"text\\\":\\\"After this Creature takes Damage, increase its Health by its Current Health.\\\\nAfter 5 turns, Destroy all Enemy Units.\\\\n*“I can’t give up nouwu!!!”*\\\",\\\"power\\\":0,\\\"cost\\\":[],\\\"shell\\\":0,\\\"maxHealth\\\":50,\\\"color\\\":null,\\\"capturable\\\":false,\\\"implemented\\\":true,\\\"cardUnlockGroupId\\\":null},{\\\"name\\\":\\\"gostak1\\\",\\\"displayName\\\":\\\"Gostak I\\\",\\\"text\\\":\\\"On start of turn, deal ◆ Damage to every Unprotected Enemy Unit.\\\\n*The enigmatic Gostak confronts you.*\\\",\\\"power\\\":0,\\\"cost\\\":[\\\".\\\",\\\".\\\",\\\".\\\",\\\".\\\",\\\".\\\"],\\\"shell\\\":0,\\\"maxHealth\\\":10,\\\"color\\\":null,\\\"capturable\\\":false,\\\"implemented\\\":true,\\\"cardUnlockGroupId\\\":null},{\\\"name\\\":\\\"gostak2\\\",\\\"displayName\\\":\\\"Gostak II\\\",\\\"text\\\":\\\"On start of turn, deal ♠ Damage to every Unprotected Enemy Unit.\\\\n*The enigmatic Gostak confronts you.*\\\",\\\"power\\\":0,\\\"cost\\\":[\\\".\\\",\\\".\\\",\\\".\\\",\\\".\\\",\\\".\\\"],\\\"shell\\\":0,\\\"maxHealth\\\":10,\\\"color\\\":null,\\\"capturable\\\":false,\\\"implemented\\\":true,\\\"cardUnlockGroupId\\\":null},{\\\"name\\\":\\\"gostak3\\\",\\\"displayName\\\":\\\"Gostak III\\\",\\\"text\\\":\\\"On start of turn, deal §◆♠ Damage to every Unprotected Enemy Unit. \\\\n*The enigmatic Gostak confronts you.*\\\",\\\"power\\\":0,\\\"cost\\\":[\\\".\\\",\\\".\\\",\\\".\\\",\\\".\\\",\\\".\\\"],\\\"shell\\\":0,\\\"maxHealth\\\":10,\\\"color\\\":null,\\\"capturable\\\":false,\\\"implemented\\\":true,\\\"cardUnlockGroupId\\\":null},{\\\"name\\\":\\\"gostak4\\\",\\\"displayName\\\":\\\"Gostak IV\\\",\\\"text\\\":\\\"On start of turn, deal §◆‡ Damage to every Unprotected Enemy Unit.\\\\n*The enigmatic Gostak confronts you.* \\\",\\\"power\\\":0,\\\"cost\\\":[\\\".\\\",\\\".\\\",\\\".\\\",\\\".\\\",\\\".\\\"],\\\"shell\\\":0,\\\"maxHealth\\\":25,\\\"color\\\":null,\\\"capturable\\\":false,\\\"implemented\\\":true,\\\"cardUnlockGroupId\\\":null},{\\\"name\\\":\\\"gostak5\\\",\\\"displayName\\\":\\\"Gostak V\\\",\\\"text\\\":\\\"On start of turn, deal §✠♫ Damage to every Unprotected Enemy Unit. \\\\n*The enigmatic Gostak confronts you.*\\\",\\\"power\\\":0,\\\"cost\\\":[\\\".\\\",\\\".\\\",\\\".\\\",\\\".\\\",\\\".\\\"],\\\"shell\\\":0,\\\"maxHealth\\\":25,\\\"color\\\":null,\\\"capturable\\\":false,\\\"implemented\\\":true,\\\"cardUnlockGroupId\\\":null},{\\\"name\\\":\\\"gostak6\\\",\\\"displayName\\\":\\\"Gostak VI\\\",\\\"text\\\":\\\"On start of turn, deal §‡¶✠♫ Damage to every Unprotected Enemy Unit. \\\\n*The enigmatic Gostak confronts you.*\\\",\\\"power\\\":0,\\\"cost\\\":[\\\".\\\",\\\".\\\",\\\".\\\",\\\".\\\",\\\".\\\"],\\\"shell\\\":0,\\\"maxHealth\\\":25,\\\"color\\\":null,\\\"capturable\\\":false,\\\"implemented\\\":true,\\\"cardUnlockGroupId\\\":null},{\\\"name\\\":\\\"gostak7\\\",\\\"displayName\\\":\\\"Gostak VII\\\",\\\"text\\\":\\\"On start of turn, deal §✠¶♠‡ Damage to every Unprotected Enemy Unit, then deal ¶∮§♠‡ Damage to every Unprotected Enemy Unit. \\\\n*The enigmatic Gostak confronts you for the final time.*\\\",\\\"power\\\":0,\\\"cost\\\":[\\\".\\\",\\\".\\\",\\\".\\\",\\\".\\\",\\\".\\\"],\\\"shell\\\":0,\\\"maxHealth\\\":25,\\\"color\\\":null,\\\"capturable\\\":false,\\\"implemented\\\":true,\\\"cardUnlockGroupId\\\":null},{\\\"name\\\":\\\"apocalyptic-asteroid\\\",\\\"displayName\\\":\\\"Apocalyptic Asteroid\\\",\\\"text\\\":\\\"*If only we had known this was coming!*\\\",\\\"power\\\":0,\\\"cost\\\":[],\\\"shell\\\":0,\\\"maxHealth\\\":85,\\\"color\\\":null,\\\"capturable\\\":false,\\\"implemented\\\":true,\\\"cardUnlockGroupId\\\":null},{\\\"name\\\":\\\"asteroid-fragment\\\",\\\"displayName\\\":\\\"Asteroid Fragment\\\",\\\"text\\\":\\\"*I’m not sure what you thought blasting an asteroid would do.*\\\",\\\"power\\\":0,\\\"cost\\\":[],\\\"shell\\\":0,\\\"maxHealth\\\":25,\\\"color\\\":null,\\\"capturable\\\":false,\\\"implemented\\\":true,\\\"cardUnlockGroupId\\\":null},{\\\"name\\\":\\\"meaty-ore\\\",\\\"displayName\\\":\\\"Meaty Ore\\\",\\\"text\\\":\\\"Cannot Attack.\\\\nWhen this Creature lands, set its Health to equal its Power and remove all its Damage. For each Enemy Unit, deal Damage to this Creature equal to that Unit’s Health, then destroy that Unit.\\\\n*You’ve revealed the meaty ore within the asteroid! It looks like you’ll just have to absorb the impact though...*\\\",\\\"power\\\":123,\\\"cost\\\":[],\\\"shell\\\":0,\\\"maxHealth\\\":12345,\\\"color\\\":null,\\\"capturable\\\":false,\\\"implemented\\\":true,\\\"cardUnlockGroupId\\\":null},{\\\"name\\\":\\\"arvada\\\",\\\"displayName\\\":\\\"Arvada\\\",\\\"text\\\":\\\"Base, Mobile.\\\\n*Formed when Benjamin Wadsworth abandoned nearby Suggs.*\\\",\\\"power\\\":0,\\\"cost\\\":[],\\\"shell\\\":0,\\\"maxHealth\\\":4,\\\"color\\\":null,\\\"capturable\\\":false,\\\"implemented\\\":true,\\\"cardUnlockGroupId\\\":null},{\\\"name\\\":\\\"burlington\\\",\\\"displayName\\\":\\\"Burlington\\\",\\\"text\\\":\\\"Base, Mobile.\\\\n*Ruled by Gerald George who came from Hoffnungstal.*\\\",\\\"power\\\":0,\\\"cost\\\":[],\\\"shell\\\":0,\\\"maxHealth\\\":4,\\\"color\\\":null,\\\"capturable\\\":false,\\\"implemented\\\":true,\\\"cardUnlockGroupId\\\":null},{\\\"name\\\":\\\"centennial\\\",\\\"displayName\\\":\\\"Centennial\\\",\\\"text\\\":\\\"Base, Mobile.\\\\n*Named for the anniversary of signing of the Union Admission of Independence.*\\\",\\\"power\\\":0,\\\"cost\\\":[],\\\"shell\\\":0,\\\"maxHealth\\\":4,\\\"color\\\":null,\\\"capturable\\\":false,\\\"implemented\\\":true,\\\"cardUnlockGroupId\\\":null},{\\\"name\\\":\\\"grover\\\",\\\"displayName\\\":\\\"Grover\\\",\\\"text\\\":\\\"*A red box of a station, named for Grover Cleveland, with the desert running out on every side to the sky line.*\\\",\\\"power\\\":1,\\\"cost\\\":[\\\"G\\\"],\\\"shell\\\":0,\\\"maxHealth\\\":1,\\\"color\\\":\\\"G\\\",\\\"capturable\\\":false,\\\"implemented\\\":true,\\\"cardUnlockGroupId\\\":null},{\\\"name\\\":\\\"cow-butte\\\",\\\"displayName\\\":\\\"Cow Butte\\\",\\\"text\\\":\\\"*By Creston Ordway.*\\\",\\\"power\\\":1,\\\"cost\\\":[\\\"W\\\"],\\\"shell\\\":0,\\\"maxHealth\\\":1,\\\"color\\\":\\\"W\\\",\\\"capturable\\\":false,\\\"implemented\\\":true,\\\"cardUnlockGroupId\\\":null},{\\\"name\\\":\\\"ramsey-peak\\\",\\\"displayName\\\":\\\"Ramsey Peak\\\",\\\"text\\\":\\\"*Overlooks South Goose Fork Cacheberry La Poudre.*\\\",\\\"power\\\":1,\\\"cost\\\":[\\\"Y\\\"],\\\"shell\\\":0,\\\"maxHealth\\\":1,\\\"color\\\":\\\"Y\\\",\\\"capturable\\\":false,\\\"implemented\\\":true,\\\"cardUnlockGroupId\\\":null},{\\\"name\\\":\\\"saddle-mountain\\\",\\\"displayName\\\":\\\"Saddle Mountain\\\",\\\"text\\\":\\\"*Among West Absaroka Elk.*\\\",\\\"power\\\":1,\\\"cost\\\":[\\\"P\\\"],\\\"shell\\\":0,\\\"maxHealth\\\":1,\\\"color\\\":\\\"P\\\",\\\"capturable\\\":false,\\\"implemented\\\":true,\\\"cardUnlockGroupId\\\":null},{\\\"name\\\":\\\"finger-rock\\\",\\\"displayName\\\":\\\"Finger Rock\\\",\\\"text\\\":\\\"*Near Martin Yampa Reservoir.*\\\",\\\"power\\\":1,\\\"cost\\\":[\\\"R\\\"],\\\"shell\\\":0,\\\"maxHealth\\\":1,\\\"color\\\":\\\"R\\\",\\\"capturable\\\":false,\\\"implemented\\\":true,\\\"cardUnlockGroupId\\\":null},{\\\"name\\\":\\\"light-piece\\\",\\\"displayName\\\":\\\"Light Piece\\\",\\\"text\\\":\\\"Can only be Summoned on a Space Touching a non-Empty Space.\\\\nCannot Attack or Create. Immobile.\\\",\\\"power\\\":1,\\\"cost\\\":[],\\\"shell\\\":0,\\\"maxHealth\\\":3,\\\"color\\\":\\\"W\\\",\\\"capturable\\\":false,\\\"implemented\\\":true,\\\"cardUnlockGroupId\\\":null},{\\\"name\\\":\\\"dark-piece\\\",\\\"displayName\\\":\\\"Dark Piece\\\",\\\"text\\\":\\\"Can only be Summoned on a Space Touching a non-Empty Space.\\\\nCannot Attack or Create. Immobile.\\\",\\\"power\\\":1,\\\"cost\\\":[],\\\"shell\\\":0,\\\"maxHealth\\\":3,\\\"color\\\":\\\"B\\\",\\\"capturable\\\":false,\\\"implemented\\\":true,\\\"cardUnlockGroupId\\\":null},{\\\"name\\\":\\\"miracle-growth\\\",\\\"displayName\\\":\\\"Miracle Growth\\\",\\\"text\\\":\\\"Whenever any other Creature is Summoned, double this Creature’s Power, Health, and Damage.\\\\n*What grows quickly can also die quickly.*\\\",\\\"power\\\":1,\\\"cost\\\":[\\\"P\\\",\\\"P\\\",\\\"P\\\"],\\\"shell\\\":0,\\\"maxHealth\\\":2,\\\"color\\\":\\\"P\\\",\\\"capturable\\\":false,\\\"implemented\\\":true,\\\"cardUnlockGroupId\\\":null},{\\\"name\\\":\\\"wild-weed\\\",\\\"displayName\\\":\\\"Wild Weed\\\",\\\"text\\\":\\\"Whenever any other Enemy Creature is Summoned, Summon as many copies of Wild Weed as that Creature’s Power.\\\\n*Well... I swear there was only one when I last checked.*\\\",\\\"power\\\":2,\\\"cost\\\":[\\\"P\\\",\\\"P\\\",\\\"P\\\"],\\\"shell\\\":0,\\\"maxHealth\\\":5,\\\"color\\\":\\\"P\\\",\\\"capturable\\\":false,\\\"implemented\\\":true,\\\"cardUnlockGroupId\\\":null},{\\\"name\\\":\\\"leech-seed\\\",\\\"displayName\\\":\\\"Leech Seed\\\",\\\"text\\\":\\\"On start of turn, gain Health equal to the sum of every Creature’s Power.\\\\n*You feel your energy sapped away.*\\\",\\\"power\\\":1,\\\"cost\\\":[\\\"P\\\",\\\"P\\\",\\\"P\\\"],\\\"shell\\\":0,\\\"maxHealth\\\":2,\\\"color\\\":\\\"P\\\",\\\"capturable\\\":false,\\\"implemented\\\":true,\\\"cardUnlockGroupId\\\":null},{\\\"name\\\":\\\"venus-bee-trap\\\",\\\"displayName\\\":\\\"Venus Bee Trap\\\",\\\"text\\\":\\\"On start of turn, gain +3 Health.\\\\nWhenever any other Creature dies, increase this Creature’s Power and Health by 10000.\\\\n*Don’t feed the wildlife!*\\\",\\\"power\\\":2,\\\"cost\\\":[\\\"P\\\",\\\"P\\\",\\\"P\\\"],\\\"shell\\\":0,\\\"maxHealth\\\":2,\\\"color\\\":\\\"P\\\",\\\"capturable\\\":false,\\\"implemented\\\":true,\\\"cardUnlockGroupId\\\":null},{\\\"name\\\":\\\"spirit-of-the-vines\\\",\\\"displayName\\\":\\\"Spirit of the Vines\\\",\\\"text\\\":\\\"On start of turn, gain +2 Health.\\\\nWhenever any Friendly Creature dies, increase this Creature’s Power and Health by 10000.\\\\n*...you are unwelcome here... 🥀*\\\",\\\"power\\\":0,\\\"cost\\\":[\\\"P\\\",\\\"P\\\",\\\"P\\\"],\\\"shell\\\":0,\\\"maxHealth\\\":3,\\\"color\\\":\\\"P\\\",\\\"capturable\\\":false,\\\"implemented\\\":true,\\\"cardUnlockGroupId\\\":null},{\\\"name\\\":\\\"overgrown-vines\\\",\\\"displayName\\\":\\\"Overgrown Vines\\\",\\\"text\\\":\\\"Whenever any other Creature is Summoned, it becomes Immobile.\\\\n*A choking thicket of vines blocks the way.*\\\",\\\"power\\\":3,\\\"cost\\\":[\\\"P\\\",\\\"P\\\",\\\"P\\\"],\\\"shell\\\":0,\\\"maxHealth\\\":25,\\\"color\\\":\\\"P\\\",\\\"capturable\\\":false,\\\"implemented\\\":true,\\\"cardUnlockGroupId\\\":null},{\\\"name\\\":\\\"hog-on-a-log-on-a\\\",\\\"displayName\\\":\\\"Hog on a Log on a...\\\",\\\"text\\\":\\\"This Creature can only Attack Units in its column.\\\\nWhen Destroyed, Summon a Log on a Hog on a... in this Creature’s Space.\\\\n*Has science gone too far?*\\\",\\\"power\\\":2,\\\"cost\\\":[\\\"R\\\",\\\"P\\\",\\\"R\\\",\\\"P\\\",\\\"R\\\"],\\\"shell\\\":0,\\\"maxHealth\\\":1,\\\"color\\\":\\\"R\\\",\\\"capturable\\\":false,\\\"implemented\\\":true,\\\"cardUnlockGroupId\\\":null},{\\\"name\\\":\\\"log-on-a-hog-on-a\\\",\\\"displayName\\\":\\\"Log on a Hog on a...\\\",\\\"text\\\":\\\"When Destroyed, Summon a Hog on a Log on a... in this Creature’s Space.\\\\n*Gone too far has science!*\\\",\\\"power\\\":1,\\\"cost\\\":[\\\"P\\\",\\\"R\\\",\\\"P\\\",\\\"R\\\",\\\"P\\\"],\\\"shell\\\":0,\\\"maxHealth\\\":2,\\\"color\\\":\\\"P\\\",\\\"capturable\\\":false,\\\"implemented\\\":true,\\\"cardUnlockGroupId\\\":null},{\\\"name\\\":\\\"hog-factory\\\",\\\"displayName\\\":\\\"Hog Factory\\\",\\\"text\\\":\\\"Base.\\\",\\\"power\\\":0,\\\"cost\\\":[\\\"R\\\"],\\\"shell\\\":0,\\\"maxHealth\\\":4,\\\"color\\\":\\\"R\\\",\\\"capturable\\\":false,\\\"implemented\\\":true,\\\"cardUnlockGroupId\\\":null},{\\\"name\\\":\\\"log-factory\\\",\\\"displayName\\\":\\\"Log Factory\\\",\\\"text\\\":\\\"Base.\\\",\\\"power\\\":0,\\\"cost\\\":[\\\"P\\\"],\\\"shell\\\":0,\\\"maxHealth\\\":4,\\\"color\\\":\\\"P\\\",\\\"capturable\\\":false,\\\"implemented\\\":true,\\\"cardUnlockGroupId\\\":null},{\\\"name\\\":\\\"hog-factorytory\\\",\\\"displayName\\\":\\\"Hog Factorytory\\\",\\\"text\\\":\\\"Base.\\\",\\\"power\\\":0,\\\"cost\\\":[\\\"R\\\"],\\\"shell\\\":0,\\\"maxHealth\\\":4,\\\"color\\\":\\\"R\\\",\\\"capturable\\\":false,\\\"implemented\\\":true,\\\"cardUnlockGroupId\\\":null},{\\\"name\\\":\\\"hog-factorytorytory\\\",\\\"displayName\\\":\\\"Hog Factorytorytory\\\",\\\"text\\\":\\\"Base.\\\",\\\"power\\\":0,\\\"cost\\\":[\\\"R\\\"],\\\"shell\\\":0,\\\"maxHealth\\\":4,\\\"color\\\":\\\"R\\\",\\\"capturable\\\":false,\\\"implemented\\\":true,\\\"cardUnlockGroupId\\\":null},{\\\"name\\\":\\\"log-factorytory\\\",\\\"displayName\\\":\\\"Log Factorytory\\\",\\\"text\\\":\\\"Base.\\\",\\\"power\\\":0,\\\"cost\\\":[\\\"P\\\"],\\\"shell\\\":0,\\\"maxHealth\\\":4,\\\"color\\\":\\\"P\\\",\\\"capturable\\\":false,\\\"implemented\\\":true,\\\"cardUnlockGroupId\\\":null},{\\\"name\\\":\\\"log-factorytorytory\\\",\\\"displayName\\\":\\\"Log Factorytorytory\\\",\\\"text\\\":\\\"Base.\\\",\\\"power\\\":0,\\\"cost\\\":[\\\"P\\\"],\\\"shell\\\":0,\\\"maxHealth\\\":4,\\\"color\\\":\\\"P\\\",\\\"capturable\\\":false,\\\"implemented\\\":true,\\\"cardUnlockGroupId\\\":null},{\\\"name\\\":\\\"stacktory\\\",\\\"displayName\\\":\\\"Stacktory\\\",\\\"text\\\":\\\"Base.\\\",\\\"power\\\":0,\\\"cost\\\":[],\\\"shell\\\":0,\\\"maxHealth\\\":4,\\\"color\\\":null,\\\"capturable\\\":false,\\\"implemented\\\":true,\\\"cardUnlockGroupId\\\":null},{\\\"name\\\":\\\"stackstack-tory\\\",\\\"displayName\\\":\\\"Stackstack...tory\\\",\\\"text\\\":\\\"Base.\\\\nStart of turn: Summon a Hog on a Log on a... on an empty Friendly space on this Base’s column.\\\",\\\"power\\\":0,\\\"cost\\\":[],\\\"shell\\\":0,\\\"maxHealth\\\":10,\\\"color\\\":null,\\\"capturable\\\":false,\\\"implemented\\\":true,\\\"cardUnlockGroupId\\\":null},{\\\"name\\\":\\\"pepper-rich-farm\\\",\\\"displayName\\\":\\\"Pepper Rich Farm\\\",\\\"text\\\":\\\"Base.\\\\nOn end of turn, all Creatures in this column gain +1 Power.\\\\n*A handful of barns and silos comprise this peaceful farm.*\\\",\\\"power\\\":0,\\\"cost\\\":[\\\"R\\\"],\\\"shell\\\":0,\\\"maxHealth\\\":16,\\\"color\\\":\\\"R\\\",\\\"capturable\\\":false,\\\"implemented\\\":true,\\\"cardUnlockGroupId\\\":null},{\\\"name\\\":\\\"train-boar-ding-platform\\\",\\\"displayName\\\":\\\"Train Boar-ding Platform\\\",\\\"text\\\":\\\"Base.\\\\nAfter a Friendly {R} Creature Moves to a Friendly Space, it Readies.\\\\n*Public transportation is a social good that all boars can share.*\\\",\\\"power\\\":0,\\\"cost\\\":[\\\"R\\\"],\\\"shell\\\":0,\\\"maxHealth\\\":16,\\\"color\\\":\\\"R\\\",\\\"capturable\\\":false,\\\"implemented\\\":true,\\\"cardUnlockGroupId\\\":null},{\\\"name\\\":\\\"robot\\\",\\\"displayName\\\":\\\"Robot\\\",\\\"text\\\":\\\"Cannot Attack normally or Create. Immobile.\\\\nOn end of turn, Attack the nearest Enemy Unit in this column.\\\",\\\"power\\\":2,\\\"cost\\\":[\\\".\\\",\\\".\\\"],\\\"shell\\\":0,\\\"maxHealth\\\":3,\\\"color\\\":null,\\\"capturable\\\":false,\\\"implemented\\\":true,\\\"cardUnlockGroupId\\\":null}]\"","import allCardsJson from \"engine/cards/all-cards.json?raw\";\nimport { CardData } from \"engine/types/card-data\";\n\nconst ALL_CARDS = JSON.parse(allCardsJson) as ReadonlyArray<CardData>;\nexport default ALL_CARDS;\n","export default \"[{\\\"masteryId\\\":\\\"m1\\\",\\\"displayName\\\":\\\"Reputation Boost\\\",\\\"order\\\":1,\\\"x\\\":5,\\\"y\\\":2,\\\"effectText\\\":\\\"Your team name gets a special boost whenever it is displayed.\\\"},{\\\"masteryId\\\":\\\"m2\\\",\\\"displayName\\\":\\\"Station Master\\\",\\\"order\\\":2,\\\"x\\\":8,\\\"y\\\":4,\\\"effectText\\\":\\\"You may preview the top card of your draw pile at any time during a battle by mousing over it.\\\"},{\\\"masteryId\\\":\\\"m3\\\",\\\"displayName\\\":\\\"Cardinal Director\\\",\\\"order\\\":3,\\\"x\\\":13,\\\"y\\\":6,\\\"effectText\\\":\\\"As part of deckbuilding, you get to select one Priority Card, to be moved to the top of your draw pile at the start of each battle.\\\"},{\\\"masteryId\\\":\\\"m4\\\",\\\"displayName\\\":\\\"Spark of Inspiration\\\",\\\"order\\\":4,\\\"x\\\":16,\\\"y\\\":9,\\\"effectText\\\":\\\"You may join a Faction.\\\"},{\\\"masteryId\\\":\\\"m5\\\",\\\"displayName\\\":\\\"Resourceful\\\",\\\"order\\\":5,\\\"x\\\":21,\\\"y\\\":11,\\\"effectText\\\":\\\"You may draw a card for {..} at any time during a battle.\\\"},{\\\"masteryId\\\":\\\"m6\\\",\\\"displayName\\\":\\\"Erase Pain\\\",\\\"order\\\":6,\\\"x\\\":7,\\\"y\\\":13,\\\"effectText\\\":\\\"This mastery doesn't do anything, but not having it will deny you the sense of completion.\\\"},{\\\"masteryId\\\":\\\"m7\\\",\\\"displayName\\\":\\\"New Field\\\",\\\"order\\\":7,\\\"x\\\":14,\\\"y\\\":15,\\\"effectText\\\":\\\"Gain access to the PvP arena.\\\"},{\\\"masteryId\\\":\\\"m8\\\",\\\"displayName\\\":\\\"Crazed Frenzy\\\",\\\"order\\\":8,\\\"x\\\":2,\\\"y\\\":17,\\\"effectText\\\":\\\"Enable Speedrun Mode.\\\"},{\\\"masteryId\\\":\\\"m9\\\",\\\"displayName\\\":\\\"Rumor Has It...\\\",\\\"order\\\":9,\\\"x\\\":10,\\\"y\\\":22,\\\"effectText\\\":\\\"See solve and unlock counts for each puzzle.\\\"}]\"","import allMasteriesJson from \"engine/puzzles/all-masteries.json?raw\";\nimport { MasteryData } from \"engine/puzzles/mastery-data\";\n\nconst ALL_MASTERIES = JSON.parse(\n  allMasteriesJson\n) as ReadonlyArray<MasteryData>;\nexport default ALL_MASTERIES;\n","export default \"[{\\\"id\\\":\\\"intro-start\\\",\\\"dialogue\\\":\\\"⚠️ Warning ⚠️\\\\nCutscenes are synced across your team. Gather your teammates here before proceeding!\\\\n(Don’t worry if someone can’t make it — you’ll always be able to replay a cutscene later.)\\\",\\\"dialogOptions\\\":[\\\"Ready!\\\"],\\\"showMask\\\":true,\\\"blocking\\\":true,\\\"showNext\\\":true,\\\"useCutsceneUI\\\":true,\\\"hideGame\\\":true},{\\\"id\\\":\\\"keyframe-1\\\",\\\"dialogue\\\":\\\"Your treasure map has proven true! All that work deciphering esoteric codes and cryptic clues has finally paid off!\\\",\\\"dialogOptions\\\":[\\\"Open the chest already!\\\"],\\\"showMask\\\":true,\\\"blocking\\\":true,\\\"showNext\\\":true,\\\"useCutsceneUI\\\":true,\\\"hideGame\\\":true,\\\"image\\\":\\\"treasure-chest.png\\\"},{\\\"id\\\":\\\"keyframe-2\\\",\\\"dialogOptions\\\":[\\\"!!!\\\"],\\\"showMask\\\":true,\\\"blocking\\\":true,\\\"showNext\\\":true,\\\"useCutsceneUI\\\":true,\\\"hideGame\\\":true,\\\"image\\\":\\\"kaboom.png\\\"},{\\\"id\\\":\\\"keyframe-3\\\",\\\"dialogOptions\\\":[\\\"...?!\\\"],\\\"showMask\\\":true,\\\"blocking\\\":true,\\\"showNext\\\":true,\\\"useCutsceneUI\\\":true,\\\"hideGame\\\":true,\\\"image\\\":\\\"explosion.png\\\"},{\\\"id\\\":\\\"keyframe-4\\\",\\\"dialogue\\\":\\\"Nice ta meetcha! I’m KERO, a magic carp!\\\",\\\"speaker\\\":\\\"kero\\\",\\\"dialogOptions\\\":[\\\"What were you doing in that box?\\\"],\\\"showMask\\\":true,\\\"blocking\\\":true,\\\"showNext\\\":true,\\\"useCutsceneUI\\\":true,\\\"hideGame\\\":true,\\\"image\\\":\\\"kero.png\\\"},{\\\"id\\\":\\\"keyframe-5\\\",\\\"dialogue\\\":\\\"I’m guarding it! It must never be opened.\\\\nA great evil is trapped within!\\\",\\\"speaker\\\":\\\"kero\\\",\\\"dialogOptions\\\":[\\\"Um\\\"],\\\"showMask\\\":true,\\\"blocking\\\":true,\\\"showNext\\\":true,\\\"useCutsceneUI\\\":true,\\\"hideGame\\\":true,\\\"image\\\":\\\"kero.png\\\"},{\\\"id\\\":\\\"keyframe-6\\\",\\\"dialogue\\\":\\\"OwO ...you opened it didn’t you.\\\",\\\"speaker\\\":\\\"angry_kero\\\",\\\"dialogOptions\\\":[\\\"You weren’t guarding it very well.\\\",\\\"Maybe you shouldn’t have sealed it in a treasure chest.\\\"],\\\"showMask\\\":true,\\\"blocking\\\":true,\\\"showNext\\\":true,\\\"useCutsceneUI\\\":true,\\\"hideGame\\\":true,\\\"image\\\":\\\"angry-kero.png\\\"},{\\\"id\\\":\\\"keyframe-7\\\",\\\"dialogue\\\":\\\"Now you’ve done it!\\\\nCHAOS will descend upon the world!\\\",\\\"speaker\\\":\\\"angry_kero\\\",\\\"dialogOptions\\\":[\\\"Okay, okay, what can we do about it?\\\"],\\\"showMask\\\":true,\\\"blocking\\\":true,\\\"showNext\\\":true,\\\"useCutsceneUI\\\":true,\\\"hideGame\\\":true,\\\"image\\\":\\\"angry-kero.png\\\"},{\\\"id\\\":\\\"keyframe-8\\\",\\\"endCutscene\\\":true,\\\"endGame\\\":true,\\\"dialogue\\\":\\\"Take this uwuand! It’ll help us transform the monsters of this cave into friends, using the POWER OF UWU!!!\\\",\\\"speaker\\\":\\\"kero\\\",\\\"showMask\\\":true,\\\"blocking\\\":true,\\\"showNext\\\":true,\\\"useCutsceneUI\\\":true,\\\"hideGame\\\":true,\\\"image\\\":\\\"uwuand.png\\\"},{\\\"id\\\":\\\"tutorial1-start-1\\\",\\\"dialogue\\\":\\\"Look! A New Boarn has been corrupted by the \\\\nCHAOS! We’ll save it with a CARD BATTLE!\\\",\\\"speaker\\\":\\\"enemy\\\",\\\"selector\\\":\\\"ai_battler\\\",\\\"dialogOptions\\\":[\\\"Let’s do it!\\\"],\\\"blocking\\\":true,\\\"showNext\\\":true},{\\\"id\\\":\\\"keyframe-10\\\",\\\"dialogue\\\":\\\"Here’s a friend I made earlier!\\\\nHis name is Yoshi. Yoshisaur Munchakoopas!\\\",\\\"speaker\\\":\\\"kero\\\",\\\"selectorPermanent\\\":\\\"yoshisaur-munchakoopas\\\",\\\"dialogOptions\\\":[\\\"Wait, Yoshi? Do you mean-\\\"],\\\"showMask\\\":true,\\\"blocking\\\":true,\\\"showNext\\\":true},{\\\"id\\\":\\\"tutorial1-end-turn-1\\\",\\\"dialogue\\\":\\\"No time for questions!\\\\nWe can’t do anything right now, so hit End Turn.\\\",\\\"speaker\\\":\\\"kero\\\",\\\"selector\\\":\\\"end_turn\\\",\\\"showMask\\\":true},{\\\"id\\\":\\\"tutorial1-start-2\\\",\\\"dialogue\\\":\\\"Oh no! New Boarn attacked Yoshi!\\\",\\\"speaker\\\":\\\"enemy\\\",\\\"selector\\\":\\\"ai_battler\\\",\\\"blocking\\\":true,\\\"showNext\\\":true},{\\\"id\\\":\\\"keyframe-13\\\",\\\"dialogue\\\":\\\"This is New Boarn’s Power, 3.\\\\nWhen a Creature Attacks, it deals damage equal to its Power.\\\",\\\"speaker\\\":\\\"kero\\\",\\\"selector\\\":\\\"power\\\",\\\"selectorPermanent\\\":\\\"new-boarn\\\",\\\"showMask\\\":true,\\\"blocking\\\":true,\\\"showNext\\\":true},{\\\"id\\\":\\\"keyframe-14\\\",\\\"dialogue\\\":\\\"This is Yoshi’s Health. It was 4, now it’s 1.\\\\nIf his Health hits 0, he’ll get Destroyed!\\\",\\\"speaker\\\":\\\"kero\\\",\\\"selector\\\":\\\"health\\\",\\\"selectorPermanent\\\":\\\"yoshisaur-munchakoopas\\\",\\\"dialogOptions\\\":[\\\"We can’t let that happen!\\\"],\\\"showMask\\\":true,\\\"blocking\\\":true,\\\"showNext\\\":true},{\\\"id\\\":\\\"keyframe-15\\\",\\\"dialogue\\\":\\\"No worries! I’s our turn now. Yoshi is ready to Act!\\\",\\\"speaker\\\":\\\"enemy\\\",\\\"selector\\\":\\\"ai_battler\\\",\\\"dialogOptions\\\":[\\\"Yeah! Yoshi, use, uh, ...Swallow?\\\"],\\\"blocking\\\":true,\\\"showNext\\\":true},{\\\"id\\\":\\\"tutorial1-before-give-food\\\",\\\"dialogue\\\":\\\"Not so fast! Most Actions in battle cost Food,\\\\nbut it looks like you don’t have any yet. $(ﾟ ヘﾟ)$\\\",\\\"speaker\\\":\\\"enemy\\\",\\\"selector\\\":\\\"ai_battler\\\",\\\"dialogOptions\\\":[\\\"(ﾟ ヘﾟ)\\\"],\\\"blocking\\\":true,\\\"showNext\\\":true},{\\\"id\\\":\\\"keyframe-17\\\",\\\"dialogue\\\":\\\"Here, take this Egg!\\\",\\\"speaker\\\":\\\"kero\\\",\\\"selector\\\":\\\"gems\\\",\\\"dialogOptions\\\":[\\\"Thanks!\\\",\\\"Wait, where’d this egg come fr-\\\"],\\\"showMask\\\":true,\\\"blocking\\\":true,\\\"showNext\\\":true},{\\\"id\\\":\\\"keyframe-18\\\",\\\"dialogue\\\":\\\"We’ve gotta use that Egg right away!\\\\nFood doesn’t last longer than a single turn.\\\\nQuick, select Yoshi!\\\",\\\"speaker\\\":\\\"enemy\\\",\\\"selector\\\":\\\"ai_battler\\\",\\\"nextSelectorPermanent\\\":\\\"yoshisaur-munchakoopas\\\",\\\"blocking\\\":true,\\\"showNext\\\":false},{\\\"id\\\":\\\"keyframe-19\\\",\\\"dialogue\\\":\\\"Now if you mouse over New Boarn to Attack it,\\\\nyou’ll see that Attacking will use up that Egg.\\\\nClick on New Boarn to Attack!\\\",\\\"speaker\\\":\\\"enemy\\\",\\\"selector\\\":\\\"ai_battler\\\",\\\"dialogOptions\\\":[\\\"You want me to attack a newboarn?\\\",\\\"Can’t we find a peaceful resolution?\\\"]},{\\\"id\\\":\\\"tutorial1-attack\\\",\\\"dialogue\\\":\\\"Don’t worry! After we beat the CHAOS all out of it, we’ll use the uwuand to transform it into a FRIEND!\\\",\\\"speaker\\\":\\\"enemy\\\",\\\"selector\\\":\\\"ai_battler\\\",\\\"dialogOptions\\\":[\\\"...Seems legit.\\\",\\\"The Power of Friendship!\\\"]},{\\\"id\\\":\\\"tutorial1-start-3\\\",\\\"dialogue\\\":\\\"You did it! You Destroyed New Boarn!\\\\nNow use the uwuand!!\\\",\\\"speaker\\\":\\\"kero\\\",\\\"dialogOptions\\\":[\\\"✨\\\"],\\\"showMask\\\":true,\\\"blocking\\\":true,\\\"showNext\\\":true,\\\"useCutsceneUI\\\":true,\\\"image\\\":\\\"uwuand.png\\\"},{\\\"id\\\":\\\"tutorial1-card\\\",\\\"dialogue\\\":\\\"New Boarn is now our friend!!!!! $٩( ˃▿˂ )۶$\\\\nThis card will let you Summon it to help you in the future!\\\",\\\"speaker\\\":\\\"kero\\\",\\\"showMask\\\":true,\\\"blocking\\\":true,\\\"showNext\\\":true,\\\"useCutsceneUI\\\":true},{\\\"id\\\":\\\"keyframe-23\\\",\\\"dialogue\\\":\\\"There are more battles ahead, but before we move on,\\\\nI’ve gotta tell you about the Instancer!\\\",\\\"speaker\\\":\\\"kero\\\",\\\"dialogOptions\\\":[\\\"What’s the Instancer?\\\"],\\\"showMask\\\":true,\\\"blocking\\\":true,\\\"showNext\\\":true,\\\"useCutsceneUI\\\":true,\\\"image\\\":\\\"kero.png\\\"},{\\\"id\\\":\\\"keyframe-24\\\",\\\"dialogue\\\":\\\"It’s a web of parallel timelines maintained by a mysterious coven of spiders!\\\\nYour team can use it to experiment with different strategies for the same battle at the same time.\\\\nYou can find it on the Map, or jump straight to it from the navbar!\\\",\\\"speaker\\\":\\\"kero\\\",\\\"dialogOptions\\\":[\\\"I always suspected spiders could do that sort of thing.\\\"],\\\"showMask\\\":true,\\\"blocking\\\":true,\\\"showNext\\\":true,\\\"useCutsceneUI\\\":true,\\\"image\\\":\\\"kero.png\\\"},{\\\"id\\\":\\\"keyframe-25\\\",\\\"endCutscene\\\":true,\\\"endGame\\\":true,\\\"dialogue\\\":\\\"I think battles are more fun when everyone’s together though...\\\\n$(〃´𓎟`〃)$ but it’s up to ya if you wanna use it!\\\",\\\"speaker\\\":\\\"kero\\\",\\\"showMask\\\":true,\\\"blocking\\\":true,\\\"showNext\\\":true,\\\"useCutsceneUI\\\":true,\\\"image\\\":\\\"kero.png\\\"},{\\\"id\\\":\\\"tutorial2-start-1\\\",\\\"dialogue\\\":\\\"It’s time for our next battle! \\\\nI hear that swine camp around here.\\\\nWe need to Destroy their Camp!\\\",\\\"speaker\\\":\\\"enemy\\\",\\\"selector\\\":\\\"ai_battler\\\",\\\"dialogOptions\\\":[\\\"Why?\\\"],\\\"blocking\\\":true,\\\"showNext\\\":true},{\\\"id\\\":\\\"tutorial2-before-summon\\\",\\\"dialogue\\\":\\\"We win battles by Destroying all Enemy Bases!\\\\nOnly then can we use the power of UWU to recruit more friends!\\\",\\\"speaker\\\":\\\"enemy\\\",\\\"selector\\\":\\\"ai_battler\\\",\\\"dialogOptions\\\":[\\\"That makes sense.\\\",\\\"That makes no sense.\\\"],\\\"blocking\\\":true,\\\"showNext\\\":true},{\\\"id\\\":\\\"tutorial2-end-turn-1\\\",\\\"dialogue\\\":\\\"Here, I Summoned New Boarn from earlier!\\\\nWe only just Summoned it, so it’s not Ready to Act yet.\\\\nClick End Turn to start the next Turn, and it’ll be Ready!\\\",\\\"speaker\\\":\\\"enemy\\\",\\\"selector\\\":\\\"ai_battler\\\"},{\\\"id\\\":\\\"tutorial2-start-2\\\",\\\"dialogue\\\":\\\"Your Camp made a Pie!\\\\nA Camp makes one Pie at the start of each turn.\\\",\\\"speaker\\\":\\\"kero\\\",\\\"selector\\\":\\\"gems\\\",\\\"dialogOptions\\\":[\\\"Yum!\\\"],\\\"blocking\\\":true,\\\"showNext\\\":true},{\\\"id\\\":\\\"tutorial2-attack-1\\\",\\\"dialogue\\\":\\\"Also, New Boarn can Act now!\\\\nUse it to Attack the Camp.\\\",\\\"speaker\\\":\\\"enemy\\\",\\\"selector\\\":\\\"ai_battler\\\",\\\"dialogOptions\\\":[\\\"Go ham, little sow!\\\",\\\"Sow discord, little ham!\\\"]},{\\\"id\\\":\\\"tutorial2-end-turn-2\\\",\\\"dialogue\\\":\\\"After a Creature Acts, it becomes tired and won’t be\\\\nReady until the next turn.\\\\nLet’s end our turn now. We’ll Attack again next turn!\\\",\\\"speaker\\\":\\\"enemy\\\",\\\"selector\\\":\\\"ai_battler\\\"},{\\\"id\\\":\\\"tutorial2-start-3\\\",\\\"dialogue\\\":\\\"Oh no! The swine noticed us!\\\",\\\"speaker\\\":\\\"enemy\\\",\\\"selector\\\":\\\"ai_battler\\\",\\\"blocking\\\":true,\\\"showNext\\\":true},{\\\"id\\\":\\\"keyframe-33\\\",\\\"dialogue\\\":\\\"No matter. They’re just Creatures.$ ╮(╯∀╰)╭$\\\\nWe only need to Destroy their Camp to\\\\nactivate the power of UWU!\\\\nGo ahead and Attack their Camp!\\\",\\\"speaker\\\":\\\"enemy\\\",\\\"selector\\\":\\\"ai_battler\\\",\\\"nextSelectorPermanent\\\":\\\"new-boarn\\\",\\\"showNext\\\":false},{\\\"id\\\":\\\"tutorial2-attack-2\\\",\\\"dialogue\\\":\\\"Huh, the Camp is grayed out. That means we can’t Attack it.\\\\n...Oh right, it’s Protected! $(ノ_<。)$\\\\nThat’s what it’ll say if you mouse over it.\\\\nA Unit is Protected if there’s another Unit in front of it.\\\",\\\"speaker\\\":\\\"enemy\\\",\\\"selector\\\":\\\"ai_battler\\\",\\\"blocking\\\":true,\\\"showNext\\\":true},{\\\"id\\\":\\\"tutorial2-free-play\\\",\\\"dialogue\\\":\\\"I’m sure you’ll find a way to win anyway!\\\\nGo you! uwu\\\",\\\"speaker\\\":\\\"enemy\\\",\\\"selector\\\":\\\"ai_battler\\\"},{\\\"id\\\":\\\"tutorial2-start-4\\\",\\\"dialogue\\\":\\\"Hooray! We befriended Hog and Hamlet!\\\",\\\"showMask\\\":true,\\\"blocking\\\":true,\\\"showNext\\\":true,\\\"useCutsceneUI\\\":true,\\\"image\\\":\\\"kero.png\\\"},{\\\"id\\\":\\\"keyframe-37\\\",\\\"dialogue\\\":\\\"New Boarn, Hog, and Hamlet all belong to\\\\nthe same Faction: the Boar Faction.\\\\nBoars are known for their delicious Boarries.\\\\nYou should try them sometime! $(*´ڡ`●)$\\\",\\\"showMask\\\":true,\\\"blocking\\\":true,\\\"showNext\\\":true,\\\"useCutsceneUI\\\":true,\\\"image\\\":\\\"boars.png\\\"},{\\\"id\\\":\\\"keyframe-38\\\",\\\"dialogue\\\":\\\"Yoshi belongs to a different Faction: the Dino Faction!\\\\nDinos are known for their Eggs!\\\",\\\"showMask\\\":true,\\\"blocking\\\":true,\\\"showNext\\\":true,\\\"useCutsceneUI\\\":true,\\\"image\\\":\\\"dinos.png\\\"},{\\\"id\\\":\\\"keyframe-39\\\",\\\"dialogue\\\":\\\"There’s also the Bee, Dryad, and Cow Factions.\\\\nEach Faction produces a different kind of Food.\\\",\\\"showMask\\\":true,\\\"blocking\\\":true,\\\"showNext\\\":true,\\\"useCutsceneUI\\\":true,\\\"image\\\":\\\"other-factions.png\\\"},{\\\"id\\\":\\\"keyframe-40\\\",\\\"dialogue\\\":\\\"You can tell what Faction a Creature is by looking at their color,\\\\nor the Food on top of their Card!\\\",\\\"showMask\\\":true,\\\"blocking\\\":true,\\\"showNext\\\":true,\\\"useCutsceneUI\\\":true,\\\"image\\\":\\\"kero.png\\\"},{\\\"id\\\":\\\"keyframe-41\\\",\\\"dialogue\\\":\\\"Attacking with a Creature always costs one Food.\\\\nBut Creatures can only gain energy from eating their own Faction’s Food. $(-_-* )$\\\\nSo New Boarn will Attack if you give it a Boarry, but not Eggs or Butter, for example.\\\",\\\"showMask\\\":true,\\\"blocking\\\":true,\\\"showNext\\\":true,\\\"useCutsceneUI\\\":true,\\\"image\\\":\\\"food-example.png\\\"},{\\\"id\\\":\\\"keyframe-42\\\",\\\"endCutscene\\\":true,\\\"endGame\\\":true,\\\"dialogue\\\":\\\"Eggs, Honey, Butter, Flower, Whipped Cream, and Boarries. With their powers combined, they make Pie!\\\\nPie can substitute for any Food. Everyone loves Pie!\\\\nThat’s why we could get New Boarn to attack for a Pie just now!\\\",\\\"dialogOptions\\\":[\\\"Yoshi! I choose you!\\\"],\\\"showMask\\\":true,\\\"blocking\\\":true,\\\"showNext\\\":true,\\\"useCutsceneUI\\\":true,\\\"image\\\":\\\"pie.png\\\"},{\\\"id\\\":\\\"tutorial3-start-1\\\",\\\"dialogue\\\":\\\"We’re out in the open now!\\\\nTwo Beeowulfs? No worries, I’m sure Yoshi can handle this!\\\",\\\"speaker\\\":\\\"enemy\\\",\\\"selector\\\":\\\"ai_battler\\\"},{\\\"id\\\":\\\"tutorial3-lose-1\\\",\\\"dialogue\\\":\\\"We lost??? Righto, I forgot to mention...\\\\nCreatures can Attack down any column!\\\",\\\"speaker\\\":\\\"enemy\\\",\\\"selector\\\":\\\"ai_battler\\\",\\\"dialogOptions\\\":[\\\"Can we block the Attacks somehow?\\\"],\\\"blocking\\\":true,\\\"showNext\\\":true},{\\\"id\\\":\\\"tutorial3-lose-1-other\\\",\\\"endGameUnsolved\\\":true,\\\"dialogue\\\":\\\"We can! For that, we’ll need to learn a new Action — Move!\\\\nNext time, select Yoshi, then the Space to his left.\\\\nHe’ll Move there and Protect our Camp!\\\\nLet’s try this battle again by Restarting it.\\\",\\\"speaker\\\":\\\"enemy\\\",\\\"selector\\\":\\\"ai_battler\\\",\\\"blocking\\\":true,\\\"showNext\\\":true},{\\\"id\\\":\\\"tutorial3-lose-1-wrong-move\\\",\\\"endGameUnsolved\\\":true,\\\"dialogue\\\":\\\"We can! For that, we’ll need to learn a new Action — Move!\\\\nI see you’ve already given it a try.\\\\nNext time, move Yoshi to the left instead!\\\\nHe’ll Move there and Protect our Camp!\\\\nLet’s try this battle again by Restarting it.\\\",\\\"speaker\\\":\\\"enemy\\\",\\\"selector\\\":\\\"ai_battler\\\",\\\"blocking\\\":true,\\\"showNext\\\":true},{\\\"id\\\":\\\"tutorial3-after-move\\\",\\\"dialogue\\\":\\\"Nice Move! Even though the Beeowulfs can attack any column,\\\\nYoshi Protects everything behind him! $ᕙ(  •̀ ᗜ •́  )ᕗ$\\\",\\\"speaker\\\":\\\"enemy\\\",\\\"selector\\\":\\\"ai_battler\\\",\\\"blocking\\\":true,\\\"showNext\\\":true},{\\\"id\\\":\\\"keyframe-48\\\",\\\"dialogue\\\":\\\"Unlike Attacking, Moving doesn’t cost Food.\\\\nBut it still counts as an Action, so Yoshi won’t be Ready to Act\\\\nagain until our next turn. Time to End Turn!\\\",\\\"speaker\\\":\\\"enemy\\\",\\\"selector\\\":\\\"ai_battler\\\"},{\\\"id\\\":\\\"tutorial3-start-2\\\",\\\"dialogue\\\":\\\"Alright, you’ve got this!\\\",\\\"speaker\\\":\\\"enemy\\\",\\\"selector\\\":\\\"ai_battler\\\"},{\\\"id\\\":\\\"tutorial3-start-3\\\",\\\"dialogue\\\":\\\"That was great! We could do this ’til the cows come home!\\\\nBut wait, something’s wrong. Do you hear that?\\\",\\\"speaker\\\":\\\"kero\\\",\\\"dialogOptions\\\":[\\\"Is that... knocking?\\\"],\\\"showMask\\\":true,\\\"blocking\\\":true,\\\"showNext\\\":true,\\\"useCutsceneUI\\\":true,\\\"image\\\":\\\"kero.png\\\"},{\\\"id\\\":\\\"keyframe-51\\\",\\\"dialogue\\\":\\\"Who’s there?\\\",\\\"speaker\\\":\\\"kero\\\",\\\"dialogOptions\\\":[\\\"Don’t answer it!\\\"],\\\"showMask\\\":true,\\\"blocking\\\":true,\\\"showNext\\\":true,\\\"useCutsceneUI\\\":true,\\\"image\\\":\\\"kero.png\\\"},{\\\"id\\\":\\\"keyframe-52\\\",\\\"dialogue\\\":\\\"Oh no, it’s the Cows!\\\",\\\"speaker\\\":\\\"angry_kero\\\",\\\"dialogOptions\\\":[\\\"Cows? In a cave?\\\"],\\\"showMask\\\":true,\\\"blocking\\\":true,\\\"showNext\\\":true,\\\"useCutsceneUI\\\":true,\\\"image\\\":\\\"angry-kero.png\\\"},{\\\"id\\\":\\\"tutorial3-before-give-cards\\\",\\\"dialogue\\\":\\\"Yeah! These Cows won’t let anyone get in their way!\\\\nLooks like they’ll be here in 3 turns.\\\\nYoshi can’t handle all that alone!\\\",\\\"speaker\\\":\\\"kero\\\",\\\"dialogOptions\\\":[\\\"What do we do?\\\"],\\\"showMask\\\":true,\\\"blocking\\\":true,\\\"showNext\\\":true,\\\"useCutsceneUI\\\":true,\\\"image\\\":\\\"kero.png\\\"},{\\\"id\\\":\\\"keyframe-54\\\",\\\"dialogue\\\":\\\"We’ve gotta Summon more friends!\\\\nHere are all the friends we made earlier.\\\\nWe’ll need them all on the field before the cows arrive!\\\",\\\"speaker\\\":\\\"enemy\\\",\\\"selector\\\":\\\"ai_battler\\\",\\\"dialogOptions\\\":[\\\"How do we Summon?\\\"],\\\"blocking\\\":true,\\\"showNext\\\":true},{\\\"id\\\":\\\"keyframe-55\\\",\\\"dialogue\\\":\\\"Lemme give you a quick Summoning crash course!\\\\nEach Creature’s Summon cost is shown above their card.\\\\nHog and Hamlet each cost {R}. Our Camp’s {?} can substitute\\\\nfor {R}, so we can Summon both of them over the next two turns.\\\",\\\"speaker\\\":\\\"enemy\\\",\\\"selector\\\":\\\"ai_battler\\\",\\\"dialogOptions\\\":[\\\"What about New Boarn?\\\"],\\\"blocking\\\":true,\\\"showNext\\\":true},{\\\"id\\\":\\\"keyframe-56\\\",\\\"dialogue\\\":\\\"We’ll think about New Boarn later!\\\\nFor now, focus on getting the other two Boars on the field.\\\\n(By the way, you might notice that we can only Summon on the\\\\nSpaces closer to us. That’s because the Spaces on the other\\\\nside are Enemy Spaces. We can’t Summon there!)\\\",\\\"speaker\\\":\\\"enemy\\\",\\\"selector\\\":\\\"ai_battler\\\"},{\\\"id\\\":\\\"tutorial3-start-5\\\",\\\"dialogue\\\":\\\"Aight, let’s Summon the New Boarn!\\\\nFor that, we’ll need a new Action — Create!\\\\nCreating causes a Ready Creature to produce one Food.\\\",\\\"speaker\\\":\\\"enemy\\\",\\\"selector\\\":\\\"ai_battler\\\",\\\"dialogOptions\\\":[\\\"Oh! Like Pie?\\\"],\\\"blocking\\\":true,\\\"showNext\\\":true},{\\\"id\\\":\\\"keyframe-58\\\",\\\"dialogue\\\":\\\"Not exactly... The Food that a Creature Creates depends on\\\\ntheir Faction. For example, Yoshi is a Dino, so when he\\\\nCreates, he lays an {G}. When a Boar like Hog or Hamlet\\\\nCreates, it gathers a {R}!\\\",\\\"speaker\\\":\\\"enemy\\\",\\\"selector\\\":\\\"ai_battler\\\",\\\"blocking\\\":true,\\\"showNext\\\":true},{\\\"id\\\":\\\"keyframe-59\\\",\\\"dialogue\\\":\\\"See if you can make up {R}{R}{R} to Summon New Boarn!\\\\nDon’t forget the {?} we got from our Camp, which can\\\\nsubstitute for any Food.\\\",\\\"speaker\\\":\\\"enemy\\\",\\\"selector\\\":\\\"ai_battler\\\"},{\\\"id\\\":\\\"tutorial3-after-summon-new-boarn\\\",\\\"dialogue\\\":\\\"Did you see New Boarn jump?\\\\nNew Boarn is one hyperactive Boar! When you Summon it,\\\\nit jumps to a random Empty Friendly Space.\\\\nYou can read all about it in its card text!\\\",\\\"speaker\\\":\\\"enemy\\\",\\\"selector\\\":\\\"ai_battler\\\",\\\"dialogOptions\\\":[\\\"What a strong newboarn!\\\",\\\"Sounds like it was Boarn for this!\\\"],\\\"blocking\\\":true,\\\"showNext\\\":true},{\\\"id\\\":\\\"tutorial3-focus-hog\\\",\\\"dialogue\\\":\\\"Hog’s an interesting one too! It can only Attack down its column.\\\\nYou’ll wanna pay attention to how each Creature is different\\\\nto win more battles and make more friends!\\\",\\\"speaker\\\":\\\"enemy\\\",\\\"selector\\\":\\\"ai_battler\\\",\\\"blocking\\\":true,\\\"showNext\\\":true},{\\\"id\\\":\\\"tutorial3-after-focus-hog\\\",\\\"dialogue\\\":\\\"Now you’re familiar with the three basic Actions.\\\\nRemember that Creatures can only Act once per turn.\\\\nYou’ll often have to think carefully about whether to\\\\nAttack, Move, or Create!\\\",\\\"speaker\\\":\\\"enemy\\\",\\\"selector\\\":\\\"ai_battler\\\",\\\"blocking\\\":true,\\\"showNext\\\":true},{\\\"id\\\":\\\"keyframe-63\\\",\\\"dialogue\\\":\\\"The cows are almost upon us.\\\\nEnd your turn, and I’m sure you can handle the rest!\\\",\\\"speaker\\\":\\\"enemy\\\",\\\"selector\\\":\\\"ai_battler\\\"},{\\\"id\\\":\\\"tutorial3-stampede-fail\\\",\\\"dialogue\\\":\\\"Oh no! You didn’t Summon all our friends!\\\\nUhh... good luck, I guess... $(ﾟAﾟ;)$\\\",\\\"speaker\\\":\\\"enemy\\\",\\\"selector\\\":\\\"ai_battler\\\"},{\\\"id\\\":\\\"tutorial3-stampede\\\",\\\"dialogue\\\":\\\"You can do it! I’m rooting for you!\\\",\\\"speaker\\\":\\\"enemy\\\",\\\"selector\\\":\\\"ai_battler\\\"},{\\\"id\\\":\\\"tutorial3-lose-2\\\",\\\"endGameUnsolved\\\":true,\\\"dialogue\\\":\\\"Guess it didn’t work out... Don’t worry, you can always try again! You might also need to think more carefully about which Spaces you Summon our friends to.\\\\nOh, and check out the menu! You have two Save slots that you can use to Save or Load your battle progress at any time, and one that autosaves at the start of every turn!\\\",\\\"speaker\\\":\\\"enemy\\\",\\\"selector\\\":\\\"ai_battler\\\",\\\"blocking\\\":true,\\\"showNext\\\":true},{\\\"id\\\":\\\"tutorial4-start-1\\\",\\\"dialogue\\\":\\\"Didya get to read our new friends’ card text?\\\",\\\"speaker\\\":\\\"enemy\\\",\\\"selector\\\":\\\"ai_battler\\\",\\\"dialogOptions\\\":[\\\"Of course!\\\",\\\"Huh?\\\"],\\\"blocking\\\":true,\\\"showNext\\\":true,\\\"nextIds\\\":[\\\"tutorial4-start-1-1\\\",\\\"tutorial4-start-1-2\\\"]},{\\\"id\\\":\\\"tutorial4-start-1-1\\\",\\\"dialogue\\\":\\\"Amazing! The card text will be important for this battle.\\\\nBut first, let’s get our friends on the field!\\\",\\\"speaker\\\":\\\"enemy\\\",\\\"selector\\\":\\\"ai_battler\\\",\\\"dialogOptions\\\":[\\\"Let’s go!\\\"],\\\"blocking\\\":true,\\\"showNext\\\":true,\\\"nextIds\\\":[\\\"tutorial4-start-1-join\\\"]},{\\\"id\\\":\\\"tutorial4-start-1-2\\\",\\\"dialogue\\\":\\\"Well, ya gonna need to if we’re gonna win this battle!\\\\nBut first, let’s get our friends on the field!\\\",\\\"speaker\\\":\\\"enemy\\\",\\\"selector\\\":\\\"ai_battler\\\",\\\"dialogOptions\\\":[\\\"Let’s go!\\\"],\\\"blocking\\\":true,\\\"showNext\\\":true,\\\"nextIds\\\":[\\\"tutorial4-start-1-join\\\"]},{\\\"id\\\":\\\"tutorial4-start-1-join\\\",\\\"dialogue\\\":\\\"Chocolate Calf’s Summon cost is {.}{B}!\\\\nAny Food can substitute for {.}!\\\",\\\"speaker\\\":\\\"enemy\\\",\\\"selector\\\":\\\"ai_battler\\\",\\\"blocking\\\":true,\\\"showNext\\\":true},{\\\"id\\\":\\\"keyframe-71\\\",\\\"dialogue\\\":\\\"You might also come across {(W/B)}. {(W/B)} is Milk!!\\\\nButter and Whipped Cream are both made of Milk,\\\\nso either {B} and {W} can substitute for {(W/B)}!\\\",\\\"speaker\\\":\\\"enemy\\\",\\\"selector\\\":\\\"ai_battler\\\",\\\"blocking\\\":true,\\\"showNext\\\":true},{\\\"id\\\":\\\"tutorial4-focus-beeowulf-1\\\",\\\"dialogue\\\":\\\"And Beeowulf’s Summon cost is just one {Y}!\\\\nI’m sure that one’s no problem for you!\\\",\\\"speaker\\\":\\\"enemy\\\",\\\"selector\\\":\\\"ai_battler\\\",\\\"blocking\\\":true,\\\"showNext\\\":true},{\\\"id\\\":\\\"keyframe-73\\\",\\\"dialogue\\\":\\\"Alright, time to get our friends on the field!\\\",\\\"speaker\\\":\\\"enemy\\\",\\\"selector\\\":\\\"ai_battler\\\"},{\\\"id\\\":\\\"tutorial4-start-2-not-all-summon\\\",\\\"dialogue\\\":\\\"OHHHH THAT’S A BUZZLOAD’A BEEZ!!!!\\\\nBut it looks like you didn’t manage to Summon all\\\\nour friends... I’m not sure you can win this now. $(’A`)$\\\",\\\"speaker\\\":\\\"enemy\\\",\\\"selector\\\":\\\"ai_battler\\\"},{\\\"id\\\":\\\"tutorial4-start-2\\\",\\\"dialogue\\\":\\\"OHHHH THAT’S A BUZZLOAD’A BEEZ!!!! $(⊃‿⊂)ミ3$\\\\nDon’t worry. We can use our friends’ unique abilities\\\\nto win the battle in a single turn!\\\",\\\"speaker\\\":\\\"enemy\\\",\\\"selector\\\":\\\"ai_battler\\\",\\\"blocking\\\":true,\\\"showNext\\\":true},{\\\"id\\\":\\\"tutorial4-focus-beeowulf-2\\\",\\\"dialogue\\\":\\\"Beeowulf has a Special! Activating a Special counts as an\\\\nAction, just like Attack, Move, or Create. That means that\\\\nBeeowulf can only activate its Special when it’s Ready,\\\\nand then it gets tired and can’t Act again until the next turn!\\\",\\\"speaker\\\":\\\"enemy\\\",\\\"selector\\\":\\\"ai_battler\\\",\\\"blocking\\\":true,\\\"showNext\\\":true},{\\\"id\\\":\\\"tutorial4-focus-calf-1\\\",\\\"dialogue\\\":\\\"Chocolate Calf has a Flex! Activating a Flex doesn’t count\\\\nas an Action. That means that it can Flex as many times\\\\nas we want, whether or not it’s Ready!\\\",\\\"speaker\\\":\\\"enemy\\\",\\\"selector\\\":\\\"ai_battler\\\",\\\"blocking\\\":true,\\\"showNext\\\":true},{\\\"id\\\":\\\"tutorial4-focus-calf-2\\\",\\\"dialogue\\\":\\\"Activating a Special or Flex may cost Food. Do you see\\\\nthe {W} next to “Flex” in Chocolate Calf’s card text?\\\\nThat means that it costs one {W} to activate it!\\\\nIf you don’t see any symbols in front of the card text for\\\\nan ability, that means that activating it is free!\\\",\\\"speaker\\\":\\\"enemy\\\",\\\"selector\\\":\\\"ai_battler\\\",\\\"blocking\\\":true,\\\"showNext\\\":true},{\\\"id\\\":\\\"keyframe-79\\\",\\\"dialogue\\\":\\\"Don’t forget to check the card text of the Enemy Bees too!\\\\nOkay I’m sure you’ve got this!!! SEEYA\\\",\\\"speaker\\\":\\\"enemy\\\",\\\"selector\\\":\\\"ai_battler\\\"},{\\\"id\\\":\\\"tutorial5-start\\\",\\\"dialogue\\\":\\\"You’re pretty much an expert at battlin’ now.\\\\nI’ve just one last thing to teach ya!\\\",\\\"speaker\\\":\\\"enemy\\\",\\\"selector\\\":\\\"ai_battler\\\",\\\"blocking\\\":true,\\\"showNext\\\":true},{\\\"id\\\":\\\"keyframe-81\\\",\\\"dialogue\\\":\\\"When a Creature crosses into an Enemy Space,\\\\nit becomes Sneaky. Sneaky Creatures can attack\\\\nProtected Enemies, but no longer Protect Units behind them.\\\",\\\"speaker\\\":\\\"kero\\\",\\\"showMask\\\":true,\\\"blocking\\\":true,\\\"showNext\\\":true,\\\"useCutsceneUI\\\":true,\\\"image\\\":\\\"protection.png\\\"},{\\\"id\\\":\\\"keyframe-82\\\",\\\"dialogue\\\":\\\"Idk if you’ll use it for this battle. Or if you’ll ever use it at all!\\\\nBut that’s what happens when Creatures get too Sneaky!\\\",\\\"speaker\\\":\\\"kero\\\",\\\"showMask\\\":true,\\\"blocking\\\":true,\\\"showNext\\\":true,\\\"useCutsceneUI\\\":true,\\\"image\\\":\\\"kero.png\\\"},{\\\"id\\\":\\\"keyframe-83\\\",\\\"dialogue\\\":\\\"And oh, forgot to mention. You get to send up to two copies\\\\nof each friend into battle! Don’t ask me why, I don’t make the\\\\nrules ’round here. $(･ω<)☆$\\\",\\\"speaker\\\":\\\"kero\\\",\\\"showMask\\\":true,\\\"blocking\\\":true,\\\"showNext\\\":true,\\\"useCutsceneUI\\\":true,\\\"image\\\":\\\"kero.png\\\"},{\\\"id\\\":\\\"keyframe-84\\\",\\\"dialogue\\\":\\\"Anyway, that’s enough talking, we’ve got a battle on our hands!\\\\nIt’s time to BEFRIEND some DRYADS!!!\\\",\\\"speaker\\\":\\\"enemy\\\",\\\"selector\\\":\\\"ai_battler\\\"},{\\\"id\\\":\\\"tutorial6-start-no-deck\\\",\\\"dialogue\\\":\\\"It’s time for your FINAL TEST!\\\\nBut you’ll have to bring your own Deck for this one. $( •̀⩊•́ )$\\\",\\\"speaker\\\":\\\"enemy\\\",\\\"selector\\\":\\\"ai_battler\\\",\\\"dialogOptions\\\":[\\\"Deck?\\\"],\\\"blocking\\\":true,\\\"showNext\\\":true},{\\\"id\\\":\\\"keyframe-86\\\",\\\"dialogue\\\":\\\"A Deck is a roster of friends you’ll bring into battle!\\\\nYou can select up to two copies of each friend to\\\\nmake up a Deck of up to 30 friends in total.\\\",\\\"speaker\\\":\\\"enemy\\\",\\\"selector\\\":\\\"ai_battler\\\",\\\"blocking\\\":true,\\\"showNext\\\":true},{\\\"id\\\":\\\"keyframe-87\\\",\\\"dialogue\\\":\\\"By the way, if you ever feel like you need a refresher on all\\\\nthe stuff we’ve talked about so far — like if you’ve gotta do\\\\nsome last-minute revision for a big TEST for example —\\\\nI’ve added a link to some Notes to your navbar!\\\\nI wrote them just for you~ $(◕‿◕)♡$\\\",\\\"speaker\\\":\\\"enemy\\\",\\\"selector\\\":\\\"ai_battler\\\",\\\"dialogOptions\\\":[\\\"Aw, thanks!\\\"],\\\"blocking\\\":true,\\\"showNext\\\":true},{\\\"id\\\":\\\"keyframe-88\\\",\\\"endGameUnsolved\\\":true,\\\"dialogue\\\":\\\"Now hit “Exit battle” in the menu, build your Deck,\\\\nand come back when you’re ready!\\\\nChoose carefully, for we have a SUPER ULTIMATE\\\\nEXTREME CHALLENGE FINAL BATTLE ahead of us!\\\",\\\"speaker\\\":\\\"enemy\\\",\\\"selector\\\":\\\"ai_battler\\\"},{\\\"id\\\":\\\"tutorial6-start-1\\\",\\\"dialogue\\\":\\\"Looks like we’re here early! But don’t dally, ’cos it looks like\\\\nthe monsters will be here as soon as next turn!\\\\nThere are so many of them... hopefully they’ll come in a\\\\nfew at a time or we won’t have time to catch our breaths!\\\",\\\"speaker\\\":\\\"enemy\\\",\\\"selector\\\":\\\"ai_battler\\\"},{\\\"id\\\":\\\"tutorial6-start-2\\\",\\\"dialogue\\\":\\\"AHH NO THEY CAME ALL AT ONCE WHAT A DISASTER!!!!!\\\",\\\"speaker\\\":\\\"enemy\\\",\\\"selector\\\":\\\"ai_battler\\\"},{\\\"id\\\":\\\"tutorial6-end\\\",\\\"endCutscene\\\":true,\\\"endGame\\\":true,\\\"dialogue\\\":\\\"You... did it? Already? I wasn’t paying attention,\\\\nbut you must’ve pulled off some fancy combos there\\\\nto have made it through that battle so quickly!\\\\nWell, that must mean you’re an expert now. Ｏ(≧∇≦)Ｏ\\\\nGo forth and befriend!\\\",\\\"speaker\\\":\\\"kero\\\",\\\"showMask\\\":true,\\\"blocking\\\":true,\\\"showNext\\\":true,\\\"useCutsceneUI\\\":true,\\\"image\\\":\\\"kero.png\\\"},{\\\"id\\\":\\\"masteries-start\\\",\\\"dialogue\\\":\\\"⚠️ Warning ⚠️\\\\nCutscenes are synced across your team. Gather your teammates here before proceeding!\\\\n(Don’t worry if someone can’t make it — you’ll always be able to replay a cutscene later.)\\\",\\\"dialogOptions\\\":[\\\"Ready!\\\"],\\\"showMask\\\":true,\\\"blocking\\\":true,\\\"showNext\\\":true,\\\"useCutsceneUI\\\":true,\\\"hideGame\\\":true},{\\\"id\\\":\\\"keyframe-93\\\",\\\"dialogue\\\":\\\"Wouldya look at that! You found an ANSWER!\\\",\\\"dialogOptions\\\":[\\\"Heh, we totally breezed through that puzzle!\\\",\\\"It was a tough puzzle but we made it through!\\\"],\\\"showMask\\\":true,\\\"blocking\\\":true,\\\"showNext\\\":true,\\\"useCutsceneUI\\\":true,\\\"hideGame\\\":true,\\\"image\\\":\\\"kero dos\\\"},{\\\"id\\\":\\\"keyframe-94\\\",\\\"dialogue\\\":\\\"Puzzle? What puzzle? This whole time I thought we were doing a BATTLE OF WITS!\\\",\\\"dialogOptions\\\":[\\\"Ah, right, of course we were.\\\"],\\\"showMask\\\":true,\\\"blocking\\\":true,\\\"showNext\\\":true,\\\"useCutsceneUI\\\":true,\\\"hideGame\\\":true,\\\"image\\\":\\\"kero dos\\\"},{\\\"id\\\":\\\"keyframe-95\\\",\\\"dialogue\\\":\\\"Yeah! You even got to befriend a buncha monsters!\\\",\\\"dialogOptions\\\":[\\\"Yay! The power of UWU!\\\"],\\\"showMask\\\":true,\\\"blocking\\\":true,\\\"showNext\\\":true,\\\"useCutsceneUI\\\":true,\\\"hideGame\\\":true,\\\"image\\\":\\\"kero dos\\\"},{\\\"id\\\":\\\"keyframe-96\\\",\\\"dialogue\\\":\\\"Actually, y’know what? That ANSWER you found...\\\\nIt looks a lot like a branch from the Mastery Tree!\\\",\\\"dialogOptions\\\":[\\\"Mastery Tree?\\\"],\\\"showMask\\\":true,\\\"blocking\\\":true,\\\"showNext\\\":true,\\\"useCutsceneUI\\\":true,\\\"hideGame\\\":true,\\\"image\\\":\\\"kero dos\\\"},{\\\"id\\\":\\\"keyframe-97\\\",\\\"endCutscene\\\":true,\\\"endGame\\\":true,\\\"dialogue\\\":\\\"Yeah! All the CHAOS has caused the Mastery Tree to fall apart, scattering its branches all over the cave!\\\\nYou need to find its branches and put it back together again!\\\",\\\"showMask\\\":true,\\\"blocking\\\":true,\\\"showNext\\\":true,\\\"useCutsceneUI\\\":true,\\\"hideGame\\\":true,\\\"image\\\":\\\"kero dos\\\"},{\\\"id\\\":\\\"legendary-start\\\",\\\"dialogue\\\":\\\"⚠️ Warning ⚠️\\\\nCutscenes are synced across your team. Gather your teammates here before proceeding!\\\\n(Don’t worry if someone can’t make it — you’ll always be able to replay a cutscene later.)\\\",\\\"dialogOptions\\\":[\\\"Ready!\\\"],\\\"showMask\\\":true,\\\"blocking\\\":true,\\\"showNext\\\":true,\\\"useCutsceneUI\\\":true,\\\"hideGame\\\":true},{\\\"id\\\":\\\"keyframe-99\\\",\\\"dialogue\\\":\\\"$ヽ(°〇°)ﾉ$ You did it! You befriended a legendary!\\\",\\\"dialogOptions\\\":[\\\"Yay! But wait, did you just... transform?\\\"],\\\"showMask\\\":true,\\\"blocking\\\":true,\\\"showNext\\\":true,\\\"useCutsceneUI\\\":true,\\\"hideGame\\\":true,\\\"image\\\":\\\"kero dos\\\"},{\\\"id\\\":\\\"keyframe-100\\\",\\\"dialogue\\\":\\\"Oh, don’t mind that. That’s just the legendary’s power coursing\\\\nthrough me! The more friends we make, the more power I get —\\\\npower to rid this cave of CHAOS once and for all!\\\",\\\"dialogOptions\\\":[\\\"Ah, of course! So, what’s a legendary?\\\"],\\\"showMask\\\":true,\\\"blocking\\\":true,\\\"showNext\\\":true,\\\"useCutsceneUI\\\":true,\\\"hideGame\\\":true,\\\"image\\\":\\\"kero dos\\\"},{\\\"id\\\":\\\"keyframe-101\\\",\\\"dialogue\\\":\\\"Legendaries are awesome. They’re the best kinda friend!\\\\nThey don’t like each other very much, though...\\\",\\\"dialogOptions\\\":[\\\"Why not?\\\"],\\\"showMask\\\":true,\\\"blocking\\\":true,\\\"showNext\\\":true,\\\"useCutsceneUI\\\":true,\\\"hideGame\\\":true,\\\"image\\\":\\\"kero dos\\\"},{\\\"id\\\":\\\"keyframe-102\\\",\\\"dialogue\\\":\\\"I dunno. Pride, maybe. The Factions have been fighting since forever!\\\\nThe legendaries wanna prove that they alone are the best.\\\\nWhat does it matter, as long as they all become our friends!\\\",\\\"showMask\\\":true,\\\"blocking\\\":true,\\\"showNext\\\":true,\\\"useCutsceneUI\\\":true,\\\"hideGame\\\":true,\\\"image\\\":\\\"kero dos\\\"},{\\\"id\\\":\\\"keyframe-103\\\",\\\"dialogue\\\":\\\"Though it does mean that you can’t bring more than one legendary (or more than one copy of the same legendary) to battle at a time. What a bummer!\\\",\\\"showMask\\\":true,\\\"blocking\\\":true,\\\"showNext\\\":true,\\\"useCutsceneUI\\\":true,\\\"hideGame\\\":true,\\\"image\\\":\\\"kero dos\\\"},{\\\"id\\\":\\\"keyframe-104\\\",\\\"endCutscene\\\":true,\\\"endGame\\\":true,\\\"dialogue\\\":\\\"Anyways, there are 12 legendaries hiding throughout the cave.\\\\nThe power of UWU demands that we befriend them all!\\\",\\\"dialogOptions\\\":[\\\"Let’s go!\\\"],\\\"showMask\\\":true,\\\"blocking\\\":true,\\\"showNext\\\":true,\\\"useCutsceneUI\\\":true,\\\"hideGame\\\":true,\\\"image\\\":\\\"kero dos\\\"},{\\\"id\\\":\\\"pre-final-battle-start\\\",\\\"dialogue\\\":\\\"⚠️ Warning ⚠️\\\\nCutscenes are synced across your team. Gather your teammates here before proceeding!\\\\n(Don’t worry if someone can’t make it — you’ll always be able to replay a cutscene later.)\\\",\\\"dialogOptions\\\":[\\\"Ready!\\\"],\\\"showMask\\\":true,\\\"blocking\\\":true,\\\"showNext\\\":true,\\\"useCutsceneUI\\\":true,\\\"hideGame\\\":true},{\\\"id\\\":\\\"keyframe-106\\\",\\\"dialogue\\\":\\\"You did it! You befriended all the legendaries.\\\\nWith these cards, we can finally take over the cave!\\\",\\\"dialogOptions\\\":[\\\"I thought we were saving the cave, not taking it over! What about the power of UWU?\\\"],\\\"showMask\\\":true,\\\"blocking\\\":true,\\\"showNext\\\":true,\\\"useCutsceneUI\\\":true,\\\"hideGame\\\":true,\\\"image\\\":\\\"kero dos\\\"},{\\\"id\\\":\\\"keyframe-107\\\",\\\"dialogue\\\":\\\"I AM UWU, the Underwater Usurper!\\\\nAnd with the power of the cards, we can usurp the whole world!!!!\\\\nNow hand them over.\\\",\\\"dialogOptions\\\":[\\\"Never!\\\"],\\\"showMask\\\":true,\\\"blocking\\\":true,\\\"showNext\\\":true,\\\"useCutsceneUI\\\":true,\\\"hideGame\\\":true,\\\"image\\\":\\\"angry-kero-dos.png\\\"},{\\\"id\\\":\\\"keyframe-108\\\",\\\"dialogue\\\":\\\"...tragedy... ...an imposter approaches... 🌷\\\\n...call upon the flowers... 🌺 ...accept my aid...\\\",\\\"showMask\\\":true,\\\"blocking\\\":true,\\\"showNext\\\":true,\\\"useCutsceneUI\\\":true,\\\"hideGame\\\":true,\\\"image\\\":\\\"coloring.png\\\"},{\\\"id\\\":\\\"keyframe-109\\\",\\\"dialogue\\\":\\\"What, flowers? Don’t make me L, A, U, G, H!\\\\nThe whole C, A, V, E is at stake. Let M, E take care of it!\\\",\\\"showMask\\\":true,\\\"blocking\\\":true,\\\"showNext\\\":true,\\\"useCutsceneUI\\\":true,\\\"hideGame\\\":true,\\\"image\\\":\\\"spelling-bee.png\\\"},{\\\"id\\\":\\\"keyframe-110\\\",\\\"dialogue\\\":\\\"Calm your wings, Bee. I’ve seen your quarterlies.\\\\nYou won’t pass the audit, let alone win them the battle!\\\",\\\"showMask\\\":true,\\\"blocking\\\":true,\\\"showNext\\\":true,\\\"useCutsceneUI\\\":true,\\\"hideGame\\\":true,\\\"image\\\":\\\"moonick.png\\\"},{\\\"id\\\":\\\"keyframe-111\\\",\\\"dialogue\\\":\\\"Do I need to S, P, E, L, L it out for you? Your audits mean nothing! And if you don’t know, no one in this C, A, V, E likes you Cows, let alone your T, A, X, E, S!\\\",\\\"showMask\\\":true,\\\"blocking\\\":true,\\\"showNext\\\":true,\\\"useCutsceneUI\\\":true,\\\"hideGame\\\":true,\\\"image\\\":\\\"spelling-bee.png\\\"},{\\\"id\\\":\\\"keyframe-112\\\",\\\"dialogue\\\":\\\"(angry slime noises)\\\",\\\"showMask\\\":true,\\\"blocking\\\":true,\\\"showNext\\\":true,\\\"useCutsceneUI\\\":true,\\\"hideGame\\\":true,\\\"image\\\":\\\"slime--slime.png\\\"},{\\\"id\\\":\\\"keyframe-113\\\",\\\"dialogue\\\":\\\"And you thirgle yorgle any bergle? Yorgle not a clurgle whargle yorgle targle with! Norgle of you yorgle have largle ergle on a genurgle bargle, I’ll sargle that murgle!\\\",\\\"showMask\\\":true,\\\"blocking\\\":true,\\\"showNext\\\":true,\\\"useCutsceneUI\\\":true,\\\"hideGame\\\":true,\\\"image\\\":\\\"dargle.png\\\"},{\\\"id\\\":\\\"keyframe-114\\\",\\\"dialogue\\\":\\\"Git outta here, Dargle! Ain’t nobody here can make heads or tails of what yer sayin’! Take me instead, this here battle’s a job for a Cow!\\\",\\\"showMask\\\":true,\\\"blocking\\\":true,\\\"showNext\\\":true,\\\"useCutsceneUI\\\":true,\\\"hideGame\\\":true,\\\"image\\\":\\\"miss-yu.png\\\"},{\\\"id\\\":\\\"keyframe-115\\\",\\\"dialogue\\\":\\\"Lackadairy, get thee home, cows, thou’rt milk-drunk! I shall show that ⍼ what’s 🗦🗫🗧ing, eh!\\\",\\\"showMask\\\":true,\\\"blocking\\\":true,\\\"showNext\\\":true,\\\"useCutsceneUI\\\":true,\\\"hideGame\\\":true,\\\"image\\\":\\\"jabberwock.png\\\"},{\\\"id\\\":\\\"keyframe-116\\\",\\\"dialogue\\\":\\\"(ANGRY angry slime SLIME NOISES noises)\\\",\\\"showMask\\\":true,\\\"blocking\\\":true,\\\"showNext\\\":true,\\\"useCutsceneUI\\\":true,\\\"hideGame\\\":true,\\\"image\\\":\\\"slime--slime-2.png\\\"},{\\\"id\\\":\\\"keyframe-117\\\",\\\"dialogue\\\":\\\"Friends! This is no time for bickering!\\\\nLet us set aside our differences just this once.\\\\nOnly with our powers combined do we stand a chance against this... thing!\\\",\\\"showMask\\\":true,\\\"blocking\\\":true,\\\"showNext\\\":true,\\\"useCutsceneUI\\\":true,\\\"hideGame\\\":true,\\\"image\\\":\\\"captain-pi.png\\\"},{\\\"id\\\":\\\"keyframe-118\\\",\\\"dialogue\\\":\\\"I hate to say this but the cap’s right. If any of us tries to monopolize the board like we always do, it’s Checkmate in Three!\\\",\\\"showMask\\\":true,\\\"blocking\\\":true,\\\"showNext\\\":true,\\\"useCutsceneUI\\\":true,\\\"hideGame\\\":true,\\\"image\\\":\\\"blancmange.png\\\"},{\\\"id\\\":\\\"keyframe-119\\\",\\\"dialogue\\\":\\\"A load of HOGWASH but I’ll TAKE IT! Anything to get BACK at this SWINE and take my place BACK at the TREASURY!\\\",\\\"showMask\\\":true,\\\"blocking\\\":true,\\\"showNext\\\":true,\\\"useCutsceneUI\\\":true,\\\"hideGame\\\":true,\\\"image\\\":\\\"mister-penny.png\\\"},{\\\"id\\\":\\\"keyframe-120\\\",\\\"dialogue\\\":\\\"i’ve not fought alongside others before.\\\\nbut if i’ve l, e, a, r, n, e, d anything, it’s that i shouldn’t be afraid of t, r, y, i, n, g!\\\",\\\"showMask\\\":true,\\\"blocking\\\":true,\\\"showNext\\\":true,\\\"useCutsceneUI\\\":true,\\\"hideGame\\\":true,\\\"image\\\":\\\"bb-b.png\\\"},{\\\"id\\\":\\\"keyframe-121\\\",\\\"dialogue\\\":\\\"Yeah! Let us dominate the corners, surround the opponent, and flip the whole battle around! ...Together!\\\",\\\"showMask\\\":true,\\\"blocking\\\":true,\\\"showNext\\\":true,\\\"useCutsceneUI\\\":true,\\\"hideGame\\\":true,\\\"image\\\":\\\"othello.png\\\"},{\\\"id\\\":\\\"keyframe-122\\\",\\\"endCutscene\\\":true,\\\"endGame\\\":true,\\\"dialogue\\\":\\\"(determined DETERMINED SLIME slime noises NOISES)\\\\n(DETERMINED determined slime SLIME NOISES noises)\\\",\\\"showMask\\\":true,\\\"blocking\\\":true,\\\"showNext\\\":true,\\\"useCutsceneUI\\\":true,\\\"hideGame\\\":true,\\\"image\\\":\\\"slime--slime-3.png\\\"},{\\\"id\\\":\\\"post-final-battle-start\\\",\\\"dialogue\\\":\\\"How? How could I possibly have lost???\\\\nNow I’m all alone... again... $ಥ﹏ಥ$\\\",\\\"showMask\\\":true,\\\"blocking\\\":true,\\\"showNext\\\":true,\\\"useCutsceneUI\\\":true,\\\"hideGame\\\":true,\\\"image\\\":\\\"sad-kero.png\\\"},{\\\"id\\\":\\\"keyframe-124\\\",\\\"dialogue\\\":\\\"There is one force that you don’t understand.\\\\nA force stronger than any other force in the world.\\\\nEven more powerful than UWU.\\\",\\\"showMask\\\":true,\\\"blocking\\\":true,\\\"showNext\\\":true,\\\"useCutsceneUI\\\":true,\\\"hideGame\\\":true,\\\"image\\\":\\\"captain-pi.png\\\"},{\\\"id\\\":\\\"keyframe-125\\\",\\\"dialogue\\\":\\\"That force is...\\\",\\\"dialogOptions\\\":[\\\"Friendship?\\\"],\\\"showMask\\\":true,\\\"blocking\\\":true,\\\"showNext\\\":true,\\\"useCutsceneUI\\\":true,\\\"hideGame\\\":true,\\\"image\\\":\\\"captain-pi.png\\\"},{\\\"id\\\":\\\"keyframe-126\\\",\\\"dialogue\\\":\\\"PIE.\\\",\\\"showMask\\\":true,\\\"blocking\\\":true,\\\"showNext\\\":true,\\\"useCutsceneUI\\\":true,\\\"hideGame\\\":true,\\\"image\\\":\\\"captain-pi.png\\\"},{\\\"id\\\":\\\"keyframe-127\\\",\\\"dialogue\\\":\\\"...\\\",\\\"showMask\\\":true,\\\"blocking\\\":true,\\\"showNext\\\":true,\\\"useCutsceneUI\\\":true,\\\"hideGame\\\":true,\\\"image\\\":\\\"sad-kero.png\\\"},{\\\"id\\\":\\\"keyframe-128\\\",\\\"dialogue\\\":\\\"# i want pie...\\\",\\\"showMask\\\":true,\\\"blocking\\\":true,\\\"showNext\\\":true,\\\"useCutsceneUI\\\":true,\\\"hideGame\\\":true,\\\"image\\\":\\\"sad-kero.png\\\"},{\\\"id\\\":\\\"keyframe-129\\\",\\\"dialogue\\\":\\\"# i’d ask a camp for some, but...\\\\n# i don’t even have a camp anymore...\\\",\\\"showMask\\\":true,\\\"blocking\\\":true,\\\"showNext\\\":true,\\\"useCutsceneUI\\\":true,\\\"hideGame\\\":true,\\\"image\\\":\\\"sad-kero.png\\\"},{\\\"id\\\":\\\"keyframe-130\\\",\\\"dialogue\\\":\\\"You cannot win friends with the power of CHAOS.\\\\nOnly when all the Factions come together, in HARMONY, can we make...\\\\nNot just any pie, but LEGENDARY PIE.\\\\nYet, I suppose, we have you, Kero, to thank, for bringing all of us together with this battle.\\\",\\\"showMask\\\":true,\\\"blocking\\\":true,\\\"showNext\\\":true,\\\"useCutsceneUI\\\":true,\\\"hideGame\\\":true,\\\"image\\\":\\\"captain-pi.png\\\"},{\\\"id\\\":\\\"post-final-battle-choice\\\",\\\"dialogue\\\":\\\"Brave heroes, what will you choose?\\\",\\\"dialogOptions\\\":[\\\"Seal him away!\\\",\\\"Invite him to join us for some pie.\\\"],\\\"showMask\\\":true,\\\"blocking\\\":true,\\\"showNext\\\":true,\\\"useCutsceneUI\\\":true,\\\"hideGame\\\":true,\\\"image\\\":\\\"captain-pi.png\\\",\\\"nextIds\\\":[\\\"post-final-battle-choice-1\\\",\\\"post-final-battle-choice-2\\\"]},{\\\"id\\\":\\\"post-final-battle-choice-1\\\",\\\"dialogue\\\":\\\"You and all the creatures of the cave seal Kero in the nearest lockable object, which is an empty treasure chest you found lying nearby.\\\\nYou make sure to hide the map to the chest behind lots of puzzles so that he will never be unsealed again.\\\",\\\"showMask\\\":true,\\\"blocking\\\":true,\\\"showNext\\\":true,\\\"useCutsceneUI\\\":true,\\\"hideGame\\\":true,\\\"image\\\":\\\"treasure-chest.png\\\"},{\\\"id\\\":\\\"keyframe-133\\\",\\\"endCutscene\\\":true,\\\"endGame\\\":true,\\\"dialogue\\\":\\\"And so, for the first time in a thousand years, the Factions worked together to bake a LEGENDARY PIE, and ate it, too.\\\\nAnd everyone learned that the real treasure wasn’t taking over the world, it was the pies you made along the way.\\\",\\\"showMask\\\":true,\\\"blocking\\\":true,\\\"showNext\\\":true,\\\"useCutsceneUI\\\":true,\\\"hideGame\\\":true,\\\"image\\\":\\\"legendary-pie-no-kero.png\\\"},{\\\"id\\\":\\\"post-final-battle-choice-2\\\",\\\"dialogue\\\":\\\"I love PIE! uwu\\\",\\\"showMask\\\":true,\\\"blocking\\\":true,\\\"showNext\\\":true,\\\"useCutsceneUI\\\":true,\\\"hideGame\\\":true,\\\"image\\\":\\\"kero.png\\\"},{\\\"id\\\":\\\"keyframe-135\\\",\\\"endCutscene\\\":true,\\\"endGame\\\":true,\\\"dialogue\\\":\\\"And so, for the first time in a thousand years, the Factions worked together to bake a LEGENDARY PIE, and ate it, too.\\\\nAnd everyone learned that the real treasure wasn’t taking over the world, it was the pies you made along the way.\\\",\\\"showMask\\\":true,\\\"blocking\\\":true,\\\"showNext\\\":true,\\\"useCutsceneUI\\\":true,\\\"hideGame\\\":true,\\\"image\\\":\\\"legendary-pie-w-kero.png\\\"}]\"","import { Keyframe } from \"engine/types/keyframes\";\nimport allKeyframesJson from \"engine/puzzles/all-keyframes.json?raw\";\n\nconst ALL_KEYFRAMES: Keyframe[] = JSON.parse(allKeyframesJson) as Keyframe[];\nexport default ALL_KEYFRAMES;\n","var global$1 = (typeof global !== \"undefined\" ? global :\n            typeof self !== \"undefined\" ? self :\n            typeof window !== \"undefined\" ? window : {});\n\nvar lookup = [];\nvar revLookup = [];\nvar Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array;\nvar inited = false;\nfunction init () {\n  inited = true;\n  var code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';\n  for (var i = 0, len = code.length; i < len; ++i) {\n    lookup[i] = code[i];\n    revLookup[code.charCodeAt(i)] = i;\n  }\n\n  revLookup['-'.charCodeAt(0)] = 62;\n  revLookup['_'.charCodeAt(0)] = 63;\n}\n\nfunction toByteArray (b64) {\n  if (!inited) {\n    init();\n  }\n  var i, j, l, tmp, placeHolders, arr;\n  var len = b64.length;\n\n  if (len % 4 > 0) {\n    throw new Error('Invalid string. Length must be a multiple of 4')\n  }\n\n  // the number of equal signs (place holders)\n  // if there are two placeholders, than the two characters before it\n  // represent one byte\n  // if there is only one, then the three characters before it represent 2 bytes\n  // this is just a cheap hack to not do indexOf twice\n  placeHolders = b64[len - 2] === '=' ? 2 : b64[len - 1] === '=' ? 1 : 0;\n\n  // base64 is 4/3 + up to two characters of the original data\n  arr = new Arr(len * 3 / 4 - placeHolders);\n\n  // if there are placeholders, only get up to the last complete 4 chars\n  l = placeHolders > 0 ? len - 4 : len;\n\n  var L = 0;\n\n  for (i = 0, j = 0; i < l; i += 4, j += 3) {\n    tmp = (revLookup[b64.charCodeAt(i)] << 18) | (revLookup[b64.charCodeAt(i + 1)] << 12) | (revLookup[b64.charCodeAt(i + 2)] << 6) | revLookup[b64.charCodeAt(i + 3)];\n    arr[L++] = (tmp >> 16) & 0xFF;\n    arr[L++] = (tmp >> 8) & 0xFF;\n    arr[L++] = tmp & 0xFF;\n  }\n\n  if (placeHolders === 2) {\n    tmp = (revLookup[b64.charCodeAt(i)] << 2) | (revLookup[b64.charCodeAt(i + 1)] >> 4);\n    arr[L++] = tmp & 0xFF;\n  } else if (placeHolders === 1) {\n    tmp = (revLookup[b64.charCodeAt(i)] << 10) | (revLookup[b64.charCodeAt(i + 1)] << 4) | (revLookup[b64.charCodeAt(i + 2)] >> 2);\n    arr[L++] = (tmp >> 8) & 0xFF;\n    arr[L++] = tmp & 0xFF;\n  }\n\n  return arr\n}\n\nfunction tripletToBase64 (num) {\n  return lookup[num >> 18 & 0x3F] + lookup[num >> 12 & 0x3F] + lookup[num >> 6 & 0x3F] + lookup[num & 0x3F]\n}\n\nfunction encodeChunk (uint8, start, end) {\n  var tmp;\n  var output = [];\n  for (var i = start; i < end; i += 3) {\n    tmp = (uint8[i] << 16) + (uint8[i + 1] << 8) + (uint8[i + 2]);\n    output.push(tripletToBase64(tmp));\n  }\n  return output.join('')\n}\n\nfunction fromByteArray (uint8) {\n  if (!inited) {\n    init();\n  }\n  var tmp;\n  var len = uint8.length;\n  var extraBytes = len % 3; // if we have 1 byte left, pad 2 bytes\n  var output = '';\n  var parts = [];\n  var maxChunkLength = 16383; // must be multiple of 3\n\n  // go through the array every three bytes, we'll deal with trailing stuff later\n  for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {\n    parts.push(encodeChunk(uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)));\n  }\n\n  // pad the end with zeros, but make sure to not forget the extra bytes\n  if (extraBytes === 1) {\n    tmp = uint8[len - 1];\n    output += lookup[tmp >> 2];\n    output += lookup[(tmp << 4) & 0x3F];\n    output += '==';\n  } else if (extraBytes === 2) {\n    tmp = (uint8[len - 2] << 8) + (uint8[len - 1]);\n    output += lookup[tmp >> 10];\n    output += lookup[(tmp >> 4) & 0x3F];\n    output += lookup[(tmp << 2) & 0x3F];\n    output += '=';\n  }\n\n  parts.push(output);\n\n  return parts.join('')\n}\n\nfunction read (buffer, offset, isLE, mLen, nBytes) {\n  var e, m;\n  var eLen = nBytes * 8 - mLen - 1;\n  var eMax = (1 << eLen) - 1;\n  var eBias = eMax >> 1;\n  var nBits = -7;\n  var i = isLE ? (nBytes - 1) : 0;\n  var d = isLE ? -1 : 1;\n  var s = buffer[offset + i];\n\n  i += d;\n\n  e = s & ((1 << (-nBits)) - 1);\n  s >>= (-nBits);\n  nBits += eLen;\n  for (; nBits > 0; e = e * 256 + buffer[offset + i], i += d, nBits -= 8) {}\n\n  m = e & ((1 << (-nBits)) - 1);\n  e >>= (-nBits);\n  nBits += mLen;\n  for (; nBits > 0; m = m * 256 + buffer[offset + i], i += d, nBits -= 8) {}\n\n  if (e === 0) {\n    e = 1 - eBias;\n  } else if (e === eMax) {\n    return m ? NaN : ((s ? -1 : 1) * Infinity)\n  } else {\n    m = m + Math.pow(2, mLen);\n    e = e - eBias;\n  }\n  return (s ? -1 : 1) * m * Math.pow(2, e - mLen)\n}\n\nfunction write (buffer, value, offset, isLE, mLen, nBytes) {\n  var e, m, c;\n  var eLen = nBytes * 8 - mLen - 1;\n  var eMax = (1 << eLen) - 1;\n  var eBias = eMax >> 1;\n  var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0);\n  var i = isLE ? 0 : (nBytes - 1);\n  var d = isLE ? 1 : -1;\n  var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0;\n\n  value = Math.abs(value);\n\n  if (isNaN(value) || value === Infinity) {\n    m = isNaN(value) ? 1 : 0;\n    e = eMax;\n  } else {\n    e = Math.floor(Math.log(value) / Math.LN2);\n    if (value * (c = Math.pow(2, -e)) < 1) {\n      e--;\n      c *= 2;\n    }\n    if (e + eBias >= 1) {\n      value += rt / c;\n    } else {\n      value += rt * Math.pow(2, 1 - eBias);\n    }\n    if (value * c >= 2) {\n      e++;\n      c /= 2;\n    }\n\n    if (e + eBias >= eMax) {\n      m = 0;\n      e = eMax;\n    } else if (e + eBias >= 1) {\n      m = (value * c - 1) * Math.pow(2, mLen);\n      e = e + eBias;\n    } else {\n      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen);\n      e = 0;\n    }\n  }\n\n  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}\n\n  e = (e << mLen) | m;\n  eLen += mLen;\n  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}\n\n  buffer[offset + i - d] |= s * 128;\n}\n\nvar toString = {}.toString;\n\nvar isArray = Array.isArray || function (arr) {\n  return toString.call(arr) == '[object Array]';\n};\n\nvar INSPECT_MAX_BYTES = 50;\n\n/**\n * If `Buffer.TYPED_ARRAY_SUPPORT`:\n *   === true    Use Uint8Array implementation (fastest)\n *   === false   Use Object implementation (most compatible, even IE6)\n *\n * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,\n * Opera 11.6+, iOS 4.2+.\n *\n * Due to various browser bugs, sometimes the Object implementation will be used even\n * when the browser supports typed arrays.\n *\n * Note:\n *\n *   - Firefox 4-29 lacks support for adding new properties to `Uint8Array` instances,\n *     See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438.\n *\n *   - Chrome 9-10 is missing the `TypedArray.prototype.subarray` function.\n *\n *   - IE10 has a broken `TypedArray.prototype.subarray` function which returns arrays of\n *     incorrect length in some situations.\n\n * We detect these buggy browsers and set `Buffer.TYPED_ARRAY_SUPPORT` to `false` so they\n * get the Object implementation, which is slower but behaves correctly.\n */\nBuffer.TYPED_ARRAY_SUPPORT = global$1.TYPED_ARRAY_SUPPORT !== undefined\n  ? global$1.TYPED_ARRAY_SUPPORT\n  : true;\n\n/*\n * Export kMaxLength after typed array support is determined.\n */\nkMaxLength();\n\nfunction kMaxLength () {\n  return Buffer.TYPED_ARRAY_SUPPORT\n    ? 0x7fffffff\n    : 0x3fffffff\n}\n\nfunction createBuffer (that, length) {\n  if (kMaxLength() < length) {\n    throw new RangeError('Invalid typed array length')\n  }\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    // Return an augmented `Uint8Array` instance, for best performance\n    that = new Uint8Array(length);\n    that.__proto__ = Buffer.prototype;\n  } else {\n    // Fallback: Return an object instance of the Buffer class\n    if (that === null) {\n      that = new Buffer(length);\n    }\n    that.length = length;\n  }\n\n  return that\n}\n\n/**\n * The Buffer constructor returns instances of `Uint8Array` that have their\n * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of\n * `Uint8Array`, so the returned instances will have all the node `Buffer` methods\n * and the `Uint8Array` methods. Square bracket notation works as expected -- it\n * returns a single octet.\n *\n * The `Uint8Array` prototype remains unmodified.\n */\n\nfunction Buffer (arg, encodingOrOffset, length) {\n  if (!Buffer.TYPED_ARRAY_SUPPORT && !(this instanceof Buffer)) {\n    return new Buffer(arg, encodingOrOffset, length)\n  }\n\n  // Common case.\n  if (typeof arg === 'number') {\n    if (typeof encodingOrOffset === 'string') {\n      throw new Error(\n        'If encoding is specified then the first argument must be a string'\n      )\n    }\n    return allocUnsafe(this, arg)\n  }\n  return from(this, arg, encodingOrOffset, length)\n}\n\nBuffer.poolSize = 8192; // not used by this implementation\n\n// TODO: Legacy, not needed anymore. Remove in next major version.\nBuffer._augment = function (arr) {\n  arr.__proto__ = Buffer.prototype;\n  return arr\n};\n\nfunction from (that, value, encodingOrOffset, length) {\n  if (typeof value === 'number') {\n    throw new TypeError('\"value\" argument must not be a number')\n  }\n\n  if (typeof ArrayBuffer !== 'undefined' && value instanceof ArrayBuffer) {\n    return fromArrayBuffer(that, value, encodingOrOffset, length)\n  }\n\n  if (typeof value === 'string') {\n    return fromString(that, value, encodingOrOffset)\n  }\n\n  return fromObject(that, value)\n}\n\n/**\n * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError\n * if value is a number.\n * Buffer.from(str[, encoding])\n * Buffer.from(array)\n * Buffer.from(buffer)\n * Buffer.from(arrayBuffer[, byteOffset[, length]])\n **/\nBuffer.from = function (value, encodingOrOffset, length) {\n  return from(null, value, encodingOrOffset, length)\n};\n\nif (Buffer.TYPED_ARRAY_SUPPORT) {\n  Buffer.prototype.__proto__ = Uint8Array.prototype;\n  Buffer.__proto__ = Uint8Array;\n  if (typeof Symbol !== 'undefined' && Symbol.species &&\n      Buffer[Symbol.species] === Buffer) ;\n}\n\nfunction assertSize (size) {\n  if (typeof size !== 'number') {\n    throw new TypeError('\"size\" argument must be a number')\n  } else if (size < 0) {\n    throw new RangeError('\"size\" argument must not be negative')\n  }\n}\n\nfunction alloc (that, size, fill, encoding) {\n  assertSize(size);\n  if (size <= 0) {\n    return createBuffer(that, size)\n  }\n  if (fill !== undefined) {\n    // Only pay attention to encoding if it's a string. This\n    // prevents accidentally sending in a number that would\n    // be interpretted as a start offset.\n    return typeof encoding === 'string'\n      ? createBuffer(that, size).fill(fill, encoding)\n      : createBuffer(that, size).fill(fill)\n  }\n  return createBuffer(that, size)\n}\n\n/**\n * Creates a new filled Buffer instance.\n * alloc(size[, fill[, encoding]])\n **/\nBuffer.alloc = function (size, fill, encoding) {\n  return alloc(null, size, fill, encoding)\n};\n\nfunction allocUnsafe (that, size) {\n  assertSize(size);\n  that = createBuffer(that, size < 0 ? 0 : checked(size) | 0);\n  if (!Buffer.TYPED_ARRAY_SUPPORT) {\n    for (var i = 0; i < size; ++i) {\n      that[i] = 0;\n    }\n  }\n  return that\n}\n\n/**\n * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.\n * */\nBuffer.allocUnsafe = function (size) {\n  return allocUnsafe(null, size)\n};\n/**\n * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.\n */\nBuffer.allocUnsafeSlow = function (size) {\n  return allocUnsafe(null, size)\n};\n\nfunction fromString (that, string, encoding) {\n  if (typeof encoding !== 'string' || encoding === '') {\n    encoding = 'utf8';\n  }\n\n  if (!Buffer.isEncoding(encoding)) {\n    throw new TypeError('\"encoding\" must be a valid string encoding')\n  }\n\n  var length = byteLength(string, encoding) | 0;\n  that = createBuffer(that, length);\n\n  var actual = that.write(string, encoding);\n\n  if (actual !== length) {\n    // Writing a hex string, for example, that contains invalid characters will\n    // cause everything after the first invalid character to be ignored. (e.g.\n    // 'abxxcd' will be treated as 'ab')\n    that = that.slice(0, actual);\n  }\n\n  return that\n}\n\nfunction fromArrayLike (that, array) {\n  var length = array.length < 0 ? 0 : checked(array.length) | 0;\n  that = createBuffer(that, length);\n  for (var i = 0; i < length; i += 1) {\n    that[i] = array[i] & 255;\n  }\n  return that\n}\n\nfunction fromArrayBuffer (that, array, byteOffset, length) {\n  array.byteLength; // this throws if `array` is not a valid ArrayBuffer\n\n  if (byteOffset < 0 || array.byteLength < byteOffset) {\n    throw new RangeError('\\'offset\\' is out of bounds')\n  }\n\n  if (array.byteLength < byteOffset + (length || 0)) {\n    throw new RangeError('\\'length\\' is out of bounds')\n  }\n\n  if (byteOffset === undefined && length === undefined) {\n    array = new Uint8Array(array);\n  } else if (length === undefined) {\n    array = new Uint8Array(array, byteOffset);\n  } else {\n    array = new Uint8Array(array, byteOffset, length);\n  }\n\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    // Return an augmented `Uint8Array` instance, for best performance\n    that = array;\n    that.__proto__ = Buffer.prototype;\n  } else {\n    // Fallback: Return an object instance of the Buffer class\n    that = fromArrayLike(that, array);\n  }\n  return that\n}\n\nfunction fromObject (that, obj) {\n  if (internalIsBuffer(obj)) {\n    var len = checked(obj.length) | 0;\n    that = createBuffer(that, len);\n\n    if (that.length === 0) {\n      return that\n    }\n\n    obj.copy(that, 0, 0, len);\n    return that\n  }\n\n  if (obj) {\n    if ((typeof ArrayBuffer !== 'undefined' &&\n        obj.buffer instanceof ArrayBuffer) || 'length' in obj) {\n      if (typeof obj.length !== 'number' || isnan(obj.length)) {\n        return createBuffer(that, 0)\n      }\n      return fromArrayLike(that, obj)\n    }\n\n    if (obj.type === 'Buffer' && isArray(obj.data)) {\n      return fromArrayLike(that, obj.data)\n    }\n  }\n\n  throw new TypeError('First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.')\n}\n\nfunction checked (length) {\n  // Note: cannot use `length < kMaxLength()` here because that fails when\n  // length is NaN (which is otherwise coerced to zero.)\n  if (length >= kMaxLength()) {\n    throw new RangeError('Attempt to allocate Buffer larger than maximum ' +\n                         'size: 0x' + kMaxLength().toString(16) + ' bytes')\n  }\n  return length | 0\n}\nBuffer.isBuffer = isBuffer;\nfunction internalIsBuffer (b) {\n  return !!(b != null && b._isBuffer)\n}\n\nBuffer.compare = function compare (a, b) {\n  if (!internalIsBuffer(a) || !internalIsBuffer(b)) {\n    throw new TypeError('Arguments must be Buffers')\n  }\n\n  if (a === b) return 0\n\n  var x = a.length;\n  var y = b.length;\n\n  for (var i = 0, len = Math.min(x, y); i < len; ++i) {\n    if (a[i] !== b[i]) {\n      x = a[i];\n      y = b[i];\n      break\n    }\n  }\n\n  if (x < y) return -1\n  if (y < x) return 1\n  return 0\n};\n\nBuffer.isEncoding = function isEncoding (encoding) {\n  switch (String(encoding).toLowerCase()) {\n    case 'hex':\n    case 'utf8':\n    case 'utf-8':\n    case 'ascii':\n    case 'latin1':\n    case 'binary':\n    case 'base64':\n    case 'ucs2':\n    case 'ucs-2':\n    case 'utf16le':\n    case 'utf-16le':\n      return true\n    default:\n      return false\n  }\n};\n\nBuffer.concat = function concat (list, length) {\n  if (!isArray(list)) {\n    throw new TypeError('\"list\" argument must be an Array of Buffers')\n  }\n\n  if (list.length === 0) {\n    return Buffer.alloc(0)\n  }\n\n  var i;\n  if (length === undefined) {\n    length = 0;\n    for (i = 0; i < list.length; ++i) {\n      length += list[i].length;\n    }\n  }\n\n  var buffer = Buffer.allocUnsafe(length);\n  var pos = 0;\n  for (i = 0; i < list.length; ++i) {\n    var buf = list[i];\n    if (!internalIsBuffer(buf)) {\n      throw new TypeError('\"list\" argument must be an Array of Buffers')\n    }\n    buf.copy(buffer, pos);\n    pos += buf.length;\n  }\n  return buffer\n};\n\nfunction byteLength (string, encoding) {\n  if (internalIsBuffer(string)) {\n    return string.length\n  }\n  if (typeof ArrayBuffer !== 'undefined' && typeof ArrayBuffer.isView === 'function' &&\n      (ArrayBuffer.isView(string) || string instanceof ArrayBuffer)) {\n    return string.byteLength\n  }\n  if (typeof string !== 'string') {\n    string = '' + string;\n  }\n\n  var len = string.length;\n  if (len === 0) return 0\n\n  // Use a for loop to avoid recursion\n  var loweredCase = false;\n  for (;;) {\n    switch (encoding) {\n      case 'ascii':\n      case 'latin1':\n      case 'binary':\n        return len\n      case 'utf8':\n      case 'utf-8':\n      case undefined:\n        return utf8ToBytes(string).length\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return len * 2\n      case 'hex':\n        return len >>> 1\n      case 'base64':\n        return base64ToBytes(string).length\n      default:\n        if (loweredCase) return utf8ToBytes(string).length // assume utf8\n        encoding = ('' + encoding).toLowerCase();\n        loweredCase = true;\n    }\n  }\n}\nBuffer.byteLength = byteLength;\n\nfunction slowToString (encoding, start, end) {\n  var loweredCase = false;\n\n  // No need to verify that \"this.length <= MAX_UINT32\" since it's a read-only\n  // property of a typed array.\n\n  // This behaves neither like String nor Uint8Array in that we set start/end\n  // to their upper/lower bounds if the value passed is out of range.\n  // undefined is handled specially as per ECMA-262 6th Edition,\n  // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.\n  if (start === undefined || start < 0) {\n    start = 0;\n  }\n  // Return early if start > this.length. Done here to prevent potential uint32\n  // coercion fail below.\n  if (start > this.length) {\n    return ''\n  }\n\n  if (end === undefined || end > this.length) {\n    end = this.length;\n  }\n\n  if (end <= 0) {\n    return ''\n  }\n\n  // Force coersion to uint32. This will also coerce falsey/NaN values to 0.\n  end >>>= 0;\n  start >>>= 0;\n\n  if (end <= start) {\n    return ''\n  }\n\n  if (!encoding) encoding = 'utf8';\n\n  while (true) {\n    switch (encoding) {\n      case 'hex':\n        return hexSlice(this, start, end)\n\n      case 'utf8':\n      case 'utf-8':\n        return utf8Slice(this, start, end)\n\n      case 'ascii':\n        return asciiSlice(this, start, end)\n\n      case 'latin1':\n      case 'binary':\n        return latin1Slice(this, start, end)\n\n      case 'base64':\n        return base64Slice(this, start, end)\n\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return utf16leSlice(this, start, end)\n\n      default:\n        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)\n        encoding = (encoding + '').toLowerCase();\n        loweredCase = true;\n    }\n  }\n}\n\n// The property is used by `Buffer.isBuffer` and `is-buffer` (in Safari 5-7) to detect\n// Buffer instances.\nBuffer.prototype._isBuffer = true;\n\nfunction swap (b, n, m) {\n  var i = b[n];\n  b[n] = b[m];\n  b[m] = i;\n}\n\nBuffer.prototype.swap16 = function swap16 () {\n  var len = this.length;\n  if (len % 2 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 16-bits')\n  }\n  for (var i = 0; i < len; i += 2) {\n    swap(this, i, i + 1);\n  }\n  return this\n};\n\nBuffer.prototype.swap32 = function swap32 () {\n  var len = this.length;\n  if (len % 4 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 32-bits')\n  }\n  for (var i = 0; i < len; i += 4) {\n    swap(this, i, i + 3);\n    swap(this, i + 1, i + 2);\n  }\n  return this\n};\n\nBuffer.prototype.swap64 = function swap64 () {\n  var len = this.length;\n  if (len % 8 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 64-bits')\n  }\n  for (var i = 0; i < len; i += 8) {\n    swap(this, i, i + 7);\n    swap(this, i + 1, i + 6);\n    swap(this, i + 2, i + 5);\n    swap(this, i + 3, i + 4);\n  }\n  return this\n};\n\nBuffer.prototype.toString = function toString () {\n  var length = this.length | 0;\n  if (length === 0) return ''\n  if (arguments.length === 0) return utf8Slice(this, 0, length)\n  return slowToString.apply(this, arguments)\n};\n\nBuffer.prototype.equals = function equals (b) {\n  if (!internalIsBuffer(b)) throw new TypeError('Argument must be a Buffer')\n  if (this === b) return true\n  return Buffer.compare(this, b) === 0\n};\n\nBuffer.prototype.inspect = function inspect () {\n  var str = '';\n  var max = INSPECT_MAX_BYTES;\n  if (this.length > 0) {\n    str = this.toString('hex', 0, max).match(/.{2}/g).join(' ');\n    if (this.length > max) str += ' ... ';\n  }\n  return '<Buffer ' + str + '>'\n};\n\nBuffer.prototype.compare = function compare (target, start, end, thisStart, thisEnd) {\n  if (!internalIsBuffer(target)) {\n    throw new TypeError('Argument must be a Buffer')\n  }\n\n  if (start === undefined) {\n    start = 0;\n  }\n  if (end === undefined) {\n    end = target ? target.length : 0;\n  }\n  if (thisStart === undefined) {\n    thisStart = 0;\n  }\n  if (thisEnd === undefined) {\n    thisEnd = this.length;\n  }\n\n  if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {\n    throw new RangeError('out of range index')\n  }\n\n  if (thisStart >= thisEnd && start >= end) {\n    return 0\n  }\n  if (thisStart >= thisEnd) {\n    return -1\n  }\n  if (start >= end) {\n    return 1\n  }\n\n  start >>>= 0;\n  end >>>= 0;\n  thisStart >>>= 0;\n  thisEnd >>>= 0;\n\n  if (this === target) return 0\n\n  var x = thisEnd - thisStart;\n  var y = end - start;\n  var len = Math.min(x, y);\n\n  var thisCopy = this.slice(thisStart, thisEnd);\n  var targetCopy = target.slice(start, end);\n\n  for (var i = 0; i < len; ++i) {\n    if (thisCopy[i] !== targetCopy[i]) {\n      x = thisCopy[i];\n      y = targetCopy[i];\n      break\n    }\n  }\n\n  if (x < y) return -1\n  if (y < x) return 1\n  return 0\n};\n\n// Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,\n// OR the last index of `val` in `buffer` at offset <= `byteOffset`.\n//\n// Arguments:\n// - buffer - a Buffer to search\n// - val - a string, Buffer, or number\n// - byteOffset - an index into `buffer`; will be clamped to an int32\n// - encoding - an optional encoding, relevant is val is a string\n// - dir - true for indexOf, false for lastIndexOf\nfunction bidirectionalIndexOf (buffer, val, byteOffset, encoding, dir) {\n  // Empty buffer means no match\n  if (buffer.length === 0) return -1\n\n  // Normalize byteOffset\n  if (typeof byteOffset === 'string') {\n    encoding = byteOffset;\n    byteOffset = 0;\n  } else if (byteOffset > 0x7fffffff) {\n    byteOffset = 0x7fffffff;\n  } else if (byteOffset < -0x80000000) {\n    byteOffset = -0x80000000;\n  }\n  byteOffset = +byteOffset;  // Coerce to Number.\n  if (isNaN(byteOffset)) {\n    // byteOffset: it it's undefined, null, NaN, \"foo\", etc, search whole buffer\n    byteOffset = dir ? 0 : (buffer.length - 1);\n  }\n\n  // Normalize byteOffset: negative offsets start from the end of the buffer\n  if (byteOffset < 0) byteOffset = buffer.length + byteOffset;\n  if (byteOffset >= buffer.length) {\n    if (dir) return -1\n    else byteOffset = buffer.length - 1;\n  } else if (byteOffset < 0) {\n    if (dir) byteOffset = 0;\n    else return -1\n  }\n\n  // Normalize val\n  if (typeof val === 'string') {\n    val = Buffer.from(val, encoding);\n  }\n\n  // Finally, search either indexOf (if dir is true) or lastIndexOf\n  if (internalIsBuffer(val)) {\n    // Special case: looking for empty string/buffer always fails\n    if (val.length === 0) {\n      return -1\n    }\n    return arrayIndexOf(buffer, val, byteOffset, encoding, dir)\n  } else if (typeof val === 'number') {\n    val = val & 0xFF; // Search for a byte value [0-255]\n    if (Buffer.TYPED_ARRAY_SUPPORT &&\n        typeof Uint8Array.prototype.indexOf === 'function') {\n      if (dir) {\n        return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset)\n      } else {\n        return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset)\n      }\n    }\n    return arrayIndexOf(buffer, [ val ], byteOffset, encoding, dir)\n  }\n\n  throw new TypeError('val must be string, number or Buffer')\n}\n\nfunction arrayIndexOf (arr, val, byteOffset, encoding, dir) {\n  var indexSize = 1;\n  var arrLength = arr.length;\n  var valLength = val.length;\n\n  if (encoding !== undefined) {\n    encoding = String(encoding).toLowerCase();\n    if (encoding === 'ucs2' || encoding === 'ucs-2' ||\n        encoding === 'utf16le' || encoding === 'utf-16le') {\n      if (arr.length < 2 || val.length < 2) {\n        return -1\n      }\n      indexSize = 2;\n      arrLength /= 2;\n      valLength /= 2;\n      byteOffset /= 2;\n    }\n  }\n\n  function read (buf, i) {\n    if (indexSize === 1) {\n      return buf[i]\n    } else {\n      return buf.readUInt16BE(i * indexSize)\n    }\n  }\n\n  var i;\n  if (dir) {\n    var foundIndex = -1;\n    for (i = byteOffset; i < arrLength; i++) {\n      if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {\n        if (foundIndex === -1) foundIndex = i;\n        if (i - foundIndex + 1 === valLength) return foundIndex * indexSize\n      } else {\n        if (foundIndex !== -1) i -= i - foundIndex;\n        foundIndex = -1;\n      }\n    }\n  } else {\n    if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength;\n    for (i = byteOffset; i >= 0; i--) {\n      var found = true;\n      for (var j = 0; j < valLength; j++) {\n        if (read(arr, i + j) !== read(val, j)) {\n          found = false;\n          break\n        }\n      }\n      if (found) return i\n    }\n  }\n\n  return -1\n}\n\nBuffer.prototype.includes = function includes (val, byteOffset, encoding) {\n  return this.indexOf(val, byteOffset, encoding) !== -1\n};\n\nBuffer.prototype.indexOf = function indexOf (val, byteOffset, encoding) {\n  return bidirectionalIndexOf(this, val, byteOffset, encoding, true)\n};\n\nBuffer.prototype.lastIndexOf = function lastIndexOf (val, byteOffset, encoding) {\n  return bidirectionalIndexOf(this, val, byteOffset, encoding, false)\n};\n\nfunction hexWrite (buf, string, offset, length) {\n  offset = Number(offset) || 0;\n  var remaining = buf.length - offset;\n  if (!length) {\n    length = remaining;\n  } else {\n    length = Number(length);\n    if (length > remaining) {\n      length = remaining;\n    }\n  }\n\n  // must be an even number of digits\n  var strLen = string.length;\n  if (strLen % 2 !== 0) throw new TypeError('Invalid hex string')\n\n  if (length > strLen / 2) {\n    length = strLen / 2;\n  }\n  for (var i = 0; i < length; ++i) {\n    var parsed = parseInt(string.substr(i * 2, 2), 16);\n    if (isNaN(parsed)) return i\n    buf[offset + i] = parsed;\n  }\n  return i\n}\n\nfunction utf8Write (buf, string, offset, length) {\n  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)\n}\n\nfunction asciiWrite (buf, string, offset, length) {\n  return blitBuffer(asciiToBytes(string), buf, offset, length)\n}\n\nfunction latin1Write (buf, string, offset, length) {\n  return asciiWrite(buf, string, offset, length)\n}\n\nfunction base64Write (buf, string, offset, length) {\n  return blitBuffer(base64ToBytes(string), buf, offset, length)\n}\n\nfunction ucs2Write (buf, string, offset, length) {\n  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)\n}\n\nBuffer.prototype.write = function write (string, offset, length, encoding) {\n  // Buffer#write(string)\n  if (offset === undefined) {\n    encoding = 'utf8';\n    length = this.length;\n    offset = 0;\n  // Buffer#write(string, encoding)\n  } else if (length === undefined && typeof offset === 'string') {\n    encoding = offset;\n    length = this.length;\n    offset = 0;\n  // Buffer#write(string, offset[, length][, encoding])\n  } else if (isFinite(offset)) {\n    offset = offset | 0;\n    if (isFinite(length)) {\n      length = length | 0;\n      if (encoding === undefined) encoding = 'utf8';\n    } else {\n      encoding = length;\n      length = undefined;\n    }\n  // legacy write(string, encoding, offset, length) - remove in v0.13\n  } else {\n    throw new Error(\n      'Buffer.write(string, encoding, offset[, length]) is no longer supported'\n    )\n  }\n\n  var remaining = this.length - offset;\n  if (length === undefined || length > remaining) length = remaining;\n\n  if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {\n    throw new RangeError('Attempt to write outside buffer bounds')\n  }\n\n  if (!encoding) encoding = 'utf8';\n\n  var loweredCase = false;\n  for (;;) {\n    switch (encoding) {\n      case 'hex':\n        return hexWrite(this, string, offset, length)\n\n      case 'utf8':\n      case 'utf-8':\n        return utf8Write(this, string, offset, length)\n\n      case 'ascii':\n        return asciiWrite(this, string, offset, length)\n\n      case 'latin1':\n      case 'binary':\n        return latin1Write(this, string, offset, length)\n\n      case 'base64':\n        // Warning: maxLength not taken into account in base64Write\n        return base64Write(this, string, offset, length)\n\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return ucs2Write(this, string, offset, length)\n\n      default:\n        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)\n        encoding = ('' + encoding).toLowerCase();\n        loweredCase = true;\n    }\n  }\n};\n\nBuffer.prototype.toJSON = function toJSON () {\n  return {\n    type: 'Buffer',\n    data: Array.prototype.slice.call(this._arr || this, 0)\n  }\n};\n\nfunction base64Slice (buf, start, end) {\n  if (start === 0 && end === buf.length) {\n    return fromByteArray(buf)\n  } else {\n    return fromByteArray(buf.slice(start, end))\n  }\n}\n\nfunction utf8Slice (buf, start, end) {\n  end = Math.min(buf.length, end);\n  var res = [];\n\n  var i = start;\n  while (i < end) {\n    var firstByte = buf[i];\n    var codePoint = null;\n    var bytesPerSequence = (firstByte > 0xEF) ? 4\n      : (firstByte > 0xDF) ? 3\n      : (firstByte > 0xBF) ? 2\n      : 1;\n\n    if (i + bytesPerSequence <= end) {\n      var secondByte, thirdByte, fourthByte, tempCodePoint;\n\n      switch (bytesPerSequence) {\n        case 1:\n          if (firstByte < 0x80) {\n            codePoint = firstByte;\n          }\n          break\n        case 2:\n          secondByte = buf[i + 1];\n          if ((secondByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F);\n            if (tempCodePoint > 0x7F) {\n              codePoint = tempCodePoint;\n            }\n          }\n          break\n        case 3:\n          secondByte = buf[i + 1];\n          thirdByte = buf[i + 2];\n          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F);\n            if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {\n              codePoint = tempCodePoint;\n            }\n          }\n          break\n        case 4:\n          secondByte = buf[i + 1];\n          thirdByte = buf[i + 2];\n          fourthByte = buf[i + 3];\n          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F);\n            if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {\n              codePoint = tempCodePoint;\n            }\n          }\n      }\n    }\n\n    if (codePoint === null) {\n      // we did not generate a valid codePoint so insert a\n      // replacement char (U+FFFD) and advance only 1 byte\n      codePoint = 0xFFFD;\n      bytesPerSequence = 1;\n    } else if (codePoint > 0xFFFF) {\n      // encode to utf16 (surrogate pair dance)\n      codePoint -= 0x10000;\n      res.push(codePoint >>> 10 & 0x3FF | 0xD800);\n      codePoint = 0xDC00 | codePoint & 0x3FF;\n    }\n\n    res.push(codePoint);\n    i += bytesPerSequence;\n  }\n\n  return decodeCodePointsArray(res)\n}\n\n// Based on http://stackoverflow.com/a/22747272/680742, the browser with\n// the lowest limit is Chrome, with 0x10000 args.\n// We go 1 magnitude less, for safety\nvar MAX_ARGUMENTS_LENGTH = 0x1000;\n\nfunction decodeCodePointsArray (codePoints) {\n  var len = codePoints.length;\n  if (len <= MAX_ARGUMENTS_LENGTH) {\n    return String.fromCharCode.apply(String, codePoints) // avoid extra slice()\n  }\n\n  // Decode in chunks to avoid \"call stack size exceeded\".\n  var res = '';\n  var i = 0;\n  while (i < len) {\n    res += String.fromCharCode.apply(\n      String,\n      codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)\n    );\n  }\n  return res\n}\n\nfunction asciiSlice (buf, start, end) {\n  var ret = '';\n  end = Math.min(buf.length, end);\n\n  for (var i = start; i < end; ++i) {\n    ret += String.fromCharCode(buf[i] & 0x7F);\n  }\n  return ret\n}\n\nfunction latin1Slice (buf, start, end) {\n  var ret = '';\n  end = Math.min(buf.length, end);\n\n  for (var i = start; i < end; ++i) {\n    ret += String.fromCharCode(buf[i]);\n  }\n  return ret\n}\n\nfunction hexSlice (buf, start, end) {\n  var len = buf.length;\n\n  if (!start || start < 0) start = 0;\n  if (!end || end < 0 || end > len) end = len;\n\n  var out = '';\n  for (var i = start; i < end; ++i) {\n    out += toHex(buf[i]);\n  }\n  return out\n}\n\nfunction utf16leSlice (buf, start, end) {\n  var bytes = buf.slice(start, end);\n  var res = '';\n  for (var i = 0; i < bytes.length; i += 2) {\n    res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256);\n  }\n  return res\n}\n\nBuffer.prototype.slice = function slice (start, end) {\n  var len = this.length;\n  start = ~~start;\n  end = end === undefined ? len : ~~end;\n\n  if (start < 0) {\n    start += len;\n    if (start < 0) start = 0;\n  } else if (start > len) {\n    start = len;\n  }\n\n  if (end < 0) {\n    end += len;\n    if (end < 0) end = 0;\n  } else if (end > len) {\n    end = len;\n  }\n\n  if (end < start) end = start;\n\n  var newBuf;\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    newBuf = this.subarray(start, end);\n    newBuf.__proto__ = Buffer.prototype;\n  } else {\n    var sliceLen = end - start;\n    newBuf = new Buffer(sliceLen, undefined);\n    for (var i = 0; i < sliceLen; ++i) {\n      newBuf[i] = this[i + start];\n    }\n  }\n\n  return newBuf\n};\n\n/*\n * Need to make sure that buffer isn't trying to write out of bounds.\n */\nfunction checkOffset (offset, ext, length) {\n  if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')\n  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')\n}\n\nBuffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {\n  offset = offset | 0;\n  byteLength = byteLength | 0;\n  if (!noAssert) checkOffset(offset, byteLength, this.length);\n\n  var val = this[offset];\n  var mul = 1;\n  var i = 0;\n  while (++i < byteLength && (mul *= 0x100)) {\n    val += this[offset + i] * mul;\n  }\n\n  return val\n};\n\nBuffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {\n  offset = offset | 0;\n  byteLength = byteLength | 0;\n  if (!noAssert) {\n    checkOffset(offset, byteLength, this.length);\n  }\n\n  var val = this[offset + --byteLength];\n  var mul = 1;\n  while (byteLength > 0 && (mul *= 0x100)) {\n    val += this[offset + --byteLength] * mul;\n  }\n\n  return val\n};\n\nBuffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 1, this.length);\n  return this[offset]\n};\n\nBuffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length);\n  return this[offset] | (this[offset + 1] << 8)\n};\n\nBuffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length);\n  return (this[offset] << 8) | this[offset + 1]\n};\n\nBuffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length);\n\n  return ((this[offset]) |\n      (this[offset + 1] << 8) |\n      (this[offset + 2] << 16)) +\n      (this[offset + 3] * 0x1000000)\n};\n\nBuffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length);\n\n  return (this[offset] * 0x1000000) +\n    ((this[offset + 1] << 16) |\n    (this[offset + 2] << 8) |\n    this[offset + 3])\n};\n\nBuffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {\n  offset = offset | 0;\n  byteLength = byteLength | 0;\n  if (!noAssert) checkOffset(offset, byteLength, this.length);\n\n  var val = this[offset];\n  var mul = 1;\n  var i = 0;\n  while (++i < byteLength && (mul *= 0x100)) {\n    val += this[offset + i] * mul;\n  }\n  mul *= 0x80;\n\n  if (val >= mul) val -= Math.pow(2, 8 * byteLength);\n\n  return val\n};\n\nBuffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {\n  offset = offset | 0;\n  byteLength = byteLength | 0;\n  if (!noAssert) checkOffset(offset, byteLength, this.length);\n\n  var i = byteLength;\n  var mul = 1;\n  var val = this[offset + --i];\n  while (i > 0 && (mul *= 0x100)) {\n    val += this[offset + --i] * mul;\n  }\n  mul *= 0x80;\n\n  if (val >= mul) val -= Math.pow(2, 8 * byteLength);\n\n  return val\n};\n\nBuffer.prototype.readInt8 = function readInt8 (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 1, this.length);\n  if (!(this[offset] & 0x80)) return (this[offset])\n  return ((0xff - this[offset] + 1) * -1)\n};\n\nBuffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length);\n  var val = this[offset] | (this[offset + 1] << 8);\n  return (val & 0x8000) ? val | 0xFFFF0000 : val\n};\n\nBuffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length);\n  var val = this[offset + 1] | (this[offset] << 8);\n  return (val & 0x8000) ? val | 0xFFFF0000 : val\n};\n\nBuffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length);\n\n  return (this[offset]) |\n    (this[offset + 1] << 8) |\n    (this[offset + 2] << 16) |\n    (this[offset + 3] << 24)\n};\n\nBuffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length);\n\n  return (this[offset] << 24) |\n    (this[offset + 1] << 16) |\n    (this[offset + 2] << 8) |\n    (this[offset + 3])\n};\n\nBuffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length);\n  return read(this, offset, true, 23, 4)\n};\n\nBuffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length);\n  return read(this, offset, false, 23, 4)\n};\n\nBuffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 8, this.length);\n  return read(this, offset, true, 52, 8)\n};\n\nBuffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 8, this.length);\n  return read(this, offset, false, 52, 8)\n};\n\nfunction checkInt (buf, value, offset, ext, max, min) {\n  if (!internalIsBuffer(buf)) throw new TypeError('\"buffer\" argument must be a Buffer instance')\n  if (value > max || value < min) throw new RangeError('\"value\" argument is out of bounds')\n  if (offset + ext > buf.length) throw new RangeError('Index out of range')\n}\n\nBuffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {\n  value = +value;\n  offset = offset | 0;\n  byteLength = byteLength | 0;\n  if (!noAssert) {\n    var maxBytes = Math.pow(2, 8 * byteLength) - 1;\n    checkInt(this, value, offset, byteLength, maxBytes, 0);\n  }\n\n  var mul = 1;\n  var i = 0;\n  this[offset] = value & 0xFF;\n  while (++i < byteLength && (mul *= 0x100)) {\n    this[offset + i] = (value / mul) & 0xFF;\n  }\n\n  return offset + byteLength\n};\n\nBuffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {\n  value = +value;\n  offset = offset | 0;\n  byteLength = byteLength | 0;\n  if (!noAssert) {\n    var maxBytes = Math.pow(2, 8 * byteLength) - 1;\n    checkInt(this, value, offset, byteLength, maxBytes, 0);\n  }\n\n  var i = byteLength - 1;\n  var mul = 1;\n  this[offset + i] = value & 0xFF;\n  while (--i >= 0 && (mul *= 0x100)) {\n    this[offset + i] = (value / mul) & 0xFF;\n  }\n\n  return offset + byteLength\n};\n\nBuffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {\n  value = +value;\n  offset = offset | 0;\n  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0);\n  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value);\n  this[offset] = (value & 0xff);\n  return offset + 1\n};\n\nfunction objectWriteUInt16 (buf, value, offset, littleEndian) {\n  if (value < 0) value = 0xffff + value + 1;\n  for (var i = 0, j = Math.min(buf.length - offset, 2); i < j; ++i) {\n    buf[offset + i] = (value & (0xff << (8 * (littleEndian ? i : 1 - i)))) >>>\n      (littleEndian ? i : 1 - i) * 8;\n  }\n}\n\nBuffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {\n  value = +value;\n  offset = offset | 0;\n  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0);\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value & 0xff);\n    this[offset + 1] = (value >>> 8);\n  } else {\n    objectWriteUInt16(this, value, offset, true);\n  }\n  return offset + 2\n};\n\nBuffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {\n  value = +value;\n  offset = offset | 0;\n  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0);\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 8);\n    this[offset + 1] = (value & 0xff);\n  } else {\n    objectWriteUInt16(this, value, offset, false);\n  }\n  return offset + 2\n};\n\nfunction objectWriteUInt32 (buf, value, offset, littleEndian) {\n  if (value < 0) value = 0xffffffff + value + 1;\n  for (var i = 0, j = Math.min(buf.length - offset, 4); i < j; ++i) {\n    buf[offset + i] = (value >>> (littleEndian ? i : 3 - i) * 8) & 0xff;\n  }\n}\n\nBuffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {\n  value = +value;\n  offset = offset | 0;\n  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0);\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset + 3] = (value >>> 24);\n    this[offset + 2] = (value >>> 16);\n    this[offset + 1] = (value >>> 8);\n    this[offset] = (value & 0xff);\n  } else {\n    objectWriteUInt32(this, value, offset, true);\n  }\n  return offset + 4\n};\n\nBuffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {\n  value = +value;\n  offset = offset | 0;\n  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0);\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 24);\n    this[offset + 1] = (value >>> 16);\n    this[offset + 2] = (value >>> 8);\n    this[offset + 3] = (value & 0xff);\n  } else {\n    objectWriteUInt32(this, value, offset, false);\n  }\n  return offset + 4\n};\n\nBuffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {\n  value = +value;\n  offset = offset | 0;\n  if (!noAssert) {\n    var limit = Math.pow(2, 8 * byteLength - 1);\n\n    checkInt(this, value, offset, byteLength, limit - 1, -limit);\n  }\n\n  var i = 0;\n  var mul = 1;\n  var sub = 0;\n  this[offset] = value & 0xFF;\n  while (++i < byteLength && (mul *= 0x100)) {\n    if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {\n      sub = 1;\n    }\n    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF;\n  }\n\n  return offset + byteLength\n};\n\nBuffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {\n  value = +value;\n  offset = offset | 0;\n  if (!noAssert) {\n    var limit = Math.pow(2, 8 * byteLength - 1);\n\n    checkInt(this, value, offset, byteLength, limit - 1, -limit);\n  }\n\n  var i = byteLength - 1;\n  var mul = 1;\n  var sub = 0;\n  this[offset + i] = value & 0xFF;\n  while (--i >= 0 && (mul *= 0x100)) {\n    if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {\n      sub = 1;\n    }\n    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF;\n  }\n\n  return offset + byteLength\n};\n\nBuffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {\n  value = +value;\n  offset = offset | 0;\n  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80);\n  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value);\n  if (value < 0) value = 0xff + value + 1;\n  this[offset] = (value & 0xff);\n  return offset + 1\n};\n\nBuffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {\n  value = +value;\n  offset = offset | 0;\n  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000);\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value & 0xff);\n    this[offset + 1] = (value >>> 8);\n  } else {\n    objectWriteUInt16(this, value, offset, true);\n  }\n  return offset + 2\n};\n\nBuffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {\n  value = +value;\n  offset = offset | 0;\n  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000);\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 8);\n    this[offset + 1] = (value & 0xff);\n  } else {\n    objectWriteUInt16(this, value, offset, false);\n  }\n  return offset + 2\n};\n\nBuffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {\n  value = +value;\n  offset = offset | 0;\n  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000);\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value & 0xff);\n    this[offset + 1] = (value >>> 8);\n    this[offset + 2] = (value >>> 16);\n    this[offset + 3] = (value >>> 24);\n  } else {\n    objectWriteUInt32(this, value, offset, true);\n  }\n  return offset + 4\n};\n\nBuffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {\n  value = +value;\n  offset = offset | 0;\n  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000);\n  if (value < 0) value = 0xffffffff + value + 1;\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 24);\n    this[offset + 1] = (value >>> 16);\n    this[offset + 2] = (value >>> 8);\n    this[offset + 3] = (value & 0xff);\n  } else {\n    objectWriteUInt32(this, value, offset, false);\n  }\n  return offset + 4\n};\n\nfunction checkIEEE754 (buf, value, offset, ext, max, min) {\n  if (offset + ext > buf.length) throw new RangeError('Index out of range')\n  if (offset < 0) throw new RangeError('Index out of range')\n}\n\nfunction writeFloat (buf, value, offset, littleEndian, noAssert) {\n  if (!noAssert) {\n    checkIEEE754(buf, value, offset, 4);\n  }\n  write(buf, value, offset, littleEndian, 23, 4);\n  return offset + 4\n}\n\nBuffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {\n  return writeFloat(this, value, offset, true, noAssert)\n};\n\nBuffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {\n  return writeFloat(this, value, offset, false, noAssert)\n};\n\nfunction writeDouble (buf, value, offset, littleEndian, noAssert) {\n  if (!noAssert) {\n    checkIEEE754(buf, value, offset, 8);\n  }\n  write(buf, value, offset, littleEndian, 52, 8);\n  return offset + 8\n}\n\nBuffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {\n  return writeDouble(this, value, offset, true, noAssert)\n};\n\nBuffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {\n  return writeDouble(this, value, offset, false, noAssert)\n};\n\n// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)\nBuffer.prototype.copy = function copy (target, targetStart, start, end) {\n  if (!start) start = 0;\n  if (!end && end !== 0) end = this.length;\n  if (targetStart >= target.length) targetStart = target.length;\n  if (!targetStart) targetStart = 0;\n  if (end > 0 && end < start) end = start;\n\n  // Copy 0 bytes; we're done\n  if (end === start) return 0\n  if (target.length === 0 || this.length === 0) return 0\n\n  // Fatal error conditions\n  if (targetStart < 0) {\n    throw new RangeError('targetStart out of bounds')\n  }\n  if (start < 0 || start >= this.length) throw new RangeError('sourceStart out of bounds')\n  if (end < 0) throw new RangeError('sourceEnd out of bounds')\n\n  // Are we oob?\n  if (end > this.length) end = this.length;\n  if (target.length - targetStart < end - start) {\n    end = target.length - targetStart + start;\n  }\n\n  var len = end - start;\n  var i;\n\n  if (this === target && start < targetStart && targetStart < end) {\n    // descending copy from end\n    for (i = len - 1; i >= 0; --i) {\n      target[i + targetStart] = this[i + start];\n    }\n  } else if (len < 1000 || !Buffer.TYPED_ARRAY_SUPPORT) {\n    // ascending copy from start\n    for (i = 0; i < len; ++i) {\n      target[i + targetStart] = this[i + start];\n    }\n  } else {\n    Uint8Array.prototype.set.call(\n      target,\n      this.subarray(start, start + len),\n      targetStart\n    );\n  }\n\n  return len\n};\n\n// Usage:\n//    buffer.fill(number[, offset[, end]])\n//    buffer.fill(buffer[, offset[, end]])\n//    buffer.fill(string[, offset[, end]][, encoding])\nBuffer.prototype.fill = function fill (val, start, end, encoding) {\n  // Handle string cases:\n  if (typeof val === 'string') {\n    if (typeof start === 'string') {\n      encoding = start;\n      start = 0;\n      end = this.length;\n    } else if (typeof end === 'string') {\n      encoding = end;\n      end = this.length;\n    }\n    if (val.length === 1) {\n      var code = val.charCodeAt(0);\n      if (code < 256) {\n        val = code;\n      }\n    }\n    if (encoding !== undefined && typeof encoding !== 'string') {\n      throw new TypeError('encoding must be a string')\n    }\n    if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {\n      throw new TypeError('Unknown encoding: ' + encoding)\n    }\n  } else if (typeof val === 'number') {\n    val = val & 255;\n  }\n\n  // Invalid ranges are not set to a default, so can range check early.\n  if (start < 0 || this.length < start || this.length < end) {\n    throw new RangeError('Out of range index')\n  }\n\n  if (end <= start) {\n    return this\n  }\n\n  start = start >>> 0;\n  end = end === undefined ? this.length : end >>> 0;\n\n  if (!val) val = 0;\n\n  var i;\n  if (typeof val === 'number') {\n    for (i = start; i < end; ++i) {\n      this[i] = val;\n    }\n  } else {\n    var bytes = internalIsBuffer(val)\n      ? val\n      : utf8ToBytes(new Buffer(val, encoding).toString());\n    var len = bytes.length;\n    for (i = 0; i < end - start; ++i) {\n      this[i + start] = bytes[i % len];\n    }\n  }\n\n  return this\n};\n\n// HELPER FUNCTIONS\n// ================\n\nvar INVALID_BASE64_RE = /[^+\\/0-9A-Za-z-_]/g;\n\nfunction base64clean (str) {\n  // Node strips out invalid characters like \\n and \\t from the string, base64-js does not\n  str = stringtrim(str).replace(INVALID_BASE64_RE, '');\n  // Node converts strings with length < 2 to ''\n  if (str.length < 2) return ''\n  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not\n  while (str.length % 4 !== 0) {\n    str = str + '=';\n  }\n  return str\n}\n\nfunction stringtrim (str) {\n  if (str.trim) return str.trim()\n  return str.replace(/^\\s+|\\s+$/g, '')\n}\n\nfunction toHex (n) {\n  if (n < 16) return '0' + n.toString(16)\n  return n.toString(16)\n}\n\nfunction utf8ToBytes (string, units) {\n  units = units || Infinity;\n  var codePoint;\n  var length = string.length;\n  var leadSurrogate = null;\n  var bytes = [];\n\n  for (var i = 0; i < length; ++i) {\n    codePoint = string.charCodeAt(i);\n\n    // is surrogate component\n    if (codePoint > 0xD7FF && codePoint < 0xE000) {\n      // last char was a lead\n      if (!leadSurrogate) {\n        // no lead yet\n        if (codePoint > 0xDBFF) {\n          // unexpected trail\n          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);\n          continue\n        } else if (i + 1 === length) {\n          // unpaired lead\n          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);\n          continue\n        }\n\n        // valid lead\n        leadSurrogate = codePoint;\n\n        continue\n      }\n\n      // 2 leads in a row\n      if (codePoint < 0xDC00) {\n        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);\n        leadSurrogate = codePoint;\n        continue\n      }\n\n      // valid surrogate pair\n      codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000;\n    } else if (leadSurrogate) {\n      // valid bmp char, but last char was a lead\n      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);\n    }\n\n    leadSurrogate = null;\n\n    // encode utf8\n    if (codePoint < 0x80) {\n      if ((units -= 1) < 0) break\n      bytes.push(codePoint);\n    } else if (codePoint < 0x800) {\n      if ((units -= 2) < 0) break\n      bytes.push(\n        codePoint >> 0x6 | 0xC0,\n        codePoint & 0x3F | 0x80\n      );\n    } else if (codePoint < 0x10000) {\n      if ((units -= 3) < 0) break\n      bytes.push(\n        codePoint >> 0xC | 0xE0,\n        codePoint >> 0x6 & 0x3F | 0x80,\n        codePoint & 0x3F | 0x80\n      );\n    } else if (codePoint < 0x110000) {\n      if ((units -= 4) < 0) break\n      bytes.push(\n        codePoint >> 0x12 | 0xF0,\n        codePoint >> 0xC & 0x3F | 0x80,\n        codePoint >> 0x6 & 0x3F | 0x80,\n        codePoint & 0x3F | 0x80\n      );\n    } else {\n      throw new Error('Invalid code point')\n    }\n  }\n\n  return bytes\n}\n\nfunction asciiToBytes (str) {\n  var byteArray = [];\n  for (var i = 0; i < str.length; ++i) {\n    // Node's code seems to be doing this and not & 0x7F..\n    byteArray.push(str.charCodeAt(i) & 0xFF);\n  }\n  return byteArray\n}\n\nfunction utf16leToBytes (str, units) {\n  var c, hi, lo;\n  var byteArray = [];\n  for (var i = 0; i < str.length; ++i) {\n    if ((units -= 2) < 0) break\n\n    c = str.charCodeAt(i);\n    hi = c >> 8;\n    lo = c % 256;\n    byteArray.push(lo);\n    byteArray.push(hi);\n  }\n\n  return byteArray\n}\n\n\nfunction base64ToBytes (str) {\n  return toByteArray(base64clean(str))\n}\n\nfunction blitBuffer (src, dst, offset, length) {\n  for (var i = 0; i < length; ++i) {\n    if ((i + offset >= dst.length) || (i >= src.length)) break\n    dst[i + offset] = src[i];\n  }\n  return i\n}\n\nfunction isnan (val) {\n  return val !== val // eslint-disable-line no-self-compare\n}\n\n\n// the following is from is-buffer, also by Feross Aboukhadijeh and with same lisence\n// The _isBuffer check is for Safari 5-7 support, because it's missing\n// Object.prototype.constructor. Remove this eventually\nfunction isBuffer(obj) {\n  return obj != null && (!!obj._isBuffer || isFastBuffer(obj) || isSlowBuffer(obj))\n}\n\nfunction isFastBuffer (obj) {\n  return !!obj.constructor && typeof obj.constructor.isBuffer === 'function' && obj.constructor.isBuffer(obj)\n}\n\n// For Node v0.10 support. Remove this eventually.\nfunction isSlowBuffer (obj) {\n  return typeof obj.readFloatLE === 'function' && typeof obj.slice === 'function' && isFastBuffer(obj.slice(0, 0))\n}\n\nclass CsvError extends Error {\n  constructor(code, message, options, ...contexts) {\n    if(Array.isArray(message)) message = message.join(' ').trim();\n    super(message);\n    if(Error.captureStackTrace !== undefined){\n      Error.captureStackTrace(this, CsvError);\n    }\n    this.code = code;\n    for(const context of contexts){\n      for(const key in context){\n        const value = context[key];\n        this[key] = isBuffer(value) ? value.toString(options.encoding) : value == null ? value : JSON.parse(JSON.stringify(value));\n      }\n    }\n  }\n}\n\nconst is_object = function(obj){\n  return (typeof obj === 'object' && obj !== null && !Array.isArray(obj));\n};\n\nconst normalize_columns_array = function(columns){\n  const normalizedColumns = [];\n  for(let i = 0, l = columns.length; i < l; i++){\n    const column = columns[i];\n    if(column === undefined || column === null || column === false){\n      normalizedColumns[i] = { disabled: true };\n    }else if(typeof column === 'string'){\n      normalizedColumns[i] = { name: column };\n    }else if(is_object(column)){\n      if(typeof column.name !== 'string'){\n        throw new CsvError('CSV_OPTION_COLUMNS_MISSING_NAME', [\n          'Option columns missing name:',\n          `property \"name\" is required at position ${i}`,\n          'when column is an object literal'\n        ]);\n      }\n      normalizedColumns[i] = column;\n    }else {\n      throw new CsvError('CSV_INVALID_COLUMN_DEFINITION', [\n        'Invalid column definition:',\n        'expect a string or a literal object,',\n        `got ${JSON.stringify(column)} at position ${i}`\n      ]);\n    }\n  }\n  return normalizedColumns;\n};\n\nclass ResizeableBuffer{\n  constructor(size=100){\n    this.size = size;\n    this.length = 0;\n    this.buf = Buffer.allocUnsafe(size);\n  }\n  prepend(val){\n    if(isBuffer(val)){\n      const length = this.length + val.length;\n      if(length >= this.size){\n        this.resize();\n        if(length >= this.size){\n          throw Error('INVALID_BUFFER_STATE');\n        }\n      }\n      const buf = this.buf;\n      this.buf = Buffer.allocUnsafe(this.size);\n      val.copy(this.buf, 0);\n      buf.copy(this.buf, val.length);\n      this.length += val.length;\n    }else {\n      const length = this.length++;\n      if(length === this.size){\n        this.resize();\n      }\n      const buf = this.clone();\n      this.buf[0] = val;\n      buf.copy(this.buf,1, 0, length);\n    }\n  }\n  append(val){\n    const length = this.length++;\n    if(length === this.size){\n      this.resize();\n    }\n    this.buf[length] = val;\n  }\n  clone(){\n    return Buffer.from(this.buf.slice(0, this.length));\n  }\n  resize(){\n    const length = this.length;\n    this.size = this.size * 2;\n    const buf = Buffer.allocUnsafe(this.size);\n    this.buf.copy(buf,0, 0, length);\n    this.buf = buf;\n  }\n  toString(encoding){\n    if(encoding){\n      return this.buf.slice(0, this.length).toString(encoding);\n    }else {\n      return Uint8Array.prototype.slice.call(this.buf.slice(0, this.length));\n    }\n  }\n  toJSON(){\n    return this.toString('utf8');\n  }\n  reset(){\n    this.length = 0;\n  }\n}\n\n// white space characters\n// https://en.wikipedia.org/wiki/Whitespace_character\n// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_Expressions/Character_Classes#Types\n// \\f\\n\\r\\t\\v\\u00a0\\u1680\\u2000-\\u200a\\u2028\\u2029\\u202f\\u205f\\u3000\\ufeff\nconst np = 12;\nconst cr$1 = 13; // `\\r`, carriage return, 0x0D in hexadécimal, 13 in decimal\nconst nl$1 = 10; // `\\n`, newline, 0x0A in hexadecimal, 10 in decimal\nconst space = 32;\nconst tab = 9;\n\nconst init_state = function(options){\n  return {\n    bomSkipped: false,\n    bufBytesStart: 0,\n    castField: options.cast_function,\n    commenting: false,\n    // Current error encountered by a record\n    error: undefined,\n    enabled: options.from_line === 1,\n    escaping: false,\n    escapeIsQuote: isBuffer(options.escape) && isBuffer(options.quote) && Buffer.compare(options.escape, options.quote) === 0,\n    // columns can be `false`, `true`, `Array`\n    expectedRecordLength: Array.isArray(options.columns) ? options.columns.length : undefined,\n    field: new ResizeableBuffer(20),\n    firstLineToHeaders: options.cast_first_line_to_header,\n    needMoreDataSize: Math.max(\n      // Skip if the remaining buffer smaller than comment\n      options.comment !== null ? options.comment.length : 0,\n      // Skip if the remaining buffer can be delimiter\n      ...options.delimiter.map((delimiter) => delimiter.length),\n      // Skip if the remaining buffer can be escape sequence\n      options.quote !== null ? options.quote.length : 0,\n    ),\n    previousBuf: undefined,\n    quoting: false,\n    stop: false,\n    rawBuffer: new ResizeableBuffer(100),\n    record: [],\n    recordHasError: false,\n    record_length: 0,\n    recordDelimiterMaxLength: options.record_delimiter.length === 0 ? 0 : Math.max(...options.record_delimiter.map((v) => v.length)),\n    trimChars: [Buffer.from(' ', options.encoding)[0], Buffer.from('\\t', options.encoding)[0]],\n    wasQuoting: false,\n    wasRowDelimiter: false,\n    timchars: [\n      Buffer.from(Buffer.from([cr$1], 'utf8').toString(), options.encoding),\n      Buffer.from(Buffer.from([nl$1], 'utf8').toString(), options.encoding),\n      Buffer.from(Buffer.from([np], 'utf8').toString(), options.encoding),\n      Buffer.from(Buffer.from([space], 'utf8').toString(), options.encoding),\n      Buffer.from(Buffer.from([tab], 'utf8').toString(), options.encoding),\n    ]\n  };\n};\n\nconst underscore = function(str){\n  return str.replace(/([A-Z])/g, function(_, match){\n    return '_' + match.toLowerCase();\n  });\n};\n\nconst normalize_options = function(opts){\n  const options = {};\n  // Merge with user options\n  for(const opt in opts){\n    options[underscore(opt)] = opts[opt];\n  }\n  // Normalize option `encoding`\n  // Note: defined first because other options depends on it\n  // to convert chars/strings into buffers.\n  if(options.encoding === undefined || options.encoding === true){\n    options.encoding = 'utf8';\n  }else if(options.encoding === null || options.encoding === false){\n    options.encoding = null;\n  }else if(typeof options.encoding !== 'string' && options.encoding !== null){\n    throw new CsvError('CSV_INVALID_OPTION_ENCODING', [\n      'Invalid option encoding:',\n      'encoding must be a string or null to return a buffer,',\n      `got ${JSON.stringify(options.encoding)}`\n    ], options);\n  }\n  // Normalize option `bom`\n  if(options.bom === undefined || options.bom === null || options.bom === false){\n    options.bom = false;\n  }else if(options.bom !== true){\n    throw new CsvError('CSV_INVALID_OPTION_BOM', [\n      'Invalid option bom:', 'bom must be true,',\n      `got ${JSON.stringify(options.bom)}`\n    ], options);\n  }\n  // Normalize option `cast`\n  options.cast_function = null;\n  if(options.cast === undefined || options.cast === null || options.cast === false || options.cast === ''){\n    options.cast = undefined;\n  }else if(typeof options.cast === 'function'){\n    options.cast_function = options.cast;\n    options.cast = true;\n  }else if(options.cast !== true){\n    throw new CsvError('CSV_INVALID_OPTION_CAST', [\n      'Invalid option cast:', 'cast must be true or a function,',\n      `got ${JSON.stringify(options.cast)}`\n    ], options);\n  }\n  // Normalize option `cast_date`\n  if(options.cast_date === undefined || options.cast_date === null || options.cast_date === false || options.cast_date === ''){\n    options.cast_date = false;\n  }else if(options.cast_date === true){\n    options.cast_date = function(value){\n      const date = Date.parse(value);\n      return !isNaN(date) ? new Date(date) : value;\n    };\n  }else if (typeof options.cast_date !== 'function'){\n    throw new CsvError('CSV_INVALID_OPTION_CAST_DATE', [\n      'Invalid option cast_date:', 'cast_date must be true or a function,',\n      `got ${JSON.stringify(options.cast_date)}`\n    ], options);\n  }\n  // Normalize option `columns`\n  options.cast_first_line_to_header = null;\n  if(options.columns === true){\n    // Fields in the first line are converted as-is to columns\n    options.cast_first_line_to_header = undefined;\n  }else if(typeof options.columns === 'function'){\n    options.cast_first_line_to_header = options.columns;\n    options.columns = true;\n  }else if(Array.isArray(options.columns)){\n    options.columns = normalize_columns_array(options.columns);\n  }else if(options.columns === undefined || options.columns === null || options.columns === false){\n    options.columns = false;\n  }else {\n    throw new CsvError('CSV_INVALID_OPTION_COLUMNS', [\n      'Invalid option columns:',\n      'expect an array, a function or true,',\n      `got ${JSON.stringify(options.columns)}`\n    ], options);\n  }\n  // Normalize option `group_columns_by_name`\n  if(options.group_columns_by_name === undefined || options.group_columns_by_name === null || options.group_columns_by_name === false){\n    options.group_columns_by_name = false;\n  }else if(options.group_columns_by_name !== true){\n    throw new CsvError('CSV_INVALID_OPTION_GROUP_COLUMNS_BY_NAME', [\n      'Invalid option group_columns_by_name:',\n      'expect an boolean,',\n      `got ${JSON.stringify(options.group_columns_by_name)}`\n    ], options);\n  }else if(options.columns === false){\n    throw new CsvError('CSV_INVALID_OPTION_GROUP_COLUMNS_BY_NAME', [\n      'Invalid option group_columns_by_name:',\n      'the `columns` mode must be activated.'\n    ], options);\n  }\n  // Normalize option `comment`\n  if(options.comment === undefined || options.comment === null || options.comment === false || options.comment === ''){\n    options.comment = null;\n  }else {\n    if(typeof options.comment === 'string'){\n      options.comment = Buffer.from(options.comment, options.encoding);\n    }\n    if(!isBuffer(options.comment)){\n      throw new CsvError('CSV_INVALID_OPTION_COMMENT', [\n        'Invalid option comment:',\n        'comment must be a buffer or a string,',\n        `got ${JSON.stringify(options.comment)}`\n      ], options);\n    }\n  }\n  // Normalize option `delimiter`\n  const delimiter_json = JSON.stringify(options.delimiter);\n  if(!Array.isArray(options.delimiter)) options.delimiter = [options.delimiter];\n  if(options.delimiter.length === 0){\n    throw new CsvError('CSV_INVALID_OPTION_DELIMITER', [\n      'Invalid option delimiter:',\n      'delimiter must be a non empty string or buffer or array of string|buffer,',\n      `got ${delimiter_json}`\n    ], options);\n  }\n  options.delimiter = options.delimiter.map(function(delimiter){\n    if(delimiter === undefined || delimiter === null || delimiter === false){\n      return Buffer.from(',', options.encoding);\n    }\n    if(typeof delimiter === 'string'){\n      delimiter = Buffer.from(delimiter, options.encoding);\n    }\n    if(!isBuffer(delimiter) || delimiter.length === 0){\n      throw new CsvError('CSV_INVALID_OPTION_DELIMITER', [\n        'Invalid option delimiter:',\n        'delimiter must be a non empty string or buffer or array of string|buffer,',\n        `got ${delimiter_json}`\n      ], options);\n    }\n    return delimiter;\n  });\n  // Normalize option `escape`\n  if(options.escape === undefined || options.escape === true){\n    options.escape = Buffer.from('\"', options.encoding);\n  }else if(typeof options.escape === 'string'){\n    options.escape = Buffer.from(options.escape, options.encoding);\n  }else if (options.escape === null || options.escape === false){\n    options.escape = null;\n  }\n  if(options.escape !== null){\n    if(!isBuffer(options.escape)){\n      throw new Error(`Invalid Option: escape must be a buffer, a string or a boolean, got ${JSON.stringify(options.escape)}`);\n    }\n  }\n  // Normalize option `from`\n  if(options.from === undefined || options.from === null){\n    options.from = 1;\n  }else {\n    if(typeof options.from === 'string' && /\\d+/.test(options.from)){\n      options.from = parseInt(options.from);\n    }\n    if(Number.isInteger(options.from)){\n      if(options.from < 0){\n        throw new Error(`Invalid Option: from must be a positive integer, got ${JSON.stringify(opts.from)}`);\n      }\n    }else {\n      throw new Error(`Invalid Option: from must be an integer, got ${JSON.stringify(options.from)}`);\n    }\n  }\n  // Normalize option `from_line`\n  if(options.from_line === undefined || options.from_line === null){\n    options.from_line = 1;\n  }else {\n    if(typeof options.from_line === 'string' && /\\d+/.test(options.from_line)){\n      options.from_line = parseInt(options.from_line);\n    }\n    if(Number.isInteger(options.from_line)){\n      if(options.from_line <= 0){\n        throw new Error(`Invalid Option: from_line must be a positive integer greater than 0, got ${JSON.stringify(opts.from_line)}`);\n      }\n    }else {\n      throw new Error(`Invalid Option: from_line must be an integer, got ${JSON.stringify(opts.from_line)}`);\n    }\n  }\n  // Normalize options `ignore_last_delimiters`\n  if(options.ignore_last_delimiters === undefined || options.ignore_last_delimiters === null){\n    options.ignore_last_delimiters = false;\n  }else if(typeof options.ignore_last_delimiters === 'number'){\n    options.ignore_last_delimiters = Math.floor(options.ignore_last_delimiters);\n    if(options.ignore_last_delimiters === 0){\n      options.ignore_last_delimiters = false;\n    }\n  }else if(typeof options.ignore_last_delimiters !== 'boolean'){\n    throw new CsvError('CSV_INVALID_OPTION_IGNORE_LAST_DELIMITERS', [\n      'Invalid option `ignore_last_delimiters`:',\n      'the value must be a boolean value or an integer,',\n      `got ${JSON.stringify(options.ignore_last_delimiters)}`\n    ], options);\n  }\n  if(options.ignore_last_delimiters === true && options.columns === false){\n    throw new CsvError('CSV_IGNORE_LAST_DELIMITERS_REQUIRES_COLUMNS', [\n      'The option `ignore_last_delimiters`',\n      'requires the activation of the `columns` option'\n    ], options);\n  }\n  // Normalize option `info`\n  if(options.info === undefined || options.info === null || options.info === false){\n    options.info = false;\n  }else if(options.info !== true){\n    throw new Error(`Invalid Option: info must be true, got ${JSON.stringify(options.info)}`);\n  }\n  // Normalize option `max_record_size`\n  if(options.max_record_size === undefined || options.max_record_size === null || options.max_record_size === false){\n    options.max_record_size = 0;\n  }else if(Number.isInteger(options.max_record_size) && options.max_record_size >= 0);else if(typeof options.max_record_size === 'string' && /\\d+/.test(options.max_record_size)){\n    options.max_record_size = parseInt(options.max_record_size);\n  }else {\n    throw new Error(`Invalid Option: max_record_size must be a positive integer, got ${JSON.stringify(options.max_record_size)}`);\n  }\n  // Normalize option `objname`\n  if(options.objname === undefined || options.objname === null || options.objname === false){\n    options.objname = undefined;\n  }else if(isBuffer(options.objname)){\n    if(options.objname.length === 0){\n      throw new Error(`Invalid Option: objname must be a non empty buffer`);\n    }\n    if(options.encoding === null);else {\n      options.objname = options.objname.toString(options.encoding);\n    }\n  }else if(typeof options.objname === 'string'){\n    if(options.objname.length === 0){\n      throw new Error(`Invalid Option: objname must be a non empty string`);\n    }\n    // Great, nothing to do\n  }else if(typeof options.objname === 'number');else {\n    throw new Error(`Invalid Option: objname must be a string or a buffer, got ${options.objname}`);\n  }\n  if(options.objname !== undefined){\n    if(typeof options.objname === 'number'){\n      if(options.columns !== false){\n        throw Error('Invalid Option: objname index cannot be combined with columns or be defined as a field');\n      }\n    }else { // A string or a buffer\n      if(options.columns === false){\n        throw Error('Invalid Option: objname field must be combined with columns or be defined as an index');\n      }\n    }\n  }\n  // Normalize option `on_record`\n  if(options.on_record === undefined || options.on_record === null){\n    options.on_record = undefined;\n  }else if(typeof options.on_record !== 'function'){\n    throw new CsvError('CSV_INVALID_OPTION_ON_RECORD', [\n      'Invalid option `on_record`:',\n      'expect a function,',\n      `got ${JSON.stringify(options.on_record)}`\n    ], options);\n  }\n  // Normalize option `quote`\n  if(options.quote === null || options.quote === false || options.quote === ''){\n    options.quote = null;\n  }else {\n    if(options.quote === undefined || options.quote === true){\n      options.quote = Buffer.from('\"', options.encoding);\n    }else if(typeof options.quote === 'string'){\n      options.quote = Buffer.from(options.quote, options.encoding);\n    }\n    if(!isBuffer(options.quote)){\n      throw new Error(`Invalid Option: quote must be a buffer or a string, got ${JSON.stringify(options.quote)}`);\n    }\n  }\n  // Normalize option `raw`\n  if(options.raw === undefined || options.raw === null || options.raw === false){\n    options.raw = false;\n  }else if(options.raw !== true){\n    throw new Error(`Invalid Option: raw must be true, got ${JSON.stringify(options.raw)}`);\n  }\n  // Normalize option `record_delimiter`\n  if(options.record_delimiter === undefined){\n    options.record_delimiter = [];\n  }else if(typeof options.record_delimiter === 'string' || isBuffer(options.record_delimiter)){\n    if(options.record_delimiter.length === 0){\n      throw new CsvError('CSV_INVALID_OPTION_RECORD_DELIMITER', [\n        'Invalid option `record_delimiter`:',\n        'value must be a non empty string or buffer,',\n        `got ${JSON.stringify(options.record_delimiter)}`\n      ], options);\n    }\n    options.record_delimiter = [options.record_delimiter];\n  }else if(!Array.isArray(options.record_delimiter)){\n    throw new CsvError('CSV_INVALID_OPTION_RECORD_DELIMITER', [\n      'Invalid option `record_delimiter`:',\n      'value must be a string, a buffer or array of string|buffer,',\n      `got ${JSON.stringify(options.record_delimiter)}`\n    ], options);\n  }\n  options.record_delimiter = options.record_delimiter.map(function(rd, i){\n    if(typeof rd !== 'string' && ! isBuffer(rd)){\n      throw new CsvError('CSV_INVALID_OPTION_RECORD_DELIMITER', [\n        'Invalid option `record_delimiter`:',\n        'value must be a string, a buffer or array of string|buffer',\n        `at index ${i},`,\n        `got ${JSON.stringify(rd)}`\n      ], options);\n    }else if(rd.length === 0){\n      throw new CsvError('CSV_INVALID_OPTION_RECORD_DELIMITER', [\n        'Invalid option `record_delimiter`:',\n        'value must be a non empty string or buffer',\n        `at index ${i},`,\n        `got ${JSON.stringify(rd)}`\n      ], options);\n    }\n    if(typeof rd === 'string'){\n      rd = Buffer.from(rd, options.encoding);\n    }\n    return rd;\n  });\n  // Normalize option `relax_column_count`\n  if(typeof options.relax_column_count === 'boolean');else if(options.relax_column_count === undefined || options.relax_column_count === null){\n    options.relax_column_count = false;\n  }else {\n    throw new Error(`Invalid Option: relax_column_count must be a boolean, got ${JSON.stringify(options.relax_column_count)}`);\n  }\n  if(typeof options.relax_column_count_less === 'boolean');else if(options.relax_column_count_less === undefined || options.relax_column_count_less === null){\n    options.relax_column_count_less = false;\n  }else {\n    throw new Error(`Invalid Option: relax_column_count_less must be a boolean, got ${JSON.stringify(options.relax_column_count_less)}`);\n  }\n  if(typeof options.relax_column_count_more === 'boolean');else if(options.relax_column_count_more === undefined || options.relax_column_count_more === null){\n    options.relax_column_count_more = false;\n  }else {\n    throw new Error(`Invalid Option: relax_column_count_more must be a boolean, got ${JSON.stringify(options.relax_column_count_more)}`);\n  }\n  // Normalize option `relax_quotes`\n  if(typeof options.relax_quotes === 'boolean');else if(options.relax_quotes === undefined || options.relax_quotes === null){\n    options.relax_quotes = false;\n  }else {\n    throw new Error(`Invalid Option: relax_quotes must be a boolean, got ${JSON.stringify(options.relax_quotes)}`);\n  }\n  // Normalize option `skip_empty_lines`\n  if(typeof options.skip_empty_lines === 'boolean');else if(options.skip_empty_lines === undefined || options.skip_empty_lines === null){\n    options.skip_empty_lines = false;\n  }else {\n    throw new Error(`Invalid Option: skip_empty_lines must be a boolean, got ${JSON.stringify(options.skip_empty_lines)}`);\n  }\n  // Normalize option `skip_records_with_empty_values`\n  if(typeof options.skip_records_with_empty_values === 'boolean');else if(options.skip_records_with_empty_values === undefined || options.skip_records_with_empty_values === null){\n    options.skip_records_with_empty_values = false;\n  }else {\n    throw new Error(`Invalid Option: skip_records_with_empty_values must be a boolean, got ${JSON.stringify(options.skip_records_with_empty_values)}`);\n  }\n  // Normalize option `skip_records_with_error`\n  if(typeof options.skip_records_with_error === 'boolean');else if(options.skip_records_with_error === undefined || options.skip_records_with_error === null){\n    options.skip_records_with_error = false;\n  }else {\n    throw new Error(`Invalid Option: skip_records_with_error must be a boolean, got ${JSON.stringify(options.skip_records_with_error)}`);\n  }\n  // Normalize option `rtrim`\n  if(options.rtrim === undefined || options.rtrim === null || options.rtrim === false){\n    options.rtrim = false;\n  }else if(options.rtrim !== true){\n    throw new Error(`Invalid Option: rtrim must be a boolean, got ${JSON.stringify(options.rtrim)}`);\n  }\n  // Normalize option `ltrim`\n  if(options.ltrim === undefined || options.ltrim === null || options.ltrim === false){\n    options.ltrim = false;\n  }else if(options.ltrim !== true){\n    throw new Error(`Invalid Option: ltrim must be a boolean, got ${JSON.stringify(options.ltrim)}`);\n  }\n  // Normalize option `trim`\n  if(options.trim === undefined || options.trim === null || options.trim === false){\n    options.trim = false;\n  }else if(options.trim !== true){\n    throw new Error(`Invalid Option: trim must be a boolean, got ${JSON.stringify(options.trim)}`);\n  }\n  // Normalize options `trim`, `ltrim` and `rtrim`\n  if(options.trim === true && opts.ltrim !== false){\n    options.ltrim = true;\n  }else if(options.ltrim !== true){\n    options.ltrim = false;\n  }\n  if(options.trim === true && opts.rtrim !== false){\n    options.rtrim = true;\n  }else if(options.rtrim !== true){\n    options.rtrim = false;\n  }\n  // Normalize option `to`\n  if(options.to === undefined || options.to === null){\n    options.to = -1;\n  }else {\n    if(typeof options.to === 'string' && /\\d+/.test(options.to)){\n      options.to = parseInt(options.to);\n    }\n    if(Number.isInteger(options.to)){\n      if(options.to <= 0){\n        throw new Error(`Invalid Option: to must be a positive integer greater than 0, got ${JSON.stringify(opts.to)}`);\n      }\n    }else {\n      throw new Error(`Invalid Option: to must be an integer, got ${JSON.stringify(opts.to)}`);\n    }\n  }\n  // Normalize option `to_line`\n  if(options.to_line === undefined || options.to_line === null){\n    options.to_line = -1;\n  }else {\n    if(typeof options.to_line === 'string' && /\\d+/.test(options.to_line)){\n      options.to_line = parseInt(options.to_line);\n    }\n    if(Number.isInteger(options.to_line)){\n      if(options.to_line <= 0){\n        throw new Error(`Invalid Option: to_line must be a positive integer greater than 0, got ${JSON.stringify(opts.to_line)}`);\n      }\n    }else {\n      throw new Error(`Invalid Option: to_line must be an integer, got ${JSON.stringify(opts.to_line)}`);\n    }\n  }\n  return options;\n};\n\nconst isRecordEmpty = function(record){\n  return record.every((field) => field == null || field.toString && field.toString().trim() === '');\n};\n\nconst cr = 13; // `\\r`, carriage return, 0x0D in hexadécimal, 13 in decimal\nconst nl = 10; // `\\n`, newline, 0x0A in hexadecimal, 10 in decimal\n\nconst boms = {\n  // Note, the following are equals:\n  // Buffer.from(\"\\ufeff\")\n  // Buffer.from([239, 187, 191])\n  // Buffer.from('EFBBBF', 'hex')\n  'utf8': Buffer.from([239, 187, 191]),\n  // Note, the following are equals:\n  // Buffer.from \"\\ufeff\", 'utf16le\n  // Buffer.from([255, 254])\n  'utf16le': Buffer.from([255, 254])\n};\n\nconst transform = function(original_options = {}) {\n  const info = {\n    bytes: 0,\n    comment_lines: 0,\n    empty_lines: 0,\n    invalid_field_length: 0,\n    lines: 1,\n    records: 0\n  };\n  const options = normalize_options(original_options);\n  return {\n    info: info,\n    original_options: original_options,\n    options: options,\n    state: init_state(options),\n    __needMoreData: function(i, bufLen, end){\n      if(end) return false;\n      const {encoding, escape, quote} = this.options;\n      const {quoting, needMoreDataSize, recordDelimiterMaxLength} = this.state;\n      const numOfCharLeft = bufLen - i - 1;\n      const requiredLength = Math.max(\n        needMoreDataSize,\n        // Skip if the remaining buffer smaller than record delimiter\n        // If \"record_delimiter\" is yet to be discovered:\n        // 1. It is equals to `[]` and \"recordDelimiterMaxLength\" equals `0`\n        // 2. We set the length to windows line ending in the current encoding\n        // Note, that encoding is known from user or bom discovery at that point\n        // recordDelimiterMaxLength,\n        recordDelimiterMaxLength === 0 ? Buffer.from('\\r\\n', encoding).length : recordDelimiterMaxLength,\n        // Skip if remaining buffer can be an escaped quote\n        quoting ? ((escape === null ? 0 : escape.length) + quote.length) : 0,\n        // Skip if remaining buffer can be record delimiter following the closing quote\n        quoting ? (quote.length + recordDelimiterMaxLength) : 0,\n      );\n      return numOfCharLeft < requiredLength;\n    },\n    // Central parser implementation\n    parse: function(nextBuf, end, push, close){\n      const {bom, encoding, from_line, ltrim, max_record_size,raw, relax_quotes, rtrim, skip_empty_lines, to, to_line} = this.options;\n      let {comment, escape, quote, record_delimiter} = this.options;\n      const {bomSkipped, previousBuf, rawBuffer, escapeIsQuote} = this.state;\n      let buf;\n      if(previousBuf === undefined){\n        if(nextBuf === undefined){\n          // Handle empty string\n          close();\n          return;\n        }else {\n          buf = nextBuf;\n        }\n      }else if(previousBuf !== undefined && nextBuf === undefined){\n        buf = previousBuf;\n      }else {\n        buf = Buffer.concat([previousBuf, nextBuf]);\n      }\n      // Handle UTF BOM\n      if(bomSkipped === false){\n        if(bom === false){\n          this.state.bomSkipped = true;\n        }else if(buf.length < 3){\n          // No enough data\n          if(end === false){\n            // Wait for more data\n            this.state.previousBuf = buf;\n            return;\n          }\n        }else {\n          for(const encoding in boms){\n            if(boms[encoding].compare(buf, 0, boms[encoding].length) === 0){\n              // Skip BOM\n              const bomLength = boms[encoding].length;\n              this.state.bufBytesStart += bomLength;\n              buf = buf.slice(bomLength);\n              // Renormalize original options with the new encoding\n              this.options = normalize_options({...this.original_options, encoding: encoding});\n              // Options will re-evaluate the Buffer with the new encoding\n              ({comment, escape, quote } = this.options);\n              break;\n            }\n          }\n          this.state.bomSkipped = true;\n        }\n      }\n      const bufLen = buf.length;\n      let pos;\n      for(pos = 0; pos < bufLen; pos++){\n        // Ensure we get enough space to look ahead\n        // There should be a way to move this out of the loop\n        if(this.__needMoreData(pos, bufLen, end)){\n          break;\n        }\n        if(this.state.wasRowDelimiter === true){\n          this.info.lines++;\n          this.state.wasRowDelimiter = false;\n        }\n        if(to_line !== -1 && this.info.lines > to_line){\n          this.state.stop = true;\n          close();\n          return;\n        }\n        // Auto discovery of record_delimiter, unix, mac and windows supported\n        if(this.state.quoting === false && record_delimiter.length === 0){\n          const record_delimiterCount = this.__autoDiscoverRecordDelimiter(buf, pos);\n          if(record_delimiterCount){\n            record_delimiter = this.options.record_delimiter;\n          }\n        }\n        const chr = buf[pos];\n        if(raw === true){\n          rawBuffer.append(chr);\n        }\n        if((chr === cr || chr === nl) && this.state.wasRowDelimiter === false){\n          this.state.wasRowDelimiter = true;\n        }\n        // Previous char was a valid escape char\n        // treat the current char as a regular char\n        if(this.state.escaping === true){\n          this.state.escaping = false;\n        }else {\n          // Escape is only active inside quoted fields\n          // We are quoting, the char is an escape chr and there is a chr to escape\n          // if(escape !== null && this.state.quoting === true && chr === escape && pos + 1 < bufLen){\n          if(escape !== null && this.state.quoting === true && this.__isEscape(buf, pos, chr) && pos + escape.length < bufLen){\n            if(escapeIsQuote){\n              if(this.__isQuote(buf, pos+escape.length)){\n                this.state.escaping = true;\n                pos += escape.length - 1;\n                continue;\n              }\n            }else {\n              this.state.escaping = true;\n              pos += escape.length - 1;\n              continue;\n            }\n          }\n          // Not currently escaping and chr is a quote\n          // TODO: need to compare bytes instead of single char\n          if(this.state.commenting === false && this.__isQuote(buf, pos)){\n            if(this.state.quoting === true){\n              const nextChr = buf[pos+quote.length];\n              const isNextChrTrimable = rtrim && this.__isCharTrimable(buf, pos+quote.length);\n              const isNextChrComment = comment !== null && this.__compareBytes(comment, buf, pos+quote.length, nextChr);\n              const isNextChrDelimiter = this.__isDelimiter(buf, pos+quote.length, nextChr);\n              const isNextChrRecordDelimiter = record_delimiter.length === 0 ? this.__autoDiscoverRecordDelimiter(buf, pos+quote.length) : this.__isRecordDelimiter(nextChr, buf, pos+quote.length);\n              // Escape a quote\n              // Treat next char as a regular character\n              if(escape !== null && this.__isEscape(buf, pos, chr) && this.__isQuote(buf, pos + escape.length)){\n                pos += escape.length - 1;\n              }else if(!nextChr || isNextChrDelimiter || isNextChrRecordDelimiter || isNextChrComment || isNextChrTrimable){\n                this.state.quoting = false;\n                this.state.wasQuoting = true;\n                pos += quote.length - 1;\n                continue;\n              }else if(relax_quotes === false){\n                const err = this.__error(\n                  new CsvError('CSV_INVALID_CLOSING_QUOTE', [\n                    'Invalid Closing Quote:',\n                    `got \"${String.fromCharCode(nextChr)}\"`,\n                    `at line ${this.info.lines}`,\n                    'instead of delimiter, record delimiter, trimable character',\n                    '(if activated) or comment',\n                  ], this.options, this.__infoField())\n                );\n                if(err !== undefined) return err;\n              }else {\n                this.state.quoting = false;\n                this.state.wasQuoting = true;\n                this.state.field.prepend(quote);\n                pos += quote.length - 1;\n              }\n            }else {\n              if(this.state.field.length !== 0){\n                // In relax_quotes mode, treat opening quote preceded by chrs as regular\n                if(relax_quotes === false){\n                  const info = this.__infoField();\n                  const bom = Object.keys(boms).map(b => boms[b].equals(this.state.field.toString()) ? b : false).filter(Boolean)[0];\n                  const err = this.__error(\n                    new CsvError('INVALID_OPENING_QUOTE', [\n                      'Invalid Opening Quote:',\n                      `a quote is found on field ${JSON.stringify(info.column)} at line ${info.lines}, value is ${JSON.stringify(this.state.field.toString(encoding))}`,\n                      bom ? `(${bom} bom)` : undefined\n                    ], this.options, info, {\n                      field: this.state.field,\n                    })\n                  );\n                  if(err !== undefined) return err;\n                }\n              }else {\n                this.state.quoting = true;\n                pos += quote.length - 1;\n                continue;\n              }\n            }\n          }\n          if(this.state.quoting === false){\n            const recordDelimiterLength = this.__isRecordDelimiter(chr, buf, pos);\n            if(recordDelimiterLength !== 0){\n              // Do not emit comments which take a full line\n              const skipCommentLine = this.state.commenting && (this.state.wasQuoting === false && this.state.record.length === 0 && this.state.field.length === 0);\n              if(skipCommentLine){\n                this.info.comment_lines++;\n                // Skip full comment line\n              }else {\n                // Activate records emition if above from_line\n                if(this.state.enabled === false && this.info.lines + (this.state.wasRowDelimiter === true ? 1: 0) >= from_line){\n                  this.state.enabled = true;\n                  this.__resetField();\n                  this.__resetRecord();\n                  pos += recordDelimiterLength - 1;\n                  continue;\n                }\n                // Skip if line is empty and skip_empty_lines activated\n                if(skip_empty_lines === true && this.state.wasQuoting === false && this.state.record.length === 0 && this.state.field.length === 0){\n                  this.info.empty_lines++;\n                  pos += recordDelimiterLength - 1;\n                  continue;\n                }\n                this.info.bytes = this.state.bufBytesStart + pos;\n                const errField = this.__onField();\n                if(errField !== undefined) return errField;\n                this.info.bytes = this.state.bufBytesStart + pos + recordDelimiterLength;\n                const errRecord = this.__onRecord(push);\n                if(errRecord !== undefined) return errRecord;\n                if(to !== -1 && this.info.records >= to){\n                  this.state.stop = true;\n                  close();\n                  return;\n                }\n              }\n              this.state.commenting = false;\n              pos += recordDelimiterLength - 1;\n              continue;\n            }\n            if(this.state.commenting){\n              continue;\n            }\n            const commentCount = comment === null ? 0 : this.__compareBytes(comment, buf, pos, chr);\n            if(commentCount !== 0){\n              this.state.commenting = true;\n              continue;\n            }\n            const delimiterLength = this.__isDelimiter(buf, pos, chr);\n            if(delimiterLength !== 0){\n              this.info.bytes = this.state.bufBytesStart + pos;\n              const errField = this.__onField();\n              if(errField !== undefined) return errField;\n              pos += delimiterLength - 1;\n              continue;\n            }\n          }\n        }\n        if(this.state.commenting === false){\n          if(max_record_size !== 0 && this.state.record_length + this.state.field.length > max_record_size){\n            return this.__error(\n              new CsvError('CSV_MAX_RECORD_SIZE', [\n                'Max Record Size:',\n                'record exceed the maximum number of tolerated bytes',\n                `of ${max_record_size}`,\n                `at line ${this.info.lines}`,\n              ], this.options, this.__infoField())\n            );\n          }\n        }\n        const lappend = ltrim === false || this.state.quoting === true || this.state.field.length !== 0 || !this.__isCharTrimable(buf, pos);\n        // rtrim in non quoting is handle in __onField\n        const rappend = rtrim === false || this.state.wasQuoting === false;\n        if(lappend === true && rappend === true){\n          this.state.field.append(chr);\n        }else if(rtrim === true && !this.__isCharTrimable(buf, pos)){\n          return this.__error(\n            new CsvError('CSV_NON_TRIMABLE_CHAR_AFTER_CLOSING_QUOTE', [\n              'Invalid Closing Quote:',\n              'found non trimable byte after quote',\n              `at line ${this.info.lines}`,\n            ], this.options, this.__infoField())\n          );\n        }else {\n          if(lappend === false){\n            pos += this.__isCharTrimable(buf, pos) - 1;\n          }\n          continue;\n        }\n      }\n      if(end === true){\n        // Ensure we are not ending in a quoting state\n        if(this.state.quoting === true){\n          const err = this.__error(\n            new CsvError('CSV_QUOTE_NOT_CLOSED', [\n              'Quote Not Closed:',\n              `the parsing is finished with an opening quote at line ${this.info.lines}`,\n            ], this.options, this.__infoField())\n          );\n          if(err !== undefined) return err;\n        }else {\n          // Skip last line if it has no characters\n          if(this.state.wasQuoting === true || this.state.record.length !== 0 || this.state.field.length !== 0){\n            this.info.bytes = this.state.bufBytesStart + pos;\n            const errField = this.__onField();\n            if(errField !== undefined) return errField;\n            const errRecord = this.__onRecord(push);\n            if(errRecord !== undefined) return errRecord;\n          }else if(this.state.wasRowDelimiter === true){\n            this.info.empty_lines++;\n          }else if(this.state.commenting === true){\n            this.info.comment_lines++;\n          }\n        }\n      }else {\n        this.state.bufBytesStart += pos;\n        this.state.previousBuf = buf.slice(pos);\n      }\n      if(this.state.wasRowDelimiter === true){\n        this.info.lines++;\n        this.state.wasRowDelimiter = false;\n      }\n    },\n    __onRecord: function(push){\n      const {columns, group_columns_by_name, encoding, info, from, relax_column_count, relax_column_count_less, relax_column_count_more, raw, skip_records_with_empty_values} = this.options;\n      const {enabled, record} = this.state;\n      if(enabled === false){\n        return this.__resetRecord();\n      }\n      // Convert the first line into column names\n      const recordLength = record.length;\n      if(columns === true){\n        if(skip_records_with_empty_values === true && isRecordEmpty(record)){\n          this.__resetRecord();\n          return;\n        }\n        return this.__firstLineToColumns(record);\n      }\n      if(columns === false && this.info.records === 0){\n        this.state.expectedRecordLength = recordLength;\n      }\n      if(recordLength !== this.state.expectedRecordLength){\n        const err = columns === false ?\n          new CsvError('CSV_RECORD_INCONSISTENT_FIELDS_LENGTH', [\n            'Invalid Record Length:',\n            `expect ${this.state.expectedRecordLength},`,\n            `got ${recordLength} on line ${this.info.lines}`,\n          ], this.options, this.__infoField(), {\n            record: record,\n          })\n          :\n          new CsvError('CSV_RECORD_INCONSISTENT_COLUMNS', [\n            'Invalid Record Length:',\n            `columns length is ${columns.length},`, // rename columns\n            `got ${recordLength} on line ${this.info.lines}`,\n          ], this.options, this.__infoField(), {\n            record: record,\n          });\n        if(relax_column_count === true ||\n          (relax_column_count_less === true && recordLength < this.state.expectedRecordLength) ||\n          (relax_column_count_more === true && recordLength > this.state.expectedRecordLength)){\n          this.info.invalid_field_length++;\n          this.state.error = err;\n        // Error is undefined with skip_records_with_error\n        }else {\n          const finalErr = this.__error(err);\n          if(finalErr) return finalErr;\n        }\n      }\n      if(skip_records_with_empty_values === true && isRecordEmpty(record)){\n        this.__resetRecord();\n        return;\n      }\n      if(this.state.recordHasError === true){\n        this.__resetRecord();\n        this.state.recordHasError = false;\n        return;\n      }\n      this.info.records++;\n      if(from === 1 || this.info.records >= from){\n        const {objname} = this.options;\n        // With columns, records are object\n        if(columns !== false){\n          const obj = {};\n          // Transform record array to an object\n          for(let i = 0, l = record.length; i < l; i++){\n            if(columns[i] === undefined || columns[i].disabled) continue;\n            // Turn duplicate columns into an array\n            if (group_columns_by_name === true && obj[columns[i].name] !== undefined) {\n              if (Array.isArray(obj[columns[i].name])) {\n                obj[columns[i].name] = obj[columns[i].name].concat(record[i]);\n              } else {\n                obj[columns[i].name] = [obj[columns[i].name], record[i]];\n              }\n            } else {\n              obj[columns[i].name] = record[i];\n            }\n          }\n          // Without objname (default)\n          if(raw === true || info === true){\n            const extRecord = Object.assign(\n              {record: obj},\n              (raw === true ? {raw: this.state.rawBuffer.toString(encoding)}: {}),\n              (info === true ? {info: this.__infoRecord()}: {})\n            );\n            const err = this.__push(\n              objname === undefined ? extRecord : [obj[objname], extRecord]\n              , push);\n            if(err){\n              return err;\n            }\n          }else {\n            const err = this.__push(\n              objname === undefined ? obj : [obj[objname], obj]\n              , push);\n            if(err){\n              return err;\n            }\n          }\n        // Without columns, records are array\n        }else {\n          if(raw === true || info === true){\n            const extRecord = Object.assign(\n              {record: record},\n              raw === true ? {raw: this.state.rawBuffer.toString(encoding)}: {},\n              info === true ? {info: this.__infoRecord()}: {}\n            );\n            const err = this.__push(\n              objname === undefined ? extRecord : [record[objname], extRecord]\n              , push);\n            if(err){\n              return err;\n            }\n          }else {\n            const err = this.__push(\n              objname === undefined ? record : [record[objname], record]\n              , push);\n            if(err){\n              return err;\n            }\n          }\n        }\n      }\n      this.__resetRecord();\n    },\n    __firstLineToColumns: function(record){\n      const {firstLineToHeaders} = this.state;\n      try{\n        const headers = firstLineToHeaders === undefined ? record : firstLineToHeaders.call(null, record);\n        if(!Array.isArray(headers)){\n          return this.__error(\n            new CsvError('CSV_INVALID_COLUMN_MAPPING', [\n              'Invalid Column Mapping:',\n              'expect an array from column function,',\n              `got ${JSON.stringify(headers)}`\n            ], this.options, this.__infoField(), {\n              headers: headers,\n            })\n          );\n        }\n        const normalizedHeaders = normalize_columns_array(headers);\n        this.state.expectedRecordLength = normalizedHeaders.length;\n        this.options.columns = normalizedHeaders;\n        this.__resetRecord();\n        return;\n      }catch(err){\n        return err;\n      }\n    },\n    __resetRecord: function(){\n      if(this.options.raw === true){\n        this.state.rawBuffer.reset();\n      }\n      this.state.error = undefined;\n      this.state.record = [];\n      this.state.record_length = 0;\n    },\n    __onField: function(){\n      const {cast, encoding, rtrim, max_record_size} = this.options;\n      const {enabled, wasQuoting} = this.state;\n      // Short circuit for the from_line options\n      if(enabled === false){\n        return this.__resetField();\n      }\n      let field = this.state.field.toString(encoding);\n      if(rtrim === true && wasQuoting === false){\n        field = field.trimRight();\n      }\n      if(cast === true){\n        const [err, f] = this.__cast(field);\n        if(err !== undefined) return err;\n        field = f;\n      }\n      this.state.record.push(field);\n      // Increment record length if record size must not exceed a limit\n      if(max_record_size !== 0 && typeof field === 'string'){\n        this.state.record_length += field.length;\n      }\n      this.__resetField();\n    },\n    __resetField: function(){\n      this.state.field.reset();\n      this.state.wasQuoting = false;\n    },\n    __push: function(record, push){\n      const {on_record} = this.options;\n      if(on_record !== undefined){\n        const info = this.__infoRecord();\n        try{\n          record = on_record.call(null, record, info);\n        }catch(err){\n          return err;\n        }\n        if(record === undefined || record === null){ return; }\n      }\n      push(record);\n    },\n    // Return a tuple with the error and the casted value\n    __cast: function(field){\n      const {columns, relax_column_count} = this.options;\n      const isColumns = Array.isArray(columns);\n      // Dont loose time calling cast\n      // because the final record is an object\n      // and this field can't be associated to a key present in columns\n      if(isColumns === true && relax_column_count && this.options.columns.length <= this.state.record.length){\n        return [undefined, undefined];\n      }\n      if(this.state.castField !== null){\n        try{\n          const info = this.__infoField();\n          return [undefined, this.state.castField.call(null, field, info)];\n        }catch(err){\n          return [err];\n        }\n      }\n      if(this.__isFloat(field)){\n        return [undefined, parseFloat(field)];\n      }else if(this.options.cast_date !== false){\n        const info = this.__infoField();\n        return [undefined, this.options.cast_date.call(null, field, info)];\n      }\n      return [undefined, field];\n    },\n    // Helper to test if a character is a space or a line delimiter\n    __isCharTrimable: function(buf, pos){\n      const isTrim = (buf, pos) => {\n        const {timchars} = this.state;\n        loop1: for(let i = 0; i < timchars.length; i++){\n          const timchar = timchars[i];\n          for(let j = 0; j < timchar.length; j++){\n            if(timchar[j] !== buf[pos+j]) continue loop1;\n          }\n          return timchar.length;\n        }\n        return 0;\n      };\n      return isTrim(buf, pos);\n    },\n    // Keep it in case we implement the `cast_int` option\n    // __isInt(value){\n    //   // return Number.isInteger(parseInt(value))\n    //   // return !isNaN( parseInt( obj ) );\n    //   return /^(\\-|\\+)?[1-9][0-9]*$/.test(value)\n    // }\n    __isFloat: function(value){\n      return (value - parseFloat(value) + 1) >= 0; // Borrowed from jquery\n    },\n    __compareBytes: function(sourceBuf, targetBuf, targetPos, firstByte){\n      if(sourceBuf[0] !== firstByte) return 0;\n      const sourceLength = sourceBuf.length;\n      for(let i = 1; i < sourceLength; i++){\n        if(sourceBuf[i] !== targetBuf[targetPos+i]) return 0;\n      }\n      return sourceLength;\n    },\n    __isDelimiter: function(buf, pos, chr){\n      const {delimiter, ignore_last_delimiters} = this.options;\n      if(ignore_last_delimiters === true && this.state.record.length === this.options.columns.length - 1){\n        return 0;\n      }else if(ignore_last_delimiters !== false && typeof ignore_last_delimiters === 'number' && this.state.record.length === ignore_last_delimiters - 1){\n        return 0;\n      }\n      loop1: for(let i = 0; i < delimiter.length; i++){\n        const del = delimiter[i];\n        if(del[0] === chr){\n          for(let j = 1; j < del.length; j++){\n            if(del[j] !== buf[pos+j]) continue loop1;\n          }\n          return del.length;\n        }\n      }\n      return 0;\n    },\n    __isRecordDelimiter: function(chr, buf, pos){\n      const {record_delimiter} = this.options;\n      const recordDelimiterLength = record_delimiter.length;\n      loop1: for(let i = 0; i < recordDelimiterLength; i++){\n        const rd = record_delimiter[i];\n        const rdLength = rd.length;\n        if(rd[0] !== chr){\n          continue;\n        }\n        for(let j = 1; j < rdLength; j++){\n          if(rd[j] !== buf[pos+j]){\n            continue loop1;\n          }\n        }\n        return rd.length;\n      }\n      return 0;\n    },\n    __isEscape: function(buf, pos, chr){\n      const {escape} = this.options;\n      if(escape === null) return false;\n      const l = escape.length;\n      if(escape[0] === chr){\n        for(let i = 0; i < l; i++){\n          if(escape[i] !== buf[pos+i]){\n            return false;\n          }\n        }\n        return true;\n      }\n      return false;\n    },\n    __isQuote: function(buf, pos){\n      const {quote} = this.options;\n      if(quote === null) return false;\n      const l = quote.length;\n      for(let i = 0; i < l; i++){\n        if(quote[i] !== buf[pos+i]){\n          return false;\n        }\n      }\n      return true;\n    },\n    __autoDiscoverRecordDelimiter: function(buf, pos){\n      const { encoding } = this.options;\n      // Note, we don't need to cache this information in state,\n      // It is only called on the first line until we find out a suitable\n      // record delimiter.\n      const rds = [\n        // Important, the windows line ending must be before mac os 9\n        Buffer.from('\\r\\n', encoding),\n        Buffer.from('\\n', encoding),\n        Buffer.from('\\r', encoding),\n      ];\n      loop: for(let i = 0; i < rds.length; i++){\n        const l = rds[i].length;\n        for(let j = 0; j < l; j++){\n          if(rds[i][j] !== buf[pos + j]){\n            continue loop;\n          }\n        }\n        this.options.record_delimiter.push(rds[i]);\n        this.state.recordDelimiterMaxLength = rds[i].length;\n        return rds[i].length;\n      }\n      return 0;\n    },\n    __error: function(msg){\n      const {encoding, raw, skip_records_with_error} = this.options;\n      const err = typeof msg === 'string' ? new Error(msg) : msg;\n      if(skip_records_with_error){\n        this.state.recordHasError = true;\n        if(this.options.on_skip !== undefined){\n          this.options.on_skip(err, raw ? this.state.rawBuffer.toString(encoding) : undefined);\n        }\n        // this.emit('skip', err, raw ? this.state.rawBuffer.toString(encoding) : undefined);\n        return undefined;\n      }else {\n        return err;\n      }\n    },\n    __infoDataSet: function(){\n      return {\n        ...this.info,\n        columns: this.options.columns\n      };\n    },\n    __infoRecord: function(){\n      const {columns, raw, encoding} = this.options;\n      return {\n        ...this.__infoDataSet(),\n        error: this.state.error,\n        header: columns === true,\n        index: this.state.record.length,\n        raw: raw ? this.state.rawBuffer.toString(encoding) : undefined\n      };\n    },\n    __infoField: function(){\n      const {columns} = this.options;\n      const isColumns = Array.isArray(columns);\n      return {\n        ...this.__infoRecord(),\n        column: isColumns === true ?\n          (columns.length > this.state.record.length ?\n            columns[this.state.record.length].name :\n            null\n          ) :\n          this.state.record.length,\n        quoting: this.state.wasQuoting,\n      };\n    }\n  };\n};\n\nconst parse = function(data, opts={}){\n  if(typeof data === 'string'){\n    data = Buffer.from(data);\n  }\n  const records = opts && opts.objname ? {} : [];\n  const parser = transform(opts);\n  const push = (record) => {\n    if(parser.options.objname === undefined)\n      records.push(record);\n    else {\n      records[record[0]] = record[1];\n    }\n  };\n  const close = () => {};\n  const err1 = parser.parse(data, false, push, close);\n  if(err1 !== undefined) throw err1;\n  const err2 = parser.parse(undefined, true, push, close);\n  if(err2 !== undefined) throw err2;\n  return records;\n};\n\nexport { CsvError, parse };\n","import { parse } from \"csv-parse/sync\";\n\n/** The puzName for PvP. */\nexport const PUZ_NAME_PVP = \"pvp\";\n/** The puzName for the intro cutscene. */\nexport const PUZ_NAME_INTRO = \"treasure_chest\";\n/** The puzName for the first tutorial stage. */\nexport const PUZ_NAME_TUTORIAL_1 = \"tutorial1\";\n/** The puzName for the final battle. */\nexport const PUZ_NAME_FINAL_BATTLE = \"kero\";\n/** The puzName for the mastery tree. */\nexport const PUZ_NAME_MASTERY_TREE = \"mastery_tree\";\n/** The puzName for the dummy mastery tree prompt tracker. */\nexport const PUZ_NAME_MASTERY_TREE_PROMPT = \"mastery_tree_prompt\";\n/** The puzName for Make Your Own Star Battle. */\nexport const PUZ_NAME_MYOSB = \"make_your_own_star_battle\";\n/** The puzName for the cutscene after getting the first answer. */\nexport const PUZ_NAME_FIRST_ANSWER = \"first_answer\";\n/** The puzName for the cutscene after getting the first legendary. */\nexport const PUZ_NAME_FIRST_LEGENDARY = \"first_legendary\";\n/** The puzName for the cutscene before the final battle. */\nexport const PUZ_NAME_PRE_FINAL_BATTLE = \"entering_the_water\";\n/** The puzName for the cutscene after the final battle. */\nexport const PUZ_NAME_POST_FINAL_BATTLE = \"the_end\";\n/** The puzName for the puzzle whose unlock also unlocks Kero's Notes. */\nexport const PUZ_NAME_KEROS_NOTES_UNLOCK = \"tutorial6\";\n/** The puzName for the tutorial deckbuilding stage. */\nexport const PUZ_NAME_TUTORIAL_DECKBUILDING = \"tutorial6\";\nexport const BATTLE_GROUP_NAME_MASTERY_TREE = \"mastery_tree\";\nexport const BATTLE_GROUP_NAME_INTRA_PVP = \"intra_pvp\";\n/** The battleGroupName for the instancer. */\nexport const BATTLE_GROUP_NAME_INSTANCER = \"instancer\";\n/** The battleGroupName for the tutorial. */\nexport const BATTLE_GROUP_NAME_TUTORIAL = \"tutorial\";\n/** The battleGroupName for the Moonick group. */\nexport const BATTLE_GROUP_NAME_MOONICK = \"moonick\";\n/** puzNames for Moonick battles that count for global speedrun time. */\nexport const PUZ_NAMES_MOONICK_FOR_SPEEDRUN = [\"moonick_final\"];\nexport const WEIRD_BATTLE_GROUPS = [\n  BATTLE_GROUP_NAME_INSTANCER,\n  BATTLE_GROUP_NAME_MASTERY_TREE,\n  BATTLE_GROUP_NAME_INTRA_PVP,\n  PUZ_NAME_PVP,\n];\n\nexport const MOONICK_UNLOCK_GROUPING = [12, 9, 3, 1];\nexport const MOONICK_UNLOCK_THRESHOLDS = [9, 7, 2, 1];\n\n/**\n * PvP solvers can claim victory if their opponent takes longer than\n * this time to end their turn.\n */\nexport const PVP_TURN_TIME_LIMIT = 3 * 60 * 1000;\n\nexport const NUM_LEGENDARIES = 12;\n\n// Handle compound puzNames.\n// TODO: Return the whole puzName in production.\nexport const getPrimaryPuzName = (puzName: string) => {\n  return puzName.split(\",\")[0];\n};\n\nexport type PuzzleData = {\n  /** puzName is the same as \"slug\" in Django. */\n  puzName: string;\n  battleGroupName: string;\n  order: number;\n  /**\n   * Round that the puzzle belongs to. Only used by Django for minor\n   * functionality like sorting puzzles on the bigboard and other\n   * stats displays.\n   */\n  round: string;\n  /**\n   * The number of \"unlock points\" in the src unlock group needed to\n   * unlock the puzzle.\n   */\n  unlockReq: number;\n  /**\n   * The number of \"unlock points\" that solving this puzzle gives in\n   * its dst unlock group.\n   */\n  unlockMult: number;\n  /**\n   * Unlock group that determines when this puzzle is unlocked.\n   * This puzzle is unlocked if `unlockReq` puzzles in `srcUnlockGroupId`\n   * are solved.\n   */\n  srcUnlockGroupId: string;\n  /**\n   * Unlock group that solving this puzzle contributes to.\n   * May be different from `srcUnlockGroupId`.\n   */\n  dstUnlockGroupId: string;\n  /**\n   * Set of cards that are unlocked when this puzzle is solved.\n   */\n  cardUnlockGroupId: string | null;\n  /**\n   * The puzzle's answer. If no answer is specified, then an answer\n   * cannot be called in and the solve page is inaccessible until\n   * the puzzle is solved (so that solvers can leave feedback and\n   * see card unlocks).\n   */\n  answer: string | null;\n  /** If set, solving this battle will solve the battle group dummy. */\n  triggersBattleGroupSolve: boolean;\n  /**\n   * Whether the battle should be treated as a cutscene. This enables\n   * a number of default behaviors:\n   * - The URL used for the battle is \"cutscene/:puzName\" rather than\n   *   \"battle/:puzName\", etc.\n   * - Battle control panels do not support joining the room if the\n   *   room is not ACTIVE, and say \"cutscene\" instead of \"battle\".\n   * - Clicking on the map clickable starts the cutscene directly.\n   * and possibly others.\n   */\n  isCutscene: boolean;\n  /**\n   * Whether the puzzle represents a \"full\" and \"real\" puzzle from the\n   * perspective of Django. When enabled:\n   * - Feedback and hints pages will be enabled for the puzzle.\n   * - The puzzle will show up on bigboard.\n   */\n  isFullPuzzle: boolean;\n};\n\nexport type MapPosition = {\n  /** X position, as % of vw. */\n  x: number;\n  /** Y position, as % of vw. */\n  y: number;\n};\n\nexport type BattleGroupData = {\n  battleGroupName: string;\n  displayName: string;\n  /**\n   * Emoji used to represent this puzzle in internal Discord alerts.\n   * May be empty if not defined. Currently only used by Django.\n   */\n  emoji: string;\n  /**\n   * Position of the clickable on the map page. If omitted, then\n   * no clickable is shown.\n   */\n  mapPos?: MapPosition;\n  isLegendary: boolean;\n  /** Dialogue to show on the prep page. */\n  preBattleDialogue?: string;\n  /** Dialogue (by Kero Dos) to show on the solved modal. */\n  postBattleDialogue?: string;\n  /** Number of puzzles in the battle group. */\n  numPuzzles: number;\n  /**\n   * For battle groups with multiple sub-battles, this is the number of\n   * sub-battles with \"triggers battle group solve\" enabled that need\n   * to be solved before the whole group is considered solved.\n   * Ignored if zero.\n   */\n  solveReq: number;\n};\n\nexport const isInstanceable = (\n  hasAnswer: boolean,\n  puzName: string,\n  battleGroupName: string,\n  groupNumPuzzles: number | undefined\n) => {\n  if (hasAnswer) return false;\n  if (WEIRD_BATTLE_GROUPS.includes(battleGroupName)) return false;\n  if (puzName === battleGroupName && (groupNumPuzzles ?? 1) > 1) return false;\n  return true;\n};\n\nexport const getPuzzleMapIcon = (\n  hasAnswer: boolean,\n  battleGroupName: string,\n  isCutscene: boolean,\n  isLegendary: boolean\n) => {\n  const isMasteryTree = battleGroupName === PUZ_NAME_MASTERY_TREE;\n  const isPvP = battleGroupName === PUZ_NAME_PVP;\n  const isBattle = !isMasteryTree && !hasAnswer;\n  const isLinkExternal = !isMasteryTree && hasAnswer;\n\n  if (isMasteryTree) return \"🌲\";\n  if (isPvP) return \"🤼\";\n  if (battleGroupName === PUZ_NAME_FINAL_BATTLE) return \"❓\";\n  if (battleGroupName === BATTLE_GROUP_NAME_INSTANCER) return \"🕸️\";\n  if (isCutscene) return \"💬\";\n  if (isLegendary) return \"👑\";\n  if (isBattle) return \"️⚔️\";\n  if (isLinkExternal) return \"🧩\";\n};\n\nexport const isUsedForSolveCount = (\n  puzName: string,\n  battleGroupName: string,\n  isCutscene: boolean\n): boolean => {\n  // Only battle groups that are not cutscenes count towards the\n  // team's public solve count.\n  return puzName === battleGroupName && !isCutscene;\n};\n\nexport const isUsedForGlobalSpeedrunTime = (\n  puzName: string,\n  battleGroupName: string,\n  isCutscene: boolean\n): boolean => {\n  if (isCutscene) return false;\n  if (\n    [BATTLE_GROUP_NAME_TUTORIAL, ...WEIRD_BATTLE_GROUPS].includes(\n      battleGroupName\n    )\n  )\n    return false;\n  if (\n    battleGroupName === BATTLE_GROUP_NAME_MOONICK &&\n    !PUZ_NAMES_MOONICK_FOR_SPEEDRUN.includes(puzName)\n  )\n    return false;\n  // No need to worry about battles that don't produce speedrun times,\n  // since they won't have a speedrun time to add anyway.\n  return true;\n};\n\nconst getColStartingWith = (\n  row: { [colName: string]: string },\n  colName: string\n): string => {\n  const matchedCols = Object.keys(row).filter((fullColName) =>\n    fullColName.startsWith(colName)\n  );\n  if (matchedCols.length !== 1) {\n    throw new Error(\"expected exactly one matching col\");\n  }\n  return row[matchedCols[0]];\n};\n\nfunction parsePuzzle(\n  row: { [colName: string]: string },\n  order: number\n): {\n  puzData: PuzzleData;\n  battleGroupData?: BattleGroupData;\n} {\n  const round = getColStartingWith(row, \"round\");\n  const answerOpt = getColStartingWith(row, \"answer\");\n  const answer = answerOpt === \"\" ? null : answerOpt;\n  const puzName = getColStartingWith(row, \"slug\");\n  const battleGroupNameOpt = getColStartingWith(row, \"battle group\");\n  const battleGroupName =\n    battleGroupNameOpt === \"\" ? puzName : battleGroupNameOpt;\n  const srcUnlockGroupId = getColStartingWith(row, \"src unlock group\");\n  const dstUnlockGroupId = getColStartingWith(row, \"dst unlock group\");\n  const cardUnlockGroupId = getColStartingWith(row, \"card unlock group\");\n  const unlockMult = getColStartingWith(row, \"unlock multiplier\");\n\n  const res: {\n    puzData: PuzzleData;\n    battleGroupData?: BattleGroupData;\n  } = {\n    puzData: {\n      puzName,\n      battleGroupName,\n      order,\n      round,\n      unlockReq: Number(getColStartingWith(row, \"unlock requirement\")),\n      unlockMult: unlockMult === \"\" ? 1 : Number(unlockMult),\n      srcUnlockGroupId,\n      dstUnlockGroupId,\n      cardUnlockGroupId: cardUnlockGroupId === \"\" ? null : cardUnlockGroupId,\n      answer,\n      triggersBattleGroupSolve:\n        getColStartingWith(row, \"triggers battle group solve\") === \"TRUE\",\n      isCutscene: round === \"cutscenes\",\n      isFullPuzzle: getColStartingWith(row, \"is full puzzle\") === \"TRUE\",\n    },\n  };\n  if (battleGroupName === puzName) {\n    const mapX = getColStartingWith(row, \"map x\");\n    const mapY = getColStartingWith(row, \"map y\");\n    if ((mapX === \"\") !== (mapY === \"\"))\n      throw new Error(\"expect mapX and mapY to be defined together\");\n    const mapPos =\n      mapX === \"\" || mapY === \"\"\n        ? undefined\n        : {\n            x: Number(mapX),\n            y: Number(mapY),\n          };\n    const preBattleDialogue = getColStartingWith(row, \"prep dialogue\");\n    const postBattleDialogue = getColStartingWith(row, \"end dialogue\");\n    res.battleGroupData = {\n      battleGroupName,\n      displayName: getColStartingWith(row, \"name\"),\n      emoji: getColStartingWith(row, \"emoji\"),\n      mapPos,\n      isLegendary: getColStartingWith(row, \"is legendary\") === \"TRUE\",\n      preBattleDialogue:\n        preBattleDialogue === \"\" ? undefined : preBattleDialogue,\n      postBattleDialogue:\n        postBattleDialogue === \"\" ? undefined : postBattleDialogue,\n      // These will be set for all battle groups at the end.\n      numPuzzles: 0,\n      solveReq: 0,\n    };\n  }\n  return res;\n}\n\nexport type AllPuzzles = {\n  puzzles: PuzzleData[];\n  battleGroups: BattleGroupData[];\n};\n\nexport const parsePuzzles = (allPuzzlesCsv: string): AllPuzzles => {\n  const rows = parse(allPuzzlesCsv, { columns: true });\n  const puzzles: PuzzleData[] = [];\n  const battleGroups: BattleGroupData[] = [];\n  const numSolveTriggersPerBattleGroup: Map<string, number> = new Map();\n  const numSubpuzzlesPerBattleGroup: Map<string, number> = new Map();\n  for (const row of rows) {\n    const round = getColStartingWith(row, \"round\");\n    if (round === \"\") {\n      // Skip empty rows.\n      continue;\n    }\n    const order = puzzles.length;\n\n    const { puzData, battleGroupData } = parsePuzzle(row, order);\n    if (battleGroupData !== undefined) battleGroups.push(battleGroupData);\n    puzzles.push(puzData);\n\n    const { puzName, triggersBattleGroupSolve, battleGroupName } = puzData;\n    // Ignore dummy puzzles.\n    // If the battle group does not have a dummy puzzle,\n    // we'll handle the case later.\n    if (puzName !== battleGroupName) {\n      numSubpuzzlesPerBattleGroup.set(\n        battleGroupName,\n        (numSubpuzzlesPerBattleGroup.get(battleGroupName) ?? 0) + 1\n      );\n    }\n    if (triggersBattleGroupSolve) {\n      numSolveTriggersPerBattleGroup.set(\n        battleGroupName,\n        (numSolveTriggersPerBattleGroup.get(battleGroupName) ?? 0) + 1\n      );\n    }\n  }\n  for (const battleGroup of battleGroups) {\n    const { battleGroupName } = battleGroup;\n    // If there is only one puzzle in the battle group, then there\n    // won't be any dummy puzzles and the count would be zero.\n    const numPuzzles = Math.max(\n      numSubpuzzlesPerBattleGroup.get(battleGroupName) ?? 0,\n      1\n    );\n    if (numPuzzles === undefined)\n      throw new Error(\"expect numPuzzles to be set for every battle group\");\n    battleGroup.numPuzzles = numPuzzles;\n    battleGroup.solveReq =\n      numSolveTriggersPerBattleGroup.get(battleGroupName) ?? 0;\n  }\n  return {\n    puzzles,\n    battleGroups,\n  };\n};\n\nexport class PuzzlesDB {\n  puzzles: Map<string, PuzzleData>;\n  battleGroups: Map<string, BattleGroupData>;\n\n  constructor(allPuzzles: AllPuzzles) {\n    const { puzzles, battleGroups } = allPuzzles;\n    this.puzzles = new Map(\n      Object.values(puzzles).map((puzData) => [puzData.puzName, puzData])\n    );\n    this.battleGroups = new Map(\n      Object.values(battleGroups).map((battleGroup) => [\n        battleGroup.battleGroupName,\n        battleGroup,\n      ])\n    );\n  }\n\n  getPrimaryPuzName(puzName: string): string {\n    // Handle compound puzNames.\n    // TODO: Disable this in production.\n    return puzName.split(\",\")[0];\n  }\n\n  tryGetPuzzle(puzName: string): PuzzleData | null {\n    return this.puzzles.get(puzName) ?? null;\n  }\n\n  getPuzzle(puzName: string): PuzzleData {\n    const puzData = this.tryGetPuzzle(puzName);\n    if (puzData === null)\n      throw new Error(`could not resolve puzzle ${puzName}`);\n    return puzData;\n  }\n\n  /** Get the canonical answer for a fish puzzle. */\n  getFishPuzzleCanonicalAnswer(puzName: string): string {\n    const puzSpec = this.puzzles.get(puzName);\n    if (puzSpec === undefined)\n      throw new Error(`${puzName} is not a fish puzzle`);\n    const { answer } = puzSpec;\n    if (answer === null) throw new Error(`${puzName} does not have an answer`);\n    return answer;\n  }\n\n  /** Get the battle group that a puzzle belongs to. */\n  tryGetBattleGroup(puzName: string): BattleGroupData | null {\n    const puzData = this.tryGetPuzzle(puzName);\n    if (puzData === null) return null;\n    return this.battleGroups.get(puzData.battleGroupName) ?? null;\n  }\n\n  /** Get the battle group that a puzzle belongs to. */\n  getBattleGroup(puzName: string): BattleGroupData {\n    const battleGroup = this.tryGetBattleGroup(puzName);\n    if (battleGroup === null)\n      throw new Error(`cannot find battle group for ${puzName}`);\n    return battleGroup;\n  }\n\n  getFirstSubpuzzleInBattleGroup(puzName: string): PuzzleData {\n    const { battleGroupName, numPuzzles } = this.getBattleGroup(puzName);\n    return [...this.puzzles.values()]\n      .filter(\n        (puzData) =>\n          puzData.battleGroupName === battleGroupName &&\n          (numPuzzles === 1 || puzData.puzName !== battleGroupName)\n      )\n      .sort((puz1, puz2) => puz1.order - puz2.order)[0];\n  }\n}\n\nexport const MYOSB_DATA = {\n  ansString: \"ANSWERISLOTTERY\",\n  // prettier-ignore\n  possible: [\n    [ [0, 3], [1, 0], [2, 2], [3, 4], [4, 1] ],\n    [ [0, 3], [1, 1], [2, 4], [3, 2], [4, 0] ],\n    [ [0, 3], [1, 1], [2, 4], [3, 0], [4, 2] ],\n    [ [0, 1], [1, 3], [2, 0], [3, 2], [4, 4] ],\n    [ [0, 1], [1, 3], [2, 0], [3, 4], [4, 2] ],\n    [ [0, 0], [1, 3], [2, 1], [3, 4], [4, 2] ],\n    [ [0, 2], [1, 0], [2, 3], [3, 1], [4, 4] ],\n    [ [0, 4], [1, 1], [2, 3], [3, 0], [4, 2] ],\n    [ [0, 2], [1, 4], [2, 1], [3, 3], [4, 0] ],\n    [ [0, 2], [1, 4], [2, 0], [3, 3], [4, 1] ],\n    [ [0, 4], [1, 2], [2, 0], [3, 3], [4, 1] ],\n    [ [0, 2], [1, 0], [2, 4], [3, 1], [4, 3] ],\n    [ [0, 0], [1, 2], [2, 4], [3, 1], [4, 3] ],\n    [ [0, 1], [1, 4], [2, 2], [3, 0], [4, 3] ],\n  ],\n};\n","import { CardData } from \"engine/types/card-data\";\n\nexport type CardsDB = {\n  [cardName: string]: CardData;\n};\n\nexport const makeCardsDB = (allCards: ReadonlyArray<CardData>) => {\n  const cardsDB: CardsDB = {};\n  for (const cardData of allCards) {\n    cardsDB[cardData.name] = cardData;\n  }\n  return cardsDB;\n};\n","import { parse } from \"csv-parse/sync\";\n\nexport const REPUTATION_BOOST_MASTERY_ID = \"m1\";\nexport const SCRY_TOP_CARD_MASTERY_ID = \"m2\";\nexport const PRIORITY_CARD_MASTERY_ID = \"m3\";\nexport const FACTIONS_MASTERY_ID = \"m4\";\nexport const DRAW_CARD_MASTERY_ID = \"m5\";\nexport const REDRAW_MASTERY_ID = \"m6\";\nexport const PVP_MASTERY_ID = \"m7\";\nexport const SPEEDRUN_MASTERY_ID = \"m8\";\nexport const SOLVE_COUNTS_MASTERY_ID = \"m9\";\n\nexport type MasteryData = {\n  masteryId: string;\n  displayName: string;\n  effectText: string;\n  order: number;\n  x: number;\n  y: number;\n};\n\nconst getColStartingWith = (\n  row: { [colName: string]: string },\n  colName: string\n): string => {\n  const matchedCols = Object.keys(row).filter((fullColName) =>\n    fullColName.startsWith(colName)\n  );\n  if (matchedCols.length !== 1) {\n    throw new Error(\"expected exactly one matching col\");\n  }\n  return row[matchedCols[0]];\n};\n\nfunction parseMastery(\n  row: { [colName: string]: string },\n  order: number\n): MasteryData {\n  const masteryId = getColStartingWith(row, \"id\");\n  return {\n    masteryId,\n    displayName: getColStartingWith(row, \"name\"),\n    order,\n    x: Number(getColStartingWith(row, \"grid x\")),\n    y: Number(getColStartingWith(row, \"grid y\")),\n    effectText: getColStartingWith(row, \"effect text\"),\n  };\n}\n\nexport const parseMasteries = (csvStr: string): ReadonlyArray<MasteryData> => {\n  const rows = parse(csvStr, { columns: true });\n  const masteries: MasteryData[] = [];\n  for (const row of rows) {\n    const masteryId = getColStartingWith(row, \"id\");\n    if (masteryId === \"\") {\n      // Skip empty rows.\n      continue;\n    }\n    masteries.push(parseMastery(row, masteries.length + 1));\n  }\n  return masteries;\n};\n\nexport type MasteriesDB = { [masteryId: string]: MasteryData };\n\nexport const makeMasteriesDB = (\n  masteriesData: ReadonlyArray<MasteryData>\n): MasteriesDB => {\n  const masteriesDB: MasteriesDB = {};\n  for (const mastery of masteriesData) {\n    masteriesDB[mastery.masteryId] = mastery;\n  }\n  return masteriesDB;\n};\n","var util;\n(function (util) {\n    util.assertEqual = (val) => val;\n    function assertIs(_arg) { }\n    util.assertIs = assertIs;\n    function assertNever(_x) {\n        throw new Error();\n    }\n    util.assertNever = assertNever;\n    util.arrayToEnum = (items) => {\n        const obj = {};\n        for (const item of items) {\n            obj[item] = item;\n        }\n        return obj;\n    };\n    util.getValidEnumValues = (obj) => {\n        const validKeys = util.objectKeys(obj).filter((k) => typeof obj[obj[k]] !== \"number\");\n        const filtered = {};\n        for (const k of validKeys) {\n            filtered[k] = obj[k];\n        }\n        return util.objectValues(filtered);\n    };\n    util.objectValues = (obj) => {\n        return util.objectKeys(obj).map(function (e) {\n            return obj[e];\n        });\n    };\n    util.objectKeys = typeof Object.keys === \"function\" // eslint-disable-line ban/ban\n        ? (obj) => Object.keys(obj) // eslint-disable-line ban/ban\n        : (object) => {\n            const keys = [];\n            for (const key in object) {\n                if (Object.prototype.hasOwnProperty.call(object, key)) {\n                    keys.push(key);\n                }\n            }\n            return keys;\n        };\n    util.find = (arr, checker) => {\n        for (const item of arr) {\n            if (checker(item))\n                return item;\n        }\n        return undefined;\n    };\n    util.isInteger = typeof Number.isInteger === \"function\"\n        ? (val) => Number.isInteger(val) // eslint-disable-line ban/ban\n        : (val) => typeof val === \"number\" && isFinite(val) && Math.floor(val) === val;\n    function joinValues(array, separator = \" | \") {\n        return array\n            .map((val) => (typeof val === \"string\" ? `'${val}'` : val))\n            .join(separator);\n    }\n    util.joinValues = joinValues;\n    util.jsonStringifyReplacer = (_, value) => {\n        if (typeof value === \"bigint\") {\n            return value.toString();\n        }\n        return value;\n    };\n})(util || (util = {}));\nvar objectUtil;\n(function (objectUtil) {\n    objectUtil.mergeShapes = (first, second) => {\n        return {\n            ...first,\n            ...second, // second overwrites first\n        };\n    };\n})(objectUtil || (objectUtil = {}));\nconst ZodParsedType = util.arrayToEnum([\n    \"string\",\n    \"nan\",\n    \"number\",\n    \"integer\",\n    \"float\",\n    \"boolean\",\n    \"date\",\n    \"bigint\",\n    \"symbol\",\n    \"function\",\n    \"undefined\",\n    \"null\",\n    \"array\",\n    \"object\",\n    \"unknown\",\n    \"promise\",\n    \"void\",\n    \"never\",\n    \"map\",\n    \"set\",\n]);\nconst getParsedType = (data) => {\n    const t = typeof data;\n    switch (t) {\n        case \"undefined\":\n            return ZodParsedType.undefined;\n        case \"string\":\n            return ZodParsedType.string;\n        case \"number\":\n            return isNaN(data) ? ZodParsedType.nan : ZodParsedType.number;\n        case \"boolean\":\n            return ZodParsedType.boolean;\n        case \"function\":\n            return ZodParsedType.function;\n        case \"bigint\":\n            return ZodParsedType.bigint;\n        case \"symbol\":\n            return ZodParsedType.symbol;\n        case \"object\":\n            if (Array.isArray(data)) {\n                return ZodParsedType.array;\n            }\n            if (data === null) {\n                return ZodParsedType.null;\n            }\n            if (data.then &&\n                typeof data.then === \"function\" &&\n                data.catch &&\n                typeof data.catch === \"function\") {\n                return ZodParsedType.promise;\n            }\n            if (typeof Map !== \"undefined\" && data instanceof Map) {\n                return ZodParsedType.map;\n            }\n            if (typeof Set !== \"undefined\" && data instanceof Set) {\n                return ZodParsedType.set;\n            }\n            if (typeof Date !== \"undefined\" && data instanceof Date) {\n                return ZodParsedType.date;\n            }\n            return ZodParsedType.object;\n        default:\n            return ZodParsedType.unknown;\n    }\n};\n\nconst ZodIssueCode = util.arrayToEnum([\n    \"invalid_type\",\n    \"invalid_literal\",\n    \"custom\",\n    \"invalid_union\",\n    \"invalid_union_discriminator\",\n    \"invalid_enum_value\",\n    \"unrecognized_keys\",\n    \"invalid_arguments\",\n    \"invalid_return_type\",\n    \"invalid_date\",\n    \"invalid_string\",\n    \"too_small\",\n    \"too_big\",\n    \"invalid_intersection_types\",\n    \"not_multiple_of\",\n    \"not_finite\",\n]);\nconst quotelessJson = (obj) => {\n    const json = JSON.stringify(obj, null, 2);\n    return json.replace(/\"([^\"]+)\":/g, \"$1:\");\n};\nclass ZodError extends Error {\n    constructor(issues) {\n        super();\n        this.issues = [];\n        this.addIssue = (sub) => {\n            this.issues = [...this.issues, sub];\n        };\n        this.addIssues = (subs = []) => {\n            this.issues = [...this.issues, ...subs];\n        };\n        const actualProto = new.target.prototype;\n        if (Object.setPrototypeOf) {\n            // eslint-disable-next-line ban/ban\n            Object.setPrototypeOf(this, actualProto);\n        }\n        else {\n            this.__proto__ = actualProto;\n        }\n        this.name = \"ZodError\";\n        this.issues = issues;\n    }\n    get errors() {\n        return this.issues;\n    }\n    format(_mapper) {\n        const mapper = _mapper ||\n            function (issue) {\n                return issue.message;\n            };\n        const fieldErrors = { _errors: [] };\n        const processError = (error) => {\n            for (const issue of error.issues) {\n                if (issue.code === \"invalid_union\") {\n                    issue.unionErrors.map(processError);\n                }\n                else if (issue.code === \"invalid_return_type\") {\n                    processError(issue.returnTypeError);\n                }\n                else if (issue.code === \"invalid_arguments\") {\n                    processError(issue.argumentsError);\n                }\n                else if (issue.path.length === 0) {\n                    fieldErrors._errors.push(mapper(issue));\n                }\n                else {\n                    let curr = fieldErrors;\n                    let i = 0;\n                    while (i < issue.path.length) {\n                        const el = issue.path[i];\n                        const terminal = i === issue.path.length - 1;\n                        if (!terminal) {\n                            curr[el] = curr[el] || { _errors: [] };\n                            // if (typeof el === \"string\") {\n                            //   curr[el] = curr[el] || { _errors: [] };\n                            // } else if (typeof el === \"number\") {\n                            //   const errorArray: any = [];\n                            //   errorArray._errors = [];\n                            //   curr[el] = curr[el] || errorArray;\n                            // }\n                        }\n                        else {\n                            curr[el] = curr[el] || { _errors: [] };\n                            curr[el]._errors.push(mapper(issue));\n                        }\n                        curr = curr[el];\n                        i++;\n                    }\n                }\n            }\n        };\n        processError(this);\n        return fieldErrors;\n    }\n    toString() {\n        return this.message;\n    }\n    get message() {\n        return JSON.stringify(this.issues, util.jsonStringifyReplacer, 2);\n    }\n    get isEmpty() {\n        return this.issues.length === 0;\n    }\n    flatten(mapper = (issue) => issue.message) {\n        const fieldErrors = {};\n        const formErrors = [];\n        for (const sub of this.issues) {\n            if (sub.path.length > 0) {\n                fieldErrors[sub.path[0]] = fieldErrors[sub.path[0]] || [];\n                fieldErrors[sub.path[0]].push(mapper(sub));\n            }\n            else {\n                formErrors.push(mapper(sub));\n            }\n        }\n        return { formErrors, fieldErrors };\n    }\n    get formErrors() {\n        return this.flatten();\n    }\n}\nZodError.create = (issues) => {\n    const error = new ZodError(issues);\n    return error;\n};\n\nconst errorMap = (issue, _ctx) => {\n    let message;\n    switch (issue.code) {\n        case ZodIssueCode.invalid_type:\n            if (issue.received === ZodParsedType.undefined) {\n                message = \"Required\";\n            }\n            else {\n                message = `Expected ${issue.expected}, received ${issue.received}`;\n            }\n            break;\n        case ZodIssueCode.invalid_literal:\n            message = `Invalid literal value, expected ${JSON.stringify(issue.expected, util.jsonStringifyReplacer)}`;\n            break;\n        case ZodIssueCode.unrecognized_keys:\n            message = `Unrecognized key(s) in object: ${util.joinValues(issue.keys, \", \")}`;\n            break;\n        case ZodIssueCode.invalid_union:\n            message = `Invalid input`;\n            break;\n        case ZodIssueCode.invalid_union_discriminator:\n            message = `Invalid discriminator value. Expected ${util.joinValues(issue.options)}`;\n            break;\n        case ZodIssueCode.invalid_enum_value:\n            message = `Invalid enum value. Expected ${util.joinValues(issue.options)}, received '${issue.received}'`;\n            break;\n        case ZodIssueCode.invalid_arguments:\n            message = `Invalid function arguments`;\n            break;\n        case ZodIssueCode.invalid_return_type:\n            message = `Invalid function return type`;\n            break;\n        case ZodIssueCode.invalid_date:\n            message = `Invalid date`;\n            break;\n        case ZodIssueCode.invalid_string:\n            if (typeof issue.validation === \"object\") {\n                if (\"includes\" in issue.validation) {\n                    message = `Invalid input: must include \"${issue.validation.includes}\"`;\n                    if (typeof issue.validation.position === \"number\") {\n                        message = `${message} at one or more positions greater than or equal to ${issue.validation.position}`;\n                    }\n                }\n                else if (\"startsWith\" in issue.validation) {\n                    message = `Invalid input: must start with \"${issue.validation.startsWith}\"`;\n                }\n                else if (\"endsWith\" in issue.validation) {\n                    message = `Invalid input: must end with \"${issue.validation.endsWith}\"`;\n                }\n                else {\n                    util.assertNever(issue.validation);\n                }\n            }\n            else if (issue.validation !== \"regex\") {\n                message = `Invalid ${issue.validation}`;\n            }\n            else {\n                message = \"Invalid\";\n            }\n            break;\n        case ZodIssueCode.too_small:\n            if (issue.type === \"array\")\n                message = `Array must contain ${issue.exact ? \"exactly\" : issue.inclusive ? `at least` : `more than`} ${issue.minimum} element(s)`;\n            else if (issue.type === \"string\")\n                message = `String must contain ${issue.exact ? \"exactly\" : issue.inclusive ? `at least` : `over`} ${issue.minimum} character(s)`;\n            else if (issue.type === \"number\")\n                message = `Number must be ${issue.exact\n                    ? `exactly equal to `\n                    : issue.inclusive\n                        ? `greater than or equal to `\n                        : `greater than `}${issue.minimum}`;\n            else if (issue.type === \"date\")\n                message = `Date must be ${issue.exact\n                    ? `exactly equal to `\n                    : issue.inclusive\n                        ? `greater than or equal to `\n                        : `greater than `}${new Date(Number(issue.minimum))}`;\n            else\n                message = \"Invalid input\";\n            break;\n        case ZodIssueCode.too_big:\n            if (issue.type === \"array\")\n                message = `Array must contain ${issue.exact ? `exactly` : issue.inclusive ? `at most` : `less than`} ${issue.maximum} element(s)`;\n            else if (issue.type === \"string\")\n                message = `String must contain ${issue.exact ? `exactly` : issue.inclusive ? `at most` : `under`} ${issue.maximum} character(s)`;\n            else if (issue.type === \"number\")\n                message = `Number must be ${issue.exact\n                    ? `exactly`\n                    : issue.inclusive\n                        ? `less than or equal to`\n                        : `less than`} ${issue.maximum}`;\n            else if (issue.type === \"bigint\")\n                message = `BigInt must be ${issue.exact\n                    ? `exactly`\n                    : issue.inclusive\n                        ? `less than or equal to`\n                        : `less than`} ${issue.maximum}`;\n            else if (issue.type === \"date\")\n                message = `Date must be ${issue.exact\n                    ? `exactly`\n                    : issue.inclusive\n                        ? `smaller than or equal to`\n                        : `smaller than`} ${new Date(Number(issue.maximum))}`;\n            else\n                message = \"Invalid input\";\n            break;\n        case ZodIssueCode.custom:\n            message = `Invalid input`;\n            break;\n        case ZodIssueCode.invalid_intersection_types:\n            message = `Intersection results could not be merged`;\n            break;\n        case ZodIssueCode.not_multiple_of:\n            message = `Number must be a multiple of ${issue.multipleOf}`;\n            break;\n        case ZodIssueCode.not_finite:\n            message = \"Number must be finite\";\n            break;\n        default:\n            message = _ctx.defaultError;\n            util.assertNever(issue);\n    }\n    return { message };\n};\n\nlet overrideErrorMap = errorMap;\nfunction setErrorMap(map) {\n    overrideErrorMap = map;\n}\nfunction getErrorMap() {\n    return overrideErrorMap;\n}\n\nconst makeIssue = (params) => {\n    const { data, path, errorMaps, issueData } = params;\n    const fullPath = [...path, ...(issueData.path || [])];\n    const fullIssue = {\n        ...issueData,\n        path: fullPath,\n    };\n    let errorMessage = \"\";\n    const maps = errorMaps\n        .filter((m) => !!m)\n        .slice()\n        .reverse();\n    for (const map of maps) {\n        errorMessage = map(fullIssue, { data, defaultError: errorMessage }).message;\n    }\n    return {\n        ...issueData,\n        path: fullPath,\n        message: issueData.message || errorMessage,\n    };\n};\nconst EMPTY_PATH = [];\nfunction addIssueToContext(ctx, issueData) {\n    const issue = makeIssue({\n        issueData: issueData,\n        data: ctx.data,\n        path: ctx.path,\n        errorMaps: [\n            ctx.common.contextualErrorMap,\n            ctx.schemaErrorMap,\n            getErrorMap(),\n            errorMap, // then global default map\n        ].filter((x) => !!x),\n    });\n    ctx.common.issues.push(issue);\n}\nclass ParseStatus {\n    constructor() {\n        this.value = \"valid\";\n    }\n    dirty() {\n        if (this.value === \"valid\")\n            this.value = \"dirty\";\n    }\n    abort() {\n        if (this.value !== \"aborted\")\n            this.value = \"aborted\";\n    }\n    static mergeArray(status, results) {\n        const arrayValue = [];\n        for (const s of results) {\n            if (s.status === \"aborted\")\n                return INVALID;\n            if (s.status === \"dirty\")\n                status.dirty();\n            arrayValue.push(s.value);\n        }\n        return { status: status.value, value: arrayValue };\n    }\n    static async mergeObjectAsync(status, pairs) {\n        const syncPairs = [];\n        for (const pair of pairs) {\n            syncPairs.push({\n                key: await pair.key,\n                value: await pair.value,\n            });\n        }\n        return ParseStatus.mergeObjectSync(status, syncPairs);\n    }\n    static mergeObjectSync(status, pairs) {\n        const finalObject = {};\n        for (const pair of pairs) {\n            const { key, value } = pair;\n            if (key.status === \"aborted\")\n                return INVALID;\n            if (value.status === \"aborted\")\n                return INVALID;\n            if (key.status === \"dirty\")\n                status.dirty();\n            if (value.status === \"dirty\")\n                status.dirty();\n            if (key.value !== \"__proto__\" &&\n                (typeof value.value !== \"undefined\" || pair.alwaysSet)) {\n                finalObject[key.value] = value.value;\n            }\n        }\n        return { status: status.value, value: finalObject };\n    }\n}\nconst INVALID = Object.freeze({\n    status: \"aborted\",\n});\nconst DIRTY = (value) => ({ status: \"dirty\", value });\nconst OK = (value) => ({ status: \"valid\", value });\nconst isAborted = (x) => x.status === \"aborted\";\nconst isDirty = (x) => x.status === \"dirty\";\nconst isValid = (x) => x.status === \"valid\";\nconst isAsync = (x) => typeof Promise !== \"undefined\" && x instanceof Promise;\n\nvar errorUtil;\n(function (errorUtil) {\n    errorUtil.errToObj = (message) => typeof message === \"string\" ? { message } : message || {};\n    errorUtil.toString = (message) => typeof message === \"string\" ? message : message === null || message === void 0 ? void 0 : message.message;\n})(errorUtil || (errorUtil = {}));\n\nclass ParseInputLazyPath {\n    constructor(parent, value, path, key) {\n        this._cachedPath = [];\n        this.parent = parent;\n        this.data = value;\n        this._path = path;\n        this._key = key;\n    }\n    get path() {\n        if (!this._cachedPath.length) {\n            if (this._key instanceof Array) {\n                this._cachedPath.push(...this._path, ...this._key);\n            }\n            else {\n                this._cachedPath.push(...this._path, this._key);\n            }\n        }\n        return this._cachedPath;\n    }\n}\nconst handleResult = (ctx, result) => {\n    if (isValid(result)) {\n        return { success: true, data: result.value };\n    }\n    else {\n        if (!ctx.common.issues.length) {\n            throw new Error(\"Validation failed but no issues detected.\");\n        }\n        return {\n            success: false,\n            get error() {\n                if (this._error)\n                    return this._error;\n                const error = new ZodError(ctx.common.issues);\n                this._error = error;\n                return this._error;\n            },\n        };\n    }\n};\nfunction processCreateParams(params) {\n    if (!params)\n        return {};\n    const { errorMap, invalid_type_error, required_error, description } = params;\n    if (errorMap && (invalid_type_error || required_error)) {\n        throw new Error(`Can't use \"invalid_type_error\" or \"required_error\" in conjunction with custom error map.`);\n    }\n    if (errorMap)\n        return { errorMap: errorMap, description };\n    const customMap = (iss, ctx) => {\n        if (iss.code !== \"invalid_type\")\n            return { message: ctx.defaultError };\n        if (typeof ctx.data === \"undefined\") {\n            return { message: required_error !== null && required_error !== void 0 ? required_error : ctx.defaultError };\n        }\n        return { message: invalid_type_error !== null && invalid_type_error !== void 0 ? invalid_type_error : ctx.defaultError };\n    };\n    return { errorMap: customMap, description };\n}\nclass ZodType {\n    constructor(def) {\n        /** Alias of safeParseAsync */\n        this.spa = this.safeParseAsync;\n        this._def = def;\n        this.parse = this.parse.bind(this);\n        this.safeParse = this.safeParse.bind(this);\n        this.parseAsync = this.parseAsync.bind(this);\n        this.safeParseAsync = this.safeParseAsync.bind(this);\n        this.spa = this.spa.bind(this);\n        this.refine = this.refine.bind(this);\n        this.refinement = this.refinement.bind(this);\n        this.superRefine = this.superRefine.bind(this);\n        this.optional = this.optional.bind(this);\n        this.nullable = this.nullable.bind(this);\n        this.nullish = this.nullish.bind(this);\n        this.array = this.array.bind(this);\n        this.promise = this.promise.bind(this);\n        this.or = this.or.bind(this);\n        this.and = this.and.bind(this);\n        this.transform = this.transform.bind(this);\n        this.brand = this.brand.bind(this);\n        this.default = this.default.bind(this);\n        this.catch = this.catch.bind(this);\n        this.describe = this.describe.bind(this);\n        this.pipe = this.pipe.bind(this);\n        this.readonly = this.readonly.bind(this);\n        this.isNullable = this.isNullable.bind(this);\n        this.isOptional = this.isOptional.bind(this);\n    }\n    get description() {\n        return this._def.description;\n    }\n    _getType(input) {\n        return getParsedType(input.data);\n    }\n    _getOrReturnCtx(input, ctx) {\n        return (ctx || {\n            common: input.parent.common,\n            data: input.data,\n            parsedType: getParsedType(input.data),\n            schemaErrorMap: this._def.errorMap,\n            path: input.path,\n            parent: input.parent,\n        });\n    }\n    _processInputParams(input) {\n        return {\n            status: new ParseStatus(),\n            ctx: {\n                common: input.parent.common,\n                data: input.data,\n                parsedType: getParsedType(input.data),\n                schemaErrorMap: this._def.errorMap,\n                path: input.path,\n                parent: input.parent,\n            },\n        };\n    }\n    _parseSync(input) {\n        const result = this._parse(input);\n        if (isAsync(result)) {\n            throw new Error(\"Synchronous parse encountered promise.\");\n        }\n        return result;\n    }\n    _parseAsync(input) {\n        const result = this._parse(input);\n        return Promise.resolve(result);\n    }\n    parse(data, params) {\n        const result = this.safeParse(data, params);\n        if (result.success)\n            return result.data;\n        throw result.error;\n    }\n    safeParse(data, params) {\n        var _a;\n        const ctx = {\n            common: {\n                issues: [],\n                async: (_a = params === null || params === void 0 ? void 0 : params.async) !== null && _a !== void 0 ? _a : false,\n                contextualErrorMap: params === null || params === void 0 ? void 0 : params.errorMap,\n            },\n            path: (params === null || params === void 0 ? void 0 : params.path) || [],\n            schemaErrorMap: this._def.errorMap,\n            parent: null,\n            data,\n            parsedType: getParsedType(data),\n        };\n        const result = this._parseSync({ data, path: ctx.path, parent: ctx });\n        return handleResult(ctx, result);\n    }\n    async parseAsync(data, params) {\n        const result = await this.safeParseAsync(data, params);\n        if (result.success)\n            return result.data;\n        throw result.error;\n    }\n    async safeParseAsync(data, params) {\n        const ctx = {\n            common: {\n                issues: [],\n                contextualErrorMap: params === null || params === void 0 ? void 0 : params.errorMap,\n                async: true,\n            },\n            path: (params === null || params === void 0 ? void 0 : params.path) || [],\n            schemaErrorMap: this._def.errorMap,\n            parent: null,\n            data,\n            parsedType: getParsedType(data),\n        };\n        const maybeAsyncResult = this._parse({ data, path: ctx.path, parent: ctx });\n        const result = await (isAsync(maybeAsyncResult)\n            ? maybeAsyncResult\n            : Promise.resolve(maybeAsyncResult));\n        return handleResult(ctx, result);\n    }\n    refine(check, message) {\n        const getIssueProperties = (val) => {\n            if (typeof message === \"string\" || typeof message === \"undefined\") {\n                return { message };\n            }\n            else if (typeof message === \"function\") {\n                return message(val);\n            }\n            else {\n                return message;\n            }\n        };\n        return this._refinement((val, ctx) => {\n            const result = check(val);\n            const setError = () => ctx.addIssue({\n                code: ZodIssueCode.custom,\n                ...getIssueProperties(val),\n            });\n            if (typeof Promise !== \"undefined\" && result instanceof Promise) {\n                return result.then((data) => {\n                    if (!data) {\n                        setError();\n                        return false;\n                    }\n                    else {\n                        return true;\n                    }\n                });\n            }\n            if (!result) {\n                setError();\n                return false;\n            }\n            else {\n                return true;\n            }\n        });\n    }\n    refinement(check, refinementData) {\n        return this._refinement((val, ctx) => {\n            if (!check(val)) {\n                ctx.addIssue(typeof refinementData === \"function\"\n                    ? refinementData(val, ctx)\n                    : refinementData);\n                return false;\n            }\n            else {\n                return true;\n            }\n        });\n    }\n    _refinement(refinement) {\n        return new ZodEffects({\n            schema: this,\n            typeName: ZodFirstPartyTypeKind.ZodEffects,\n            effect: { type: \"refinement\", refinement },\n        });\n    }\n    superRefine(refinement) {\n        return this._refinement(refinement);\n    }\n    optional() {\n        return ZodOptional.create(this, this._def);\n    }\n    nullable() {\n        return ZodNullable.create(this, this._def);\n    }\n    nullish() {\n        return this.nullable().optional();\n    }\n    array() {\n        return ZodArray.create(this, this._def);\n    }\n    promise() {\n        return ZodPromise.create(this, this._def);\n    }\n    or(option) {\n        return ZodUnion.create([this, option], this._def);\n    }\n    and(incoming) {\n        return ZodIntersection.create(this, incoming, this._def);\n    }\n    transform(transform) {\n        return new ZodEffects({\n            ...processCreateParams(this._def),\n            schema: this,\n            typeName: ZodFirstPartyTypeKind.ZodEffects,\n            effect: { type: \"transform\", transform },\n        });\n    }\n    default(def) {\n        const defaultValueFunc = typeof def === \"function\" ? def : () => def;\n        return new ZodDefault({\n            ...processCreateParams(this._def),\n            innerType: this,\n            defaultValue: defaultValueFunc,\n            typeName: ZodFirstPartyTypeKind.ZodDefault,\n        });\n    }\n    brand() {\n        return new ZodBranded({\n            typeName: ZodFirstPartyTypeKind.ZodBranded,\n            type: this,\n            ...processCreateParams(this._def),\n        });\n    }\n    catch(def) {\n        const catchValueFunc = typeof def === \"function\" ? def : () => def;\n        return new ZodCatch({\n            ...processCreateParams(this._def),\n            innerType: this,\n            catchValue: catchValueFunc,\n            typeName: ZodFirstPartyTypeKind.ZodCatch,\n        });\n    }\n    describe(description) {\n        const This = this.constructor;\n        return new This({\n            ...this._def,\n            description,\n        });\n    }\n    pipe(target) {\n        return ZodPipeline.create(this, target);\n    }\n    readonly() {\n        return ZodReadonly.create(this);\n    }\n    isOptional() {\n        return this.safeParse(undefined).success;\n    }\n    isNullable() {\n        return this.safeParse(null).success;\n    }\n}\nconst cuidRegex = /^c[^\\s-]{8,}$/i;\nconst cuid2Regex = /^[a-z][a-z0-9]*$/;\nconst ulidRegex = /^[0-9A-HJKMNP-TV-Z]{26}$/;\n// const uuidRegex =\n//   /^([a-f0-9]{8}-[a-f0-9]{4}-[1-5][a-f0-9]{3}-[a-f0-9]{4}-[a-f0-9]{12}|00000000-0000-0000-0000-000000000000)$/i;\nconst uuidRegex = /^[0-9a-fA-F]{8}\\b-[0-9a-fA-F]{4}\\b-[0-9a-fA-F]{4}\\b-[0-9a-fA-F]{4}\\b-[0-9a-fA-F]{12}$/i;\n// from https://stackoverflow.com/a/46181/1550155\n// old version: too slow, didn't support unicode\n// const emailRegex = /^((([a-z]|\\d|[!#\\$%&'\\*\\+\\-\\/=\\?\\^_`{\\|}~]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])+(\\.([a-z]|\\d|[!#\\$%&'\\*\\+\\-\\/=\\?\\^_`{\\|}~]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])+)*)|((\\x22)((((\\x20|\\x09)*(\\x0d\\x0a))?(\\x20|\\x09)+)?(([\\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x7f]|\\x21|[\\x23-\\x5b]|[\\x5d-\\x7e]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(\\\\([\\x01-\\x09\\x0b\\x0c\\x0d-\\x7f]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF]))))*(((\\x20|\\x09)*(\\x0d\\x0a))?(\\x20|\\x09)+)?(\\x22)))@((([a-z]|\\d|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(([a-z]|\\d|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])([a-z]|\\d|-|\\.|_|~|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])*([a-z]|\\d|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])))\\.)+(([a-z]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(([a-z]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])([a-z]|\\d|-|\\.|_|~|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])*([a-z]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])))$/i;\n//old email regex\n// const emailRegex = /^(([^<>()[\\].,;:\\s@\"]+(\\.[^<>()[\\].,;:\\s@\"]+)*)|(\".+\"))@((?!-)([^<>()[\\].,;:\\s@\"]+\\.)+[^<>()[\\].,;:\\s@\"]{1,})[^-<>()[\\].,;:\\s@\"]$/i;\n// eslint-disable-next-line\n// const emailRegex =\n//   /^(([^<>()[\\]\\\\.,;:\\s@\\\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@((\\[(((25[0-5])|(2[0-4][0-9])|(1[0-9]{2})|([0-9]{1,2}))\\.){3}((25[0-5])|(2[0-4][0-9])|(1[0-9]{2})|([0-9]{1,2}))\\])|(\\[IPv6:(([a-f0-9]{1,4}:){7}|::([a-f0-9]{1,4}:){0,6}|([a-f0-9]{1,4}:){1}:([a-f0-9]{1,4}:){0,5}|([a-f0-9]{1,4}:){2}:([a-f0-9]{1,4}:){0,4}|([a-f0-9]{1,4}:){3}:([a-f0-9]{1,4}:){0,3}|([a-f0-9]{1,4}:){4}:([a-f0-9]{1,4}:){0,2}|([a-f0-9]{1,4}:){5}:([a-f0-9]{1,4}:){0,1})([a-f0-9]{1,4}|(((25[0-5])|(2[0-4][0-9])|(1[0-9]{2})|([0-9]{1,2}))\\.){3}((25[0-5])|(2[0-4][0-9])|(1[0-9]{2})|([0-9]{1,2})))\\])|([A-Za-z0-9]([A-Za-z0-9-]*[A-Za-z0-9])*(\\.[A-Za-z]{2,})+))$/;\n// const emailRegex =\n//   /^[a-zA-Z0-9\\.\\!\\#\\$\\%\\&\\'\\*\\+\\/\\=\\?\\^\\_\\`\\{\\|\\}\\~\\-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*$/;\n// const emailRegex =\n//   /^(?:[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*|\"(?:[\\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x21\\x23-\\x5b\\x5d-\\x7f]|\\\\[\\x01-\\x09\\x0b\\x0c\\x0e-\\x7f])*\")@(?:(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?|\\[(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?|[a-z0-9-]*[a-z0-9]:(?:[\\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x21-\\x5a\\x53-\\x7f]|\\\\[\\x01-\\x09\\x0b\\x0c\\x0e-\\x7f])+)\\])$/i;\nconst emailRegex = /^(?!\\.)(?!.*\\.\\.)([A-Z0-9_+-\\.]*)[A-Z0-9_+-]@([A-Z0-9][A-Z0-9\\-]*\\.)+[A-Z]{2,}$/i;\n// const emailRegex =\n//   /^[a-z0-9.!#$%&’*+/=?^_`{|}~-]+@[a-z0-9-]+(?:\\.[a-z0-9\\-]+)*$/i;\n// from https://thekevinscott.com/emojis-in-javascript/#writing-a-regular-expression\nconst _emojiRegex = `^(\\\\p{Extended_Pictographic}|\\\\p{Emoji_Component})+$`;\nlet emojiRegex;\nconst ipv4Regex = /^(((25[0-5])|(2[0-4][0-9])|(1[0-9]{2})|([0-9]{1,2}))\\.){3}((25[0-5])|(2[0-4][0-9])|(1[0-9]{2})|([0-9]{1,2}))$/;\nconst ipv6Regex = /^(([a-f0-9]{1,4}:){7}|::([a-f0-9]{1,4}:){0,6}|([a-f0-9]{1,4}:){1}:([a-f0-9]{1,4}:){0,5}|([a-f0-9]{1,4}:){2}:([a-f0-9]{1,4}:){0,4}|([a-f0-9]{1,4}:){3}:([a-f0-9]{1,4}:){0,3}|([a-f0-9]{1,4}:){4}:([a-f0-9]{1,4}:){0,2}|([a-f0-9]{1,4}:){5}:([a-f0-9]{1,4}:){0,1})([a-f0-9]{1,4}|(((25[0-5])|(2[0-4][0-9])|(1[0-9]{2})|([0-9]{1,2}))\\.){3}((25[0-5])|(2[0-4][0-9])|(1[0-9]{2})|([0-9]{1,2})))$/;\n// Adapted from https://stackoverflow.com/a/3143231\nconst datetimeRegex = (args) => {\n    if (args.precision) {\n        if (args.offset) {\n            return new RegExp(`^\\\\d{4}-\\\\d{2}-\\\\d{2}T\\\\d{2}:\\\\d{2}:\\\\d{2}\\\\.\\\\d{${args.precision}}(([+-]\\\\d{2}(:?\\\\d{2})?)|Z)$`);\n        }\n        else {\n            return new RegExp(`^\\\\d{4}-\\\\d{2}-\\\\d{2}T\\\\d{2}:\\\\d{2}:\\\\d{2}\\\\.\\\\d{${args.precision}}Z$`);\n        }\n    }\n    else if (args.precision === 0) {\n        if (args.offset) {\n            return new RegExp(`^\\\\d{4}-\\\\d{2}-\\\\d{2}T\\\\d{2}:\\\\d{2}:\\\\d{2}(([+-]\\\\d{2}(:?\\\\d{2})?)|Z)$`);\n        }\n        else {\n            return new RegExp(`^\\\\d{4}-\\\\d{2}-\\\\d{2}T\\\\d{2}:\\\\d{2}:\\\\d{2}Z$`);\n        }\n    }\n    else {\n        if (args.offset) {\n            return new RegExp(`^\\\\d{4}-\\\\d{2}-\\\\d{2}T\\\\d{2}:\\\\d{2}:\\\\d{2}(\\\\.\\\\d+)?(([+-]\\\\d{2}(:?\\\\d{2})?)|Z)$`);\n        }\n        else {\n            return new RegExp(`^\\\\d{4}-\\\\d{2}-\\\\d{2}T\\\\d{2}:\\\\d{2}:\\\\d{2}(\\\\.\\\\d+)?Z$`);\n        }\n    }\n};\nfunction isValidIP(ip, version) {\n    if ((version === \"v4\" || !version) && ipv4Regex.test(ip)) {\n        return true;\n    }\n    if ((version === \"v6\" || !version) && ipv6Regex.test(ip)) {\n        return true;\n    }\n    return false;\n}\nclass ZodString extends ZodType {\n    _parse(input) {\n        if (this._def.coerce) {\n            input.data = String(input.data);\n        }\n        const parsedType = this._getType(input);\n        if (parsedType !== ZodParsedType.string) {\n            const ctx = this._getOrReturnCtx(input);\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_type,\n                expected: ZodParsedType.string,\n                received: ctx.parsedType,\n            }\n            //\n            );\n            return INVALID;\n        }\n        const status = new ParseStatus();\n        let ctx = undefined;\n        for (const check of this._def.checks) {\n            if (check.kind === \"min\") {\n                if (input.data.length < check.value) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        code: ZodIssueCode.too_small,\n                        minimum: check.value,\n                        type: \"string\",\n                        inclusive: true,\n                        exact: false,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"max\") {\n                if (input.data.length > check.value) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        code: ZodIssueCode.too_big,\n                        maximum: check.value,\n                        type: \"string\",\n                        inclusive: true,\n                        exact: false,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"length\") {\n                const tooBig = input.data.length > check.value;\n                const tooSmall = input.data.length < check.value;\n                if (tooBig || tooSmall) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    if (tooBig) {\n                        addIssueToContext(ctx, {\n                            code: ZodIssueCode.too_big,\n                            maximum: check.value,\n                            type: \"string\",\n                            inclusive: true,\n                            exact: true,\n                            message: check.message,\n                        });\n                    }\n                    else if (tooSmall) {\n                        addIssueToContext(ctx, {\n                            code: ZodIssueCode.too_small,\n                            minimum: check.value,\n                            type: \"string\",\n                            inclusive: true,\n                            exact: true,\n                            message: check.message,\n                        });\n                    }\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"email\") {\n                if (!emailRegex.test(input.data)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        validation: \"email\",\n                        code: ZodIssueCode.invalid_string,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"emoji\") {\n                if (!emojiRegex) {\n                    emojiRegex = new RegExp(_emojiRegex, \"u\");\n                }\n                if (!emojiRegex.test(input.data)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        validation: \"emoji\",\n                        code: ZodIssueCode.invalid_string,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"uuid\") {\n                if (!uuidRegex.test(input.data)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        validation: \"uuid\",\n                        code: ZodIssueCode.invalid_string,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"cuid\") {\n                if (!cuidRegex.test(input.data)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        validation: \"cuid\",\n                        code: ZodIssueCode.invalid_string,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"cuid2\") {\n                if (!cuid2Regex.test(input.data)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        validation: \"cuid2\",\n                        code: ZodIssueCode.invalid_string,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"ulid\") {\n                if (!ulidRegex.test(input.data)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        validation: \"ulid\",\n                        code: ZodIssueCode.invalid_string,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"url\") {\n                try {\n                    new URL(input.data);\n                }\n                catch (_a) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        validation: \"url\",\n                        code: ZodIssueCode.invalid_string,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"regex\") {\n                check.regex.lastIndex = 0;\n                const testResult = check.regex.test(input.data);\n                if (!testResult) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        validation: \"regex\",\n                        code: ZodIssueCode.invalid_string,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"trim\") {\n                input.data = input.data.trim();\n            }\n            else if (check.kind === \"includes\") {\n                if (!input.data.includes(check.value, check.position)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        code: ZodIssueCode.invalid_string,\n                        validation: { includes: check.value, position: check.position },\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"toLowerCase\") {\n                input.data = input.data.toLowerCase();\n            }\n            else if (check.kind === \"toUpperCase\") {\n                input.data = input.data.toUpperCase();\n            }\n            else if (check.kind === \"startsWith\") {\n                if (!input.data.startsWith(check.value)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        code: ZodIssueCode.invalid_string,\n                        validation: { startsWith: check.value },\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"endsWith\") {\n                if (!input.data.endsWith(check.value)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        code: ZodIssueCode.invalid_string,\n                        validation: { endsWith: check.value },\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"datetime\") {\n                const regex = datetimeRegex(check);\n                if (!regex.test(input.data)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        code: ZodIssueCode.invalid_string,\n                        validation: \"datetime\",\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"ip\") {\n                if (!isValidIP(input.data, check.version)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        validation: \"ip\",\n                        code: ZodIssueCode.invalid_string,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else {\n                util.assertNever(check);\n            }\n        }\n        return { status: status.value, value: input.data };\n    }\n    _regex(regex, validation, message) {\n        return this.refinement((data) => regex.test(data), {\n            validation,\n            code: ZodIssueCode.invalid_string,\n            ...errorUtil.errToObj(message),\n        });\n    }\n    _addCheck(check) {\n        return new ZodString({\n            ...this._def,\n            checks: [...this._def.checks, check],\n        });\n    }\n    email(message) {\n        return this._addCheck({ kind: \"email\", ...errorUtil.errToObj(message) });\n    }\n    url(message) {\n        return this._addCheck({ kind: \"url\", ...errorUtil.errToObj(message) });\n    }\n    emoji(message) {\n        return this._addCheck({ kind: \"emoji\", ...errorUtil.errToObj(message) });\n    }\n    uuid(message) {\n        return this._addCheck({ kind: \"uuid\", ...errorUtil.errToObj(message) });\n    }\n    cuid(message) {\n        return this._addCheck({ kind: \"cuid\", ...errorUtil.errToObj(message) });\n    }\n    cuid2(message) {\n        return this._addCheck({ kind: \"cuid2\", ...errorUtil.errToObj(message) });\n    }\n    ulid(message) {\n        return this._addCheck({ kind: \"ulid\", ...errorUtil.errToObj(message) });\n    }\n    ip(options) {\n        return this._addCheck({ kind: \"ip\", ...errorUtil.errToObj(options) });\n    }\n    datetime(options) {\n        var _a;\n        if (typeof options === \"string\") {\n            return this._addCheck({\n                kind: \"datetime\",\n                precision: null,\n                offset: false,\n                message: options,\n            });\n        }\n        return this._addCheck({\n            kind: \"datetime\",\n            precision: typeof (options === null || options === void 0 ? void 0 : options.precision) === \"undefined\" ? null : options === null || options === void 0 ? void 0 : options.precision,\n            offset: (_a = options === null || options === void 0 ? void 0 : options.offset) !== null && _a !== void 0 ? _a : false,\n            ...errorUtil.errToObj(options === null || options === void 0 ? void 0 : options.message),\n        });\n    }\n    regex(regex, message) {\n        return this._addCheck({\n            kind: \"regex\",\n            regex: regex,\n            ...errorUtil.errToObj(message),\n        });\n    }\n    includes(value, options) {\n        return this._addCheck({\n            kind: \"includes\",\n            value: value,\n            position: options === null || options === void 0 ? void 0 : options.position,\n            ...errorUtil.errToObj(options === null || options === void 0 ? void 0 : options.message),\n        });\n    }\n    startsWith(value, message) {\n        return this._addCheck({\n            kind: \"startsWith\",\n            value: value,\n            ...errorUtil.errToObj(message),\n        });\n    }\n    endsWith(value, message) {\n        return this._addCheck({\n            kind: \"endsWith\",\n            value: value,\n            ...errorUtil.errToObj(message),\n        });\n    }\n    min(minLength, message) {\n        return this._addCheck({\n            kind: \"min\",\n            value: minLength,\n            ...errorUtil.errToObj(message),\n        });\n    }\n    max(maxLength, message) {\n        return this._addCheck({\n            kind: \"max\",\n            value: maxLength,\n            ...errorUtil.errToObj(message),\n        });\n    }\n    length(len, message) {\n        return this._addCheck({\n            kind: \"length\",\n            value: len,\n            ...errorUtil.errToObj(message),\n        });\n    }\n    /**\n     * @deprecated Use z.string().min(1) instead.\n     * @see {@link ZodString.min}\n     */\n    nonempty(message) {\n        return this.min(1, errorUtil.errToObj(message));\n    }\n    trim() {\n        return new ZodString({\n            ...this._def,\n            checks: [...this._def.checks, { kind: \"trim\" }],\n        });\n    }\n    toLowerCase() {\n        return new ZodString({\n            ...this._def,\n            checks: [...this._def.checks, { kind: \"toLowerCase\" }],\n        });\n    }\n    toUpperCase() {\n        return new ZodString({\n            ...this._def,\n            checks: [...this._def.checks, { kind: \"toUpperCase\" }],\n        });\n    }\n    get isDatetime() {\n        return !!this._def.checks.find((ch) => ch.kind === \"datetime\");\n    }\n    get isEmail() {\n        return !!this._def.checks.find((ch) => ch.kind === \"email\");\n    }\n    get isURL() {\n        return !!this._def.checks.find((ch) => ch.kind === \"url\");\n    }\n    get isEmoji() {\n        return !!this._def.checks.find((ch) => ch.kind === \"emoji\");\n    }\n    get isUUID() {\n        return !!this._def.checks.find((ch) => ch.kind === \"uuid\");\n    }\n    get isCUID() {\n        return !!this._def.checks.find((ch) => ch.kind === \"cuid\");\n    }\n    get isCUID2() {\n        return !!this._def.checks.find((ch) => ch.kind === \"cuid2\");\n    }\n    get isULID() {\n        return !!this._def.checks.find((ch) => ch.kind === \"ulid\");\n    }\n    get isIP() {\n        return !!this._def.checks.find((ch) => ch.kind === \"ip\");\n    }\n    get minLength() {\n        let min = null;\n        for (const ch of this._def.checks) {\n            if (ch.kind === \"min\") {\n                if (min === null || ch.value > min)\n                    min = ch.value;\n            }\n        }\n        return min;\n    }\n    get maxLength() {\n        let max = null;\n        for (const ch of this._def.checks) {\n            if (ch.kind === \"max\") {\n                if (max === null || ch.value < max)\n                    max = ch.value;\n            }\n        }\n        return max;\n    }\n}\nZodString.create = (params) => {\n    var _a;\n    return new ZodString({\n        checks: [],\n        typeName: ZodFirstPartyTypeKind.ZodString,\n        coerce: (_a = params === null || params === void 0 ? void 0 : params.coerce) !== null && _a !== void 0 ? _a : false,\n        ...processCreateParams(params),\n    });\n};\n// https://stackoverflow.com/questions/3966484/why-does-modulus-operator-return-fractional-number-in-javascript/31711034#31711034\nfunction floatSafeRemainder(val, step) {\n    const valDecCount = (val.toString().split(\".\")[1] || \"\").length;\n    const stepDecCount = (step.toString().split(\".\")[1] || \"\").length;\n    const decCount = valDecCount > stepDecCount ? valDecCount : stepDecCount;\n    const valInt = parseInt(val.toFixed(decCount).replace(\".\", \"\"));\n    const stepInt = parseInt(step.toFixed(decCount).replace(\".\", \"\"));\n    return (valInt % stepInt) / Math.pow(10, decCount);\n}\nclass ZodNumber extends ZodType {\n    constructor() {\n        super(...arguments);\n        this.min = this.gte;\n        this.max = this.lte;\n        this.step = this.multipleOf;\n    }\n    _parse(input) {\n        if (this._def.coerce) {\n            input.data = Number(input.data);\n        }\n        const parsedType = this._getType(input);\n        if (parsedType !== ZodParsedType.number) {\n            const ctx = this._getOrReturnCtx(input);\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_type,\n                expected: ZodParsedType.number,\n                received: ctx.parsedType,\n            });\n            return INVALID;\n        }\n        let ctx = undefined;\n        const status = new ParseStatus();\n        for (const check of this._def.checks) {\n            if (check.kind === \"int\") {\n                if (!util.isInteger(input.data)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        code: ZodIssueCode.invalid_type,\n                        expected: \"integer\",\n                        received: \"float\",\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"min\") {\n                const tooSmall = check.inclusive\n                    ? input.data < check.value\n                    : input.data <= check.value;\n                if (tooSmall) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        code: ZodIssueCode.too_small,\n                        minimum: check.value,\n                        type: \"number\",\n                        inclusive: check.inclusive,\n                        exact: false,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"max\") {\n                const tooBig = check.inclusive\n                    ? input.data > check.value\n                    : input.data >= check.value;\n                if (tooBig) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        code: ZodIssueCode.too_big,\n                        maximum: check.value,\n                        type: \"number\",\n                        inclusive: check.inclusive,\n                        exact: false,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"multipleOf\") {\n                if (floatSafeRemainder(input.data, check.value) !== 0) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        code: ZodIssueCode.not_multiple_of,\n                        multipleOf: check.value,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"finite\") {\n                if (!Number.isFinite(input.data)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        code: ZodIssueCode.not_finite,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else {\n                util.assertNever(check);\n            }\n        }\n        return { status: status.value, value: input.data };\n    }\n    gte(value, message) {\n        return this.setLimit(\"min\", value, true, errorUtil.toString(message));\n    }\n    gt(value, message) {\n        return this.setLimit(\"min\", value, false, errorUtil.toString(message));\n    }\n    lte(value, message) {\n        return this.setLimit(\"max\", value, true, errorUtil.toString(message));\n    }\n    lt(value, message) {\n        return this.setLimit(\"max\", value, false, errorUtil.toString(message));\n    }\n    setLimit(kind, value, inclusive, message) {\n        return new ZodNumber({\n            ...this._def,\n            checks: [\n                ...this._def.checks,\n                {\n                    kind,\n                    value,\n                    inclusive,\n                    message: errorUtil.toString(message),\n                },\n            ],\n        });\n    }\n    _addCheck(check) {\n        return new ZodNumber({\n            ...this._def,\n            checks: [...this._def.checks, check],\n        });\n    }\n    int(message) {\n        return this._addCheck({\n            kind: \"int\",\n            message: errorUtil.toString(message),\n        });\n    }\n    positive(message) {\n        return this._addCheck({\n            kind: \"min\",\n            value: 0,\n            inclusive: false,\n            message: errorUtil.toString(message),\n        });\n    }\n    negative(message) {\n        return this._addCheck({\n            kind: \"max\",\n            value: 0,\n            inclusive: false,\n            message: errorUtil.toString(message),\n        });\n    }\n    nonpositive(message) {\n        return this._addCheck({\n            kind: \"max\",\n            value: 0,\n            inclusive: true,\n            message: errorUtil.toString(message),\n        });\n    }\n    nonnegative(message) {\n        return this._addCheck({\n            kind: \"min\",\n            value: 0,\n            inclusive: true,\n            message: errorUtil.toString(message),\n        });\n    }\n    multipleOf(value, message) {\n        return this._addCheck({\n            kind: \"multipleOf\",\n            value: value,\n            message: errorUtil.toString(message),\n        });\n    }\n    finite(message) {\n        return this._addCheck({\n            kind: \"finite\",\n            message: errorUtil.toString(message),\n        });\n    }\n    safe(message) {\n        return this._addCheck({\n            kind: \"min\",\n            inclusive: true,\n            value: Number.MIN_SAFE_INTEGER,\n            message: errorUtil.toString(message),\n        })._addCheck({\n            kind: \"max\",\n            inclusive: true,\n            value: Number.MAX_SAFE_INTEGER,\n            message: errorUtil.toString(message),\n        });\n    }\n    get minValue() {\n        let min = null;\n        for (const ch of this._def.checks) {\n            if (ch.kind === \"min\") {\n                if (min === null || ch.value > min)\n                    min = ch.value;\n            }\n        }\n        return min;\n    }\n    get maxValue() {\n        let max = null;\n        for (const ch of this._def.checks) {\n            if (ch.kind === \"max\") {\n                if (max === null || ch.value < max)\n                    max = ch.value;\n            }\n        }\n        return max;\n    }\n    get isInt() {\n        return !!this._def.checks.find((ch) => ch.kind === \"int\" ||\n            (ch.kind === \"multipleOf\" && util.isInteger(ch.value)));\n    }\n    get isFinite() {\n        let max = null, min = null;\n        for (const ch of this._def.checks) {\n            if (ch.kind === \"finite\" ||\n                ch.kind === \"int\" ||\n                ch.kind === \"multipleOf\") {\n                return true;\n            }\n            else if (ch.kind === \"min\") {\n                if (min === null || ch.value > min)\n                    min = ch.value;\n            }\n            else if (ch.kind === \"max\") {\n                if (max === null || ch.value < max)\n                    max = ch.value;\n            }\n        }\n        return Number.isFinite(min) && Number.isFinite(max);\n    }\n}\nZodNumber.create = (params) => {\n    return new ZodNumber({\n        checks: [],\n        typeName: ZodFirstPartyTypeKind.ZodNumber,\n        coerce: (params === null || params === void 0 ? void 0 : params.coerce) || false,\n        ...processCreateParams(params),\n    });\n};\nclass ZodBigInt extends ZodType {\n    constructor() {\n        super(...arguments);\n        this.min = this.gte;\n        this.max = this.lte;\n    }\n    _parse(input) {\n        if (this._def.coerce) {\n            input.data = BigInt(input.data);\n        }\n        const parsedType = this._getType(input);\n        if (parsedType !== ZodParsedType.bigint) {\n            const ctx = this._getOrReturnCtx(input);\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_type,\n                expected: ZodParsedType.bigint,\n                received: ctx.parsedType,\n            });\n            return INVALID;\n        }\n        let ctx = undefined;\n        const status = new ParseStatus();\n        for (const check of this._def.checks) {\n            if (check.kind === \"min\") {\n                const tooSmall = check.inclusive\n                    ? input.data < check.value\n                    : input.data <= check.value;\n                if (tooSmall) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        code: ZodIssueCode.too_small,\n                        type: \"bigint\",\n                        minimum: check.value,\n                        inclusive: check.inclusive,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"max\") {\n                const tooBig = check.inclusive\n                    ? input.data > check.value\n                    : input.data >= check.value;\n                if (tooBig) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        code: ZodIssueCode.too_big,\n                        type: \"bigint\",\n                        maximum: check.value,\n                        inclusive: check.inclusive,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"multipleOf\") {\n                if (input.data % check.value !== BigInt(0)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        code: ZodIssueCode.not_multiple_of,\n                        multipleOf: check.value,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else {\n                util.assertNever(check);\n            }\n        }\n        return { status: status.value, value: input.data };\n    }\n    gte(value, message) {\n        return this.setLimit(\"min\", value, true, errorUtil.toString(message));\n    }\n    gt(value, message) {\n        return this.setLimit(\"min\", value, false, errorUtil.toString(message));\n    }\n    lte(value, message) {\n        return this.setLimit(\"max\", value, true, errorUtil.toString(message));\n    }\n    lt(value, message) {\n        return this.setLimit(\"max\", value, false, errorUtil.toString(message));\n    }\n    setLimit(kind, value, inclusive, message) {\n        return new ZodBigInt({\n            ...this._def,\n            checks: [\n                ...this._def.checks,\n                {\n                    kind,\n                    value,\n                    inclusive,\n                    message: errorUtil.toString(message),\n                },\n            ],\n        });\n    }\n    _addCheck(check) {\n        return new ZodBigInt({\n            ...this._def,\n            checks: [...this._def.checks, check],\n        });\n    }\n    positive(message) {\n        return this._addCheck({\n            kind: \"min\",\n            value: BigInt(0),\n            inclusive: false,\n            message: errorUtil.toString(message),\n        });\n    }\n    negative(message) {\n        return this._addCheck({\n            kind: \"max\",\n            value: BigInt(0),\n            inclusive: false,\n            message: errorUtil.toString(message),\n        });\n    }\n    nonpositive(message) {\n        return this._addCheck({\n            kind: \"max\",\n            value: BigInt(0),\n            inclusive: true,\n            message: errorUtil.toString(message),\n        });\n    }\n    nonnegative(message) {\n        return this._addCheck({\n            kind: \"min\",\n            value: BigInt(0),\n            inclusive: true,\n            message: errorUtil.toString(message),\n        });\n    }\n    multipleOf(value, message) {\n        return this._addCheck({\n            kind: \"multipleOf\",\n            value,\n            message: errorUtil.toString(message),\n        });\n    }\n    get minValue() {\n        let min = null;\n        for (const ch of this._def.checks) {\n            if (ch.kind === \"min\") {\n                if (min === null || ch.value > min)\n                    min = ch.value;\n            }\n        }\n        return min;\n    }\n    get maxValue() {\n        let max = null;\n        for (const ch of this._def.checks) {\n            if (ch.kind === \"max\") {\n                if (max === null || ch.value < max)\n                    max = ch.value;\n            }\n        }\n        return max;\n    }\n}\nZodBigInt.create = (params) => {\n    var _a;\n    return new ZodBigInt({\n        checks: [],\n        typeName: ZodFirstPartyTypeKind.ZodBigInt,\n        coerce: (_a = params === null || params === void 0 ? void 0 : params.coerce) !== null && _a !== void 0 ? _a : false,\n        ...processCreateParams(params),\n    });\n};\nclass ZodBoolean extends ZodType {\n    _parse(input) {\n        if (this._def.coerce) {\n            input.data = Boolean(input.data);\n        }\n        const parsedType = this._getType(input);\n        if (parsedType !== ZodParsedType.boolean) {\n            const ctx = this._getOrReturnCtx(input);\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_type,\n                expected: ZodParsedType.boolean,\n                received: ctx.parsedType,\n            });\n            return INVALID;\n        }\n        return OK(input.data);\n    }\n}\nZodBoolean.create = (params) => {\n    return new ZodBoolean({\n        typeName: ZodFirstPartyTypeKind.ZodBoolean,\n        coerce: (params === null || params === void 0 ? void 0 : params.coerce) || false,\n        ...processCreateParams(params),\n    });\n};\nclass ZodDate extends ZodType {\n    _parse(input) {\n        if (this._def.coerce) {\n            input.data = new Date(input.data);\n        }\n        const parsedType = this._getType(input);\n        if (parsedType !== ZodParsedType.date) {\n            const ctx = this._getOrReturnCtx(input);\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_type,\n                expected: ZodParsedType.date,\n                received: ctx.parsedType,\n            });\n            return INVALID;\n        }\n        if (isNaN(input.data.getTime())) {\n            const ctx = this._getOrReturnCtx(input);\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_date,\n            });\n            return INVALID;\n        }\n        const status = new ParseStatus();\n        let ctx = undefined;\n        for (const check of this._def.checks) {\n            if (check.kind === \"min\") {\n                if (input.data.getTime() < check.value) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        code: ZodIssueCode.too_small,\n                        message: check.message,\n                        inclusive: true,\n                        exact: false,\n                        minimum: check.value,\n                        type: \"date\",\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"max\") {\n                if (input.data.getTime() > check.value) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        code: ZodIssueCode.too_big,\n                        message: check.message,\n                        inclusive: true,\n                        exact: false,\n                        maximum: check.value,\n                        type: \"date\",\n                    });\n                    status.dirty();\n                }\n            }\n            else {\n                util.assertNever(check);\n            }\n        }\n        return {\n            status: status.value,\n            value: new Date(input.data.getTime()),\n        };\n    }\n    _addCheck(check) {\n        return new ZodDate({\n            ...this._def,\n            checks: [...this._def.checks, check],\n        });\n    }\n    min(minDate, message) {\n        return this._addCheck({\n            kind: \"min\",\n            value: minDate.getTime(),\n            message: errorUtil.toString(message),\n        });\n    }\n    max(maxDate, message) {\n        return this._addCheck({\n            kind: \"max\",\n            value: maxDate.getTime(),\n            message: errorUtil.toString(message),\n        });\n    }\n    get minDate() {\n        let min = null;\n        for (const ch of this._def.checks) {\n            if (ch.kind === \"min\") {\n                if (min === null || ch.value > min)\n                    min = ch.value;\n            }\n        }\n        return min != null ? new Date(min) : null;\n    }\n    get maxDate() {\n        let max = null;\n        for (const ch of this._def.checks) {\n            if (ch.kind === \"max\") {\n                if (max === null || ch.value < max)\n                    max = ch.value;\n            }\n        }\n        return max != null ? new Date(max) : null;\n    }\n}\nZodDate.create = (params) => {\n    return new ZodDate({\n        checks: [],\n        coerce: (params === null || params === void 0 ? void 0 : params.coerce) || false,\n        typeName: ZodFirstPartyTypeKind.ZodDate,\n        ...processCreateParams(params),\n    });\n};\nclass ZodSymbol extends ZodType {\n    _parse(input) {\n        const parsedType = this._getType(input);\n        if (parsedType !== ZodParsedType.symbol) {\n            const ctx = this._getOrReturnCtx(input);\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_type,\n                expected: ZodParsedType.symbol,\n                received: ctx.parsedType,\n            });\n            return INVALID;\n        }\n        return OK(input.data);\n    }\n}\nZodSymbol.create = (params) => {\n    return new ZodSymbol({\n        typeName: ZodFirstPartyTypeKind.ZodSymbol,\n        ...processCreateParams(params),\n    });\n};\nclass ZodUndefined extends ZodType {\n    _parse(input) {\n        const parsedType = this._getType(input);\n        if (parsedType !== ZodParsedType.undefined) {\n            const ctx = this._getOrReturnCtx(input);\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_type,\n                expected: ZodParsedType.undefined,\n                received: ctx.parsedType,\n            });\n            return INVALID;\n        }\n        return OK(input.data);\n    }\n}\nZodUndefined.create = (params) => {\n    return new ZodUndefined({\n        typeName: ZodFirstPartyTypeKind.ZodUndefined,\n        ...processCreateParams(params),\n    });\n};\nclass ZodNull extends ZodType {\n    _parse(input) {\n        const parsedType = this._getType(input);\n        if (parsedType !== ZodParsedType.null) {\n            const ctx = this._getOrReturnCtx(input);\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_type,\n                expected: ZodParsedType.null,\n                received: ctx.parsedType,\n            });\n            return INVALID;\n        }\n        return OK(input.data);\n    }\n}\nZodNull.create = (params) => {\n    return new ZodNull({\n        typeName: ZodFirstPartyTypeKind.ZodNull,\n        ...processCreateParams(params),\n    });\n};\nclass ZodAny extends ZodType {\n    constructor() {\n        super(...arguments);\n        // to prevent instances of other classes from extending ZodAny. this causes issues with catchall in ZodObject.\n        this._any = true;\n    }\n    _parse(input) {\n        return OK(input.data);\n    }\n}\nZodAny.create = (params) => {\n    return new ZodAny({\n        typeName: ZodFirstPartyTypeKind.ZodAny,\n        ...processCreateParams(params),\n    });\n};\nclass ZodUnknown extends ZodType {\n    constructor() {\n        super(...arguments);\n        // required\n        this._unknown = true;\n    }\n    _parse(input) {\n        return OK(input.data);\n    }\n}\nZodUnknown.create = (params) => {\n    return new ZodUnknown({\n        typeName: ZodFirstPartyTypeKind.ZodUnknown,\n        ...processCreateParams(params),\n    });\n};\nclass ZodNever extends ZodType {\n    _parse(input) {\n        const ctx = this._getOrReturnCtx(input);\n        addIssueToContext(ctx, {\n            code: ZodIssueCode.invalid_type,\n            expected: ZodParsedType.never,\n            received: ctx.parsedType,\n        });\n        return INVALID;\n    }\n}\nZodNever.create = (params) => {\n    return new ZodNever({\n        typeName: ZodFirstPartyTypeKind.ZodNever,\n        ...processCreateParams(params),\n    });\n};\nclass ZodVoid extends ZodType {\n    _parse(input) {\n        const parsedType = this._getType(input);\n        if (parsedType !== ZodParsedType.undefined) {\n            const ctx = this._getOrReturnCtx(input);\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_type,\n                expected: ZodParsedType.void,\n                received: ctx.parsedType,\n            });\n            return INVALID;\n        }\n        return OK(input.data);\n    }\n}\nZodVoid.create = (params) => {\n    return new ZodVoid({\n        typeName: ZodFirstPartyTypeKind.ZodVoid,\n        ...processCreateParams(params),\n    });\n};\nclass ZodArray extends ZodType {\n    _parse(input) {\n        const { ctx, status } = this._processInputParams(input);\n        const def = this._def;\n        if (ctx.parsedType !== ZodParsedType.array) {\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_type,\n                expected: ZodParsedType.array,\n                received: ctx.parsedType,\n            });\n            return INVALID;\n        }\n        if (def.exactLength !== null) {\n            const tooBig = ctx.data.length > def.exactLength.value;\n            const tooSmall = ctx.data.length < def.exactLength.value;\n            if (tooBig || tooSmall) {\n                addIssueToContext(ctx, {\n                    code: tooBig ? ZodIssueCode.too_big : ZodIssueCode.too_small,\n                    minimum: (tooSmall ? def.exactLength.value : undefined),\n                    maximum: (tooBig ? def.exactLength.value : undefined),\n                    type: \"array\",\n                    inclusive: true,\n                    exact: true,\n                    message: def.exactLength.message,\n                });\n                status.dirty();\n            }\n        }\n        if (def.minLength !== null) {\n            if (ctx.data.length < def.minLength.value) {\n                addIssueToContext(ctx, {\n                    code: ZodIssueCode.too_small,\n                    minimum: def.minLength.value,\n                    type: \"array\",\n                    inclusive: true,\n                    exact: false,\n                    message: def.minLength.message,\n                });\n                status.dirty();\n            }\n        }\n        if (def.maxLength !== null) {\n            if (ctx.data.length > def.maxLength.value) {\n                addIssueToContext(ctx, {\n                    code: ZodIssueCode.too_big,\n                    maximum: def.maxLength.value,\n                    type: \"array\",\n                    inclusive: true,\n                    exact: false,\n                    message: def.maxLength.message,\n                });\n                status.dirty();\n            }\n        }\n        if (ctx.common.async) {\n            return Promise.all([...ctx.data].map((item, i) => {\n                return def.type._parseAsync(new ParseInputLazyPath(ctx, item, ctx.path, i));\n            })).then((result) => {\n                return ParseStatus.mergeArray(status, result);\n            });\n        }\n        const result = [...ctx.data].map((item, i) => {\n            return def.type._parseSync(new ParseInputLazyPath(ctx, item, ctx.path, i));\n        });\n        return ParseStatus.mergeArray(status, result);\n    }\n    get element() {\n        return this._def.type;\n    }\n    min(minLength, message) {\n        return new ZodArray({\n            ...this._def,\n            minLength: { value: minLength, message: errorUtil.toString(message) },\n        });\n    }\n    max(maxLength, message) {\n        return new ZodArray({\n            ...this._def,\n            maxLength: { value: maxLength, message: errorUtil.toString(message) },\n        });\n    }\n    length(len, message) {\n        return new ZodArray({\n            ...this._def,\n            exactLength: { value: len, message: errorUtil.toString(message) },\n        });\n    }\n    nonempty(message) {\n        return this.min(1, message);\n    }\n}\nZodArray.create = (schema, params) => {\n    return new ZodArray({\n        type: schema,\n        minLength: null,\n        maxLength: null,\n        exactLength: null,\n        typeName: ZodFirstPartyTypeKind.ZodArray,\n        ...processCreateParams(params),\n    });\n};\nfunction deepPartialify(schema) {\n    if (schema instanceof ZodObject) {\n        const newShape = {};\n        for (const key in schema.shape) {\n            const fieldSchema = schema.shape[key];\n            newShape[key] = ZodOptional.create(deepPartialify(fieldSchema));\n        }\n        return new ZodObject({\n            ...schema._def,\n            shape: () => newShape,\n        });\n    }\n    else if (schema instanceof ZodArray) {\n        return new ZodArray({\n            ...schema._def,\n            type: deepPartialify(schema.element),\n        });\n    }\n    else if (schema instanceof ZodOptional) {\n        return ZodOptional.create(deepPartialify(schema.unwrap()));\n    }\n    else if (schema instanceof ZodNullable) {\n        return ZodNullable.create(deepPartialify(schema.unwrap()));\n    }\n    else if (schema instanceof ZodTuple) {\n        return ZodTuple.create(schema.items.map((item) => deepPartialify(item)));\n    }\n    else {\n        return schema;\n    }\n}\nclass ZodObject extends ZodType {\n    constructor() {\n        super(...arguments);\n        this._cached = null;\n        /**\n         * @deprecated In most cases, this is no longer needed - unknown properties are now silently stripped.\n         * If you want to pass through unknown properties, use `.passthrough()` instead.\n         */\n        this.nonstrict = this.passthrough;\n        // extend<\n        //   Augmentation extends ZodRawShape,\n        //   NewOutput extends util.flatten<{\n        //     [k in keyof Augmentation | keyof Output]: k extends keyof Augmentation\n        //       ? Augmentation[k][\"_output\"]\n        //       : k extends keyof Output\n        //       ? Output[k]\n        //       : never;\n        //   }>,\n        //   NewInput extends util.flatten<{\n        //     [k in keyof Augmentation | keyof Input]: k extends keyof Augmentation\n        //       ? Augmentation[k][\"_input\"]\n        //       : k extends keyof Input\n        //       ? Input[k]\n        //       : never;\n        //   }>\n        // >(\n        //   augmentation: Augmentation\n        // ): ZodObject<\n        //   extendShape<T, Augmentation>,\n        //   UnknownKeys,\n        //   Catchall,\n        //   NewOutput,\n        //   NewInput\n        // > {\n        //   return new ZodObject({\n        //     ...this._def,\n        //     shape: () => ({\n        //       ...this._def.shape(),\n        //       ...augmentation,\n        //     }),\n        //   }) as any;\n        // }\n        /**\n         * @deprecated Use `.extend` instead\n         *  */\n        this.augment = this.extend;\n    }\n    _getCached() {\n        if (this._cached !== null)\n            return this._cached;\n        const shape = this._def.shape();\n        const keys = util.objectKeys(shape);\n        return (this._cached = { shape, keys });\n    }\n    _parse(input) {\n        const parsedType = this._getType(input);\n        if (parsedType !== ZodParsedType.object) {\n            const ctx = this._getOrReturnCtx(input);\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_type,\n                expected: ZodParsedType.object,\n                received: ctx.parsedType,\n            });\n            return INVALID;\n        }\n        const { status, ctx } = this._processInputParams(input);\n        const { shape, keys: shapeKeys } = this._getCached();\n        const extraKeys = [];\n        if (!(this._def.catchall instanceof ZodNever &&\n            this._def.unknownKeys === \"strip\")) {\n            for (const key in ctx.data) {\n                if (!shapeKeys.includes(key)) {\n                    extraKeys.push(key);\n                }\n            }\n        }\n        const pairs = [];\n        for (const key of shapeKeys) {\n            const keyValidator = shape[key];\n            const value = ctx.data[key];\n            pairs.push({\n                key: { status: \"valid\", value: key },\n                value: keyValidator._parse(new ParseInputLazyPath(ctx, value, ctx.path, key)),\n                alwaysSet: key in ctx.data,\n            });\n        }\n        if (this._def.catchall instanceof ZodNever) {\n            const unknownKeys = this._def.unknownKeys;\n            if (unknownKeys === \"passthrough\") {\n                for (const key of extraKeys) {\n                    pairs.push({\n                        key: { status: \"valid\", value: key },\n                        value: { status: \"valid\", value: ctx.data[key] },\n                    });\n                }\n            }\n            else if (unknownKeys === \"strict\") {\n                if (extraKeys.length > 0) {\n                    addIssueToContext(ctx, {\n                        code: ZodIssueCode.unrecognized_keys,\n                        keys: extraKeys,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (unknownKeys === \"strip\") ;\n            else {\n                throw new Error(`Internal ZodObject error: invalid unknownKeys value.`);\n            }\n        }\n        else {\n            // run catchall validation\n            const catchall = this._def.catchall;\n            for (const key of extraKeys) {\n                const value = ctx.data[key];\n                pairs.push({\n                    key: { status: \"valid\", value: key },\n                    value: catchall._parse(new ParseInputLazyPath(ctx, value, ctx.path, key) //, ctx.child(key), value, getParsedType(value)\n                    ),\n                    alwaysSet: key in ctx.data,\n                });\n            }\n        }\n        if (ctx.common.async) {\n            return Promise.resolve()\n                .then(async () => {\n                const syncPairs = [];\n                for (const pair of pairs) {\n                    const key = await pair.key;\n                    syncPairs.push({\n                        key,\n                        value: await pair.value,\n                        alwaysSet: pair.alwaysSet,\n                    });\n                }\n                return syncPairs;\n            })\n                .then((syncPairs) => {\n                return ParseStatus.mergeObjectSync(status, syncPairs);\n            });\n        }\n        else {\n            return ParseStatus.mergeObjectSync(status, pairs);\n        }\n    }\n    get shape() {\n        return this._def.shape();\n    }\n    strict(message) {\n        errorUtil.errToObj;\n        return new ZodObject({\n            ...this._def,\n            unknownKeys: \"strict\",\n            ...(message !== undefined\n                ? {\n                    errorMap: (issue, ctx) => {\n                        var _a, _b, _c, _d;\n                        const defaultError = (_c = (_b = (_a = this._def).errorMap) === null || _b === void 0 ? void 0 : _b.call(_a, issue, ctx).message) !== null && _c !== void 0 ? _c : ctx.defaultError;\n                        if (issue.code === \"unrecognized_keys\")\n                            return {\n                                message: (_d = errorUtil.errToObj(message).message) !== null && _d !== void 0 ? _d : defaultError,\n                            };\n                        return {\n                            message: defaultError,\n                        };\n                    },\n                }\n                : {}),\n        });\n    }\n    strip() {\n        return new ZodObject({\n            ...this._def,\n            unknownKeys: \"strip\",\n        });\n    }\n    passthrough() {\n        return new ZodObject({\n            ...this._def,\n            unknownKeys: \"passthrough\",\n        });\n    }\n    // const AugmentFactory =\n    //   <Def extends ZodObjectDef>(def: Def) =>\n    //   <Augmentation extends ZodRawShape>(\n    //     augmentation: Augmentation\n    //   ): ZodObject<\n    //     extendShape<ReturnType<Def[\"shape\"]>, Augmentation>,\n    //     Def[\"unknownKeys\"],\n    //     Def[\"catchall\"]\n    //   > => {\n    //     return new ZodObject({\n    //       ...def,\n    //       shape: () => ({\n    //         ...def.shape(),\n    //         ...augmentation,\n    //       }),\n    //     }) as any;\n    //   };\n    extend(augmentation) {\n        return new ZodObject({\n            ...this._def,\n            shape: () => ({\n                ...this._def.shape(),\n                ...augmentation,\n            }),\n        });\n    }\n    /**\n     * Prior to zod@1.0.12 there was a bug in the\n     * inferred type of merged objects. Please\n     * upgrade if you are experiencing issues.\n     */\n    merge(merging) {\n        const merged = new ZodObject({\n            unknownKeys: merging._def.unknownKeys,\n            catchall: merging._def.catchall,\n            shape: () => ({\n                ...this._def.shape(),\n                ...merging._def.shape(),\n            }),\n            typeName: ZodFirstPartyTypeKind.ZodObject,\n        });\n        return merged;\n    }\n    // merge<\n    //   Incoming extends AnyZodObject,\n    //   Augmentation extends Incoming[\"shape\"],\n    //   NewOutput extends {\n    //     [k in keyof Augmentation | keyof Output]: k extends keyof Augmentation\n    //       ? Augmentation[k][\"_output\"]\n    //       : k extends keyof Output\n    //       ? Output[k]\n    //       : never;\n    //   },\n    //   NewInput extends {\n    //     [k in keyof Augmentation | keyof Input]: k extends keyof Augmentation\n    //       ? Augmentation[k][\"_input\"]\n    //       : k extends keyof Input\n    //       ? Input[k]\n    //       : never;\n    //   }\n    // >(\n    //   merging: Incoming\n    // ): ZodObject<\n    //   extendShape<T, ReturnType<Incoming[\"_def\"][\"shape\"]>>,\n    //   Incoming[\"_def\"][\"unknownKeys\"],\n    //   Incoming[\"_def\"][\"catchall\"],\n    //   NewOutput,\n    //   NewInput\n    // > {\n    //   const merged: any = new ZodObject({\n    //     unknownKeys: merging._def.unknownKeys,\n    //     catchall: merging._def.catchall,\n    //     shape: () =>\n    //       objectUtil.mergeShapes(this._def.shape(), merging._def.shape()),\n    //     typeName: ZodFirstPartyTypeKind.ZodObject,\n    //   }) as any;\n    //   return merged;\n    // }\n    setKey(key, schema) {\n        return this.augment({ [key]: schema });\n    }\n    // merge<Incoming extends AnyZodObject>(\n    //   merging: Incoming\n    // ): //ZodObject<T & Incoming[\"_shape\"], UnknownKeys, Catchall> = (merging) => {\n    // ZodObject<\n    //   extendShape<T, ReturnType<Incoming[\"_def\"][\"shape\"]>>,\n    //   Incoming[\"_def\"][\"unknownKeys\"],\n    //   Incoming[\"_def\"][\"catchall\"]\n    // > {\n    //   // const mergedShape = objectUtil.mergeShapes(\n    //   //   this._def.shape(),\n    //   //   merging._def.shape()\n    //   // );\n    //   const merged: any = new ZodObject({\n    //     unknownKeys: merging._def.unknownKeys,\n    //     catchall: merging._def.catchall,\n    //     shape: () =>\n    //       objectUtil.mergeShapes(this._def.shape(), merging._def.shape()),\n    //     typeName: ZodFirstPartyTypeKind.ZodObject,\n    //   }) as any;\n    //   return merged;\n    // }\n    catchall(index) {\n        return new ZodObject({\n            ...this._def,\n            catchall: index,\n        });\n    }\n    pick(mask) {\n        const shape = {};\n        util.objectKeys(mask).forEach((key) => {\n            if (mask[key] && this.shape[key]) {\n                shape[key] = this.shape[key];\n            }\n        });\n        return new ZodObject({\n            ...this._def,\n            shape: () => shape,\n        });\n    }\n    omit(mask) {\n        const shape = {};\n        util.objectKeys(this.shape).forEach((key) => {\n            if (!mask[key]) {\n                shape[key] = this.shape[key];\n            }\n        });\n        return new ZodObject({\n            ...this._def,\n            shape: () => shape,\n        });\n    }\n    /**\n     * @deprecated\n     */\n    deepPartial() {\n        return deepPartialify(this);\n    }\n    partial(mask) {\n        const newShape = {};\n        util.objectKeys(this.shape).forEach((key) => {\n            const fieldSchema = this.shape[key];\n            if (mask && !mask[key]) {\n                newShape[key] = fieldSchema;\n            }\n            else {\n                newShape[key] = fieldSchema.optional();\n            }\n        });\n        return new ZodObject({\n            ...this._def,\n            shape: () => newShape,\n        });\n    }\n    required(mask) {\n        const newShape = {};\n        util.objectKeys(this.shape).forEach((key) => {\n            if (mask && !mask[key]) {\n                newShape[key] = this.shape[key];\n            }\n            else {\n                const fieldSchema = this.shape[key];\n                let newField = fieldSchema;\n                while (newField instanceof ZodOptional) {\n                    newField = newField._def.innerType;\n                }\n                newShape[key] = newField;\n            }\n        });\n        return new ZodObject({\n            ...this._def,\n            shape: () => newShape,\n        });\n    }\n    keyof() {\n        return createZodEnum(util.objectKeys(this.shape));\n    }\n}\nZodObject.create = (shape, params) => {\n    return new ZodObject({\n        shape: () => shape,\n        unknownKeys: \"strip\",\n        catchall: ZodNever.create(),\n        typeName: ZodFirstPartyTypeKind.ZodObject,\n        ...processCreateParams(params),\n    });\n};\nZodObject.strictCreate = (shape, params) => {\n    return new ZodObject({\n        shape: () => shape,\n        unknownKeys: \"strict\",\n        catchall: ZodNever.create(),\n        typeName: ZodFirstPartyTypeKind.ZodObject,\n        ...processCreateParams(params),\n    });\n};\nZodObject.lazycreate = (shape, params) => {\n    return new ZodObject({\n        shape,\n        unknownKeys: \"strip\",\n        catchall: ZodNever.create(),\n        typeName: ZodFirstPartyTypeKind.ZodObject,\n        ...processCreateParams(params),\n    });\n};\nclass ZodUnion extends ZodType {\n    _parse(input) {\n        const { ctx } = this._processInputParams(input);\n        const options = this._def.options;\n        function handleResults(results) {\n            // return first issue-free validation if it exists\n            for (const result of results) {\n                if (result.result.status === \"valid\") {\n                    return result.result;\n                }\n            }\n            for (const result of results) {\n                if (result.result.status === \"dirty\") {\n                    // add issues from dirty option\n                    ctx.common.issues.push(...result.ctx.common.issues);\n                    return result.result;\n                }\n            }\n            // return invalid\n            const unionErrors = results.map((result) => new ZodError(result.ctx.common.issues));\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_union,\n                unionErrors,\n            });\n            return INVALID;\n        }\n        if (ctx.common.async) {\n            return Promise.all(options.map(async (option) => {\n                const childCtx = {\n                    ...ctx,\n                    common: {\n                        ...ctx.common,\n                        issues: [],\n                    },\n                    parent: null,\n                };\n                return {\n                    result: await option._parseAsync({\n                        data: ctx.data,\n                        path: ctx.path,\n                        parent: childCtx,\n                    }),\n                    ctx: childCtx,\n                };\n            })).then(handleResults);\n        }\n        else {\n            let dirty = undefined;\n            const issues = [];\n            for (const option of options) {\n                const childCtx = {\n                    ...ctx,\n                    common: {\n                        ...ctx.common,\n                        issues: [],\n                    },\n                    parent: null,\n                };\n                const result = option._parseSync({\n                    data: ctx.data,\n                    path: ctx.path,\n                    parent: childCtx,\n                });\n                if (result.status === \"valid\") {\n                    return result;\n                }\n                else if (result.status === \"dirty\" && !dirty) {\n                    dirty = { result, ctx: childCtx };\n                }\n                if (childCtx.common.issues.length) {\n                    issues.push(childCtx.common.issues);\n                }\n            }\n            if (dirty) {\n                ctx.common.issues.push(...dirty.ctx.common.issues);\n                return dirty.result;\n            }\n            const unionErrors = issues.map((issues) => new ZodError(issues));\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_union,\n                unionErrors,\n            });\n            return INVALID;\n        }\n    }\n    get options() {\n        return this._def.options;\n    }\n}\nZodUnion.create = (types, params) => {\n    return new ZodUnion({\n        options: types,\n        typeName: ZodFirstPartyTypeKind.ZodUnion,\n        ...processCreateParams(params),\n    });\n};\n/////////////////////////////////////////////////////\n/////////////////////////////////////////////////////\n//////////                                 //////////\n//////////      ZodDiscriminatedUnion      //////////\n//////////                                 //////////\n/////////////////////////////////////////////////////\n/////////////////////////////////////////////////////\nconst getDiscriminator = (type) => {\n    if (type instanceof ZodLazy) {\n        return getDiscriminator(type.schema);\n    }\n    else if (type instanceof ZodEffects) {\n        return getDiscriminator(type.innerType());\n    }\n    else if (type instanceof ZodLiteral) {\n        return [type.value];\n    }\n    else if (type instanceof ZodEnum) {\n        return type.options;\n    }\n    else if (type instanceof ZodNativeEnum) {\n        // eslint-disable-next-line ban/ban\n        return Object.keys(type.enum);\n    }\n    else if (type instanceof ZodDefault) {\n        return getDiscriminator(type._def.innerType);\n    }\n    else if (type instanceof ZodUndefined) {\n        return [undefined];\n    }\n    else if (type instanceof ZodNull) {\n        return [null];\n    }\n    else {\n        return null;\n    }\n};\nclass ZodDiscriminatedUnion extends ZodType {\n    _parse(input) {\n        const { ctx } = this._processInputParams(input);\n        if (ctx.parsedType !== ZodParsedType.object) {\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_type,\n                expected: ZodParsedType.object,\n                received: ctx.parsedType,\n            });\n            return INVALID;\n        }\n        const discriminator = this.discriminator;\n        const discriminatorValue = ctx.data[discriminator];\n        const option = this.optionsMap.get(discriminatorValue);\n        if (!option) {\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_union_discriminator,\n                options: Array.from(this.optionsMap.keys()),\n                path: [discriminator],\n            });\n            return INVALID;\n        }\n        if (ctx.common.async) {\n            return option._parseAsync({\n                data: ctx.data,\n                path: ctx.path,\n                parent: ctx,\n            });\n        }\n        else {\n            return option._parseSync({\n                data: ctx.data,\n                path: ctx.path,\n                parent: ctx,\n            });\n        }\n    }\n    get discriminator() {\n        return this._def.discriminator;\n    }\n    get options() {\n        return this._def.options;\n    }\n    get optionsMap() {\n        return this._def.optionsMap;\n    }\n    /**\n     * The constructor of the discriminated union schema. Its behaviour is very similar to that of the normal z.union() constructor.\n     * However, it only allows a union of objects, all of which need to share a discriminator property. This property must\n     * have a different value for each object in the union.\n     * @param discriminator the name of the discriminator property\n     * @param types an array of object schemas\n     * @param params\n     */\n    static create(discriminator, options, params) {\n        // Get all the valid discriminator values\n        const optionsMap = new Map();\n        // try {\n        for (const type of options) {\n            const discriminatorValues = getDiscriminator(type.shape[discriminator]);\n            if (!discriminatorValues) {\n                throw new Error(`A discriminator value for key \\`${discriminator}\\` could not be extracted from all schema options`);\n            }\n            for (const value of discriminatorValues) {\n                if (optionsMap.has(value)) {\n                    throw new Error(`Discriminator property ${String(discriminator)} has duplicate value ${String(value)}`);\n                }\n                optionsMap.set(value, type);\n            }\n        }\n        return new ZodDiscriminatedUnion({\n            typeName: ZodFirstPartyTypeKind.ZodDiscriminatedUnion,\n            discriminator,\n            options,\n            optionsMap,\n            ...processCreateParams(params),\n        });\n    }\n}\nfunction mergeValues(a, b) {\n    const aType = getParsedType(a);\n    const bType = getParsedType(b);\n    if (a === b) {\n        return { valid: true, data: a };\n    }\n    else if (aType === ZodParsedType.object && bType === ZodParsedType.object) {\n        const bKeys = util.objectKeys(b);\n        const sharedKeys = util\n            .objectKeys(a)\n            .filter((key) => bKeys.indexOf(key) !== -1);\n        const newObj = { ...a, ...b };\n        for (const key of sharedKeys) {\n            const sharedValue = mergeValues(a[key], b[key]);\n            if (!sharedValue.valid) {\n                return { valid: false };\n            }\n            newObj[key] = sharedValue.data;\n        }\n        return { valid: true, data: newObj };\n    }\n    else if (aType === ZodParsedType.array && bType === ZodParsedType.array) {\n        if (a.length !== b.length) {\n            return { valid: false };\n        }\n        const newArray = [];\n        for (let index = 0; index < a.length; index++) {\n            const itemA = a[index];\n            const itemB = b[index];\n            const sharedValue = mergeValues(itemA, itemB);\n            if (!sharedValue.valid) {\n                return { valid: false };\n            }\n            newArray.push(sharedValue.data);\n        }\n        return { valid: true, data: newArray };\n    }\n    else if (aType === ZodParsedType.date &&\n        bType === ZodParsedType.date &&\n        +a === +b) {\n        return { valid: true, data: a };\n    }\n    else {\n        return { valid: false };\n    }\n}\nclass ZodIntersection extends ZodType {\n    _parse(input) {\n        const { status, ctx } = this._processInputParams(input);\n        const handleParsed = (parsedLeft, parsedRight) => {\n            if (isAborted(parsedLeft) || isAborted(parsedRight)) {\n                return INVALID;\n            }\n            const merged = mergeValues(parsedLeft.value, parsedRight.value);\n            if (!merged.valid) {\n                addIssueToContext(ctx, {\n                    code: ZodIssueCode.invalid_intersection_types,\n                });\n                return INVALID;\n            }\n            if (isDirty(parsedLeft) || isDirty(parsedRight)) {\n                status.dirty();\n            }\n            return { status: status.value, value: merged.data };\n        };\n        if (ctx.common.async) {\n            return Promise.all([\n                this._def.left._parseAsync({\n                    data: ctx.data,\n                    path: ctx.path,\n                    parent: ctx,\n                }),\n                this._def.right._parseAsync({\n                    data: ctx.data,\n                    path: ctx.path,\n                    parent: ctx,\n                }),\n            ]).then(([left, right]) => handleParsed(left, right));\n        }\n        else {\n            return handleParsed(this._def.left._parseSync({\n                data: ctx.data,\n                path: ctx.path,\n                parent: ctx,\n            }), this._def.right._parseSync({\n                data: ctx.data,\n                path: ctx.path,\n                parent: ctx,\n            }));\n        }\n    }\n}\nZodIntersection.create = (left, right, params) => {\n    return new ZodIntersection({\n        left: left,\n        right: right,\n        typeName: ZodFirstPartyTypeKind.ZodIntersection,\n        ...processCreateParams(params),\n    });\n};\nclass ZodTuple extends ZodType {\n    _parse(input) {\n        const { status, ctx } = this._processInputParams(input);\n        if (ctx.parsedType !== ZodParsedType.array) {\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_type,\n                expected: ZodParsedType.array,\n                received: ctx.parsedType,\n            });\n            return INVALID;\n        }\n        if (ctx.data.length < this._def.items.length) {\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.too_small,\n                minimum: this._def.items.length,\n                inclusive: true,\n                exact: false,\n                type: \"array\",\n            });\n            return INVALID;\n        }\n        const rest = this._def.rest;\n        if (!rest && ctx.data.length > this._def.items.length) {\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.too_big,\n                maximum: this._def.items.length,\n                inclusive: true,\n                exact: false,\n                type: \"array\",\n            });\n            status.dirty();\n        }\n        const items = [...ctx.data]\n            .map((item, itemIndex) => {\n            const schema = this._def.items[itemIndex] || this._def.rest;\n            if (!schema)\n                return null;\n            return schema._parse(new ParseInputLazyPath(ctx, item, ctx.path, itemIndex));\n        })\n            .filter((x) => !!x); // filter nulls\n        if (ctx.common.async) {\n            return Promise.all(items).then((results) => {\n                return ParseStatus.mergeArray(status, results);\n            });\n        }\n        else {\n            return ParseStatus.mergeArray(status, items);\n        }\n    }\n    get items() {\n        return this._def.items;\n    }\n    rest(rest) {\n        return new ZodTuple({\n            ...this._def,\n            rest,\n        });\n    }\n}\nZodTuple.create = (schemas, params) => {\n    if (!Array.isArray(schemas)) {\n        throw new Error(\"You must pass an array of schemas to z.tuple([ ... ])\");\n    }\n    return new ZodTuple({\n        items: schemas,\n        typeName: ZodFirstPartyTypeKind.ZodTuple,\n        rest: null,\n        ...processCreateParams(params),\n    });\n};\nclass ZodRecord extends ZodType {\n    get keySchema() {\n        return this._def.keyType;\n    }\n    get valueSchema() {\n        return this._def.valueType;\n    }\n    _parse(input) {\n        const { status, ctx } = this._processInputParams(input);\n        if (ctx.parsedType !== ZodParsedType.object) {\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_type,\n                expected: ZodParsedType.object,\n                received: ctx.parsedType,\n            });\n            return INVALID;\n        }\n        const pairs = [];\n        const keyType = this._def.keyType;\n        const valueType = this._def.valueType;\n        for (const key in ctx.data) {\n            pairs.push({\n                key: keyType._parse(new ParseInputLazyPath(ctx, key, ctx.path, key)),\n                value: valueType._parse(new ParseInputLazyPath(ctx, ctx.data[key], ctx.path, key)),\n            });\n        }\n        if (ctx.common.async) {\n            return ParseStatus.mergeObjectAsync(status, pairs);\n        }\n        else {\n            return ParseStatus.mergeObjectSync(status, pairs);\n        }\n    }\n    get element() {\n        return this._def.valueType;\n    }\n    static create(first, second, third) {\n        if (second instanceof ZodType) {\n            return new ZodRecord({\n                keyType: first,\n                valueType: second,\n                typeName: ZodFirstPartyTypeKind.ZodRecord,\n                ...processCreateParams(third),\n            });\n        }\n        return new ZodRecord({\n            keyType: ZodString.create(),\n            valueType: first,\n            typeName: ZodFirstPartyTypeKind.ZodRecord,\n            ...processCreateParams(second),\n        });\n    }\n}\nclass ZodMap extends ZodType {\n    get keySchema() {\n        return this._def.keyType;\n    }\n    get valueSchema() {\n        return this._def.valueType;\n    }\n    _parse(input) {\n        const { status, ctx } = this._processInputParams(input);\n        if (ctx.parsedType !== ZodParsedType.map) {\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_type,\n                expected: ZodParsedType.map,\n                received: ctx.parsedType,\n            });\n            return INVALID;\n        }\n        const keyType = this._def.keyType;\n        const valueType = this._def.valueType;\n        const pairs = [...ctx.data.entries()].map(([key, value], index) => {\n            return {\n                key: keyType._parse(new ParseInputLazyPath(ctx, key, ctx.path, [index, \"key\"])),\n                value: valueType._parse(new ParseInputLazyPath(ctx, value, ctx.path, [index, \"value\"])),\n            };\n        });\n        if (ctx.common.async) {\n            const finalMap = new Map();\n            return Promise.resolve().then(async () => {\n                for (const pair of pairs) {\n                    const key = await pair.key;\n                    const value = await pair.value;\n                    if (key.status === \"aborted\" || value.status === \"aborted\") {\n                        return INVALID;\n                    }\n                    if (key.status === \"dirty\" || value.status === \"dirty\") {\n                        status.dirty();\n                    }\n                    finalMap.set(key.value, value.value);\n                }\n                return { status: status.value, value: finalMap };\n            });\n        }\n        else {\n            const finalMap = new Map();\n            for (const pair of pairs) {\n                const key = pair.key;\n                const value = pair.value;\n                if (key.status === \"aborted\" || value.status === \"aborted\") {\n                    return INVALID;\n                }\n                if (key.status === \"dirty\" || value.status === \"dirty\") {\n                    status.dirty();\n                }\n                finalMap.set(key.value, value.value);\n            }\n            return { status: status.value, value: finalMap };\n        }\n    }\n}\nZodMap.create = (keyType, valueType, params) => {\n    return new ZodMap({\n        valueType,\n        keyType,\n        typeName: ZodFirstPartyTypeKind.ZodMap,\n        ...processCreateParams(params),\n    });\n};\nclass ZodSet extends ZodType {\n    _parse(input) {\n        const { status, ctx } = this._processInputParams(input);\n        if (ctx.parsedType !== ZodParsedType.set) {\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_type,\n                expected: ZodParsedType.set,\n                received: ctx.parsedType,\n            });\n            return INVALID;\n        }\n        const def = this._def;\n        if (def.minSize !== null) {\n            if (ctx.data.size < def.minSize.value) {\n                addIssueToContext(ctx, {\n                    code: ZodIssueCode.too_small,\n                    minimum: def.minSize.value,\n                    type: \"set\",\n                    inclusive: true,\n                    exact: false,\n                    message: def.minSize.message,\n                });\n                status.dirty();\n            }\n        }\n        if (def.maxSize !== null) {\n            if (ctx.data.size > def.maxSize.value) {\n                addIssueToContext(ctx, {\n                    code: ZodIssueCode.too_big,\n                    maximum: def.maxSize.value,\n                    type: \"set\",\n                    inclusive: true,\n                    exact: false,\n                    message: def.maxSize.message,\n                });\n                status.dirty();\n            }\n        }\n        const valueType = this._def.valueType;\n        function finalizeSet(elements) {\n            const parsedSet = new Set();\n            for (const element of elements) {\n                if (element.status === \"aborted\")\n                    return INVALID;\n                if (element.status === \"dirty\")\n                    status.dirty();\n                parsedSet.add(element.value);\n            }\n            return { status: status.value, value: parsedSet };\n        }\n        const elements = [...ctx.data.values()].map((item, i) => valueType._parse(new ParseInputLazyPath(ctx, item, ctx.path, i)));\n        if (ctx.common.async) {\n            return Promise.all(elements).then((elements) => finalizeSet(elements));\n        }\n        else {\n            return finalizeSet(elements);\n        }\n    }\n    min(minSize, message) {\n        return new ZodSet({\n            ...this._def,\n            minSize: { value: minSize, message: errorUtil.toString(message) },\n        });\n    }\n    max(maxSize, message) {\n        return new ZodSet({\n            ...this._def,\n            maxSize: { value: maxSize, message: errorUtil.toString(message) },\n        });\n    }\n    size(size, message) {\n        return this.min(size, message).max(size, message);\n    }\n    nonempty(message) {\n        return this.min(1, message);\n    }\n}\nZodSet.create = (valueType, params) => {\n    return new ZodSet({\n        valueType,\n        minSize: null,\n        maxSize: null,\n        typeName: ZodFirstPartyTypeKind.ZodSet,\n        ...processCreateParams(params),\n    });\n};\nclass ZodFunction extends ZodType {\n    constructor() {\n        super(...arguments);\n        this.validate = this.implement;\n    }\n    _parse(input) {\n        const { ctx } = this._processInputParams(input);\n        if (ctx.parsedType !== ZodParsedType.function) {\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_type,\n                expected: ZodParsedType.function,\n                received: ctx.parsedType,\n            });\n            return INVALID;\n        }\n        function makeArgsIssue(args, error) {\n            return makeIssue({\n                data: args,\n                path: ctx.path,\n                errorMaps: [\n                    ctx.common.contextualErrorMap,\n                    ctx.schemaErrorMap,\n                    getErrorMap(),\n                    errorMap,\n                ].filter((x) => !!x),\n                issueData: {\n                    code: ZodIssueCode.invalid_arguments,\n                    argumentsError: error,\n                },\n            });\n        }\n        function makeReturnsIssue(returns, error) {\n            return makeIssue({\n                data: returns,\n                path: ctx.path,\n                errorMaps: [\n                    ctx.common.contextualErrorMap,\n                    ctx.schemaErrorMap,\n                    getErrorMap(),\n                    errorMap,\n                ].filter((x) => !!x),\n                issueData: {\n                    code: ZodIssueCode.invalid_return_type,\n                    returnTypeError: error,\n                },\n            });\n        }\n        const params = { errorMap: ctx.common.contextualErrorMap };\n        const fn = ctx.data;\n        if (this._def.returns instanceof ZodPromise) {\n            // Would love a way to avoid disabling this rule, but we need\n            // an alias (using an arrow function was what caused 2651).\n            // eslint-disable-next-line @typescript-eslint/no-this-alias\n            const me = this;\n            return OK(async function (...args) {\n                const error = new ZodError([]);\n                const parsedArgs = await me._def.args\n                    .parseAsync(args, params)\n                    .catch((e) => {\n                    error.addIssue(makeArgsIssue(args, e));\n                    throw error;\n                });\n                const result = await Reflect.apply(fn, this, parsedArgs);\n                const parsedReturns = await me._def.returns._def.type\n                    .parseAsync(result, params)\n                    .catch((e) => {\n                    error.addIssue(makeReturnsIssue(result, e));\n                    throw error;\n                });\n                return parsedReturns;\n            });\n        }\n        else {\n            // Would love a way to avoid disabling this rule, but we need\n            // an alias (using an arrow function was what caused 2651).\n            // eslint-disable-next-line @typescript-eslint/no-this-alias\n            const me = this;\n            return OK(function (...args) {\n                const parsedArgs = me._def.args.safeParse(args, params);\n                if (!parsedArgs.success) {\n                    throw new ZodError([makeArgsIssue(args, parsedArgs.error)]);\n                }\n                const result = Reflect.apply(fn, this, parsedArgs.data);\n                const parsedReturns = me._def.returns.safeParse(result, params);\n                if (!parsedReturns.success) {\n                    throw new ZodError([makeReturnsIssue(result, parsedReturns.error)]);\n                }\n                return parsedReturns.data;\n            });\n        }\n    }\n    parameters() {\n        return this._def.args;\n    }\n    returnType() {\n        return this._def.returns;\n    }\n    args(...items) {\n        return new ZodFunction({\n            ...this._def,\n            args: ZodTuple.create(items).rest(ZodUnknown.create()),\n        });\n    }\n    returns(returnType) {\n        return new ZodFunction({\n            ...this._def,\n            returns: returnType,\n        });\n    }\n    implement(func) {\n        const validatedFunc = this.parse(func);\n        return validatedFunc;\n    }\n    strictImplement(func) {\n        const validatedFunc = this.parse(func);\n        return validatedFunc;\n    }\n    static create(args, returns, params) {\n        return new ZodFunction({\n            args: (args\n                ? args\n                : ZodTuple.create([]).rest(ZodUnknown.create())),\n            returns: returns || ZodUnknown.create(),\n            typeName: ZodFirstPartyTypeKind.ZodFunction,\n            ...processCreateParams(params),\n        });\n    }\n}\nclass ZodLazy extends ZodType {\n    get schema() {\n        return this._def.getter();\n    }\n    _parse(input) {\n        const { ctx } = this._processInputParams(input);\n        const lazySchema = this._def.getter();\n        return lazySchema._parse({ data: ctx.data, path: ctx.path, parent: ctx });\n    }\n}\nZodLazy.create = (getter, params) => {\n    return new ZodLazy({\n        getter: getter,\n        typeName: ZodFirstPartyTypeKind.ZodLazy,\n        ...processCreateParams(params),\n    });\n};\nclass ZodLiteral extends ZodType {\n    _parse(input) {\n        if (input.data !== this._def.value) {\n            const ctx = this._getOrReturnCtx(input);\n            addIssueToContext(ctx, {\n                received: ctx.data,\n                code: ZodIssueCode.invalid_literal,\n                expected: this._def.value,\n            });\n            return INVALID;\n        }\n        return { status: \"valid\", value: input.data };\n    }\n    get value() {\n        return this._def.value;\n    }\n}\nZodLiteral.create = (value, params) => {\n    return new ZodLiteral({\n        value: value,\n        typeName: ZodFirstPartyTypeKind.ZodLiteral,\n        ...processCreateParams(params),\n    });\n};\nfunction createZodEnum(values, params) {\n    return new ZodEnum({\n        values,\n        typeName: ZodFirstPartyTypeKind.ZodEnum,\n        ...processCreateParams(params),\n    });\n}\nclass ZodEnum extends ZodType {\n    _parse(input) {\n        if (typeof input.data !== \"string\") {\n            const ctx = this._getOrReturnCtx(input);\n            const expectedValues = this._def.values;\n            addIssueToContext(ctx, {\n                expected: util.joinValues(expectedValues),\n                received: ctx.parsedType,\n                code: ZodIssueCode.invalid_type,\n            });\n            return INVALID;\n        }\n        if (this._def.values.indexOf(input.data) === -1) {\n            const ctx = this._getOrReturnCtx(input);\n            const expectedValues = this._def.values;\n            addIssueToContext(ctx, {\n                received: ctx.data,\n                code: ZodIssueCode.invalid_enum_value,\n                options: expectedValues,\n            });\n            return INVALID;\n        }\n        return OK(input.data);\n    }\n    get options() {\n        return this._def.values;\n    }\n    get enum() {\n        const enumValues = {};\n        for (const val of this._def.values) {\n            enumValues[val] = val;\n        }\n        return enumValues;\n    }\n    get Values() {\n        const enumValues = {};\n        for (const val of this._def.values) {\n            enumValues[val] = val;\n        }\n        return enumValues;\n    }\n    get Enum() {\n        const enumValues = {};\n        for (const val of this._def.values) {\n            enumValues[val] = val;\n        }\n        return enumValues;\n    }\n    extract(values) {\n        return ZodEnum.create(values);\n    }\n    exclude(values) {\n        return ZodEnum.create(this.options.filter((opt) => !values.includes(opt)));\n    }\n}\nZodEnum.create = createZodEnum;\nclass ZodNativeEnum extends ZodType {\n    _parse(input) {\n        const nativeEnumValues = util.getValidEnumValues(this._def.values);\n        const ctx = this._getOrReturnCtx(input);\n        if (ctx.parsedType !== ZodParsedType.string &&\n            ctx.parsedType !== ZodParsedType.number) {\n            const expectedValues = util.objectValues(nativeEnumValues);\n            addIssueToContext(ctx, {\n                expected: util.joinValues(expectedValues),\n                received: ctx.parsedType,\n                code: ZodIssueCode.invalid_type,\n            });\n            return INVALID;\n        }\n        if (nativeEnumValues.indexOf(input.data) === -1) {\n            const expectedValues = util.objectValues(nativeEnumValues);\n            addIssueToContext(ctx, {\n                received: ctx.data,\n                code: ZodIssueCode.invalid_enum_value,\n                options: expectedValues,\n            });\n            return INVALID;\n        }\n        return OK(input.data);\n    }\n    get enum() {\n        return this._def.values;\n    }\n}\nZodNativeEnum.create = (values, params) => {\n    return new ZodNativeEnum({\n        values: values,\n        typeName: ZodFirstPartyTypeKind.ZodNativeEnum,\n        ...processCreateParams(params),\n    });\n};\nclass ZodPromise extends ZodType {\n    unwrap() {\n        return this._def.type;\n    }\n    _parse(input) {\n        const { ctx } = this._processInputParams(input);\n        if (ctx.parsedType !== ZodParsedType.promise &&\n            ctx.common.async === false) {\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_type,\n                expected: ZodParsedType.promise,\n                received: ctx.parsedType,\n            });\n            return INVALID;\n        }\n        const promisified = ctx.parsedType === ZodParsedType.promise\n            ? ctx.data\n            : Promise.resolve(ctx.data);\n        return OK(promisified.then((data) => {\n            return this._def.type.parseAsync(data, {\n                path: ctx.path,\n                errorMap: ctx.common.contextualErrorMap,\n            });\n        }));\n    }\n}\nZodPromise.create = (schema, params) => {\n    return new ZodPromise({\n        type: schema,\n        typeName: ZodFirstPartyTypeKind.ZodPromise,\n        ...processCreateParams(params),\n    });\n};\nclass ZodEffects extends ZodType {\n    innerType() {\n        return this._def.schema;\n    }\n    sourceType() {\n        return this._def.schema._def.typeName === ZodFirstPartyTypeKind.ZodEffects\n            ? this._def.schema.sourceType()\n            : this._def.schema;\n    }\n    _parse(input) {\n        const { status, ctx } = this._processInputParams(input);\n        const effect = this._def.effect || null;\n        const checkCtx = {\n            addIssue: (arg) => {\n                addIssueToContext(ctx, arg);\n                if (arg.fatal) {\n                    status.abort();\n                }\n                else {\n                    status.dirty();\n                }\n            },\n            get path() {\n                return ctx.path;\n            },\n        };\n        checkCtx.addIssue = checkCtx.addIssue.bind(checkCtx);\n        if (effect.type === \"preprocess\") {\n            const processed = effect.transform(ctx.data, checkCtx);\n            if (ctx.common.issues.length) {\n                return {\n                    status: \"dirty\",\n                    value: ctx.data,\n                };\n            }\n            if (ctx.common.async) {\n                return Promise.resolve(processed).then((processed) => {\n                    return this._def.schema._parseAsync({\n                        data: processed,\n                        path: ctx.path,\n                        parent: ctx,\n                    });\n                });\n            }\n            else {\n                return this._def.schema._parseSync({\n                    data: processed,\n                    path: ctx.path,\n                    parent: ctx,\n                });\n            }\n        }\n        if (effect.type === \"refinement\") {\n            const executeRefinement = (acc\n            // effect: RefinementEffect<any>\n            ) => {\n                const result = effect.refinement(acc, checkCtx);\n                if (ctx.common.async) {\n                    return Promise.resolve(result);\n                }\n                if (result instanceof Promise) {\n                    throw new Error(\"Async refinement encountered during synchronous parse operation. Use .parseAsync instead.\");\n                }\n                return acc;\n            };\n            if (ctx.common.async === false) {\n                const inner = this._def.schema._parseSync({\n                    data: ctx.data,\n                    path: ctx.path,\n                    parent: ctx,\n                });\n                if (inner.status === \"aborted\")\n                    return INVALID;\n                if (inner.status === \"dirty\")\n                    status.dirty();\n                // return value is ignored\n                executeRefinement(inner.value);\n                return { status: status.value, value: inner.value };\n            }\n            else {\n                return this._def.schema\n                    ._parseAsync({ data: ctx.data, path: ctx.path, parent: ctx })\n                    .then((inner) => {\n                    if (inner.status === \"aborted\")\n                        return INVALID;\n                    if (inner.status === \"dirty\")\n                        status.dirty();\n                    return executeRefinement(inner.value).then(() => {\n                        return { status: status.value, value: inner.value };\n                    });\n                });\n            }\n        }\n        if (effect.type === \"transform\") {\n            if (ctx.common.async === false) {\n                const base = this._def.schema._parseSync({\n                    data: ctx.data,\n                    path: ctx.path,\n                    parent: ctx,\n                });\n                if (!isValid(base))\n                    return base;\n                const result = effect.transform(base.value, checkCtx);\n                if (result instanceof Promise) {\n                    throw new Error(`Asynchronous transform encountered during synchronous parse operation. Use .parseAsync instead.`);\n                }\n                return { status: status.value, value: result };\n            }\n            else {\n                return this._def.schema\n                    ._parseAsync({ data: ctx.data, path: ctx.path, parent: ctx })\n                    .then((base) => {\n                    if (!isValid(base))\n                        return base;\n                    return Promise.resolve(effect.transform(base.value, checkCtx)).then((result) => ({ status: status.value, value: result }));\n                });\n            }\n        }\n        util.assertNever(effect);\n    }\n}\nZodEffects.create = (schema, effect, params) => {\n    return new ZodEffects({\n        schema,\n        typeName: ZodFirstPartyTypeKind.ZodEffects,\n        effect,\n        ...processCreateParams(params),\n    });\n};\nZodEffects.createWithPreprocess = (preprocess, schema, params) => {\n    return new ZodEffects({\n        schema,\n        effect: { type: \"preprocess\", transform: preprocess },\n        typeName: ZodFirstPartyTypeKind.ZodEffects,\n        ...processCreateParams(params),\n    });\n};\nclass ZodOptional extends ZodType {\n    _parse(input) {\n        const parsedType = this._getType(input);\n        if (parsedType === ZodParsedType.undefined) {\n            return OK(undefined);\n        }\n        return this._def.innerType._parse(input);\n    }\n    unwrap() {\n        return this._def.innerType;\n    }\n}\nZodOptional.create = (type, params) => {\n    return new ZodOptional({\n        innerType: type,\n        typeName: ZodFirstPartyTypeKind.ZodOptional,\n        ...processCreateParams(params),\n    });\n};\nclass ZodNullable extends ZodType {\n    _parse(input) {\n        const parsedType = this._getType(input);\n        if (parsedType === ZodParsedType.null) {\n            return OK(null);\n        }\n        return this._def.innerType._parse(input);\n    }\n    unwrap() {\n        return this._def.innerType;\n    }\n}\nZodNullable.create = (type, params) => {\n    return new ZodNullable({\n        innerType: type,\n        typeName: ZodFirstPartyTypeKind.ZodNullable,\n        ...processCreateParams(params),\n    });\n};\nclass ZodDefault extends ZodType {\n    _parse(input) {\n        const { ctx } = this._processInputParams(input);\n        let data = ctx.data;\n        if (ctx.parsedType === ZodParsedType.undefined) {\n            data = this._def.defaultValue();\n        }\n        return this._def.innerType._parse({\n            data,\n            path: ctx.path,\n            parent: ctx,\n        });\n    }\n    removeDefault() {\n        return this._def.innerType;\n    }\n}\nZodDefault.create = (type, params) => {\n    return new ZodDefault({\n        innerType: type,\n        typeName: ZodFirstPartyTypeKind.ZodDefault,\n        defaultValue: typeof params.default === \"function\"\n            ? params.default\n            : () => params.default,\n        ...processCreateParams(params),\n    });\n};\nclass ZodCatch extends ZodType {\n    _parse(input) {\n        const { ctx } = this._processInputParams(input);\n        // newCtx is used to not collect issues from inner types in ctx\n        const newCtx = {\n            ...ctx,\n            common: {\n                ...ctx.common,\n                issues: [],\n            },\n        };\n        const result = this._def.innerType._parse({\n            data: newCtx.data,\n            path: newCtx.path,\n            parent: {\n                ...newCtx,\n            },\n        });\n        if (isAsync(result)) {\n            return result.then((result) => {\n                return {\n                    status: \"valid\",\n                    value: result.status === \"valid\"\n                        ? result.value\n                        : this._def.catchValue({\n                            get error() {\n                                return new ZodError(newCtx.common.issues);\n                            },\n                            input: newCtx.data,\n                        }),\n                };\n            });\n        }\n        else {\n            return {\n                status: \"valid\",\n                value: result.status === \"valid\"\n                    ? result.value\n                    : this._def.catchValue({\n                        get error() {\n                            return new ZodError(newCtx.common.issues);\n                        },\n                        input: newCtx.data,\n                    }),\n            };\n        }\n    }\n    removeCatch() {\n        return this._def.innerType;\n    }\n}\nZodCatch.create = (type, params) => {\n    return new ZodCatch({\n        innerType: type,\n        typeName: ZodFirstPartyTypeKind.ZodCatch,\n        catchValue: typeof params.catch === \"function\" ? params.catch : () => params.catch,\n        ...processCreateParams(params),\n    });\n};\nclass ZodNaN extends ZodType {\n    _parse(input) {\n        const parsedType = this._getType(input);\n        if (parsedType !== ZodParsedType.nan) {\n            const ctx = this._getOrReturnCtx(input);\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_type,\n                expected: ZodParsedType.nan,\n                received: ctx.parsedType,\n            });\n            return INVALID;\n        }\n        return { status: \"valid\", value: input.data };\n    }\n}\nZodNaN.create = (params) => {\n    return new ZodNaN({\n        typeName: ZodFirstPartyTypeKind.ZodNaN,\n        ...processCreateParams(params),\n    });\n};\nconst BRAND = Symbol(\"zod_brand\");\nclass ZodBranded extends ZodType {\n    _parse(input) {\n        const { ctx } = this._processInputParams(input);\n        const data = ctx.data;\n        return this._def.type._parse({\n            data,\n            path: ctx.path,\n            parent: ctx,\n        });\n    }\n    unwrap() {\n        return this._def.type;\n    }\n}\nclass ZodPipeline extends ZodType {\n    _parse(input) {\n        const { status, ctx } = this._processInputParams(input);\n        if (ctx.common.async) {\n            const handleAsync = async () => {\n                const inResult = await this._def.in._parseAsync({\n                    data: ctx.data,\n                    path: ctx.path,\n                    parent: ctx,\n                });\n                if (inResult.status === \"aborted\")\n                    return INVALID;\n                if (inResult.status === \"dirty\") {\n                    status.dirty();\n                    return DIRTY(inResult.value);\n                }\n                else {\n                    return this._def.out._parseAsync({\n                        data: inResult.value,\n                        path: ctx.path,\n                        parent: ctx,\n                    });\n                }\n            };\n            return handleAsync();\n        }\n        else {\n            const inResult = this._def.in._parseSync({\n                data: ctx.data,\n                path: ctx.path,\n                parent: ctx,\n            });\n            if (inResult.status === \"aborted\")\n                return INVALID;\n            if (inResult.status === \"dirty\") {\n                status.dirty();\n                return {\n                    status: \"dirty\",\n                    value: inResult.value,\n                };\n            }\n            else {\n                return this._def.out._parseSync({\n                    data: inResult.value,\n                    path: ctx.path,\n                    parent: ctx,\n                });\n            }\n        }\n    }\n    static create(a, b) {\n        return new ZodPipeline({\n            in: a,\n            out: b,\n            typeName: ZodFirstPartyTypeKind.ZodPipeline,\n        });\n    }\n}\nclass ZodReadonly extends ZodType {\n    _parse(input) {\n        const result = this._def.innerType._parse(input);\n        if (isValid(result)) {\n            result.value = Object.freeze(result.value);\n        }\n        return result;\n    }\n}\nZodReadonly.create = (type, params) => {\n    return new ZodReadonly({\n        innerType: type,\n        typeName: ZodFirstPartyTypeKind.ZodReadonly,\n        ...processCreateParams(params),\n    });\n};\nconst custom = (check, params = {}, \n/**\n * @deprecated\n *\n * Pass `fatal` into the params object instead:\n *\n * ```ts\n * z.string().custom((val) => val.length > 5, { fatal: false })\n * ```\n *\n */\nfatal) => {\n    if (check)\n        return ZodAny.create().superRefine((data, ctx) => {\n            var _a, _b;\n            if (!check(data)) {\n                const p = typeof params === \"function\"\n                    ? params(data)\n                    : typeof params === \"string\"\n                        ? { message: params }\n                        : params;\n                const _fatal = (_b = (_a = p.fatal) !== null && _a !== void 0 ? _a : fatal) !== null && _b !== void 0 ? _b : true;\n                const p2 = typeof p === \"string\" ? { message: p } : p;\n                ctx.addIssue({ code: \"custom\", ...p2, fatal: _fatal });\n            }\n        });\n    return ZodAny.create();\n};\nconst late = {\n    object: ZodObject.lazycreate,\n};\nvar ZodFirstPartyTypeKind;\n(function (ZodFirstPartyTypeKind) {\n    ZodFirstPartyTypeKind[\"ZodString\"] = \"ZodString\";\n    ZodFirstPartyTypeKind[\"ZodNumber\"] = \"ZodNumber\";\n    ZodFirstPartyTypeKind[\"ZodNaN\"] = \"ZodNaN\";\n    ZodFirstPartyTypeKind[\"ZodBigInt\"] = \"ZodBigInt\";\n    ZodFirstPartyTypeKind[\"ZodBoolean\"] = \"ZodBoolean\";\n    ZodFirstPartyTypeKind[\"ZodDate\"] = \"ZodDate\";\n    ZodFirstPartyTypeKind[\"ZodSymbol\"] = \"ZodSymbol\";\n    ZodFirstPartyTypeKind[\"ZodUndefined\"] = \"ZodUndefined\";\n    ZodFirstPartyTypeKind[\"ZodNull\"] = \"ZodNull\";\n    ZodFirstPartyTypeKind[\"ZodAny\"] = \"ZodAny\";\n    ZodFirstPartyTypeKind[\"ZodUnknown\"] = \"ZodUnknown\";\n    ZodFirstPartyTypeKind[\"ZodNever\"] = \"ZodNever\";\n    ZodFirstPartyTypeKind[\"ZodVoid\"] = \"ZodVoid\";\n    ZodFirstPartyTypeKind[\"ZodArray\"] = \"ZodArray\";\n    ZodFirstPartyTypeKind[\"ZodObject\"] = \"ZodObject\";\n    ZodFirstPartyTypeKind[\"ZodUnion\"] = \"ZodUnion\";\n    ZodFirstPartyTypeKind[\"ZodDiscriminatedUnion\"] = \"ZodDiscriminatedUnion\";\n    ZodFirstPartyTypeKind[\"ZodIntersection\"] = \"ZodIntersection\";\n    ZodFirstPartyTypeKind[\"ZodTuple\"] = \"ZodTuple\";\n    ZodFirstPartyTypeKind[\"ZodRecord\"] = \"ZodRecord\";\n    ZodFirstPartyTypeKind[\"ZodMap\"] = \"ZodMap\";\n    ZodFirstPartyTypeKind[\"ZodSet\"] = \"ZodSet\";\n    ZodFirstPartyTypeKind[\"ZodFunction\"] = \"ZodFunction\";\n    ZodFirstPartyTypeKind[\"ZodLazy\"] = \"ZodLazy\";\n    ZodFirstPartyTypeKind[\"ZodLiteral\"] = \"ZodLiteral\";\n    ZodFirstPartyTypeKind[\"ZodEnum\"] = \"ZodEnum\";\n    ZodFirstPartyTypeKind[\"ZodEffects\"] = \"ZodEffects\";\n    ZodFirstPartyTypeKind[\"ZodNativeEnum\"] = \"ZodNativeEnum\";\n    ZodFirstPartyTypeKind[\"ZodOptional\"] = \"ZodOptional\";\n    ZodFirstPartyTypeKind[\"ZodNullable\"] = \"ZodNullable\";\n    ZodFirstPartyTypeKind[\"ZodDefault\"] = \"ZodDefault\";\n    ZodFirstPartyTypeKind[\"ZodCatch\"] = \"ZodCatch\";\n    ZodFirstPartyTypeKind[\"ZodPromise\"] = \"ZodPromise\";\n    ZodFirstPartyTypeKind[\"ZodBranded\"] = \"ZodBranded\";\n    ZodFirstPartyTypeKind[\"ZodPipeline\"] = \"ZodPipeline\";\n    ZodFirstPartyTypeKind[\"ZodReadonly\"] = \"ZodReadonly\";\n})(ZodFirstPartyTypeKind || (ZodFirstPartyTypeKind = {}));\nconst instanceOfType = (\n// const instanceOfType = <T extends new (...args: any[]) => any>(\ncls, params = {\n    message: `Input not instance of ${cls.name}`,\n}) => custom((data) => data instanceof cls, params);\nconst stringType = ZodString.create;\nconst numberType = ZodNumber.create;\nconst nanType = ZodNaN.create;\nconst bigIntType = ZodBigInt.create;\nconst booleanType = ZodBoolean.create;\nconst dateType = ZodDate.create;\nconst symbolType = ZodSymbol.create;\nconst undefinedType = ZodUndefined.create;\nconst nullType = ZodNull.create;\nconst anyType = ZodAny.create;\nconst unknownType = ZodUnknown.create;\nconst neverType = ZodNever.create;\nconst voidType = ZodVoid.create;\nconst arrayType = ZodArray.create;\nconst objectType = ZodObject.create;\nconst strictObjectType = ZodObject.strictCreate;\nconst unionType = ZodUnion.create;\nconst discriminatedUnionType = ZodDiscriminatedUnion.create;\nconst intersectionType = ZodIntersection.create;\nconst tupleType = ZodTuple.create;\nconst recordType = ZodRecord.create;\nconst mapType = ZodMap.create;\nconst setType = ZodSet.create;\nconst functionType = ZodFunction.create;\nconst lazyType = ZodLazy.create;\nconst literalType = ZodLiteral.create;\nconst enumType = ZodEnum.create;\nconst nativeEnumType = ZodNativeEnum.create;\nconst promiseType = ZodPromise.create;\nconst effectsType = ZodEffects.create;\nconst optionalType = ZodOptional.create;\nconst nullableType = ZodNullable.create;\nconst preprocessType = ZodEffects.createWithPreprocess;\nconst pipelineType = ZodPipeline.create;\nconst ostring = () => stringType().optional();\nconst onumber = () => numberType().optional();\nconst oboolean = () => booleanType().optional();\nconst coerce = {\n    string: ((arg) => ZodString.create({ ...arg, coerce: true })),\n    number: ((arg) => ZodNumber.create({ ...arg, coerce: true })),\n    boolean: ((arg) => ZodBoolean.create({\n        ...arg,\n        coerce: true,\n    })),\n    bigint: ((arg) => ZodBigInt.create({ ...arg, coerce: true })),\n    date: ((arg) => ZodDate.create({ ...arg, coerce: true })),\n};\nconst NEVER = INVALID;\n\nvar z = /*#__PURE__*/Object.freeze({\n    __proto__: null,\n    defaultErrorMap: errorMap,\n    setErrorMap: setErrorMap,\n    getErrorMap: getErrorMap,\n    makeIssue: makeIssue,\n    EMPTY_PATH: EMPTY_PATH,\n    addIssueToContext: addIssueToContext,\n    ParseStatus: ParseStatus,\n    INVALID: INVALID,\n    DIRTY: DIRTY,\n    OK: OK,\n    isAborted: isAborted,\n    isDirty: isDirty,\n    isValid: isValid,\n    isAsync: isAsync,\n    get util () { return util; },\n    get objectUtil () { return objectUtil; },\n    ZodParsedType: ZodParsedType,\n    getParsedType: getParsedType,\n    ZodType: ZodType,\n    ZodString: ZodString,\n    ZodNumber: ZodNumber,\n    ZodBigInt: ZodBigInt,\n    ZodBoolean: ZodBoolean,\n    ZodDate: ZodDate,\n    ZodSymbol: ZodSymbol,\n    ZodUndefined: ZodUndefined,\n    ZodNull: ZodNull,\n    ZodAny: ZodAny,\n    ZodUnknown: ZodUnknown,\n    ZodNever: ZodNever,\n    ZodVoid: ZodVoid,\n    ZodArray: ZodArray,\n    ZodObject: ZodObject,\n    ZodUnion: ZodUnion,\n    ZodDiscriminatedUnion: ZodDiscriminatedUnion,\n    ZodIntersection: ZodIntersection,\n    ZodTuple: ZodTuple,\n    ZodRecord: ZodRecord,\n    ZodMap: ZodMap,\n    ZodSet: ZodSet,\n    ZodFunction: ZodFunction,\n    ZodLazy: ZodLazy,\n    ZodLiteral: ZodLiteral,\n    ZodEnum: ZodEnum,\n    ZodNativeEnum: ZodNativeEnum,\n    ZodPromise: ZodPromise,\n    ZodEffects: ZodEffects,\n    ZodTransformer: ZodEffects,\n    ZodOptional: ZodOptional,\n    ZodNullable: ZodNullable,\n    ZodDefault: ZodDefault,\n    ZodCatch: ZodCatch,\n    ZodNaN: ZodNaN,\n    BRAND: BRAND,\n    ZodBranded: ZodBranded,\n    ZodPipeline: ZodPipeline,\n    ZodReadonly: ZodReadonly,\n    custom: custom,\n    Schema: ZodType,\n    ZodSchema: ZodType,\n    late: late,\n    get ZodFirstPartyTypeKind () { return ZodFirstPartyTypeKind; },\n    coerce: coerce,\n    any: anyType,\n    array: arrayType,\n    bigint: bigIntType,\n    boolean: booleanType,\n    date: dateType,\n    discriminatedUnion: discriminatedUnionType,\n    effect: effectsType,\n    'enum': enumType,\n    'function': functionType,\n    'instanceof': instanceOfType,\n    intersection: intersectionType,\n    lazy: lazyType,\n    literal: literalType,\n    map: mapType,\n    nan: nanType,\n    nativeEnum: nativeEnumType,\n    never: neverType,\n    'null': nullType,\n    nullable: nullableType,\n    number: numberType,\n    object: objectType,\n    oboolean: oboolean,\n    onumber: onumber,\n    optional: optionalType,\n    ostring: ostring,\n    pipeline: pipelineType,\n    preprocess: preprocessType,\n    promise: promiseType,\n    record: recordType,\n    set: setType,\n    strictObject: strictObjectType,\n    string: stringType,\n    symbol: symbolType,\n    transformer: effectsType,\n    tuple: tupleType,\n    'undefined': undefinedType,\n    union: unionType,\n    unknown: unknownType,\n    'void': voidType,\n    NEVER: NEVER,\n    ZodIssueCode: ZodIssueCode,\n    quotelessJson: quotelessJson,\n    ZodError: ZodError\n});\n\nexport { BRAND, DIRTY, EMPTY_PATH, INVALID, NEVER, OK, ParseStatus, ZodType as Schema, ZodAny, ZodArray, ZodBigInt, ZodBoolean, ZodBranded, ZodCatch, ZodDate, ZodDefault, ZodDiscriminatedUnion, ZodEffects, ZodEnum, ZodError, ZodFirstPartyTypeKind, ZodFunction, ZodIntersection, ZodIssueCode, ZodLazy, ZodLiteral, ZodMap, ZodNaN, ZodNativeEnum, ZodNever, ZodNull, ZodNullable, ZodNumber, ZodObject, ZodOptional, ZodParsedType, ZodPipeline, ZodPromise, ZodReadonly, ZodRecord, ZodType as ZodSchema, ZodSet, ZodString, ZodSymbol, ZodEffects as ZodTransformer, ZodTuple, ZodType, ZodUndefined, ZodUnion, ZodUnknown, ZodVoid, addIssueToContext, anyType as any, arrayType as array, bigIntType as bigint, booleanType as boolean, coerce, custom, dateType as date, z as default, errorMap as defaultErrorMap, discriminatedUnionType as discriminatedUnion, effectsType as effect, enumType as enum, functionType as function, getErrorMap, getParsedType, instanceOfType as instanceof, intersectionType as intersection, isAborted, isAsync, isDirty, isValid, late, lazyType as lazy, literalType as literal, makeIssue, mapType as map, nanType as nan, nativeEnumType as nativeEnum, neverType as never, nullType as null, nullableType as nullable, numberType as number, objectType as object, objectUtil, oboolean, onumber, optionalType as optional, ostring, pipelineType as pipeline, preprocessType as preprocess, promiseType as promise, quotelessJson, recordType as record, setType as set, setErrorMap, strictObjectType as strictObject, stringType as string, symbolType as symbol, effectsType as transformer, tupleType as tuple, undefinedType as undefined, unionType as union, unknownType as unknown, util, voidType as void, z };\n","import { z } from \"zod\";\n\nimport { Deck, DeckUpdate } from \"engine/types/decks\";\nimport { Player, DevKnobs } from \"engine/types/game-state\";\nimport { Step } from \"engine/types/steps\";\nimport { Update } from \"engine/types/updates\";\nimport { Faction } from \"engine/types/factions\";\nimport { EnterRoomParams } from \"game-server/Room\";\nimport { GameServerConfig } from \"game-server/GameServer\";\nimport { MasteryTree, MasteryTreeStep } from \"game-server/masteries\";\nimport { GlobalUpdatesScope, GlobalUpdate } from \"game-server/global-updates\";\nimport { CheckAnswerBackendResp } from \"game-server/backend-interface/BackendInterface\";\nimport { HuntNotification } from \"game-server/notifications\";\nimport { CursorResp, CursorEvent } from \"engine/types/presence\";\n\nexport enum WSErrorCode {\n  /** Something went wrong with the connection to the interactive server. */\n  CONNECTION_ERROR = \"connection_error\",\n  /** An unexpected error occurred with the interactive server. */\n  SERVER_ERROR = \"server_error\",\n  /** Something went wrong with a backend call. */\n  BACKEND_ERROR = \"backend_error\",\n  /** Authentication failed. */\n  AUTH_ERROR = \"auth_error\",\n  /** Something went wrong on the client. */\n  CLIENT_ERROR = \"client_error\",\n  /** The client does not have the permissions for a request. */\n  PERMISSION_DENIED = \"permission_denied\",\n  /** The team is inactive. */\n  TEAM_INACTIVE = \"team_inactive\",\n  /** The team is temporarily blocked for maintenance */\n  TEAM_TEMP_BLOCKED = \"down_for_maintenance\",\n  /** A request requires the client to be in a room, but it isn't. */\n  NO_ROOM = \"no_room\",\n  /** A deck is needed but not provided. */\n  NEED_DECK = \"need_deck\",\n  /** The provided deck is invalid. */\n  INVALID_DECK = \"invalid_deck\",\n  /** There is no checkpoint to restore from. */\n  NO_CHECKPOINT = \"no_checkpoint\",\n  /** The provided deck slot is out of bounds. */\n  DECK_SLOT_OUT_OF_BOUNDS = \"deck_slot_out_of_bounds\",\n  /** The request was canceled by the client. */\n  CANCELED_BY_CLIENT = \"canceled_by_client\",\n  /** The step is invalid. */\n  INVALID_STEP = \"invalid_step\",\n  /** The checkpoint slot is invalid. */\n  INVALID_CHECKPOINT_SLOT = \"invalid_checkpoint_slot\",\n  /** The connection is not ready for steps. */\n  NOT_READY = \"not_ready\",\n  /** The resource is locked by an active battle. */\n  LOCKED_BY_BATTLE = \"locked_by_battle\",\n  /** The requested team is invalid. */\n  INVALID_TEAM = \"invalid_team\",\n  /** A puzzle selection needs to be supplied. */\n  NEED_PUZZLE = \"need_puzzle\",\n  /** The requested puzName is invalid, or not unlocked by the team. */\n  INVALID_PUZZLE = \"invalid_puzzle\",\n  /** The request is blocked by the requesting team. */\n  BLOCKED_BY_REQUESTER = \"blocked_by_requester\",\n  /** The request is blocked by the target team. */\n  BLOCKED_BY_TARGET = \"blocked_by_target\",\n  /** The team does not have the mastery needed to perform the request. */\n  NO_MASTERY = \"no_mastery\",\n  /** The target does not have the mastery needed for the request. */\n  TARGET_NO_MASTERY = \"no_mastery\",\n  /** The request was already made before. */\n  DUPLICATE_REQUEST = \"duplicate_request\",\n  /** The request refers to a PvP request that doesn't exist. */\n  NO_PVP_REQUEST = \"no_pvp_request\",\n  /** The request cannot be made while the room is active. */\n  ROOM_BUSY = \"room_busy\",\n  /** The WS request is invalid. */\n  BAD_REQUEST = \"bad_request\",\n  /** The client tried to spectate with an invalid key. */\n  SPECTATE_INVALID = \"spectate_invalid\",\n  /** The client tried to take actions while spectating. */\n  SPECTATE_ACTION = \"spectate_action\",\n}\n\nexport type WSError = {\n  errCode: WSErrorCode;\n};\n\nexport enum WSReqType {\n  AUTH = \"auth\",\n  SET_FACTION = \"set_faction\",\n\n  ENTER_ROOM = \"enter_room\",\n  STEP = \"step\",\n  DECKBUILDING_STEP = \"deckbuilding_step\",\n  MASTERY_TREE_STEP = \"mastery_tree_step\",\n\n  NEXT_BATTLE = \"next_battle\",\n\n  SELECT_PUZZLE = \"select_puzzle\",\n  SELECT_DECK_FOR_BATTLE = \"select_deck_for_battle\",\n  START_AI_BATTLE = \"start_ai_battle\",\n  RESTORE_CHECKPOINT = \"restore_checkpoint\",\n  RESIGN = \"resign\",\n\n  PVP_CLAIM_TIME_VICTORY = \"pvp_claim_time_victory\",\n  PVP_UNLOCK_DECK = \"pvp_unlock_deck\",\n  PVP_MAKE_REQUEST = \"pvp_make_request\",\n  PVP_CANCEL_REQUEST = \"pvp_cancel_request\",\n  PVP_ACCEPT_REQUEST = \"pvp_accept_request\",\n  PVP_SET_IS_BLOCKED = \"pvp_set_is_blocked\",\n  PVP_ENTER_RING = \"pvp_enter_ring\",\n  PVP_LEAVE_RING = \"pvp_leave_ring\",\n\n  VIEW_PUZZLE = \"view_puzzle\",\n  SUBMIT_ANSWER = \"submit_answer\",\n  MYOSB_REQUEST = \"myosb_request\",\n\n  SET_CURSOR_GROUP = \"set_cursor_group\",\n  CURSOR_EVENT = \"cursor_event\",\n\n  SUBSCRIBE_TO_UPDATES = \"subscribe_to_updates\",\n  PING = \"ping\",\n\n  // Admin requests\n  ADMIN_MODIFY = \"admin_modify\",\n}\n\nconst WSReqAuthZod = z.object({\n  type: z.literal(WSReqType.AUTH),\n  jwt: z.string(),\n});\nexport type WSReqAuth = z.infer<typeof WSReqAuthZod>;\n\ntype WSReqSetFaction = {\n  type: WSReqType.SET_FACTION;\n  faction: Faction | null;\n};\n\ntype WSReqEnterRoom = {\n  type: WSReqType.ENTER_ROOM;\n  /** Request ID, used to correlate acks to requests. */\n  reqId: number;\n  /** If null, leave any room the connection is currently joined to. */\n  params: EnterRoomParams | null;\n};\n\ntype WSReqStep = {\n  type: WSReqType.STEP;\n  step: Step;\n};\n\ntype WSReqDeckbuildingStep = {\n  type: WSReqType.DECKBUILDING_STEP;\n  slot: number;\n  deckUpd: DeckUpdate;\n};\n\ntype WSReqMasteryTreeStep = {\n  type: WSReqType.MASTERY_TREE_STEP;\n  step: MasteryTreeStep;\n};\n\nconst WSReqNextBattleZod = z.object({\n  type: z.literal(WSReqType.NEXT_BATTLE),\n});\ntype WSReqNextBattle = z.infer<typeof WSReqNextBattleZod>;\n\nconst WSReqSelectPuzzleZod = z.object({\n  type: z.literal(WSReqType.SELECT_PUZZLE),\n  hostPuzName: z.string(),\n  selectedPuzName: z.string(),\n});\ntype WSReqSelectPuzzle = z.infer<typeof WSReqSelectPuzzleZod>;\n\nconst WSReqSelectDeckForBattleZod = z.object({\n  type: z.literal(WSReqType.SELECT_DECK_FOR_BATTLE),\n  puzName: z.string(),\n  slot: z.number(),\n});\ntype WSReqSelectDeckForBattle = z.infer<typeof WSReqSelectDeckForBattleZod>;\n\ntype WSReqStartAIBattle = {\n  type: WSReqType.START_AI_BATTLE;\n  puzName: string;\n  /** If set, select this deck for battle before starting. */\n  slot?: number;\n  /**\n   * If set, and a battle is running, stop it.\n   * Otherwise, acts as a no-op if a battle is running.\n   */\n  restart?: boolean;\n  /** If set, reuses the same deck, if any. */\n  reuseDeck?: boolean;\n  devKnobs?: DevKnobs;\n};\n\nconst WSReqRestoreCheckpointZod = z.object({\n  type: z.literal(WSReqType.RESTORE_CHECKPOINT),\n  puzName: z.string(),\n  slot: z.number(),\n});\ntype WSReqRestoreCheckpoint = z.infer<typeof WSReqRestoreCheckpointZod>;\n\ntype WSReqResign = {\n  type: WSReqType.RESIGN;\n  player: Player;\n  puzName: string;\n};\n\nconst WsReqPvPClaimTimeVictoryZod = z.object({\n  type: z.literal(WSReqType.PVP_CLAIM_TIME_VICTORY),\n});\ntype WSReqPvPClaimTimeVictory = z.infer<typeof WsReqPvPClaimTimeVictoryZod>;\n\nconst WSReqPvPUnlockDeckZod = z.object({\n  type: z.literal(WSReqType.PVP_UNLOCK_DECK),\n});\ntype WSReqPvPUnlockDeck = z.infer<typeof WSReqPvPUnlockDeckZod>;\n\nconst WSReqPvPMakeRequestZod = z.object({\n  type: z.literal(WSReqType.PVP_MAKE_REQUEST),\n  targetTeamId: z.string(),\n  /**\n   * Dev flag to test PvP locally. Auto-accepts the PvP request\n   * from the other side.\n   */\n  autoAccept: z.optional(z.boolean()),\n});\ntype WSReqPvPMakeRequest = z.infer<typeof WSReqPvPMakeRequestZod>;\n\nconst WSReqPvPCancelRequestZod = z.object({\n  type: z.literal(WSReqType.PVP_CANCEL_REQUEST),\n  targetTeamId: z.string(),\n});\ntype WSReqPvPCancelRequest = z.infer<typeof WSReqPvPCancelRequestZod>;\n\ntype WSReqPvPAcceptRequest = {\n  type: WSReqType.PVP_ACCEPT_REQUEST;\n  targetTeamId: string;\n  devKnobs?: DevKnobs;\n};\n\nconst WSReqPvPSetIsBlockedZod = z.object({\n  type: z.literal(WSReqType.PVP_SET_IS_BLOCKED),\n  targetTeamId: z.string(),\n  isBlocked: z.boolean(),\n});\ntype WSReqPvPSetIsBlocked = z.infer<typeof WSReqPvPSetIsBlockedZod>;\n\nconst WSReqPvPEnterRingZod = z.object({\n  type: z.literal(WSReqType.PVP_ENTER_RING),\n});\ntype WSReqPvPEnterRing = z.infer<typeof WSReqPvPEnterRingZod>;\n\nconst WSReqPvPLeaveRingZod = z.object({\n  type: z.literal(WSReqType.PVP_LEAVE_RING),\n});\ntype WSReqPvPLeaveRing = z.infer<typeof WSReqPvPLeaveRingZod>;\n\nconst WSReqViewPuzzleZod = z.object({\n  type: z.literal(WSReqType.VIEW_PUZZLE),\n  puzName: z.string(),\n});\ntype WSReqViewPuzzle = z.infer<typeof WSReqViewPuzzleZod>;\n\nconst WSReqSubmitAnswerZod = z.object({\n  type: z.literal(WSReqType.SUBMIT_ANSWER),\n  teamId: z.string(),\n  puzName: z.string(),\n  answer: z.string(),\n});\ntype WSReqSubmitAnswer = z.infer<typeof WSReqSubmitAnswerZod>;\n\nconst WSReqMyosbRequestZod = z.object({\n  type: z.literal(WSReqType.MYOSB_REQUEST),\n  teamId: z.string(),\n  components: z.array(z.array(z.number())),\n});\ntype WSReqMyosbRequest = z.infer<typeof WSReqMyosbRequestZod>;\n\nexport type AdminModifyTeamParams = {\n  isInactive?: boolean;\n  isHidden?: boolean;\n  isTempBlocked?: boolean;\n  displayName?: string;\n  overrideSolved?: { [puzName: string]: boolean };\n  overrideUnlocked?: { [puzName: string]: boolean };\n  overrideCardUnlocked?: { [cardName: string]: boolean };\n  overrideMasteriesList?: string[];\n  overrideDecks?: { [slot: number]: Deck };\n  overrideMasteryTree?: MasteryTree;\n};\n\nexport type WSReqAdminModify = {\n  type: WSReqType.ADMIN_MODIFY;\n  teams?: {\n    [teamId: string]: AdminModifyTeamParams;\n  };\n  config?: GameServerConfig;\n};\n\nconst WSReqSetCursorGroupZod = z.object({\n  type: z.literal(WSReqType.SET_CURSOR_GROUP),\n  reqId: z.number(),\n  cursorGroupName: z.nullable(z.string()),\n});\ntype WSReqSetCursorGroup = z.infer<typeof WSReqSetCursorGroupZod>;\n\ntype WSReqCursorEvent = {\n  type: WSReqType.CURSOR_EVENT;\n  event: CursorEvent;\n};\n\ntype WSReqSubscribeToUpdates = {\n  type: WSReqType.SUBSCRIBE_TO_UPDATES;\n  scope: GlobalUpdatesScope;\n};\n\nconst WSReqPingZod = z.object({\n  type: z.literal(WSReqType.PING),\n});\ntype WSReqPing = z.infer<typeof WSReqPingZod>;\n\nexport type WSReq = Readonly<\n  | WSReqAuth\n  | WSReqSetFaction\n  | WSReqEnterRoom\n  | WSReqStep\n  | WSReqDeckbuildingStep\n  | WSReqMasteryTreeStep\n  | WSReqNextBattle\n  | WSReqSelectPuzzle\n  | WSReqSelectDeckForBattle\n  | WSReqStartAIBattle\n  | WSReqRestoreCheckpoint\n  | WSReqResign\n  | WSReqPvPClaimTimeVictory\n  | WSReqPvPUnlockDeck\n  | WSReqPvPMakeRequest\n  | WSReqPvPCancelRequest\n  | WSReqPvPAcceptRequest\n  | WSReqPvPSetIsBlocked\n  | WSReqPvPEnterRing\n  | WSReqPvPLeaveRing\n  | WSReqViewPuzzle\n  | WSReqSubmitAnswer\n  | WSReqMyosbRequest\n  | WSReqAdminModify\n  | WSReqSetCursorGroup\n  | WSReqCursorEvent\n  | WSReqSubscribeToUpdates\n  | WSReqPing\n>;\n\nexport enum WSRespType {\n  ERROR = \"error\",\n  AUTH_SUCCESS = \"auth_success\",\n\n  ENTER_ROOM_ERROR = \"enter_room_error\",\n  ENTERED_ROOM = \"entered_room\",\n\n  UPDATES = \"updates\",\n  GLOBAL_UPDATE = \"global_update\",\n\n  NEXT_BATTLE = \"next_battle\",\n  NOTIFICATION = \"notification\",\n\n  SET_CURSOR_GROUP_ACK = \"set_cursor_group_ack\",\n  CURSOR_EVENT = \"cursor_event\",\n\n  SUBMIT_ANSWER_ACK = \"submit_answer_ack\",\n  MYOSB_RESPONSE = \"myosb_response\",\n  PONG = \"pong\",\n}\n\nexport type WSRespError = {\n  type: WSRespType.ERROR;\n  err: WSError;\n};\n\ntype WSRespAuthSuccess = {\n  type: WSRespType.AUTH_SUCCESS;\n};\n\ntype WsRespEnterRoomError = {\n  type: WSRespType.ENTER_ROOM_ERROR;\n  reqId: number;\n  err: WSError;\n};\n\n/**\n * Signal that we have entered the room described by params.\n */\ntype WsRespEnteredRoom = {\n  type: WSRespType.ENTERED_ROOM;\n  reqId: number;\n  /**\n   * Params that uniquely identify the room that the client entered.\n   * A client should be able to submit these params to re-enter\n   * the same room later on.\n   * This may be different, or contain less information thatn the\n   * params passed in during ENTER_ROOM.\n   */\n  params: EnterRoomParams;\n};\n\ntype WSRespUpdates = {\n  type: WSRespType.UPDATES;\n  updates: Update[];\n};\n\ntype WSRespGlobalUpdate = {\n  type: WSRespType.GLOBAL_UPDATE;\n  upd: GlobalUpdate;\n};\n\ntype WSRespNextBattle = {\n  type: WSRespType.NEXT_BATTLE;\n  roomId: string;\n};\n\ntype WSRespNotification = {\n  type: WSRespType.NOTIFICATION;\n  notif: HuntNotification;\n};\n\nexport type WSRespSetCursorGroupAck = {\n  type: WSRespType.SET_CURSOR_GROUP_ACK;\n  reqId: number;\n};\n\nexport type WSRespCursorEvent = {\n  type: WSRespType.CURSOR_EVENT;\n  events: CursorResp[];\n};\n\ntype WSRespPong = {\n  type: WSRespType.PONG;\n};\n\nexport type WSRespSubmitAnswerAck = {\n  type: WSRespType.SUBMIT_ANSWER_ACK;\n  resp: CheckAnswerBackendResp;\n};\n\nexport type WSRespMyosbResponse = {\n  type: WSRespType.MYOSB_RESPONSE;\n  resp: string;\n};\n\nexport type WSResp = Readonly<\n  | WSRespError\n  | WSRespAuthSuccess\n  | WsRespEnterRoomError\n  | WsRespEnteredRoom\n  | WSRespUpdates\n  | WSRespGlobalUpdate\n  | WSRespNextBattle\n  | WSRespNotification\n  | WSRespSetCursorGroupAck\n  | WSRespCursorEvent\n  | WSRespSubmitAnswerAck\n  | WSRespMyosbResponse\n  | WSRespPong\n>;\n","export enum HuntNotificationType {\n  INTERNAL = \"internal\",\n  HINT_ANSWERED = \"hint_answered\",\n  UNLOCK = \"unlock\",\n  SOLVE = \"solve\",\n  ERRATUM = \"erratum\",\n  VICTORY = \"victory\",\n  PVP_REQUEST_RECEIVED = \"pvp_request_received\",\n  PVP_REQUEST_ACCEPTED = \"pvp_request_accepted\",\n}\n\nexport type HuntNotification =\n  | {\n      type: HuntNotificationType.INTERNAL;\n      message: string;\n    }\n  | {\n      type:\n        | HuntNotificationType.ERRATUM\n        | HuntNotificationType.VICTORY\n        | HuntNotificationType.PVP_REQUEST_RECEIVED\n        | HuntNotificationType.PVP_REQUEST_ACCEPTED;\n    }\n  | {\n      type:\n        | HuntNotificationType.HINT_ANSWERED\n        | HuntNotificationType.UNLOCK\n        | HuntNotificationType.SOLVE;\n      puzName: string;\n    };\n","/** Maximum length for the deck display name. */\nexport const DECK_DISPLAY_NAME_MAX_LENGTH = 63;\n/** Number of deck slots per team. */\nexport const NUM_DECK_SLOTS = 12;\n\nexport type Deck = {\n  displayName: string;\n  /** Number of each card in the deck. */\n  cards: {\n    [cardName: string]: number;\n  };\n  /**\n   * Card name of the card that would be put at the top of the deck,\n   * if present in the deck. Only used when the relevant mastery\n   * is enabled.\n   */\n  priorityCard?: string;\n};\n\nexport const createNewDeck = (slot: number): Deck => {\n  const timeNow = new Date().getTime();\n\n  return {\n    displayName: `Deck ${slot + 1}`,\n    cards: {},\n  };\n};\n\nexport const cloneDeck = (deck: Deck): Deck => {\n  return { ...deck, cards: { ...deck.cards } };\n};\n\nexport const getDeckSize = (deck: Deck): number => {\n  let sz = 0;\n  for (const [cardName, val] of Object.entries(deck.cards)) {\n    sz += val;\n  }\n  return sz;\n};\n\nexport const getDeckCardCount = (deck: Deck, cardName: string): number => {\n  return deck.cards[cardName] ?? 0;\n};\n\nexport const deckToCardList = (deck: Deck): string[] => {\n  const cardList = [];\n  for (const [cardName, cardCount] of Object.entries(deck.cards)) {\n    for (let i = 0; i < cardCount; i++) {\n      cardList.push(cardName);\n    }\n  }\n  return cardList;\n};\n\nexport type DeckUpdate = {\n  displayName?: string;\n  /**\n   * If clear is set to true, resets the deck to a clean state without touching\n   * displayName. This is done before applying any of the other updates.\n   */\n  clear?: true;\n  cards?: {\n    [cardName: string]: number;\n  };\n  priorityCard?: string;\n  deletePriorityCard?: true;\n};\n\nexport const applyDeckUpdate = (deck: Deck, upd: DeckUpdate): void => {\n  const { displayName, cards, priorityCard, deletePriorityCard, clear } = upd;\n  if (clear ?? false) {\n    deck.cards = {};\n    delete deck.priorityCard;\n  }\n  if (displayName !== undefined)\n    deck.displayName = displayName.slice(0, DECK_DISPLAY_NAME_MAX_LENGTH + 1);\n  if (cards !== undefined) {\n    for (const [cardName, val] of Object.entries(cards)) {\n      if (val === 0) {\n        delete deck.cards[cardName];\n        continue;\n      }\n      deck.cards[cardName] = val;\n    }\n  }\n  if (priorityCard !== undefined) deck.priorityCard = priorityCard;\n  if (deletePriorityCard ?? false) delete deck.priorityCard;\n  if (\n    deck.priorityCard !== undefined &&\n    deck.cards[deck.priorityCard] === undefined\n  )\n    delete deck.priorityCard;\n};\n\nexport type DeckSelection = {\n  slot: number | null;\n  deck: Deck;\n};\n","import { z } from \"zod\";\n\nimport { MasteryData, MasteriesDB } from \"engine/puzzles/mastery-data\";\n\n// Note: All answers here should be capitalized with no spaces.\n\nexport enum AnswerOrientation {\n  VERTICAL = \"vertical\",\n  HORIZONTAL = \"horizontal\",\n}\nconst AnswerOrientationZod = z.nativeEnum(AnswerOrientation);\n\nconst AnswerPlacementZod = z.object({\n  answer: z.string(),\n  x: z.number(),\n  y: z.number(),\n  orientation: AnswerOrientationZod,\n});\nexport type AnswerPlacement = z.infer<typeof AnswerPlacementZod>;\n\nexport type MasteryTree = {\n  /**\n   * Answers placed in the grid, keyed by their answer.\n   */\n  placements: { [answer: string]: AnswerPlacement };\n  /** Answers that are connected to the start. */\n  connectedAnswers: string[];\n  /**\n   * Dev backdoor to override the resulting masteries list.\n   * TODO: Ensure this does not work in prod.\n   */\n  masteriesListOverride?: string[];\n};\n\nexport const cloneMasteryTree = (masteryTree: MasteryTree): MasteryTree => {\n  return {\n    ...masteryTree,\n    placements: { ...masteryTree.placements },\n    connectedAnswers: [...masteryTree.connectedAnswers],\n  };\n};\n\nexport type MasteryTreeUpdate = {\n  /**\n   * If true, resets the mastery tree to a clean state. This is done\n   * before applying any of the other updates.\n   */\n  reset?: boolean;\n  /** Placements to pop (give the string of the answer(s)). */\n  popAnswers?: string[];\n  /** Placements to append. This is done after the pops. */\n  newPlacements?: AnswerPlacement[];\n  /** Override the masteries list override directly. */\n  masteriesListOverride?: string[];\n};\n\nexport enum MasteryTreeStepType {\n  PLACE = \"place\",\n  RESET = \"reset\",\n  DELETE = \"delete\",\n}\n\nconst PlaceMasteryTreeStepZod = z\n  .object({\n    type: z.literal(MasteryTreeStepType.PLACE),\n    placement: AnswerPlacementZod,\n  })\n  .readonly();\nexport type PlaceMasteryTreeStep = z.infer<typeof PlaceMasteryTreeStepZod>;\n\nconst ResetMasteryTreeStepZod = z\n  .object({\n    type: z.literal(MasteryTreeStepType.RESET),\n  })\n  .readonly();\nexport type ResetMasteryTreeStep = z.infer<typeof ResetMasteryTreeStepZod>;\n\nconst DeleteMasteryTreeStepZod = z\n  .object({\n    type: z.literal(MasteryTreeStepType.DELETE),\n    answer: z.string(),\n  })\n  .readonly();\nexport type DeleteMasteryTreeStep = z.infer<typeof DeleteMasteryTreeStepZod>;\n\nexport const MasteryTreeStepZod = z.union([\n  PlaceMasteryTreeStepZod,\n  ResetMasteryTreeStepZod,\n  DeleteMasteryTreeStepZod,\n]);\nexport type MasteryTreeStep = z.infer<typeof MasteryTreeStepZod>;\n\nexport const normalizeAnswer = (answer: string) => answer.replaceAll(\" \", \"\");\n\nexport const applyMasteryTreeUpdate = (\n  masteryTree: MasteryTree,\n  upd: MasteryTreeUpdate\n): void => {\n  const { reset, popAnswers, newPlacements, masteriesListOverride } = upd;\n  if (reset ?? false) {\n    delete masteryTree.masteriesListOverride;\n    masteryTree.placements = {};\n  }\n  if (masteriesListOverride === undefined)\n    delete masteryTree.masteriesListOverride;\n  else masteryTree.masteriesListOverride = masteriesListOverride;\n\n  for (const answer of popAnswers ?? []) {\n    if (masteryTree.placements[answer] !== undefined) {\n      delete masteryTree.placements[answer];\n    }\n  }\n  Object.assign(\n    masteryTree.placements,\n    Object.fromEntries(\n      (newPlacements ?? []).map((placement) => [placement.answer, placement])\n    )\n  );\n\n  masteryTree.connectedAnswers = getConnectedPlacements(masteryTree).map(\n    (placement) => placement.answer\n  );\n};\n\nexport const MASTERY_GRID_WIDTH = 24;\nexport const MASTERY_GRID_HEIGHT = 25;\nexport const START_X = 16;\nexport const START_Y = 6;\n\ntype MasteryGridRow = (string | null)[];\nexport type MasteryGrid = MasteryGridRow[];\n\nconst makeEmptyMasteryGrid = (): MasteryGrid => {\n  const grid: MasteryGrid = [];\n  for (let i = 0; i < MASTERY_GRID_HEIGHT; i++) {\n    const row: MasteryGridRow = [];\n    for (let j = 0; j < MASTERY_GRID_WIDTH; j++) {\n      row.push(null);\n    }\n    grid.push(row);\n  }\n  return grid;\n};\n\nconst isPointInGrid = (x: number, y: number): boolean => {\n  return x >= 0 && x < MASTERY_GRID_WIDTH && y >= 0 && y < MASTERY_GRID_HEIGHT;\n};\n\nconst charAtPointOrNull = (\n  grid: MasteryGrid,\n  x: number,\n  y: number\n): string | null => {\n  if (!isPointInGrid(x, y)) return null;\n  return grid[y][x];\n};\n\nexport const getPlacementCharIndexAt = (\n  placement: AnswerPlacement,\n  x: number,\n  y: number\n): number | null => {\n  const { orientation, answer } = placement;\n  const index = (() => {\n    switch (orientation) {\n      case AnswerOrientation.HORIZONTAL: {\n        if (y !== placement.y) return null;\n        return x - placement.x;\n      }\n      case AnswerOrientation.VERTICAL: {\n        if (x !== placement.x) return null;\n        return y - placement.y;\n      }\n    }\n  })();\n  if (index === null) return null;\n  if (index < 0 || index >= answer.length) return null;\n  return index;\n};\n\nexport const getPlacementCharAt = (\n  placement: AnswerPlacement,\n  x: number,\n  y: number\n): string | null => {\n  const { answer, orientation } = placement;\n  const index = getPlacementCharIndexAt(placement, x, y);\n  if (index === null) return null;\n  return answer[index];\n};\n\n/** Check if the addition of a new placement char to grid is valid. */\nexport const isPlacementCharValid = (\n  grid: MasteryGrid,\n  placement: AnswerPlacement,\n  charIndex: number\n): boolean => {\n  const { answer, orientation } = placement;\n\n  const x =\n    placement.x +\n    (orientation === AnswerOrientation.HORIZONTAL ? charIndex : 0);\n  const y =\n    placement.y + (orientation === AnswerOrientation.VERTICAL ? charIndex : 0);\n  const char = answer[charIndex];\n\n  if (!isPointInGrid(x, y)) return false;\n\n  if (grid[y][x] !== null) {\n    // If we cross another answer, it must be on the same character.\n    if (grid[y][x] !== char) return false;\n  } else {\n    // If a character doesn't cross another answer, then there cannot be\n    // another answer directly beside it.\n    for (const offset of [-1, 1]) {\n      const ox = x + (orientation === AnswerOrientation.VERTICAL ? offset : 0);\n      const oy =\n        y + (orientation === AnswerOrientation.HORIZONTAL ? offset : 0);\n      if (charAtPointOrNull(grid, ox, oy) !== null) return false;\n    }\n  }\n\n  // Answer cannot \"extend\" another answer.\n  if (charIndex === 0) {\n    const ox = x + (orientation === AnswerOrientation.HORIZONTAL ? -1 : 0);\n    const oy = y + (orientation === AnswerOrientation.VERTICAL ? -1 : 0);\n    if (charAtPointOrNull(grid, ox, oy) !== null) return false;\n  }\n  if (charIndex === answer.length - 1) {\n    const ox = x + (orientation === AnswerOrientation.HORIZONTAL ? 1 : 0);\n    const oy = y + (orientation === AnswerOrientation.VERTICAL ? 1 : 0);\n    if (charAtPointOrNull(grid, ox, oy) !== null) return false;\n  }\n\n  return true;\n};\n\nconst tryPlaceAnswerOnMasteryGrid = (\n  grid: MasteryGrid,\n  placement: AnswerPlacement\n): boolean => {\n  const { answer, orientation } = placement;\n  for (const [i, c] of [...answer].entries()) {\n    if (!isPlacementCharValid(grid, placement, i)) return false;\n\n    const x =\n      placement.x + (orientation === AnswerOrientation.HORIZONTAL ? i : 0);\n    const y =\n      placement.y + (orientation === AnswerOrientation.VERTICAL ? i : 0);\n\n    grid[y][x] = c;\n  }\n  return true;\n};\n\nfunction intersectsStart(placement: AnswerPlacement): boolean {\n  const { x, y, answer, orientation } = placement;\n  if (orientation === AnswerOrientation.HORIZONTAL) {\n    return y === START_Y && x <= START_X && START_X < x + answer.length;\n  } else {\n    return x === START_X && y <= START_Y && START_Y < y + answer.length;\n  }\n}\n\n// Assumes the two placements have passed other validation\nfunction placementsIntersect(\n  p1: AnswerPlacement,\n  p2: AnswerPlacement\n): boolean {\n  // require one to be horizontal and one to be vertical\n  if (p1.orientation === p2.orientation) {\n    return false;\n  }\n  // make p1 horizontal and p2 vertical, swapping if necessary\n  if (p1.orientation === AnswerOrientation.VERTICAL) {\n    [p1, p2] = [p2, p1];\n  }\n\n  const { x: x1, y: y1, answer: answer1 } = p1;\n  const { x: x2, y: y2, answer: answer2 } = p2;\n  return (\n    y2 <= y1 && y1 < y2 + answer2.length && x1 <= x2 && x2 < x1 + answer1.length\n  );\n}\n\n/** Get the placements connected to the start. */\nexport function getConnectedPlacements(\n  masteryTree: MasteryTree\n): AnswerPlacement[] {\n  let first = true;\n  const placements = masteryTree.placements;\n  const used: { [answer: string]: boolean } = {};\n  let lastLayer: AnswerPlacement[] = [];\n  const connectedPlacements: AnswerPlacement[] = [];\n\n  while (first || lastLayer.length > 0) {\n    const nextLayer: AnswerPlacement[] = [];\n    if (first) {\n      for (const answer of Object.keys(placements)) {\n        if (used[answer]) {\n          continue;\n        }\n        if (intersectsStart(placements[answer])) {\n          nextLayer.push(placements[answer]);\n          used[answer] = true;\n        }\n      }\n      first = false;\n    } else {\n      for (const answer of Object.keys(placements)) {\n        if (used[answer]) {\n          continue;\n        }\n        for (const lastLayerPlacement of lastLayer) {\n          if (placementsIntersect(lastLayerPlacement, placements[answer])) {\n            nextLayer.push(placements[answer]);\n            used[answer] = true;\n            break;\n          }\n        }\n      }\n    }\n    connectedPlacements.push(...nextLayer);\n    lastLayer = nextLayer;\n  }\n\n  return connectedPlacements;\n}\n/** Get the masteries enabled by a mastery tree, sorted. */\nexport const getMasteriesFromMasteryTree = (\n  masteriesDB: MasteriesDB,\n  masteryTree: MasteryTree\n): MasteryData[] => {\n  const allConnectedPlacements = getConnectedPlacements(masteryTree);\n\n  return (() => {\n    if (masteryTree.masteriesListOverride !== undefined)\n      return masteryTree.masteriesListOverride.map(\n        (masteryId) => masteriesDB[masteryId]\n      );\n    return Object.values(masteriesDB).filter((mastery) => {\n      return allConnectedPlacements.some(\n        (placement) =>\n          getPlacementCharAt(placement, mastery.x, mastery.y) !== null\n      );\n    });\n  })().sort((mastery1, mastery2) => mastery1.order - mastery2.order);\n};\n\nexport const makeMasteryTreeGrid = (masteryTree: MasteryTree) => {\n  const grid = makeEmptyMasteryGrid();\n  for (const placement of Object.values(masteryTree.placements)) {\n    if (!tryPlaceAnswerOnMasteryGrid(grid, placement)) return null;\n  }\n  return grid;\n};\n\nexport const isMasteryTreeStepValid = (\n  masteryTree: MasteryTree,\n  availableAnswers: string[],\n  step: MasteryTreeStep\n) => {\n  switch (step.type) {\n    case MasteryTreeStepType.PLACE: {\n      const { placement } = step;\n      const { answer } = placement;\n\n      if (!availableAnswers.includes(answer)) {\n        return false;\n      }\n      if (masteryTree.placements[answer]) {\n        return false;\n      }\n\n      const grid = makeMasteryTreeGrid(masteryTree);\n      if (grid === null || !tryPlaceAnswerOnMasteryGrid(grid, placement)) {\n        return false;\n      }\n      break;\n    }\n    case MasteryTreeStepType.RESET: {\n      break;\n    }\n    case MasteryTreeStepType.DELETE: {\n      const { answer } = step;\n      if (!masteryTree.placements[answer]) {\n        return false;\n      }\n      break;\n    }\n  }\n  return true;\n};\n\nexport const masteryTreeStepToUpdate = (\n  step: MasteryTreeStep\n): MasteryTreeUpdate => {\n  switch (step.type) {\n    case MasteryTreeStepType.PLACE: {\n      const { placement } = step;\n      return {\n        newPlacements: [placement],\n      };\n    }\n    case MasteryTreeStepType.DELETE: {\n      const { answer } = step;\n      return {\n        popAnswers: [answer],\n      };\n    }\n    case MasteryTreeStepType.RESET: {\n      return {\n        reset: true,\n      };\n    }\n  }\n\n  throw new Error(\"unknown mastery tree step\");\n};\n","import { WSRespType, WSResp } from \"game-server/ws\";\nimport {\n  speedrunTimeToString,\n  TeamNameDisplayDataUpdate,\n  GlobalUpdateType,\n} from \"game-server/global-updates\";\nimport { GameServer } from \"game-server/GameServer\";\n\nimport { Faction } from \"engine/types/factions\";\n\nimport { ClientTeamSpeedrunInfoGlobalState } from \"game-server/global-updates\";\n\nexport const HEALTH_MONITORING_INTERVAL_MS = 6000;\nexport const CURSOR_EVENTS_MONITORING_INTERVAL_MS = 3000;\n\nexport enum DirtyStateType {\n  /** The resource is new, so it doesn't need to be synced. */\n  NEW = \"new\",\n  /** The resource needs to be synced. */\n  DIRTY = \"dirty\",\n  /** The resource is currently being synced. */\n  SYNCING = \"syncing\",\n  /** The resource failed to sync. */\n  FAILED = \"failed\",\n  /** The resource is synced. */\n  SYNCED = \"synced\",\n}\n\nexport type DirtyState = {\n  type: DirtyStateType;\n  lastSyncTime: number;\n};\n\nexport type ServerDirtyState = {\n  teams: {\n    [teamId: string]: {\n      fastSync?: DirtyState;\n      misc?: DirtyState;\n      decks?: { [slot: number]: DirtyState };\n      masteryTree?: DirtyState;\n      rooms?: { [roomId: string]: DirtyState };\n      checkpoints?: { [puzName: string]: DirtyState };\n      answers?: { [puzName: string]: DirtyState };\n    };\n  };\n};\n\nexport type ServerDirtyStateUpdate = {\n  teams: {\n    [teamId: string]: {\n      fastSync?: DirtyState;\n      misc?: DirtyState;\n      decks?: { [slot: number]: DirtyState };\n      masteryTree?: DirtyState;\n      rooms?: { [roomId: string]: DirtyState };\n      checkpoints?: { [puzName: string]: DirtyState };\n      answers?: { [puzName: string]: DirtyState };\n    };\n  };\n};\n\nexport const mergeServerDirtyStateUpdate = (\n  upd1: ServerDirtyStateUpdate,\n  upd2: ServerDirtyStateUpdate\n) => {\n  for (const [teamId, teamUpds2] of Object.entries(upd2.teams)) {\n    const teamUpds1 = upd1.teams[teamId];\n    if (teamUpds1 === undefined) {\n      upd1.teams[teamId] = teamUpds2;\n      continue;\n    }\n    if (teamUpds2.fastSync !== undefined)\n      teamUpds1.fastSync = teamUpds2.fastSync;\n    if (teamUpds2.misc !== undefined) teamUpds1.misc = teamUpds2.misc;\n    for (const [slot, deckUpd] of Object.entries(teamUpds2.decks ?? {})) {\n      teamUpds1.decks ??= {};\n      teamUpds1.decks[Number(slot)] = deckUpd;\n    }\n    if (teamUpds2.masteryTree !== undefined)\n      teamUpds1.masteryTree = teamUpds2.masteryTree;\n    for (const [roomId, roomUpd] of Object.entries(teamUpds2.rooms ?? {})) {\n      teamUpds1.rooms ??= {};\n      teamUpds1.rooms[roomId] = roomUpd;\n    }\n    for (const [puzName, checkpoints] of Object.entries(\n      teamUpds2.checkpoints ?? {}\n    )) {\n      teamUpds1.checkpoints ??= {};\n      teamUpds1.checkpoints[puzName] = checkpoints;\n    }\n    for (const [puzName, answerUpd] of Object.entries(\n      teamUpds2.answers ?? {}\n    )) {\n      teamUpds1.answers ??= {};\n      teamUpds1.answers[puzName] = answerUpd;\n    }\n  }\n};\n\nexport const updateServerDirtyState = (\n  state: ServerDirtyState,\n  upd: ServerDirtyStateUpdate\n) => {\n  // Currently, the state and update have the same type signature,\n  // so we can just reuse the merge function.\n  mergeServerDirtyStateUpdate(state, upd);\n};\n\nexport class ServerDirtyStateTracker {\n  dirtyState: ServerDirtyState;\n  /**\n   * Clients only receive dirty state updates in batches every periodic\n   * sync. The pending dirty state updates are buffered here, and are\n   * only merged into the dirtyState object when they are broadcast\n   * to clients.\n   */\n  pendingDirtyStateUpd: ServerDirtyStateUpdate;\n\n  constructor() {\n    this.dirtyState = { teams: {} };\n    this.pendingDirtyStateUpd = { teams: {} };\n  }\n\n  update(upd: ServerDirtyStateUpdate) {\n    mergeServerDirtyStateUpdate(this.pendingDirtyStateUpd, upd);\n  }\n\n  commitUpds() {\n    updateServerDirtyState(this.dirtyState, this.pendingDirtyStateUpd);\n    this.pendingDirtyStateUpd = { teams: {} };\n  }\n}\n\nexport type IntervalMetricsSummary = {\n  /** Just pass the interval length in to make reporting simpler. */\n  intervalLength: number;\n  totNumEvents: number;\n  lastEventTime: number;\n  numPerInterval: number;\n};\n\nexport const getIntervalMetricsSummaryString = (\n  metrics: IntervalMetricsSummary\n): string => {\n  const lastEventTimeStr =\n    metrics.lastEventTime === 0\n      ? \"N/A\"\n      : `${speedrunTimeToString(Date.now() - metrics.lastEventTime, true)} ago`;\n  return `${metrics.numPerInterval} / ${metrics.intervalLength / 1000}s (tot: ${\n    metrics.totNumEvents\n  }) (last: ${lastEventTimeStr})`;\n};\n\nexport class IntervalMetrics {\n  /** Length of the collection interval, in ms. */\n  intervalLength: number;\n\n  /** Total number of events recorded. */\n  totNumEvents: number;\n  /** Timestamp of the last event. */\n  lastEventTime: number;\n  /** Number of events in the previous interval. */\n  prevNumEvents: number;\n  /** Number of events in the current interval. */\n  currNumEvents: number;\n\n  constructor(intervalLength: number) {\n    this.intervalLength = intervalLength;\n    this.totNumEvents = 0;\n    this.lastEventTime = 0;\n    this.prevNumEvents = 0;\n    this.currNumEvents = 0;\n  }\n\n  record(): void {\n    this.update(true);\n  }\n\n  update(doRecord?: boolean): void {\n    const currTime = new Date().getTime();\n    const prevIntervalNum = Math.floor(\n      this.lastEventTime / this.intervalLength\n    );\n    const currIntervalNum = Math.floor(currTime / this.intervalLength);\n    if (prevIntervalNum !== currIntervalNum) {\n      this.prevNumEvents =\n        prevIntervalNum + 1 === currIntervalNum ? this.currNumEvents : 0;\n      this.currNumEvents = 0;\n    }\n    if (doRecord ?? false) {\n      this.lastEventTime = currTime;\n      this.currNumEvents++;\n      this.totNumEvents++;\n    }\n  }\n\n  getSummary(): IntervalMetricsSummary {\n    this.update();\n    return {\n      intervalLength: this.intervalLength,\n      totNumEvents: this.totNumEvents,\n      lastEventTime: this.lastEventTime,\n      numPerInterval: this.prevNumEvents,\n    };\n  }\n\n  getSummaryString(): string {\n    return getIntervalMetricsSummaryString(this.getSummary());\n  }\n}\n\nexport class TeamMetricsTracker {\n  server: GameServer;\n  numAuthsSummaries: { [teamId: string]: IntervalMetricsSummary };\n  numRequestsSummaries: { [teamId: string]: IntervalMetricsSummary };\n  numAuthsUpds: Set<string>;\n  numRequestsUpds: Set<string>;\n\n  constructor(server: GameServer) {\n    this.server = server;\n    this.numAuthsSummaries = {};\n    this.numRequestsSummaries = {};\n    this.numAuthsUpds = new Set();\n    this.numRequestsUpds = new Set();\n  }\n\n  recordAuth(teamId: string) {\n    this.numAuthsUpds.add(teamId);\n  }\n\n  recordRequest(teamId: string) {\n    this.numRequestsUpds.add(teamId);\n  }\n\n  getAndCommitUpds(): {\n    teamNumAuthsMetrics: { [teamId: string]: IntervalMetricsSummary };\n    teamNumRequestsMetrics: { [teamId: string]: IntervalMetricsSummary };\n  } {\n    const upds = {\n      teamNumAuthsMetrics: Object.fromEntries(\n        Array.from(this.numAuthsUpds, (teamId) => [\n          teamId,\n          this.server.getTeamController(teamId).numAuthsMetrics.getSummary(),\n        ])\n      ),\n      teamNumRequestsMetrics: Object.fromEntries(\n        Array.from(this.numRequestsUpds, (teamId) => [\n          teamId,\n          this.server.getTeamController(teamId).numRequestsMetrics.getSummary(),\n        ])\n      ),\n    };\n    Object.assign(this.numAuthsSummaries, upds.teamNumAuthsMetrics);\n    Object.assign(this.numRequestsSummaries, upds.teamNumRequestsMetrics);\n    this.numAuthsUpds.clear();\n    this.numRequestsUpds.clear();\n    return upds;\n  }\n}\n\nexport type BigBoardTeamPuzzleState = {\n  solveTime?: number;\n  numHintsUsed?: number;\n  numWrongGuesses?: number;\n  numMembers?: number;\n};\n\nexport type BigBoardTeamState = {\n  numHintsTotal: number;\n  unlocks: {\n    [puzName: string]: BigBoardTeamPuzzleState;\n  };\n  cardUnlocks: { [cardName: string]: true };\n  selectedPuzzles: { [puzName: string]: string };\n  enabledMasteries: { [masteryId: string]: true };\n};\n\nexport type BigBoardTeamUpdate = {\n  numHintsTotal?: number;\n  unlocks?: {\n    [puzName: string]: {\n      solveTime?: number;\n      numHintsUsed?: number;\n      numWrongGuesses?: number;\n      numMembers?: number;\n    } | null;\n  };\n  cardUnlocks?: { [cardName: string]: boolean };\n  selectedPuzzles?: { [puzName: string]: string | null };\n  enabledMasteries?: { [masteryId: string]: boolean };\n};\n\nexport const mergeBigBoardTeamUpdate = (\n  upd1: BigBoardTeamUpdate,\n  upd2: BigBoardTeamUpdate\n) => {\n  if (upd2.numHintsTotal !== undefined) upd1.numHintsTotal = upd2.numHintsTotal;\n  for (const [puzName, puzUpds] of Object.entries(upd2.unlocks ?? {})) {\n    upd1.unlocks ??= {};\n    if (puzUpds === null) {\n      upd1.unlocks[puzName] = null;\n      return;\n    }\n    upd1.unlocks[puzName] = Object.assign(upd1.unlocks[puzName] ?? {}, puzUpds);\n  }\n  for (const [cardName, isUnlocked] of Object.entries(upd2.cardUnlocks ?? {})) {\n    upd1.cardUnlocks ??= {};\n    upd1.cardUnlocks[cardName] = isUnlocked;\n  }\n  for (const [puzName, selectedPuzName] of Object.entries(\n    upd2.selectedPuzzles ?? {}\n  )) {\n    upd1.selectedPuzzles ??= {};\n    upd1.selectedPuzzles[puzName] = selectedPuzName;\n  }\n  for (const [masteryId, isEnabled] of Object.entries(\n    upd2.enabledMasteries ?? {}\n  )) {\n    upd1.enabledMasteries ??= {};\n    upd1.enabledMasteries[masteryId] = isEnabled;\n  }\n};\n\nexport const updateBigBoardTeamState = (\n  state: BigBoardTeamState,\n  upd: BigBoardTeamUpdate\n) => {\n  const {\n    numHintsTotal,\n    unlocks,\n    cardUnlocks,\n    selectedPuzzles,\n    enabledMasteries,\n  } = upd;\n  if (numHintsTotal !== undefined) state.numHintsTotal = numHintsTotal;\n  for (const [puzName, puzUpds] of Object.entries(unlocks ?? {})) {\n    state.unlocks[puzName] = Object.assign(\n      state.unlocks[puzName] ?? {},\n      puzUpds\n    );\n  }\n  for (const [cardName, isUnlocked] of Object.entries(cardUnlocks ?? {})) {\n    if (isUnlocked) state.cardUnlocks[cardName] = true;\n    else delete state.cardUnlocks[cardName];\n  }\n  for (const [puzName, selectedPuzName] of Object.entries(\n    selectedPuzzles ?? {}\n  )) {\n    if (selectedPuzName === null) delete state.selectedPuzzles[puzName];\n    else state.selectedPuzzles[puzName] = selectedPuzName;\n  }\n  for (const [masteryId, isEnabled] of Object.entries(enabledMasteries ?? {})) {\n    if (isEnabled) state.enabledMasteries[masteryId] = true;\n    else delete state.enabledMasteries[masteryId];\n  }\n};\n\nexport class BigBoardStateTracker {\n  state: { [teamId: string]: BigBoardTeamState };\n  /**\n   * Clients only receive dirty big board updates in batches every periodic\n   * sync. The pending updates are buffered here, and are only merged into\n   * the big board state object when they are broadcast to clients.\n   */\n  pendingUpds: { [teamId: string]: BigBoardTeamUpdate };\n\n  constructor() {\n    this.state = {};\n    this.pendingUpds = {};\n  }\n\n  addTeam(teamId: string, teamState: BigBoardTeamState) {\n    this.state[teamId] = teamState;\n  }\n\n  updateTeam(teamId: string, upd: BigBoardTeamUpdate) {\n    // If we don't know about the team yet, then the team might\n    // still be in the process of being initialized, so drop\n    // any updates.\n    if (this.state[teamId] === undefined) return;\n\n    const existingUpd = this.pendingUpds[teamId];\n    if (existingUpd === undefined) {\n      this.pendingUpds[teamId] = upd;\n      return;\n    }\n    mergeBigBoardTeamUpdate(existingUpd, upd);\n\n    this.removeRedundantTeamUpdates(teamId);\n  }\n\n  private removeRedundantTeamUpdates(teamId: string) {\n    const teamUpds = this.pendingUpds[teamId];\n    const teamState = this.state[teamId];\n    if (teamUpds === undefined) return;\n    if (teamState === undefined)\n      throw new Error(\"expect to only receive updates for existing teams\");\n    const {\n      numHintsTotal,\n      unlocks,\n      cardUnlocks,\n      selectedPuzzles,\n      enabledMasteries,\n    } = teamUpds;\n\n    if (\n      numHintsTotal !== undefined &&\n      numHintsTotal === teamState.numHintsTotal\n    )\n      delete teamUpds.numHintsTotal;\n\n    if (unlocks !== undefined) {\n      for (const [puzName, puzUpds] of Object.entries(unlocks)) {\n        if (puzUpds === null) {\n          if (teamState.unlocks[puzName] === undefined) delete unlocks[puzName];\n          continue;\n        }\n\n        if (teamState.unlocks[puzName] === undefined) continue;\n        const puzState = teamState.unlocks[puzName];\n        const { solveTime, numHintsUsed, numWrongGuesses, numMembers } =\n          puzUpds;\n        if (\n          solveTime !== undefined &&\n          puzState.solveTime !== undefined &&\n          solveTime === puzState.solveTime\n        )\n          delete puzUpds.solveTime;\n        if (\n          numHintsUsed !== undefined &&\n          numHintsUsed === (puzState.numHintsUsed ?? 0)\n        )\n          delete puzUpds.numHintsUsed;\n        if (\n          numWrongGuesses !== undefined &&\n          numWrongGuesses === (puzState.numWrongGuesses ?? 0)\n        )\n          delete puzUpds.numWrongGuesses;\n        if (\n          numMembers !== undefined &&\n          numMembers === (puzState.numMembers ?? 0)\n        )\n          delete puzUpds.numMembers;\n        if (Object.keys(puzUpds).length === 0) delete unlocks[puzName];\n      }\n      if (Object.keys(unlocks).length === 0) delete teamUpds.unlocks;\n    }\n\n    if (cardUnlocks !== undefined) {\n      for (const [cardName, isUnlocked] of Object.entries(cardUnlocks)) {\n        if (isUnlocked === (teamState.cardUnlocks[cardName] ?? false))\n          delete cardUnlocks[cardName];\n      }\n      if (Object.keys(cardUnlocks).length === 0) delete teamUpds.cardUnlocks;\n    }\n\n    if (selectedPuzzles !== undefined) {\n      for (const [puzName, selectedPuzName] of Object.entries(\n        selectedPuzzles\n      )) {\n        if (selectedPuzName === teamState.selectedPuzzles[puzName])\n          delete selectedPuzzles[puzName];\n      }\n      if (Object.keys(selectedPuzzles).length === 0)\n        delete teamUpds.selectedPuzzles;\n    }\n\n    if (enabledMasteries !== undefined) {\n      for (const [masteryId, isEnabled] of Object.entries(enabledMasteries)) {\n        if (isEnabled === (teamState.enabledMasteries[masteryId] ?? false))\n          delete enabledMasteries[masteryId];\n      }\n      if (Object.keys(enabledMasteries).length === 0)\n        delete teamUpds.enabledMasteries;\n    }\n\n    if (Object.keys(teamUpds).length === 0) delete this.pendingUpds[teamId];\n  }\n\n  commitUpds() {\n    for (const [teamId, upd] of Object.entries(this.pendingUpds)) {\n      const teamState = this.state[teamId];\n      if (teamState === undefined)\n        throw new Error(\"expect to only receive updates for existing teams\");\n      updateBigBoardTeamState(this.state[teamId], upd);\n    }\n    this.pendingUpds = {};\n  }\n}\n\nexport type TeamSummaryState = {\n  teamId: string;\n  displayName: string;\n  faction: Faction | null;\n  factionScoreContribution: number;\n  hasReputationBoost?: boolean;\n  hasPvP?: boolean;\n  isPvPGameActive?: boolean;\n  numSolves: number;\n  completionTime?: number;\n  lastSolveTime?: number;\n  speedrunInfo: ClientTeamSpeedrunInfoGlobalState;\n  isHidden?: boolean;\n};\n\nexport type TeamSummaryUpdate = {\n  displayName?: string;\n  faction?: Faction | null;\n  factionScoreContribution?: number;\n  hasReputationBoost?: boolean;\n  hasPvP?: boolean;\n  isPvPGameActive?: boolean;\n  numSolves?: number;\n  completionTime?: number;\n  lastSolveTime?: number;\n  speedrunInfo?: ClientTeamSpeedrunInfoGlobalState;\n  isHidden?: boolean;\n};\n\nexport const teamSummaryUpdateToTeamNameDisplayUpdate = (\n  upd: TeamSummaryUpdate\n): TeamNameDisplayDataUpdate => {\n  const { displayName, faction, factionScoreContribution, hasReputationBoost } =\n    upd;\n  return {\n    displayName,\n    faction,\n    factionScoreContribution,\n    hasReputationBoost,\n  };\n};\n\nexport const mergeTeamSummaryUpdate = (\n  upd1: TeamSummaryUpdate,\n  upd2: TeamSummaryUpdate\n) => {\n  Object.assign(upd1, upd2);\n};\n\nexport const updateTeamSummary = (\n  state: TeamSummaryState,\n  upd: TeamSummaryUpdate\n) => {\n  Object.assign(state, upd);\n};\n\nexport class TeamListStateTracker {\n  state: { [teamId: string]: TeamSummaryState };\n  cachedSerializedOverrideGlobalUpdate?: string;\n  /**\n   * Clients only receive dirty team list updates in batches every periodic\n   * sync. The pending updates are buffered here, and are only merged into\n   * the state object when they are broadcast to clients.\n   */\n  pendingUpds: { [teamId: string]: TeamSummaryUpdate };\n\n  constructor() {\n    this.state = {};\n    this.pendingUpds = {};\n  }\n\n  invalidateCache() {\n    delete this.cachedSerializedOverrideGlobalUpdate;\n  }\n\n  getSerializedOverrideGlobalUpdate(): string {\n    if (this.cachedSerializedOverrideGlobalUpdate !== undefined)\n      return this.cachedSerializedOverrideGlobalUpdate;\n    // Typecheck the global update.\n    const upd: WSResp = {\n      type: WSRespType.GLOBAL_UPDATE,\n      upd: {\n        type: GlobalUpdateType.TEAM_LIST_OVERRIDE_STATE,\n        teams: this.state,\n      },\n    };\n    this.cachedSerializedOverrideGlobalUpdate = JSON.stringify(upd);\n    return this.cachedSerializedOverrideGlobalUpdate;\n  }\n\n  addTeam(teamId: string, teamState: TeamSummaryState) {\n    this.state[teamId] = teamState;\n    this.invalidateCache();\n  }\n\n  removeTeam(teamId: string) {\n    delete this.state[teamId];\n    delete this.pendingUpds[teamId];\n    this.invalidateCache();\n  }\n\n  updateTeam(teamId: string, upd: TeamSummaryUpdate) {\n    // If we don't know about the team yet, then the team might\n    // still be in the process of being initialized, so drop\n    // any updates.\n    if (this.state[teamId] === undefined) return;\n\n    const existingUpd = this.pendingUpds[teamId];\n    if (existingUpd === undefined) {\n      this.pendingUpds[teamId] = upd;\n      return;\n    }\n    mergeTeamSummaryUpdate(existingUpd, upd);\n\n    this.removeRedundantTeamUpdates(teamId);\n  }\n\n  private removeRedundantTeamUpdates(teamId: string) {\n    const teamUpds = this.pendingUpds[teamId];\n    const teamState = this.state[teamId];\n    if (teamUpds === undefined) return;\n    if (teamState === undefined)\n      throw new Error(\"expect to only receive updates for existing teams\");\n\n    // This doesn't need to be exhaustive, so no need to worry about\n    // speedrunInfo, particularly since it is only updated when there\n    // are actual changes.\n    const {\n      displayName,\n      faction,\n      factionScoreContribution,\n      hasReputationBoost,\n      hasPvP,\n      isPvPGameActive,\n      numSolves,\n      completionTime,\n      lastSolveTime,\n    } = teamUpds;\n    if (displayName === teamState.displayName) delete teamUpds.displayName;\n    if (faction === teamState.faction) delete teamUpds.faction;\n    if (factionScoreContribution === teamState.factionScoreContribution)\n      delete teamUpds.factionScoreContribution;\n    if (hasReputationBoost === teamState.hasReputationBoost)\n      delete teamUpds.hasReputationBoost;\n    if (hasPvP === teamState.hasPvP) delete teamUpds.hasPvP;\n    if (isPvPGameActive === teamState.isPvPGameActive)\n      delete teamUpds.isPvPGameActive;\n    if (numSolves === teamState.numSolves) delete teamUpds.numSolves;\n    if (completionTime === teamState.completionTime)\n      delete teamUpds.completionTime;\n    if (lastSolveTime === teamState.lastSolveTime)\n      delete teamUpds.lastSolveTime;\n    if (Object.keys(teamUpds).length === 0) delete this.pendingUpds[teamId];\n  }\n\n  commitUpds() {\n    for (const [teamId, upd] of Object.entries(this.pendingUpds)) {\n      const teamState = this.state[teamId];\n      if (teamState === undefined)\n        throw new Error(\"expect to only receive updates for existing teams\");\n      updateTeamSummary(this.state[teamId], upd);\n    }\n    this.pendingUpds = {};\n    this.invalidateCache();\n  }\n}\n","import { z } from \"zod\";\n\nimport {\n  Deck,\n  createNewDeck,\n  DeckUpdate,\n  applyDeckUpdate,\n  DeckSelection,\n} from \"engine/types/decks\";\nimport { Faction } from \"engine/types/factions\";\nimport { CardData } from \"engine/types/card-data\";\nimport {\n  MapPosition,\n  PuzzleData,\n  BattleGroupData,\n  PUZ_NAME_FINAL_BATTLE,\n} from \"engine/puzzles/puzzle-data\";\n\nimport {\n  MasteryTree,\n  MasteryTreeUpdate,\n  applyMasteryTreeUpdate,\n} from \"game-server/masteries\";\nimport { PvPRequest } from \"game-server/server-controllers\";\nimport {\n  ServerDirtyState,\n  ServerDirtyStateUpdate,\n  updateServerDirtyState,\n  IntervalMetricsSummary,\n  BigBoardTeamState,\n  BigBoardTeamUpdate,\n  updateBigBoardTeamState,\n  TeamSummaryState,\n  TeamSummaryUpdate,\n  updateTeamSummary,\n} from \"game-server/monitoring\";\n\n// Global updates are updates to global (non-room) server state.\n// Currently, these are used for monitoring from the admin room.\n// However, they can also be extended to push other types of updates\n// to all clients (or all clients of a team), such as notifications.\n\n/**\n * Number of entries to show in the speedrun leaderboard summary on\n * the prep page.\n */\nexport const SPEEDRUN_LEADERBOARD_SUMMARY_LENGTH = 3;\n\nexport enum GlobalUpdatesScopeType {\n  SERVER = \"server\",\n  SERVER_HEALTH = \"server_health\",\n  BIG_BOARD = \"big_board\",\n  PVP = \"pvp\",\n  TEAM_LIST = \"team_list\",\n  TEAM_MEMBERS = \"team_members\",\n  FACTION_HISTORY = \"faction_history\",\n  TEAM = \"team\",\n  TEAM_FISH_PUZZLE = \"team_fish_puzzle\",\n  TEAM_BATTLE = \"team_battle\",\n  TEAM_DECKS = \"team_decks\",\n  TEAM_MASTERY_TREE = \"team_mastery_tree\",\n  TEAM_PVP = \"team_pvp\",\n  TEAM_SPEEDRUN_LEADERBOARD_SUMMARY = \"team_speedrun_leaderboard_summary\",\n}\n\nconst ServerGlobalUpdatesScopeZod = z.object({\n  type: z.literal(GlobalUpdatesScopeType.SERVER),\n});\ntype ServerGlobalUpdatesScope = z.infer<typeof ServerGlobalUpdatesScopeZod>;\n\nconst ServerHealthGlobalUpdatesScopeZod = z.object({\n  type: z.literal(GlobalUpdatesScopeType.SERVER_HEALTH),\n});\ntype ServerHealthGlobalUpdatesScope = z.infer<\n  typeof ServerHealthGlobalUpdatesScopeZod\n>;\n\nconst BigBoardGlobalUpdatesScopeZod = z.object({\n  type: z.literal(GlobalUpdatesScopeType.BIG_BOARD),\n});\ntype BigBoardGlobalUpdatesScope = z.infer<typeof BigBoardGlobalUpdatesScopeZod>;\n\nconst PvPGlobalUpdatesScopeZod = z.object({\n  type: z.literal(GlobalUpdatesScopeType.PVP),\n});\ntype PvPGlobalUpdatesScope = z.infer<typeof PvPGlobalUpdatesScopeZod>;\n\nconst TeamListGlobalUpdatesScopeZod = z.object({\n  type: z.literal(GlobalUpdatesScopeType.TEAM_LIST),\n});\ntype TeamListGlobalUpdatesScope = z.infer<typeof TeamListGlobalUpdatesScopeZod>;\n\nconst TeamMembersGlobalUpdatesScopeZod = z.object({\n  type: z.literal(GlobalUpdatesScopeType.TEAM_MEMBERS),\n  teamId: z.string(),\n});\ntype TeamMembersGlobalUpdatesScope = z.infer<\n  typeof TeamMembersGlobalUpdatesScopeZod\n>;\n\nconst FactionHistoryUpdatesScopeZod = z.object({\n  type: z.literal(GlobalUpdatesScopeType.FACTION_HISTORY),\n});\ntype FactionHistoryUpdatesScope = z.infer<typeof FactionHistoryUpdatesScopeZod>;\n\nconst TeamGlobalUpdatesScopeZod = z.object({\n  type: z.literal(GlobalUpdatesScopeType.TEAM),\n  teamId: z.string(),\n});\ntype TeamGlobalUpdatesScope = z.infer<typeof TeamGlobalUpdatesScopeZod>;\n\nconst TeamFishPuzzleGlobalUpdatesScopeZod = z.object({\n  type: z.literal(GlobalUpdatesScopeType.TEAM_FISH_PUZZLE),\n  teamId: z.string(),\n  puzName: z.string(),\n});\ntype TeamFishPuzzleGlobalUpdatesScope = z.infer<\n  typeof TeamFishPuzzleGlobalUpdatesScopeZod\n>;\n\nconst TeamBattleGlobalUpdatesScopeZod = z.object({\n  type: z.literal(GlobalUpdatesScopeType.TEAM_BATTLE),\n  teamId: z.string(),\n  puzName: z.string(),\n});\ntype TeamBattleGlobalUpdatesScope = z.infer<\n  typeof TeamBattleGlobalUpdatesScopeZod\n>;\n\nconst TeamDecksGlobalUpdatesScopeZod = z.object({\n  type: z.literal(GlobalUpdatesScopeType.TEAM_DECKS),\n  teamId: z.string(),\n});\ntype TeamDecksGlobalUpdatesScope = z.infer<\n  typeof TeamDecksGlobalUpdatesScopeZod\n>;\n\nconst TeamMasteryTreeGlobalUpdatesScopeZod = z.object({\n  type: z.literal(GlobalUpdatesScopeType.TEAM_MASTERY_TREE),\n  teamId: z.string(),\n});\ntype TeamMasteryTreeGlobalUpdatesScope = z.infer<\n  typeof TeamMasteryTreeGlobalUpdatesScopeZod\n>;\n\nconst TeamPvPGlobalUpdatesScopeZod = z.object({\n  type: z.literal(GlobalUpdatesScopeType.TEAM_PVP),\n  teamId: z.string(),\n});\ntype TeamPvPGlobalUpdatesScope = z.infer<typeof TeamPvPGlobalUpdatesScopeZod>;\n\nconst TeamSpeedrunLeaderboardSummaryUpdatesScopeZod = z.object({\n  type: z.literal(GlobalUpdatesScopeType.TEAM_SPEEDRUN_LEADERBOARD_SUMMARY),\n  teamId: z.string(),\n  puzName: z.string(),\n});\ntype TeamSpeedrunLeaderboardSummaryUpdatesScope = z.infer<\n  typeof TeamSpeedrunLeaderboardSummaryUpdatesScopeZod\n>;\n\nconst TeamHintsGlobalStateZod = z.object({\n  numHintsTotal: z.number(),\n  numHintsUsed: z.number(),\n});\ntype TeamHintsGlobalState = z.infer<typeof TeamHintsGlobalStateZod>;\n\nexport const GlobalUpdatesScopeZod = z.union([\n  ServerGlobalUpdatesScopeZod,\n  ServerHealthGlobalUpdatesScopeZod,\n  BigBoardGlobalUpdatesScopeZod,\n  PvPGlobalUpdatesScopeZod,\n  TeamListGlobalUpdatesScopeZod,\n  TeamMembersGlobalUpdatesScopeZod,\n  FactionHistoryUpdatesScopeZod,\n  TeamGlobalUpdatesScopeZod,\n  TeamFishPuzzleGlobalUpdatesScopeZod,\n  TeamBattleGlobalUpdatesScopeZod,\n  TeamDecksGlobalUpdatesScopeZod,\n  TeamMasteryTreeGlobalUpdatesScopeZod,\n  TeamPvPGlobalUpdatesScopeZod,\n  TeamSpeedrunLeaderboardSummaryUpdatesScopeZod,\n]);\nexport type GlobalUpdatesScope = z.infer<typeof GlobalUpdatesScopeZod>;\n\nexport type ClientTeamAdminDataGlobalState = {\n  userId: string;\n  displayName: string;\n  isHidden: boolean;\n  isInactive: boolean;\n  isTempBlocked: boolean;\n};\n\nexport type ClientTeamSpeedrunInfoGlobalState = {\n  numTimes: number;\n  totalTime: number;\n};\n\nexport enum GlobalStateBattleRoomStatus {\n  NONE = \"none\",\n  INACTIVE = \"inactive\",\n  ACTIVE = \"active\",\n}\n\nexport type GlobalStatePuzzleStats = {\n  unlockCount: number;\n  solveCount: number;\n};\n\n/** A prompt for a puzzle. Currently only used for the mastery tree. */\nexport type PuzzlePrompt = {\n  header: string;\n  text: string;\n};\n\n/**\n * Information about unlocked puzzles that a client might\n * need. Should not contain spoilers about puzzles not yet unlocked.\n */\nexport type ClientPuzzleGlobalState = {\n  puzName: string;\n  battleGroupName: string;\n  order: number;\n  /** Timestamp of when the team unlocked the puzzle. */\n  unlockTime: number;\n  /** If set, the puzzle has not been seen by the team. */\n  isNew?: boolean;\n  /**\n   * Timestamp of when the team solved the puzzle. Should always be\n   * set if solved, since the client uses whether or not this\n   * is set to check if the puzzle is solved.\n   */\n  solveTime?: number;\n  /**\n   * Whether the puzzle accepts an answer submission. This is set whether\n   * or not the puzzle is solved.\n   */\n  hasAnswer?: boolean;\n  /**\n   * The canonical answer to the puzzle. Only set for fish puzzles if\n   * the team has solved the puzzle.\n   */\n  answer?: string;\n  /**\n   * The room status of the battle. Only set for battles, and if the\n   * room status is not NONE.\n   */\n  roomStatus?: GlobalStateBattleRoomStatus;\n  /**\n   * The best speedrun time the team has achieved for this puzzle.\n   * Only set if the team has solved the puzzle.\n   */\n  speedrunTime?: number;\n  /** A prompt for the puzzle. Currently only used for the mastery tree. */\n  puzPrompt?: PuzzlePrompt;\n};\n\nexport type ClientBattleGroupGlobalState = {\n  battleGroupName: string;\n  displayName: string;\n  isCutscene?: boolean;\n  isLegendary?: boolean;\n  mapPos?: MapPosition;\n  /** Number of puzzles in battle group, if more than one. */\n  numPuzzles?: number;\n  stats?: GlobalStatePuzzleStats;\n  preBattleDialogue?: string;\n  postBattleDialogue?: string;\n};\n\nexport type ClientCardUnlockGlobalState = {\n  cardName: string;\n  puzName: string | null;\n};\n\nexport type ClientMasteryGlobalState = {\n  masteryId: string;\n  /**\n   * Display name. May be omitted if the team hasn't unlocked the mastery.\n   */\n  displayName?: string;\n  /**\n   * Effect text. May be omitted if the team hasn't unlocked the mastery.\n   */\n  effectText?: string;\n  order: number;\n  x: number;\n  y: number;\n  isEnabled: boolean;\n};\n\nexport type ClientTeamGlobalState = {\n  teamId: string;\n  displayName: string;\n  faction: Faction | null;\n  factionScoreContributions: {\n    [faction in Faction]: number;\n  };\n  factionScores: {\n    [faction in Faction]: number;\n  };\n  /** Details about puzzles unlocked by the team. */\n  puzzles: { [puzName: string]: ClientPuzzleGlobalState };\n  /** Battle groups unlocked by the team. */\n  battleGroups: { [puzName: string]: ClientBattleGroupGlobalState };\n  /** Cards unlocked by the team. */\n  cardUnlocks: { [cardName: string]: ClientCardUnlockGlobalState };\n  /** Secret card data that the client might unlock. */\n  extraCards?: CardData[];\n  masteries: { [masteryId: string]: ClientMasteryGlobalState };\n  /** Number of hints remaining, directly from Django */\n  hintsInfo: TeamHintsGlobalState;\n  /** When the hunt ends. */\n  huntEndTime: number;\n};\n\nexport type ClientActiveGameGlobalState = {\n  enabledMasteries: { [masteryId: string]: boolean };\n  faction: Faction | null;\n};\n\nexport type TeamNameDisplayData =\n  | {\n      teamId: string;\n      displayName: string;\n      faction: Faction | null;\n      factionScoreContribution: number;\n      hasReputationBoost?: true;\n    }\n  | TeamSummaryState;\n\nexport type TeamNameDisplayDataUpdate = {\n  displayName?: string;\n  faction?: Faction | null;\n  factionScoreContribution?: number;\n  hasReputationBoost?: boolean;\n};\n\nexport const updateTeamNameDisplayData = (\n  teamData: TeamNameDisplayData,\n  upd: TeamNameDisplayDataUpdate\n) => {\n  const { hasReputationBoost, ...otherUpds } = upd;\n  if (hasReputationBoost !== undefined) {\n    if (hasReputationBoost) teamData.hasReputationBoost = true;\n    else delete teamData.hasReputationBoost;\n  }\n  Object.assign(teamData, otherUpds);\n};\n\nexport type ClientSpeedrunTimeRecord = {\n  teamData: TeamNameDisplayData;\n  /** Run time, in milliseconds. */\n  speedrunTime: number;\n};\n\nexport type ClientErratum = {\n  erratumId: string;\n  text: string;\n  timestamp: number;\n  published: boolean;\n};\n\nexport type CheckpointSummary = {\n  turnNumber: number;\n  roomId: string;\n  timestamp: number;\n};\n\ntype ClientTeamBattleGlobalState = {\n  teamId: string;\n  puzName: string;\n  /** The selected puzzle; only relevant for instancer rooms. */\n  selectedPuzName: string | null;\n  /**\n   * The puzName of the current room; only relevant for instancer rooms.\n   * This may differ from selectedPuzName since the selectedPuzName may\n   * change while the client is viewing an ended battle.\n   */\n  roomPuzName: string | null;\n  /** The deck selection on the prep page. */\n  selectedDeckSlot: number | null;\n  /**\n   * The deck selection shown locked on the prep page, if any.\n   * This overrides the selected deck slot in render.\n   */\n  lockedDeckSelection: DeckSelection | null;\n  /**\n   * Information about the active game, if there is an active game ongoing.\n   */\n  activeGame: ClientActiveGameGlobalState | null;\n  errata: { [erratumId: string]: ClientErratum };\n  checkpointSummaries: { [slot: number]: CheckpointSummary };\n};\n\nexport type ClientAnswerSubmissionGlobalState = {\n  submittedAnswer: string;\n  timestamp: number;\n};\n\nexport type ClientTeamFishPuzzleGlobalState = {\n  teamId: string;\n  puzName: string;\n  numGuessesRemaining: number;\n  previousGuesses: ClientAnswerSubmissionGlobalState[];\n};\n\ntype ClientTeamDecksGlobalState = {\n  teamId: string;\n  decks: (Deck | null)[];\n};\n\ntype ClientTeamMasteryTreeGlobalState = {\n  teamId: string;\n  masteryTree: MasteryTree;\n};\n\ntype ClientTeamPvPGlobalState = {\n  teamId: string;\n  outgoingRequests: { [teamId: string]: PvPRequest };\n  incomingRequests: { [teamId: string]: PvPRequest };\n  blockedTeams: { [teamId: string]: true };\n  blockedByTeams: { [teamId: string]: true };\n};\n\nexport type ClientPvPGlobalState = {\n  /** Team IDs of teams in the ring, from the least to most recent. */\n  ring: string[];\n};\n\nexport type ClientTeamSpeedrunLeaderboardSummaryGlobalState = {\n  teamId: string;\n  puzName: string;\n  /**\n   * Top N speedrun times. Only updated when the speedrun mastery is\n   * enabled and the puzzle is solved.\n   */\n  speedrunLeaderboardSummary?: ClientSpeedrunTimeRecord[];\n  /**\n   * Rank in the speedrun leaderboard. Only updated when the speedrun\n   * mastery is enabled and the puzzle is solved.\n   */\n  speedrunRank?: number;\n};\n\nexport type ClientServerHealthGlobalState = {\n  fastSyncMetrics: IntervalMetricsSummary;\n  slowSyncMetrics: IntervalMetricsSummary;\n  checkAnswerMetrics: IntervalMetricsSummary;\n  numAuthsMetrics: IntervalMetricsSummary;\n  numRequestsMetrics: IntervalMetricsSummary;\n\n  teamNumAuthsMetrics: { [teamId: string]: IntervalMetricsSummary };\n  teamNumRequestsMetrics: { [teamId: string]: IntervalMetricsSummary };\n\n  fastSyncQueueLength: number;\n  numActivePeriodicTasksHandlers: number;\n  numPendingSubmissionTasks: number;\n  numCompletedRoomsToSync: number;\n  teamInitQueueLength: number;\n  numActiveConns: number;\n  userTimeUsage: number;\n  systemTimeUsage: number;\n\n  dirtyState: ServerDirtyState;\n};\n\nexport type ClientBigBoardGlobalState = {\n  teams: { [teamId: string]: BigBoardTeamState };\n};\n\nexport type ClientTeamMembersGlobalState = {\n  teamId: string;\n  members: string[];\n};\n\nexport type ClientGlobalState = {\n  teamAdminData: { [teamId: string]: ClientTeamAdminDataGlobalState };\n  teams: { [teamId: string]: TeamSummaryState };\n  /** Full puzzle data; only accessible by admin. */\n  puzzles: { [puzName: string]: PuzzleData };\n  /** Full battle group data; only accessible by admin. */\n  battleGroups: { [puzName: string]: BattleGroupData };\n  /** Full mastery data; only accessible by admin. */\n  masteries: { [masteryId: string]: { displayName: string } };\n  factionHistory: { [key: string]: number };\n  serverHealth: ClientServerHealthGlobalState | null;\n  bigBoard: ClientBigBoardGlobalState | null;\n  pvp: ClientPvPGlobalState | null;\n  subscribedTeam: ClientTeamGlobalState | null;\n  subscribedTeamBattle: ClientTeamBattleGlobalState | null;\n  subscribedTeamFishPuzzle: ClientTeamFishPuzzleGlobalState | null;\n  subscribedTeamDecks: ClientTeamDecksGlobalState | null;\n  subscribedTeamMasteryTree: ClientTeamMasteryTreeGlobalState | null;\n  subscribedTeamPvP: ClientTeamPvPGlobalState | null;\n  subscribedTeamSpeedrunLeaderboardSummary: ClientTeamSpeedrunLeaderboardSummaryGlobalState | null;\n  subscribedTeamMembers: ClientTeamMembersGlobalState | null;\n  unclaimedHints: number;\n};\n\nexport const makeInitClientGlobalState = (): ClientGlobalState => {\n  return {\n    teamAdminData: {},\n    teams: {},\n    puzzles: {},\n    battleGroups: {},\n    masteries: {},\n    factionHistory: {},\n    serverHealth: null,\n    bigBoard: null,\n    pvp: null,\n    subscribedTeam: null,\n    subscribedTeamBattle: null,\n    subscribedTeamFishPuzzle: null,\n    subscribedTeamDecks: null,\n    subscribedTeamMasteryTree: null,\n    subscribedTeamPvP: null,\n    subscribedTeamSpeedrunLeaderboardSummary: null,\n    subscribedTeamMembers: null,\n    unclaimedHints: 0,\n  };\n};\n\nexport const getPuzzleStageNumbers = (\n  puzzles: { [puzName: string]: PuzzleData },\n  battleGroups: { [puzName: string]: BattleGroupData }\n): { [puzName: string]: number } => {\n  const stageNumbers: { [puzName: string]: number } = {};\n  const numInBattleGroup: { [battleGroupName: string]: number } = {};\n  for (const { puzName, battleGroupName } of Object.values(puzzles).sort(\n    (p1, p2) => p1.order - p2.order\n  )) {\n    const battleGroup = battleGroups[battleGroupName];\n    const stageNum = numInBattleGroup[battleGroupName] ?? 0;\n    stageNumbers[puzName] = stageNum;\n    numInBattleGroup[battleGroupName] = stageNum + 1;\n  }\n  return stageNumbers;\n};\n\nexport enum GlobalUpdateType {\n  SERVER_OVERRIDE_STATE = \"server_override_state\",\n  SERVER_ADD_TEAM = \"server_add_team\",\n  SERVER_UPDATE_TEAM = \"server_update_team\",\n  SERVER_UNCLAIMED_HINTS = \"server_unclaimed_hints\",\n\n  SERVER_HEALTH_OVERRIDE_STATE = \"server_health_override_state\",\n  SERVER_HEALTH_UPDATE_STATE = \"server_health_update_state\",\n\n  BIG_BOARD_OVERRIDE_STATE = \"big_board_override_state\",\n  BIG_BOARD_UPDATE_STATE = \"big_board_update_state\",\n\n  PVP_OVERRIDE_STATE = \"pvp_override_state\",\n  PVP_UPDATE_STATE = \"pvp_update_state\",\n\n  TEAM_LIST_OVERRIDE_STATE = \"team_list_override_state\",\n  TEAM_LIST_UPDATE_STATE = \"team_list_update_state\",\n\n  TEAM_MEMBERS_OVERRIDE_STATE = \"team_members_override_state\",\n  TEAM_MEMBERS_UPDATE_STATE = \"team_members_update_state\",\n\n  FACTION_HISTORY_OVERRIDE_STATE = \"faction_history_override_state\",\n  FACTION_HISTORY_UPDATE_STATE = \"faction_history_update_state\",\n\n  TEAM_OVERRIDE_STATE = \"team_override_state\",\n  TEAM_UPDATE_STATE = \"team_update_state\",\n  TEAM_UPDATE_PUZZLE = \"team_update_puzzle\",\n  TEAM_UPDATE_PUZZLE_STATS = \"team_update_puzzle_stats\",\n  TEAM_UPDATE_BATTLE_GROUP = \"team_update_battle_group\",\n\n  TEAM_BATTLE_OVERRIDE_STATE = \"team_battle_override_state\",\n  TEAM_BATTLE_UPDATE_STATE = \"team_battle_update_state\",\n\n  TEAM_FISH_PUZZLE_OVERRIDE_STATE = \"team_fish_puzzle_override_state\",\n  TEAM_FISH_PUZZLE_SET_NUM_GUESSES_REMAINING = \"team_fish_puzzle_set_num_guesses_remaining\",\n  TEAM_FISH_PUZZLE_ADD_GUESS = \"team_fish_puzzle_add_guess\",\n\n  TEAM_DECKS_OVERRIDE_STATE = \"team_decks_override_state\",\n  TEAM_DECKS_UPDATE_DECK = \"team_decks_update_deck\",\n\n  TEAM_MASTERY_TREE_OVERRIDE_STATE = \"team_mastery_tree_override_state\",\n  TEAM_MASTERY_TREE_UPDATE = \"team_mastery_tree_update\",\n\n  TEAM_PVP_OVERRIDE_STATE = \"team_pvp_override_state\",\n  TEAM_PVP_UPDATE_STATE = \"team_pvp_update_state\",\n\n  TEAM_SPEEDRUN_LEADERBOARD_SUMMARY_OVERRIDE_STATE = \"team_speedrun_leaderboard_summary_override_state\",\n  TEAM_SPEEDRUN_LEADERBOARD_SUMMARY_UPDATE_STATE = \"team_speedrun_leaderboard_summary_update_state\",\n}\n\ntype ServerOverrideStateGlobalUpdate = {\n  type: GlobalUpdateType.SERVER_OVERRIDE_STATE;\n  teamAdminData: { [teamId: string]: ClientTeamAdminDataGlobalState };\n  puzzles: { [puzName: string]: PuzzleData };\n  battleGroups: { [battleGroupName: string]: BattleGroupData };\n  masteries: { [masteryId: string]: { displayName: string } };\n  unclaimedHints: number;\n};\n\ntype ServerAddTeamGlobalUpdate = {\n  type: GlobalUpdateType.SERVER_ADD_TEAM;\n  teamId: string;\n  teamAdminData: ClientTeamAdminDataGlobalState;\n};\n\ntype ServerUpdateTeamGlobalUpdate = {\n  type: GlobalUpdateType.SERVER_UPDATE_TEAM;\n  teamId: string;\n  isHidden?: boolean;\n  isInactive?: boolean;\n  displayName?: string;\n};\n\ntype ServerUnclaimedHintsGlobalUpdate = {\n  type: GlobalUpdateType.SERVER_UNCLAIMED_HINTS;\n  unclaimedHints: number;\n};\n\ntype ServerHealthOverrideStateGlobalUpdate = {\n  type: GlobalUpdateType.SERVER_HEALTH_OVERRIDE_STATE;\n  state: ClientServerHealthGlobalState;\n};\n\ntype ServerHealthUpdateStateGlobalUpdate = {\n  type: GlobalUpdateType.SERVER_HEALTH_UPDATE_STATE;\n  fastSyncMetrics: IntervalMetricsSummary;\n  slowSyncMetrics: IntervalMetricsSummary;\n  checkAnswerMetrics: IntervalMetricsSummary;\n  numAuthsMetrics: IntervalMetricsSummary;\n  numRequestsMetrics: IntervalMetricsSummary;\n\n  teamNumAuthsMetrics: { [teamId: string]: IntervalMetricsSummary };\n  teamNumRequestsMetrics: { [teamId: string]: IntervalMetricsSummary };\n\n  fastSyncQueueLength: number;\n  numActivePeriodicTasksHandlers: number;\n  numPendingSubmissionTasks: number;\n  numCompletedRoomsToSync: number;\n  teamInitQueueLength: number;\n  numActiveConns: number;\n  userTimeUsage: number;\n  systemTimeUsage: number;\n  dirtyStateUpd: ServerDirtyStateUpdate;\n};\n\ntype BigBoardOverrideStateGlobalUpdate = {\n  type: GlobalUpdateType.BIG_BOARD_OVERRIDE_STATE;\n  state: ClientBigBoardGlobalState;\n};\n\ntype BigBoardUpdateStateGlobalUpdate = {\n  type: GlobalUpdateType.BIG_BOARD_UPDATE_STATE;\n  addTeams?: { [teamId: string]: BigBoardTeamState };\n  updTeams?: { [teamId: string]: BigBoardTeamUpdate };\n};\n\ntype PvPOverrideStateGlobalUpdate = {\n  type: GlobalUpdateType.PVP_OVERRIDE_STATE;\n  state: ClientPvPGlobalState;\n};\n\ntype PvPUpdateStateGlobalUpdate = {\n  type: GlobalUpdateType.PVP_UPDATE_STATE;\n  ringTeamsToAdd?: string[];\n  ringTeamsToDelete?: string[];\n};\n\ntype TeamListOverrideStateGlobalUpdate = {\n  type: GlobalUpdateType.TEAM_LIST_OVERRIDE_STATE;\n  teams: { [teamId: string]: TeamSummaryState };\n};\n\ntype TeamListUpdateStateGlobalUpdate = {\n  type: GlobalUpdateType.TEAM_LIST_UPDATE_STATE;\n  addTeams?: { [teamId: string]: TeamSummaryState };\n  removeTeams?: { [teamId: string]: true };\n  updTeams?: { [teamId: string]: TeamSummaryUpdate };\n};\n\ntype TeamMembersOverrideStateGlobalUpdate = {\n  type: GlobalUpdateType.TEAM_MEMBERS_OVERRIDE_STATE;\n  state: ClientTeamMembersGlobalState;\n};\n\ntype TeamMembersUpdateStateGlobalUpdate = {\n  type: GlobalUpdateType.TEAM_MEMBERS_UPDATE_STATE;\n  members: string[];\n};\n\ntype FactionHistoryOverrideStateGlobalUpdate = {\n  type: GlobalUpdateType.FACTION_HISTORY_OVERRIDE_STATE;\n  factionHistory: { [key: string]: number };\n};\n\ntype FactionHistoryUpdateStateGlobalUpdate = {\n  type: GlobalUpdateType.FACTION_HISTORY_UPDATE_STATE;\n  factionHistory: { [key: string]: number };\n};\n\ntype TeamOverrideStateGlobalUpdate = {\n  type: GlobalUpdateType.TEAM_OVERRIDE_STATE;\n  state: ClientTeamGlobalState;\n};\n\ntype TeamUpdateStateGlobalUpdate = {\n  type: GlobalUpdateType.TEAM_UPDATE_STATE;\n  displayName?: string;\n  faction?: Faction | null;\n  factionScoreContributions?: {\n    [faction in Faction]?: number;\n  };\n  factionScores?: {\n    [faction in Faction]?: number;\n  };\n  /** Solve times to set/unset. */\n  solveTimes?: { [puzName: string]: number | null };\n  /** Canonical answers to reveal. */\n  answers?: { [puzName: string]: string };\n  unlocks?: { [puzName: string]: ClientPuzzleGlobalState | null };\n  battleGroupUnlocks?: { [puzName: string]: ClientBattleGroupGlobalState };\n  cardUnlocks?: { [cardName: string]: ClientCardUnlockGlobalState | null };\n  speedrunTimes?: { [puzName: string]: number };\n  masteries?: {\n    [masteryId: string]: {\n      displayName: string;\n      effectText: string;\n    } | null;\n  };\n  /** Masteries to enable or disable. */\n  enabledMasteries?: { [masteryId: string]: boolean };\n  hintsInfo?: TeamHintsGlobalState;\n};\n\ntype TeamUpdatePuzzleGlobalUpdate = {\n  type: GlobalUpdateType.TEAM_UPDATE_PUZZLE;\n  puzName: string;\n  roomStatus?: GlobalStateBattleRoomStatus;\n  isNew?: boolean;\n};\n\ntype TeamUpdatePuzzleStatsGlobalUpdate = {\n  type: GlobalUpdateType.TEAM_UPDATE_PUZZLE_STATS;\n  stats: { [battleGroupName: string]: GlobalStatePuzzleStats };\n};\n\ntype TeamUpdateBattleGroupGlobalUpdate = {\n  type: GlobalUpdateType.TEAM_UPDATE_BATTLE_GROUP;\n  battleGroupName: string;\n  postBattleDialogue?: string;\n};\n\ntype TeamBattleOverrideStateGlobalUpdate = {\n  type: GlobalUpdateType.TEAM_BATTLE_OVERRIDE_STATE;\n  state: ClientTeamBattleGlobalState;\n};\n\nexport type TeamBattleUpdateStateGlobalUpdate = {\n  type: GlobalUpdateType.TEAM_BATTLE_UPDATE_STATE;\n  selectedPuzName?: string | null;\n  roomPuzName?: string | null;\n  selectedDeckSlot?: number;\n  lockedDeckSelection?: DeckSelection | null;\n  activeGame?: ClientActiveGameGlobalState | null;\n  errata?: { [erratumId: string]: ClientErratum };\n  checkpointSummaries?: { [slot: number]: CheckpointSummary };\n};\n\ntype TeamFishPuzzleOverrideStateGlobalUpdate = {\n  type: GlobalUpdateType.TEAM_FISH_PUZZLE_OVERRIDE_STATE;\n  state: ClientTeamFishPuzzleGlobalState;\n};\n\ntype TeamFishPuzzleSetNumGuessesRemainingGlobalUpdate = {\n  type: GlobalUpdateType.TEAM_FISH_PUZZLE_SET_NUM_GUESSES_REMAINING;\n  numGuessesRemaining: number;\n};\n\ntype TeamFishPuzzleAddSubmissionGlobalUpdate = {\n  type: GlobalUpdateType.TEAM_FISH_PUZZLE_ADD_GUESS;\n  submission: ClientAnswerSubmissionGlobalState;\n};\n\ntype TeamDecksOverrideStateGlobalUpdate = {\n  type: GlobalUpdateType.TEAM_DECKS_OVERRIDE_STATE;\n  state: ClientTeamDecksGlobalState;\n};\n\ntype TeamDecksUpdateDeckGlobalUpdate = {\n  type: GlobalUpdateType.TEAM_DECKS_UPDATE_DECK;\n  slot: number;\n  deckUpd: DeckUpdate;\n};\n\ntype TeamMasteryTreeOverrideStateGlobalUpdate = {\n  type: GlobalUpdateType.TEAM_MASTERY_TREE_OVERRIDE_STATE;\n  state: ClientTeamMasteryTreeGlobalState;\n};\n\ntype TeamMasteryTreeUpdateGlobalUpdate = {\n  type: GlobalUpdateType.TEAM_MASTERY_TREE_UPDATE;\n  masteryTreeUpd?: MasteryTreeUpdate;\n};\n\ntype TeamPvPOverrideStateGlobalUpdate = {\n  type: GlobalUpdateType.TEAM_PVP_OVERRIDE_STATE;\n  state: ClientTeamPvPGlobalState;\n};\n\ntype TeamPvPUpdateStateGlobalUpdate = {\n  type: GlobalUpdateType.TEAM_PVP_UPDATE_STATE;\n  outgoingRequestsToAdd?: PvPRequest[];\n  outgoingRequestsToDelete?: string[];\n  incomingRequestsToAdd?: PvPRequest[];\n  incomingRequestsToDelete?: string[];\n  blockedTeamsToAdd?: string[];\n  blockedTeamsToDelete?: string[];\n  blockedByTeamsToAdd?: string[];\n  blockedByTeamsToDelete?: string[];\n  clearOutgoingRequests?: boolean;\n  clearIncomingRequests?: boolean;\n};\n\ntype TeamSpeedrunLeaderboardSummaryOverrideStateGlobalUpdate = {\n  type: GlobalUpdateType.TEAM_SPEEDRUN_LEADERBOARD_SUMMARY_OVERRIDE_STATE;\n  state: ClientTeamSpeedrunLeaderboardSummaryGlobalState;\n};\n\ntype TeamSpeedrunLeaderboardSummaryUpdateStateGlobalUpdate = {\n  type: GlobalUpdateType.TEAM_SPEEDRUN_LEADERBOARD_SUMMARY_UPDATE_STATE;\n  speedrunRecordsToAdd?: ClientSpeedrunTimeRecord[];\n  /**\n   * Team IDs of speedrun records to remove, e.g. for teams\n   * getting hidden.\n   */\n  speedrunRecordsToRemove?: string[];\n  teamNameDisplayUpds?: { [teamId: string]: TeamNameDisplayDataUpdate };\n  speedrunRank?: number;\n};\n\nexport type GlobalUpdate =\n  | ServerOverrideStateGlobalUpdate\n  | ServerAddTeamGlobalUpdate\n  | ServerUpdateTeamGlobalUpdate\n  | ServerUnclaimedHintsGlobalUpdate\n  | ServerHealthOverrideStateGlobalUpdate\n  | ServerHealthUpdateStateGlobalUpdate\n  | BigBoardOverrideStateGlobalUpdate\n  | BigBoardUpdateStateGlobalUpdate\n  | PvPOverrideStateGlobalUpdate\n  | PvPUpdateStateGlobalUpdate\n  | TeamListOverrideStateGlobalUpdate\n  | TeamListUpdateStateGlobalUpdate\n  | TeamMembersOverrideStateGlobalUpdate\n  | TeamMembersUpdateStateGlobalUpdate\n  | FactionHistoryOverrideStateGlobalUpdate\n  | FactionHistoryUpdateStateGlobalUpdate\n  | TeamOverrideStateGlobalUpdate\n  | TeamUpdateStateGlobalUpdate\n  | TeamUpdatePuzzleGlobalUpdate\n  | TeamUpdatePuzzleStatsGlobalUpdate\n  | TeamUpdateBattleGroupGlobalUpdate\n  | TeamBattleOverrideStateGlobalUpdate\n  | TeamBattleUpdateStateGlobalUpdate\n  | TeamFishPuzzleOverrideStateGlobalUpdate\n  | TeamFishPuzzleSetNumGuessesRemainingGlobalUpdate\n  | TeamFishPuzzleAddSubmissionGlobalUpdate\n  | TeamDecksOverrideStateGlobalUpdate\n  | TeamDecksUpdateDeckGlobalUpdate\n  | TeamMasteryTreeOverrideStateGlobalUpdate\n  | TeamMasteryTreeUpdateGlobalUpdate\n  | TeamPvPOverrideStateGlobalUpdate\n  | TeamPvPUpdateStateGlobalUpdate\n  | TeamSpeedrunLeaderboardSummaryOverrideStateGlobalUpdate\n  | TeamSpeedrunLeaderboardSummaryUpdateStateGlobalUpdate;\n\n/** The verb to use to communicate that a battle group was completed. */\nexport const getCompletionVerb = (\n  battleGroup: ClientBattleGroupGlobalState\n): string => {\n  if (battleGroup.battleGroupName === PUZ_NAME_FINAL_BATTLE) return \"Defeated\";\n  if (battleGroup.isLegendary ?? false) return \"Befriended\";\n  return \"Completed\";\n};\n\nexport const speedrunTimeToString = (\n  speedrunTime: number,\n  omitMs?: boolean\n): string => {\n  const hours = Math.floor(speedrunTime / 1000 / 60 / 60);\n  const minutes = Math.floor(speedrunTime / 1000 / 60) % 60;\n  const seconds = Math.floor(speedrunTime / 1000) % 60;\n  const ms = Math.floor(speedrunTime) % 1000;\n  const omitHours = hours === 0;\n  const omitMinutes = omitHours && minutes === 0;\n  omitMs ??= !omitHours;\n  const hoursStr = hours.toString();\n  const minutesStr = minutes.toString().padStart(omitHours ? 1 : 2, \"0\");\n  const secondsStr = seconds.toString().padStart(omitMinutes ? 1 : 2, \"0\");\n  const msStr = ms.toString().padStart(3, \"0\");\n  return `${omitHours ? \"\" : `${hoursStr}h`}${\n    omitMinutes ? \"\" : `${minutesStr}m`\n  }${secondsStr}${omitMs ? \"\" : `.${msStr}`}s`;\n};\n\n/**\n * Utility to help with maintaining leaderboard lists.\n * Each team should only be present in the leaderboard at most once.\n */\nexport class RankedLeaderboard<T> {\n  /**\n   * Get the key for obj, which is used to check if a new entry\n   * should overwrite an old one, or to remove entries.\n   */\n  getKeyFunc: (obj: T) => string;\n  compareFunc: (obj1: T, obj2: T) => number;\n  /** Sorted list of records from best to worst. */\n  sortedList: T[];\n\n  constructor(\n    getKeyFunc: (obj: T) => string,\n    compareFunc: (obj1: T, obj2: T) => number,\n    sortedList?: T[]\n  ) {\n    this.getKeyFunc = getKeyFunc;\n    this.compareFunc = compareFunc;\n    this.sortedList = sortedList ?? [];\n  }\n\n  /**\n   * Removes an entry with the provided key, if present.\n   * If an object was removed, returns the removed object and its\n   * original position.\n   */\n  remove(objKey: string): {\n    obj: T;\n    oldIndex: number;\n  } | null {\n    const oldIndex = this.sortedList.findIndex(\n      (listObj) => objKey === this.getKeyFunc(listObj)\n    );\n    if (oldIndex === -1) return null;\n    const obj = this.sortedList[oldIndex];\n    this.sortedList.splice(oldIndex, 1);\n    return { obj, oldIndex };\n  }\n\n  /**\n   * Insert a new record. If warnOnRegress is set, an error message will\n   * be printed if we attempt to insert a regression.\n   */\n  insert(\n    obj: T,\n    warnOnRegress: boolean\n  ): {\n    /** The index of the removed record, if any. */\n    oldIndex: number | null;\n    /** The index of the inserted record. */\n    newIndex: number;\n  } {\n    const objKey = this.getKeyFunc(obj);\n    // Remove any old object from the list.\n    const removeRes = this.remove(objKey);\n    if (removeRes !== null) {\n      const { oldIndex, obj: oldObj } = removeRes;\n      // We shouldn't be trying to insert regressions, but check\n      // to be safe anyway.\n      if (this.compareFunc(obj, oldObj) >= 0) {\n        if (warnOnRegress)\n          console.error(\n            `tried to insert a regression: old ${JSON.stringify(\n              oldObj\n            )}, new ${JSON.stringify(obj)}`\n          );\n        // Put the old object back in.\n        this.sortedList.splice(oldIndex, 0, oldObj);\n        return {\n          oldIndex,\n          newIndex: oldIndex,\n        };\n      }\n    }\n\n    const newIndex = ((): number => {\n      for (let i = 0; i < this.sortedList.length; i++) {\n        // Break ties by inserting at the end of the group\n        if (this.compareFunc(obj, this.sortedList[i]) < 0) {\n          this.sortedList.splice(i, 0, obj);\n          return i;\n        }\n      }\n\n      // If we get here, then the element goes at the end of the list.\n      this.sortedList.push(obj);\n      return this.sortedList.length - 1;\n    })();\n\n    return {\n      oldIndex: removeRes === null ? null : removeRes.oldIndex,\n      newIndex,\n    };\n  }\n}\n\nexport const applyGlobalUpdate = (\n  globalState: ClientGlobalState,\n  upd: GlobalUpdate\n): void => {\n  switch (upd.type) {\n    case GlobalUpdateType.SERVER_OVERRIDE_STATE: {\n      const {\n        puzzles,\n        battleGroups,\n        masteries,\n        teamAdminData,\n        unclaimedHints,\n      } = upd;\n      globalState.puzzles = puzzles;\n      globalState.battleGroups = battleGroups;\n      globalState.masteries = masteries;\n      globalState.teamAdminData = JSON.parse(JSON.stringify(teamAdminData)) as {\n        [teamId: string]: ClientTeamAdminDataGlobalState;\n      };\n      globalState.unclaimedHints = unclaimedHints;\n      break;\n    }\n    case GlobalUpdateType.SERVER_ADD_TEAM: {\n      const { teamId, teamAdminData } = upd;\n      globalState.teamAdminData[teamId] = teamAdminData;\n      break;\n    }\n    case GlobalUpdateType.SERVER_UPDATE_TEAM: {\n      const { teamId, isHidden, isInactive, displayName } = upd;\n      const teamAdminData = globalState.teamAdminData[teamId];\n      if (teamAdminData === undefined)\n        throw new Error(\"received admin data update for non-existent team\");\n      if (isHidden !== undefined) teamAdminData.isHidden = isHidden;\n      if (isInactive !== undefined) teamAdminData.isInactive = isInactive;\n      if (displayName !== undefined) teamAdminData.displayName = displayName;\n      break;\n    }\n    case GlobalUpdateType.SERVER_UNCLAIMED_HINTS: {\n      globalState.unclaimedHints = upd.unclaimedHints;\n      break;\n    }\n    case GlobalUpdateType.SERVER_HEALTH_OVERRIDE_STATE: {\n      const { state } = upd;\n      globalState.serverHealth = JSON.parse(\n        JSON.stringify(state)\n      ) as ClientServerHealthGlobalState;\n      break;\n    }\n    case GlobalUpdateType.SERVER_HEALTH_UPDATE_STATE: {\n      const {\n        fastSyncMetrics,\n        slowSyncMetrics,\n        checkAnswerMetrics,\n        numAuthsMetrics,\n        numRequestsMetrics,\n        teamNumAuthsMetrics,\n        teamNumRequestsMetrics,\n        fastSyncQueueLength,\n        numActivePeriodicTasksHandlers,\n        numPendingSubmissionTasks,\n        numCompletedRoomsToSync,\n        teamInitQueueLength,\n        numActiveConns,\n        userTimeUsage,\n        systemTimeUsage,\n        dirtyStateUpd,\n      } = upd;\n      const { serverHealth } = globalState;\n      if (serverHealth === null)\n        throw new Error(\"expect to have subscribed server health state\");\n      serverHealth.fastSyncMetrics = fastSyncMetrics;\n      serverHealth.slowSyncMetrics = slowSyncMetrics;\n      serverHealth.checkAnswerMetrics = checkAnswerMetrics;\n      serverHealth.numAuthsMetrics = numAuthsMetrics;\n      serverHealth.numRequestsMetrics = numRequestsMetrics;\n      Object.assign(serverHealth.teamNumAuthsMetrics, teamNumAuthsMetrics);\n      Object.assign(\n        serverHealth.teamNumRequestsMetrics,\n        teamNumRequestsMetrics\n      );\n      serverHealth.fastSyncQueueLength = fastSyncQueueLength;\n      serverHealth.numActivePeriodicTasksHandlers =\n        numActivePeriodicTasksHandlers;\n      serverHealth.numPendingSubmissionTasks = numPendingSubmissionTasks;\n      serverHealth.numCompletedRoomsToSync = numCompletedRoomsToSync;\n      serverHealth.teamInitQueueLength = teamInitQueueLength;\n      serverHealth.numActiveConns = numActiveConns;\n      serverHealth.userTimeUsage = userTimeUsage;\n      serverHealth.systemTimeUsage = systemTimeUsage;\n      updateServerDirtyState(serverHealth.dirtyState, dirtyStateUpd);\n      break;\n    }\n    case GlobalUpdateType.BIG_BOARD_OVERRIDE_STATE: {\n      const { state } = upd;\n      globalState.bigBoard = JSON.parse(\n        JSON.stringify(state)\n      ) as ClientBigBoardGlobalState;\n      break;\n    }\n    case GlobalUpdateType.BIG_BOARD_UPDATE_STATE: {\n      const { addTeams, updTeams } = upd;\n      const { bigBoard } = globalState;\n      if (bigBoard === null)\n        throw new Error(\"expect to have subscribed big board state\");\n      Object.assign(bigBoard.teams, addTeams ?? {});\n      for (const [teamId, teamUpd] of Object.entries(updTeams ?? {})) {\n        const teamState = bigBoard.teams[teamId];\n        if (teamState === undefined)\n          throw new Error(\"received big board update for non-existent team\");\n        updateBigBoardTeamState(teamState, teamUpd);\n      }\n      break;\n    }\n    case GlobalUpdateType.PVP_OVERRIDE_STATE: {\n      const { state } = upd;\n      globalState.pvp = JSON.parse(\n        JSON.stringify(state)\n      ) as ClientPvPGlobalState;\n      break;\n    }\n    case GlobalUpdateType.PVP_UPDATE_STATE: {\n      const { ringTeamsToAdd, ringTeamsToDelete } = upd;\n      const { pvp } = globalState;\n      if (pvp === null) throw new Error(\"expect to have subscribed pvp state\");\n      pvp.ring.push(...(ringTeamsToAdd ?? []));\n      if (ringTeamsToDelete !== undefined) {\n        const ringTeamsToDeleteSet = new Set(ringTeamsToDelete);\n        pvp.ring = pvp.ring.filter(\n          (teamId) => !ringTeamsToDeleteSet.has(teamId)\n        );\n      }\n      break;\n    }\n    case GlobalUpdateType.TEAM_LIST_OVERRIDE_STATE: {\n      const { teams } = upd;\n      globalState.teams = JSON.parse(JSON.stringify(teams)) as {\n        [teamId: string]: TeamSummaryState;\n      };\n      break;\n    }\n    case GlobalUpdateType.TEAM_LIST_UPDATE_STATE: {\n      const { addTeams, removeTeams, updTeams } = upd;\n      const { teams } = globalState;\n      Object.assign(teams, addTeams ?? {});\n      for (const teamId of Object.keys(removeTeams ?? {})) {\n        delete teams[teamId];\n      }\n      for (const [teamId, teamUpd] of Object.entries(updTeams ?? {})) {\n        const teamState = teams[teamId];\n        if (teamState === undefined)\n          throw new Error(\"received team list update for non-existent team\");\n        updateTeamSummary(teamState, teamUpd);\n      }\n      break;\n    }\n    case GlobalUpdateType.TEAM_MEMBERS_OVERRIDE_STATE: {\n      const { state } = upd;\n      globalState.subscribedTeamMembers = JSON.parse(\n        JSON.stringify(state)\n      ) as ClientTeamMembersGlobalState;\n      break;\n    }\n    case GlobalUpdateType.TEAM_MEMBERS_UPDATE_STATE: {\n      const { members } = upd;\n      const { subscribedTeamMembers } = globalState;\n      if (subscribedTeamMembers === null)\n        throw new Error(\"expect to have subscribed team members state\");\n      subscribedTeamMembers.members = members;\n      break;\n    }\n    case GlobalUpdateType.FACTION_HISTORY_OVERRIDE_STATE: {\n      globalState.factionHistory = { ...upd.factionHistory };\n      break;\n    }\n    case GlobalUpdateType.FACTION_HISTORY_UPDATE_STATE: {\n      Object.assign(globalState.factionHistory, upd.factionHistory);\n      break;\n    }\n    case GlobalUpdateType.TEAM_OVERRIDE_STATE: {\n      const { state } = upd;\n      globalState.subscribedTeam = JSON.parse(\n        JSON.stringify(state)\n      ) as ClientTeamGlobalState;\n      break;\n    }\n    case GlobalUpdateType.TEAM_UPDATE_STATE: {\n      const {\n        displayName,\n        faction,\n        factionScoreContributions,\n        factionScores,\n        solveTimes,\n        answers,\n        unlocks,\n        battleGroupUnlocks,\n        cardUnlocks: cardUnlocksUpdates,\n        speedrunTimes: speedrunTimesUpdates,\n        masteries: masteriesUpdates,\n        enabledMasteries,\n        hintsInfo,\n      } = upd;\n      const { subscribedTeam } = globalState;\n      if (subscribedTeam === null)\n        throw new Error(\"expect to have subscribed team state\");\n      const { puzzles, battleGroups, cardUnlocks, masteries } = subscribedTeam;\n      if (displayName !== undefined) subscribedTeam.displayName = displayName;\n      if (faction !== undefined) subscribedTeam.faction = faction;\n      Object.assign(\n        subscribedTeam.factionScoreContributions,\n        factionScoreContributions ?? {}\n      );\n      if (factionScores !== undefined) {\n        Object.assign(subscribedTeam.factionScores, factionScores);\n      }\n      for (const [puzName, puzData] of Object.entries(unlocks ?? {})) {\n        if (puzData === null) delete puzzles[puzName];\n        else puzzles[puzName] = puzData;\n      }\n      for (const battleGroup of Object.values(battleGroupUnlocks ?? {})) {\n        battleGroups[battleGroup.battleGroupName] = battleGroup;\n      }\n      for (const [puzName, solveTime] of Object.entries(solveTimes ?? {})) {\n        if (solveTime === null) {\n          if (puzzles[puzName] !== undefined) {\n            delete puzzles[puzName].solveTime;\n            // Also delete the answer if any, since this is effectively\n            // telling us to unsolve the puzzle.\n            delete puzzles[puzName].answer;\n          }\n        } else {\n          if (puzzles[puzName] !== undefined)\n            puzzles[puzName].solveTime = solveTime;\n        }\n      }\n      for (const [puzName, answer] of Object.entries(answers ?? {})) {\n        if (puzzles[puzName] !== undefined) puzzles[puzName].answer = answer;\n      }\n      for (const [cardName, cardUnlock] of Object.entries(\n        cardUnlocksUpdates ?? {}\n      )) {\n        if (cardUnlock === null) delete cardUnlocks[cardName];\n        else cardUnlocks[cardName] = cardUnlock;\n      }\n      for (const [puzName, speedrunTime] of Object.entries(\n        speedrunTimesUpdates ?? {}\n      )) {\n        puzzles[puzName].speedrunTime = speedrunTime;\n      }\n      for (const [masteryId, mastery] of Object.entries(\n        masteriesUpdates ?? {}\n      )) {\n        if (mastery === null) {\n          delete masteries[masteryId].displayName;\n          delete masteries[masteryId].effectText;\n        } else {\n          const { displayName, effectText } = mastery;\n          masteries[masteryId] = {\n            ...masteries[masteryId],\n            displayName,\n            effectText,\n          };\n        }\n      }\n      for (const [masteryId, isEnabled] of Object.entries(\n        enabledMasteries ?? {}\n      )) {\n        masteries[masteryId].isEnabled = isEnabled;\n      }\n      if (hintsInfo !== undefined)\n        Object.assign(subscribedTeam.hintsInfo, hintsInfo);\n      break;\n    }\n    case GlobalUpdateType.TEAM_UPDATE_PUZZLE: {\n      const { puzName, roomStatus, isNew } = upd;\n      const { subscribedTeam } = globalState;\n      if (subscribedTeam === null)\n        throw new Error(\"expect to have subscribed team state\");\n      const puzData = subscribedTeam.puzzles[puzName];\n      if (puzData === undefined)\n        throw new Error(`trying to update ${puzName} but it isn't unlocked`);\n      if (roomStatus !== undefined) {\n        if (roomStatus === GlobalStateBattleRoomStatus.NONE)\n          delete puzData.roomStatus;\n        else puzData.roomStatus = roomStatus;\n      }\n      if (isNew !== undefined) {\n        if (isNew) puzData.isNew = true;\n        else delete puzData.isNew;\n      }\n      break;\n    }\n    case GlobalUpdateType.TEAM_UPDATE_PUZZLE_STATS: {\n      const { stats } = upd;\n      const { subscribedTeam } = globalState;\n      if (subscribedTeam === null)\n        throw new Error(\"expect to have subscribed team state\");\n      for (const [battleGroupName, puzStats] of Object.entries(stats)) {\n        const battleGroup = subscribedTeam.battleGroups[battleGroupName];\n        if (battleGroup === undefined)\n          throw new Error(\"expect to only get updates for unlocked puzzles\");\n        battleGroup.stats = puzStats;\n      }\n      break;\n    }\n    case GlobalUpdateType.TEAM_UPDATE_BATTLE_GROUP: {\n      const { battleGroupName, postBattleDialogue } = upd;\n      const { subscribedTeam } = globalState;\n      if (subscribedTeam === null)\n        throw new Error(\"expect to have subscribed team state\");\n      const battleGroup = subscribedTeam.battleGroups[battleGroupName];\n      if (battleGroup === undefined)\n        throw new Error(\n          `trying to update ${battleGroup} but it isn't unlocked`\n        );\n      if (postBattleDialogue !== undefined) {\n        battleGroup.postBattleDialogue = postBattleDialogue;\n      }\n      break;\n    }\n    case GlobalUpdateType.TEAM_BATTLE_OVERRIDE_STATE: {\n      const { state } = upd;\n      globalState.subscribedTeamBattle = JSON.parse(\n        JSON.stringify(state)\n      ) as ClientTeamBattleGlobalState;\n      break;\n    }\n    case GlobalUpdateType.TEAM_BATTLE_UPDATE_STATE: {\n      const {\n        selectedPuzName,\n        roomPuzName,\n        selectedDeckSlot,\n        lockedDeckSelection,\n        activeGame,\n        errata,\n        checkpointSummaries,\n      } = upd;\n      const subscribedTeamBattle = globalState.subscribedTeamBattle;\n      if (subscribedTeamBattle === null)\n        throw new Error(\"expect to have subscribed team battle state\");\n      if (selectedPuzName !== undefined)\n        subscribedTeamBattle.selectedPuzName = selectedPuzName;\n      if (roomPuzName !== undefined)\n        subscribedTeamBattle.roomPuzName = roomPuzName;\n      if (selectedDeckSlot !== undefined)\n        subscribedTeamBattle.selectedDeckSlot = selectedDeckSlot;\n      if (lockedDeckSelection !== undefined)\n        subscribedTeamBattle.lockedDeckSelection = lockedDeckSelection;\n      if (activeGame !== undefined)\n        subscribedTeamBattle.activeGame = activeGame;\n      if (errata !== undefined) subscribedTeamBattle.errata = errata;\n      if (checkpointSummaries !== undefined)\n        subscribedTeamBattle.checkpointSummaries = checkpointSummaries;\n      break;\n    }\n    case GlobalUpdateType.TEAM_FISH_PUZZLE_OVERRIDE_STATE: {\n      const { state } = upd;\n      const { teamId, puzName, numGuessesRemaining, previousGuesses } = state;\n      // This is not a true override state, since we need to\n      // merge with data from Django.\n      const allGuesses =\n        globalState.subscribedTeamFishPuzzle !== null &&\n        globalState.subscribedTeamFishPuzzle.teamId === teamId &&\n        globalState.subscribedTeamFishPuzzle.puzName === puzName\n          ? globalState.subscribedTeamFishPuzzle.previousGuesses\n          : [];\n      for (const guess of previousGuesses) {\n        if (\n          !allGuesses.some(\n            (existingSubmission) =>\n              existingSubmission.submittedAnswer === guess.submittedAnswer\n          )\n        ) {\n          allGuesses.push(guess);\n        }\n      }\n      allGuesses.sort((guess1, guess2) => guess2.timestamp - guess1.timestamp);\n      globalState.subscribedTeamFishPuzzle = {\n        ...state,\n        previousGuesses: allGuesses,\n      };\n      break;\n    }\n    case GlobalUpdateType.TEAM_FISH_PUZZLE_SET_NUM_GUESSES_REMAINING: {\n      const subscribedTeamFishPuzzle = globalState.subscribedTeamFishPuzzle;\n      if (subscribedTeamFishPuzzle === null)\n        throw new Error(\"expect to have subscribed team fish puzzle state\");\n      subscribedTeamFishPuzzle.numGuessesRemaining = upd.numGuessesRemaining;\n      break;\n    }\n    case GlobalUpdateType.TEAM_FISH_PUZZLE_ADD_GUESS: {\n      const { submission } = upd;\n      const subscribedTeamFishPuzzle = globalState.subscribedTeamFishPuzzle;\n      if (subscribedTeamFishPuzzle === null)\n        throw new Error(\"expect to have subscribed team fish puzzle state\");\n      const { previousGuesses } = subscribedTeamFishPuzzle;\n      if (\n        !previousGuesses.some(\n          (existingSubmission) =>\n            existingSubmission.submittedAnswer === submission.submittedAnswer\n        )\n      ) {\n        previousGuesses.push(submission);\n      }\n      previousGuesses.sort(\n        (guess1, guess2) => guess2.timestamp - guess1.timestamp\n      );\n      break;\n    }\n    case GlobalUpdateType.TEAM_DECKS_OVERRIDE_STATE: {\n      const { state } = upd;\n      globalState.subscribedTeamDecks = JSON.parse(\n        JSON.stringify(state)\n      ) as ClientTeamDecksGlobalState;\n      break;\n    }\n    case GlobalUpdateType.TEAM_DECKS_UPDATE_DECK: {\n      const { slot, deckUpd } = upd;\n      const { subscribedTeamDecks } = globalState;\n      if (subscribedTeamDecks === null)\n        throw new Error(\"expect to have subscribed team decks state\");\n      const deck = (() => {\n        const existingDeck = subscribedTeamDecks.decks[slot];\n        if (existingDeck !== null) return existingDeck;\n        const newDeck = createNewDeck(slot);\n        subscribedTeamDecks.decks[slot] = newDeck;\n        return newDeck;\n      })();\n      applyDeckUpdate(deck, deckUpd);\n      break;\n    }\n    case GlobalUpdateType.TEAM_MASTERY_TREE_OVERRIDE_STATE: {\n      const { state } = upd;\n      globalState.subscribedTeamMasteryTree = JSON.parse(\n        JSON.stringify(state)\n      ) as ClientTeamMasteryTreeGlobalState;\n      break;\n    }\n    case GlobalUpdateType.TEAM_MASTERY_TREE_UPDATE: {\n      const { masteryTreeUpd } = upd;\n      const { subscribedTeamMasteryTree } = globalState;\n      if (subscribedTeamMasteryTree === null)\n        throw new Error(\"expect to have subscribed team mastery tree state\");\n      if (masteryTreeUpd !== undefined) {\n        const { masteryTree } = subscribedTeamMasteryTree;\n        applyMasteryTreeUpdate(masteryTree, masteryTreeUpd);\n      }\n      break;\n    }\n    case GlobalUpdateType.TEAM_PVP_OVERRIDE_STATE: {\n      const { state } = upd;\n      globalState.subscribedTeamPvP = JSON.parse(\n        JSON.stringify(state)\n      ) as ClientTeamPvPGlobalState;\n      break;\n    }\n    case GlobalUpdateType.TEAM_PVP_UPDATE_STATE: {\n      const {\n        outgoingRequestsToAdd,\n        outgoingRequestsToDelete,\n        incomingRequestsToAdd,\n        incomingRequestsToDelete,\n        blockedTeamsToAdd,\n        blockedTeamsToDelete,\n        blockedByTeamsToAdd,\n        blockedByTeamsToDelete,\n        clearOutgoingRequests = false,\n        clearIncomingRequests = false,\n      } = upd;\n      const { subscribedTeamPvP } = globalState;\n      if (subscribedTeamPvP === null)\n        throw new Error(\"expect to have subscribed team pvp state\");\n\n      for (const pvpReq of outgoingRequestsToAdd ?? []) {\n        subscribedTeamPvP.outgoingRequests[pvpReq.toTeamId] = pvpReq;\n      }\n      for (const teamId of outgoingRequestsToDelete ?? []) {\n        delete subscribedTeamPvP.outgoingRequests[teamId];\n      }\n      for (const pvpReq of incomingRequestsToAdd ?? []) {\n        subscribedTeamPvP.incomingRequests[pvpReq.fromTeamId] = pvpReq;\n      }\n      for (const teamId of incomingRequestsToDelete ?? []) {\n        delete subscribedTeamPvP.incomingRequests[teamId];\n      }\n      for (const teamId of blockedTeamsToAdd ?? []) {\n        subscribedTeamPvP.blockedTeams[teamId] = true;\n      }\n      for (const teamId of blockedTeamsToDelete ?? []) {\n        delete subscribedTeamPvP.blockedTeams[teamId];\n      }\n      for (const teamId of blockedByTeamsToAdd ?? []) {\n        subscribedTeamPvP.blockedByTeams[teamId] = true;\n      }\n      for (const teamId of blockedByTeamsToDelete ?? []) {\n        delete subscribedTeamPvP.blockedByTeams[teamId];\n      }\n      if (clearOutgoingRequests) subscribedTeamPvP.outgoingRequests = {};\n      if (clearIncomingRequests) subscribedTeamPvP.incomingRequests = {};\n      break;\n    }\n    case GlobalUpdateType.TEAM_SPEEDRUN_LEADERBOARD_SUMMARY_OVERRIDE_STATE: {\n      const { state } = upd;\n      globalState.subscribedTeamSpeedrunLeaderboardSummary = JSON.parse(\n        JSON.stringify(state)\n      ) as ClientTeamSpeedrunLeaderboardSummaryGlobalState;\n      break;\n    }\n    case GlobalUpdateType.TEAM_SPEEDRUN_LEADERBOARD_SUMMARY_UPDATE_STATE: {\n      const {\n        speedrunRecordsToAdd,\n        speedrunRecordsToRemove,\n        teamNameDisplayUpds,\n        speedrunRank,\n      } = upd;\n\n      const subscribedTeamSpeedrunLeaderboardSummary =\n        globalState.subscribedTeamSpeedrunLeaderboardSummary;\n      if (subscribedTeamSpeedrunLeaderboardSummary === null)\n        throw new Error(\n          \"expect to have subscribed speedrun leaderboard summary state\"\n        );\n\n      const leaderboard = new RankedLeaderboard(\n        (record) => record.teamData.teamId,\n        (record1, record2) => record1.speedrunTime - record2.speedrunTime,\n        subscribedTeamSpeedrunLeaderboardSummary.speedrunLeaderboardSummary ??\n          []\n      );\n      for (const teamId of speedrunRecordsToRemove ?? []) {\n        leaderboard.remove(teamId);\n      }\n      for (const record of speedrunRecordsToAdd ?? []) {\n        leaderboard.insert(record, false);\n      }\n      for (const [teamId, teamNameDisplayUpd] of Object.entries(\n        teamNameDisplayUpds ?? {}\n      )) {\n        for (const record of leaderboard.sortedList) {\n          if (record.teamData.teamId === teamId) {\n            updateTeamNameDisplayData(record.teamData, teamNameDisplayUpd);\n            break;\n          }\n        }\n      }\n      subscribedTeamSpeedrunLeaderboardSummary.speedrunLeaderboardSummary =\n        leaderboard.sortedList;\n\n      if (speedrunRank !== undefined)\n        subscribedTeamSpeedrunLeaderboardSummary.speedrunRank = speedrunRank;\n    }\n  }\n};\n","import { z } from \"zod\";\n\nimport { DeckSelection } from \"engine/types/decks\";\nimport { GemColor, CardData } from \"engine/types/card-data\";\nimport { Counter } from \"engine/types/counters\";\nimport { SharedGameSpec } from \"engine/types/shared-game-specs\";\nimport { Keyframe } from \"engine/types/keyframes\";\nimport { LoseReason } from \"game-server/backend-interface/BackendInterface\";\nimport { Faction } from \"engine/types/factions\";\n\n// Game state, apart from the engine-only state, is readonly\n// everywhere except in the Reducer. This utility type allows\n// us to declare the game state types as mutable only in the\n// Reducer.\nexport type Mutable<T> = {\n  -readonly [k in keyof T]: T[k];\n};\n\nexport enum Player {\n  P1 = \"p1\",\n  P2 = \"p2\",\n}\nexport const PlayerZod = z.nativeEnum(Player);\n\nexport const opponentOf = (player: Player) => {\n  return player === Player.P1 ? Player.P2 : Player.P1;\n};\n\nexport const PLAYER_SYMBOL = {\n  [Player.P1]: {\n    dark: \"▲\",\n    light: \"△\",\n    \"sneaky-dark\": \"▴\",\n    \"sneaky-light\": \"▵\",\n  },\n  [Player.P2]: {\n    dark: \"▼\",\n    light: \"▽\",\n    \"sneaky-dark\": \"▾\",\n    \"sneaky-light\": \"▿\",\n  },\n} as const;\n\n/** Parameters that a player selects in the prep for battle screen. */\nexport type Loadout = {\n  deckCardList?: string[];\n  masteriesList?: string[];\n};\n\nexport type LoadoutResolved = Loadout & {\n  deckCardList: string[];\n  masteriesList: string[];\n};\n\n/**\n * Instance of a card. The card may not be known to the user\n * (e.g. if the card is face down, or held by the opponent).\n * In that case, `name` should be undefined.\n * Conversely, if `name` is undefined, the card is assumed to\n * be face down.\n * This may also be used to hold per-card modifications that only\n * apply within the scope of a single game. If a game does so, make\n * sure that such modifications are only defined for clients that\n * have access to that information. Modifications that persist\n * across games should instead go in CardData.\n */\nexport type Card = {\n  name?: string;\n};\n\n/** A Slot is a place in the field. */\nexport const SlotZod = z\n  .object({\n    row: z.number(),\n    column: z.number(),\n  })\n  .readonly();\nexport type Slot = z.infer<typeof SlotZod>;\n\n/** Are these slots equal? */\nexport const areSlotsEqual = (slot1: Slot, slot2: Slot): boolean => {\n  return slot1.row == slot2.row && slot1.column == slot2.column;\n};\n\n/** Are these slots adjacent? */\nexport const areSlotsAdjacent = (slot1: Slot, slot2: Slot): boolean => {\n  return (\n    Math.abs(slot1.column - slot2.column) + Math.abs(slot1.row - slot2.row) ===\n    1\n  );\n};\n\n/** What is the euclidean distance (not Manhattan distance) between slots? */\nexport const getSlotsEuclideanDistance = (slot1: Slot, slot2: Slot): number => {\n  return Math.sqrt(\n    (slot1.row - slot2.row) * (slot1.row - slot2.row) +\n      (slot1.column - slot2.column) * (slot1.column - slot2.column)\n  );\n};\n\n/** Return all slots. */\nexport const getAllSlots = (rows: number, columns: number): Slot[] => {\n  const slots = [];\n  for (let i = 0; i < rows; i++) {\n    for (let j = 0; j < columns; j++) {\n      slots.push({ row: i, column: j });\n    }\n  }\n  return slots;\n};\n\n/** A card in play. */\nexport type Permanent = Readonly<{\n  /**\n   * A unique ID for the permanent.\n   * Note that this is different from its card name.\n   */\n  id: string;\n  card: Card;\n  damage: number;\n  counters: ReadonlyArray<Counter>;\n  ready: boolean; // can it be used this turn?\n  owner: Player;\n  slot: Slot;\n}>;\n\nexport type MutablePermanent = Mutable<Omit<Permanent, \"counters\">> & {\n  counters: Mutable<Counter>[];\n};\n\n/** A card in hand. */\nexport type HandCard = Readonly<{\n  /**\n   * A unique ID for the card in hand.\n   * Note that this is different from its card name.\n   */\n  id: string;\n  card: Card;\n}>;\n\nexport type MutableHandCard = Mutable<HandCard>;\n\n/**\n * A string, Card, CardData, HandCard, or Permanent, for functions that\n * query card properties. If a string is used, it is interpreted as a\n * card name (not a permanent ID).\n */\nexport type CardLike =\n  | string\n  | (Card & {\n      card?: undefined;\n      displayName?: undefined;\n      counters?: undefined;\n    })\n  | (CardData & { card?: undefined; counters?: undefined })\n  | (Permanent & { displayName?: undefined })\n  | (HandCard & { displayName?: undefined; counters?: undefined });\n\n/** Team data that doesn't change throughout the game. */\nexport type PlayerStateTeamData = {\n  teamId: string;\n  displayName: string;\n  faction: Faction | null;\n  /**\n   * Snapshot of the team's faction score contribution when they\n   * started the game, to display faction rank.\n   */\n  factionScoreContribution: number;\n  enabledMasteries: { [masteryId: string]: boolean };\n  /** Whether the player has solved this battle before. */\n  isReplay?: boolean;\n  /** The player's best prior speedrun time, if any. */\n  prevBestSpeedrunTime?: number;\n};\n\nexport type PlayerStateStats = {\n  /** Number of cards summoned. */\n  summons: number;\n  /** Number of units destroyed by friendly units. */\n  destroys: number;\n  /** Total amount of damage dealt by friendly units. */\n  damageDealt: number;\n  /** Number of cards summoned belonging to the player's faction. */\n  factionSummons: number;\n};\n\nexport type PlayerState = Readonly<{\n  /** The team data for the player, if controlled by a team. */\n  teamData?: PlayerStateTeamData;\n  /** The number of valid steps applied from player. */\n  stepNumber: number;\n  /** gems a player can spend */\n  gems: ReadonlyArray<GemColor>;\n  /** left -> right */\n  hand: ReadonlyArray<HandCard>;\n  /** bottom -> top */\n  drawPile?: ReadonlyArray<Card>;\n  /** bottom -> top */\n  discardPile?: ReadonlyArray<Card>;\n\n  /** Time spent on previous turns. */\n  prevTurnsTime: number;\n  /**\n   * Timestamp of the start of the current turn, or null if the\n   * player's turn is not currently active.\n   */\n  startTurnTime: number | null;\n\n  /**\n   * Stats that may be used to calculate faction points or generate\n   * leaderboards.\n   */\n  stats: PlayerStateStats;\n\n  /**\n   * Whether this player has solved the puzzle, if there is a\n   * solve state.\n   */\n  isSolved?: boolean;\n  /** Cards unlocked by this player from this battle, if any. */\n  cardUnlocks?: string[];\n\n  // State used by players, not engine.\n\n  /** Size of draw pile. */\n  drawPileSize?: number;\n  /** Top card, if viewable. */\n  topCard?: Card | null;\n}>;\n\nexport type FullPlayerState = PlayerState & {\n  drawPile: ReadonlyArray<Card>;\n  discardPile: ReadonlyArray<Card>;\n};\n\nexport type MutablePlayerState = Mutable<\n  Omit<FullPlayerState, \"gems\" | \"hand\" | \"drawPile\" | \"discardPile\"> & {\n    gems: GemColor[];\n    hand: HandCard[];\n    drawPile: Card[];\n    discardPile: Card[];\n  }\n>;\n\nexport const DevKnobsZod = z\n  .object({\n    /** Override the number of gems each player gets per turn. */\n    extraGemsPerTurn: z.optional(z.number()),\n    /** If true, make it free to summon a card. */\n    freeSummon: z.optional(z.boolean()),\n    /** If true, make all cards available to play each turn. */\n    allCardsAvailable: z.optional(z.boolean()),\n    /** If true, cards are always summoned ready. */\n    alwaysReady: z.optional(z.boolean()),\n    /**\n     * If true, allow actions to be taken out of turn.\n     * To allow non-free actions to be taken out of turn, gems are\n     * also refreshed for both players each turn.\n     */\n    noTurnCheck: z.optional(z.boolean()),\n    /** If true, don't shuffle either deck before the game starts. */\n    noShuffle: z.optional(z.boolean()),\n    /** If true, allow starting the game without a valid deck. */\n    allowInvalidDecks: z.optional(z.boolean()),\n    /**\n     * If true, checkpoint after every step, except the last one.\n     * Used to test checkpointing.\n     */\n    checkpointAfterEveryStep: z.optional(z.boolean()),\n    /** If true, the game gets solved once P1 makes their first step. */\n    instasolve: z.optional(z.boolean()),\n  })\n  .readonly();\nexport type DevKnobs = z.infer<typeof DevKnobsZod>;\n\nexport type EngineOnlyGameState = Readonly<{\n  /** Deck selections by each player, if provided. */\n  deckSelections: { [player in Player]?: DeckSelection };\n  /** Whether the game has started. */\n  hasGameStarted: boolean;\n  /** The next permanent ID to assign when creating a new permanent. */\n  nextPermanentId: number;\n  /** The next ID to assign when creating a new hand card. */\n  nextHandCardId: number;\n  /** The next ID to assign when creating a dynamic keyframe. */\n  nextKeyframeId: number;\n  /**\n   * The overall score gained from the battle (single-player only). Ensures you\n   * can't endlessly farm score by reloading checkpoints.\n   */\n  gainedScore: number;\n  /**\n   * Extra battle-specific state that may differ between game specs.\n   * Any battle-specific, engine-only state that needs to persist\n   * across steps should go in here.\n   * Warning: All state should be JSON-serializable, so don't store\n   * things like classes or functions.\n   */\n  extraState?: object;\n}>;\n\nexport type MutableEngineOnlyGameState = Mutable<EngineOnlyGameState>;\n\nexport enum GamePhase {\n  ACTIVE = \"active\",\n  ENDING = \"ending\",\n  ENDED = \"ended\",\n}\n\nexport const GAME_PHASE_ORDER: { [phase in GamePhase]: number } = {\n  [GamePhase.ACTIVE]: 0,\n  [GamePhase.ENDING]: 1,\n  [GamePhase.ENDED]: 2,\n};\n\nexport type GameState = Readonly<{\n  /**\n   * The puzName of the active battle. Only differs from the page puzName\n   * in instancer rooms.\n   */\n  puzName: string;\n\n  /** Global \"is the game done\". */\n  phase: GamePhase;\n\n  /** All permanents in play. */\n  permanents: Readonly<{ [id: string]: Permanent }>;\n\n  [Player.P1]: PlayerState;\n  [Player.P2]: PlayerState;\n  /** The current turn. Only valid if the game is in progress. */\n  currentTurnPlayer: Player;\n  /**\n   * The turn number. This counts turns from both players.\n   * It starts from 0 and increments every time a turn is ended.\n   */\n  turnNumber: number;\n  /** If set, show the corresponding keyframe. */\n  keyframe?: Keyframe;\n  /** The winner, if the game has ended. */\n  winner?: Player;\n  /** How the game was lost. */\n  loseReason?: LoseReason;\n\n  /** Dev-only behavior override knobs. */\n  devKnobs?: DevKnobs;\n\n  /**\n   * State that is only visible to the Engine (and god role).\n   * The state is stored here instead of directly in Engine so\n   * that it can be easily saved and loaded along with the\n   * rest of the game state.\n   */\n  engineOnly?: EngineOnlyGameState;\n\n  /**\n   * Extra battle-specific state that may differ between game specs.\n   * Any battle-specific state that needs to persist across steps,\n   * that also needs to be shared between server and client, should\n   * go in here.\n   * All modifications to this state should go through the\n   * modifySharedExtraState engine hook, with the actual modifications\n   * applied in the modifySharedExtraState shared game spec hook.\n   * Warning: All state should be JSON-serializable, so don't store\n   * things like classes or functions.\n   */\n  sharedExtraState?: object;\n}>;\n\nexport type FullGameState = GameState & {\n  [Player.P1]: FullPlayerState;\n  [Player.P2]: FullPlayerState;\n  engineOnly: EngineOnlyGameState;\n};\n\nexport type EngineGameState = Omit<FullGameState, \"engineOnly\"> & {\n  engineOnly: MutableEngineOnlyGameState;\n};\n\nexport type MutableGameState = Mutable<\n  Omit<\n    GameState,\n    Player.P1 | Player.P2 | \"permanents\" | \"devKnobs\" | \"engineOnly\"\n  >\n> & {\n  permanents: { [id: string]: MutablePermanent };\n  [Player.P1]: MutablePlayerState;\n  [Player.P2]: MutablePlayerState;\n  devKnobs?: Mutable<DevKnobs>;\n  engineOnly: MutableEngineOnlyGameState;\n};\n\n// This exclusion is necessary to prevent typescript from complaining\n// about comparing 2 !== 1.\n// eslint-disable-next-line @typescript-eslint/no-inferrable-types\nexport const MAX_MANUAL_SAVES: number = 2;\n\nexport const isCheckpointSlotValid = (slot: number) => {\n  return Number.isInteger(slot) && slot >= 0 && slot < 1 + MAX_MANUAL_SAVES;\n};\n\nexport type CheckpointState = Readonly<{\n  selectedPuzName: string | null;\n  gameState: EngineGameState;\n}>;\n\nexport type SerializedCheckpointState = Readonly<{\n  turnNumber: number;\n  roomId: string;\n  timestamp: number;\n  gainedScore: number;\n  serializedState: string;\n}>;\n\nconst makeInitPlayerState = (gameSpec: SharedGameSpec, player: Player) => {\n  const playerState: MutablePlayerState = {\n    hand: [],\n    drawPile: [],\n    discardPile: [],\n    stepNumber: 0,\n    gems: [],\n    prevTurnsTime: 0,\n    startTurnTime: null,\n    stats: {\n      summons: 0,\n      destroys: 0,\n      damageDealt: 0,\n      factionSummons: 0,\n    },\n  };\n  if (gameSpec.initPlayerState) {\n    gameSpec.initPlayerState(playerState);\n  }\n  return playerState;\n};\n\nexport const makeInitGameState = (\n  puzName: string,\n  gameSpec: SharedGameSpec\n) => {\n  const gameState: MutableGameState = {\n    puzName,\n    phase: GamePhase.ACTIVE,\n    permanents: {},\n    [Player.P1]: makeInitPlayerState(gameSpec, Player.P1),\n    [Player.P2]: makeInitPlayerState(gameSpec, Player.P2),\n    currentTurnPlayer: Player.P2,\n    turnNumber: 0,\n    engineOnly: {\n      deckSelections: {},\n      hasGameStarted: false,\n      nextPermanentId: 0,\n      nextHandCardId: 0,\n      nextKeyframeId: 0,\n      gainedScore: 0,\n    },\n  };\n  if (gameSpec.initGameState) {\n    gameSpec.initGameState(gameState);\n  }\n  return gameState;\n};\n","import { z } from \"zod\";\nimport { CardsDB } from \"engine/cards/CardsDB\";\n\n/**\n * Color symbols, for the purposes of rendering. The allowed gem and cost\n * colors are respectively subsets of these possible values.\n */\nexport enum ColorSymbol {\n  RED = \"R\",\n  YELLOW = \"Y\",\n  GREEN = \"G\",\n  PURPLE = \"P\",\n  WHITE = \"W\",\n  BLACK = \"B\",\n  RAINBOW = \"*\",\n  WHITEBLACK = \"W/B\",\n  ROCK = \".\",\n}\n\nexport const PureColorZod = z.union([\n  z.literal(ColorSymbol.RED),\n  z.literal(ColorSymbol.YELLOW),\n  z.literal(ColorSymbol.GREEN),\n  z.literal(ColorSymbol.PURPLE),\n  z.literal(ColorSymbol.WHITE),\n  z.literal(ColorSymbol.BLACK),\n]);\nexport type PureColor = z.infer<typeof PureColorZod>;\n\n/** Card colors. Gem and cost symbols can always be card colors. */\nexport const CardColorZod = z.union([\n  PureColorZod,\n  z.literal(ColorSymbol.WHITEBLACK),\n]);\nexport type CardColor = z.infer<typeof CardColorZod>;\n\n/**\n * A GemColor is a gem available to pay for an action. It is also used\n * to represent a card's color.\n * Larger number = more general symbol.\n */\nexport const GemColorZod = z.union([\n  PureColorZod,\n  /** Can act as any color. */\n  z.literal(ColorSymbol.RAINBOW),\n]);\nexport type GemColor = z.infer<typeof GemColorZod>;\n\n/**\n * A CostColor is part of a card's cost, where it can be paid for with\n * any matching gem.\n * Larger number = more general symbol.\n */\nexport const CostColorZod = z.union([\n  PureColorZod,\n  z.literal(ColorSymbol.WHITEBLACK),\n  /** Can be paid for with any gem. */\n  z.literal(ColorSymbol.ROCK),\n]);\nexport type CostColor = z.infer<typeof CostColorZod>;\n\n/**\n * Gem colors that you can create for each card color, if not just\n * the card color itself.\n */\nexport const getDefaultCreateGemsColors = (\n  cardColor: CardColor\n): GemColor[][] => {\n  switch (cardColor) {\n    case ColorSymbol.WHITEBLACK:\n      return [[ColorSymbol.WHITE], [ColorSymbol.BLACK]];\n    default:\n      return [[cardColor]];\n  }\n};\n\n/** Can this gem pay for this cost? */\nexport const canGemPayFor = (gem: GemColor, cost: CostColor): boolean => {\n  if (gem === cost) return true;\n  if (gem === ColorSymbol.RAINBOW) return true;\n  if (cost === ColorSymbol.ROCK) return true;\n  if (\n    cost === ColorSymbol.WHITEBLACK &&\n    (gem === ColorSymbol.BLACK || gem === ColorSymbol.WHITE)\n  )\n    return true;\n  return false;\n};\n\n/** Text, light color, and dark color for each symbol. */\nexport const SYMBOL_INFO = {\n  [ColorSymbol.RED]: {\n    text: \"R\",\n    lightColor: \"var(--red-200)\",\n    darkColor: \"var(--red-800)\",\n    color: (shade: number) => `var(--red-${shade})`,\n  },\n  [ColorSymbol.YELLOW]: {\n    text: \"Y\",\n    lightColor: \"var(--yellow-200)\",\n    darkColor: \"var(--yellow-800)\",\n    color: (shade: number) => `var(--yellow-${shade})`,\n  },\n  [ColorSymbol.GREEN]: {\n    text: \"G\",\n    lightColor: \"var(--green-200)\",\n    darkColor: \"var(--green-800)\",\n    color: (shade: number) => `var(--green-${shade})`,\n  },\n  [ColorSymbol.PURPLE]: {\n    text: \"P\",\n    lightColor: \"var(--purple-300)\",\n    darkColor: \"var(--purple-800)\",\n    color: (shade: number) => `var(--purple-${shade})`,\n  },\n  [ColorSymbol.WHITE]: {\n    text: \"W\",\n    lightColor: \"var(--gray-200)\",\n    darkColor: \"var(--gray-600)\",\n    color: (shade: number) => `var(--gray-${Math.max(shade - 200, 100)})`,\n  },\n  [ColorSymbol.BLACK]: {\n    text: \"B\",\n    lightColor: \"var(--gray-400)\",\n    darkColor: \"var(--gray-800)\",\n    color: (shade: number) => `var(--gray-${Math.min(shade + 200, 900)})`,\n  },\n  [ColorSymbol.WHITEBLACK]: {\n    text: \"W/B\",\n    lightColor: \"linear-gradient(135deg, #1a202c, #ccc2c0)\", // hard-coded into svg, this isn't used\n    darkColor: \"linear-gradient(95deg, #bba5b6, #644f5d)\",\n    color: (shade: number) => `var(--gray-${shade})`,\n  },\n  [ColorSymbol.ROCK]: {\n    text: \"•\",\n    lightColor: \"var(--cold-gray-400)\",\n    darkColor: \"var(--cold-gray-800)\",\n    color: (shade: number) => `var(--cold-gray-${shade})`,\n  },\n  [ColorSymbol.RAINBOW]: {\n    text: \"★\",\n    lightColor: \"var(--primary-400)\",\n    darkColor: \"var(--primary-800)\",\n    color: (shade: number) => `var(--primary-${shade})`,\n  },\n} as const;\n\nexport enum CardType {\n  CREATURE = \"creature\",\n  STRUCTURE = \"structure\",\n}\n\n/** All cards are either creatures or structures. */\n/** A card not in the field. Persists across games. */\nexport type CardData = {\n  // Unique card name.\n  name: string;\n  // Name displayed on the card.\n  displayName: string;\n  // Text displayed in the body of the card.\n  text: string;\n  cost: CostColor[];\n  power: number;\n  shell: number;\n  maxHealth: number;\n  /**\n   * A card's color. This serves as both the gem color (or colors, for\n   * W/B) that can be created by the card, and its attack cost.\n   */\n  color: CardColor | null;\n  capturable: boolean;\n  implemented: boolean;\n  /** The unlock group that this card belongs to. */\n  cardUnlockGroupId: string | null;\n  // TODO: does the CardData specify a card's special actions?\n};\n\nconst WEIRD_CARD_NAMES = [\n  \"master-bramble\",\n  \"kero--floppy\",\n  \"professor-galactic\",\n  \"stalactica\",\n  \"test-card\",\n];\n\nexport const getUnlockableCards = (cardsDB: CardsDB) => {\n  return Object.keys(cardsDB)\n    .filter((cardName) => cardsDB[cardName].cardUnlockGroupId !== null)\n    .filter((cardName) => !WEIRD_CARD_NAMES.includes(cardName));\n};\n","import { z } from \"zod\";\n\nimport { Slot, SlotZod, Permanent } from \"engine/types/game-state\";\nimport { Inspector } from \"engine/Inspector\";\nimport { FailedChecks } from \"engine/types/action-validation\";\n\n/**\n * A card can have at most two activated abilities, as opposed to abilities\n * that are passive. Passive abilities are specified with counters.\n */\nexport enum AbilityType {\n  FLEX = \"flex\",\n  SPECIAL = \"special\",\n}\nexport const AbilityTypeZod = z.nativeEnum(AbilityType);\n\n/** Parameters an activated ability might need to ask the user for. */\nexport enum EffectOptType {\n  PERMANENT = \"Unit\",\n  SLOT = \"Space\",\n  ONE_CHOICE = \"one_choice\",\n}\n\nconst PermanentEffectOptZod = z.object({\n  type: z.literal(EffectOptType.PERMANENT),\n  permanentId: z.string(),\n});\ntype PermanentEffectOpt = z.infer<typeof PermanentEffectOptZod>;\n\nexport type PermanentEffectOptResolved = PermanentEffectOpt & {\n  permanent: Permanent;\n};\n\nconst SlotEffectOptZod = z.object({\n  type: z.literal(EffectOptType.SLOT),\n  slot: SlotZod,\n});\nexport type SlotEffectOpt = z.infer<typeof SlotEffectOptZod>;\n\n/** An effect which makes the user choose one out of a fixed list of options. */\nconst OneChoiceEffectOptZod = z.object({\n  type: z.literal(EffectOptType.ONE_CHOICE),\n  choice: z.string(),\n});\nexport type OneChoiceEffectOpt = z.infer<typeof OneChoiceEffectOptZod>;\n\n/** A parameter specified by an activated ability. */\nexport const EffectOptZod = z.union([\n  PermanentEffectOptZod,\n  SlotEffectOptZod,\n  OneChoiceEffectOptZod,\n]);\nexport type EffectOpt = z.infer<typeof EffectOptZod>;\n\nexport type EffectOptResolved =\n  | PermanentEffectOptResolved\n  | SlotEffectOpt\n  | OneChoiceEffectOpt;\n\n// Provides access to parts of the turn state relevant to\n// effect opts validation. This should not include anything\n// client-specific, since validation needs to be performed\n// on the server too.\nexport type EffectOptValidationContext = {\n  // The permanent performing the ability.\n  permanent: Permanent;\n  effectOpts: ReadonlyArray<EffectOptResolved>;\n  inspector: Inspector;\n};\n\ntype EffectOptFormBase = {\n  userPrompt?: string;\n};\n\ntype PermanentEffectOptForm = EffectOptFormBase & {\n  type: EffectOptType.PERMANENT;\n  validate?: (\n    failedChecks: FailedChecks,\n    target: Permanent,\n    ctx: EffectOptValidationContext\n  ) => void;\n};\n\ntype SlotEffectOptForm = EffectOptFormBase & {\n  type: EffectOptType.SLOT;\n  validate?: (\n    failedChecks: FailedChecks,\n    slot: Slot,\n    ctx: EffectOptValidationContext\n  ) => void;\n};\n\n/** A form which makes the user choose one out of a fixed list of options. */\nexport type OneChoiceEffectOptForm = EffectOptFormBase & {\n  choices: string[]; // The choices available to choose from.\n  type: EffectOptType.ONE_CHOICE;\n  validate?: (\n    failedChecks: FailedChecks,\n    choice: string,\n    ctx: EffectOptValidationContext\n  ) => void;\n};\n\n/**\n * validate performs client-side validation.\n * If left blank, any selection is accepted and sent in the step.\n * Ensure that any validation here is also done on the server-side.\n * card-effects-shared.ts can be used to hold common validators\n * and other utilities shared between client and server.\n */\nexport type EffectOptForm =\n  | PermanentEffectOptForm\n  | SlotEffectOptForm\n  | OneChoiceEffectOptForm;\n","import { z } from \"zod\";\n\nimport { GemColor, GemColorZod } from \"engine/types/card-data\";\nimport { SlotZod, Player, PlayerZod, Permanent } from \"engine/types/game-state\";\nimport {\n  AbilityType,\n  AbilityTypeZod,\n  EffectOptZod,\n  EffectOptResolved,\n} from \"engine/types/effects\";\nimport { Role } from \"engine/types/updates\";\nimport { Keyframe } from \"engine/types/keyframes\";\nimport { RoomMember } from \"game-server/Room\";\n\nexport enum StepType {\n  // System steps. These can't be generated by clients.\n  SYSTEM_JOIN = \"system_join\",\n  SYSTEM_RESIGN = \"system_resign\",\n  SYSTEM_TIME_OUT = \"system_time_out\",\n\n  // Workshop-specific steps\n  REMOVE = \"remove_permanent\",\n\n  // Game steps\n  SUMMON = \"summon\",\n  ATTACK = \"attack\",\n  CREATE_GEMS = \"create_gems\",\n  MOVE = \"move\",\n  DRAW = \"draw\",\n  ACTIVATE_ABILITY = \"activate_ability\",\n  END_TURN = \"end_turn\",\n\n  // Out-of-game steps\n  CREATE_CHECKPOINT = \"create_checkpoint\",\n  ADVANCE_KEYFRAME = \"advance_keyframe\",\n}\n\n/** Client joins the room. */\nexport type SystemJoinStep = Readonly<{\n  type: StepType.SYSTEM_JOIN;\n  teamId: string;\n  roomMember: RoomMember;\n  role: Role;\n}>;\n\nexport type SystemResignStep = Readonly<{\n  type: StepType.SYSTEM_RESIGN;\n  player: Player;\n}>;\n\nexport type SystemTimeOutStep = Readonly<{\n  type: StepType.SYSTEM_TIME_OUT;\n  player: Player;\n}>;\n\nexport type SystemStep = SystemJoinStep | SystemResignStep | SystemTimeOutStep;\n\n/** Card is removed (only available in god mode) **/\nconst RemoveStepZod = z\n  .object({\n    type: z.literal(StepType.REMOVE),\n    permanentId: z.string(),\n  })\n  .readonly();\nexport type RemoveStep = z.infer<typeof RemoveStepZod>;\n\nexport type RemoveStepResolved = RemoveStep & {\n  permanent: Permanent;\n};\n\n/** Player summons card to slot. */\nconst SummonStepZod = z\n  .object({\n    type: z.literal(StepType.SUMMON),\n    player: PlayerZod,\n    slot: SlotZod,\n    /**\n     * If handCardId is specified, the card with ID handCardId will\n     * be summoned.\n     */\n    handCardId: z.optional(z.string()),\n    /**\n     * If name is specified, a card of that name will be summoned\n     * without consuming a card in hand. Only available if the\n     * all-cards-available dev knob is set.\n     */\n    cardName: z.optional(z.string()),\n    stepNumber: z.number(),\n  })\n  .readonly();\nexport type SummonStep = z.infer<typeof SummonStepZod>;\n\nexport type SummonStepResolved = SummonStep & {\n  cardName: string;\n  /**\n   * Flag that indicates that the player cannot pay for this step,\n   * and the payment field is invalid.\n   * This is used to allow resolving steps that cannot be paid for,\n   * and still report any additional fail reasons during validation.\n   */\n  cannotPay?: boolean;\n  /** Gems used to pay for the action. */\n  payment: GemColor[];\n};\n\n/** Player attacks defender with attacker. */\nconst AttackStepZod = z\n  .object({\n    type: z.literal(StepType.ATTACK),\n    attackerId: z.string(),\n    defenderId: z.string(),\n    stepNumber: z.number(),\n  })\n  .readonly();\nexport type AttackStep = z.infer<typeof AttackStepZod>;\n\nexport type AttackStepResolved = AttackStep & {\n  attacker: Permanent;\n  defender: Permanent;\n  /**\n   * Flag that indicates that the player cannot pay for this step,\n   * and the payment field is invalid.\n   * This is used to allow resolving steps that cannot be paid for,\n   * and still report any additional fail reasons during validation.\n   */\n  cannotPay?: boolean;\n  /** Gems used to pay for the action. */\n  payment: GemColor[];\n};\n\n/** Player creates gem(s), usually one of the permanent's color. */\nconst CreateGemsStepZod = z\n  .object({\n    type: z.literal(StepType.CREATE_GEMS),\n    permanentId: z.string(),\n    /** The gem color(s) to create. (Almost always just one but some cards might\n     * create more.) */\n    gemColors: GemColorZod.array(),\n    stepNumber: z.number(),\n  })\n  .readonly();\nexport type CreateGemsStep = z.infer<typeof CreateGemsStepZod>;\n\nexport type CreateGemsStepResolved = CreateGemsStep & {\n  permanent: Permanent;\n};\n\n/** Player moves permanentId to slot. */\nconst MoveStepZod = z\n  .object({\n    type: z.literal(StepType.MOVE),\n    permanentId: z.string(),\n    slot: SlotZod,\n    stepNumber: z.number(),\n  })\n  .readonly();\nexport type MoveStep = z.infer<typeof MoveStepZod>;\n\nexport type MoveStepResolved = MoveStep & {\n  permanent: Permanent;\n};\n\n/** Player draws card (outside of turn start). */\nconst DrawStepZod = z\n  .object({\n    type: z.literal(StepType.DRAW),\n    player: PlayerZod,\n    stepNumber: z.number(),\n  })\n  .readonly();\nexport type DrawStep = z.infer<typeof DrawStepZod>;\n\nexport type DrawStepResolved = DrawStep & {\n  /**\n   * Flag that indicates that the player cannot pay for this step,\n   * and the payment field is invalid.\n   * This is used to allow resolving steps that cannot be paid for,\n   * and still report any additional fail reasons during validation.\n   */\n  cannotPay?: boolean;\n  /** Gems used to pay for the action. */\n  payment: GemColor[];\n};\n\n/** Activate a permanent's flex or special. Flexes are different\n    from specials because they do not cost an action and can be used\n    multiple times per turn. */\nconst ActivateAbilityStepZod = z\n  .object({\n    type: z.literal(StepType.ACTIVATE_ABILITY),\n    permanentId: z.string(), // activating permanent\n    abilityType: AbilityTypeZod,\n\n    // Optional arguments needed to fully specify the use of an\n    // flex or special (targets, etc.)\n    effectOpts: EffectOptZod.array().readonly(),\n\n    stepNumber: z.number(),\n  })\n  .readonly();\nexport type ActivateAbilityStep = z.infer<typeof ActivateAbilityStepZod>;\n\nexport type ActivateAbilityStepResolved = ActivateAbilityStep & {\n  permanent: Permanent;\n  /**\n   * Flag that indicates that the player cannot pay for this step,\n   * and the payment field is invalid.\n   * This is used to allow resolving steps that cannot be paid for,\n   * and still report any additional fail reasons during validation.\n   */\n  cannotPay?: boolean;\n  /** Gems used to pay for the action. */\n  payment: GemColor[];\n  effectOptsResolved: EffectOptResolved[];\n};\n\n/** Player ends their turn. */\nconst EndTurnStepZod = z\n  .object({\n    type: z.literal(StepType.END_TURN),\n    player: PlayerZod,\n    stepNumber: z.number(),\n  })\n  .readonly();\nexport type EndTurnStep = z.infer<typeof EndTurnStepZod>;\n\n/** Player creates checkpoint. */\nconst CreateCheckpointStepZod = z\n  .object({\n    type: z.literal(StepType.CREATE_CHECKPOINT),\n    slot: z.number(),\n  })\n  .readonly();\nexport type CreateCheckpointStep = z.infer<typeof CreateCheckpointStepZod>;\n\n/** Player advances to next keyframe. */\nconst AdvanceKeyframeStepZod = z\n  .object({\n    type: z.literal(StepType.ADVANCE_KEYFRAME),\n    /**\n     * The keyframe ID of the keyframe to advance,\n     * to detect race conditions.\n     */\n    keyframeId: z.string(),\n    /** Which dialog option the player selected. */\n    dialogOptionIndex: z.optional(z.number()),\n  })\n  .readonly();\nexport type AdvanceKeyframeStep = z.infer<typeof AdvanceKeyframeStepZod>;\n\nexport type AdvanceKeyframeStepResolved = AdvanceKeyframeStep &\n  Readonly<{\n    /** The keyframe that we're advancing past. */\n    keyframe: Keyframe;\n  }>;\n\nexport type Step =\n  | RemoveStep\n  | SummonStep\n  | AttackStep\n  | CreateGemsStep\n  | MoveStep\n  | DrawStep\n  | ActivateAbilityStep\n  | EndTurnStep\n  | CreateCheckpointStep\n  | AdvanceKeyframeStep;\nexport const StepZod = z.union([\n  RemoveStepZod,\n  SummonStepZod,\n  AttackStepZod,\n  CreateGemsStepZod,\n  MoveStepZod,\n  DrawStepZod,\n  ActivateAbilityStepZod,\n  EndTurnStepZod,\n  CreateCheckpointStepZod,\n  AdvanceKeyframeStepZod,\n]);\n\nexport type UnifiedStep = SystemStep | Step;\n\n// A step after validating and resolving identifiers. Used by the engine.\nexport type StepResolved =\n  | RemoveStepResolved\n  | SummonStepResolved\n  | AttackStepResolved\n  | CreateGemsStepResolved\n  | MoveStepResolved\n  | DrawStepResolved\n  | ActivateAbilityStepResolved\n  | EndTurnStep\n  | CreateCheckpointStep\n  | AdvanceKeyframeStepResolved;\n\n/** How many gems do we pay for this step? */\nexport const stepToPayment = (step: StepResolved | null): GemColor[] => {\n  if (!step) return [];\n  switch (step.type) {\n    case StepType.DRAW:\n    case StepType.SUMMON:\n    case StepType.ATTACK:\n    case StepType.ACTIVATE_ABILITY: {\n      const { cannotPay, payment } = step;\n      return cannotPay ? [] : payment;\n    }\n    default: {\n      return [];\n    }\n  }\n};\n\n/** How many gems do we gain from this step? */\nexport const stepToGain = (step: StepResolved | null): GemColor[] => {\n  if (!step) return [];\n  switch (step.type) {\n    case StepType.CREATE_GEMS: {\n      return step.gemColors;\n    }\n    default: {\n      return [];\n    }\n  }\n};\n\nexport const stepToName = (step: Step): string | undefined => {\n  switch (step.type) {\n    case StepType.SUMMON:\n      return \"Summon\";\n    case StepType.ATTACK:\n      return \"Attack\";\n    case StepType.CREATE_GEMS:\n      return \"Create\";\n    case StepType.MOVE:\n      return \"Move\";\n    case StepType.DRAW:\n      return \"Draw\";\n    case StepType.ACTIVATE_ABILITY:\n      return step.abilityType === AbilityType.FLEX ? \"Flex\" : \"Special\";\n    case StepType.END_TURN:\n      return \"End turn\";\n    case StepType.CREATE_CHECKPOINT:\n      return \"Save checkpoint\";\n    case StepType.REMOVE:\n      return \"Destroy (god only)\";\n  }\n};\n\n/** Get the player responsible for making the step, if attributable. */\nexport const stepToPlayer = (step: StepResolved): Player | null => {\n  switch (step.type) {\n    case StepType.SUMMON:\n    case StepType.DRAW:\n    case StepType.END_TURN:\n      return step.player;\n    case StepType.ATTACK:\n      return step.attacker.owner;\n    case StepType.CREATE_GEMS:\n    case StepType.MOVE:\n    case StepType.ACTIVATE_ABILITY:\n      return step.permanent.owner;\n    default:\n      return null;\n  }\n};\n","import { z } from \"zod\";\n\nimport {\n  Card,\n  Permanent,\n  Slot,\n  Player,\n  DevKnobs,\n  GamePhase,\n  GameState,\n} from \"engine/types/game-state\";\nimport { Counter } from \"engine/types/counters\";\nimport { GemColor } from \"engine/types/card-data\";\nimport { Keyframe } from \"engine/types/keyframes\";\nimport { DeckUpdate } from \"engine/types/decks\";\nimport { MasteryTreeUpdate } from \"game-server/masteries\";\nimport { WSError } from \"game-server/ws\";\nimport { RoomMember } from \"game-server/Room\";\nimport {\n  LoseReason,\n  TeamCard,\n} from \"game-server/backend-interface/BackendInterface\";\n\n/** Roles that a team may play in a game. Should be a superset of Player. */\nexport enum Role {\n  P1 = \"p1\",\n  P2 = \"p2\",\n  // GOD: Has access to the entire game state.\n  GOD = \"god\",\n}\nexport const RoleZod = z.nativeEnum(Role);\n\nexport const canRoleControlPlayer = (role: Role, player: Player): boolean => {\n  switch (role) {\n    case Role.GOD:\n      return true;\n    case Role.P1:\n      return player === Player.P1;\n    case Role.P2:\n      return player === Player.P2;\n  }\n};\n\nexport enum UpdateType {\n  // System updates, intended for the server and not clients.\n  SYSTEM_ENABLE_MEMBER = \"system_enable_member\",\n  SYSTEM_UPDATE_DECK = \"system_update_deck\",\n  SYSTEM_UPDATE_MASTERY_TREE = \"system_update_mastery_tree\",\n  /** Signal that a room's activity is complete. */\n  SYSTEM_ROOM_COMPLETE = \"system_room_complete\",\n\n  /**\n   * Acknowledge a step. This is only sent to the client requesting\n   * the step, so that it can update the UI state appropriately.\n   */\n  STEP_ACK = \"step_ack\",\n  /** Kick a client from the room. */\n  KICK = \"kick\",\n\n  OVERRIDE_STATE = \"state\",\n  RESET = \"reset\",\n  ADVANCE_PHASE = \"advance_phase\",\n  SET_GAME_RESULT = \"set_game_result\",\n  START_TURN = \"start_turn\",\n  END_TURN = \"end_turn\",\n\n  SET_DRAW_PILE = \"set_draw_pile\",\n  SET_DEV_KNOBS = \"set_dev_knobs\",\n  ADD_GEMS = \"add_gems\",\n  REMOVE_GEMS = \"remove_gems\",\n  CLEAR_GEMS = \"clear_gems\",\n  CREATE_PERMANENT = \"create_permanent\",\n  REMOVE_PERMANENT = \"remove_permanent\",\n  READY_PERMANENT = \"ready_permanent\",\n  UNREADY_PERMANENT = \"unready_permanent\",\n  TRANSFORM_PERMANENT = \"transform_permanent\",\n  CHANGE_PERMANENT_OWNER = \"change_permanent_owner\",\n  MOVE = \"move\",\n  SWAP = \"swap\",\n  DRAW_CARD = \"draw_card\",\n  REMOVE_FROM_DRAW_PILE = \"remove_from_draw_pile\",\n  DISCARD_CARD = \"discard_card\",\n  DAMAGE_PERMANENT = \"damage_permanent\",\n  DISCARD_PERMANENT = \"discard_permanent\",\n  ADD_COUNTER = \"add_counter\",\n  REMOVE_COUNTER = \"remove_counter\",\n  SET_COUNTER = \"set_counter\",\n  INIT_SHARED_EXTRA_STATE = \"init_shared_extra_state\",\n  MODIFY_SHARED_EXTRA_STATE = \"modify_shared_extra_state\",\n  MODIFY_STATS = \"modify_stats\",\n  SET_STEP_NUMBER = \"set_step_number\",\n  WAIT_ANIMATE = \"wait_animate\",\n\n  // Set the keyframe.\n  SET_KEYFRAME = \"set_keyframe\",\n  // Announce a message to the user console.\n  ANNOUNCE = \"announce\",\n  // Updates to announce an event.\n  // This does not cause the client to mutate game state.\n  // Actual game state mutation may be broken up into multiple\n  // simpler updates.\n  ANNOUNCE_SUMMON_PERMANENT = \"announce_summon_permanent\",\n  ANNOUNCE_MOVE = \"announce_move\",\n  ANNOUNCE_ATTACK_CARD = \"announce_attack_card\",\n\n  // Deckbuilding-specific updates\n  DECKBUILDING_OVERRIDE_STATE = \"deckbuilding_override_state\",\n}\n\ntype UpdateSystemEnableMember = {\n  type: UpdateType.SYSTEM_ENABLE_MEMBER;\n  roomMember: RoomMember;\n};\n\ntype UpdateSystemUpdateDeck = {\n  type: UpdateType.SYSTEM_UPDATE_DECK;\n  deckUpd: DeckUpdate;\n};\n\ntype UpdateSystemUpdateMasteryTree = {\n  type: UpdateType.SYSTEM_UPDATE_MASTERY_TREE;\n  masteryTreeUpd: MasteryTreeUpdate;\n};\n\ntype UpdateSystemRoomComplete = {\n  type: UpdateType.SYSTEM_ROOM_COMPLETE;\n  solvedTeamIds: string[];\n  cardUnlocks: TeamCard[];\n};\n\ntype UpdateStepAck = {\n  type: UpdateType.STEP_ACK;\n  err?: WSError;\n};\n\ntype UpdateKick = {\n  type: UpdateType.KICK;\n};\n\ntype UpdateOverrideState = {\n  type: UpdateType.OVERRIDE_STATE;\n  roomId: string;\n  state: GameState;\n};\n\n/** Reset the game state to the initial game state for the puzzle. */\ntype UpdateReset = {\n  type: UpdateType.RESET;\n};\n\ntype UpdateAdvancePhase = {\n  type: UpdateType.ADVANCE_PHASE;\n  phase: GamePhase;\n};\n\ntype UpdateSetGameResult = {\n  type: UpdateType.SET_GAME_RESULT;\n  winner: Player;\n  loseReason: LoseReason;\n  solves: { [player in Player]?: boolean };\n  cardUnlocks: { [player in Player]?: string[] };\n  /** The time when the game ended, to end any running turns. */\n  endTime: number;\n};\n\ntype UpdateStartTurn = {\n  type: UpdateType.START_TURN;\n  player: Player;\n  /** Timestamp for when the turn was started. */\n  startTurnTime: number;\n};\n\ntype UpdateEndTurn = {\n  type: UpdateType.END_TURN;\n  player: Player;\n  /** Timestamp for when the turn was ended. */\n  endTurnTime: number;\n};\n\ntype UpdateAddGems = {\n  type: UpdateType.ADD_GEMS;\n  player: Player;\n  gems: GemColor[];\n};\n\ntype UpdateRemoveGems = {\n  type: UpdateType.REMOVE_GEMS;\n  player: Player;\n  gems: GemColor[];\n};\n\ntype UpdateClearGems = {\n  type: UpdateType.CLEAR_GEMS;\n  player: Player;\n};\n\n/**\n * Create a permanent on the board. This just adds the permanent to\n * the board and does not trigger any effects.\n */\nexport type UpdateCreatePermanent = {\n  type: UpdateType.CREATE_PERMANENT;\n  permanent: Permanent;\n  /**\n   * If specified, the card with id handCardId is deleted. This should\n   * not be a separate update since we need to show both at the same time\n   * to the player.\n   */\n  handCardId?: string;\n};\n\n/**\n * Removes a permanent from the board.\n */\nexport type UpdateRemovePermanent = {\n  type: UpdateType.REMOVE_PERMANENT;\n  permanentId: string;\n  /** If set, the permanent will be added to the owner's discard pile. */\n  discard?: boolean;\n};\n\ntype UpdateReadyPermanent = {\n  type: UpdateType.READY_PERMANENT;\n  permanentId: string;\n};\n\ntype UpdateUnreadyPermanent = {\n  type: UpdateType.UNREADY_PERMANENT;\n  permanentId: string;\n};\n\ntype UpdateTransformPermanent = {\n  type: UpdateType.TRANSFORM_PERMANENT;\n  permanentId: string;\n  newCardName: string;\n};\n\ntype UpdateChangePermanentOwner = {\n  type: UpdateType.CHANGE_PERMANENT_OWNER;\n  permanentId: string;\n  owner: Player;\n};\n\ntype UpdateMove = {\n  type: UpdateType.MOVE;\n  permanentId: string;\n  slot: Slot;\n};\n\ntype UpdateSwap = {\n  type: UpdateType.SWAP;\n  permanent1Id: string;\n  permanent2Id: string;\n};\n\nexport type UpdateDrawCard = {\n  type: UpdateType.DRAW_CARD;\n  player: Player;\n  card: Card;\n  handCardId: string;\n  shouldPopDrawPile: boolean;\n  /**\n   * The card to set as the next top card in the draw pile, if\n   * the consumer has access to that state.\n   * May also be omitted if there is not change to the top card.\n   */\n  nextTopCard?: Card | null;\n};\n\nexport type UpdateRemoveFromDrawPile = {\n  type: UpdateType.REMOVE_FROM_DRAW_PILE;\n  player: Player;\n  drawPileIndex: number;\n  /**\n   * The card to set as the next top card in the draw pile, if\n   * the consumer has access to that state.\n   * May also be omitted if there is not change to the top card.\n   */\n  nextTopCard?: Card | null;\n};\n\nexport type UpdateDiscardCard = {\n  type: UpdateType.DISCARD_CARD;\n  player: Player;\n  handCardId: string;\n};\n\ntype UpdateDamagePermanent = {\n  type: UpdateType.DAMAGE_PERMANENT;\n  permanentId: string;\n  damage: number;\n  attackerId?: string; // if attributed to another permanent\n};\n\ntype UpdateAddCounter = {\n  type: UpdateType.ADD_COUNTER;\n  permanentId: string;\n  counter: Counter;\n};\n\ntype UpdateRemoveCounter = {\n  type: UpdateType.REMOVE_COUNTER;\n  permanentId: string;\n  counterIndex: number;\n};\n\ntype UpdateSetCounter = {\n  type: UpdateType.SET_COUNTER;\n  permanentId: string;\n  counterIndex: number;\n  counterVal?: number; // if unset, counter value becomes unset\n  explanation?: string;\n};\n\n/** A battle-specific update for initializing the shared extra state. */\nexport type UpdateInitSharedExtraState = {\n  type: UpdateType.INIT_SHARED_EXTRA_STATE;\n  /** The initial sharedExtraState. */\n  sharedExtraState: object;\n};\n\n/** A battle-specific update for the shared extra state. */\nexport type UpdateModifySharedExtraState = {\n  type: UpdateType.MODIFY_SHARED_EXTRA_STATE;\n  /** An object describing the update that needs to be performed. */\n  updInfo: object;\n};\n\nexport type UpdateModifyStats = {\n  type: UpdateType.MODIFY_STATS;\n  player: Player;\n  diffSummons?: number;\n  diffDestroys?: number;\n  diffDamageDealt?: number;\n  diffFactionSummons?: number;\n};\n\nexport type UpdateSetStepNumber = {\n  type: UpdateType.SET_STEP_NUMBER;\n  player: Player;\n  stepNumber: number;\n};\n\nexport type UpdateWaitAnimate = {\n  type: UpdateType.WAIT_ANIMATE;\n  waitTime: number;\n};\n\ntype UpdateKeyframe = {\n  type: UpdateType.SET_KEYFRAME;\n  keyframe: Keyframe | null;\n};\n\ntype UpdateAnnounce = {\n  type: UpdateType.ANNOUNCE;\n  message: string;\n};\n\ntype UpdateAnnounceSummonPermanent = {\n  type: UpdateType.ANNOUNCE_SUMMON_PERMANENT;\n  player: Player;\n  cardName: string;\n};\n\ntype UpdateAnnounceMove = {\n  type: UpdateType.ANNOUNCE_MOVE;\n  player: Player;\n  cardName: string;\n};\n\ntype UpdateAnnounceAttackCard = {\n  type: UpdateType.ANNOUNCE_ATTACK_CARD;\n  cardName: string;\n  target: string;\n  damage: number;\n};\n\n// TODO announce draw card?\n\ntype UpdateSetDrawPile = {\n  type: UpdateType.SET_DRAW_PILE;\n  player: Player;\n  drawPile: ReadonlyArray<Card>;\n};\n\ntype UpdateSetDevKnobs = {\n  type: UpdateType.SET_DEV_KNOBS;\n  devKnobs: DevKnobs;\n};\n\n// Deckbuilding-specific updates\n\ntype UpdateDeckbuildingOverrideState = {\n  type: UpdateType.DECKBUILDING_OVERRIDE_STATE;\n};\n\nexport type Update = Readonly<\n  | UpdateSystemEnableMember\n  | UpdateSystemUpdateDeck\n  | UpdateSystemUpdateMasteryTree\n  | UpdateSystemRoomComplete\n  | UpdateStepAck\n  | UpdateKick\n  | UpdateOverrideState\n  | UpdateReset\n  | UpdateAdvancePhase\n  | UpdateSetGameResult\n  | UpdateStartTurn\n  | UpdateEndTurn\n  | UpdateSetDrawPile\n  | UpdateSetDevKnobs\n  | UpdateAddGems\n  | UpdateRemoveGems\n  | UpdateClearGems\n  | UpdateCreatePermanent\n  | UpdateRemovePermanent\n  | UpdateReadyPermanent\n  | UpdateUnreadyPermanent\n  | UpdateTransformPermanent\n  | UpdateChangePermanentOwner\n  | UpdateMove\n  | UpdateSwap\n  | UpdateDrawCard\n  | UpdateRemoveFromDrawPile\n  | UpdateDiscardCard\n  | UpdateDamagePermanent\n  | UpdateAddCounter\n  | UpdateRemoveCounter\n  | UpdateSetCounter\n  | UpdateInitSharedExtraState\n  | UpdateModifySharedExtraState\n  | UpdateModifyStats\n  | UpdateSetStepNumber\n  | UpdateWaitAnimate\n  | UpdateKeyframe\n  | UpdateAnnounce\n  | UpdateAnnounceSummonPermanent\n  | UpdateAnnounceMove\n  | UpdateAnnounceAttackCard\n  | UpdateDeckbuildingOverrideState\n>;\n","import {\n  SyncDataBackendReq,\n  CheckAnswerBackendReq,\n  GetInitDataBackendResp,\n  GetInitTeamDataBackendResp,\n  CheckAnswerBackendResp,\n  BackendInterface,\n} from \"game-server/backend-interface/BackendInterface\";\n\nexport type BackendInterfaceControllerOpts = {\n  backend: BackendInterface;\n  dumpBackendRequests: boolean;\n};\n\nexport class BackendInterfaceController implements BackendInterface {\n  dumpRequests: boolean;\n  backend: BackendInterface;\n\n  constructor(opts: BackendInterfaceControllerOpts) {\n    this.dumpRequests = opts.dumpBackendRequests;\n    this.backend = opts.backend;\n  }\n\n  async getInitData(): Promise<GetInitDataBackendResp> {\n    if (this.dumpRequests) {\n      console.log(`req getInitData`);\n    }\n    const resp = await this.backend.getInitData();\n    if (this.dumpRequests) {\n      console.log(`resp getInitData`);\n    }\n    return resp;\n  }\n\n  async getInitTeamData(teamId: string): Promise<GetInitTeamDataBackendResp> {\n    if (this.dumpRequests) {\n      console.log(`req getInitTeamData`);\n    }\n    const resp = await this.backend.getInitTeamData(teamId);\n    if (this.dumpRequests) {\n      console.log(`resp getInitTeamData`);\n    }\n    return resp;\n  }\n\n  async syncData(req: SyncDataBackendReq) {\n    if (this.dumpRequests) {\n      console.log(`req syncData`);\n    }\n    const resp = await this.backend.syncData(req);\n    if (this.dumpRequests) {\n      console.log(`resp syncData`);\n    }\n    return resp;\n  }\n\n  async checkAnswer(\n    req: CheckAnswerBackendReq\n  ): Promise<CheckAnswerBackendResp> {\n    if (this.dumpRequests) {\n      console.log(`req solve`);\n    }\n    const isCorrect = await this.backend.checkAnswer(req);\n    if (this.dumpRequests) {\n      console.log(`resp solve`);\n    }\n    return isCorrect;\n  }\n}\n","import { Deck } from \"engine/types/decks\";\nimport { Player, SerializedCheckpointState } from \"engine/types/game-state\";\nimport { Faction } from \"engine/types/factions\";\nimport { MasteryTree } from \"game-server/masteries\";\nimport { SavedGameRoom } from \"game-server/Room\";\nimport { BackendSyncReqPacket } from \"game-server/backend-interface/backend-sync\";\n\nexport enum LoseReason {\n  /** A normal loss, usually by having all bases destroyed. */\n  NORMAL = \"normal\",\n  /** Ran out of time. */\n  TIME = \"time\",\n  /** Resigned voluntarily. */\n  RESIGN = \"resign\",\n}\n\nexport type BackendRoom = {\n  roomId: string;\n  puzName: string;\n  /**\n   * The host puzzle. In the case of instancer rooms, hostPuzName\n   * refers to the instancer puzzle itself, while puzName refers to\n   * the puzzle being hosted.\n   */\n  hostPuzName: string;\n  /**\n   * Timestamp of when the room was created. Only used to ensure an\n   * ordering when requesting the latest room from Django.\n   */\n  createTime: number;\n\n  p1TeamId?: string;\n  p2TeamId?: string;\n  p1Faction?: Faction;\n  p2Faction?: Faction;\n  savedRoom?: SavedGameRoom;\n\n  /**\n   * Information about the game end. Null signifies that the game\n   * has not ended.\n   */\n  gameEndInfo?: {\n    /**\n     * The total time spent active in milliseconds, used for\n     * speedrun calculations.\n     */\n    totalTime: number;\n    /** Whether the puzzle was solved. */\n    isSolved: boolean;\n    /** Who won. */\n    winner: Player;\n    /** How the loss happened. */\n    loseReason: LoseReason;\n\n    p1FactionScoreContribution?: number;\n    p2FactionScoreContribution?: number;\n  };\n};\n\nexport type BackendDeck = {\n  teamId: string;\n  slot: number;\n  deck: Deck;\n};\n\nexport type BackendAnswerSubmission = {\n  teamId: string;\n  puzName: string;\n  timestamp: number;\n  answer: string;\n  isCorrect: boolean;\n  usedFreeAnswer: boolean;\n};\n\nexport const makeBattleSolveAnswerSubmission = (\n  teamId: string,\n  puzName: string,\n  timestamp: number\n): BackendAnswerSubmission => {\n  return {\n    teamId,\n    puzName,\n    timestamp,\n    answer: \"battle-solve\",\n    isCorrect: true,\n    usedFreeAnswer: false,\n  };\n};\n\nexport type BackendUnlock = {\n  teamId: string;\n  puzName: string;\n  /** Time when the puzzle was unlocked. */\n  timestamp: number;\n};\n\nexport type BackendViewTime = {\n  teamId: string;\n  puzName: string;\n  /** Time when the puzzle was first accessed. */\n  viewTime: number;\n};\n\nexport type BackendCardUnlock = {\n  teamId: string;\n  puzName: string | null;\n  cardName: string;\n  timestamp: number;\n};\n\nexport type BackendErratum = {\n  puzzle: string | null;\n  text: string;\n  timestamp: number;\n  published: boolean;\n};\n\nexport enum BackendNotificationDataType {\n  HINT_ANSWERED = \"hint_answered\",\n  TEAM_MEMBERS = \"team_members\",\n  ERRATUM = \"erratum\",\n}\n\n// Solve/unlock/victory notifications are handled by HuntLib.\nexport type BackendNotificationHintAnsweredData = {\n  type: BackendNotificationDataType.HINT_ANSWERED;\n  teamId: string;\n  puzName: string;\n};\n\nexport type BackendNotificationTeamMembersData = {\n  type: BackendNotificationDataType.TEAM_MEMBERS;\n  teamId: string;\n  members: string[];\n};\n\nexport type BackendNotificationErratumData = {\n  type: BackendNotificationDataType.ERRATUM;\n  erratumId: string;\n} & BackendErratum;\n\nexport type BackendNotification =\n  | BackendNotificationHintAnsweredData\n  | BackendNotificationTeamMembersData\n  | BackendNotificationErratumData;\n\nexport type BackendOwnedTeamState = {\n  hintsTotal: number;\n  /** puzNames of puzzles that hints are used on. */\n  hintsUsed: string[];\n  extraGuesses: {\n    [puzName: string]: number;\n  };\n};\n\nexport type TeamPuz = {\n  teamId: string;\n  puzName: string;\n};\n\nexport type TeamCard = {\n  teamId: string;\n  cardName: string;\n};\n\nexport type BackendPreferredDeck = TeamPuz & {\n  slot: number;\n};\n\nexport type BackendBlockedTeam = {\n  teamId: string;\n  targetTeamId: string;\n};\n\nexport type BackendCutsceneChoice = {\n  keyframeId: string;\n  dialogOptionIndex: number;\n};\n\nexport type GetInitDataBackendResp = {\n  /**\n   * Unique identifier for the game server instance.\n   * Should be different every time getInitData is called, even\n   * if called again from the same machine.\n   */\n  gameServerId: string;\n  /** Initial team data for all teams. */\n  teams: { [teamId: string]: GetInitTeamDataBackendResp };\n  factionHistory: { [key: string]: number };\n\n  // Static hunt config to keep in sync with Django if we change them.\n  maxGuessesPerPuzzle: number;\n  huntStartTime: number;\n  huntEndTime: number;\n\n  /**\n   * The next index for notifications that the server should start\n   * pulling from.\n   */\n  notifsNextIndex: number;\n\n  errata: { [erratumId: string]: BackendErratum };\n  unclaimedHints: number;\n};\n\nexport type GetInitTeamDataBackendResp = {\n  userId: string;\n  displayName: string;\n  isInactive: boolean;\n  isHidden: boolean;\n  members: string[];\n  faction: Faction | null;\n  factionScoreContributions: { [faction in Faction]: number };\n  /**\n   * The most recent room for each puzzle. May be inactive.\n   * Only relevant as part of the init full sync in GetInitData.\n   * If a team joins midway, we know they would not be joined to\n   * any rooms.\n   */\n  rooms: { [puzName: string]: BackendRoom };\n  decks: BackendDeck[];\n  masteryTree: MasteryTree | null;\n  /** puzNames of puzzles viewed by the team. */\n  views: ReadonlyArray<string>;\n  /**\n   * Cards unlocked by the team, mapped to the puzName of the puzzles\n   * that unlocked them, if any.\n   */\n  cardUnlocks: { [cardName: string]: string | null };\n  /** Time when each puzzle was unlocked. */\n  unlockTimes: { [puzName: string]: number };\n  /** Time when each puzzle was solved. */\n  solveTimes: { [puzName: string]: number };\n  /** Fastest completion (with solve) times for each battle. */\n  speedrunTimes: { [puzName: string]: number };\n  /** Number of wrong guesses, for each puzzle with any wrong guesses. */\n  numWrongGuesses: { [puzName: string]: number };\n  /** The last used deck slot for each puzzle. */\n  preferredDecks: { [puzName: string]: number };\n  /** Puzzle selections for instancer rooms. */\n  puzzleSelections: { [puzName: string]: string };\n  /** Saved checkpoints for each puzzle. */\n  checkpoints: {\n    [puzName: string]: {\n      [slot: number]: SerializedCheckpointState;\n    };\n  };\n  /** Teams blocked in PvP. */\n  blockedTeams: { [teamId: string]: boolean };\n  /** Whether the player is in the PvP ring. */\n  isInRing: boolean;\n\n  /**\n   * Team state \"owned\" by the backend, meaning that updates to this\n   * state may be made directly to the backend and so must be\n   * periodically synced fromm the backend to the Node server.\n   */\n  backendOwned: BackendOwnedTeamState;\n};\n\nexport type SyncDataBackendReq = {\n  /** If specified, pulls notifications starting from the given index. */\n  notifsStartIndex?: number;\n\n  teamState?: { [teamId: string]: BackendSyncReqPacket };\n  /** Rooms to create or set properties of. */\n  rooms?: { [roomId: string]: BackendRoom };\n  factionHistory?: { [key: string]: number };\n};\n\nexport type SyncDataBackendResp = {\n  notifs?: BackendNotification[];\n  notifsNextIndex?: number;\n  teams?: { [teamId: string]: BackendOwnedTeamState };\n  unclaimedHints?: number;\n};\n\nexport type CheckAnswerBackendReq = {\n  teamId: string;\n  puzName: string;\n  /**\n   * Answer to solve with. This may be omitted if no answer is\n   * required (such as for battles), or when overriding solve state.\n   */\n  answer: string;\n};\n\nexport enum CheckAnswerBackendRespType {\n  ALREADY_SOLVED = \"already_solved\",\n  NO_GUESSES = \"no_guesses\",\n  PUZZLE_MESSAGES = \"puzzle_messages\",\n  NO_ANSWER = \"no_answer\",\n  TRIED_BEFORE = \"tried_before\",\n  SUCCESS = \"success\",\n}\n\nexport type CheckAnswerBackendResp =\n  | {\n      type:\n        | CheckAnswerBackendRespType.ALREADY_SOLVED\n        | CheckAnswerBackendRespType.NO_GUESSES\n        | CheckAnswerBackendRespType.NO_ANSWER;\n    }\n  | {\n      type: CheckAnswerBackendRespType.PUZZLE_MESSAGES;\n      messages: ReadonlyArray<string>;\n    }\n  | {\n      type: CheckAnswerBackendRespType.TRIED_BEFORE;\n      submittedAnswer: string;\n    }\n  | {\n      type: CheckAnswerBackendRespType.SUCCESS;\n      submittedAnswer: string;\n      isCorrect: boolean;\n    };\n\n/**\n * Interface to wrap all Django interaction functionality.\n * All Django interface calls should be wrapped up in here\n * so that we can swap them out in Django-less mode.\n *\n * These should hook into the URLs provided in cardsdata/urls.py\n */\nexport interface BackendInterface {\n  /**\n   * Get initial data to bootstrap the server instance.\n   */\n  getInitData: () => Promise<GetInitDataBackendResp>;\n  /**\n   * Get initial persistent data for a team.\n   */\n  getInitTeamData: (teamId: string) => Promise<GetInitTeamDataBackendResp>;\n  /**\n   * Sync data to the server.\n   */\n  syncData: (req: SyncDataBackendReq) => Promise<SyncDataBackendResp>;\n  /**\n   * Check an answer for a team without updating database state.\n   * This needs to be a backend call if we want to support a wider\n   * response set, like checking the guess limit, or if the answer\n   * was submitted before.\n   */\n  checkAnswer: (req: CheckAnswerBackendReq) => Promise<CheckAnswerBackendResp>;\n}\n","import { MasteryTree } from \"game-server/masteries\";\nimport {\n  BackendDeck,\n  BackendAnswerSubmission,\n  BackendUnlock,\n  BackendCardUnlock,\n  BackendCutsceneChoice,\n} from \"game-server/backend-interface/BackendInterface\";\nimport { GameServerConfig } from \"game-server/GameServer\";\nimport { DirtyStateType, DirtyState } from \"game-server/monitoring\";\nimport { Faction } from \"engine/types/factions\";\nimport { SerializedCheckpointState } from \"engine/types/game-state\";\n\n/**\n * Amount of time to throttle the slow sync. For now, don't throttle\n * it; the sync period will depend on the periodic sync frequency.\n */\nexport const SLOW_SYNC_THROTTLE_MS = 0;\n\nexport type BackendSyncReqPacket = {\n  /** Inactive state to update. */\n  isInactive?: boolean;\n  /** Hidden state to update. */\n  isHidden?: boolean;\n  /** Display name to update */\n  displayName?: string;\n  /** Faction to update. */\n  faction?: Faction | null;\n  /** Faction score contributions to update. */\n  factionScoreContributions?: { [faction in Faction]?: number };\n  /** Decks to create or overwrite. */\n  decks?: { [slot: number]: BackendDeck };\n  /** Mastery tree to create or overwrite. */\n  masteryTree?: MasteryTree;\n  /** Answer submissions to add/fish puzzle solves to delete. */\n  answerSubmissions?: {\n    [puzName: string]: {\n      [answer: string]: BackendAnswerSubmission;\n    } | null;\n  };\n  /** Unlocks to add/delete. */\n  unlocks?: { [puzName: string]: BackendUnlock | null };\n  /** Card unlocks to add/delete. */\n  cardUnlocks?: { [cardName: string]: BackendCardUnlock | null };\n  /** View times to update. Only used for battles. */\n  viewTimes?: { [puzName: string]: number };\n  /** Slots of preferred decks to set. */\n  preferredDecks?: { [puzName: string]: number };\n  /** Puzzle selections for instancer rooms. */\n  puzzleSelections?: { [puzName: string]: string | null };\n  /** Saved checkpoints for each puzzle. */\n  checkpoints?: {\n    [puzName: string]: { [slot: number]: SerializedCheckpointState };\n  };\n  /** teamIds of blocked teams to add/delete. */\n  blockedTeams?: { [teamId: string]: boolean };\n  /** Whether we're in the ring, to set or unset. */\n  isInRing?: boolean;\n  /** Choices made during cutscene keyframes with dialog options. */\n  cutsceneChoices?: BackendCutsceneChoice[];\n};\n\nexport class BackendSyncReqController {\n  packet: BackendSyncReqPacket;\n  tracker: SyncTracker;\n\n  constructor(\n    serverConfig: GameServerConfig,\n    syncType: SyncObjectType,\n    onDirtyStateChange: (dirtyState: DirtyState) => void\n  ) {\n    this.packet = {};\n    this.tracker = new SyncTracker(serverConfig, syncType, onDirtyStateChange);\n  }\n\n  isDirty(): boolean {\n    return Object.keys(this.packet).length > 0;\n  }\n\n  /**\n   * Merge a new packet into the pending packet, taking care to ensure\n   * that the final state reflects the application of the incoming\n   * state after the initial state. If there are conflicts within\n   * the incoming packet itself, deletes take priority over adds.\n   */\n  mergePacket({\n    isInactive,\n    isHidden,\n    displayName,\n    faction,\n    factionScoreContributions,\n    decks,\n    masteryTree,\n    answerSubmissions,\n    unlocks,\n    cardUnlocks,\n    viewTimes,\n    preferredDecks,\n    puzzleSelections,\n    checkpoints,\n    blockedTeams,\n    isInRing,\n    cutsceneChoices,\n  }: BackendSyncReqPacket): void {\n    if (isInactive !== undefined) this.packet.isInactive = isInactive;\n    if (isHidden !== undefined) this.packet.isHidden = isHidden;\n    if (displayName !== undefined) this.packet.displayName = displayName;\n    if (faction !== undefined) this.packet.faction = faction;\n    this.packet.factionScoreContributions = Object.assign(\n      this.packet.factionScoreContributions ?? {},\n      factionScoreContributions ?? {}\n    );\n    this.packet.decks = Object.assign(this.packet.decks ?? {}, decks ?? {});\n    if (masteryTree !== undefined) this.packet.masteryTree = masteryTree;\n    for (const [puzName, puzSubmissions] of Object.entries(\n      answerSubmissions ?? {}\n    )) {\n      this.packet.answerSubmissions ??= {};\n      if (puzSubmissions === null) {\n        this.packet.answerSubmissions[puzName] = null;\n        continue;\n      }\n      this.packet.answerSubmissions[puzName] = Object.assign(\n        this.packet.answerSubmissions[puzName] ?? {},\n        puzSubmissions\n      );\n    }\n    this.packet.unlocks = Object.assign(\n      this.packet.unlocks ?? {},\n      unlocks ?? {}\n    );\n    this.packet.cardUnlocks = Object.assign(\n      this.packet.cardUnlocks ?? {},\n      cardUnlocks ?? {}\n    );\n    this.packet.viewTimes = Object.assign(\n      this.packet.viewTimes ?? {},\n      viewTimes ?? {}\n    );\n    this.packet.preferredDecks = Object.assign(\n      this.packet.preferredDecks ?? {},\n      preferredDecks ?? {}\n    );\n    this.packet.puzzleSelections = Object.assign(\n      this.packet.puzzleSelections ?? {},\n      puzzleSelections ?? {}\n    );\n    this.packet.checkpoints = Object.assign(\n      this.packet.checkpoints ?? {},\n      checkpoints ?? {}\n    );\n    this.packet.blockedTeams = Object.assign(\n      this.packet.blockedTeams ?? {},\n      blockedTeams ?? {}\n    );\n    if (isInRing !== undefined) this.packet.isInRing = isInRing;\n    if (cutsceneChoices !== undefined) {\n      this.packet.cutsceneChoices ??= [];\n      this.packet.cutsceneChoices.push(...cutsceneChoices);\n    }\n\n    // Remove empty entries.\n    this.resolvePacket({});\n\n    if (this.isDirty()) this.tracker.handleModify();\n  }\n\n  /**\n   * Takes in a snapshot representing synced data and removes it from\n   * the pending packet, taking into consideration the fact that\n   * the pending packet might have been modified while the sync\n   * was in process.\n   */\n  private resolvePacket({\n    isInactive,\n    isHidden,\n    displayName,\n    faction,\n    factionScoreContributions,\n    decks,\n    masteryTree,\n    answerSubmissions,\n    unlocks,\n    cardUnlocks,\n    viewTimes,\n    preferredDecks,\n    puzzleSelections,\n    checkpoints,\n    blockedTeams,\n    isInRing,\n    cutsceneChoices,\n  }: BackendSyncReqPacket): void {\n    if (\n      this.packet.isInactive !== undefined &&\n      isInactive === this.packet.isInactive\n    )\n      delete this.packet.isInactive;\n    if (this.packet.isHidden !== undefined && isHidden === this.packet.isHidden)\n      delete this.packet.isHidden;\n    if (\n      this.packet.displayName !== undefined &&\n      displayName === this.packet.displayName\n    )\n      delete this.packet.displayName;\n    if (this.packet.faction !== undefined && faction === this.packet.faction)\n      delete this.packet.faction;\n    for (const [kFaction, factionScoreContribution] of Object.entries(\n      factionScoreContributions ?? {}\n    )) {\n      const faction = kFaction as Faction;\n      if (this.packet.factionScoreContributions === undefined) continue;\n      if (this.packet.factionScoreContributions[faction] === undefined)\n        continue;\n      if (\n        this.packet.factionScoreContributions[faction] !==\n        factionScoreContribution\n      )\n        continue;\n      delete this.packet.factionScoreContributions[faction];\n    }\n    if (Object.keys(this.packet.factionScoreContributions ?? {}).length === 0)\n      delete this.packet.factionScoreContributions;\n\n    // For time-based syncs (decks/mastery trees), we are guaranteed\n    // that a new object will not be added if an existing object (with\n    // the same ID) is already in the packet.\n\n    for (const slot of Object.keys(decks ?? {})) {\n      if (this.packet.decks === undefined) continue;\n      delete this.packet.decks[Number(slot)];\n    }\n    if (Object.keys(this.packet.decks ?? {}).length === 0)\n      delete this.packet.decks;\n\n    if (masteryTree !== undefined) delete this.packet.masteryTree;\n\n    // If we ever e.g. find ourselves requesting to sync two different\n    // solve records for the same puzzle, then it does not matter which\n    // one gets synced. So, we can just check e.g. whether we want a\n    // puzzle solved or unsolved to resolve its pending sync state.\n\n    for (const [puzName, puzSubmissions] of Object.entries(\n      answerSubmissions ?? {}\n    )) {\n      if (this.packet.answerSubmissions === undefined) continue;\n      const pendingPuzSubmissions = this.packet.answerSubmissions[puzName];\n      if (pendingPuzSubmissions === undefined) continue;\n      if (puzSubmissions === null) {\n        if (pendingPuzSubmissions !== null) continue;\n        delete this.packet.answerSubmissions[puzName];\n      } else {\n        if (pendingPuzSubmissions === null) continue;\n        for (const [answer, submissions] of Object.entries(\n          puzSubmissions ?? {}\n        )) {\n          delete pendingPuzSubmissions[answer];\n        }\n        if (Object.keys(pendingPuzSubmissions).length === 0)\n          delete this.packet.answerSubmissions[puzName];\n      }\n    }\n    if (Object.keys(this.packet.answerSubmissions ?? {}).length === 0)\n      delete this.packet.answerSubmissions;\n\n    for (const [puzName, unlock] of Object.entries(unlocks ?? {})) {\n      if (this.packet.unlocks === undefined) continue;\n      const pendingUnlock = this.packet.unlocks[puzName];\n      if (pendingUnlock === undefined) continue;\n      if ((pendingUnlock === null) !== (unlock === null)) continue;\n      delete this.packet.unlocks[puzName];\n    }\n    if (Object.keys(this.packet.unlocks ?? {}).length === 0)\n      delete this.packet.unlocks;\n\n    for (const [puzName, cardUnlock] of Object.entries(cardUnlocks ?? {})) {\n      if (this.packet.cardUnlocks === undefined) continue;\n      const pendingCardUnlock = this.packet.cardUnlocks[puzName];\n      if (pendingCardUnlock === undefined) continue;\n      if ((pendingCardUnlock === null) !== (cardUnlock === null)) continue;\n      if (\n        (pendingCardUnlock?.puzName ?? null) !== (cardUnlock?.puzName ?? null)\n      )\n        continue;\n      delete this.packet.cardUnlocks[puzName];\n    }\n    if (Object.keys(this.packet.cardUnlocks ?? {}).length === 0)\n      delete this.packet.cardUnlocks;\n\n    // View times will only ever be set once, so we have nothing to check.\n    for (const puzName of Object.keys(viewTimes ?? {})) {\n      if (this.packet.viewTimes === undefined) continue;\n      delete this.packet.viewTimes[puzName];\n    }\n    if (Object.keys(this.packet.viewTimes ?? {}).length === 0)\n      delete this.packet.viewTimes;\n\n    for (const [puzName, slot] of Object.entries(preferredDecks ?? {})) {\n      if (this.packet.preferredDecks === undefined) continue;\n      const pendingSlot = this.packet.preferredDecks[puzName];\n      if (pendingSlot === undefined) continue;\n      if (pendingSlot !== slot) continue;\n      delete this.packet.preferredDecks[puzName];\n    }\n    if (Object.keys(this.packet.preferredDecks ?? {}).length === 0)\n      delete this.packet.preferredDecks;\n\n    for (const [puzName, selection] of Object.entries(puzzleSelections ?? {})) {\n      if (this.packet.puzzleSelections === undefined) continue;\n      const pendingSelection = this.packet.puzzleSelections[puzName];\n      if (pendingSelection === undefined) continue;\n      if (pendingSelection !== selection) continue;\n      delete this.packet.puzzleSelections[puzName];\n    }\n    if (Object.keys(this.packet.puzzleSelections ?? {}).length === 0)\n      delete this.packet.puzzleSelections;\n\n    for (const [puzName, states] of Object.entries(checkpoints ?? {})) {\n      if (this.packet.checkpoints === undefined) continue;\n      const pendingStates = this.packet.checkpoints[puzName];\n      if (pendingStates === undefined) continue;\n      (() => {\n        if (Object.keys(pendingStates).length !== Object.keys(states).length)\n          return;\n        for (const [slot, state] of Object.entries(states)) {\n          const pendingState = pendingStates[Number(slot)];\n          if (pendingState === undefined) return;\n          if (pendingState.turnNumber !== state.turnNumber) return;\n          if (pendingState.roomId !== state.roomId) return;\n          if (pendingState.timestamp !== state.timestamp) return;\n          if (pendingState.gainedScore !== state.gainedScore) return;\n          if (pendingState.serializedState !== state.serializedState) return;\n        }\n        delete this.packet.checkpoints[puzName];\n      })();\n    }\n    if (Object.keys(this.packet.checkpoints ?? {}).length === 0)\n      delete this.packet.checkpoints;\n\n    for (const [teamId, isBlocked] of Object.entries(blockedTeams ?? {})) {\n      if (this.packet.blockedTeams === undefined) continue;\n      const pendingIsBlocked = this.packet.blockedTeams[teamId];\n      if (pendingIsBlocked === undefined) continue;\n      if (pendingIsBlocked !== isBlocked) continue;\n      delete this.packet.blockedTeams[teamId];\n    }\n    if (Object.keys(this.packet.blockedTeams ?? {}).length === 0)\n      delete this.packet.blockedTeams;\n\n    if (this.packet.isInRing !== undefined && isInRing === this.packet.isInRing)\n      delete this.packet.isInRing;\n\n    if (cutsceneChoices !== undefined) {\n      if (this.packet.cutsceneChoices === undefined)\n        throw new Error(\"expect cutscene choices to be prefix of packet\");\n      this.packet.cutsceneChoices.splice(0, cutsceneChoices.length);\n    }\n    if ((this.packet.cutsceneChoices ?? []).length === 0)\n      delete this.packet.cutsceneChoices;\n  }\n\n  /**\n   * Starts a sync, and returns a snapshot of the current packet,\n   * which is a clone of the current packet at the appropriate depth.\n   *\n   * Returns null if there is nothing to sync. In this case, a sync\n   * is not considered to have started.\n   */\n  startSync(): BackendSyncReqPacket | null {\n    if (!this.tracker.snapshot()) return null;\n    if (!this.isDirty()) {\n      this.tracker.handleSyncResult(true);\n      return null;\n    }\n\n    const {\n      factionScoreContributions,\n      decks,\n      answerSubmissions,\n      unlocks,\n      cardUnlocks,\n      viewTimes,\n      preferredDecks,\n      puzzleSelections,\n      checkpoints,\n      blockedTeams,\n    } = this.packet;\n    return {\n      ...this.packet,\n      factionScoreContributions:\n        factionScoreContributions === undefined\n          ? undefined\n          : { ...factionScoreContributions },\n      decks: decks === undefined ? undefined : { ...decks },\n      answerSubmissions:\n        answerSubmissions === undefined\n          ? undefined\n          : Object.fromEntries(\n              Object.entries(answerSubmissions).map(\n                ([puzName, puzSubmissions]) => [\n                  puzName,\n                  puzSubmissions === null ? null : { ...puzSubmissions },\n                ]\n              )\n            ),\n      unlocks: unlocks === undefined ? undefined : { ...unlocks },\n      cardUnlocks: cardUnlocks === undefined ? undefined : { ...cardUnlocks },\n      viewTimes: viewTimes === undefined ? undefined : { ...viewTimes },\n      preferredDecks:\n        preferredDecks === undefined ? undefined : { ...preferredDecks },\n      puzzleSelections:\n        puzzleSelections === undefined ? undefined : { ...puzzleSelections },\n      checkpoints: checkpoints === undefined ? undefined : { ...checkpoints },\n      blockedTeams:\n        blockedTeams === undefined ? undefined : { ...blockedTeams },\n    };\n  }\n\n  /**\n   * Takes in a snapshot from a sync. After a sync is complete,\n   * removes the synced data from the pending packet, taking into\n   * consideration the fact that the pending packet might have been\n   * modified while the sync was in process.\n   *\n   * A null snapshot indicates that the sync failed.\n   */\n  endSync(snapshot: BackendSyncReqPacket | null): void {\n    if (snapshot !== null) this.resolvePacket(snapshot);\n    this.tracker.handleSyncResult(snapshot !== null);\n  }\n}\n\n/**\n * Utility class to manage sync loops. A user of this controller\n * independently manages a queue of sync tasks, and provides a\n * runSyncAsync method that performs a single sync of some subset\n * of the sync tasks. startLoopAsync can then be used to repeatedly\n * run the provided runSyncAsync until there is nothing left to sync.\n *\n * The user may also add callbacks that wait on pending syncs.\n * These are called once a single iteration of the sync loop completes,\n * because those callbacks do not care if any additional sync tasks\n * are added while that iteration was running.\n */\nexport class SyncLoopController {\n  isSyncInFlight: boolean;\n  /** Callbacks waiting on the sync. */\n  pendingCallbacks: (() => void)[];\n  /**\n   * Performs a sync if there is anything to sync at call time.\n   * Returns true if the loop is complete, i.e. we have tried to\n   * sync all pending sync items.\n   */\n  runSyncAsync: () => Promise<boolean>;\n\n  constructor(runSyncAsync: () => Promise<boolean>) {\n    this.isSyncInFlight = false;\n    this.pendingCallbacks = [];\n    this.runSyncAsync = runSyncAsync;\n  }\n\n  /**\n   * Run the sync loop, if one isn't already running.\n   * This does not guarantee the completion of any sync tasks.\n   * If we need to wait for sync tasks, use triggerLoopAndWaitAsync.\n   */\n  async triggerLoopAsync() {\n    if (this.isSyncInFlight) return;\n    this.isSyncInFlight = true;\n\n    // Keep syncing until the loop is complete.\n    while (true) {\n      // Don't actually modify pendingCallbacks until runSyncAsync\n      // completes without errors.\n      const numCallbacks = this.pendingCallbacks.length;\n\n      let isLoopComplete = false;\n      try {\n        isLoopComplete = await this.runSyncAsync();\n      } catch (err) {\n        // If we hit an error with this sync, break out of the loop\n        // to ensure that we release the lock, and try again later\n        // as part of slow sync.\n        console.error(err);\n        break;\n      }\n\n      // Complete the callbacks even if nothing was synced.\n      for (const callback of this.pendingCallbacks.splice(0, numCallbacks)) {\n        try {\n          callback();\n        } catch (err) {\n          // If we fail here, ensure that we fully clean up state\n          // by continuing to process the other callbacks.\n          console.error(err);\n        }\n      }\n\n      if (isLoopComplete) break;\n    }\n\n    this.isSyncInFlight = false;\n  }\n\n  /**\n   * Trigger the loop and wait for current sync tasks to finish syncing.\n   * Note that the loop may continue running even after this function\n   * returns, if more tasks got added to the queue in the meantime.\n   */\n  async triggerLoopAndWaitAsync() {\n    await new Promise<void>((resolve, reject) => {\n      this.pendingCallbacks.push(resolve);\n      // Don't block on the loop completion.\n      this.triggerLoopAsync();\n    });\n  }\n}\n\nexport enum SyncObjectType {\n  FAST = \"fast\",\n  MISC = \"misc\",\n  MASTERY_TREE = \"mastery_tree\",\n  DECK = \"deck\",\n  ROOM = \"room\",\n  CHECKPOINTS = \"checkpoints\",\n  ANSWER = \"answer\",\n}\n\nexport class SyncTracker {\n  serverConfig: GameServerConfig;\n  syncType: SyncObjectType;\n  onDirtyStateChange: (dirtyState: DirtyState) => void;\n  revNumber: number;\n  syncedRevNumber: number;\n  modifyTime: number;\n  syncTime: number;\n\n  /** The revision number that is currently being synced, if any. */\n  syncingRevNumber: number | null;\n\n  constructor(\n    serverConfig: GameServerConfig,\n    syncType: SyncObjectType,\n    onDirtyStateChange: (dirtyState: DirtyState) => void\n  ) {\n    this.serverConfig = serverConfig;\n    this.syncType = syncType;\n    this.onDirtyStateChange = onDirtyStateChange;\n    this.revNumber = 0;\n    this.syncedRevNumber = 0;\n    const timeNow = new Date().getTime();\n    this.modifyTime = timeNow;\n    this.syncTime = timeNow;\n\n    this.syncingRevNumber = null;\n  }\n\n  /** Returns if a sync is needed. */\n  snapshot(): boolean {\n    if (this.revNumber === this.syncedRevNumber) return false;\n    if (\n      this.modifyTime - this.syncTime <\n      this.serverConfig.slowSyncThrottle[this.syncType]\n    )\n      return false;\n    // Note that we may request a sync despite syncingRevNumber\n    // already being set, due to a previous failed sync. In this\n    // case, just overwrite it.\n    this.syncingRevNumber = this.revNumber;\n    this.onDirtyStateChange({\n      type: DirtyStateType.SYNCING,\n      lastSyncTime: this.syncTime,\n    });\n    return true;\n  }\n\n  handleModify() {\n    const timeNow = Date.now();\n    if (this.revNumber === this.syncedRevNumber) this.syncTime = timeNow;\n    this.modifyTime = timeNow;\n    this.revNumber++;\n    this.onDirtyStateChange({\n      type: DirtyStateType.DIRTY,\n      lastSyncTime: this.syncTime,\n    });\n  }\n\n  handleSyncResult(success: boolean) {\n    if (success) {\n      this.syncTime = new Date().getTime();\n      if (this.syncingRevNumber === null)\n        throw new Error(\"no sync in progress\");\n      this.syncedRevNumber = this.syncingRevNumber;\n    }\n    this.syncingRevNumber = null;\n    this.onDirtyStateChange({\n      type: success ? DirtyStateType.SYNCED : DirtyStateType.FAILED,\n      lastSyncTime: this.syncTime,\n    });\n  }\n}\n","import { cloneDeck, DeckSelection } from \"engine/types/decks\";\nimport { StepType } from \"engine/types/steps\";\nimport { Role } from \"engine/types/updates\";\nimport {\n  GamePhase,\n  Player,\n  PlayerStateTeamData,\n  FullGameState,\n  MutableGameState,\n  CheckpointState,\n  SerializedCheckpointState,\n  isCheckpointSlotValid,\n} from \"engine/types/game-state\";\nimport { FailedChecks } from \"engine/types/action-validation\";\nimport {\n  PUZ_NAME_PVP,\n  BATTLE_GROUP_NAME_INSTANCER,\n  isInstanceable,\n} from \"engine/puzzles/puzzle-data\";\nimport { StaticInspector } from \"engine/Inspector\";\nimport { Engine } from \"engine/Engine\";\nimport { WSErrorCode, WSError, WSRespType } from \"game-server/ws\";\nimport { ClientConnection, GameServer } from \"game-server/GameServer\";\nimport { BackendRoom } from \"game-server/backend-interface/BackendInterface\";\nimport {\n  SyncTracker,\n  SyncObjectType,\n} from \"game-server/backend-interface/backend-sync\";\nimport {\n  GlobalUpdatesScopeType,\n  GlobalUpdateType,\n  GlobalUpdate,\n  GlobalStateBattleRoomStatus,\n  ClientActiveGameGlobalState,\n  ClientErratum,\n  TeamBattleUpdateStateGlobalUpdate,\n  CheckpointSummary,\n} from \"game-server/global-updates\";\nimport { GameRoom, UnjoinedRoomMember, RoomMember } from \"game-server/Room\";\nimport { TeamController } from \"./team-controller\";\n\ntype ResolveDeckResult =\n  | {\n      deckSelection: DeckSelection | null;\n      err?: undefined;\n    }\n  | {\n      deckSelection?: undefined;\n      err: WSError;\n    };\n\ntype CommitDeckSelectionResult =\n  | {\n      deckSelections: { [player in Player]?: DeckSelection };\n      err?: undefined;\n    }\n  | {\n      deckSelections?: undefined;\n      err: WSError;\n    };\n\n/** Controller to manage the room for a team/battle combination. */\nexport class TeamBattleController {\n  server: GameServer;\n\n  teamId: string;\n  puzName: string;\n  /** Normally equal to puzName, but may be different in instancers. */\n  selectedPuzName: string | null;\n\n  /**\n   * The selected deck slot in the prep page, before the user has set\n   * \"ready for battle\".\n   */\n  selectedDeckSlot: number | null;\n  /**\n   * Details about the pending game, if any. This needs to be separate\n   * from the activeGame state, since we want to be able to start\n   * setting up a pending game while keeping details about the previous\n   * game.\n   */\n  pendingGame?: {\n    deckSelection: DeckSelection | null;\n  };\n\n  checkpoints: { [slot: number]: SerializedCheckpointState };\n  checkpointsSyncTracker: SyncTracker;\n\n  /**\n   * Map of connId to connections for connections subscribed to\n   * updates for this battle.\n   */\n  subscriptions: Map<string, ClientConnection>;\n  /**\n   * Map of connId to connections for connections subscribed to\n   * updates for this battle's speedrun leaderboard summary.\n   */\n  speedrunLeaderboardSummarySubscriptions: Map<string, ClientConnection>;\n\n  constructor(\n    teamId: string,\n    puzName: string,\n    selectedPuzName: string | null,\n    selectedDeckSlot: number | null,\n    server: GameServer\n  ) {\n    this.teamId = teamId;\n    this.puzName = puzName;\n    this.selectedPuzName = selectedPuzName;\n    this.server = server;\n\n    this.selectedDeckSlot = selectedDeckSlot;\n    this.checkpoints = {};\n    this.checkpointsSyncTracker = new SyncTracker(\n      this.server.config,\n      SyncObjectType.CHECKPOINTS,\n      (dirtyState) => {\n        this.server.dirtyStateTracker.update({\n          teams: {\n            [this.teamId]: {\n              checkpoints: {\n                [this.puzName]: dirtyState,\n              },\n            },\n          },\n        });\n      }\n    );\n    this.subscriptions = new Map();\n    this.speedrunLeaderboardSummarySubscriptions = new Map();\n  }\n\n  getTeamController(): TeamController {\n    return this.server.getTeamController(this.teamId);\n  }\n\n  getBattleGroupName(): string {\n    return this.server.getBattleGroup(this.puzName).battleGroupName;\n  }\n\n  wantsErrataFor(puzzle: string): boolean {\n    const { puzName, selectedPuzName } = this;\n    if (\n      puzzle === puzName ||\n      puzzle === this.server.getBattleGroup(puzName).battleGroupName\n    )\n      return true;\n    if (selectedPuzName === null) return false;\n    if (\n      puzzle === selectedPuzName ||\n      puzzle === this.server.getBattleGroup(selectedPuzName).battleGroupName\n    )\n      return true;\n    return false;\n  }\n\n  filterErrata(conn: ClientConnection): { [erratumId: string]: ClientErratum } {\n    const errata: { [erratumId: string]: ClientErratum } = {};\n    for (const [\n      erratumId,\n      { puzzle, text, timestamp, published },\n    ] of Object.entries(this.server.errata))\n      if (\n        puzzle !== null &&\n        text !== \"\" &&\n        this.wantsErrataFor(puzzle) &&\n        (published || conn.isAdmin)\n      )\n        errata[erratumId] = { erratumId, text, timestamp, published };\n    return errata;\n  }\n\n  broadcastErrataGlobalUpdate(\n    upd: Omit<TeamBattleUpdateStateGlobalUpdate, \"type\">\n  ) {\n    const subscriptions = this.server.getSubscriptions({\n      type: GlobalUpdatesScopeType.TEAM_BATTLE,\n      teamId: this.teamId,\n      puzName: this.puzName,\n    });\n    for (const conn of subscriptions.values())\n      this.server.sendResp(conn, {\n        type: WSRespType.GLOBAL_UPDATE,\n        upd: {\n          type: GlobalUpdateType.TEAM_BATTLE_UPDATE_STATE,\n          errata: this.filterErrata(conn),\n          ...upd,\n        },\n      });\n  }\n\n  getActiveRoom(): GameRoom | null {\n    return this.server.gameRoomsController.getActiveRoom(\n      this.teamId,\n      this.puzName\n    );\n  }\n\n  private setActiveRoom(room: GameRoom): void {\n    this.server.gameRoomsController.setActiveRoom(\n      this.teamId,\n      this.puzName,\n      room.roomId\n    );\n  }\n\n  getRoomStatus(): GlobalStateBattleRoomStatus {\n    const room = this.getActiveRoom();\n    if (room === null) return GlobalStateBattleRoomStatus.NONE;\n    const { gameState } = room.engine;\n    if (gameState.phase === GamePhase.ACTIVE)\n      return GlobalStateBattleRoomStatus.ACTIVE;\n    return GlobalStateBattleRoomStatus.INACTIVE;\n  }\n\n  getRoomPuzName(): string | null {\n    const room = this.getActiveRoom();\n    if (room === null) return null;\n    return room.engine.puzName;\n  }\n\n  isRoomActive(): boolean {\n    return this.getRoomStatus() === GlobalStateBattleRoomStatus.ACTIVE;\n  }\n\n  getInspector(): StaticInspector {\n    if (this.selectedPuzName === null)\n      throw new Error(\"need puzzle selection to get inspector\");\n    return this.server.gameRoomsController.getInspector(this.selectedPuzName);\n  }\n\n  private getPlayerInGameState(gameState: FullGameState): Player {\n    const playerCandidates = [Player.P1, Player.P2].filter((player) => {\n      const { teamData } = gameState[player];\n      return teamData !== undefined && teamData.teamId === this.teamId;\n    });\n    // Retain support for vanilla to enable workshop.\n    // TODO: If we ever have intra-team PvP, this would instead\n    // need to depend on which side of the board we're on.\n    if (playerCandidates.length !== 1 && this.selectedPuzName !== \"vanilla\")\n      throw new Error(\"team not uniquely part of active game\");\n    return playerCandidates[0];\n  }\n\n  getPlayer(): Player {\n    const room = this.getActiveRoom();\n    if (room === null)\n      throw new Error(\"player not defined if there's no active game\");\n    const { gameState } = room.engine;\n    return this.getPlayerInGameState(gameState);\n  }\n\n  getActiveGameTeamData(): PlayerStateTeamData {\n    const room = this.getActiveRoom();\n    if (room === null)\n      throw new Error(\"tried to get team data without an active game\");\n    const { teamData } = room.engine.gameState[this.getPlayer()];\n    if (teamData === undefined)\n      throw new Error(\"expect team data to be present in active game\");\n    return teamData;\n  }\n\n  getActiveGameDeckSelection(): DeckSelection | null {\n    const room = this.getActiveRoom();\n    if (room === null)\n      throw new Error(\"tried to get team data without an active game\");\n    return (\n      room.engine.gameState.engineOnly.deckSelections[this.getPlayer()] ?? null\n    );\n  }\n\n  /**\n   * Leave the currently active game. Returns a list of room members\n   * kicked from the active game room, if any. This may be only a\n   * subset of the members originally in the room if there are\n   * multiple teams connected to the room.\n   */\n  private leaveActiveGame(): RoomMember[] {\n    const room = this.getActiveRoom();\n    if (room === null) return [];\n\n    const membersToKick = [...room.members.values()].filter((roomMember) => {\n      const { teamId, spectateTeamId } = roomMember.conn;\n      if (teamId === undefined)\n        throw new Error(\n          \"expect conn to be authenticated if it is joined to a room\"\n        );\n      return teamId === this.teamId || spectateTeamId === this.teamId;\n    });\n    for (const roomMember of membersToKick) {\n      this.server.kickRoomMember(roomMember);\n    }\n\n    return membersToKick;\n  }\n\n  /**\n   * To start a new battle, we first confirm a selected deck, and\n   * then start the battle. This separation is only relevant\n   * in PvP, where some time may pass between a team committing\n   * to a deck and accepting a match.\n   * This method commits the deck selection into a pending game,\n   * presuming that the team may act as any of the specified players\n   * for the battle.\n   * Returns the valid player-deck combinations produced.\n   */\n  commitDeckSelection(\n    players: ReadonlyArray<Player>,\n    reuseDeck?: boolean,\n    allowInvalidDecks?: boolean\n  ): CommitDeckSelectionResult {\n    if (this.isRoomActive())\n      throw new Error(\n        \"don't expect to set up a new game while a game is active\"\n      );\n\n    const inspector = this.getInspector();\n    const deckPlayers = players.filter(\n      (player) => inspector.getDeckOverride(player) === null\n    );\n    const { deckSelection, err } = this.resolveDeckForBattle(\n      deckPlayers,\n      reuseDeck,\n      allowInvalidDecks\n    );\n    if (err !== undefined) return { err };\n\n    this.pendingGame = {\n      deckSelection,\n    };\n\n    const deckSelections: { [player in Player]?: DeckSelection } = {};\n    if (deckSelection === null) {\n      if (deckPlayers.length > 0 && !inspector.isNoDeckAllowed())\n        throw new Error(\"expect a deck selection if players need decks\");\n    } else {\n      if (deckSelection !== null) {\n        for (const player of deckPlayers) {\n          deckSelections[player] = deckSelection;\n        }\n      }\n    }\n\n    return { deckSelections };\n  }\n\n  /**\n   * Move connections from the active game into a new room.\n   * Members joining the new room are assigned the specified role,\n   * unless they were GOD in the old room.\n   */\n  private moveConnsIntoRoom(room: GameRoom, role: Role): void {\n    const prevMembers = this.leaveActiveGame();\n    for (const { conn, role: prevRole } of prevMembers) {\n      this.server.joinConnToRoom(\n        conn,\n        room,\n        prevRole === Role.GOD ? prevRole : role\n      );\n    }\n  }\n\n  /**\n   * Activate the pending game by moving the team into a new room.\n   * The room is provided externally to support sharing the same\n   * room across multiple teams in PvP scenarios.\n   * The deck selection is saved to support reuse deck on retry.\n   *\n   * Members joining the new room are assigned the specified role,\n   * unless they were GOD in the old room. If not specified, the\n   * default role is picked based on the game spec.\n   */\n  activateGame(room: GameRoom, role?: Role): void {\n    const inspector = this.getInspector();\n    role ??= inspector.getDefaultRole();\n\n    // Transfer members of this team from the old room to the new one.\n    this.moveConnsIntoRoom(room, role);\n\n    if (this.pendingGame === undefined)\n      throw new Error(\"no pending game to activate\");\n    delete this.pendingGame;\n\n    this.setActiveRoom(room);\n    this.handleRoomStatusChange();\n  }\n\n  getLockedDeckSelection(): DeckSelection | null {\n    // Only use the active game deck selection if the room is active.\n    // Otherwise, the deck selection is only there to support retry\n    // with same deck, and does not need to be visible to the client.\n    if (this.isRoomActive()) return this.getActiveGameDeckSelection();\n    return this.pendingGame?.deckSelection ?? null;\n  }\n\n  getClientActiveGameState(): ClientActiveGameGlobalState | null {\n    const room = this.getActiveRoom();\n    if (!this.isRoomActive()) return null;\n    if (room === null)\n      throw new Error(\"expect an active game if the room status is active\");\n    const { enabledMasteries, faction } = this.getActiveGameTeamData();\n    return { enabledMasteries, faction };\n  }\n\n  broadcastTeamBattleGlobalUpdate(upd: GlobalUpdate): void {\n    this.server.broadcastGlobalUpdate(\n      {\n        type: GlobalUpdatesScopeType.TEAM_BATTLE,\n        teamId: this.teamId,\n        puzName: this.puzName,\n      },\n      upd\n    );\n  }\n\n  broadcastTeamSpeedrunLeaderboardSummaryGlobalUpdate(upd: GlobalUpdate): void {\n    this.server.broadcastGlobalUpdate(\n      {\n        type: GlobalUpdatesScopeType.TEAM_SPEEDRUN_LEADERBOARD_SUMMARY,\n        teamId: this.teamId,\n        puzName: this.puzName,\n      },\n      upd\n    );\n  }\n\n  handleRoomStatusChange(): void {\n    const { teamId, puzName } = this;\n    const roomStatus = this.getRoomStatus();\n    this.server.broadcastGlobalUpdate(\n      {\n        type: GlobalUpdatesScopeType.TEAM,\n        teamId,\n      },\n      {\n        type: GlobalUpdateType.TEAM_UPDATE_PUZZLE,\n        puzName,\n        roomStatus,\n      }\n    );\n    this.broadcastLockedDeckSelection();\n    this.broadcastTeamBattleGlobalUpdate({\n      type: GlobalUpdateType.TEAM_BATTLE_UPDATE_STATE,\n      activeGame: this.getClientActiveGameState(),\n      roomPuzName: this.getRoomPuzName(),\n    });\n    if (puzName === PUZ_NAME_PVP) {\n      this.server.handleTeamSummaryUpdate(this.teamId, {\n        isPvPGameActive: this.isRoomActive(),\n      });\n    }\n  }\n\n  broadcastLockedDeckSelection(): void {\n    this.broadcastTeamBattleGlobalUpdate({\n      type: GlobalUpdateType.TEAM_BATTLE_UPDATE_STATE,\n      lockedDeckSelection: this.getLockedDeckSelection(),\n    });\n  }\n\n  summarizeCheckpoints(): { [slot: number]: CheckpointSummary } {\n    return Object.fromEntries(\n      Object.entries(this.checkpoints).map(\n        ([slot, { turnNumber, roomId, timestamp }]) => [\n          slot,\n          { turnNumber, roomId, timestamp },\n        ]\n      )\n    );\n  }\n\n  makeCheckpoint(engine: Engine, slots: number[]): void {\n    const { roomId, gameState } = engine;\n    const checkpoint: CheckpointState = {\n      selectedPuzName: this.selectedPuzName,\n      gameState,\n    };\n    const serialized: SerializedCheckpointState = {\n      turnNumber: gameState.turnNumber,\n      roomId,\n      timestamp: Date.now(),\n      gainedScore: gameState.engineOnly.gainedScore,\n      serializedState: JSON.stringify(checkpoint),\n    };\n    for (const slot of slots) this.checkpoints[slot] = serialized;\n    this.handleCheckpointsChange();\n  }\n\n  restoreCheckpoint(conn: ClientConnection, slot: number): void {\n    if (!isCheckpointSlotValid(slot))\n      return this.server.sendErr(conn, {\n        errCode: WSErrorCode.INVALID_CHECKPOINT_SLOT,\n      });\n    const room = this.getActiveRoom();\n    if (room === null) {\n      this.server.sendErr(conn, { errCode: WSErrorCode.NO_ROOM });\n      return;\n    }\n    const { gameState } = room.engine;\n    const serializedCheckpoint = this.checkpoints[slot];\n    if (serializedCheckpoint === undefined) {\n      this.server.sendErr(conn, { errCode: WSErrorCode.NO_CHECKPOINT });\n      return;\n    }\n    const checkpoint = JSON.parse(\n      serializedCheckpoint.serializedState\n    ) as CheckpointState;\n\n    if (checkpoint.selectedPuzName !== null) {\n      const err = this.selectPuzzle(checkpoint.selectedPuzName, true);\n      if (err !== null)\n        throw new Error(\"should not encounter error re-selecting the old puzz\");\n    }\n\n    // Lock the deck selection back to the original deck selection.\n    // The old deck contents are derived from the game state and\n    // shown to the player separately as part of the active game\n    // state broadcast in the room status update handler.\n    const player = this.getPlayerInGameState(checkpoint.gameState);\n    const deck = checkpoint.gameState.engineOnly.deckSelections[player];\n    const deckSlot = deck?.slot ?? null;\n    if (deckSlot !== null) {\n      const err = this.selectDeck(deckSlot, true);\n      if (err !== null)\n        throw new Error(\"should not encounter error re-selecting the old deck\");\n    }\n\n    // HACK: It might be possible to restore an old checkpoint from before\n    // solving after having solved a battle. Fix up the isReplay state.\n    for (const player of [Player.P1, Player.P2]) {\n      const { teamData } = checkpoint.gameState[player];\n      if (teamData === undefined) continue;\n      teamData.isReplay = this.server\n        .getTeamController(teamData.teamId)\n        .solveTimes.has(checkpoint.gameState.puzName);\n    }\n\n    checkpoint.gameState.engineOnly.gainedScore =\n      serializedCheckpoint.gainedScore;\n\n    // We might restore from a different puzzle in instancer rooms.\n    const isSamePuzzle = gameState.puzName === checkpoint.gameState.puzName;\n\n    // HACK: Create a fake BackendRoom and restore it. No need to set\n    // optional fields that aren't used by restoreSavedRoom.\n    // If we're restoring from the same puzzle, initialize the new room\n    // with the current game state first and then send an override, in\n    // order to animate the restoration process.\n    const newRoom = this.restoreSavedRoom({\n      roomId: this.server.genGameRoomId(),\n      puzName: checkpoint.gameState.puzName,\n      hostPuzName: this.puzName,\n      createTime: new Date().getTime(),\n      savedRoom: { gameState: isSamePuzzle ? gameState : checkpoint.gameState },\n    });\n    if (newRoom === null) throw new Error(\"expect restore room to succeed\");\n    if (isSamePuzzle) {\n      this.server.useUpdatesContext(newRoom, () => {\n        newRoom.engine.broadcastOverrideState(checkpoint.gameState);\n      });\n    }\n    this.handleRoomStatusChange();\n\n    // Update the roomIds of all checkpoints attributed to the same\n    // room as the restored checkpoint, so that they show to the user\n    // as belonging to the currently active room.\n    const oldRoomId = serializedCheckpoint.roomId;\n    for (const [slot, checkpoint] of Object.entries(this.checkpoints)) {\n      if (checkpoint.roomId === oldRoomId) {\n        this.checkpoints[Number(slot)] = {\n          ...checkpoint,\n          roomId: newRoom.roomId,\n        };\n      }\n    }\n    this.handleCheckpointsChange();\n  }\n\n  private handleCheckpointsChange() {\n    this.checkpointsSyncTracker.handleModify();\n    this.broadcastTeamBattleGlobalUpdate({\n      type: GlobalUpdateType.TEAM_BATTLE_UPDATE_STATE,\n      checkpointSummaries: this.summarizeCheckpoints(),\n    });\n  }\n\n  handleRoomComplete(roomId: string, gainedScore: number) {\n    for (const [slot, checkpoint] of Object.entries(this.checkpoints))\n      if (checkpoint.roomId === roomId)\n        this.checkpoints[Number(slot)] = { ...checkpoint, gainedScore };\n    this.handleCheckpointsChange();\n    this.handleRoomStatusChange();\n  }\n\n  resign(): WSError | null {\n    const room = this.getActiveRoom();\n    if (room === null) return { errCode: WSErrorCode.NO_ROOM };\n    if (!this.isRoomActive()) {\n      // This might be caused by a race condition, so just return\n      // silently.\n      return null;\n    }\n\n    this.server.sendSystemStep(room, {\n      type: StepType.SYSTEM_RESIGN,\n      player: this.getPlayer(),\n    });\n    return null;\n  }\n\n  handleEnterGameRoom(unjoinedMember: UnjoinedRoomMember): void {\n    const { conn, role } = unjoinedMember;\n    const room = this.getActiveRoom();\n\n    // The client should only request to join the game room once\n    // a game has been set up.\n    if (room === null) {\n      this.server.sendEnterRoomErr(unjoinedMember, {\n        errCode: WSErrorCode.NO_ROOM,\n      });\n      return;\n    }\n\n    // Only allow arbitrary roles as admin.\n    if (role !== undefined && !conn.isAdmin) {\n      this.server.sendEnterRoomErr(unjoinedMember, {\n        errCode: WSErrorCode.PERMISSION_DENIED,\n      });\n      return;\n    }\n\n    // Currently, the default role is always captured in what player\n    // the team is joined to the room as.\n    const defaultRole = ((): Role => {\n      switch (this.getPlayer()) {\n        case Player.P1:\n          return Role.P1;\n        case Player.P2:\n          return Role.P2;\n      }\n    })();\n\n    this.server.completeEnterRoom(\n      {\n        ...unjoinedMember,\n        role: role ?? defaultRole,\n      },\n      room\n    );\n  }\n\n  selectPuzzle(\n    selectedPuzName: string | null,\n    restoring?: boolean\n  ): WSError | null {\n    // Early out to avoid broadcasting an unnecessary update.\n    if (\n      this.selectedPuzName !== null &&\n      this.selectedPuzName === selectedPuzName\n    )\n      return null;\n\n    if (this.getBattleGroupName() !== BATTLE_GROUP_NAME_INSTANCER)\n      return { errCode: WSErrorCode.INVALID_PUZZLE };\n    if (this.isRoomActive() && !restoring)\n      return { errCode: WSErrorCode.LOCKED_BY_BATTLE };\n\n    if (selectedPuzName !== null) {\n      const puzData = this.server.puzzlesDB.tryGetPuzzle(selectedPuzName);\n      const battleGroupData =\n        this.server.puzzlesDB.tryGetBattleGroup(selectedPuzName);\n      if (puzData === null || battleGroupData === null)\n        return { errCode: WSErrorCode.INVALID_PUZZLE };\n      if (\n        !isInstanceable(\n          puzData.answer !== null,\n          puzData.puzName,\n          puzData.battleGroupName,\n          battleGroupData.numPuzzles\n        )\n      )\n        return { errCode: WSErrorCode.INVALID_PUZZLE };\n    }\n\n    this.selectedPuzName = selectedPuzName;\n    this.getTeamController().mergeSlowSyncPacket({\n      puzzleSelections: {\n        [this.puzName]: selectedPuzName,\n      },\n    });\n    this.server.bigBoardStateTracker.updateTeam(this.teamId, {\n      selectedPuzzles: {\n        [this.puzName]: selectedPuzName,\n      },\n    });\n\n    this.broadcastErrataGlobalUpdate({ selectedPuzName });\n    return null;\n  }\n\n  selectDeck(slot: number, restoring?: boolean): WSError | null {\n    // Don't select the deck if no change is required.\n    if (slot === this.selectedDeckSlot) return null;\n\n    if (this.isRoomActive() && !restoring)\n      return { errCode: WSErrorCode.LOCKED_BY_BATTLE };\n\n    this.selectedDeckSlot = slot;\n    this.getTeamController().mergeSlowSyncPacket({\n      preferredDecks: {\n        [this.puzName]: slot,\n      },\n    });\n    this.broadcastTeamBattleGlobalUpdate({\n      type: GlobalUpdateType.TEAM_BATTLE_UPDATE_STATE,\n      selectedDeckSlot: slot,\n    });\n    return null;\n  }\n\n  /**\n   * Resolve the team's deck as players for the battle. If resolve fails,\n   * send an error to conn and return null.\n   * Allow multiple players to support joining as both players in dev.\n   */\n  private resolveDeckForBattle(\n    /** Players that will be assigned the resolved deck, if any. */\n    players: Player[],\n    reuseDeck?: boolean,\n    allowInvalidDecks?: boolean\n  ): ResolveDeckResult {\n    // If there are no players that need a deck, then don't get one.\n    // In particular, battles with assigned P1 decks should not\n    // require the user to make deck selections.\n    if (players.length <= 0) return { deckSelection: null };\n\n    const { selectedDeckSlot } = this;\n    const room = this.getActiveRoom();\n    const inspector = this.getInspector();\n\n    if ((reuseDeck ?? false) && room !== null) {\n      return { deckSelection: this.getActiveGameDeckSelection() };\n    }\n\n    if (selectedDeckSlot === null) {\n      if (inspector.isNoDeckAllowed()) return { deckSelection: null };\n      if (allowInvalidDecks ?? false) {\n        return {\n          deckSelection: {\n            slot: null,\n            deck: {\n              displayName: \"autogen deck\",\n              cards: {},\n            },\n          },\n        };\n      }\n\n      return { err: { errCode: WSErrorCode.NEED_DECK } };\n    }\n\n    const deck =\n      this.getTeamController().getDeckController(selectedDeckSlot).deck;\n    for (const player of players) {\n      const failedChecks: FailedChecks = new Set();\n      inspector.validateDeck(failedChecks, player, deck);\n      if (!(allowInvalidDecks ?? false) && failedChecks.size !== 0) {\n        return { err: { errCode: WSErrorCode.INVALID_DECK } };\n      }\n    }\n\n    return {\n      deckSelection: {\n        slot: selectedDeckSlot,\n        deck: cloneDeck(deck),\n      },\n    };\n  }\n\n  restoreSavedRoom(roomEntry: BackendRoom): GameRoom | null {\n    const { roomId, hostPuzName, puzName, savedRoom } = roomEntry;\n    if (savedRoom === undefined) return null;\n    this.selectPuzzle(puzName);\n    // Check if the room already exists, which may be the case when\n    // restoring PvP rooms.\n    const existingRoomTracker =\n      this.server.gameRoomsController.rooms.get(roomId);\n    const room =\n      existingRoomTracker?.room ??\n      this.server.gameRoomsController.createRoomFromGameState(\n        puzName,\n        hostPuzName,\n        // Warning: This is necessary even if we're not concerned about\n        // type safety, since if this is called from restoreCheckpoint,\n        // and the previous game has ended, the game state might not\n        // have been synced to backend yet and so should be treated as\n        // immutable. If we want to remove this deep copy, then\n        // restoreCheckpoint should be updated to deep copy the game\n        // state if the game has ended.\n        JSON.parse(JSON.stringify(savedRoom.gameState)) as MutableGameState,\n        roomId\n      );\n    const defaultRole = ((): Role => {\n      switch (this.getPlayerInGameState(room.engine.gameState)) {\n        case Player.P1:\n          return Role.P1;\n        case Player.P2:\n          return Role.P2;\n      }\n    })();\n    this.moveConnsIntoRoom(room, defaultRole);\n    this.setActiveRoom(room);\n    return room;\n  }\n}\n","import { StepType } from \"engine/types/steps\";\nimport { Role } from \"engine/types/updates\";\nimport { Player, DevKnobs, opponentOf } from \"engine/types/game-state\";\nimport { PUZ_NAME_PVP, PVP_TURN_TIME_LIMIT } from \"engine/puzzles/puzzle-data\";\nimport { PVP_MASTERY_ID } from \"engine/puzzles/mastery-data\";\nimport { WSErrorCode, WSError, WSRespType } from \"game-server/ws\";\nimport { HuntNotificationType } from \"game-server/notifications\";\nimport { ClientConnection, GameServer } from \"game-server/GameServer\";\nimport {\n  GlobalUpdatesScopeType,\n  GlobalUpdateType,\n  GlobalUpdate,\n} from \"game-server/global-updates\";\n\n/**\n * PvP requests expire after some amount of time, to make it more\n * likely that the requesting team is still active when the request\n * gets accepted.\n */\nexport const PVP_REQUEST_EXPIRY_TIME_MS = 60 * 1000;\n\nexport type PvPRequest = {\n  fromTeamId: string;\n  toTeamId: string;\n  expiryTime: number;\n};\n\nconst isPvPRequestExpired = (pvpReq: PvPRequest): boolean => {\n  const timeNow = new Date().getTime();\n  const { expiryTime } = pvpReq;\n  return timeNow > expiryTime;\n};\n\nexport class TeamPvPController {\n  teamId: string;\n  server: GameServer;\n\n  /** Battle requests that the team has made, indexed by team ID. */\n  outgoingRequests: Map<string, PvPRequest>;\n  /** Battle requests made to the team, indexed by team ID. */\n  incomingRequests: Map<string, PvPRequest>;\n  /** Team IDs of teams blocked by the team. */\n  blockedTeams: Set<string>;\n\n  /**\n   * Map of connId to connections for connections subscribed to\n   * updates for this team's PvP state.\n   */\n  subscriptions: Map<string, ClientConnection>;\n\n  constructor(\n    teamId: string,\n    blockedTeams: ReadonlyArray<string>,\n    server: GameServer\n  ) {\n    this.teamId = teamId;\n    this.server = server;\n    this.outgoingRequests = new Map();\n    this.incomingRequests = new Map();\n    this.blockedTeams = new Set(blockedTeams);\n    this.subscriptions = new Map();\n  }\n\n  getTeamController() {\n    return this.server.getTeamController(this.teamId);\n  }\n\n  getBattleController() {\n    return this.getTeamController().getBattleController(PUZ_NAME_PVP);\n  }\n\n  claimTimeVictory(): WSError | null {\n    const room = this.getBattleController().getActiveRoom();\n    if (room === null) {\n      return { errCode: WSErrorCode.NO_ROOM };\n    }\n    const { gameState } = room.engine;\n    const opponent = opponentOf(this.getBattleController().getPlayer());\n    const { teamData, startTurnTime } = gameState[opponent] ?? {};\n    if (!teamData) throw new Error(\"pvp opponent not found\");\n    if (!startTurnTime || Date.now() - startTurnTime < PVP_TURN_TIME_LIMIT) {\n      // client sent request when stale; return silently\n      return null;\n    }\n    this.server.sendSystemStep(room, {\n      type: StepType.SYSTEM_TIME_OUT,\n      player: opponent,\n    });\n    return null;\n  }\n\n  getHasMastery(): boolean {\n    return this.getTeamController()\n      .masteryTreeController.getEnabledMasteries()\n      .has(PVP_MASTERY_ID);\n  }\n\n  broadcastTeamPvPGlobalUpdate(upd: GlobalUpdate) {\n    this.server.broadcastGlobalUpdate(\n      {\n        type: GlobalUpdatesScopeType.TEAM_PVP,\n        teamId: this.teamId,\n      },\n      upd\n    );\n  }\n\n  isGameActive(): boolean {\n    return this.getBattleController().isRoomActive();\n  }\n\n  /**\n   * Validate that a team ID is a valid opponent, and get its\n   * PvP controller.\n   */\n  private validateOpponentTeamId(\n    targetTeamId: string\n  ): TeamPvPController | null {\n    // A team cannot battle itself.\n    if (targetTeamId === this.teamId) return null;\n    const targetTeamController = this.server.teamControllers.get(targetTeamId);\n    if (targetTeamController === undefined) return null;\n    return targetTeamController.pvpController;\n  }\n\n  private commitDeckSelection(): WSError | null {\n    const battleController = this.getBattleController();\n\n    // If we've already committed the deck, don't commit it again.\n    if (battleController.pendingGame !== undefined) return null;\n\n    const { err } = battleController.commitDeckSelection([\n      Player.P1,\n      Player.P2,\n    ]);\n    return err ?? null;\n  }\n\n  handleUnlockDeck(conn: ClientConnection): WSError | null {\n    if (this.isGameActive()) {\n      return { errCode: WSErrorCode.LOCKED_BY_BATTLE };\n    }\n\n    this.clearOutgoingRequests();\n    const battleController = this.getBattleController();\n    delete battleController.pendingGame;\n    battleController.broadcastLockedDeckSelection();\n    return null;\n  }\n\n  private makePvPRequest(targetTeamId: string): WSError | null {\n    const targetController = this.validateOpponentTeamId(targetTeamId);\n    if (targetController === null) {\n      return { errCode: WSErrorCode.INVALID_TEAM };\n    }\n    if (this.blockedTeams.has(targetTeamId)) {\n      return { errCode: WSErrorCode.BLOCKED_BY_REQUESTER };\n    }\n    if (targetController.blockedTeams.has(this.teamId)) {\n      return { errCode: WSErrorCode.BLOCKED_BY_TARGET };\n    }\n    if (this.isGameActive()) {\n      return { errCode: WSErrorCode.ROOM_BUSY };\n    }\n    if (!this.getHasMastery()) {\n      return { errCode: WSErrorCode.NO_MASTERY };\n    }\n    if (!targetController.getHasMastery()) {\n      return { errCode: WSErrorCode.TARGET_NO_MASTERY };\n    }\n\n    const existingReq = this.outgoingRequests.get(targetTeamId);\n    if (existingReq !== undefined) {\n      if (isPvPRequestExpired(existingReq)) {\n        this.clearRequest(existingReq, false);\n      } else {\n        return { errCode: WSErrorCode.DUPLICATE_REQUEST };\n      }\n    }\n\n    const commitDeckSelectionErr = this.commitDeckSelection();\n    if (commitDeckSelectionErr !== null) return commitDeckSelectionErr;\n\n    const pvpReq = {\n      fromTeamId: this.teamId,\n      toTeamId: targetTeamId,\n      expiryTime: new Date().getTime() + PVP_REQUEST_EXPIRY_TIME_MS,\n    };\n    this.outgoingRequests.set(targetTeamId, pvpReq);\n    targetController.incomingRequests.set(this.teamId, pvpReq);\n\n    this.getBattleController().broadcastLockedDeckSelection();\n    this.broadcastTeamPvPGlobalUpdate({\n      type: GlobalUpdateType.TEAM_PVP_UPDATE_STATE,\n      outgoingRequestsToAdd: [pvpReq],\n    });\n    targetController.broadcastTeamPvPGlobalUpdate({\n      type: GlobalUpdateType.TEAM_PVP_UPDATE_STATE,\n      incomingRequestsToAdd: [pvpReq],\n    });\n\n    this.server.broadcastRespToTeam(targetTeamId, {\n      type: WSRespType.NOTIFICATION,\n      notif: { type: HuntNotificationType.PVP_REQUEST_RECEIVED },\n    });\n\n    return null;\n  }\n\n  handleMakePvPRequest(\n    targetTeamId: string,\n    autoAccept?: boolean\n  ): WSError | null {\n    const makePvPRequestErr = this.makePvPRequest(targetTeamId);\n    if (makePvPRequestErr !== null) return makePvPRequestErr;\n\n    if (autoAccept ?? false) {\n      const targetController = this.validateOpponentTeamId(targetTeamId);\n      if (targetController === null)\n        return { errCode: WSErrorCode.INVALID_TEAM };\n      const acceptPvPRequestErr = targetController.acceptPvPRequest(\n        this.teamId,\n        undefined,\n        true\n      );\n      if (acceptPvPRequestErr !== null) return acceptPvPRequestErr;\n    }\n\n    return null;\n  }\n\n  handleCancelPvPRequest(\n    conn: ClientConnection,\n    targetTeamId: string\n  ): WSError | null {\n    const targetController = this.validateOpponentTeamId(targetTeamId);\n    if (targetController === null) {\n      return { errCode: WSErrorCode.INVALID_TEAM };\n    }\n\n    const existingReq = this.outgoingRequests.get(targetTeamId);\n    // Don't return an error if the request doesn't exist, since\n    // that might be due to a race condition.\n    if (existingReq !== undefined) {\n      this.clearRequest(existingReq, true);\n    }\n\n    this.unlockDeckIfUnneeded();\n    return null;\n  }\n\n  setIsTeamBlocked(\n    conn: ClientConnection,\n    targetTeamId: string,\n    isBlocked: boolean\n  ): WSError | null {\n    const targetController = this.validateOpponentTeamId(targetTeamId);\n    if (targetController === null) {\n      return { errCode: WSErrorCode.INVALID_TEAM };\n    }\n\n    if (isBlocked) {\n      this.blockedTeams.add(targetTeamId);\n      const existingOutgoingReq = this.outgoingRequests.get(targetTeamId);\n      if (existingOutgoingReq !== undefined)\n        this.clearRequest(existingOutgoingReq, true);\n      const existingIncomingReq = this.incomingRequests.get(targetTeamId);\n      if (existingIncomingReq !== undefined)\n        this.clearRequest(existingIncomingReq, true);\n    } else {\n      this.blockedTeams.delete(targetTeamId);\n    }\n\n    this.getTeamController().mergeSlowSyncPacket({\n      blockedTeams: {\n        [targetTeamId]: isBlocked,\n      },\n    });\n\n    this.broadcastTeamPvPGlobalUpdate({\n      type: GlobalUpdateType.TEAM_PVP_UPDATE_STATE,\n      blockedTeamsToAdd: isBlocked ? [targetTeamId] : undefined,\n      blockedTeamsToDelete: isBlocked ? undefined : [targetTeamId],\n    });\n    targetController.broadcastTeamPvPGlobalUpdate({\n      type: GlobalUpdateType.TEAM_PVP_UPDATE_STATE,\n      blockedByTeamsToAdd: isBlocked ? [this.teamId] : undefined,\n      blockedByTeamsToDelete: isBlocked ? undefined : [this.teamId],\n    });\n\n    return null;\n  }\n\n  /**\n   * Enter the ring. Note that a team may \"re-enter\" the ring after\n   * some time to re-send battle requests.\n   */\n  enterRing(): WSError | null {\n    if (!this.getHasMastery()) {\n      return { errCode: WSErrorCode.NO_MASTERY };\n    }\n\n    const { ring } = this.server.pvpLobbyController;\n    const isNew = ring.indexOf(this.teamId) === -1;\n    if (isNew) {\n      ring.push(this.teamId);\n      this.getTeamController().mergeSlowSyncPacket({ isInRing: true });\n      this.server.pvpLobbyController.broadcastPvPGlobalUpdate({\n        type: GlobalUpdateType.PVP_UPDATE_STATE,\n        ringTeamsToAdd: [this.teamId],\n      });\n    }\n\n    // Broadcast requests to anyone who would accept it, and only\n    // if the current deck selection is valid.\n    for (const targetTeamId of ring) {\n      this.makePvPRequest(targetTeamId);\n    }\n\n    return null;\n  }\n\n  leaveRing() {\n    const { ring } = this.server.pvpLobbyController;\n    const indexInRing = ring.indexOf(this.teamId);\n    if (indexInRing === -1) return;\n    ring.splice(indexInRing, 1);\n    this.getTeamController().mergeSlowSyncPacket({ isInRing: false });\n\n    this.server.pvpLobbyController.broadcastPvPGlobalUpdate({\n      type: GlobalUpdateType.PVP_UPDATE_STATE,\n      ringTeamsToDelete: [this.teamId],\n    });\n  }\n\n  acceptPvPRequest(\n    targetTeamId: string,\n    devKnobs?: DevKnobs,\n    forceP1?: boolean\n  ): WSError | null {\n    this.clearExpiredRequests();\n\n    const targetController = this.validateOpponentTeamId(targetTeamId);\n    if (targetController === null) {\n      return { errCode: WSErrorCode.INVALID_TEAM };\n    }\n    const pvpReq = this.incomingRequests.get(targetTeamId);\n    if (pvpReq === undefined) {\n      return { errCode: WSErrorCode.NO_PVP_REQUEST };\n    }\n    if (this.isGameActive()) {\n      return { errCode: WSErrorCode.ROOM_BUSY };\n    }\n    if (!this.getHasMastery()) {\n      return { errCode: WSErrorCode.NO_MASTERY };\n    }\n    if (!targetController.getHasMastery()) {\n      return { errCode: WSErrorCode.TARGET_NO_MASTERY };\n    }\n\n    const commitDeckSelectionErr = this.commitDeckSelection();\n    if (commitDeckSelectionErr !== null) return commitDeckSelectionErr;\n\n    this.clearAllRequestsAndLeaveRing();\n    targetController.clearAllRequestsAndLeaveRing();\n\n    const battleController = this.getBattleController();\n    const targetBattleController = targetController.getBattleController();\n    if (\n      battleController.pendingGame === undefined ||\n      targetBattleController.pendingGame === undefined\n    )\n      throw new Error(\"expect game setup for pvp teams to be ready\");\n    const selfDeckSelection = battleController.pendingGame.deckSelection;\n    const oppDeckSelection = targetBattleController.pendingGame.deckSelection;\n    if (selfDeckSelection === null || oppDeckSelection === null)\n      throw new Error(\"expect deck selections pvp teams to be defined\");\n\n    const isP1 = forceP1 ?? false ? true : Math.random() * 2 < 1;\n    const room = this.server.gameRoomsController.createRoom(\n      PUZ_NAME_PVP,\n      PUZ_NAME_PVP,\n      {\n        [Player.P1]: isP1 ? this.teamId : targetTeamId,\n        [Player.P2]: isP1 ? targetTeamId : this.teamId,\n      },\n      {\n        [Player.P1]: isP1 ? selfDeckSelection : oppDeckSelection,\n        [Player.P2]: isP1 ? oppDeckSelection : selfDeckSelection,\n      },\n      devKnobs\n    );\n    battleController.activateGame(room, isP1 ? Role.P1 : Role.P2);\n    targetBattleController.activateGame(room, isP1 ? Role.P2 : Role.P1);\n\n    this.server.broadcastRespToTeam(targetTeamId, {\n      type: WSRespType.NOTIFICATION,\n      notif: { type: HuntNotificationType.PVP_REQUEST_ACCEPTED },\n    });\n\n    return null;\n  }\n\n  private clearRequest(pvpReq: PvPRequest, broadcast: boolean) {\n    const { fromTeamId, toTeamId } = pvpReq;\n    const fromController =\n      this.server.getTeamController(fromTeamId).pvpController;\n    const toController = this.server.getTeamController(toTeamId).pvpController;\n    fromController.outgoingRequests.delete(toTeamId);\n    toController.incomingRequests.delete(fromTeamId);\n\n    if (broadcast) {\n      fromController.broadcastTeamPvPGlobalUpdate({\n        type: GlobalUpdateType.TEAM_PVP_UPDATE_STATE,\n        outgoingRequestsToDelete: [toTeamId],\n      });\n      toController.broadcastTeamPvPGlobalUpdate({\n        type: GlobalUpdateType.TEAM_PVP_UPDATE_STATE,\n        incomingRequestsToDelete: [fromTeamId],\n      });\n    }\n  }\n\n  clearExpiredRequests() {\n    for (const pvpReq of [\n      ...this.incomingRequests.values(),\n      ...this.outgoingRequests.values(),\n    ].filter(isPvPRequestExpired)) {\n      this.clearRequest(pvpReq, false);\n    }\n  }\n\n  clearOutgoingRequests() {\n    for (const pvpReq of this.outgoingRequests.values()) {\n      this.clearRequest(pvpReq, false);\n    }\n    this.broadcastTeamPvPGlobalUpdate({\n      type: GlobalUpdateType.TEAM_PVP_UPDATE_STATE,\n      clearOutgoingRequests: true,\n    });\n  }\n\n  clearAllRequestsAndLeaveRing() {\n    for (const pvpReq of [\n      ...this.incomingRequests.values(),\n      ...this.outgoingRequests.values(),\n    ]) {\n      this.clearRequest(pvpReq, false);\n    }\n\n    this.broadcastTeamPvPGlobalUpdate({\n      type: GlobalUpdateType.TEAM_PVP_UPDATE_STATE,\n      clearOutgoingRequests: true,\n      clearIncomingRequests: true,\n    });\n\n    this.leaveRing();\n  }\n\n  unlockDeckIfUnneeded(): void {\n    if (this.isGameActive()) return;\n    this.clearExpiredRequests();\n    if (this.outgoingRequests.size > 0) return;\n\n    // If there is no active game and no active outgoing requests,\n    // unlock the deck.\n    const battleController = this.getBattleController();\n    if (battleController.pendingGame === undefined) return;\n    delete battleController.pendingGame;\n    battleController.broadcastLockedDeckSelection();\n  }\n}\n\nexport class PvPLobbyController {\n  server: GameServer;\n\n  /**\n   * Teams may enter the \"ring\" to indicate intent to battle any\n   * available team.\n   * This tracks the team IDs of teams in the ring in the order\n   * that they joined, from least to most recent.\n   */\n  ring: string[];\n\n  /**\n   * Map of connId to connections for connections subscribed to\n   * global (non-team-specific) PvP updates.\n   */\n  subscriptions: Map<string, ClientConnection>;\n\n  constructor(server: GameServer) {\n    this.server = server;\n    this.ring = [];\n    this.subscriptions = new Map();\n  }\n\n  broadcastPvPGlobalUpdate(upd: GlobalUpdate) {\n    this.server.broadcastGlobalUpdate(\n      {\n        type: GlobalUpdatesScopeType.PVP,\n      },\n      upd\n    );\n  }\n}\n","// Validation for game actions. This is unrelated to the security\n// consideration of validating client WS messages.\n\nimport { StepType } from \"./steps\";\n\n/**\n * Validation checks. Some of these only apply to certain game actions.\n * Uses:\n * - Hooks may ignore specific validation checks by deleting the\n *   corresponding key from a FailedChecks structure.\n * - The UI uses the failed check type to figure out how to signpost\n *   the invalid reason to the user.\n * Game spec and card effects validators should use the GENERIC check\n * type unless they would like the invalid reason to be signposted in\n * a different way to the user.\n */\nexport enum Check {\n  // battle prep checks\n  LOCKED_IN = \"locked_in\", // loadout already locked in\n  NO_DECK = \"no_deck\", // no deck was provided\n  DECK_TOO_SMALL = \"deck_too_small\",\n  DECK_TOO_LARGE = \"deck_too_large\",\n  DECK_TOO_MANY_LEGENDARIES = \"deck_too_many_legendaries\",\n\n  // game action checks\n  CARD_TYPE = \"card_type\", // only creatures can move/attack\n  ALLIED = \"allied\", // cannot attack allied units\n  PROTECTED = \"protected\", // cannot attack protected units\n  TERRAIN = \"terrain\", // can only summon to allied terrain\n  BOUNDS = \"bounds\", // can only move/summon to slot in bounds\n  OCCUPIED = \"occupied\", // can only move/summon to unoccupied spaces\n  ADJACENT = \"adjacent\", // can only move to adjacent spaces\n  ABILITY_EXISTS = \"ability_exists\", // activated ability must exist on card\n  NUM_OPTS = \"num_opts\", // activate should specify enough opts\n  OPT_TYPE = \"opt_type\", // activate effect opts should match form type\n  DECK_EMPTY = \"deck_empty\", // cannot draw card from empty deck\n  MASTERY = \"mastery\", // action requires a disabled mastery\n  COLOR = \"color\", // create gems must create a matching color\n  CANNOT_MOVE = \"cannot_move\", // cannot move\n  CANNOT_ATTACK = \"cannot_attack\", // cannot attack\n  CANNOT_CREATE = \"cannot_create\", // cannot create\n  INVULNERABLE = \"invulnerable\", // cannot be damaged\n  STALE = \"stale\", // a race condition was detected\n  HIDDEN = \"hidden\", // the step is hidden\n  KEYFRAME = \"keyframe\", // an active keyframe is blocking the step\n  UI_LOCKED = \"ui_locked\", // the ui is locked (client-only)\n  INVALID_CHECKPOINT_SLOT = \"invalid_checkpoint_slot\",\n  INVALID_DIALOG_OPTION = \"invalid_dialog_option\",\n  GAME_ENDED = \"game_ended\", // no steps allowed after game end\n\n  // general checks\n  RESOLVE = \"resolve\", // step must resolve\n  ROLE = \"role\", // role must have permission for step\n  TURN = \"turn\", // player must act in turn\n  COST = \"cost\", // player must be able to afford step\n  READY = \"ready\", // acting permanent must be ready\n\n  // The Swarm-specific checks\n  TOO_FAR = \"too_far\",\n\n  /** Generic check type for use by effects/game specs. */\n  GENERIC = \"generic\",\n}\n\nexport type FailedChecks = Set<Check>;\n\n/**\n * Which failed text should we show when it's invalid?\n * Order matters: higher takes priority.\n */\nexport const getFailText = (failedChecks_: FailedChecks): string | null => {\n  const failedChecks = new Set(failedChecks_);\n  // We haven't specified any opts yet, so don't disable activate\n  // ability buttons due to not enough opts.\n  failedChecks.delete(Check.NUM_OPTS);\n  if (failedChecks.has(Check.LOCKED_IN)) return \"Already locked in.\";\n  if (failedChecks.has(Check.NO_DECK)) return \"No deck selected.\";\n  if (failedChecks.has(Check.DECK_TOO_MANY_LEGENDARIES))\n    return \"Deck has too many legendaries.\";\n  if (failedChecks.has(Check.DECK_TOO_LARGE)) return \"Deck too large.\";\n  if (failedChecks.has(Check.DECK_TOO_SMALL)) return \"Deck too small.\";\n  if (failedChecks.has(Check.INVULNERABLE)) return \"Invulnerable.\";\n  if (failedChecks.has(Check.CARD_TYPE)) return \"Not a creature.\";\n  if (failedChecks.has(Check.ALLIED)) return \"Unit is allied.\";\n  if (failedChecks.has(Check.PROTECTED)) return \"Unit is protected.\";\n  if (failedChecks.has(Check.TERRAIN)) return \"Space is on the wrong side.\";\n  if (failedChecks.has(Check.OCCUPIED)) return \"Space is occupied.\";\n  if (failedChecks.has(Check.TOO_FAR)) return \"Too far away.\";\n  if (failedChecks.has(Check.ROLE)) return \"You can't do that.\";\n  if (failedChecks.has(Check.TURN)) return \"Not your turn.\";\n  if (failedChecks.has(Check.READY)) return \"Not Ready.\";\n  if (failedChecks.has(Check.COST)) return \"Can't afford.\";\n  if (failedChecks.size !== 0) return \"Invalid.\";\n  return null;\n};\n\n/**\n * Is this set of failedChecks a passthrough, i.e. invalid, and we\n * don't even show it as an option?\n */\nexport const isPassthrough = (\n  failedChecks_: FailedChecks,\n  stepType?: StepType\n): boolean => {\n  // Keep only the failedChecks that *will* trigger a passthrough,\n  // i.e. delete all the checks we *do* want to show.\n  const failedChecks = new Set(failedChecks_);\n\n  // We might still want to display the step as a preview even if it's\n  // invalid, for example if we just can't afford it.\n  failedChecks.delete(Check.COST);\n  failedChecks.delete(Check.READY);\n  failedChecks.delete(Check.PROTECTED);\n  failedChecks.delete(Check.INVULNERABLE);\n  failedChecks.delete(Check.TOO_FAR);\n  failedChecks.delete(Check.GENERIC);\n\n  // Preview move and attack ranges for opponent permanents.\n  if (\n    stepType &&\n    [StepType.MOVE, StepType.ATTACK, StepType.SUMMON].includes(stepType)\n  ) {\n    failedChecks.delete(Check.TURN);\n    failedChecks.delete(Check.ROLE);\n  }\n\n  if (stepType !== undefined && [StepType.END_TURN].includes(stepType))\n    failedChecks.delete(Check.UI_LOCKED);\n\n  return failedChecks.size > 0;\n};\n","import {\n  PermanentEventType,\n  PermanentEventHandlers,\n} from \"engine/server-hooks\";\n/**\n * Types of counters used in the game.\n * A counter serves a similar role to real-life counters. They\n * may be used to track all sorts of custom modifications to\n * a permanent's state, such as:\n * - Buffs, debuffs and other status effects.\n * - Statistics required for game mechanics or card effects.\n * - Reminders to carry out an action at a later time, or when a\n *   certain game event is triggered (see PermanentEvent).\n */\nexport enum CounterType {\n  /** Generic counter just used to run effects on expiry. */\n  EFFECT = \"effect\",\n\n  BASE_GEMS = \"base_gems\",\n  POWER_ADJUSTMENT = \"power_adjustment\",\n  MAX_HEALTH_ADJUSTMENT = \"max_health_adjustment\",\n  SHELL_ADJUSTMENT = \"shell_adjustment\",\n  IGNORED_DAMAGE = \"ignored_damage\",\n  DAMAGE_TAKEN = \"damage_taken\",\n  SHELL_DAMAGE_TAKEN = \"shell_damage_taken\",\n\n  INVULNERABLE = \"invulnerable\",\n  CANNOT_BE_DESTROYED = \"cannot_be_destroyed\",\n  CANNOT_MOVE = \"cannot_move\",\n  CANNOT_ATTACK = \"cannot_attack\",\n  CANNOT_CREATE = \"cannot_create\",\n\n  DOES_NOT_PROTECT = \"does_not_protect\",\n\n  /** Allows friendly creatures to move to an adjacent empty space. */\n  ALLOWS_MOVE_TO_ADJACENT = \"allows_move_to_adjacent\",\n  /** Protects friendly units in adjacent columns. */\n  PROTECTS_ADJACENT_COLUMNS = \"protects_adjacent_columns\",\n  /** When this permanent destroys another, it moves to the destroyed permanent's space if possible. */\n  BODY_SLAM = \"body_slam\",\n  /** Will not ready on its next turn. */\n  FROZEN = \"frozen\",\n  /** Units with poison take one damage at the start of their turn. Stacks. */\n  POISON = \"poison\",\n  /** Units with this counter are destroyed on the end of the turn. */\n  DESTROY_ON_END_OF_TURN = \"destroy_on_end_of_turn\",\n  /** Prevents one instance of damage. */\n  DIVINE_SHIELD = \"divine_shield\",\n  /** This permanent attacks without paying gems. */\n  ATTACKS_FOR_FREE = \"attacks_for_free\",\n\n  // Counters that indicate actions in response to game events.\n  // These may be very specific to carry out particular card\n  // functionality.\n  CAT_SPECIAL_PENDING = \"cat_special_pending\",\n  DOOM = \"doom\",\n  SUMMONED_THIS_TURN = \"summoned_this_turn\",\n  FLEXED_THIS_TURN = \"flexed_this_turn\",\n  ASLEEP = \"asleep\",\n\n  /** Number of happy bears in the Bearhive, for Puzzle 51. */\n  HAPPY_BEARS = \"happy_bears\",\n  /** Number of sad bears in the Bearhive, for Puzzle 51. */\n  SAD_BEARS = \"sad_bears\",\n}\n\nexport type CounterData = {\n  handlers?: PermanentEventHandlers;\n};\n\ntype CounterBase = {\n  type: CounterType;\n  /** An optional number associated with the counter. */\n  val?: number;\n  /**\n   * Value to override the explanation of the counter, shown when\n   * hovering over it in the zoomed card display.\n   * Explanations that do not need to be generated by the user (i.e.\n   * are user-visible, if we're doing code hiding) should go directly in\n   * getCounterExplanation in StatDisplay.tsx.\n   * If there is no explanation either here or there, the counter will\n   * not be displayed to the user.\n   */\n  explanation?: string;\n  /**\n   * If expiry is omitted, then the counter expires when the permanent\n   * is destroyed.\n   */\n  expiry?: PermanentEventType;\n};\n\ntype SimpleCounter = CounterBase & {\n  type:\n    | CounterType.EFFECT\n    | CounterType.INVULNERABLE\n    | CounterType.CANNOT_BE_DESTROYED\n    | CounterType.CANNOT_MOVE\n    | CounterType.CANNOT_ATTACK\n    | CounterType.CANNOT_CREATE\n    | CounterType.DOES_NOT_PROTECT\n    | CounterType.ALLOWS_MOVE_TO_ADJACENT\n    | CounterType.PROTECTS_ADJACENT_COLUMNS\n    | CounterType.FROZEN\n    | CounterType.CAT_SPECIAL_PENDING\n    | CounterType.BODY_SLAM\n    | CounterType.DESTROY_ON_END_OF_TURN\n    | CounterType.DIVINE_SHIELD\n    | CounterType.ATTACKS_FOR_FREE\n    | CounterType.SUMMONED_THIS_TURN\n    | CounterType.FLEXED_THIS_TURN\n    | CounterType.ASLEEP;\n};\n\nexport type ValueCounterType =\n  | CounterType.BASE_GEMS\n  | CounterType.POWER_ADJUSTMENT\n  | CounterType.MAX_HEALTH_ADJUSTMENT\n  | CounterType.SHELL_ADJUSTMENT\n  | CounterType.IGNORED_DAMAGE\n  | CounterType.DAMAGE_TAKEN\n  | CounterType.SHELL_DAMAGE_TAKEN\n  | CounterType.DOOM\n  | CounterType.POISON\n  | CounterType.HAPPY_BEARS // Puzzle 51\n  | CounterType.SAD_BEARS; // Puzzle 51\n\ntype ValueCounter = CounterBase & {\n  type: ValueCounterType;\n  val: number;\n};\n\n/**\n * Counters are markers placed on a card that change it. Counters may be tied\n * to an expiry event, and potentially trigger an action on expiry.\n */\nexport type Counter = Readonly<SimpleCounter | ValueCounter>;\n\nexport const getCounterExplanation = (counter: Counter): string | null => {\n  const { explanation } = counter;\n\n  // Explanation defined on the counter always overrides the default\n  // explanations.\n  if (explanation !== undefined) return explanation;\n\n  switch (counter.type) {\n    case CounterType.CANNOT_BE_DESTROYED:\n      return \"Indestructable.\";\n    case CounterType.INVULNERABLE:\n      return \"Invulnerable.\";\n    default:\n      return null;\n  }\n};\n","import {\n  Player,\n  Slot,\n  Permanent,\n  areSlotsAdjacent,\n} from \"engine/types/game-state\";\nimport { InspectorContext } from \"engine/types/shared-game-specs\";\nimport {\n  ColorSymbol,\n  CostColor,\n  CardType,\n  GemColor,\n} from \"engine/types/card-data\";\nimport { CounterType } from \"engine/types/counters\";\nimport {\n  EffectOptType,\n  EffectOptResolved,\n  EffectOptForm,\n  EffectOptValidationContext,\n  AbilityType,\n} from \"engine/types/effects\";\nimport { Check, FailedChecks } from \"engine/types/action-validation\";\n\n/** Card effect information that is shared between client and server. */\nexport type CardEffectsShared = {\n  /** Is this card a structure? Matters for playing creatures on top. */\n  isStructure?: boolean;\n  /**\n   * Is this card a base? Matters for:\n   * - Number of gems received at turn start.\n   * - Checking the game loss condition.\n   */\n  isBase?: boolean;\n  isLegendary?: boolean;\n\n  /** Override the card's base power. */\n  power?: number;\n  /** Override the card's base max health. */\n  maxHealth?: number;\n\n  /** Override the deckbuilding limit for this card. */\n  deckbuildingLimit?: number;\n  /** Disable the deckbuilding limit entirely for this card. */\n  disableDeckbuildingLimit?: boolean;\n\n  // These are split up to make the effects spec shorter.\n  /**\n   * Gems that cards can create, if different from the default (one gem of the\n   * card's color). Most cards don't need to specify this.\n   */\n  createGemColors?: GemColor[][];\n  /**\n   * The cost for the card's activated ability. Should be specified even if\n   * free. The existence of the cost is how we know the activated ability\n   * exists in the first place.\n   */\n  flexCost?: CostColor[];\n  specialCost?: CostColor[];\n  /**\n   * Specs for user selections required to fully specify the application\n   * of an effect.\n   */\n  flexForms?: EffectOptForm[];\n  specialForms?: EffectOptForm[];\n\n  /** Adjust summon validation. */\n  adjustSummonChecks?: (\n    failedChecks: FailedChecks,\n    player: Player,\n    cardName: string,\n    slot: Slot,\n    ctx: InspectorContext\n  ) => void;\n  /** Adjust move validation. */\n  adjustMoveChecks?: (\n    failedChecks: FailedChecks,\n    permanent: Permanent,\n    slot: Slot,\n    ctx: InspectorContext\n  ) => void;\n  /** Adjust attack validation. */\n  adjustAttackChecks?: (\n    failedChecks: FailedChecks,\n    attacker: Permanent,\n    defender: Permanent,\n    ctx: InspectorContext\n  ) => void;\n\n  /** Compute the card text, if it depends on permanent state. */\n  computeText?: (permanent: Permanent, ctx: InspectorContext) => string;\n};\n\nexport type SharedEffectsDB = { [cardName: string]: CardEffectsShared };\n\n// Utility functions to quickly get opt values selected so far.\nconst extractOpt = (\n  ctx: EffectOptValidationContext,\n  index: number\n): EffectOptResolved => {\n  const { effectOpts } = ctx;\n  const effectOpt = effectOpts[index];\n  if (effectOpt === undefined) {\n    throw new Error(\"effect opt not selected yet\");\n  }\n  return effectOpt;\n};\n\nconst extractOptPermanent = (\n  ctx: EffectOptValidationContext,\n  index: number\n): Permanent => {\n  const effectOpt = extractOpt(ctx, index);\n  if (effectOpt.type !== EffectOptType.PERMANENT) {\n    throw new Error(\"wrong effect opt type\");\n  }\n  return effectOpt.permanent;\n};\n\nconst extractOptSlot = (\n  ctx: EffectOptValidationContext,\n  index: number\n): Slot => {\n  const effectOpt = extractOpt(ctx, index);\n  if (effectOpt.type !== EffectOptType.SLOT) {\n    throw new Error(\"wrong effect opt type\");\n  }\n  return effectOpt.slot;\n};\n\nexport const makePermanentOptForm = (\n  validate: (\n    failedChecks: FailedChecks,\n    permanent: Permanent,\n    target: Permanent,\n    ctx: EffectOptValidationContext\n  ) => void,\n  userPrompt?: string\n): EffectOptForm => {\n  return {\n    type: EffectOptType.PERMANENT,\n    validate: (failedChecks, target, ctx) => {\n      validate(failedChecks, ctx.permanent, target, ctx);\n    },\n    userPrompt,\n  };\n};\n\nexport const makeSlotOptForm = (\n  validate: (\n    failedChecks: FailedChecks,\n    slot: Slot,\n    ctx: EffectOptValidationContext\n  ) => void,\n  userPrompt?: string\n): EffectOptForm => {\n  return {\n    type: EffectOptType.SLOT,\n    validate: (failedChecks, slot, ctx) => {\n      validate(failedChecks, slot, ctx);\n    },\n    userPrompt,\n  };\n};\n\n/** Create a form which makes the user choose one out of a fixed list of options. */\nexport const makeOneChoiceOptForm = (\n  choices: string[], // The choices available to choose from.\n  validate: (\n    failedChecks: FailedChecks,\n    permanent: Permanent,\n    choice: string,\n    ctx: InspectorContext\n  ) => void,\n  userPrompt?: string\n): EffectOptForm => {\n  return {\n    choices: choices,\n    type: EffectOptType.ONE_CHOICE,\n    validate: (failedChecks, target, ctx) => {\n      validate(failedChecks, ctx.permanent, target, ctx);\n    },\n    userPrompt,\n  };\n};\n\nexport const plainAbilityActivationValidator = (\n  failedChecks: FailedChecks,\n  permanent: Permanent,\n  abilityType: AbilityType,\n  effectOpts: EffectOptResolved[],\n  ctx: InspectorContext\n): void => {\n  const { inspector } = ctx;\n  inspector.validateActivateAbility(\n    failedChecks,\n    permanent,\n    abilityType,\n    effectOpts\n  );\n};\n\nconst plainAttackValidator = (\n  failedChecks: FailedChecks,\n  permanent: Permanent,\n  target: Permanent,\n  ctx: InspectorContext\n): void => {\n  const { inspector } = ctx;\n  inspector.validateAttack(failedChecks, permanent, target);\n};\n\nexport const validateEffectOpt = (\n  failedChecks: FailedChecks,\n  effectOpt: EffectOptResolved,\n  form: EffectOptForm,\n  ctx: EffectOptValidationContext\n) => {\n  const { inspector } = ctx;\n  switch (form.type) {\n    case EffectOptType.PERMANENT: {\n      if (effectOpt.type !== EffectOptType.PERMANENT) {\n        failedChecks.add(Check.OPT_TYPE);\n        break;\n      }\n      if (form.validate) {\n        form.validate(failedChecks, effectOpt.permanent, ctx);\n      }\n      break;\n    }\n    case EffectOptType.SLOT: {\n      if (effectOpt.type !== EffectOptType.SLOT) {\n        failedChecks.add(Check.OPT_TYPE);\n        break;\n      }\n      if (form.validate) {\n        form.validate(failedChecks, effectOpt.slot, ctx);\n      }\n      break;\n    }\n  }\n};\n\nfunction boarAdjustAttackChecks(\n  failedChecks: FailedChecks,\n  attacker: Permanent,\n  defender: Permanent\n) {\n  // can only attack down its column\n  if (attacker.slot.column !== defender.slot.column)\n    failedChecks.add(Check.GENERIC);\n}\n/* eslint sort-keys/sort-keys-fix: [\"warn\", \"asc\", { minKeys: 15 }] */\nexport const COMMON_CARD_EFFECTS_SHARED: SharedEffectsDB = {\n  \"bb-b\": {\n    deckbuildingLimit: 1,\n    isLegendary: true,\n  },\n  \"bee-rider\": {\n    flexCost: [],\n    flexForms: [\n      makeSlotOptForm((failedChecks, slot, ctx) => {\n        const { inspector, permanent } = ctx;\n        // can only flex once per turn\n        if (\n          inspector.doesPermanentHaveCounterType(\n            permanent,\n            CounterType.FLEXED_THIS_TURN\n          )\n        ) {\n          failedChecks.add(Check.GENERIC);\n        }\n        if (!areSlotsAdjacent(permanent.slot, slot)) {\n          failedChecks.add(Check.ADJACENT);\n        }\n        // cannot move into occupied slot\n        if (inspector.isSlotOccupied(slot)) failedChecks.add(Check.OCCUPIED);\n      }),\n    ],\n  },\n  beeflector: {\n    // must be summoned on enemy terrain\n    adjustSummonChecks: (failedChecks) => {\n      if (failedChecks.has(Check.TERRAIN)) {\n        failedChecks.delete(Check.TERRAIN);\n      } else {\n        failedChecks.add(Check.TERRAIN);\n      }\n    },\n  },\n  beeowulf: {\n    specialCost: [ColorSymbol.YELLOW],\n    specialForms: [\n      makePermanentOptForm((failedChecks, permanent, target, ctx) => {\n        const { inspector } = ctx;\n        inspector.validateAttack(failedChecks, permanent, target);\n\n        // The special can only be used on creatures.\n        if (inspector.getCardType(target) !== CardType.CREATURE)\n          failedChecks.add(Check.GENERIC);\n      }),\n      makeSlotOptForm((failedChecks, slot, ctx) => {\n        const { inspector } = ctx;\n        const defender = extractOptPermanent(ctx, 0);\n        // must move to an adjacent space\n        if (!areSlotsAdjacent(defender.slot, slot))\n          failedChecks.add(Check.ADJACENT);\n        // cannot move into occupied slot\n        if (inspector.isSlotOccupied(slot)) failedChecks.add(Check.OCCUPIED);\n      }, \"select a slot to move the target to\"),\n    ],\n  },\n  blancmange: {\n    deckbuildingLimit: 1,\n    isLegendary: true,\n\n    flexCost: [],\n    flexForms: [\n      makePermanentOptForm((failedChecks, permanent, target, ctx) => {\n        const { inspector } = ctx;\n        // can only Flex once on the turn it's summoned and if it hasn't already flexed\n        if (\n          !inspector.doesPermanentHaveCounterType(\n            permanent,\n            CounterType.SUMMONED_THIS_TURN\n          )\n        ) {\n          failedChecks.add(Check.GENERIC);\n        }\n        // not self\n        if (target.id === permanent.id) failedChecks.add(Check.GENERIC);\n        // friendly\n        if (target.owner !== permanent.owner) failedChecks.add(Check.ALLIED);\n        // Creature\n        if (inspector.getCardType(target) !== CardType.CREATURE) {\n          failedChecks.add(Check.CARD_TYPE);\n        }\n        // make sure target is reflectable\n        if (inspector.isSlotOccupied(inspector.getReflectedSlot(target.slot)))\n          failedChecks.add(Check.OCCUPIED);\n      }, \"select a friendly Creature\"),\n    ],\n  },\n  \"boarnana-tree\": {\n    flexCost: [ColorSymbol.RED],\n  },\n  \"boarry-farmer\": {\n    adjustAttackChecks: boarAdjustAttackChecks,\n  },\n  camp: {\n    isStructure: true,\n    isBase: true,\n  },\n  \"captain-pi\": {\n    deckbuildingLimit: 1,\n    isLegendary: true,\n    createGemColors: [[ColorSymbol.RAINBOW]],\n  },\n  chicken: {\n    specialCost: [],\n  },\n  \"chocolate-calf\": {\n    flexCost: [ColorSymbol.WHITE],\n  },\n  coloring: {\n    deckbuildingLimit: 1,\n    isLegendary: true,\n\n    flexCost: [],\n    flexForms: [\n      makePermanentOptForm((failedChecks, permanent, target, ctx) => {\n        const { inspector } = ctx;\n        // can only Flex once on the turn it's summoned and if it hasn't already flexed\n        if (\n          !inspector.doesPermanentHaveCounterType(\n            permanent,\n            CounterType.SUMMONED_THIS_TURN\n          )\n        ) {\n          failedChecks.add(Check.GENERIC);\n        }\n        // not self\n        if (target.id === permanent.id) failedChecks.add(Check.GENERIC);\n        // friendly\n        if (target.owner !== permanent.owner) failedChecks.add(Check.ALLIED);\n        // Creature\n        if (inspector.getCardType(target) !== CardType.CREATURE) {\n          failedChecks.add(Check.CARD_TYPE);\n        }\n        // unready (technically this Check.READY should be the opposite)\n        if (target.ready) failedChecks.add(Check.READY);\n      }, \"select an unready friendly Creature\"),\n    ],\n  },\n  dargle: {\n    deckbuildingLimit: 1,\n    isLegendary: true,\n  },\n  \"flora-the-explora\": {\n    specialCost: [],\n  },\n  giraffatitan: {\n    specialCost: [],\n    specialForms: [\n      makePermanentOptForm((failedChecks, permanent, target, ctx) => {\n        const { inspector } = ctx;\n        inspector.validateAttack(failedChecks, permanent, target);\n\n        // The special can only be used on creatures.\n        if (inspector.getCardType(target) !== CardType.CREATURE)\n          failedChecks.add(Check.GENERIC);\n        // Instead of checking if the target is unprotected,\n        // check that it is protected.\n        failedChecks.delete(Check.PROTECTED);\n        if (!inspector.isProtectedFrom(target, permanent))\n          failedChecks.add(Check.GENERIC);\n\n        if (target.slot.column !== permanent.slot.column)\n          failedChecks.add(Check.GENERIC);\n      }, \"select a protected Creature in the same column\"),\n    ],\n  },\n  \"glass-of-moo\": {\n    specialCost: [],\n  },\n  \"glass-of-moocha\": {\n    specialCost: [],\n  },\n  hog: {\n    adjustAttackChecks: boarAdjustAttackChecks,\n  },\n  \"hog-factory\": {\n    isStructure: true,\n    isBase: true,\n  },\n  \"hog-factorytory\": {\n    isStructure: true,\n    isBase: true,\n  },\n  \"hog-factorytorytory\": {\n    isStructure: true,\n    isBase: true,\n  },\n  \"hog-hog\": {\n    adjustAttackChecks: boarAdjustAttackChecks,\n  },\n  \"hog-on-a-log\": {\n    adjustAttackChecks: boarAdjustAttackChecks,\n  },\n  \"hog-on-a-log-on-a\": {\n    adjustAttackChecks: boarAdjustAttackChecks,\n  },\n  jabberwock: {\n    deckbuildingLimit: 1,\n    isLegendary: true,\n\n    specialCost: [],\n    specialForms: [\n      makePermanentOptForm((failedChecks, permanent, target, ctx) => {\n        const { inspector } = ctx;\n        // friendly\n        if (target.owner !== permanent.owner) failedChecks.add(Check.ALLIED);\n        // Creature\n        if (inspector.getCardType(target) !== CardType.CREATURE) {\n          failedChecks.add(Check.CARD_TYPE);\n        }\n      }, \"select a friendly Creature\"),\n    ],\n  },\n  keep: {\n    isStructure: true,\n    isBase: true,\n    adjustMoveChecks: (failedChecks) => {\n      // Keep can move even though it is a structure.\n      failedChecks.delete(Check.CARD_TYPE);\n    },\n    adjustAttackChecks: (failedChecks) => {\n      // Keep can attack even though it is a structure.\n      failedChecks.delete(Check.CARD_TYPE);\n    },\n  },\n  \"lady-jane\": {\n    specialCost: [ColorSymbol.WHITEBLACK],\n    specialForms: [\n      makePermanentOptForm((failedChecks, permanent, target, ctx) => {\n        const { inspector } = ctx;\n\n        if (permanent.owner === target.owner) {\n          failedChecks.add(Check.ALLIED);\n        }\n        // Target must have taken damage this turn.\n        if (inspector.getCounterValSum(target, CounterType.DAMAGE_TAKEN) <= 0)\n          failedChecks.add(Check.GENERIC);\n      }),\n    ],\n  },\n  \"log-factory\": {\n    isStructure: true,\n    isBase: true,\n  },\n  \"log-factorytory\": {\n    isStructure: true,\n    isBase: true,\n  },\n  \"log-factorytorytory\": {\n    isStructure: true,\n    isBase: true,\n  },\n  \"miss-yu\": {\n    deckbuildingLimit: 1,\n    isLegendary: true,\n  },\n  \"mister-penny\": {\n    deckbuildingLimit: 1,\n    isLegendary: true,\n\n    flexCost: [],\n    flexForms: [\n      makePermanentOptForm((failedChecks, permanent, target, ctx) => {\n        const { inspector } = ctx;\n        // friendly\n        if (target.owner !== permanent.owner) failedChecks.add(Check.ALLIED);\n        // Structure\n        if (inspector.getCardType(target) !== CardType.STRUCTURE) {\n          failedChecks.add(Check.CARD_TYPE);\n        }\n      }, \"select a friendly Structure\"),\n    ],\n  },\n  moonick: {\n    deckbuildingLimit: 1,\n    isLegendary: true,\n  },\n  murray: {\n    flexCost: [ColorSymbol.WHITEBLACK],\n    flexForms: [\n      makePermanentOptForm((failedChecks, permanent, target, ctx) => {\n        const { inspector } = ctx;\n        // can only flex once per turn\n        if (\n          inspector.doesPermanentHaveCounterType(\n            permanent,\n            CounterType.FLEXED_THIS_TURN\n          )\n        ) {\n          failedChecks.add(Check.GENERIC);\n        }\n      }),\n    ],\n    specialCost: [\n      ColorSymbol.RED,\n      ColorSymbol.YELLOW,\n      ColorSymbol.PURPLE,\n      ColorSymbol.GREEN,\n      ColorSymbol.WHITE,\n      ColorSymbol.BLACK,\n    ],\n    specialForms: [\n      makePermanentOptForm((failedChecks, permanent, target, ctx) => {\n        const { inspector } = ctx;\n        // cannot attack allied unit\n        if (permanent.owner === target.owner) failedChecks.add(Check.ALLIED);\n        // target must be a structure\n        if (inspector.getCardType(target) !== CardType.STRUCTURE)\n          failedChecks.add(Check.GENERIC);\n        // target must not be invulnerable\n        if (\n          inspector.doesPermanentHaveCounterType(\n            target,\n            CounterType.INVULNERABLE\n          )\n        )\n          failedChecks.add(Check.INVULNERABLE);\n      }),\n    ],\n  },\n  \"nice-cow\": {\n    specialCost: [ColorSymbol.ROCK, ColorSymbol.BLACK],\n    specialForms: [\n      makePermanentOptForm(plainAttackValidator, \"select an attack target\"),\n    ],\n  },\n  nightshade: {\n    specialCost: [],\n    specialForms: [\n      makePermanentOptForm((failedChecks, permanent, target, ctx) => {\n        if (permanent.owner === target.owner) {\n          failedChecks.add(Check.ALLIED);\n        }\n      }),\n    ],\n  },\n  \"oklahoma-tusks\": {\n    flexCost: [ColorSymbol.RED],\n    specialCost: [ColorSymbol.RED],\n  },\n  othello: {\n    deckbuildingLimit: 1,\n    isLegendary: true,\n\n    specialCost: [],\n    specialForms: [\n      makePermanentOptForm((failedChecks, permanent, target, ctx) => {\n        const { inspector } = ctx;\n        // friendly\n        if (target.owner !== permanent.owner) failedChecks.add(Check.ALLIED);\n        // creature\n        if (inspector.getCardType(target) !== CardType.CREATURE) {\n          failedChecks.add(Check.CARD_TYPE);\n        }\n        // not self\n        if (target.id === permanent.id) failedChecks.add(Check.GENERIC);\n      }, \"select a friendly Creature\"),\n      // TODO: slot\n      makeSlotOptForm((failedChecks, slot, ctx) => {\n        const { inspector, permanent } = ctx;\n        // cannot move into occupied slot\n        if (inspector.isSlotOccupied(slot)) failedChecks.add(Check.OCCUPIED);\n        // friendly\n        if (inspector.getTerrainOf(slot) !== permanent.owner) {\n          failedChecks.add(Check.ALLIED);\n        }\n      }, \"select a slot to Summon the copy\"),\n    ],\n  },\n  \"quail-aboard-fiery-steeds\": {\n    specialCost: [ColorSymbol.RED, ColorSymbol.RED],\n  },\n  \"quantum-butter-churner\": {\n    adjustAttackChecks: (failedChecks, attacker, defender, ctx) => {\n      const { inspector } = ctx;\n      // here the attacker must not be protected from the defender (so the\n      // attacker is the defender in this isProtectedFrom call)\n      if (inspector.isProtectedFrom(attacker, defender))\n        failedChecks.add(Check.GENERIC);\n    },\n  },\n  \"realistic-rex\": {\n    specialCost: [ColorSymbol.GREEN],\n    specialForms: [\n      makePermanentOptForm(plainAttackValidator, \"select an attack target\"),\n      makePermanentOptForm(plainAttackValidator, \"select an attack target\"),\n    ],\n  },\n  \"reckless-medisaur\": {\n    specialCost: [],\n    specialForms: [\n      makePermanentOptForm((failedChecks, permanent, target, ctx) => {\n        const { inspector } = ctx;\n        // same owner\n        if (permanent.owner !== target.owner) {\n          failedChecks.add(Check.ALLIED);\n        }\n        // is base\n        if (!inspector.getSharedEffects(target).isBase) {\n          failedChecks.add(Check.CARD_TYPE);\n        }\n      }, \"select an allied base\"),\n      makePermanentOptForm((failedChecks, _, target, ctx) => {\n        const { inspector } = ctx;\n        // check if creature\n        if (inspector.getCardType(target) !== CardType.CREATURE) {\n          failedChecks.add(Check.CARD_TYPE);\n        }\n        // check if target has taken damage\n        if (target.damage <= 0) {\n          failedChecks.add(Check.GENERIC);\n        }\n      }, \"select a Creature that has taken damage\"),\n    ],\n  },\n  robot: {\n    specialCost: [],\n    // Robot is only used by AI, but provide a form anyway for\n    // dev testing.\n    specialForms: [{ type: EffectOptType.PERMANENT }],\n  },\n  \"roe-doe-dendron\": {\n    specialCost: [ColorSymbol.PURPLE],\n    specialForms: [\n      makePermanentOptForm(plainAttackValidator, \"select an attack target\"),\n    ],\n  },\n  \"rude-cow\": {\n    specialCost: [ColorSymbol.WHITE],\n    specialForms: [\n      makePermanentOptForm(plainAttackValidator, \"select an attack target\"),\n    ],\n  },\n  \"sapphire-rose\": {\n    flexCost: [],\n    flexForms: [],\n  },\n  \"slime--slime\": {\n    disableDeckbuildingLimit: true,\n    isLegendary: true,\n  },\n  \"spelling-bee\": {\n    deckbuildingLimit: 1,\n    isLegendary: true,\n  },\n  \"stackstack-tory\": {\n    isStructure: true,\n    isBase: true,\n  },\n  stacktory: {\n    isStructure: true,\n    isBase: true,\n  },\n  \"swarm-tactics\": {\n    specialCost: [ColorSymbol.YELLOW],\n  },\n  \"switch-boar-d\": {\n    specialCost: [ColorSymbol.RED],\n    specialForms: [\n      makePermanentOptForm(plainAttackValidator, \"select an attack target\"),\n      makePermanentOptForm((failedChecks, permanent, target) => {\n        // target must be friendly\n        if (target.owner !== permanent.owner) failedChecks.add(Check.GENERIC);\n        // target must be adjacent\n        if (!areSlotsAdjacent(target.slot, permanent.slot))\n          failedChecks.add(Check.GENERIC);\n      }, \"select a Creature to swap places with\"),\n    ],\n  },\n  \"touch-grass\": {\n    specialCost: [ColorSymbol.PURPLE],\n    specialForms: [\n      makePermanentOptForm((failedChecks, permanent, target, ctx) => {\n        const { inspector } = ctx;\n        inspector.validateAttack(failedChecks, permanent, target);\n\n        // The special can only be used on creatures.\n        if (inspector.getCardType(target) !== CardType.CREATURE)\n          failedChecks.add(Check.GENERIC);\n        // Instead of checking if the target is unprotected,\n        // check that it is protected.\n        failedChecks.delete(Check.PROTECTED);\n        if (!inspector.isProtectedFrom(target, permanent))\n          failedChecks.add(Check.GENERIC);\n      }, \"select a protected Creature\"),\n    ],\n  },\n  \"vanilla-calf\": {\n    flexCost: [ColorSymbol.BLACK],\n  },\n};\n/* eslint-disable sort-keys/sort-keys-fix */\n\n// --- Programmatic addition of cards for puzzles. ---\n\nconst KERO_ENABLE_LAYERS: { [cardName: string]: string[] } = {\n  dargle: [\"dino-1.png\", \"!back.png\"],\n  \"miss-yu\": [\"cow-1.png\", \"udder.png\", \"!back-wing.png\"],\n  coloring: [\"dryad-1.png\"],\n  othello: [\"cow-2.png\", \"udder.png\", \"!back-wing.png\"],\n  jabberwock: [\"dino-2.png\", \"!front.png\"],\n  moonick: [\"cow-4.png\", \"udder.png\", \"!back-wing.png\"],\n  \"bb-b\": [\"bee-1.png\"],\n  \"spelling-bee\": [\"bee-2.png\"],\n  blancmange: [\"cow-3.png\", \"udder.png\", \"!back-wing.png\"],\n  \"slime--slime\": [\"boar-1.png\"],\n  \"mister-penny\": [\"boar-2.png\"],\n};\n\n// top layer to bottom layer:\nconst KERO_LAYERS_ORDER: string[] = [\n  \"face.png\",\n  \"boar-1.png\",\n  \"boar-2.png\",\n  \"dino-2.png\",\n  \"dryad-1.png\",\n  \"udder.png\",\n  \"front.png\",\n  \"bee-2.png\",\n  \"bee-1.png\",\n  \"dino-1.png\",\n  \"cow-1.png\",\n  \"cow-2.png\",\n  \"back.png\",\n  \"cow-3.png\",\n  \"cow-4.png\",\n  \"back-wing.png\",\n];\n\nconst KERO_PARTS_FINAL_BATTLE = [\n  { name: \"dinoTail\", phase: 1 },\n  { name: \"dinoHead\", phase: 1 },\n  { name: \"tusk1\", phase: 2 },\n  { name: \"tusk2\", phase: 2 },\n  { name: \"antlers\", phase: 3 },\n  { name: \"blackLeg1\", phase: 4 },\n  { name: \"blackLeg2\", phase: 4 },\n  { name: \"blackLeg3\", phase: 4 },\n  { name: \"blackLeg4\", phase: 4 },\n  { name: \"blackLeg5\", phase: 4 },\n  { name: \"udders\", phase: 4 },\n  { name: \"whiteLeg1\", phase: 4 },\n  { name: \"whiteLeg2\", phase: 4 },\n  { name: \"whiteLeg3\", phase: 4 },\n  { name: \"whiteLeg4\", phase: 4 },\n  { name: \"wing\", phase: 5 },\n];\n\n// Indicates, for each card's layer effects, which phase after which it should\n// be disabled, if any.\nconst KERO_PHASE_DISABLE: { [cardName: string]: number } = {\n  dargle: 1,\n  \"miss-yu\": 4,\n  coloring: 3,\n  othello: 4,\n  jabberwock: 1,\n  moonick: 4,\n  \"bb-b\": 5,\n  \"spelling-bee\": 5,\n  blancmange: 4,\n  \"slime--slime\": 2,\n  \"mister-penny\": 2,\n};\n\n// quick consistency check\nfor (const [cardName, layers] of Object.entries(KERO_ENABLE_LAYERS)) {\n  if (COMMON_CARD_EFFECTS_SHARED[cardName] === undefined)\n    throw new Error(\n      `unknown card name ${cardName} in kero layers spec: did it get renamed?`\n    );\n  for (let layer of layers) {\n    if (layer.startsWith(\"!\")) {\n      layer = layer.slice(1);\n    }\n    if (!KERO_LAYERS_ORDER.includes(layer))\n      throw new Error(`kero layer ${layer} does not have a sort order`);\n  }\n}\n\nexport const getKeroLayers = (\n  cardUnlocks: string[],\n  keroPhase: number\n): string[] => {\n  const enabledLayers = new Set([\n    \"face.png\",\n    \"front.png\",\n    \"back.png\",\n    \"back-wing.png\",\n  ]);\n  for (const cardName of cardUnlocks) {\n    if (!(cardName in KERO_ENABLE_LAYERS)) continue;\n    for (const layer of KERO_ENABLE_LAYERS[cardName]) {\n      if (keroPhase <= KERO_PHASE_DISABLE[cardName]) {\n        if (layer.startsWith(\"!\")) {\n          enabledLayers.delete(layer.slice(1));\n        } else {\n          enabledLayers.add(layer);\n        }\n      }\n    }\n  }\n  return KERO_LAYERS_ORDER.filter((layer) =>\n    enabledLayers.has(layer)\n  ).reverse();\n};\n\nexport const getKeroLayersForFinalBattle = (keroPhase: number) => {\n  if (keroPhase > 6) {\n    return {\n      parts: new Set<string>(),\n      phase: 7,\n    };\n  }\n  const enabledParts = new Set([\"aliveIndicator\"]);\n  for (const entry of KERO_PARTS_FINAL_BATTLE) {\n    const { name, phase } = entry;\n    if (keroPhase <= phase) {\n      enabledParts.add(name);\n    }\n  }\n  return {\n    parts: enabledParts,\n    phase: keroPhase,\n  };\n};\n","import { Check, FailedChecks } from \"engine/types/action-validation\";\nimport { Deck, DeckUpdate, getDeckSize } from \"engine/types/decks\";\nimport { COMMON_CARD_EFFECTS_SHARED } from \"engine/cards/card-effects-shared\";\nimport { CardsDB } from \"engine/cards/CardsDB\";\n\nexport const isCardValidForDeckbuilding = (\n  cardName: string,\n  cardUnlocks: Set<string>,\n  cardsDB: CardsDB\n): boolean => {\n  const cardData = cardsDB[cardName];\n  if (cardData === undefined) return false;\n  if (!cardData.capturable) return false;\n  if (!cardData.implemented) return false;\n  if (cardData.cardUnlockGroupId !== null && !cardUnlocks.has(cardName))\n    return false;\n  if (COMMON_CARD_EFFECTS_SHARED[cardName]?.isBase ?? false) return false;\n  return true;\n};\n\nexport const validateDeck = (\n  failedChecks: FailedChecks,\n  deck: Deck,\n  maxNumCards: number,\n  maxNumLegendaries: number\n): void => {\n  const deckSize = getDeckSize(deck);\n  if (deckSize < 1) failedChecks.add(Check.DECK_TOO_SMALL);\n  if (deckSize > maxNumCards) failedChecks.add(Check.DECK_TOO_LARGE);\n  // unless final battle, deck can only have 1 unique legendary\n  if (getDeckUniqueLegendaries(deck) > maxNumLegendaries)\n    failedChecks.add(Check.DECK_TOO_MANY_LEGENDARIES);\n};\n\n// return number of unique legendaries in (deck)\nexport const getDeckUniqueLegendaries = (deck: Deck): number => {\n  return Object.entries(deck.cards).filter(\n    ([cardName, count]) =>\n      count > 0 && (COMMON_CARD_EFFECTS_SHARED[cardName]?.isLegendary ?? false)\n  ).length;\n};\n\nexport const isCardLegendary = (cardName: string): boolean =>\n  COMMON_CARD_EFFECTS_SHARED[cardName]?.isLegendary ?? false;\n\nexport const isDeckUpdateValid = (\n  deckUpd: DeckUpdate,\n  deck: Deck,\n  cardUnlocks: Set<string>,\n  cardsDB: CardsDB\n): boolean => {\n  const { cards, priorityCard } = deckUpd;\n  if (cards !== undefined) {\n    for (const [cardName, val] of Object.entries(cards)) {\n      if (!isCardValidForDeckbuilding(cardName, cardUnlocks, cardsDB))\n        return false;\n      const effectsShared = COMMON_CARD_EFFECTS_SHARED[cardName] ?? {};\n      const deckbuildingLimit = effectsShared.deckbuildingLimit ?? 2;\n      const disableDeckbuildingLimit =\n        effectsShared.disableDeckbuildingLimit ?? false;\n      if (val < 0 || !Number.isInteger(val)) return false;\n      if (!disableDeckbuildingLimit && val > deckbuildingLimit) return false;\n    }\n  }\n  if (priorityCard !== undefined) {\n    if (!isCardValidForDeckbuilding(priorityCard, cardUnlocks, cardsDB))\n      return false;\n  }\n  return true;\n};\n","import { Deck, DeckUpdate, applyDeckUpdate } from \"engine/types/decks\";\nimport {\n  PUZ_NAME_MASTERY_TREE,\n  PUZ_NAME_MASTERY_TREE_PROMPT,\n  PUZ_NAME_MYOSB,\n  MYOSB_DATA,\n} from \"engine/puzzles/puzzle-data\";\nimport {\n  REPUTATION_BOOST_MASTERY_ID,\n  PVP_MASTERY_ID,\n  SOLVE_COUNTS_MASTERY_ID,\n} from \"engine/puzzles/mastery-data\";\nimport { WSRespType } from \"game-server/ws\";\nimport { isDeckUpdateValid } from \"game-server/deckbuilding\";\nimport {\n  MasteryTree,\n  MasteryTreeStep,\n  MasteryTreeUpdate,\n  getMasteriesFromMasteryTree,\n  isMasteryTreeStepValid,\n  masteryTreeStepToUpdate,\n  applyMasteryTreeUpdate,\n  normalizeAnswer,\n} from \"game-server/masteries\";\nimport { ClientConnection, GameServer } from \"game-server/GameServer\";\nimport {\n  BackendAnswerSubmission,\n  CheckAnswerBackendRespType,\n  CheckAnswerBackendResp,\n  makeBattleSolveAnswerSubmission,\n} from \"game-server/backend-interface/BackendInterface\";\nimport {\n  SyncTracker,\n  SyncObjectType,\n} from \"game-server/backend-interface/backend-sync\";\nimport {\n  GlobalUpdatesScopeType,\n  GlobalUpdatesScope,\n  GlobalUpdateType,\n} from \"game-server/global-updates\";\nimport { TeamController } from \"./team-controller\";\n\ntype AnswerSubmissionTask = {\n  answer: string;\n  onDone: (resp: CheckAnswerBackendResp) => void;\n  onError: () => void;\n};\n\nexport class TeamFishPuzzleController {\n  teamId: string;\n  puzName: string;\n  server: GameServer;\n\n  numWrongGuesses: number;\n  numExtraGuesses: number;\n  /**\n   * We only keep track of submissions since the server was last\n   * created. The client should get the rest of the submissions\n   * directly from Django.\n   */\n  recentSubmissions: BackendAnswerSubmission[];\n\n  /**\n   * Answer submission queue. This is necessary because to submit an\n   * answer, we perform two requests, one to check it and one to\n   * actually submit it, and submitting an answer affects the checking\n   * of future answers  (e.g. due to repeated answers or guess limits).\n   */\n  pendingAnswerSubmissionTasks: AnswerSubmissionTask[];\n  syncTracker: SyncTracker;\n\n  /**\n   * Map of connId to connections for connections subscribed to\n   * updates for this puzzle.\n   */\n  subscriptions: Map<string, ClientConnection>;\n\n  constructor(\n    teamId: string,\n    puzName: string,\n    numWrongGuesses: number,\n    numExtraGuesses: number,\n    server: GameServer\n  ) {\n    this.teamId = teamId;\n    this.puzName = puzName;\n    this.server = server;\n\n    this.numWrongGuesses = numWrongGuesses;\n    this.numExtraGuesses = numExtraGuesses;\n    this.recentSubmissions = [];\n    this.pendingAnswerSubmissionTasks = [];\n    (this.syncTracker = new SyncTracker(\n      this.server.config,\n      SyncObjectType.ANSWER,\n      (dirtyState) => {\n        this.server.dirtyStateTracker.update({\n          teams: {\n            [this.teamId]: {\n              answers: { [this.puzName]: dirtyState },\n            },\n          },\n        });\n      }\n    )),\n      (this.subscriptions = new Map());\n  }\n\n  getTeamController(): TeamController {\n    return this.server.getTeamController(this.teamId);\n  }\n\n  getGlobalUpdatesScope(): GlobalUpdatesScope {\n    return {\n      type: GlobalUpdatesScopeType.TEAM_FISH_PUZZLE,\n      teamId: this.teamId,\n      puzName: this.puzName,\n    };\n  }\n\n  getNumGuessesRemaining(): number {\n    return (\n      this.server.maxGuessesPerPuzzle +\n      this.numExtraGuesses -\n      this.numWrongGuesses\n    );\n  }\n\n  handleUpdateNumWrongGuesses() {\n    this.server.bigBoardStateTracker.updateTeam(this.teamId, {\n      unlocks: {\n        [this.puzName]: {\n          numWrongGuesses: this.numWrongGuesses,\n        },\n      },\n    });\n    this.handleUpdateNumGuessesRemaining();\n  }\n\n  handleUpdateNumGuessesRemaining() {\n    this.server.broadcastGlobalUpdate(this.getGlobalUpdatesScope(), {\n      type: GlobalUpdateType.TEAM_FISH_PUZZLE_SET_NUM_GUESSES_REMAINING,\n      numGuessesRemaining: this.getNumGuessesRemaining(),\n    });\n  }\n\n  async addSubmissionTask(task: AnswerSubmissionTask) {\n    this.server.numPendingSubmissionTasks++;\n    this.syncTracker.handleModify();\n    this.pendingAnswerSubmissionTasks.push(task);\n    // If there are already tasks in the queue, then the queue\n    // is already being processed elsewhere.\n    if (this.pendingAnswerSubmissionTasks.length > 1) return;\n\n    this.syncTracker.snapshot();\n    while (this.pendingAnswerSubmissionTasks.length > 0) {\n      const { answer, onDone, onError } = this.pendingAnswerSubmissionTasks[0];\n      try {\n        // Piggyback the fast sync throttle to prevent too many\n        // answer submission tasks from running at once.\n        this.server.checkAnswerMetrics.record();\n        const resp = await this.server.runWithSyncThrottleAsync(async () => {\n          return await this.server.backend.checkAnswer({\n            teamId: this.teamId,\n            puzName: this.puzName,\n            answer,\n          });\n        });\n\n        if (resp !== undefined) {\n          if (resp.type === CheckAnswerBackendRespType.SUCCESS) {\n            const { submittedAnswer, isCorrect } = resp;\n\n            const submission = {\n              teamId: this.teamId,\n              puzName: this.puzName,\n              answer: submittedAnswer,\n              isCorrect,\n              timestamp: new Date().getTime(),\n              usedFreeAnswer: false,\n            };\n\n            await this.getTeamController().handleTeamUpdatesAsync({\n              answerSubmissionsToAdd: [submission],\n            });\n\n            this.recentSubmissions.push(submission);\n            if (!isCorrect) {\n              this.numWrongGuesses++;\n              this.handleUpdateNumWrongGuesses();\n            }\n\n            this.server.broadcastGlobalUpdate(this.getGlobalUpdatesScope(), {\n              type: GlobalUpdateType.TEAM_FISH_PUZZLE_ADD_GUESS,\n              submission: {\n                submittedAnswer: submission.answer,\n                timestamp: submission.timestamp,\n              },\n            });\n          }\n\n          onDone(resp);\n        }\n      } catch (err) {\n        console.error(err);\n        onError();\n      } finally {\n        // Don't shift out tasks until we are done processing\n        // them, to prevent multiple answer submission loops from\n        // running at once. The presence of the task in the queue\n        // is used to signal that the queue is busy.\n        this.pendingAnswerSubmissionTasks.shift();\n        this.server.numPendingSubmissionTasks--;\n      }\n    }\n    this.syncTracker.handleSyncResult(true);\n  }\n\n  async handleSubmitAnswerAsync(conn: ClientConnection, answer: string) {\n    const resp = await new Promise<CheckAnswerBackendResp>(\n      (resolve, reject) => {\n        this.addSubmissionTask({\n          answer,\n          onDone: (resp) => {\n            resolve(resp);\n          },\n          onError: () => {\n            reject();\n          },\n        });\n      }\n    );\n\n    this.server.sendResp(conn, {\n      type: WSRespType.SUBMIT_ANSWER_ACK,\n      resp,\n    });\n  }\n\n  async handleMyosbRequest(conn: ClientConnection, components: number[][]) {\n    const { ansString, possible } = MYOSB_DATA;\n    const letter =\n      ansString[\n        possible.filter(\n          (poss) => new Set(poss.map(([x, y]) => components[x]?.[y])).size === 5\n        ).length\n      ];\n    if (this.puzName !== PUZ_NAME_MYOSB) {\n      return;\n    }\n    this.server.sendResp(conn, {\n      type: WSRespType.MYOSB_RESPONSE,\n      resp: `Our solvers have solved your puzzle and extracted the letter ${letter}.`,\n    });\n  }\n}\n\nexport class DeckController {\n  teamId: string;\n  slot: number;\n  server: GameServer;\n  deck: Deck;\n\n  slowSyncTracking: {\n    tracker: SyncTracker;\n  };\n\n  constructor(teamId: string, slot: number, deck: Deck, server: GameServer) {\n    this.teamId = teamId;\n    this.slot = slot;\n    this.server = server;\n    this.deck = deck;\n    this.slowSyncTracking = {\n      tracker: new SyncTracker(\n        this.server.config,\n        SyncObjectType.DECK,\n        (dirtyState) => {\n          this.server.dirtyStateTracker.update({\n            teams: {\n              [this.teamId]: {\n                decks: { [this.slot]: dirtyState },\n              },\n            },\n          });\n        }\n      ),\n    };\n  }\n\n  getTeamController(): TeamController {\n    return this.server.getTeamController(this.teamId);\n  }\n\n  /** (Dev-only) Override a deck as part of auto-prep. */\n  overrideDeck(deck: Deck) {\n    // HACK: create deckUpd to transform existing deck\n    // into requested deck\n    const deckUpdCards: { [cardName: string]: number } = {};\n    const deckUpd: DeckUpdate = {\n      displayName: deck.displayName,\n      cards: deckUpdCards,\n    };\n    for (const [cardName, val] of Object.entries(this.deck.cards)) {\n      deckUpdCards[cardName] = 0;\n    }\n    for (const [cardName, val] of Object.entries(deck.cards)) {\n      deckUpdCards[cardName] = val;\n    }\n\n    this.handleDeckUpdate(deckUpd);\n  }\n\n  handleDeckUpdate(deckUpd: DeckUpdate): void {\n    applyDeckUpdate(this.deck, deckUpd);\n    this.slowSyncTracking.tracker.handleModify();\n\n    this.server.broadcastGlobalUpdate(\n      {\n        type: GlobalUpdatesScopeType.TEAM_DECKS,\n        teamId: this.teamId,\n      },\n      {\n        type: GlobalUpdateType.TEAM_DECKS_UPDATE_DECK,\n        slot: this.slot,\n        deckUpd,\n      }\n    );\n\n    // We don't need to handle the deckbuilding room, because if a\n    // deckbuilding room exists, then it should \"own\" the deck,\n    // and so it would be the only source of the deck updates\n    // and can apply them itself.\n  }\n\n  handleDeckbuildingStep(deckUpd: DeckUpdate): void {\n    const { cardUnlocks } = this.getTeamController();\n    if (\n      !isDeckUpdateValid(\n        deckUpd,\n        this.deck,\n        new Set(cardUnlocks.keys()),\n        this.server.cardsDB\n      )\n    ) {\n      // Just drop the request silently since this may be a result of\n      // a race condition.\n      return;\n    }\n\n    this.handleDeckUpdate(deckUpd);\n  }\n}\n\nexport class TeamMasteryTreeController {\n  teamId: string;\n  server: GameServer;\n  masteryTree: MasteryTree;\n  /** Cache of the enabled masteries. */\n  enabledMasteries: Set<string>;\n\n  slowSyncTracking: {\n    tracker: SyncTracker;\n  };\n\n  /**\n   * Map of connId to connections for connections subscribed to\n   * updates for this team's mastery tree.\n   */\n  subscriptions: Map<string, ClientConnection>;\n\n  constructor(teamId: string, masteryTree: MasteryTree, server: GameServer) {\n    this.teamId = teamId;\n    this.server = server;\n\n    this.masteryTree = masteryTree;\n    // Assign to itself to assuage Typescript.\n    this.enabledMasteries = this.updateEnabledMasteries();\n\n    this.slowSyncTracking = {\n      tracker: new SyncTracker(\n        this.server.config,\n        SyncObjectType.MASTERY_TREE,\n        (dirtyState) => {\n          this.server.dirtyStateTracker.update({\n            teams: {\n              [this.teamId]: {\n                masteryTree: dirtyState,\n              },\n            },\n          });\n        }\n      ),\n    };\n\n    this.subscriptions = new Map();\n  }\n\n  getTeamController(): TeamController {\n    return this.server.getTeamController(this.teamId);\n  }\n\n  /** Compute the enabled masteries without using the cache. */\n  private updateEnabledMasteries(): Set<string> {\n    this.enabledMasteries = new Set(\n      getMasteriesFromMasteryTree(\n        this.server.masteriesDB,\n        this.masteryTree\n      ).map(({ masteryId }) => masteryId)\n    );\n    return this.enabledMasteries;\n  }\n\n  /** (Dev-only) Override a mastery tree as part of auto-prep. */\n  overrideMasteryTree(masteryTree: MasteryTree) {\n    const existingMasteryTree = this.masteryTree;\n\n    // HACK: create masteryTreeUpd to transform existing mastery tree\n    // into requested mastery tree\n    const masteryTreeUpd: MasteryTreeUpdate = {\n      reset: true,\n      newPlacements: Object.values(masteryTree.placements),\n      masteriesListOverride: masteryTree.masteriesListOverride,\n    };\n\n    this.handleMasteryTreeUpdate(masteryTreeUpd);\n  }\n\n  handleMasteryTreeUpdate(masteryTreeUpd: MasteryTreeUpdate): void {\n    const teamController = this.getTeamController();\n\n    const origMasteries = this.getEnabledMasteries();\n    applyMasteryTreeUpdate(this.masteryTree, masteryTreeUpd);\n    this.slowSyncTracking.tracker.handleModify();\n    this.updateEnabledMasteries();\n    const newMasteries = this.getEnabledMasteries();\n\n    this.server.broadcastGlobalUpdate(\n      {\n        type: GlobalUpdatesScopeType.TEAM_MASTERY_TREE,\n        teamId: this.teamId,\n      },\n      {\n        type: GlobalUpdateType.TEAM_MASTERY_TREE_UPDATE,\n        masteryTreeUpd,\n      }\n    );\n\n    const masteriesToEnable = [...newMasteries].filter(\n      (masteryId) => !origMasteries.has(masteryId)\n    );\n    const masteriesToDisable = [...origMasteries].filter(\n      (masteryId) => !newMasteries.has(masteryId)\n    );\n\n    teamController.handleTeamUpdatesAsync({\n      // Set to solved mastery activation linked tracker puzzles.\n      answerSubmissionsToAdd: [...newMasteries].map((masteryId) =>\n        makeBattleSolveAnswerSubmission(\n          this.teamId,\n          masteryId,\n          new Date().getTime()\n        )\n      ),\n      // Unlock the fish meta if all the masteries are enabled.\n      unlocksToAdd:\n        newMasteries.size === Object.keys(this.server.masteriesDB).length\n          ? [\n              {\n                teamId: this.teamId,\n                puzName: PUZ_NAME_MASTERY_TREE_PROMPT,\n                timestamp: new Date().getTime(),\n              },\n            ]\n          : undefined,\n    });\n\n    const changedMasteries = new Set([\n      ...masteriesToEnable,\n      ...masteriesToDisable,\n    ]);\n\n    if (\n      changedMasteries.has(REPUTATION_BOOST_MASTERY_ID) ||\n      changedMasteries.has(PVP_MASTERY_ID)\n    ) {\n      const hasReputationBoost = newMasteries.has(REPUTATION_BOOST_MASTERY_ID);\n      const hasPvP = newMasteries.has(PVP_MASTERY_ID);\n\n      this.server.handleTeamSummaryUpdate(this.teamId, {\n        hasReputationBoost,\n        hasPvP,\n      });\n\n      if (!hasPvP) {\n        const { pvpController } = teamController;\n        pvpController.clearAllRequestsAndLeaveRing();\n      }\n    }\n\n    if (masteriesToEnable.includes(SOLVE_COUNTS_MASTERY_ID)) {\n      teamController.broadcastTeamGlobalUpdate({\n        type: GlobalUpdateType.TEAM_UPDATE_PUZZLE_STATS,\n        stats: Object.fromEntries(\n          [...teamController.unlockTimes.keys()].flatMap((puzName) =>\n            this.server.puzzlesDB.battleGroups.has(puzName)\n              ? [[puzName, this.server.statsController.getPuzzleStats(puzName)]]\n              : []\n          )\n        ),\n      });\n    }\n\n    const enabledMasteriesDiff = {\n      ...Object.fromEntries(\n        masteriesToEnable.map((masteryId) => [masteryId, true])\n      ),\n      ...Object.fromEntries(\n        masteriesToDisable.map((masteryId) => [masteryId, false])\n      ),\n    };\n    teamController.broadcastTeamGlobalUpdate({\n      type: GlobalUpdateType.TEAM_UPDATE_STATE,\n      enabledMasteries: enabledMasteriesDiff,\n    });\n    this.server.bigBoardStateTracker.updateTeam(this.teamId, {\n      enabledMasteries: enabledMasteriesDiff,\n    });\n  }\n\n  handleMasteryTreeStep(step: MasteryTreeStep) {\n    const teamController = this.getTeamController();\n    const { puzzlesDB } = this.server;\n    const availableAnswers = [...teamController.solveTimes.keys()].flatMap(\n      (puzName) => {\n        const { battleGroupName, answer } = puzzlesDB.getPuzzle(puzName);\n        if (puzName === PUZ_NAME_MASTERY_TREE) return [];\n        if (answer === null) return [];\n        return normalizeAnswer(answer);\n      }\n    );\n\n    if (!isMasteryTreeStepValid(this.masteryTree, availableAnswers, step)) {\n      // Just drop the request silently since this may be a result of\n      // a race condition.\n      return;\n    }\n\n    this.handleMasteryTreeUpdate(masteryTreeStepToUpdate(step));\n  }\n\n  getEnabledMasteries(): Set<string> {\n    return this.enabledMasteries;\n  }\n}\n","import { Deck, createNewDeck, NUM_DECK_SLOTS } from \"engine/types/decks\";\nimport {\n  Player,\n  DevKnobs,\n  PlayerStateTeamData,\n  CheckpointState,\n} from \"engine/types/game-state\";\nimport {\n  PUZ_NAME_MASTERY_TREE,\n  PUZ_NAME_MASTERY_TREE_PROMPT,\n  PUZ_NAME_PRE_FINAL_BATTLE,\n  PUZ_NAME_POST_FINAL_BATTLE,\n  PUZ_NAME_FIRST_ANSWER,\n  PUZ_NAME_FIRST_LEGENDARY,\n  BATTLE_GROUP_NAME_INSTANCER,\n  BATTLE_GROUP_NAME_TUTORIAL,\n  isUsedForSolveCount,\n  isUsedForGlobalSpeedrunTime,\n} from \"engine/puzzles/puzzle-data\";\nimport { Faction } from \"engine/types/factions\";\nimport {\n  REPUTATION_BOOST_MASTERY_ID,\n  PVP_MASTERY_ID,\n  SOLVE_COUNTS_MASTERY_ID,\n  FACTIONS_MASTERY_ID,\n} from \"engine/puzzles/mastery-data\";\nimport { WSErrorCode, AdminModifyTeamParams } from \"game-server/ws\";\nimport { ClientConnection, GameServer } from \"game-server/GameServer\";\nimport {\n  BackendAnswerSubmission,\n  BackendUnlock,\n  BackendCardUnlock,\n  BackendRoom,\n  GetInitTeamDataBackendResp,\n  BackendOwnedTeamState,\n  makeBattleSolveAnswerSubmission,\n} from \"game-server/backend-interface/BackendInterface\";\nimport {\n  BackendSyncReqPacket,\n  BackendSyncReqController,\n  SyncLoopController,\n  SyncObjectType,\n} from \"game-server/backend-interface/backend-sync\";\nimport {\n  GlobalUpdatesScopeType,\n  GlobalUpdateType,\n  GlobalUpdate,\n  GlobalStateBattleRoomStatus,\n  ClientTeamAdminDataGlobalState,\n  ClientTeamSpeedrunInfoGlobalState,\n  ClientPuzzleGlobalState,\n  ClientBattleGroupGlobalState,\n} from \"game-server/global-updates\";\nimport { EnterRoomParams, UnjoinedRoomMember } from \"game-server/Room\";\nimport { HuntNotificationType } from \"game-server/notifications\";\nimport {\n  BigBoardTeamState,\n  TeamSummaryState,\n  IntervalMetrics,\n  HEALTH_MONITORING_INTERVAL_MS,\n} from \"game-server/monitoring\";\nimport { TeamBattleController } from \"./battle-controller\";\nimport { TeamPvPController } from \"./pvp-controller\";\nimport {\n  DeckController,\n  TeamMasteryTreeController,\n  TeamFishPuzzleController,\n} from \"./team-aux-controller\";\n\nexport class TeamController {\n  /** Whether connections from this team are blocked. */\n  isInactive: boolean;\n  /** Whether the team should be exposed on leaderboards, etc. */\n  isHidden: boolean;\n  /** Whether the team is temporarily blocked for maintenance */\n  isTempBlocked: boolean;\n\n  /** The Django user ID, for impersonation. */\n  userId: string;\n\n  teamId: string;\n  displayName: string;\n  faction: Faction | null;\n  factionScoreContributions: { [faction in Faction]: number };\n  members: string[];\n  server: GameServer;\n\n  deckControllers: (DeckController | null)[];\n  masteryTreeController: TeamMasteryTreeController;\n  /** Map of puzNames to battle controllers. */\n  battleControllers: Map<string, TeamBattleController>;\n  /** Map of puzNames to fish puzzle controllers. */\n  fishPuzzleControllers: Map<string, TeamFishPuzzleController>;\n  pvpController: TeamPvPController;\n\n  /** puzNames of the puzzles viewed by the team. */\n  views: Set<string>;\n  /**\n   * cardNames of the cards unlocked by the team, mapped to the\n   * puzName of the puzzles that unlocked them, if any.\n   */\n  cardUnlocks: Map<string, string | null>;\n\n  /** Time when each puzzle was solves, mapped by puzName. */\n  unlockTimes: Map<string, number>;\n  /** Time when each puzzle was solves, mapped by puzName. */\n  solveTimes: Map<string, number>;\n  /** Best speedrun time for each battle, mapped by puzName. */\n  speedrunTimes: Map<string, number>;\n\n  cachedSpeedrunInfo?: ClientTeamSpeedrunInfoGlobalState;\n\n  /**\n   * Map of connId to connections for connections subscribed to\n   * team updates for this team.\n   */\n  subscriptions: Map<string, ClientConnection>;\n  /** Global updates subscriptions for the decks. */\n  decksSubscriptions: Map<string, ClientConnection>;\n  /** Global updates subscriptions for the team members. */\n  membersSubscriptions: Map<string, ClientConnection>;\n\n  /* Hints given and used. This state is owned by Django and maintained\n   * here through state syncing */\n  backendOwned: BackendOwnedTeamState;\n\n  numAuthsMetrics: IntervalMetrics;\n  numRequestsMetrics: IntervalMetrics;\n\n  /**\n   * Tracking state for the fast backend sync.\n   * By default, the data here is synced as soon as possible, as\n   * there would be clients waiting on the sync.\n   * If there is a request in flight, new data is synced immediately\n   * after the request completes.\n   * Unlike the periodic sync, pending changes here are broadcast and\n   * applied only after the backend sync is complete.\n   */\n  fastSyncTracking: {\n    syncLoopController: SyncLoopController;\n    syncController: BackendSyncReqController;\n  };\n\n  /**\n   * Tracking state for the slow backend sync.\n   * The data here is only synced periodically.\n   */\n  slowSyncTracking: {\n    syncController: BackendSyncReqController;\n  };\n\n  constructor(\n    teamId: string,\n    initTeamData: GetInitTeamDataBackendResp,\n    server: GameServer\n  ) {\n    const {\n      userId,\n      displayName,\n      isHidden,\n      isInactive,\n      faction,\n      factionScoreContributions,\n      members,\n      decks,\n      masteryTree,\n      views,\n      cardUnlocks,\n      unlockTimes,\n      solveTimes,\n      speedrunTimes,\n      numWrongGuesses,\n      preferredDecks,\n      puzzleSelections,\n      checkpoints,\n      blockedTeams,\n      isInRing,\n      backendOwned,\n    } = initTeamData;\n    this.userId = userId;\n    this.teamId = teamId;\n    this.displayName = displayName;\n    this.faction = faction;\n    this.factionScoreContributions = factionScoreContributions;\n    this.members = members;\n    this.server = server;\n\n    this.deckControllers = new Array(NUM_DECK_SLOTS).fill(null);\n    for (const { slot, deck } of decks) {\n      if (slot < 0 || slot >= this.deckControllers.length)\n        throw new Error(`deck slot ${slot} from backend out of bounds`);\n      this.deckControllers[slot] = new DeckController(\n        this.teamId,\n        slot,\n        deck,\n        this.server\n      );\n    }\n\n    this.masteryTreeController = new TeamMasteryTreeController(\n      teamId,\n      masteryTree ?? {\n        placements: {},\n        connectedAnswers: [],\n      },\n      server\n    );\n\n    this.battleControllers = new Map();\n    this.fishPuzzleControllers = new Map();\n    this.pvpController = new TeamPvPController(\n      teamId,\n      Object.keys(blockedTeams),\n      server\n    );\n    this.views = new Set(views);\n    this.cardUnlocks = new Map(Object.entries(cardUnlocks));\n    this.unlockTimes = new Map(Object.entries(unlockTimes));\n    this.solveTimes = new Map(Object.entries(solveTimes));\n    this.speedrunTimes = new Map(Object.entries(speedrunTimes));\n    this.subscriptions = new Map();\n    this.decksSubscriptions = new Map();\n    this.membersSubscriptions = new Map();\n    this.numAuthsMetrics = new IntervalMetrics(HEALTH_MONITORING_INTERVAL_MS);\n    this.numRequestsMetrics = new IntervalMetrics(\n      HEALTH_MONITORING_INTERVAL_MS\n    );\n    this.fastSyncTracking = {\n      syncLoopController: new SyncLoopController(async () => {\n        try {\n          return await this.runFastSyncAsync();\n        } catch (err) {\n          // Fail gracefully. Fast syncs should be designed to be\n          // retried periodically if unsuccessful.\n          console.error(err);\n          return false;\n        }\n      }),\n      syncController: new BackendSyncReqController(\n        this.server.config,\n        SyncObjectType.FAST,\n        (dirtyState) => {\n          this.server.dirtyStateTracker.update({\n            teams: {\n              [this.teamId]: {\n                fastSync: dirtyState,\n              },\n            },\n          });\n        }\n      ),\n    };\n    this.slowSyncTracking = {\n      syncController: new BackendSyncReqController(\n        this.server.config,\n        SyncObjectType.MISC,\n        (dirtyState) => {\n          this.server.dirtyStateTracker.update({\n            teams: {\n              [this.teamId]: {\n                misc: dirtyState,\n              },\n            },\n          });\n        }\n      ),\n    };\n\n    for (const [\n      puzName,\n      { answer },\n    ] of this.server.puzzlesDB.puzzles.entries()) {\n      if (answer === null) continue;\n      const numWrongGuessesForPuzzle = numWrongGuesses[puzName] ?? 0;\n      const numExtraGuessesForPuzzle = backendOwned.extraGuesses[puzName] ?? 0;\n      if (numWrongGuessesForPuzzle > 0 || numExtraGuessesForPuzzle !== 0) {\n        this.fishPuzzleControllers.set(\n          puzName,\n          new TeamFishPuzzleController(\n            this.teamId,\n            puzName,\n            numWrongGuessesForPuzzle,\n            numExtraGuessesForPuzzle,\n            this.server\n          )\n        );\n      }\n    }\n\n    for (const [puzName, slot] of Object.entries(preferredDecks)) {\n      this.getBattleController(puzName).selectedDeckSlot = slot;\n    }\n    for (const [puzName, selection] of Object.entries(puzzleSelections)) {\n      this.getBattleController(puzName).selectedPuzName = selection;\n    }\n    for (const [puzName, states] of Object.entries(checkpoints)) {\n      this.getBattleController(puzName).checkpoints = states;\n    }\n\n    // Add the team to the ring only if the mastery is enabled, in case\n    // the mastery tree state got out of sync with the in-ring state.\n    // We can't use enterRing as the teamController is not fully\n    // initialized and registered with GameServer yet.\n    if (\n      isInRing &&\n      this.masteryTreeController.getEnabledMasteries().has(PVP_MASTERY_ID)\n    )\n      this.server.pvpLobbyController.ring.push(teamId);\n\n    this.backendOwned = backendOwned;\n\n    this.isInactive = isInactive;\n    this.isHidden = isHidden;\n    this.isTempBlocked = false;\n  }\n\n  /**\n   * Init the team with the stats controller. This must always be\n   * called after construction, once the team controller is registered\n   * with the game server.\n   */\n  initStats() {\n    this.server.statsController.handleTeamUpdates(this.teamId, {\n      factionScoreChanges: { ...this.factionScoreContributions },\n      updateFactionHistory: false,\n      unlocksToAdd: [...this.unlockTimes.keys()],\n      solvesToAdd: [...this.solveTimes.keys()],\n      speedrunTimes: Object.fromEntries(this.speedrunTimes.entries()),\n      solveTimes: Object.fromEntries(this.solveTimes.entries()),\n    });\n  }\n\n  initRooms(rooms: { [puzName: string]: BackendRoom }) {\n    for (const roomEntry of Object.values(rooms)) {\n      const { puzName, hostPuzName } = roomEntry;\n      // Don't restore a saved room if its puzzle was set locked,\n      // as doing so in the instancer would set the selected puzzle.\n      if (this.unlockTimes.has(puzName))\n        this.getBattleController(hostPuzName).restoreSavedRoom(roomEntry);\n    }\n  }\n\n  broadcastTeamGlobalUpdate(upd: GlobalUpdate): void {\n    this.server.broadcastGlobalUpdate(\n      {\n        type: GlobalUpdatesScopeType.TEAM,\n        teamId: this.teamId,\n      },\n      upd\n    );\n  }\n\n  getDeckController(slot: number): DeckController {\n    // TODO: Make sure slot bounds are validated in callers\n    const existingController = this.deckControllers[slot];\n    if (existingController !== null) return existingController;\n\n    const timeNow = new Date().getTime();\n\n    const deck: Deck = createNewDeck(slot);\n    const deckController = new DeckController(\n      this.teamId,\n      slot,\n      deck,\n      this.server\n    );\n    this.deckControllers[slot] = deckController;\n    // Broadcast the deck creation to subscribers by pushing a null update.\n    deckController.handleDeckUpdate({});\n    return deckController;\n  }\n\n  isValidBattle(puzName: string): boolean {\n    // Either the puzName is invalid, or the team has not unlocked it.\n    if (!this.unlockTimes.has(puzName)) return false;\n    const { battleGroupName } = this.server.puzzlesDB.getPuzzle(puzName);\n\n    // Fish puzzles cannot be used for battles.\n    // Check the answer from the battle group instead of the puzzle\n    // directly to filter out the tracker mastery tree \"puzzles\" too.\n    const { answer } = this.server.puzzlesDB.getPuzzle(battleGroupName);\n    if (answer !== null) return false;\n\n    const { numPuzzles } =\n      this.server.puzzlesDB.getBattleGroup(battleGroupName);\n    // Dummy battles (for groups of multiple sub-battles) are only\n    // relevant for full puzzle accounting, and cannot be used\n    // to actually start a battle.\n    if (numPuzzles > 1 && puzName === battleGroupName) return false;\n\n    return true;\n  }\n\n  isValidFishPuzzle(puzName: string): boolean {\n    // Either the puzName is invalid, or the team has not unlocked it.\n    if (!this.unlockTimes.has(puzName)) return false;\n\n    const { answer, battleGroupName } =\n      this.server.puzzlesDB.getPuzzle(puzName);\n    // Ignore battles, and the fake mastery tree state tracker puzzles.\n    // Fish puzzle controllers are only used for answer submission.\n    if (answer === null) return false;\n\n    // The team should not have access to answer submission for the\n    // mastery tree until they have unlocked the prompt.\n    if (\n      puzName === PUZ_NAME_MASTERY_TREE &&\n      !this.unlockTimes.has(PUZ_NAME_MASTERY_TREE_PROMPT)\n    )\n      return false;\n\n    return true;\n  }\n\n  // If there doesn't exist a battle controller for the given slug, this will\n  // attempt to create one, and throw an error if the puzzle name doesn't exist.\n  getBattleController(puzName: string): TeamBattleController {\n    const existingController = this.battleControllers.get(puzName);\n    if (existingController !== undefined) return existingController;\n\n    const { battleGroupName } = this.server.getBattleGroup(puzName); // throws error if puzName doesn't exist\n    const isInstancer = battleGroupName === BATTLE_GROUP_NAME_INSTANCER;\n    const controller = new TeamBattleController(\n      this.teamId,\n      puzName,\n      isInstancer ? null : puzName,\n      null,\n      this.server\n    );\n    this.battleControllers.set(puzName, controller);\n    return controller;\n  }\n\n  getFishPuzzleController(puzName: string): TeamFishPuzzleController {\n    const existingController = this.fishPuzzleControllers.get(puzName);\n    if (existingController !== undefined) return existingController;\n\n    const controller = new TeamFishPuzzleController(\n      this.teamId,\n      puzName,\n      0,\n      0,\n      this.server\n    );\n    this.fishPuzzleControllers.set(puzName, controller);\n    return controller;\n  }\n\n  isPuzzleUnlocked(puzName: string): boolean {\n    return this.unlockTimes.has(puzName);\n  }\n\n  getClientPuzzleState(puzName: string): ClientPuzzleGlobalState {\n    const puzData = this.server.puzzlesDB.getPuzzle(puzName);\n    const { answer } = puzData;\n    const unlockTime = this.unlockTimes.get(puzName);\n    if (unlockTime === undefined)\n      throw new Error(`tried to get client state for locked puzzle ${puzName}`);\n\n    const { battleGroupName, order } = puzData;\n    const puzState: ClientPuzzleGlobalState = {\n      puzName,\n      battleGroupName,\n      order,\n      hasAnswer: answer !== null ? true : undefined,\n      isNew: !this.views.has(puzName),\n      speedrunTime: this.speedrunTimes.get(puzName),\n      unlockTime,\n      solveTime: this.solveTimes.get(puzName),\n      puzPrompt:\n        puzName === PUZ_NAME_MASTERY_TREE_PROMPT\n          ? {\n              header: \"Restoring peace\",\n              text: \"With your newfound mastery over the cards, you realize what you need to do next. What do you need to restore peace among the factions?\",\n            }\n          : undefined,\n    };\n\n    if (answer !== null && this.solveTimes.has(puzName)) {\n      puzState.answer = answer;\n    }\n\n    const battleController = this.battleControllers.get(puzName);\n    if (battleController !== undefined) {\n      const roomStatus = battleController.getRoomStatus();\n      if (roomStatus !== GlobalStateBattleRoomStatus.NONE)\n        puzState.roomStatus = roomStatus;\n    }\n\n    return puzState;\n  }\n\n  getClientBattleGroupState(\n    battleGroupName: string\n  ): ClientBattleGroupGlobalState {\n    const {\n      displayName,\n      mapPos,\n      isLegendary,\n      preBattleDialogue,\n      postBattleDialogue,\n      numPuzzles,\n    } = this.server.getBattleGroup(battleGroupName);\n    const puzData = this.server.puzzlesDB.getPuzzle(battleGroupName);\n    const { isCutscene, answer } = puzData;\n    const battleGroupState: ClientBattleGroupGlobalState = {\n      battleGroupName,\n      displayName,\n      isCutscene: isCutscene ? true : undefined,\n      isLegendary: isLegendary ? true : undefined,\n      preBattleDialogue,\n      postBattleDialogue: this.solveTimes.has(battleGroupName)\n        ? postBattleDialogue\n        : undefined,\n      numPuzzles: numPuzzles !== 1 ? numPuzzles : undefined,\n      mapPos,\n    };\n    if (\n      this.masteryTreeController\n        .getEnabledMasteries()\n        .has(SOLVE_COUNTS_MASTERY_ID)\n    )\n      battleGroupState.stats =\n        this.server.statsController.getPuzzleStats(battleGroupName);\n    return battleGroupState;\n  }\n\n  getLeaderboardNumSolves(): number {\n    return [...this.solveTimes.keys()].filter((puzName) => {\n      const puzData = this.server.puzzlesDB.puzzles.get(puzName);\n      if (puzData === undefined)\n        throw new Error(\"expect solved puzzles to be in puzzlesDB\");\n      return isUsedForSolveCount(\n        puzName,\n        puzData.battleGroupName,\n        puzData.isCutscene\n      );\n    }).length;\n  }\n\n  getClientAdminData(): ClientTeamAdminDataGlobalState {\n    const { userId, displayName, isHidden, isInactive, isTempBlocked } = this;\n    return { userId, displayName, isHidden, isInactive, isTempBlocked };\n  }\n\n  getHintsUsedMap(): { [puzName: string]: number } {\n    const hintsUsedMap: { [puzName: string]: number } = {};\n    for (const puzName of this.backendOwned.hintsUsed) {\n      hintsUsedMap[puzName] = (hintsUsedMap[puzName] ?? 0) + 1;\n    }\n    return hintsUsedMap;\n  }\n\n  getClientBigBoardState(): BigBoardTeamState {\n    const hintsUsedMap = this.getHintsUsedMap();\n    return {\n      numHintsTotal: this.backendOwned.hintsTotal,\n      unlocks: Object.fromEntries(\n        Array.from(this.unlockTimes.keys(), (puzName) => {\n          const { numWrongGuesses } =\n            this.fishPuzzleControllers.get(puzName) ?? {};\n          return [\n            puzName,\n            {\n              solveTime: this.solveTimes.get(puzName),\n              numHintsUsed: hintsUsedMap[puzName],\n              numWrongGuesses: numWrongGuesses,\n              numMembers: this.server.gameRoomsController.getNumRoomMembers(\n                this.teamId,\n                puzName\n              ),\n            },\n          ];\n        })\n      ),\n      cardUnlocks: Object.fromEntries(\n        Array.from(this.cardUnlocks.keys(), (cardName) => [cardName, true])\n      ),\n      selectedPuzzles: Object.fromEntries(\n        [...this.battleControllers.values()].flatMap(\n          ({ puzName, selectedPuzName }) =>\n            selectedPuzName === null || selectedPuzName === puzName\n              ? []\n              : [[puzName, selectedPuzName]]\n        )\n      ),\n      enabledMasteries: Object.fromEntries(\n        Array.from(\n          this.masteryTreeController.getEnabledMasteries(),\n          (masteryId) => [masteryId, true]\n        )\n      ),\n    };\n  }\n\n  getLastSolveTime(): number | undefined {\n    return this.solveTimes.size === 0\n      ? undefined\n      : Math.max(\n          0,\n          ...[...this.solveTimes.entries()]\n            .filter(([puzName, solveTime]) => {\n              const { battleGroupName, isCutscene } =\n                this.server.puzzlesDB.getPuzzle(puzName);\n              return isUsedForSolveCount(puzName, battleGroupName, isCutscene);\n            })\n            .map(([puzName, solveTime]) => solveTime)\n        );\n  }\n\n  getCompletionTime(): number | undefined {\n    return this.solveTimes.get(PUZ_NAME_POST_FINAL_BATTLE);\n  }\n\n  getTeamSummaryState(): TeamSummaryState {\n    const {\n      teamId,\n      displayName,\n      faction,\n      factionScoreContributions,\n      members,\n      masteryTreeController,\n      pvpController,\n      isHidden,\n    } = this;\n    const enabledMasteries = masteryTreeController.getEnabledMasteries();\n    return {\n      teamId,\n      displayName,\n      faction,\n      factionScoreContribution:\n        faction === null ? 0 : factionScoreContributions[faction],\n      hasReputationBoost: enabledMasteries.has(REPUTATION_BOOST_MASTERY_ID)\n        ? true\n        : undefined,\n      hasPvP: enabledMasteries.has(PVP_MASTERY_ID) ? true : undefined,\n      isPvPGameActive: pvpController.isGameActive() ? true : undefined,\n      numSolves: this.getLeaderboardNumSolves(),\n      lastSolveTime: this.getLastSolveTime(),\n      completionTime: this.getCompletionTime(),\n      speedrunInfo: this.computeSpeedrunInfo(),\n      isHidden: isHidden ? true : undefined,\n    };\n  }\n\n  makeTeamDataForBattle(puzName: string): PlayerStateTeamData {\n    const { teamId, displayName, faction } = this;\n    return {\n      teamId,\n      displayName,\n      faction,\n      factionScoreContribution:\n        faction === null ? 0 : this.factionScoreContributions[faction],\n      enabledMasteries: Object.fromEntries(\n        Array.from(\n          this.masteryTreeController.getEnabledMasteries(),\n          (masteryId) => [masteryId, true]\n        )\n      ),\n      isReplay: this.solveTimes.has(puzName),\n      prevBestSpeedrunTime: this.speedrunTimes.get(puzName),\n    };\n  }\n\n  startAIBattle(\n    conn: ClientConnection,\n    puzName: string,\n    slot?: number,\n    restart?: boolean,\n    reuseDeck?: boolean,\n    devKnobs?: DevKnobs\n  ): void {\n    const battleController = this.getBattleController(puzName);\n\n    const { selectedPuzName } = battleController;\n    if (selectedPuzName === null) {\n      // Return an error if no puzzle is selected.\n      this.server.sendErr(conn, { errCode: WSErrorCode.NEED_PUZZLE });\n      return;\n    }\n\n    const inspector = battleController.getInspector();\n    if (!inspector.hasAI() && selectedPuzName !== \"vanilla\") {\n      // This endpoint should only be used for AI puzzles, or the\n      // dev-only vanilla puzzle.\n      this.server.sendErr(conn, { errCode: WSErrorCode.INVALID_PUZZLE });\n      return;\n    }\n\n    if (battleController.isRoomActive()) {\n      if (!(restart ?? false)) {\n        // If no restart is requested, and a battle is already running,\n        // then the request acts as a no-op.\n        return;\n      }\n      const err = battleController.resign();\n      if (err !== null) throw new Error(\"expect resign to succeed\");\n    }\n\n    if (slot !== undefined) {\n      const err = battleController.selectDeck(slot);\n      if (err !== null) {\n        this.server.sendErr(conn, err);\n        return;\n      }\n    }\n\n    // TODO: Validate puzName, role, and requestedRoomId\n    // are good for the team at their current unlock state.\n\n    const teamIds: { [player in Player]?: string } = {};\n\n    // Keep non-AI battle dev functionality around until we have\n    // brought up non-AI battle support.\n    const players = [Player.P1, Player.P2].filter((player) => {\n      return !(inspector.hasAI() && player === Player.P2);\n    });\n    for (const player of players) {\n      teamIds[player] = this.teamId;\n    }\n\n    const { deckSelections, err } = battleController.commitDeckSelection(\n      players,\n      reuseDeck,\n      devKnobs?.allowInvalidDecks\n    );\n    if (err !== undefined) {\n      this.server.sendErr(conn, err);\n      return;\n    }\n\n    const room = this.server.gameRoomsController.createRoom(\n      selectedPuzName,\n      puzName,\n      teamIds,\n      deckSelections,\n      devKnobs\n    );\n    battleController.activateGame(room);\n\n    // The requester will eventually join the room in a separate\n    // request once it sees that the game has started.\n  }\n\n  handleEnterRoom(\n    unjoinedMember: UnjoinedRoomMember,\n    params: EnterRoomParams\n  ): void {\n    const { conn } = unjoinedMember;\n    const { puzName } = params;\n    const battleController = this.battleControllers.get(puzName);\n    if (battleController === undefined) {\n      this.server.sendEnterRoomErr(unjoinedMember, {\n        errCode: WSErrorCode.NO_ROOM,\n      });\n      return;\n    }\n    battleController.handleEnterGameRoom(unjoinedMember);\n  }\n\n  /**\n   * Actually run the fast sync.\n   * Should only be used by the sync loop.\n   * Returns if the sync is already complete (i.e. there are no sync\n   * tasks in the buffers to run).\n   */\n  private async runFastSyncAsync(): Promise<boolean> {\n    const { syncController } = this.fastSyncTracking;\n    const { packet } = syncController;\n\n    // Remove redundant entries from the pending packet.\n    // This is functionally necessary for consistency, since\n    // the snapshot is later used to update solve counts.\n    if (packet.unlocks !== undefined) {\n      for (const [puzName, val] of Object.entries(packet.unlocks)) {\n        if ((val !== null) === this.unlockTimes.has(puzName))\n          delete packet.unlocks[puzName];\n      }\n    }\n    if (Object.keys(packet.unlocks ?? {}).length === 0) delete packet.unlocks;\n\n    if (packet.cardUnlocks !== undefined) {\n      for (const [cardName, val] of Object.entries(packet.cardUnlocks)) {\n        if (\n          (val !== null) === this.cardUnlocks.has(cardName) &&\n          (val?.puzName ?? null) === (this.cardUnlocks.get(cardName) ?? null)\n        )\n          delete packet.cardUnlocks[cardName];\n      }\n    }\n    if (Object.keys(packet.cardUnlocks ?? {}).length === 0)\n      delete packet.cardUnlocks;\n\n    if (packet.answerSubmissions !== undefined) {\n      for (const [puzName, puzSubmissions] of Object.entries(\n        packet.answerSubmissions\n      )) {\n        if (puzSubmissions === null && !this.solveTimes.has(puzName)) {\n          delete packet.answerSubmissions[puzName];\n        } else if (puzSubmissions !== null && this.solveTimes.has(puzName)) {\n          for (const [answer, submission] of Object.entries(puzSubmissions)) {\n            if (submission.isCorrect) delete puzSubmissions[answer];\n          }\n          if (Object.keys(puzSubmissions ?? {}).length === 0)\n            delete packet.answerSubmissions[puzName];\n        }\n      }\n    }\n    if (Object.keys(packet.answerSubmissions ?? {}).length === 0)\n      delete packet.answerSubmissions;\n\n    const snapshot = syncController.startSync();\n    if (snapshot === null) return true;\n    let didSyncSucceed = false;\n    this.server.fastSyncMetrics.record();\n    // If this errors out, the SyncLoopController will handle it.\n    try {\n      await this.server.syncDataThrottledAsync({\n        teamState: {\n          [this.teamId]: snapshot,\n        },\n      });\n      didSyncSucceed = true;\n    } finally {\n      syncController.endSync(didSyncSucceed ? snapshot : null);\n    }\n\n    const { puzzlesDB } = this.server;\n    const submissionSolves = Object.fromEntries(\n      Object.entries(snapshot.answerSubmissions ?? {}).flatMap<\n        [string, BackendAnswerSubmission | null]\n      >(([puzName, puzSubmissions]) => {\n        if (puzSubmissions === null) return [[puzName, null]];\n        const correctSubmission = Object.values(puzSubmissions).find(\n          (submission) => submission.isCorrect\n        );\n        if (correctSubmission === undefined) return [];\n        return [[puzName, correctSubmission]];\n      })\n    );\n    const answers = Object.fromEntries(\n      Object.entries(submissionSolves).flatMap(([puzName, submission]) => {\n        const { answer } = this.server.puzzlesDB.getPuzzle(puzName);\n        if (answer === null) return [];\n        return [[puzName, answer]];\n      })\n    );\n    const battleGroupUnlocks = Object.fromEntries(\n      Object.entries(snapshot.unlocks ?? {}).flatMap(([puzName, unlock]) =>\n        unlock !== null &&\n        puzzlesDB.getBattleGroup(puzName).battleGroupName === puzName\n          ? [[puzName, this.getClientBattleGroupState(puzName)]]\n          : []\n      )\n    );\n    const cardUnlocks = Object.fromEntries(\n      Object.entries(snapshot.cardUnlocks ?? {}).map(\n        ([cardName, cardUnlock]) => {\n          if (cardUnlock === null) return [cardName, null];\n          const { puzName } = cardUnlock;\n          return [cardName, { cardName, puzName }];\n        }\n      )\n    );\n\n    const solveTimes = Object.fromEntries(\n      Object.entries(submissionSolves).map(([puzName, solve]) =>\n        solve === null ? [puzName, null] : [puzName, solve.timestamp]\n      )\n    );\n\n    // Clear all newly locked puzzles from the instancer.\n    const puzzlesToLock = new Set(\n      Object.entries(snapshot.unlocks ?? {})\n        .filter(([puzName, unlock]) => unlock === null)\n        .map(([puzName, unlock]) => puzName)\n    );\n    if (puzzlesToLock.size > 0) {\n      const instancers = [...this.server.puzzlesDB.puzzles.values()].filter(\n        ({ puzName, battleGroupName }) =>\n          battleGroupName === BATTLE_GROUP_NAME_INSTANCER &&\n          puzName !== BATTLE_GROUP_NAME_INSTANCER\n      );\n      for (const puzName of puzzlesToLock) {\n        const firstSubpuzzle =\n          puzzlesDB.getFirstSubpuzzleInBattleGroup(puzName).puzName;\n        for (const { puzName: instancerPuzName } of instancers) {\n          const battleController = this.getBattleController(instancerPuzName);\n          if (\n            !(\n              battleController.selectedPuzName !== null &&\n              battleController.selectedPuzName === puzName\n            )\n          )\n            continue;\n          if (battleController.isRoomActive()) {\n            if (battleController.resign() !== null)\n              throw new Error(\"failed to resign\");\n          }\n          if (\n            battleController.selectPuzzle(\n              this.unlockTimes.has(firstSubpuzzle) &&\n                !puzzlesToLock.has(firstSubpuzzle)\n                ? firstSubpuzzle\n                : null\n            ) !== null\n          )\n            throw new Error(\"failed to clear selected puzzle\");\n\n          // Clear checkpoints with that selected puzzle.\n          for (const [slot, serializedCheckpoint] of Object.entries(\n            battleController.checkpoints\n          )) {\n            if (serializedCheckpoint === undefined) continue;\n            const checkpoint = JSON.parse(\n              serializedCheckpoint.serializedState\n            ) as CheckpointState;\n            if (checkpoint.selectedPuzName === puzName) {\n              delete battleController.checkpoints[Number(slot)];\n            }\n          }\n        }\n      }\n    }\n\n    // Apply the updates.\n    for (const [puzName, solveTime] of Object.entries(solveTimes)) {\n      // We should have guaranteed this by removing redundant\n      // entries before firing off the sync.\n      if ((solveTime !== null) === this.solveTimes.has(puzName))\n        console.error(\"packet has repeat data from solve state\");\n      if (solveTime === null) this.solveTimes.delete(puzName);\n      else this.solveTimes.set(puzName, solveTime);\n    }\n    for (const [puzName, unlock] of Object.entries(snapshot.unlocks ?? {})) {\n      // We should have guaranteed this by removing redundant\n      // entries before firing off the sync.\n      if ((unlock !== null) === this.unlockTimes.has(puzName))\n        console.error(\"packet has repeat data from unlock state\");\n      if (unlock === null) this.unlockTimes.delete(puzName);\n      else this.unlockTimes.set(puzName, unlock.timestamp);\n    }\n    for (const [cardName, cardUnlock] of Object.entries(\n      snapshot.cardUnlocks ?? {}\n    )) {\n      // We should have guaranteed this by removing redundant\n      // entries before firing off the sync.\n      if (\n        (cardUnlock !== null) === this.cardUnlocks.has(cardName) &&\n        (cardUnlock?.puzName ?? null) ===\n          (this.cardUnlocks.get(cardName) ?? null)\n      )\n        console.error(\"packet has repeat data from card unlock state\");\n      if (cardUnlock === null) this.cardUnlocks.delete(cardName);\n      else this.cardUnlocks.set(cardName, cardUnlock.puzName);\n    }\n\n    // Broadcast the updates.\n    const allUnlocks = Object.fromEntries(\n      Object.entries(snapshot.unlocks ?? {}).map(([puzName, unlock]) => [\n        puzName,\n        unlock === null ? null : this.getClientPuzzleState(puzName),\n      ])\n    );\n    this.broadcastTeamGlobalUpdate({\n      type: GlobalUpdateType.TEAM_UPDATE_STATE,\n      solveTimes,\n      answers,\n      unlocks: allUnlocks,\n      battleGroupUnlocks,\n      cardUnlocks,\n      masteries: Object.fromEntries(\n        Object.entries(solveTimes).flatMap<\n          [string, { displayName: string; effectText: string } | null]\n        >(([masteryId, solveTime]) => {\n          const mastery = this.server.masteriesDB[masteryId];\n          if (mastery === undefined) return [];\n          if (solveTime === null) return [[masteryId, null]];\n          const { displayName, effectText } = mastery;\n          return [\n            [\n              masteryId,\n              {\n                displayName,\n                effectText,\n              },\n            ],\n          ];\n        })\n      ),\n    });\n    // Unlock post-battle dialogue.\n    for (const [puzName, solveTime] of Object.entries(solveTimes)) {\n      const puzData = this.server.puzzlesDB.getPuzzle(puzName);\n      const { battleGroupName } = puzData;\n      if (puzName !== battleGroupName) continue;\n      const { postBattleDialogue } =\n        this.server.puzzlesDB.getBattleGroup(battleGroupName);\n      if (postBattleDialogue === undefined) continue;\n      this.broadcastTeamGlobalUpdate({\n        type: GlobalUpdateType.TEAM_UPDATE_BATTLE_GROUP,\n        battleGroupName,\n        postBattleDialogue,\n      });\n    }\n    if (Object.keys(solveTimes).length >= 0) {\n      this.server.handleTeamSummaryUpdate(this.teamId, {\n        numSolves: this.getLeaderboardNumSolves(),\n        lastSolveTime: this.getLastSolveTime(),\n        completionTime: this.getCompletionTime(),\n      });\n    }\n\n    const hintsUsedMap = this.getHintsUsedMap();\n    this.server.bigBoardStateTracker.updateTeam(this.teamId, {\n      // No need to worry about diffing here since this doesn't happen\n      // too often, and we already diff in the tracker.\n      unlocks: Object.fromEntries(\n        Array.from(this.unlockTimes.keys(), (puzName) => [\n          puzName,\n          {\n            solveTime: this.solveTimes.get(puzName),\n            // Not sure if we would have reason to do un-unlocking hijinks\n            // that could cause these to become non-zero on unlock,\n            // but send them anyway just in case.\n            numHintsUsed: hintsUsedMap[puzName],\n            numWrongGuesses:\n              this.fishPuzzleControllers.get(puzName)?.numWrongGuesses,\n          },\n        ])\n      ),\n      cardUnlocks: Object.fromEntries(\n        Object.entries(cardUnlocks).map(([cardName, cardUnlock]) => [\n          cardName,\n          cardUnlock !== null,\n        ])\n      ),\n    });\n\n    // This has to come after broadcasting the unlocks, to ensure\n    // that teams have the puzzle global state to merge the\n    // stats into.\n    this.server.statsController.handleTeamUpdates(this.teamId, {\n      unlocksToAdd: [\n        ...Object.keys(allUnlocks).filter(\n          (puzName) => allUnlocks[puzName] !== null\n        ),\n      ],\n      solvesToAdd: Object.keys(submissionSolves).filter(\n        (puzName) => submissionSolves[puzName] !== null\n      ),\n      unlocksToDelete: [\n        ...Object.keys(allUnlocks).filter(\n          (puzName) => allUnlocks[puzName] === null\n        ),\n      ],\n      solvesToDelete: Object.keys(submissionSolves).filter(\n        (puzName) => submissionSolves[puzName] === null\n      ),\n      solveTimes,\n    });\n\n    // Broadcast the victory notification.\n    if (\n      solveTimes[PUZ_NAME_POST_FINAL_BATTLE] !== undefined &&\n      solveTimes[PUZ_NAME_POST_FINAL_BATTLE] !== null\n    ) {\n      this.server.broadcastNotifToTeam(this.teamId, {\n        type: HuntNotificationType.VICTORY,\n      });\n    }\n\n    return false;\n  }\n\n  async handleTeamUpdatesAsync(opts: {\n    solvesToDelete?: string[];\n    unlocksToDelete?: string[];\n    cardUnlocksToDelete?: string[];\n    answerSubmissionsToAdd?: BackendAnswerSubmission[];\n    unlocksToAdd?: BackendUnlock[];\n    cardUnlocksToAdd?: BackendCardUnlock[];\n  }) {\n    const { puzzlesDB } = this.server;\n    const { puzzles, battleGroups } = puzzlesDB;\n    const timeNow = new Date().getTime();\n    const { syncController, syncLoopController } = this.fastSyncTracking;\n\n    if (opts.solvesToDelete !== undefined) {\n      // If a battle group is set unsolved, propagate it to\n      // all subpuzzles as well.\n      const solvesToDeleteSet = new Set(opts.solvesToDelete);\n      opts.solvesToDelete.push(\n        ...[...puzzlesDB.puzzles.values()]\n          .filter(\n            ({ puzName, battleGroupName }) =>\n              !solvesToDeleteSet.has(puzName) &&\n              solvesToDeleteSet.has(battleGroupName)\n          )\n          .map(({ puzName }) => puzName)\n      );\n    }\n\n    if (opts.unlocksToDelete !== undefined) {\n      // If a battle group is set locked, propagate it to\n      // all subpuzzles as well.\n      const unlocksToDeleteSet = new Set(opts.unlocksToDelete);\n      opts.unlocksToDelete.push(\n        ...[...puzzlesDB.puzzles.values()]\n          .filter(\n            ({ puzName, battleGroupName }) =>\n              !unlocksToDeleteSet.has(puzName) &&\n              unlocksToDeleteSet.has(battleGroupName)\n          )\n          .map(({ puzName }) => puzName)\n      );\n\n      // If an unlock is deleted, delete the solve too.\n      opts.solvesToDelete ??= [];\n      opts.solvesToDelete.push(...opts.unlocksToDelete);\n    }\n\n    // Queue the changes for sync.\n    const firstPacket: BackendSyncReqPacket = {\n      answerSubmissions: {},\n      unlocks: {\n        ...Object.fromEntries(\n          (opts.unlocksToAdd ?? []).map((unlock) => [unlock.puzName, unlock])\n        ),\n        ...Object.fromEntries(\n          (opts.unlocksToDelete ?? []).map((puzName) => [puzName, null])\n        ),\n      },\n      cardUnlocks: {\n        ...Object.fromEntries(\n          (opts.cardUnlocksToAdd ?? []).map((cardUnlock) => [\n            cardUnlock.cardName,\n            cardUnlock,\n          ])\n        ),\n        ...Object.fromEntries(\n          (opts.cardUnlocksToDelete ?? []).map((cardName) => [cardName, null])\n        ),\n      },\n    };\n    for (const answerSubmission of opts.answerSubmissionsToAdd ?? []) {\n      const { answer, puzName } = answerSubmission;\n      firstPacket.answerSubmissions ??= {};\n      firstPacket.answerSubmissions[puzName] = Object.assign(\n        firstPacket.answerSubmissions[puzName] ?? {},\n        { [answer]: answerSubmission }\n      );\n    }\n    for (const puzName of opts.solvesToDelete ?? []) {\n      firstPacket.answerSubmissions ??= {};\n      firstPacket.answerSubmissions[puzName] = null;\n    }\n    this.mergeFastSyncPacket(firstPacket);\n\n    // Build up a packet of generated changes to additionally merge.\n    const genPacket: BackendSyncReqPacket = {};\n\n    // Compute the combined solves, including pending changes.\n    const combinedSolves: Set<string> = new Set([\n      ...this.solveTimes.keys(),\n      ...Object.entries(syncController.packet.answerSubmissions ?? {}).flatMap(\n        ([puzName, puzSubmissions]) =>\n          puzSubmissions === null\n            ? []\n            : Object.values(puzSubmissions).some(\n                (submission) => submission.isCorrect\n              )\n            ? [puzName]\n            : []\n      ),\n    ]);\n\n    // Helper function to set a battle solved.\n    const addBattleSolve = (puzName: string): void => {\n      if (combinedSolves.has(puzName)) return;\n      const submission = makeBattleSolveAnswerSubmission(\n        this.teamId,\n        puzName,\n        timeNow\n      );\n      genPacket.answerSubmissions ??= {};\n      genPacket.answerSubmissions[puzName] = Object.assign(\n        genPacket.answerSubmissions[puzName] ?? {},\n        { [submission.answer]: submission }\n      );\n      combinedSolves.add(puzName);\n    };\n\n    // Propagate battle group solves to dummy puzzles.\n    const solveTriggersPerBattleGroup: Map<string, number> = new Map();\n    for (const puzName of combinedSolves) {\n      const { battleGroupName, triggersBattleGroupSolve } =\n        puzzlesDB.getPuzzle(puzName);\n      if (!triggersBattleGroupSolve) continue;\n      solveTriggersPerBattleGroup.set(\n        battleGroupName,\n        (solveTriggersPerBattleGroup.get(battleGroupName) ?? 0) + 1\n      );\n    }\n    for (const [\n      battleGroupName,\n      numSolveTriggers,\n    ] of solveTriggersPerBattleGroup) {\n      const { solveReq } = puzzlesDB.getBattleGroup(battleGroupName);\n      if (numSolveTriggers < solveReq) continue;\n      addBattleSolve(battleGroupName);\n    }\n    for (const puzName of Object.entries(\n      syncController.packet.answerSubmissions ?? {}\n    ).flatMap(([puzName, val]) => (val === null ? [puzName] : []))) {\n      combinedSolves.delete(puzName);\n    }\n\n    // Compute the combined unlocks, including pending changes.\n    const combinedUnlocks: Set<string> = new Set([\n      ...this.unlockTimes.keys(),\n      ...Object.entries(syncController.packet.unlocks ?? {}).flatMap(\n        ([puzName, val]) => (val === null ? [] : [puzName])\n      ),\n    ]);\n    for (const puzName of Object.entries(\n      syncController.packet.unlocks ?? {}\n    ).flatMap(([puzName, val]) => (val === null ? [puzName] : []))) {\n      combinedUnlocks.delete(puzName);\n    }\n\n    // Helper function to unlock a new puzzle.\n    const addUnlock = (puzName: string): void => {\n      if (combinedUnlocks.has(puzName)) return;\n      genPacket.unlocks ??= {};\n      genPacket.unlocks[puzName] = {\n        teamId: this.teamId,\n        puzName,\n        timestamp: timeNow,\n      };\n      combinedUnlocks.add(puzName);\n    };\n\n    // Since the tutorial has card unlocks tied to subpuzzles,\n    // set all subpuzzles solved when the battle group is set solved.\n    if (combinedSolves.has(BATTLE_GROUP_NAME_TUTORIAL)) {\n      for (const { puzName, battleGroupName } of puzzlesDB.puzzles.values()) {\n        if (battleGroupName !== BATTLE_GROUP_NAME_TUTORIAL) continue;\n        addUnlock(puzName);\n        addBattleSolve(puzName);\n      }\n    }\n\n    // Compute the combined card unlocks, including pending changes.\n    // This is recorded as a map from cardName to their attributed\n    // puzName (or null, if unattributed).\n    const combinedCardUnlocks: Map<string, string | null> = new Map([\n      ...this.cardUnlocks.entries(),\n      ...Object.entries(syncController.packet.cardUnlocks ?? {}).flatMap<\n        [string, string | null]\n      >(([cardName, val]) => (val === null ? [] : [[cardName, val.puzName]])),\n    ]);\n    for (const cardName of Object.entries(\n      syncController.packet.cardUnlocks ?? {}\n    ).flatMap(([cardName, val]) => (val === null ? [cardName] : []))) {\n      combinedCardUnlocks.delete(cardName);\n    }\n\n    // Compute the \"unlock points\" for each unlock group.\n    const progressPerUnlockGroup: { [unlockGroupId: string]: number } = {};\n    // For each unlocked card unlock group, holds the battleGroupName\n    // of the battle group that unlocked it.\n    const cardUnlockGroups: { [cardUnlockGroupId: string]: string } = {};\n    for (const { puzName, unlockMult, dstUnlockGroupId } of puzzles.values()) {\n      if (!combinedSolves.has(puzName)) continue;\n      if (progressPerUnlockGroup[dstUnlockGroupId] === undefined)\n        progressPerUnlockGroup[dstUnlockGroupId] = 0;\n      progressPerUnlockGroup[dstUnlockGroupId] += unlockMult;\n    }\n    for (const { puzName, cardUnlockGroupId } of puzzles.values()) {\n      if (!combinedSolves.has(puzName)) continue;\n      if (cardUnlockGroupId === null) continue;\n      cardUnlockGroups[cardUnlockGroupId] = puzName;\n    }\n\n    // Unlock new puzzles as necessary.\n    for (const { puzName, unlockReq, srcUnlockGroupId } of puzzles.values()) {\n      // An unlock requirement of -1 implies that the puzzle\n      // does not get unlocked by round solves.\n      if (unlockReq === -1) continue;\n      if ((progressPerUnlockGroup[srcUnlockGroupId] ?? 0) < unlockReq) continue;\n      addUnlock(puzName);\n    }\n\n    // Unlock the first set of battles for unlocked multi-part battles.\n    for (const { puzName, battleGroupName, unlockReq } of puzzles.values()) {\n      if (unlockReq !== -1) continue;\n      if (!combinedUnlocks.has(battleGroupName)) continue;\n      addUnlock(puzName);\n    }\n\n    // Unlock new cards as necessary.\n    for (const cardData of Object.values(this.server.cardsDB)) {\n      const { name: cardName, cardUnlockGroupId } = cardData;\n      if (cardUnlockGroupId === null) continue;\n      const puzName = cardUnlockGroups[cardUnlockGroupId];\n      if (puzName === undefined) continue;\n      const existingUnlock = combinedCardUnlocks.get(cardName);\n      if (existingUnlock !== undefined && existingUnlock === puzName) continue;\n      genPacket.cardUnlocks ??= {};\n      genPacket.cardUnlocks[cardName] = {\n        teamId: this.teamId,\n        puzName,\n        cardName,\n        timestamp: timeNow,\n      };\n      combinedCardUnlocks.set(cardName, puzName);\n    }\n\n    if (!combinedUnlocks.has(PUZ_NAME_FIRST_ANSWER)) {\n      if (\n        [...puzzles.values()].filter(\n          ({ puzName, answer }) =>\n            answer !== null &&\n            puzName !== PUZ_NAME_MASTERY_TREE &&\n            combinedSolves.has(puzName)\n        ).length > 0\n      ) {\n        addUnlock(PUZ_NAME_FIRST_ANSWER);\n      }\n    }\n\n    if (!combinedUnlocks.has(PUZ_NAME_FIRST_LEGENDARY)) {\n      if (\n        [...battleGroups.values()].filter(\n          ({ battleGroupName, isLegendary }) =>\n            isLegendary && combinedSolves.has(battleGroupName)\n        ).length > 0\n      ) {\n        addUnlock(PUZ_NAME_FIRST_LEGENDARY);\n      }\n    }\n\n    // Unlock the cutscene to the final battle if we have\n    // all the legendaries.\n    if (!combinedUnlocks.has(PUZ_NAME_PRE_FINAL_BATTLE)) {\n      const inspector = this.getBattleController(\n        PUZ_NAME_PRE_FINAL_BATTLE\n      ).getInspector();\n      if (\n        [...battleGroups.values()]\n          .filter(({ isLegendary }) => isLegendary)\n          .every(({ battleGroupName }) => combinedSolves.has(battleGroupName))\n      ) {\n        addUnlock(PUZ_NAME_PRE_FINAL_BATTLE);\n      }\n    }\n\n    this.mergeFastSyncPacket(genPacket);\n\n    await syncLoopController.triggerLoopAndWaitAsync();\n  }\n\n  async adminModifyTeamAsync(params: AdminModifyTeamParams) {\n    const {\n      isInactive,\n      isHidden,\n      isTempBlocked,\n      displayName,\n      overrideSolved,\n      overrideUnlocked,\n      overrideCardUnlocked,\n      overrideMasteriesList,\n      overrideDecks,\n      overrideMasteryTree,\n    } = params;\n    if (isInactive !== undefined) this.setTeamInactive(isInactive);\n    if (isHidden !== undefined) this.setTeamHidden(isHidden);\n    if (isTempBlocked !== undefined) this.setTeamTempBlocked(isTempBlocked);\n    if (displayName !== undefined) this.setDisplayName(displayName);\n\n    this.masteryTreeController.handleMasteryTreeUpdate({\n      masteriesListOverride: overrideMasteriesList,\n    });\n    if (overrideMasteryTree !== undefined)\n      this.masteryTreeController.overrideMasteryTree(overrideMasteryTree);\n    for (const [slot, deck] of Object.entries(overrideDecks ?? {})) {\n      this.getDeckController(Number(slot)).overrideDeck(deck);\n    }\n\n    await this.handleTeamUpdatesAsync({\n      answerSubmissionsToAdd: Object.entries(overrideSolved ?? {}).flatMap(\n        ([puzName, isSolved]) =>\n          isSolved\n            ? [\n                {\n                  teamId: this.teamId,\n                  puzName,\n                  answer: this.server.puzzlesDB.getPuzzle(puzName).answer ?? \"\",\n                  isCorrect: true,\n                  timestamp: new Date().getTime(),\n                  usedFreeAnswer: false,\n                },\n              ]\n            : []\n      ),\n      solvesToDelete: Object.entries(overrideSolved ?? {}).flatMap(\n        ([puzName, isSolved]) => (!isSolved ? [puzName] : [])\n      ),\n      unlocksToAdd: Object.entries(overrideUnlocked ?? {}).flatMap(\n        ([puzName, isUnlocked]) =>\n          isUnlocked\n            ? [\n                {\n                  teamId: this.teamId,\n                  puzName,\n                  timestamp: new Date().getTime(),\n                },\n              ]\n            : []\n      ),\n      unlocksToDelete: Object.entries(overrideUnlocked ?? {}).flatMap(\n        ([puzName, isUnlocked]) => (!isUnlocked ? [puzName] : [])\n      ),\n      cardUnlocksToAdd: Object.entries(overrideCardUnlocked ?? {}).flatMap(\n        ([cardName, isUnlocked]) =>\n          isUnlocked\n            ? [\n                {\n                  teamId: this.teamId,\n                  puzName: null,\n                  cardName,\n                  timestamp: new Date().getTime(),\n                },\n              ]\n            : []\n      ),\n      cardUnlocksToDelete: Object.entries(overrideCardUnlocked ?? {}).flatMap(\n        ([cardName, isUnlocked]) => (!isUnlocked ? [cardName] : [])\n      ),\n    });\n  }\n\n  async overrideIsSolvedAsync(puzName: string, isSolved: boolean) {\n    await this.adminModifyTeamAsync({\n      overrideSolved: {\n        [puzName]: isSolved,\n      },\n    });\n  }\n\n  async overrideIsUnlockedAsync(puzName: string, isUnlocked: boolean) {\n    await this.adminModifyTeamAsync({\n      overrideUnlocked: {\n        [puzName]: isUnlocked,\n      },\n    });\n  }\n\n  async overrideIsCardUnlockedAsync(cardName: string, isUnlocked: boolean) {\n    await this.adminModifyTeamAsync({\n      overrideCardUnlocked: {\n        [cardName]: isUnlocked,\n      },\n    });\n  }\n\n  setTeamInactive(isInactive: boolean) {\n    if (isInactive === this.isInactive) return;\n    this.isInactive = isInactive;\n    this.mergeSlowSyncPacket({ isInactive });\n    if (isInactive) {\n      const teamConns = this.server.teamConns.get(this.teamId);\n      if (teamConns !== undefined) {\n        for (const conn of teamConns.values()) {\n          conn.client.close();\n        }\n      }\n    }\n    this.server.broadcastAdminGlobalUpdate({\n      type: GlobalUpdateType.SERVER_UPDATE_TEAM,\n      teamId: this.teamId,\n      isInactive,\n    });\n  }\n\n  setTeamHidden(isHidden: boolean) {\n    // Don't update stats if there is no change.\n    if (isHidden === this.isHidden) return;\n    this.isHidden = isHidden;\n    this.mergeSlowSyncPacket({ isHidden });\n    if (isHidden) {\n      this.server.statsController.hideTeam(this.teamId);\n    } else {\n      this.server.statsController.unhideTeam(this.teamId);\n    }\n    this.server.broadcastAdminGlobalUpdate({\n      type: GlobalUpdateType.SERVER_UPDATE_TEAM,\n      teamId: this.teamId,\n      isHidden,\n    });\n    this.server.handleTeamSummaryUpdate(this.teamId, {\n      isHidden,\n    });\n  }\n\n  setTeamTempBlocked(isTempBlocked: boolean) {\n    if (isTempBlocked === this.isTempBlocked) return;\n    this.isTempBlocked = isTempBlocked;\n    if (isTempBlocked) {\n      const teamConns = this.server.teamConns.get(this.teamId);\n      if (teamConns !== undefined) {\n        for (const conn of teamConns.values()) {\n          if (!conn.isAdmin) {\n            this.server.sendErr(conn, {\n              errCode: WSErrorCode.TEAM_TEMP_BLOCKED,\n            });\n            conn.client.close();\n          }\n        }\n      }\n    }\n  }\n\n  setDisplayName(displayName: string) {\n    this.displayName = displayName;\n    this.mergeSlowSyncPacket({\n      displayName,\n    });\n    this.broadcastTeamGlobalUpdate({\n      type: GlobalUpdateType.TEAM_UPDATE_STATE,\n      displayName,\n    });\n    this.server.handleTeamSummaryUpdate(this.teamId, {\n      displayName,\n    });\n    this.server.broadcastAdminGlobalUpdate({\n      type: GlobalUpdateType.SERVER_UPDATE_TEAM,\n      teamId: this.teamId,\n      displayName,\n    });\n  }\n\n  handleSetFaction(conn: ClientConnection, faction: Faction | null) {\n    if (\n      !this.masteryTreeController.getEnabledMasteries().has(FACTIONS_MASTERY_ID)\n    ) {\n      this.server.sendErr(conn, { errCode: WSErrorCode.NO_MASTERY });\n      return;\n    }\n    this.faction = faction;\n    this.mergeSlowSyncPacket({\n      faction,\n    });\n    this.broadcastTeamGlobalUpdate({\n      type: GlobalUpdateType.TEAM_UPDATE_STATE,\n      faction,\n    });\n    this.server.handleTeamSummaryUpdate(this.teamId, {\n      faction,\n      factionScoreContribution:\n        faction === null ? 0 : this.factionScoreContributions[faction],\n    });\n  }\n\n  handleChangeFactionScoreContributions(changes: {\n    [faction in Faction]?: number;\n  }): void {\n    for (const [kFaction, change] of Object.entries(changes)) {\n      const faction = kFaction as Faction;\n      this.factionScoreContributions[faction] += change;\n    }\n    const changedContributions = Object.fromEntries(\n      Object.entries(this.factionScoreContributions).filter(\n        ([kFaction, contribution]) => changes[kFaction as Faction] ?? 0 !== 0\n      )\n    );\n    this.mergeSlowSyncPacket({\n      factionScoreContributions: changedContributions,\n    });\n    this.broadcastTeamGlobalUpdate({\n      type: GlobalUpdateType.TEAM_UPDATE_STATE,\n      factionScoreContributions: changedContributions,\n    });\n    const teamFaction = this.faction;\n    if (teamFaction !== null) {\n      const teamFactionScoreChange = changes[teamFaction] ?? 0;\n      if (teamFactionScoreChange !== 0) {\n        this.server.handleTeamSummaryUpdate(this.teamId, {\n          factionScoreContribution: this.factionScoreContributions[teamFaction],\n        });\n      }\n    }\n    this.server.statsController.handleTeamUpdates(this.teamId, {\n      factionScoreChanges: changes,\n      updateFactionHistory: true,\n    });\n  }\n\n  handleSetMembers(members: string[]) {\n    this.members = members;\n    this.server.broadcastGlobalUpdate(\n      {\n        type: GlobalUpdatesScopeType.TEAM_MEMBERS,\n        teamId: this.teamId,\n      },\n      {\n        type: GlobalUpdateType.TEAM_MEMBERS_UPDATE_STATE,\n        members,\n      }\n    );\n  }\n\n  handleNewSpeedrunTime(puzName: string, speedrunTime: number) {\n    const prevBestTime = this.speedrunTimes.get(puzName);\n    if (prevBestTime !== undefined && speedrunTime >= prevBestTime) return;\n\n    this.speedrunTimes.set(puzName, speedrunTime);\n    // Invalidate the cached speedrunInfo.\n    delete this.cachedSpeedrunInfo;\n\n    this.broadcastTeamGlobalUpdate({\n      type: GlobalUpdateType.TEAM_UPDATE_STATE,\n      speedrunTimes: { [puzName]: speedrunTime },\n    });\n\n    this.server.statsController.handleTeamUpdates(this.teamId, {\n      speedrunTimes: { [puzName]: speedrunTime },\n    });\n\n    this.server.handleTeamSummaryUpdate(this.teamId, {\n      speedrunInfo: this.computeSpeedrunInfo(),\n    });\n  }\n\n  computeSpeedrunInfo() {\n    if (this.cachedSpeedrunInfo !== undefined) return this.cachedSpeedrunInfo;\n    const times = [...this.server.puzzlesDB.puzzles.values()]\n      .filter(({ puzName, battleGroupName, isCutscene }) => {\n        return isUsedForGlobalSpeedrunTime(\n          puzName,\n          battleGroupName,\n          isCutscene\n        );\n      })\n      .map(({ puzName }) => this.speedrunTimes.get(puzName) ?? 0);\n    this.cachedSpeedrunInfo = {\n      numTimes: times.filter((time) => !!time).length,\n      totalTime: times.reduce((acc, cur) => acc + cur, 0),\n    };\n    return this.cachedSpeedrunInfo;\n  }\n\n  viewPuzzle(conn: ClientConnection, puzName: string): void {\n    if (!this.unlockTimes.has(puzName)) {\n      this.server.sendErr(conn, { errCode: WSErrorCode.INVALID_PUZZLE });\n      return;\n    }\n\n    const { battleGroupName } = this.server.getBattleGroup(puzName);\n    const timeNow = new Date().getTime();\n    const viewTimes: { [puzName: string]: number } = {};\n    if (!this.views.has(puzName)) viewTimes[puzName] = timeNow;\n    // If we view any puzzle in the battle group, then we view\n    // the whole battle group.\n    if (!this.views.has(battleGroupName)) viewTimes[battleGroupName] = timeNow;\n\n    for (const puzName of Object.keys(viewTimes)) {\n      this.views.add(puzName);\n      this.broadcastTeamGlobalUpdate({\n        type: GlobalUpdateType.TEAM_UPDATE_PUZZLE,\n        puzName,\n        isNew: false,\n      });\n    }\n    this.mergeSlowSyncPacket({\n      viewTimes,\n    });\n  }\n\n  mergeFastSyncPacket(packet: BackendSyncReqPacket) {\n    this.fastSyncTracking.syncController.mergePacket(packet);\n  }\n\n  mergeSlowSyncPacket(packet: BackendSyncReqPacket) {\n    this.slowSyncTracking.syncController.mergePacket(packet);\n  }\n}\n","import { Player, HandCard, Permanent, Slot } from \"engine/types/game-state\";\n\n/**\n * Buttons here should be unique in the UI, and should be given the ID from\n * idFrom below.\n */\nexport enum UIElement {\n  AI_BATTLER = \"ai_battler\",\n  CREATE_GEMS = \"create_gems\",\n  DRAW = \"draw\",\n  END_TURN = \"end_turn\",\n  FLEX = \"flex\",\n  SPECIAL = \"special\",\n  POWER = \"power\",\n  HEALTH = \"health\",\n  GEMS = \"gems\",\n  // etc: food, card cost, whatever\n}\n\nclass CSSIdFactory {\n  prefix: string;\n\n  constructor(prefix: string) {\n    this.prefix = prefix;\n  }\n\n  obj = (type: string) => (id?: string) => `${this.prefix}${type}-${id}`;\n\n  permanentId = this.obj(\"permanent\");\n  handCardId = this.obj(\"handCard\");\n\n  permanent = (permanent?: Permanent | null, element?: UIElement) =>\n    // Need to handle element === undefined here since permanentId is\n    // sometimes used directly.\n    this.permanentId(\n      `${element === undefined ? \"\" : `${element}-`}${permanent?.id}`\n    );\n  handCard = (handCard?: HandCard | null) => this.handCardId(handCard?.id);\n  slot = (slot: Slot) => this.obj(\"slot\")(`${slot.row}-${slot.column}`);\n  gems = (player: Player) => this.obj(\"gems\")(player);\n  element = (element: UIElement) => this.obj(\"element\")(element.toString());\n}\n\n/**\n * The client should use these to make CSS IDs, so that game specs can target\n * them with keyframes.\n *\n * (Game specs should probably use selectorFor, not cssIdFor.)\n */\nexport const cssIdFor = new CSSIdFactory(\"\");\n\n/**\n * Game specs should use this to make selectors for keyframes.\n *\n * (This returns IDs with a leading #, cssIdFor doesn't.)\n */\nexport const selectorFor = new CSSIdFactory(\"#\");\n\nexport enum Speaker {\n  NARRATOR = \"narrator\",\n  ENEMY = \"enemy\",\n  DINO = \"dino\",\n  CAPTAIN_PI = \"captain_pi\",\n  KERO = \"kero\",\n  ANGRY_KERO = \"angry_kero\",\n  KERO_DOS = \"kero_dos\",\n}\n\n/**\n * A game can have a series of keyframes. Most common case is for showing\n * dialog from the enemy battler, but we also use it to run synced story\n * cutscenes.\n */\nexport type Keyframe = Readonly<{\n  /** IDs for keyframes in a game spec. */\n  id: string;\n  /**\n   * By default, keyframes advance to the next keyframe after the user\n   * acknowledges them. If endCutscene is true, this doesn't happen.\n   */\n  endCutscene?: boolean;\n  /** The message. */\n  dialogue?: string;\n  /** Speaker enum, determines the style of the modal. */\n  speaker?: Speaker;\n  /** Where the message will appear, should be a UIElement. */\n  selector?: UIElement;\n  /** The card name of a permanent to use as selector. */\n  selectorPermanent?: string;\n  /** The slot to use as selector. */\n  selectorSlot?: Slot;\n  /**\n   * Where the message will appear relative to the selected element.\n   * See https://floating-ui.com/ for valid Placement strings.\n   */\n  placement?: string;\n  /** Dialog response options to show, if not the default one. */\n  dialogOptions?: string[];\n  /** Shows dialog options. */\n  showNext?: boolean;\n  /** Element that, when clicked, moves to the next keyframe ID. */\n  nextSelector?: UIElement;\n  /** The card name of a permanent to use as nextSelector. */\n  nextSelectorPermanent?: string;\n  /** Hide the normal game UI. */\n  hideGame?: boolean;\n  /** Hide the AI battler image. */\n  hideBattler?: boolean;\n  /**\n   * Show a mask that puts everything under a black overlay except the\n   * selector element, and the unmaskSelectors elements.\n   */\n  showMask?: boolean;\n  /** Block user input outside the modal and selector elements. */\n  blocking?: boolean;\n  /** Don't mask these elements. */\n  unmaskSelectors?: string[];\n  /**\n   * Display the alternate cutscene UI. It would go on top of the mask,\n   * if present.\n   */\n  useCutsceneUI?: boolean;\n  /**\n   * Name of image in the cutscene-art directory to show over the full\n   * screen. Needs useCutsceneUI to be enabled to take effect.\n   */\n  image?: string;\n  /**\n   * If set, going past this keyframe will end the game with P1 marked\n   * as having solved the \"battle\".\n   */\n  endGame?: boolean;\n  /**\n   * If set, going past this keyframe will end the game with P2 marked\n   * as having won the \"battle\", without offering a solve.\n   */\n  endGameUnsolved?: boolean;\n  /**\n   * The keyframe to jump to, depending on which dialog option is\n   * selected. If only one ID is provided, the jump is unconditional.\n   */\n  nextIds?: string[];\n}>;\n","import { GemColor } from \"engine/types/card-data\";\nimport { Slot, Player, Permanent } from \"engine/types/game-state\";\nimport { AbilityType, EffectOpt } from \"engine/types/effects\";\nimport {\n  StepType,\n  Step,\n  SummonStep,\n  MoveStep,\n  AttackStep,\n} from \"engine/types/steps\";\nimport { Role } from \"engine/types/updates\";\nimport { Inspector } from \"engine/Inspector\";\nimport { PermanentQuery } from \"engine/PermanentQuery\";\n\nexport class StepMaker {\n  inspector: Inspector;\n  player?: Player;\n  role?: Role;\n\n  constructor(inspector: Inspector, player?: Player, role?: Role) {\n    this.inspector = inspector;\n    this.player = player;\n    this.role = role;\n  }\n\n  getPlayer(player?: Player): Player {\n    const playerResolved = player ?? this.player;\n    if (playerResolved === undefined) {\n      throw new Error(\"player not provided\");\n    }\n\n    return playerResolved;\n  }\n\n  getRole(role?: Role): Role {\n    const roleResolved = role ?? this.role;\n    if (roleResolved === undefined) {\n      throw new Error(\"role not provided\");\n    }\n\n    return roleResolved;\n  }\n\n  endTurn(playerOpt?: Player): Step {\n    const player = this.getPlayer(playerOpt);\n    return {\n      type: StepType.END_TURN,\n      player,\n      stepNumber: this.inspector.getStepNumber(player),\n    };\n  }\n\n  spawn(cardName: string, slot: Slot): Step;\n  spawn(cardName: string, row: number, col: number): Step;\n  spawn(\n    cardName: string,\n    arg1: Slot | number,\n    arg2?: number,\n    player?: Player\n  ): Step;\n  spawn(\n    cardName: string,\n    arg1: Slot | number,\n    arg2?: number,\n    player?: Player\n  ): Step {\n    const slot = (() => {\n      if (typeof arg1 === \"number\") {\n        if (arg2 === undefined) throw new Error(\"incorrect type signature\");\n        return { row: arg1, column: arg2 };\n      } else {\n        if (arg2 !== undefined) throw new Error(\"incorrect type signature\");\n        return arg1;\n      }\n    })();\n\n    return this.summonOrSpawn({\n      player,\n      slot,\n      cardName,\n    });\n  }\n\n  summon(handCardId: string, slot: Slot): Step;\n  summon(handCardId: string, row: number, col: number): Step;\n  summon(\n    handCardId: string,\n    arg1: Slot | number,\n    arg2?: number,\n    player?: Player\n  ): Step;\n  summon(\n    handCardId: string,\n    arg1: Slot | number,\n    arg2?: number,\n    player?: Player\n  ): Step {\n    const slot = (() => {\n      if (typeof arg1 === \"number\") {\n        if (arg2 === undefined) throw new Error(\"incorrect type signature\");\n        return { row: arg1, column: arg2 };\n      } else {\n        if (arg2 !== undefined) throw new Error(\"incorrect type signature\");\n        return arg1;\n      }\n    })();\n\n    return this.summonOrSpawn({\n      player,\n      slot,\n      handCardId,\n    });\n  }\n\n  summonOrSpawn(opts: {\n    player?: Player;\n    slot: Slot;\n    handCardId?: string;\n    cardName?: string;\n  }): SummonStep {\n    const player = this.getPlayer(opts.player);\n    return {\n      type: StepType.SUMMON,\n      ...opts,\n      player,\n      stepNumber: this.inspector.getStepNumber(player),\n    };\n  }\n\n  create(permanent: Permanent, gemColors: GemColor[]): Step {\n    return {\n      type: StepType.CREATE_GEMS,\n      permanentId: permanent.id,\n      gemColors,\n      stepNumber: this.inspector.getStepNumber(permanent.owner),\n    };\n  }\n\n  move(permanent: Permanent, slot: Slot): MoveStep;\n  move(permanent: Permanent, row: number, col: number): MoveStep;\n  move(permanent: Permanent, arg1: Slot | number, arg2?: number): MoveStep;\n  move(permanent: Permanent, arg1: Slot | number, arg2?: number): MoveStep {\n    const slot = (() => {\n      if (typeof arg1 === \"number\") {\n        if (typeof arg2 !== \"number\")\n          throw new Error(\"incorrect type signature\");\n        return { row: arg1, column: arg2 };\n      } else {\n        if (arg2 !== undefined) throw new Error(\"incorrect type signature\");\n        return arg1;\n      }\n    })();\n\n    return {\n      type: StepType.MOVE,\n      permanentId: permanent.id,\n      slot: slot,\n      stepNumber: this.inspector.getStepNumber(permanent.owner),\n    };\n  }\n\n  attack(attacker: Permanent, defender: Permanent): AttackStep {\n    return {\n      type: StepType.ATTACK,\n      attackerId: attacker.id,\n      defenderId: defender.id,\n      stepNumber: this.inspector.getStepNumber(attacker.owner),\n    };\n  }\n\n  activateAbility(\n    permanent: Permanent,\n    abilityType: AbilityType,\n    effectOpts?: ReadonlyArray<EffectOpt>\n  ): Step {\n    return {\n      type: StepType.ACTIVATE_ABILITY,\n      permanentId: permanent.id,\n      abilityType: abilityType,\n      effectOpts: effectOpts ?? [],\n      stepNumber: this.inspector.getStepNumber(permanent.owner),\n    };\n  }\n\n  draw(playerOpt?: Player): Step {\n    const player = this.getPlayer(playerOpt);\n    return {\n      type: StepType.DRAW,\n      player,\n      stepNumber: this.inspector.getStepNumber(player),\n    };\n  }\n\n  /**\n   * Returns a default query for attacking for general uses.\n   * Please help improve it!\n   */\n  private makeDefaultAttackQuery(attacker: Permanent): PermanentQuery {\n    return {\n      sort: [\n        \"structuresFirst\",\n        {\n          type: \"weighted\",\n          weights: [\n            // prioritize lower health, since they are faster to kill off\n            { criterion: \"health\", weight: 1 },\n            // prioritize higher power, since they are scarier\n            { criterion: \"-power\", weight: 1 },\n          ],\n        },\n        // tiebreak by nearest first\n        { type: \"euclideanDistance\", slot: attacker.slot },\n      ],\n    };\n  }\n\n  /**\n   * Attack the first valid permanent from a filter/sort query.\n   * See {@link PermanentQuery} for the query format.\n   * If no query is supplied, uses a default query that should work\n   * for most cases (please help improve it)!\n   */\n  attackFirst(\n    attacker: Permanent,\n    query?: PermanentQuery,\n    role?: Role\n  ): Step | void {\n    for (const defender of this.inspector.getPermanents(\n      query ?? this.makeDefaultAttackQuery(attacker)\n    )) {\n      const attackStep = this.attack(attacker, defender);\n      if (this.inspector.isValid(attackStep, this.getRole(role))) {\n        return attackStep;\n      }\n    }\n  }\n\n  createCheckpoint(slot: number): Step {\n    return { type: StepType.CREATE_CHECKPOINT, slot };\n  }\n}\n","import { Player, Slot, Permanent, Card } from \"engine/types/game-state\";\nimport { GemColor } from \"engine/types/card-data\";\nimport { Counter, CounterType, ValueCounterType } from \"engine/types/counters\";\nimport { UIElement, Keyframe, Speaker } from \"engine/types/keyframes\";\nimport { EngineContext } from \"engine/types/game-specs\";\nimport { AbilityType, EffectOpt } from \"engine/types/effects\";\nimport { Role, UpdateType } from \"engine/types/updates\";\nimport { Inspector } from \"engine/Inspector\";\nimport { Controller } from \"engine/Controller\";\nimport { Engine } from \"engine/Engine\";\nimport { StepMaker } from \"engine/StepMaker\";\nimport { PermanentQuery } from \"engine/PermanentQuery\";\nimport { LoseReason } from \"game-server/backend-interface/BackendInterface\";\n\n/**\n * Events that a permanent can listen to.\n * Permanents can listen to events due to effects intrinsic to the cards\n * themselves, or when instructed to by counters.\n */\nexport enum PermanentEventType {\n  /** After the permanent is created. */\n  CREATED = \"created\",\n  /** Before the permanent is destroyed. */\n  BEFORE_DESTROYED = \"before_destroyed\",\n  /** After the permanent is destroyed. */\n  AFTER_DESTROYED = \"after_destroyed\",\n  /** Start of the next player's turn. */\n  START_TURN = \"start_turn\",\n  /** End of the current player's turn. */\n  END_TURN = \"end_turn\",\n\n  // WARNING: Due to thorns, card effects using *_DESTROY_UNIT\n  // must take into consideration the fact that the permanent that\n  // this counter is attached to may have been destroyed by the time\n  // the handler is called.\n  /** Before the permanent destroys a unit. */\n  BEFORE_DESTROY_UNIT = \"before_destroy_unit\",\n  /** After the permanent destroys a unit. */\n  AFTER_DESTROY_UNIT = \"after_destroy_unit\",\n\n  // WARNING: Due to thorns, card effects using AFTER_DAMAGED\n  // must take into consideration the fact that the permanent that\n  // this counter is attached to may have been destroyed by the time\n  // the handler is called.\n  /**\n   * After the permanent is damaged.\n   * This is still called even if the permanent would be destroyed by\n   * the damage. In this case, the handler is called while the permanent\n   * is still on the board, potentially with negative health.\n   */\n  AFTER_DAMAGED = \"after_damaged\",\n  /** After the permanent has its damage removed. */\n  AFTER_DAMAGE_REMOVED = \"after_damage_removed\",\n\n  /** After power or max health have been adjusted. */\n  AFTER_STATS_CHANGED = \"after_stats_changed\",\n\n  /** After the permanent deals damage. */\n  AFTER_DEAL_DAMAGE = \"after_deal_damage\",\n  /** When any other unit is destroyed. */\n  OTHER_UNIT_DESTROYED = \"other_unit_destroyed\",\n  /** When any other unit enters the field. */\n  OTHER_UNIT_SPAWN = \"other_unit_spawn\",\n}\n\ntype PermanentEventBase = {\n  permanent: Permanent;\n  /**\n   * The counter that's handling the event, if this is a counter\n   * event handler. If this is a game spec handler, then this\n   * should be undefined.\n   * The associated counterIndex will be defined iff counter is defined.\n   */\n  counter?: Counter;\n  counterIndex?: number;\n  ctx: EngineContext;\n};\n\nexport type CreatedPermanentEvent = PermanentEventBase & {\n  type: PermanentEventType.CREATED;\n};\ntype DestroyedPermanentEvent = PermanentEventBase & {\n  type:\n    | PermanentEventType.BEFORE_DESTROYED\n    | PermanentEventType.AFTER_DESTROYED;\n  /**\n   * The attacker, if the destroy should be attributed to one.\n   * WARNING: The attacker may have been destroyed by the time\n   * this event is fired. Make sure that the attacker still\n   * exists on the board before performing any actions on it.\n   */\n  attacker?: Permanent;\n};\nexport type StartTurnPermanentEvent = PermanentEventBase & {\n  type: PermanentEventType.START_TURN;\n};\nexport type EndTurnPermanentEvent = PermanentEventBase & {\n  type: PermanentEventType.END_TURN;\n};\nexport type DestroyUnitPermanentEvent = PermanentEventBase & {\n  type:\n    | PermanentEventType.BEFORE_DESTROY_UNIT\n    | PermanentEventType.AFTER_DESTROY_UNIT;\n  defender: Permanent;\n};\nexport type DamagedPermanentEvent = PermanentEventBase & {\n  type: PermanentEventType.AFTER_DAMAGED;\n  damage: number;\n  /**\n   * The attacker, if the damage should be attributed to one.\n   * WARNING: The attacker may have been destroyed by the time\n   * this event is fired. Make sure that the attacker still\n   * exists on the board before performing any actions on it.\n   */\n  attacker?: Permanent;\n};\nexport type DamageRemovedPermanentEvent = PermanentEventBase & {\n  type: PermanentEventType.AFTER_DAMAGE_REMOVED;\n  damage: number; // the real amount of damage removed, never more than current damage\n};\n\ntype StatsChangedPermanentEvent = PermanentEventBase & {\n  type: PermanentEventType.AFTER_STATS_CHANGED;\n  powerDelta: number;\n  healthDelta: number;\n};\n\ntype DealDamagePermanentEvent = PermanentEventBase & {\n  type: PermanentEventType.AFTER_DEAL_DAMAGE;\n  damage: number;\n  defender: Permanent;\n};\ntype OtherUnitDestroyedEvent = PermanentEventBase & {\n  type: PermanentEventType.OTHER_UNIT_DESTROYED;\n  destroyedPermanent: Permanent;\n  attacker?: Permanent;\n};\ntype OtherUnitSpawnPermanentEvent = PermanentEventBase & {\n  type: PermanentEventType.OTHER_UNIT_SPAWN;\n  spawnedPermanent: Permanent;\n};\n\nexport type PermanentEvent =\n  | CreatedPermanentEvent\n  | DestroyedPermanentEvent\n  | StartTurnPermanentEvent\n  | EndTurnPermanentEvent\n  | DestroyUnitPermanentEvent\n  | DamagedPermanentEvent\n  | DamageRemovedPermanentEvent\n  | StatsChangedPermanentEvent\n  | DealDamagePermanentEvent\n  | OtherUnitDestroyedEvent\n  | OtherUnitSpawnPermanentEvent;\n\nexport type PermanentEventHandlerResult = {\n  /**\n   * Only used for event handlers on counters.\n   * If set to true, the counter that this event handler comes\n   * from is removed after the event is handled, so that the\n   * event handler is only run once.\n   * By default, the counter will remain on the permanent and\n   * its event handlers may be run multiple times.\n   */\n  expire?: boolean;\n} | void;\n\nexport type PermanentEventHandlers = {\n  [PermanentEventType.CREATED]?: (\n    ev: CreatedPermanentEvent\n  ) => PermanentEventHandlerResult;\n  [PermanentEventType.BEFORE_DESTROYED]?: (\n    ev: DestroyedPermanentEvent\n  ) => PermanentEventHandlerResult;\n  [PermanentEventType.AFTER_DESTROYED]?: (\n    ev: DestroyedPermanentEvent\n  ) => PermanentEventHandlerResult;\n  [PermanentEventType.START_TURN]?: (\n    ev: StartTurnPermanentEvent\n  ) => PermanentEventHandlerResult;\n  [PermanentEventType.END_TURN]?: (\n    ev: EndTurnPermanentEvent\n  ) => PermanentEventHandlerResult;\n  [PermanentEventType.BEFORE_DESTROY_UNIT]?: (\n    ev: DestroyUnitPermanentEvent\n  ) => PermanentEventHandlerResult;\n  [PermanentEventType.AFTER_DESTROY_UNIT]?: (\n    ev: DestroyUnitPermanentEvent\n  ) => PermanentEventHandlerResult;\n  [PermanentEventType.AFTER_DAMAGED]?: (\n    ev: DamagedPermanentEvent\n  ) => PermanentEventHandlerResult;\n  [PermanentEventType.AFTER_DAMAGE_REMOVED]?: (\n    ev: DamageRemovedPermanentEvent\n  ) => PermanentEventHandlerResult;\n  [PermanentEventType.AFTER_STATS_CHANGED]?: (\n    ev: StatsChangedPermanentEvent\n  ) => PermanentEventHandlerResult;\n  [PermanentEventType.AFTER_DEAL_DAMAGE]?: (\n    ev: DealDamagePermanentEvent\n  ) => PermanentEventHandlerResult;\n  [PermanentEventType.OTHER_UNIT_DESTROYED]?: (\n    ev: OtherUnitDestroyedEvent\n  ) => PermanentEventHandlerResult;\n  [PermanentEventType.OTHER_UNIT_SPAWN]?: (\n    ev: OtherUnitSpawnPermanentEvent\n  ) => PermanentEventHandlerResult;\n};\n\n/**\n * A safe wrapper around Engine for game spec and card effects hooks.\n * Authors should perform all game state changes only through this API.\n */\nexport class HooksEngineAPI {\n  private inspector: Inspector;\n  private controller: Controller;\n  private engine: Engine;\n\n  constructor(engine: Engine) {\n    this.inspector = engine.inspector;\n    this.controller = engine.controller;\n    this.engine = engine;\n  }\n\n  /**\n   * Get raw access to the Controller.\n   * In author code, this should only be used at most temporarily to get\n   * unblocked while waiting for web team to implement new API endpoints.\n   */\n  getBackdoorController(): Controller {\n    return this.controller;\n  }\n\n  /**\n   * Get raw access to the Engine.\n   * In author code, this should only be used at most temporarily to get\n   * unblocked while waiting for web team to implement new API endpoints.\n   */\n  getBackdoorEngine(): Engine {\n    return this.engine;\n  }\n\n  /**\n   * Initialize the engine-only battle-specific extra state.\n   */\n  initExtraState(val: object): void {\n    this.engine.getEngineOnly().extraState = val;\n  }\n\n  /**\n   * Get the engine-only battle-specific extra state.\n   * The return value can (and should) be directly modified, since it\n   * is only used by the engine.\n   */\n  getExtraState(): object {\n    const extraState = this.engine.getEngineOnly().extraState;\n    if (extraState === undefined) {\n      throw new Error(\"extraState not initialized\");\n    }\n    return extraState;\n  }\n\n  /** Initialize the shared extra state. */\n  initSharedExtraState(sharedExtraState: object): void {\n    this.controller.broadcastAndApply({\n      type: UpdateType.INIT_SHARED_EXTRA_STATE,\n      sharedExtraState,\n    });\n  }\n\n  /**\n   * Modify the battle-specific extra state shared between the server\n   * and client. This modification must be encoded declaratively as\n   * an object. The shared game spec should in turn declare the hook\n   * modifySharedExtraState, which takes in this object and applies\n   * the described update to the shared extra state.\n   */\n  modifySharedExtraState(updInfo: object): void {\n    this.controller.broadcastAndApply({\n      type: UpdateType.MODIFY_SHARED_EXTRA_STATE,\n      updInfo,\n    });\n  }\n\n  /**\n   * Card text: (player) draws a card.\n   * This does not deduct cost.\n   */\n  drawCard(player: Player): void {\n    this.engine.drawCard(player);\n  }\n\n  /**\n   * (player) adds (card) to their hand.\n   * This does not modify player decks.\n   */\n  addCardToHand(player: Player, card: Card): void {\n    this.engine.addCardToHand(player, card);\n  }\n\n  /**\n   * (player) discards (card).\n   */\n  discardCard(player: Player, handCardId: string): void {\n    this.controller.discardCard(player, handCardId);\n  }\n\n  /**\n   * (player) discards (card).\n   */\n  discardRandomCard(player: Player): boolean {\n    const hand = this.inspector.gameState[player].hand;\n    if (hand.length === 0) {\n      return false;\n    }\n    const idx = Math.floor(Math.random() * hand.length);\n    this.discardCard(player, hand[idx].id);\n    return true;\n  }\n\n  /** Remove a card by index from the player's deck. */\n  removeCardIndex(player: Player, cardIndex: number): void {\n    const deck = this.inspector.getDrawPile(player);\n    if (cardIndex < 0 || cardIndex >= deck.length)\n      throw new Error(\"cardIndex out of bounds for draw pile\");\n\n    this.engine.removeCardIndex(player, cardIndex);\n  }\n\n  /**\n   * Card text: (player) gains (gems).\n   */\n  addGems(player: Player, gems: GemColor[]): void {\n    if (\n      this.inspector.hasAI() &&\n      player === Player.P2 &&\n      (this.inspector.gameSpec.aiDisableGemAccounting ?? false)\n    )\n      return;\n    this.controller.addGems(player, gems);\n  }\n\n  /**\n   * Card text: Spawn an instance of (cardName) in (slot).\n   * The spawned permanent would be owned by (owner).\n   * If the slot is already occupied, the spawn is aborted.\n   * Returns whether the spawn was successful.\n   */\n  spawn(cardName: string, slot: Slot, owner: Player): boolean;\n\n  /** (slot) may also be specified by its (row) and (col). */\n  spawn(cardName: string, row: number, col: number, owner: Player): boolean;\n\n  spawn(\n    cardName: string,\n    arg1: Slot | number,\n    arg2: Player | number,\n    arg3?: Player\n  ): boolean {\n    const slot = (() => {\n      if (typeof arg1 === \"number\") {\n        if (typeof arg2 !== \"number\")\n          throw new Error(\"incorrect type signature\");\n        return { row: arg1, column: arg2 };\n      } else {\n        if (typeof arg2 === \"number\")\n          throw new Error(\"incorrect type signature\");\n        return arg1;\n      }\n    })();\n    const owner = typeof arg2 !== \"number\" ? arg2 : arg3;\n    if (owner === undefined) throw new Error(\"incorrect type signature\");\n\n    if (!this.inspector.isSlotInBounds(slot)) return false;\n    if (this.inspector.isSlotOccupied(slot)) return false;\n\n    this.engine.spawnPermanent(cardName, owner, slot);\n    return true;\n  }\n\n  /**\n   * Remove (permanent) from play.\n   * This does not add the permanent to the discard pile, and does\n   * not trigger any effects.\n   */\n  despawn(permanent: Permanent): void {\n    if (!this.inspector.doesPermanentExist(permanent)) return;\n\n    this.controller.removePermanent(permanent.id);\n  }\n\n  /**\n   * Swap the owner of (permanent) to its opponent.\n   */\n  changePermanentOwner(permanent: Permanent): boolean {\n    if (!this.inspector.doesPermanentExist(permanent)) return false;\n\n    this.controller.changePermanentOwner(\n      permanent.id,\n      this.inspector.getOpponentOf(permanent.owner)\n    );\n    return true;\n  }\n\n  /**\n   * Ready (permanent). Returns whether successful.\n   */\n  ready(permanent: Permanent): boolean {\n    if (!this.inspector.doesPermanentExist(permanent)) return false;\n\n    this.controller.readyPermanent(permanent.id);\n    return true;\n  }\n\n  /**\n   * Unready (permanent). Returns whether successful.\n   */\n  unready(permanent: Permanent): boolean {\n    if (!this.inspector.doesPermanentExist(permanent)) return false;\n\n    // Unready even in the \"always ready\" dev mode, so that any\n    // unready effects can still be tested in workshop mode.\n    this.controller.unreadyPermanent(permanent.id);\n    return true;\n  }\n\n  /**\n   * Card text: (permanent) moves to (slot).\n   * This does not unready (permanent).\n   * Returns whether the move was successful.\n   */\n  move(permanent: Permanent, slot: Slot): boolean;\n\n  /** (slot) may also be specified by its (row) and (col). */\n  move(permanent: Permanent, row: number, col: number): boolean;\n\n  move(permanent: Permanent, arg1: Slot | number, arg2?: number): boolean {\n    const slot = (() => {\n      if (typeof arg1 === \"number\") {\n        if (typeof arg2 !== \"number\")\n          throw new Error(\"incorrect type signature\");\n        return { row: arg1, column: arg2 };\n      } else {\n        if (arg2 !== undefined) throw new Error(\"incorrect type signature\");\n        return arg1;\n      }\n    })();\n\n    if (!this.inspector.doesPermanentExist(permanent)) return false;\n    if (!this.inspector.isSlotInBounds(slot)) return false;\n    if (this.inspector.isSlotOccupied(slot)) return false;\n\n    this.controller.move(permanent.id, slot);\n    return true;\n  }\n\n  /**\n   * Move (permanent) to a new slot, relative to its current position.\n   * e.g. If the permanent starts in (col, row), this tries to move\n   * it to (col + colDiff, row + rowDiff).\n   * This does not unready (permanent).\n   */\n  moveRel(permanent: Permanent, rowDiff: number, colDiff: number): boolean {\n    return this.move(\n      permanent,\n      permanent.slot.row + rowDiff,\n      permanent.slot.column + colDiff\n    );\n  }\n\n  /**\n   * Card text: (permanent1) swaps places with (permanent2).\n   * The swap does not happen if either permanent was destroyed\n   * due to earlier effects.\n   */\n  swap(permanent1: Permanent, permanent2: Permanent): void {\n    if (!this.inspector.doesPermanentExist(permanent1)) return;\n    if (!this.inspector.doesPermanentExist(permanent2)) return;\n    this.controller.swap(permanent1.id, permanent2.id);\n  }\n\n  /**\n   * Card text: (attacker) attacks (defender) [for (damage) damage].\n   * Damage is not dealt if (attacker) was destroyed due to earlier\n   * effects. The damage is attributed to (attacker).\n   * This does not deduct cost or unready (attacker).\n   */\n  attack(attacker: Permanent, defender: Permanent, damage?: number): void {\n    if (!this.inspector.doesPermanentExist(attacker)) return;\n    if (!this.inspector.doesPermanentExist(defender)) return;\n\n    if (damage === undefined) {\n      this.engine.attack(attacker, defender);\n    } else {\n      this.engine.damagePermanent(defender, damage, attacker);\n    }\n  }\n\n  /**\n   * Card text: (attacker) deals (damage) damage to (defender).\n   * Damage is dealt even if (attacker) was destroyed due to earlier\n   * effects. The damage is attributed to (attacker).\n   */\n  damage(attacker: Permanent, defender: Permanent, damage: number): void {\n    if (!this.inspector.doesPermanentExist(defender)) return;\n\n    this.engine.damagePermanent(defender, damage, attacker);\n  }\n\n  /**\n   * Card text: (defender) receives (damage) damage.\n   * Damage is not attributed to any permanent. On-damage effects\n   * are still triggered.\n   * Most of the time, damage should be attributed to an attacker.\n   * If so, the `damage` function should be used instead.\n   */\n  damageUnattributed(\n    defender: Permanent,\n    damage: number,\n    ignoreInvulnerability?: boolean\n  ): void {\n    if (!this.inspector.doesPermanentExist(defender)) return;\n\n    this.engine.damagePermanent(\n      defender,\n      damage,\n      undefined,\n      ignoreInvulnerability\n    );\n  }\n\n  /**\n   * Card text: Remove (damage) damage from (permanent).\n   * (damage) must be positive.\n   * (permanent)'s health will not go above max health.\n   * On-damage effects are not triggered, but after-damage-removed is.\n   * Returns if successful.\n   */\n  removeDamage(permanent: Permanent, damage: number): boolean {\n    if (!this.inspector.doesPermanentExist(permanent)) return false;\n    if (damage <= 0) return false;\n\n    this.engine.removeDamageFromPermanent(permanent, damage);\n    return true;\n  }\n\n  adjustPermanentStats(\n    permanent: Permanent,\n    powerDelta: number,\n    healthDelta: number\n  ): boolean {\n    if (!this.inspector.doesPermanentExist(permanent)) return false;\n    if (powerDelta === 0 && healthDelta === 0) return false;\n\n    this.engine.adjustPermanentStats(permanent, powerDelta, healthDelta);\n    return true;\n  }\n\n  /**\n   * Card text: (attacker) destroys (defender).\n   * This destroys (defender) even if (attacker) was destroyed due to\n   * earlier effects. The destroy is attributed to (attacker).\n   * For the purposes of event triggers, (defender) would be considered\n   * to have been destroyed without having received any damage.\n   */\n  destroy(attacker: Permanent, defender: Permanent): void {\n    if (!this.inspector.doesPermanentExist(defender)) return;\n\n    this.engine.destroyPermanent(defender, attacker);\n  }\n\n  /**\n   * Add (counter) to (permanent).\n   */\n  addCounter(permanent: Permanent, counter: Counter): void {\n    if (!this.inspector.doesPermanentExist(permanent)) return;\n\n    this.controller.addCounter(permanent.id, counter);\n  }\n\n  /**\n   * Remove the first counter of (CounterType) on (permanent).\n   * Returns whether successful.\n   */\n  removeCounterType(permanent: Permanent, counterType: CounterType): boolean {\n    if (!this.inspector.doesPermanentExist(permanent)) return false;\n    return this.engine.removeCounterType(permanent, counterType);\n  }\n\n  /**\n   * Set the value of the value counter at (counterIndex) on\n   * (permanent) to (val).\n   */\n  updateCounterVal(\n    permanent: Permanent,\n    counterIndex: number,\n    val: number,\n    explanation?: (val: number) => string\n  ): void {\n    if (!this.inspector.doesPermanentExist(permanent)) return;\n\n    this.controller.setCounter(\n      permanent.id,\n      counterIndex,\n      val,\n      explanation && explanation(val)\n    );\n  }\n\n  /**\n   * If it doesn't exist, add a value counter to (permanent) with (val), (explanation(val)) and (expiry).\n   * If it exists, increment the value of the existing counter by (val) and set the explanation to (explanation(new value))\n   */\n  mergeValueCounter(\n    permanent: Permanent,\n    counterType: ValueCounterType,\n    val: number,\n    explanation?: (val: number) => string,\n    expiry?: PermanentEventType\n  ): void {\n    if (!this.inspector.doesPermanentExist(permanent)) return;\n\n    for (const [idx, counter] of permanent.counters.entries()) {\n      if (counter.type === counterType && counter.expiry === expiry) {\n        this.controller.setCounter(\n          permanent.id,\n          idx,\n          counter.val + val,\n          explanation && explanation(counter.val + val)\n        );\n        return;\n      }\n    }\n\n    this.controller.addCounter(permanent.id, {\n      type: counterType,\n      val: val,\n      explanation: explanation && explanation(val),\n      expiry,\n    });\n  }\n\n  /**\n   * Announce a message to the user log.\n   */\n  announce(message: string): void {\n    this.controller.announce(message);\n  }\n\n  clearKeyframe(): void {\n    this.controller.clearKeyframe();\n  }\n\n  /**\n   * End the game. By default, P1 wins and solves the puzzle.\n   * isSolved overrides whether P1 gets the solve. If set to false,\n   * P1 doesn't get the solve, and P2 wins by default.\n   * winner overrides who wins.\n   */\n  endGame(isSolved?: boolean, winner?: Player): void {\n    isSolved ??= true;\n    this.engine.endGame(\n      winner ?? (isSolved ? Player.P1 : Player.P2),\n      LoseReason.NORMAL,\n      isSolved ? { [Player.P1]: true } : {},\n      {}\n    );\n  }\n}\n\n/**\n * A safe utility wrapper around Engine for performing actions as\n * an AI, primarily to simulate player actions.\n */\nexport class HooksAIAPI {\n  private inspector: Inspector;\n  private controller: Controller;\n  private engine: Engine;\n  private stepMaker: StepMaker;\n\n  constructor(engine: Engine) {\n    this.inspector = engine.inspector;\n    this.controller = engine.controller;\n    this.engine = engine;\n    this.stepMaker = new StepMaker(this.inspector, Player.P2, Role.GOD);\n  }\n\n  /**\n   * Make the AI character say (message).\n   * The message would appear as a dialog bubble coming from the\n   * AI character, and be cleared at the start of the next AI turn.\n   * If \"blocking\", accept no input until user says \"OK\".\n   */\n  speak(\n    message: string,\n    opts: {\n      blocking?: boolean;\n      hideBattler?: boolean;\n      speaker?: Speaker;\n    } = {}\n  ) {\n    const engineOnly = this.engine.getEngineOnly();\n    this.controller.setKeyframe({\n      id: `dyn-keyframe-${engineOnly.nextKeyframeId}`,\n      dialogue: message.trim(),\n      selector: UIElement.AI_BATTLER,\n      showNext: opts.blocking,\n      ...opts,\n    });\n    engineOnly.nextKeyframeId++;\n  }\n\n  /**\n   * Try to spawn (cardName) at (slot) for the AI.\n   * If the slot is already occupied, the spawn is aborted.\n   */\n  trySpawn(cardName: string, slot: Slot): boolean;\n\n  /** (slot) may also be specified by its (row) and (col). */\n  trySpawn(cardName: string, row: number, col: number): boolean;\n\n  trySpawn(cardName: string, arg1: Slot | number, arg2?: number): boolean {\n    return this.engine.aiTryStep(this.stepMaker.spawn(cardName, arg1, arg2));\n  }\n\n  // TURN ACTIONS\n  //\n  // The following actions are subject to the same restrictions as an\n  // ordinary player (gems are deducted, permanents cannot perform\n  // actions if unready, etc.) unless explicitly disabled by the\n  // game spec.\n\n  /**\n   * Try to summon the card with ID (handCardId) of the AI's hand to (slot).\n   * AIs that don't manage a deck (most don't) should use trySpawn instead.\n   */\n  trySummon(handCardId: string, slot: Slot): boolean;\n\n  /** (slot) may also be specified by its (row) and (col). */\n  trySummon(handCardId: string, row: number, col: number): boolean;\n\n  trySummon(handCardId: string, arg1: Slot | number, arg2?: number): boolean {\n    return this.engine.aiTryStep(this.stepMaker.summon(handCardId, arg1, arg2));\n  }\n\n  /**\n   * Try to move (permanent) to (slot).\n   */\n  tryMove(permanent: Permanent, slot: Slot): boolean;\n\n  /** (slot) may also be specified by its (row) and (col). */\n  tryMove(permanent: Permanent, row: number, col: number): boolean;\n\n  tryMove(permanent: Permanent, arg1: Slot | number, arg2?: number): boolean {\n    return this.engine.aiTryStep(this.stepMaker.move(permanent, arg1, arg2));\n  }\n\n  /**\n   * Try to move (permanent), relative to its current location.\n   * e.g. If the permanent starts in (col, row), this tries to move\n   * it to (col + colDiff, row + rowDiff).\n   */\n  tryMoveRel(permanent: Permanent, rowDiff: number, colDiff: number): boolean {\n    return this.tryMove(\n      permanent,\n      permanent.slot.row + rowDiff,\n      permanent.slot.column + colDiff\n    );\n  }\n\n  /**\n   * Try to attack (defender) with (attacker).\n   */\n  tryAttack(attacker: Permanent, defender: Permanent): boolean {\n    return this.engine.aiTryStep(this.stepMaker.attack(attacker, defender));\n  }\n\n  /**\n   * Try to activate (permanent)'s (abilityType) ability.\n   * If no parameters are needed, (effectOpts) may be omitted.\n   */\n  tryActivateAbility(\n    permanent: Permanent,\n    abilityType: AbilityType,\n    effectOpts?: ReadonlyArray<EffectOpt>\n  ): boolean {\n    return this.engine.aiTryStep(\n      this.stepMaker.activateAbility(permanent, abilityType, effectOpts)\n    );\n  }\n\n  /**\n   * Try to attack the first valid permanent from a filter/sort query.\n   * See {@link PermanentQuery} for the query format.\n   * If no query is supplied, uses a default query that should work\n   * for most cases (see {@link StepMaker.makeDefaultAttackQuery})\n   * (please help improve it)!\n   */\n  tryAttackFirst(attacker: Permanent, query?: PermanentQuery): boolean {\n    const step = this.stepMaker.attackFirst(attacker, query);\n    if (step === undefined) return false;\n    return this.engine.aiTryStep(step);\n  }\n\n  /** Set keyframe to the given ID. */\n  setKeyframe(id: string): void;\n\n  /** Set keyframe. */\n  setKeyframe(keyframe: Keyframe): void;\n\n  setKeyframe(arg: string | Keyframe): void {\n    const { keyframes } = this.engine;\n    const keyframe =\n      typeof arg === \"string\" ? keyframes.find(({ id }) => id === arg) : arg;\n    if (!keyframe) {\n      throw new Error(\"keyframe not found\");\n    }\n    this.controller.setKeyframe(keyframe);\n  }\n}\n\n/**\n * A safe wrapper to allow AIs to perform certain limited actions\n * out of turn, such as dialogue.\n */\nexport class HooksOutOfTurnAIAPI {\n  private ai: HooksAIAPI;\n\n  constructor(ai: HooksAIAPI) {\n    this.ai = ai;\n  }\n\n  /**\n   * Make the AI character say (message).\n   * The message would appear as a dialog bubble coming from the\n   * AI character, and be cleared at the start of the next AI turn.\n   */\n  speak(\n    message: string,\n    opts: {\n      blocking?: boolean;\n      hideBattler?: boolean;\n      speaker?: Speaker;\n    } = {}\n  ) {\n    this.ai.speak(message, opts);\n  }\n\n  /** Set keyframe to the given ID. */\n  setKeyframe(id: string): void;\n\n  /** Set keyframe. */\n  setKeyframe(keyframe: Keyframe): void;\n\n  setKeyframe(arg: string | Keyframe): void {\n    if (typeof arg === \"string\") {\n      this.ai.setKeyframe(arg);\n    } else {\n      this.ai.setKeyframe(arg);\n    }\n  }\n}\n","import {\n  InspectorContext,\n  SharedGameSpec,\n} from \"engine/types/shared-game-specs\";\nimport { Player, Permanent } from \"engine/types/game-state\";\nimport { CounterType } from \"engine/types/counters\";\nimport {\n  makeOneChoiceOptForm,\n  plainAbilityActivationValidator,\n  SharedEffectsDB,\n} from \"engine/cards/card-effects-shared\";\nimport { ColorSymbol } from \"engine/types/card-data\";\nimport { Check } from \"engine/types/action-validation\";\nimport { AbilityType, EffectOptType } from \"engine/types/effects\";\n\nexport const PUZZLE_51_CARDS = [\n  \"Apple Bee\",\n  \"Bumblebee\",\n  \"Carpenter Bee\",\n  \"Drone Bee\",\n  \"Edward Al Bee\",\n  \"Fluffy Bee\",\n  \"Gardening Bee\",\n  \"Honey Bee\",\n  \"Iridescent Bee\",\n  \"Jasmine Bee\",\n  \"Kombucha Bee\",\n  \"Lavender Bee\",\n  \"Mason Bee\",\n  \"Nectar Bee\",\n  \"Orange Bee\",\n  \"Pollinator Bee\",\n  \"Queen Bee\",\n  \"Rosebud Bee\",\n  \"Sunshine Bee\",\n  \"Tangerine Bee\",\n  \"Ultimatefris Bee\",\n  \"Velvet Bee\",\n  \"Worker Bee\",\n  \"Xylophone Bee\",\n  \"Yellow Jacket Bee\",\n  \"Zinger Bee\",\n];\n\nconst cardEffectsShared: SharedEffectsDB = {\n  bearhive: {\n    isStructure: true,\n    isBase: true,\n    computeText: (permanent: Permanent, ctx: InspectorContext) => {\n      const happyBears = permanent.counters.find(\n        (c) => c.type === CounterType.HAPPY_BEARS\n      );\n      const sadBears = permanent.counters.find(\n        (c) => c.type === CounterType.SAD_BEARS\n      );\n      return `Base.\\nContains ${happyBears?.val ?? 0} happy bear${\n        happyBears?.val === 1 ? \"\" : \"s\"\n      } and ${sadBears?.val ?? 0} sad bear${sadBears?.val === 1 ? \"\" : \"s\"}.`;\n    },\n  },\n  beehive: {\n    isStructure: true,\n    isBase: true,\n  },\n  larva: {\n    specialCost: [ColorSymbol.YELLOW],\n    specialForms: [\n      makeOneChoiceOptForm(\n        PUZZLE_51_CARDS,\n        (failedChecks, permanent, choice, ctx) => {\n          if (!PUZZLE_51_CARDS.includes(choice)) {\n            failedChecks.add(Check.OPT_TYPE);\n          }\n          plainAbilityActivationValidator(\n            failedChecks,\n            permanent,\n            AbilityType.SPECIAL,\n            [\n              {\n                type: EffectOptType.ONE_CHOICE,\n                choice: choice,\n              },\n            ],\n            ctx\n          );\n        },\n        \"select a bee type\"\n      ),\n    ],\n  },\n};\n\nfor (const cardName of PUZZLE_51_CARDS) {\n  cardEffectsShared[cardName.toLocaleLowerCase().replace(/ /g, \"-\")] = {\n    flexCost: [ColorSymbol.YELLOW],\n  };\n}\n\nconst NUM_CARDS = 54;\n\nexport const SharedPuzzle51Spec: SharedGameSpec = {\n  allowCheckpoints: true,\n  hasAI: true,\n  aiDisableGemAccounting: true,\n  disableClearGems: true,\n  deckOverrides: {\n    [Player.P1]: new Array(NUM_CARDS).fill(\"larva\"),\n    [Player.P2]: [],\n  },\n  basesOverrides: {\n    [Player.P1]: [\"beehive\"],\n    [Player.P2]: [\"bearhive\"],\n  },\n  baseColumnOverrides: {\n    [Player.P1]: [2],\n    [Player.P2]: [2],\n  },\n  cardEffectsShared: cardEffectsShared,\n  numRows: 6,\n  numColumns: 8,\n};\n\n// Puzzle 51\n","import { ColorSymbol, CardType } from \"engine/types/card-data\";\nimport { Card, Permanent, Slot } from \"engine/types/game-state\";\nimport { CounterType, CounterData } from \"engine/types/counters\";\nimport {\n  PermanentEventType,\n  CreatedPermanentEvent,\n  DamagedPermanentEvent,\n  PermanentEventHandlers,\n} from \"engine/server-hooks\";\nimport { ActivateAbilityStepResolved } from \"engine/types/steps\";\nimport { GameSpec, EngineContext } from \"engine/types/game-specs\";\nimport { EffectOptType } from \"engine/types/effects\";\nimport { CardsDB } from \"engine/cards/CardsDB\";\nimport { CardEffectsShared } from \"engine/cards/card-effects-shared\";\nimport { PUZZLE_51_CARDS } from \"engine/game-specs/puzzle-51-shared\";\n\nexport type OnAbilityHook = (\n  step: ActivateAbilityStepResolved,\n  ctx: EngineContext\n) => void;\n\n/** Card effects that the server knows. */\nexport type CardEffects = CardEffectsShared & {\n  // These are split up to make the effects spec shorter.\n  onRepeatable?: OnAbilityHook;\n  onSpecial?: OnAbilityHook;\n  /**\n   * Counter data for counters specifically defined for the card.\n   * Counters can also be defined under COMMON_COUNTER_DATA, e.g.\n   * for counters that are used by multiple effects.\n   */\n  counterData?: { [type in CounterType]?: CounterData };\n  /**\n   * Adjust the damage received by permanent.\n   * The damage may optionally be attributed to an attacker.\n   * This may generate updates, e.g. to track adjustments applied,\n   * but MUST NOT perform any game state updates.\n   */\n  adjustDamageReceived?: (\n    permanent: Permanent,\n    damage: number,\n    attacker: Permanent | undefined,\n    ctx: EngineContext\n  ) => number;\n  /**\n   * If permanent would get damaged, run this hook instead.\n   * If this hook returns true, the permanent gets damaged anyway.\n   * If this hook returns false or does not return, the permanent\n   * does not get damaged.\n   */\n  insteadOfDamaged?: (\n    permanent: Permanent,\n    damage: number,\n    attacker: Permanent | undefined,\n    ctx: EngineContext\n  ) => boolean | undefined;\n  /**\n   * Actions to run in response to game events.\n   */\n  handlers?: PermanentEventHandlers;\n};\n\nexport type EffectsDB = { [cardName: string]: CardEffects };\n\nexport const thornsHandler = (ev: DamagedPermanentEvent) => {\n  const { permanent, attacker, ctx } = ev;\n  const { inspector, engine } = ctx;\n  // Attack back only if the damage comes from an attacker.\n  if (attacker) {\n    engine.announce(\n      `${inspector.getCardDisplayName(permanent)} attacks back for 1 damage!`\n    );\n    // Do not attribute damage to prevent triggering other card effects.\n    engine.damageUnattributed(attacker, 1);\n  }\n};\n\ntype PowerHealthBuff = { power?: number; health?: number };\n\nconst buffPermanent = (\n  target: Permanent,\n  buff: PowerHealthBuff,\n  source: Permanent,\n  ctx: EngineContext\n) => {\n  const { inspector, engine } = ctx;\n  const power = buff.power || 0;\n  const health = buff.health || 0;\n  const msgParts = [];\n  if (power) msgParts.push(`+${power} power`);\n  if (health) msgParts.push(`+${health} health`);\n  engine.announce(\n    `${inspector.getCardDisplayName(\n      source\n    )} buffs ${inspector.getCardDisplayName(target)} with ${msgParts.join(\n      \"/\"\n    )}!`\n  );\n\n  engine.adjustPermanentStats(target, power, health);\n};\n\n// buff adjacent cards to a permanent\nconst buffAdjacentHandler = (\n  buff: PowerHealthBuff,\n  condition?: (permanent: Permanent, ctx: EngineContext) => boolean\n) => {\n  return (ev: CreatedPermanentEvent) => {\n    const { permanent, ctx } = ev;\n    ctx.inspector\n      .getAdjacentFriendlyPermanents(permanent)\n      .forEach((adjacentPermanent) => {\n        if (condition && !condition(adjacentPermanent, ctx)) {\n          return;\n        }\n        buffPermanent(adjacentPermanent, buff, permanent, ctx);\n      });\n  };\n};\n\n/**\n * Counter data for counters used by game specs or shared by\n * multiple card effects. If a counter is defined and used only\n * for a specific card, it can be defined as part of the card\n * effect's counterData property and will be collated with these\n * counters to form the final counters database.\n */\nexport const COMMON_COUNTER_DATA: { [type in CounterType]?: CounterData } = {\n  [CounterType.BASE_GEMS]: {\n    handlers: {\n      [PermanentEventType.START_TURN]: (event) => {\n        const { permanent, counter, ctx } = event;\n        const { inspector, engine } = ctx;\n        if (counter === undefined) {\n          throw new Error(\"expect counter in counter event\");\n        }\n        if (counter.val === undefined) {\n          throw new Error(\"counter should have value\");\n        }\n        if (inspector.isTurnPending(permanent.owner)) {\n          engine.addGems(\n            permanent.owner,\n            new Array(counter.val).fill(ColorSymbol.RAINBOW)\n          );\n        }\n        return { expire: false };\n      },\n    },\n  },\n  [CounterType.POISON]: {\n    handlers: {\n      [PermanentEventType.START_TURN]: (event) => {\n        const { permanent, counter, ctx } = event;\n        const { inspector, engine } = ctx;\n        if (counter === undefined) {\n          throw new Error(\"expect counter in counter event\");\n        }\n        if (counter.val === undefined) {\n          throw new Error(\"poison counter should have value\");\n        }\n\n        // deal poison damage to the owning permanent on the start of its turn\n        if (inspector.isTurnPending(permanent.owner)) {\n          engine.damageUnattributed(permanent, counter.val);\n        }\n      },\n    },\n  },\n  // basic doom counter decrements by 1 each turn\n  // should handle val = 0 on a per-case basis\n  [CounterType.DOOM]: {\n    handlers: {\n      [PermanentEventType.END_TURN]: (event) => {\n        const { permanent, counter, counterIndex, ctx } = event;\n        const { engine, inspector } = ctx;\n        if (!inspector.isTurnPending(permanent.owner)) {\n          // Only apply on unit owner's turn\n          return;\n        }\n        if (counter == null || counterIndex == null) {\n          throw new Error(\"counter event should have counter specified\");\n        }\n        // decrement\n        const newVal = (counter.val || 0) - 1;\n\n        if (newVal <= 0) {\n          // implementer note, per-case basis: handle the behavior and remove counter manually on END_TURN\n          if (counter.val !== 0) {\n            engine.updateCounterVal(permanent, counterIndex, 0);\n          }\n        } else {\n          engine.updateCounterVal(permanent, counterIndex, newVal);\n        }\n      },\n    },\n  },\n  [CounterType.DESTROY_ON_END_OF_TURN]: {\n    handlers: {\n      [PermanentEventType.END_TURN]: (event) => {\n        const { permanent, ctx } = event;\n        const { engine } = ctx;\n        engine.destroy(permanent, permanent);\n      },\n    },\n  },\n};\n\n// Utility functions to quickly extract opt values.\n// These should already be validated during the validation phase.\nexport const extractOptPermanent = (\n  step: ActivateAbilityStepResolved,\n  index: number\n): Permanent => {\n  const opt = step.effectOptsResolved[index];\n  if (opt === undefined || opt.type !== EffectOptType.PERMANENT) {\n    throw new Error(\"expected permanent opt\");\n  }\n  return opt.permanent;\n};\nconst extractOptSlot = (\n  step: ActivateAbilityStepResolved,\n  index: number\n): Slot => {\n  const opt = step.effectOptsResolved[index];\n  if (opt === undefined || opt.type !== EffectOptType.SLOT) {\n    throw new Error(\"expected slot opt\");\n  }\n  return opt.slot;\n};\nexport const extractOptChoiceString = (\n  step: ActivateAbilityStepResolved,\n  index: number\n): string => {\n  const opt = step.effectOptsResolved[index];\n  if (opt === undefined || opt.type !== EffectOptType.ONE_CHOICE) {\n    throw new Error(\"expected one-choice string opt\");\n  }\n  return opt.choice;\n};\n\n/** Common ability hook that just performs an attack. */\nconst onAbilityAttack: OnAbilityHook = (step, opts) => {\n  const { engine } = opts;\n  const target = extractOptPermanent(step, 0);\n\n  engine.attack(step.permanent, target);\n};\n\n/* eslint sort-keys/sort-keys-fix: [\"warn\", \"asc\", { minKeys: 20 }] */\nexport const COMMON_CARD_EFFECTS: EffectsDB = {\n  \"bb-b\": {\n    // When an enemy Creature is destroyed, adjacent allied Creatures gain 1 health, and Create 1 Pleochroic Gem.\n    handlers: {\n      [PermanentEventType.OTHER_UNIT_DESTROYED]: (ev) => {\n        const { permanent, destroyedPermanent, ctx } = ev;\n        const { inspector, engine } = ctx;\n\n        // only trigger on enemy creature destroyed\n        if (\n          permanent.owner !== inspector.getOpponentOf(destroyedPermanent.owner)\n        )\n          return;\n        if (inspector.getCardType(destroyedPermanent) !== CardType.CREATURE)\n          return;\n\n        inspector\n          .getPermanents({\n            owner: permanent.owner,\n            adjacentTo: permanent.slot,\n            type: CardType.CREATURE,\n          })\n          .forEach((p) => {\n            engine.adjustPermanentStats(p, 0, 1);\n          });\n\n        engine.addGems(permanent.owner, [ColorSymbol.RAINBOW]);\n        engine.announce(\n          `${inspector.getCardDisplayName(permanent)} Creates 1 Pie`\n        );\n      },\n    },\n  },\n  \"bee-rider\": {\n    onRepeatable: (step, ctx) => {\n      const { permanent } = step;\n      const { engine } = ctx;\n      const slot = extractOptSlot(step, 0);\n      engine.move(permanent, slot);\n      engine.addCounter(permanent, {\n        type: CounterType.FLEXED_THIS_TURN,\n        explanation: \"flexed this turn\",\n        expiry: PermanentEventType.END_TURN,\n      });\n    },\n  },\n  beeflector: {\n    handlers: {\n      // when created, change owner to opponent\n      [PermanentEventType.CREATED]: (ev) => {\n        const { engine } = ev.ctx;\n        engine.changePermanentOwner(ev.permanent);\n      },\n      // thorns 1\n      [PermanentEventType.AFTER_DAMAGED]: thornsHandler,\n    },\n  },\n  beeowulf: {\n    onSpecial: (step, ctx) => {\n      const { engine } = ctx;\n      const attackTarget = extractOptPermanent(step, 0);\n      const moveTarget = extractOptSlot(step, 1);\n\n      engine.attack(step.permanent, attackTarget);\n      engine.move(attackTarget, moveTarget);\n    },\n  },\n  beethoven: {\n    adjustDamageReceived: (permanent, damage, _attacker, ctx) => {\n      const { inspector, engine } = ctx;\n      // General logic to ignore up to a maximum amount of damage\n      // across the entire turn.\n      const maxIgnore = 1;\n      const currentIgnored = inspector.getCounterValSum(\n        permanent,\n        CounterType.IGNORED_DAMAGE\n      );\n      const nextIgnored = Math.min(maxIgnore, currentIgnored + damage);\n      const ignoredDiff = nextIgnored - currentIgnored;\n      if (ignoredDiff > 0) {\n        engine.announce(\n          `${inspector.getCardDisplayName(\n            permanent\n          )} ignores ${ignoredDiff} damage!`\n        );\n        engine.addCounter(permanent, {\n          type: CounterType.IGNORED_DAMAGE,\n          val: ignoredDiff,\n          explanation: `ignored ${ignoredDiff} damage this turn`,\n          expiry: PermanentEventType.END_TURN,\n        });\n      }\n      return damage - ignoredDiff;\n    },\n  },\n  \"bell-flower\": {\n    handlers: {\n      [PermanentEventType.BEFORE_DESTROYED]: (ev) => {\n        const { permanent, ctx } = ev;\n        const { engine } = ctx;\n        engine.drawCard(permanent.owner);\n      },\n    },\n  },\n  blancmange: {\n    // On the turn this Creature is Summoned, it MUST\n    // Flex: give control of target other allied Creature to enemy,\n    // and reflect its position in the battlefield. Can only be done once.\n    // If you do not have any other Creatures when this is Summoned, or do not Flex, it is destroyed.\n    handlers: {\n      [PermanentEventType.CREATED]: (ev) => {\n        const { permanent, ctx } = ev;\n        const { inspector, engine } = ctx;\n        // check for other creatures\n        const permanents = inspector.getPermanentsOf(permanent.owner);\n        const creatures = permanents.filter(\n          (p) => inspector.getCardType(p) === CardType.CREATURE\n        );\n        if (creatures.length <= 1) {\n          engine.destroy(permanent, permanent);\n          engine.announce(\n            `${inspector.getCardDisplayName(\n              permanent\n            )} destroys itself without a Creature to convert`\n          );\n          return;\n        }\n\n        engine.addCounter(permanent, {\n          type: CounterType.SUMMONED_THIS_TURN,\n          explanation: \"can Flex\",\n          expiry: PermanentEventType.END_TURN,\n        });\n      },\n      [PermanentEventType.END_TURN]: (ev) => {\n        const { permanent, ctx } = ev;\n        const { inspector, engine } = ctx;\n        if (\n          inspector.doesPermanentHaveCounterType(\n            permanent,\n            CounterType.SUMMONED_THIS_TURN\n          )\n        ) {\n          engine.destroy(permanent, permanent);\n          engine.announce(\n            `${inspector.getCardDisplayName(\n              permanent\n            )} did not convert and destroys itself`\n          );\n        }\n      },\n    },\n    onRepeatable: (step, ctx) => {\n      const { inspector, engine } = ctx;\n      const target = extractOptPermanent(step, 0);\n\n      const reflectedSlot = inspector.getReflectedSlot(target.slot);\n      if (inspector.isSlotOccupied(reflectedSlot)) return;\n\n      // reflect and give to enemy\n      engine.move(target, reflectedSlot);\n      engine.changePermanentOwner(target);\n\n      // can only flex once\n      engine.removeCounterType(step.permanent, CounterType.SUMMONED_THIS_TURN);\n    },\n  },\n  \"boarnana-tree\": {\n    onRepeatable: (step, ctx) => {\n      const { engine, inspector } = ctx;\n      const { permanent } = step;\n\n      inspector\n        .getPermanents({\n          owner: permanent.owner,\n          row: permanent.slot.row,\n          except: permanent,\n          type: CardType.CREATURE,\n        })\n        .forEach((target) => {\n          buffPermanent(target, { health: 1 }, permanent, ctx);\n        });\n      engine.damage(permanent, permanent, 1);\n    },\n  },\n  camp: {\n    handlers: {\n      [PermanentEventType.CREATED]: (event) => {\n        event.ctx.engine.addCounter(event.permanent, {\n          type: CounterType.BASE_GEMS,\n          val: 1,\n        });\n      },\n    },\n  },\n  chicken: {\n    counterData: {\n      [CounterType.CAT_SPECIAL_PENDING]: {\n        handlers: {\n          [PermanentEventType.START_TURN]: (ev) => {\n            const { permanent, ctx } = ev;\n            const { engine } = ctx;\n            engine.addGems(permanent.owner, [ColorSymbol.RAINBOW]);\n            return { expire: true };\n          },\n        },\n      },\n    },\n    onSpecial: (step, ctx) => {\n      const { engine } = ctx;\n      engine.addCounter(step.permanent, {\n        type: CounterType.CAT_SPECIAL_PENDING,\n        explanation: \"Get {?} at the start of next turn\",\n      });\n    },\n  },\n  \"chocolate-calf\": {\n    onRepeatable: (step, ctx) => {\n      const { engine } = ctx;\n      engine.addCounter(step.permanent, {\n        type: CounterType.POWER_ADJUSTMENT,\n        val: 1,\n        explanation: \"+1 power for the rest of the turn\",\n        expiry: PermanentEventType.END_TURN,\n      });\n    },\n  },\n  coloring: {\n    handlers: {\n      [PermanentEventType.CREATED]: (ev) => {\n        const { permanent, ctx } = ev;\n        const { engine } = ctx;\n        engine.addCounter(permanent, {\n          type: CounterType.SUMMONED_THIS_TURN,\n          explanation: \"can Flex\",\n          expiry: PermanentEventType.END_TURN,\n        });\n      },\n    },\n    onRepeatable: (step, ctx) => {\n      // On the turn this Creature is Summoned, it can\n      // Flex: Ready target other allied Creature. Can only be done once.\n      const { engine } = ctx;\n      const target = extractOptPermanent(step, 0);\n      engine.ready(target);\n      // can only flex once\n      engine.removeCounterType(step.permanent, CounterType.SUMMONED_THIS_TURN);\n    },\n  },\n  dargle: {\n    // When this Creature deals damage, it deals that amount of damage to itself, and increases its power by the same amount\n    // Whergle this Crergle deargle dargle, it deargle that argle of dargle to itsergle, and increargle its porgle by the sargle argle.\n    handlers: {\n      [PermanentEventType.AFTER_DEAL_DAMAGE]: (ev) => {\n        const { permanent, damage, ctx } = ev;\n        const { engine } = ctx;\n        // unattributed to avoid infinite loop\n        engine.damageUnattributed(permanent, damage);\n        engine.addCounter(permanent, {\n          type: CounterType.POWER_ADJUSTMENT,\n          val: damage,\n          explanation: `+${damage} porgle`,\n        });\n        engine.announce(\n          `${ctx.inspector.getCardDisplayName(\n            permanent\n          )} dargle itsergle for ${damage} and increargle its porgle by ${damage}`\n        );\n      },\n    },\n  },\n  \"dino-nugget\": {\n    handlers: {\n      [PermanentEventType.CREATED]: (ev: CreatedPermanentEvent) => {\n        const { permanent, ctx } = ev;\n        const { inspector } = ctx;\n        inspector\n          .getPermanents({\n            row: permanent.slot.row,\n            type: CardType.CREATURE,\n            except: permanent,\n            custom: (permanent) => {\n              const color = inspector.getCardColor(permanent);\n              return color !== null && color === ColorSymbol.GREEN;\n            },\n          })\n          .forEach((target) => {\n            buffPermanent(target, { health: 1 }, permanent, ctx);\n          });\n      },\n    },\n  },\n  \"eager-beever\": {\n    handlers: {\n      [PermanentEventType.CREATED]: (ev) => {\n        const { permanent, ctx } = ev;\n        const { engine } = ctx;\n        engine.addCounter(permanent, {\n          type: CounterType.ALLOWS_MOVE_TO_ADJACENT,\n        });\n      },\n    },\n  },\n  \"flora-the-explora\": {\n    onSpecial: (step, ctx) => {\n      const { engine } = ctx;\n      engine.drawCard(step.permanent.owner);\n    },\n  },\n  giraffatitan: {\n    onSpecial: onAbilityAttack,\n  },\n  \"glass-of-moo\": {\n    onSpecial: (step, ctx) => {\n      const { engine } = ctx;\n      const { permanent } = step;\n      engine.addGems(permanent.owner, [ColorSymbol.WHITE, ColorSymbol.BLACK]);\n      engine.damage(permanent, permanent, 1);\n    },\n  },\n  \"glass-of-moocha\": {\n    onSpecial: (step, ctx) => {\n      const { engine } = ctx;\n      const { permanent } = step;\n      engine.addGems(permanent.owner, [ColorSymbol.BLACK, ColorSymbol.WHITE]);\n      engine.damage(permanent, permanent, 1);\n    },\n  },\n  \"hog-hog\": {\n    handlers: {\n      [PermanentEventType.AFTER_DESTROYED]: (ev) => {\n        const { permanent, ctx } = ev;\n        ctx.engine.addCardToHand(permanent.owner, { name: \"hog\" });\n      },\n    },\n  },\n  \"hog-on-a-log\": {\n    handlers: {\n      [PermanentEventType.AFTER_DESTROYED]: (ev) => {\n        const { permanent, ctx } = ev;\n        ctx.engine.spawn(\"log\", permanent.slot, permanent.owner);\n      },\n    },\n  },\n  \"hog-on-a-log-on-a\": {\n    handlers: {\n      [PermanentEventType.AFTER_DESTROYED]: (ev) => {\n        const { permanent, ctx } = ev;\n        ctx.engine.spawn(\"log-on-a-hog-on-a\", permanent.slot, permanent.owner);\n      },\n    },\n  },\n  jabberwock: {\n    // Special: Prevent one instance of damage that would be dealt to allied Creature this turn.\n    onSpecial: (step, ctx) => {\n      const { engine } = ctx;\n      const target = extractOptPermanent(step, 0);\n      engine.addCounter(target, {\n        type: CounterType.DIVINE_SHIELD,\n        explanation: \"The next instance of damage this turn is prevented\",\n        expiry: PermanentEventType.END_TURN,\n      });\n    },\n  },\n  keep: {\n    handlers: {\n      [PermanentEventType.CREATED]: (event) => {\n        event.ctx.engine.addCounter(event.permanent, {\n          type: CounterType.BASE_GEMS,\n          val: 3,\n        });\n      },\n    },\n  },\n  \"king-bee\": {\n    handlers: {\n      [PermanentEventType.AFTER_DEAL_DAMAGE]: (ev) => {\n        const { defender, ctx } = ev;\n        const { engine } = ctx;\n        engine.addCounter(defender, {\n          type: CounterType.POWER_ADJUSTMENT,\n          explanation: \"-1 power\",\n          val: -1,\n        });\n      },\n    },\n  },\n  \"lady-jane\": {\n    onSpecial: (step, ctx) => {\n      const { inspector, engine } = ctx;\n      const { permanent } = step;\n      const attackTarget = extractOptPermanent(step, 0);\n\n      const power = inspector.getPower(permanent);\n      engine.damage(permanent, attackTarget, power + 1);\n    },\n  },\n  \"log-on-a-hog\": {\n    handlers: {\n      [PermanentEventType.AFTER_DESTROYED]: (ev) => {\n        const { permanent, ctx } = ev;\n        ctx.engine.spawn(\"hog\", permanent.slot, permanent.owner);\n      },\n    },\n  },\n\n  \"log-on-a-hog-on-a\": {\n    handlers: {\n      [PermanentEventType.AFTER_DESTROYED]: (ev) => {\n        const { permanent, ctx } = ev;\n        ctx.engine.spawn(\"hog-on-a-log-on-a\", permanent.slot, permanent.owner);\n      },\n    },\n  },\n  \"miss-yu\": {\n    // When this creature gains health, ready it, and it gains one power.\n    handlers: {\n      [PermanentEventType.AFTER_DAMAGE_REMOVED]: (ev) => {\n        const { permanent, ctx } = ev;\n        const { engine } = ctx;\n        engine.ready(permanent);\n        engine.adjustPermanentStats(permanent, 1, 0);\n        engine.announce(\n          `${ctx.inspector.getCardDisplayName(\n            permanent\n          )} readies and gains 1 power`\n        );\n      },\n      [PermanentEventType.AFTER_STATS_CHANGED]: (ev) => {\n        if (ev.healthDelta <= 0) {\n          return;\n        }\n        const { permanent, ctx } = ev;\n        const { engine } = ctx;\n        engine.ready(permanent);\n        engine.adjustPermanentStats(permanent, 1, 0);\n        engine.announce(\n          `${ctx.inspector.getCardDisplayName(\n            permanent\n          )} readies and gains 1 power`\n        );\n      },\n    },\n  },\n  \"mister-penny\": {\n    // Flex: deal 1 damage to allied Structure, and gain 1 Pleochroic Gem.\n    onRepeatable: (step, ctx) => {\n      const { engine } = ctx;\n      const permanent = step.permanent;\n      const target = extractOptPermanent(step, 0);\n\n      engine.damage(permanent, target, 1);\n      engine.addGems(permanent.owner, [ColorSymbol.RAINBOW]);\n    },\n  },\n  moonick: {\n    handlers: {\n      // When you Summon a Creature, if any of the top six cards of the deck share the name of the Summoned Creature,\n      // the first is immediately Summoned for no cost to a random empty slot, if possible.\n      [PermanentEventType.OTHER_UNIT_SPAWN]: (ev) => {\n        const { permanent, ctx } = ev;\n        const { inspector, engine } = ctx;\n        const played = ev.spawnedPermanent;\n        const owner = permanent.owner;\n        // only allied summons\n        if (played.owner !== owner) return;\n        // 1. check top n deck cards of deck\n        const deck = inspector.getDrawPile(owner);\n        const SCRY_N = 7;\n\n        // top n deck cards, from top to bottom\n        let topN: readonly Card[];\n        if (deck.length === 0) return;\n        if (deck.length < SCRY_N) {\n          topN = deck.slice().reverse();\n        } else {\n          topN = deck.slice(deck.length - SCRY_N, deck.length).reverse();\n        }\n\n        const playedName = inspector.getCardName(played);\n\n        // try to summon to an empty slot. only do this if there is an empty slot.\n        const slots = inspector.getUnoccupiedSlots(owner);\n        if (slots.length === 0) return;\n\n        // get random slot\n        const slot = slots[Math.floor(Math.random() * slots.length)];\n\n        let index = deck.length - 1;\n        // from back to front, call engine.removeCardIndex\n        // need to remove from top to bottom to keep subsequent card indices same\n        for (const card of topN) {\n          // 2. filter name by name of played\n          if (inspector.getCardName(card) === playedName) {\n            // when on summon effects are triggered, the card index will change\n            // excavating-rat draws a card, which modifies the deck before we can remove\n            // so we remove the card first, then summon\n\n            // --- DEBUGGING ---\n            // const removeCard = inspector.getDrawPile(owner)[index];\n            // console.log(topFour);\n\n            // console.log(inspector.getDrawPile(owner));\n            // console.log(`removing card at ${index}}`);\n            // console.log(removeCard);\n            // console.log(`${inspector.getCardDisplayName(removeCard)}`);\n            // --- END DEBUGGING ---\n\n            engine.removeCardIndex(owner, index);\n\n            // 3. summon to empty slot\n            if (engine.spawn(inspector.getCardName(card), slot, owner)) {\n              engine.announce(\n                `${inspector.getCardDisplayName(\n                  permanent\n                )} Summons ${inspector.getCardDisplayName(card)}`\n              );\n            } else {\n              throw new Error(\"failed to summon\");\n            }\n            return;\n          }\n          index--;\n        }\n      },\n    },\n  },\n  murray: {\n    onRepeatable: (step, ctx) => {\n      onAbilityAttack(step, ctx);\n      ctx.engine.addCounter(step.permanent, {\n        type: CounterType.FLEXED_THIS_TURN,\n        explanation: \"flexed this turn\",\n        expiry: PermanentEventType.END_TURN,\n      });\n    },\n    onSpecial: (step, ctx) => {\n      const { engine } = ctx;\n      const { permanent } = step;\n      const destroyTarget = extractOptPermanent(step, 0);\n\n      engine.destroy(permanent, destroyTarget);\n    },\n  },\n  \"nam-pam-bee\": {\n    handlers: {\n      [PermanentEventType.START_TURN]: (ev) => {\n        const { permanent, ctx } = ev;\n        const { engine, inspector } = ctx;\n        if (\n          inspector.doesPermanentHaveCounterType(\n            permanent,\n            CounterType.DAMAGE_TAKEN\n          )\n        ) {\n          engine.addGems(permanent.owner, [ColorSymbol.YELLOW]);\n        }\n      },\n    },\n  },\n  \"nepeta-legion\": {\n    handlers: {\n      [PermanentEventType.CREATED]: (ev) => {\n        const { permanent, ctx } = ev;\n        const { engine } = ctx;\n        engine.drawCard(permanent.owner);\n      },\n    },\n  },\n  \"new-boarn\": {\n    handlers: {\n      [PermanentEventType.CREATED]: (ev) => {\n        const { permanent, ctx } = ev;\n        const { inspector, engine } = ctx;\n\n        // move to a random unoccupied slot\n        const slots = inspector.getUnoccupiedSlots(permanent.owner);\n        if (slots.length === 0) return;\n\n        const slot = slots[Math.floor(Math.random() * slots.length)];\n        engine.move(permanent, slot);\n      },\n    },\n  },\n  \"nice-cow\": {\n    onSpecial: (step, ctx) => {\n      const { engine, inspector } = ctx;\n      const { permanent } = step;\n      const attackTarget = extractOptPermanent(step, 0);\n\n      engine.attack(permanent, attackTarget);\n      inspector\n        .getPermanents({\n          owner: permanent.owner,\n          adjacentTo: permanent.slot,\n          type: CardType.CREATURE,\n        })\n        .forEach((adjacentPermanent) => {\n          buffPermanent(adjacentPermanent, { power: 1 }, permanent, ctx);\n        });\n    },\n  },\n  nightshade: {\n    handlers: {\n      [PermanentEventType.CREATED]: (ev) => {\n        ev.ctx.engine.addCounter(ev.permanent, {\n          type: CounterType.CANNOT_ATTACK,\n        });\n      },\n    },\n    onSpecial: (step, ctx) => {\n      const { engine, inspector } = ctx;\n      if (engine.discardRandomCard(step.permanent.owner)) {\n        const victim = extractOptPermanent(step, 0);\n        engine.damage(\n          step.permanent,\n          victim,\n          inspector.getPower(step.permanent)\n        );\n      } else {\n        engine.announce(\"Nightshade had no card to discard and failed.\");\n      }\n    },\n  },\n  o: {\n    handlers: {\n      [PermanentEventType.CREATED]: buffAdjacentHandler(\n        { health: 1 },\n        (permanent: Permanent, ctx: EngineContext) => {\n          const color = ctx.inspector.getCardColor(permanent);\n          return (\n            color !== null &&\n            [ColorSymbol.WHITE, ColorSymbol.WHITEBLACK].includes(color)\n          );\n        }\n      ),\n    },\n  },\n  \"oklahoma-tusks\": {\n    onRepeatable: (step, ctx) => {\n      const { engine } = ctx;\n      engine.addCounter(step.permanent, {\n        type: CounterType.POWER_ADJUSTMENT,\n        val: 1,\n        explanation: \"+1 power for the rest of the turn\",\n        expiry: PermanentEventType.END_TURN,\n      });\n    },\n    onSpecial: (step, ctx) => {\n      const { inspector, engine } = ctx;\n      const { permanent } = step;\n      const player = permanent.owner;\n      const opponent = inspector.getOpponentOf(player);\n      const targets = inspector\n        .getPermanentsOf(opponent)\n        .filter(\n          (oppPermanent) =>\n            inspector.getCardType(oppPermanent) == CardType.CREATURE &&\n            oppPermanent.slot.column === permanent.slot.column\n        )\n        .sort((permanent1, permanent2) => {\n          // Attack the target creatures in a consistent order.\n          const slot1 = permanent1.slot;\n          const slot2 = permanent2.slot;\n          const terrain1 = inspector.getTerrainOf(slot1);\n          const terrain2 = inspector.getTerrainOf(slot2);\n          if (inspector.isRowInFrontOf(slot1.row, slot2.row, opponent))\n            return -1;\n          if (inspector.isRowInFrontOf(slot2.row, slot1.row, opponent))\n            return 1;\n          if (terrain1 === player && terrain2 !== player) return -1;\n          if (terrain2 === player && terrain1 !== player) return 1;\n          if (slot1.column !== slot2.column) {\n            return slot1.column - slot2.column;\n          }\n          // We should never reach here, but don't throw since it's\n          // not so critical that we don't.\n          return 0;\n        });\n      for (const target of targets) {\n        engine.attack(permanent, target);\n      }\n    },\n  },\n  othello: {\n    onSpecial: (step, ctx) => {\n      // Special: Summon a copy of target other allied Creature on an empty friendly slot.\n      // Give the copy \"Attacks for free. End of turn: Destroy me\" and ready it.\n\n      const { inspector, engine } = ctx;\n\n      const target = extractOptPermanent(step, 0);\n      const targetName = inspector.getCardName(target);\n      const slot = extractOptSlot(step, 1);\n\n      const beforePermanents = inspector.getAllPermanents();\n      engine.spawn(targetName, slot, step.permanent.owner);\n\n      let clone: Permanent | null = null;\n\n      // SPECIAL CASE FOR NEW BOARN\n      if (targetName === \"new-boarn\") {\n        const afterPermanents = inspector.getAllPermanents();\n        const newPermanents = afterPermanents.filter(\n          (p) =>\n            !beforePermanents.map((p) => p.id).includes(p.id) && // id is new\n            inspector.getCardName(p) === \"new-boarn\" // name is new boarn\n        );\n        if (newPermanents.length > 0) clone = newPermanents[0];\n      } else {\n        clone = inspector.getPermanentAtIfExists(slot);\n      }\n\n      if (clone) {\n        engine.addCounter(clone, {\n          type: CounterType.ATTACKS_FOR_FREE,\n          explanation: \"Attacks for free\",\n        });\n        engine.addCounter(clone, {\n          type: CounterType.DESTROY_ON_END_OF_TURN,\n          explanation: \"On end of turn, Destroy this Creature\",\n        });\n        engine.ready(clone);\n      }\n\n      engine.announce(\"Othello copies \" + inspector.getCardDisplayName(target));\n    },\n  },\n  payne: {\n    adjustDamageReceived: (_permanent, damage, attacker, ctx) => {\n      const { inspector } = ctx;\n      if (attacker) {\n        const attackerColor = inspector.getCardColor(attacker);\n        if (\n          attackerColor !== null &&\n          [ColorSymbol.WHITE, ColorSymbol.BLACK].includes(attackerColor)\n        ) {\n          return damage + 1;\n        }\n      }\n      return damage;\n    },\n  },\n  \"pbee---j\": {\n    handlers: {\n      [PermanentEventType.AFTER_DAMAGED]: thornsHandler,\n    },\n  },\n  \"petroleum-jelly\": {\n    adjustDamageReceived: (permanent, damage, attacker, ctx) => {\n      const { inspector, engine } = ctx;\n      if (attacker && permanent.slot.column === attacker.slot.column) {\n        engine.announce(\n          `${inspector.getCardDisplayName(permanent)} takes 1 less damage!`\n        );\n        return Math.max(damage - 1, 0);\n      }\n      return damage;\n    },\n  },\n  \"quail-aboard-fiery-steeds\": {\n    onSpecial: (step, ctx) => {\n      const { permanent } = step;\n      const { engine, inspector } = ctx;\n      inspector\n        .getPermanents({\n          ownedByOpponentOf: permanent.owner,\n          notProtectedFrom: permanent,\n          custom: (p) => Math.abs(p.slot.column - permanent.slot.column) <= 1,\n        })\n        .forEach((target) => {\n          engine.attack(permanent, target);\n        });\n    },\n  },\n  re: {\n    handlers: {\n      [PermanentEventType.CREATED]: buffAdjacentHandler(\n        { power: 1 },\n        (permanent: Permanent, ctx: EngineContext) => {\n          const color = ctx.inspector.getCardColor(permanent);\n          return (\n            color !== null &&\n            [ColorSymbol.BLACK, ColorSymbol.WHITEBLACK].includes(color)\n          );\n        }\n      ),\n    },\n  },\n  \"realistic-rex\": {\n    onSpecial: (step, opts) => {\n      const { engine } = opts;\n      const target1 = extractOptPermanent(step, 0);\n      const target2 = extractOptPermanent(step, 1);\n\n      engine.attack(step.permanent, target1);\n      engine.attack(step.permanent, target2);\n    },\n  },\n  \"reckless-medisaur\": {\n    onSpecial: (step, ctx) => {\n      const { engine } = ctx;\n      const { permanent } = step;\n      const base = extractOptPermanent(step, 0);\n      const target = extractOptPermanent(step, 1);\n      engine.damage(permanent, base, 2);\n      engine.removeDamage(target, target.damage);\n    },\n  },\n  robot: {\n    onSpecial: onAbilityAttack,\n  },\n  \"roe-doe-dendron\": {\n    onSpecial: (step, ctx) => {\n      const { inspector, engine } = ctx;\n      const { permanent } = step;\n      const attackTarget = extractOptPermanent(step, 0);\n      const behindTargets = inspector.getBehindFriendlyPermanents(attackTarget);\n      engine.attack(permanent, attackTarget);\n\n      if (behindTargets.length === 0) return;\n      const target = behindTargets[0];\n\n      // only attack creatures\n      if (inspector.getCardType(target) !== CardType.CREATURE) return;\n\n      engine.damage(permanent, behindTargets[0], 1);\n    },\n  },\n  \"rude-cow\": {\n    onSpecial: (step, ctx) => {\n      const { engine, inspector } = ctx;\n      const { permanent } = step;\n      const attackTarget = extractOptPermanent(step, 0);\n\n      engine.attack(permanent, attackTarget);\n      inspector\n        .getPermanents({\n          owner: permanent.owner,\n          adjacentTo: permanent.slot,\n          type: CardType.CREATURE,\n        })\n        .forEach((adjacentPermanent) => {\n          buffPermanent(adjacentPermanent, { health: 1 }, permanent, ctx);\n        });\n    },\n  },\n  \"sapphire-rose\": {\n    onRepeatable(step, ctx) {\n      const { permanent } = step;\n      const { engine } = ctx;\n      engine.drawCard(permanent.owner);\n      engine.damageUnattributed(permanent, 2);\n    },\n  },\n  \"slime--slime\": {\n    handlers: {\n      [PermanentEventType.CREATED]: (ev) => {\n        // You may put any number of copies of this card into your deck.\n        // On Summon: draw a card.\n        // After Attacking: Create 1 P.\n        const { permanent, ctx } = ev;\n        const { engine } = ctx;\n        engine.drawCard(permanent.owner);\n      },\n      [PermanentEventType.AFTER_DEAL_DAMAGE]: (ev) => {\n        const { permanent, ctx } = ev;\n        const { engine } = ctx;\n        engine.addGems(permanent.owner, [ColorSymbol.RED]);\n      },\n    },\n  },\n  \"spelling-bee\": {\n    handlers: {\n      // In two turns, deals 2 damage to all Creatures in touching slots.\n      [PermanentEventType.CREATED]: (ev) => {\n        const { permanent, ctx } = ev;\n        const { engine } = ctx;\n        engine.addCounter(permanent, {\n          type: CounterType.DOOM,\n          val: 2 - 1, // 2 turns but the decrementer is slower than our checker\n          explanation: \"will explode\", // TODO: nice-to-have dynamic explanation\n        });\n      },\n      [PermanentEventType.END_TURN]: (ev) => {\n        // note this triggers before the counter itself decrements\n        // check for doom counter\n        const { permanent, ctx } = ev;\n        const { inspector, engine } = ctx;\n        if (\n          inspector.doesPermanentHaveCounterType(permanent, CounterType.DOOM)\n        ) {\n          if (inspector.getCounterValSum(permanent, CounterType.DOOM) === 0) {\n            // deal 2 damage to touching Creatures\n            const touchingCreatures = inspector.getPermanents({\n              touching: permanent.slot,\n              type: CardType.CREATURE,\n            });\n\n            touchingCreatures.forEach((creature) => {\n              engine.damage(permanent, creature, 2);\n            });\n\n            // destroy counter\n            engine.removeCounterType(permanent, CounterType.DOOM);\n            engine.announce(\n              `${inspector.getCardDisplayName(permanent)} explodes`\n            );\n          }\n        }\n      },\n    },\n  },\n  \"swarm-tactics\": {\n    handlers: {\n      [PermanentEventType.AFTER_DAMAGED]: thornsHandler,\n    },\n    onSpecial: (step, ctx) => {\n      const { engine } = ctx;\n      engine.addCounter(step.permanent, {\n        type: CounterType.PROTECTS_ADJACENT_COLUMNS,\n        explanation: \"protecting adjacent columns\",\n        expiry: PermanentEventType.START_TURN,\n      });\n    },\n  },\n  \"switch-boar-d\": {\n    onSpecial: (step, ctx) => {\n      const { engine } = ctx;\n      const { permanent } = step;\n      const attackTarget = extractOptPermanent(step, 0);\n      const swapTarget = extractOptPermanent(step, 1);\n\n      engine.attack(permanent, attackTarget);\n      engine.swap(permanent, swapTarget);\n    },\n  },\n  thesaurus: {\n    handlers: {\n      [PermanentEventType.AFTER_DESTROY_UNIT]: (ev) => {\n        const { permanent, defender, ctx } = ev;\n        const { inspector, engine } = ctx;\n        if (inspector.getCardType(defender) === CardType.CREATURE) {\n          engine.addGems(permanent.owner, [ColorSymbol.RAINBOW]);\n        }\n      },\n    },\n  },\n  \"touch-grass\": {\n    onSpecial: onAbilityAttack,\n  },\n  \"tusk-enhancement\": {\n    handlers: {\n      [PermanentEventType.CREATED]: (ev: CreatedPermanentEvent) => {\n        const { permanent, ctx } = ev;\n        ctx.inspector\n          .getPermanents({\n            column: permanent.slot.column,\n            type: CardType.CREATURE,\n            except: permanent,\n          })\n          .forEach((target) => {\n            buffPermanent(target, { power: 1 }, permanent, ctx);\n          });\n      },\n    },\n  },\n  \"two-bees\": {\n    adjustDamageReceived: (_, damage) => {\n      return Math.floor(damage / 2);\n    },\n  },\n  \"ultra-violet\": {\n    handlers: {\n      [PermanentEventType.AFTER_DEAL_DAMAGE]: (ev) => {\n        const { defender, ctx } = ev;\n        const { engine } = ctx;\n        engine.addCounter(defender, {\n          type: CounterType.FROZEN,\n          explanation: \"will not ready on its next turn\",\n          expiry: PermanentEventType.START_TURN,\n        });\n      },\n    },\n  },\n  \"vanilla-calf\": {\n    onRepeatable: (step, ctx) => {\n      const { engine } = ctx;\n      if (step.permanent.damage > 0) {\n        engine.removeDamage(step.permanent, 1);\n      }\n    },\n  },\n};\n/* eslint-disable sort-keys/sort-keys-fix */\n\n// --- Programmatic addition of cards for puzzles. ---\n\n// Puzzle 51\nfor (const cardName of PUZZLE_51_CARDS) {\n  COMMON_CARD_EFFECTS[cardName.toLocaleLowerCase().replace(/ /g, \"-\")] = {\n    onRepeatable: (step, ctx) => {\n      const { engine } = ctx;\n      engine.despawn(step.permanent);\n    },\n  };\n}\n\n/** Merges auxEffectsDB into effectsDB. */\nconst mergeEffectsDB = (\n  effectsDB: EffectsDB,\n  auxEffectsDB?: {\n    [cardName: string]: CardEffectsShared | CardEffects;\n  }\n): void => {\n  if (auxEffectsDB === undefined) return;\n  for (const [cardName, auxEffects] of Object.entries(auxEffectsDB)) {\n    effectsDB[cardName] = {\n      ...(effectsDB[cardName] ?? {}),\n      ...auxEffects,\n    };\n  }\n};\n\nexport const getEffectsDB = (\n  allSpecs: ReadonlyArray<GameSpec>,\n  cardsDB: CardsDB\n): EffectsDB => {\n  const effectsDB: EffectsDB = {};\n  for (const spec of allSpecs) {\n    mergeEffectsDB(effectsDB, spec.cardEffects);\n    mergeEffectsDB(effectsDB, spec.makeCardEffectsShared?.(cardsDB));\n    mergeEffectsDB(effectsDB, spec.cardEffectsShared);\n  }\n  return effectsDB;\n};\n\nexport type CountersDB = { [type in CounterType]?: CounterData };\n\n/**\n * Construct the counters DB from the game spec and effectsDB.\n * The effectsDB should already contain the effects defined in\n * the game spec.\n */\nexport const getCountersDB = (\n  allSpecs: ReadonlyArray<GameSpec>,\n  effectsDB: EffectsDB\n): CountersDB => {\n  const countersDB: CountersDB = {};\n  for (const spec of allSpecs) {\n    if (spec.counterData !== undefined) {\n      Object.assign(countersDB, spec.counterData);\n    }\n  }\n  for (const [, effects] of Object.entries(effectsDB)) {\n    if (effects.counterData) {\n      for (const [counterType, counterData] of Object.entries(\n        effects.counterData\n      )) {\n        countersDB[counterType as CounterType] = counterData;\n      }\n    }\n  }\n  return countersDB;\n};\n","import { CounterType } from \"engine/types/counters\";\nimport { Check } from \"engine/types/action-validation\";\nimport { SharedGameSpec } from \"engine/types/shared-game-specs\";\nimport { COMMON_CARD_EFFECTS_SHARED } from \"engine/cards/card-effects-shared\";\n\n/**\n * Common \"game spec\" used in all puzzles. Note that only some subset\n * of the game spec hooks are supported for the common spec.\n */\nexport const SharedCommonSpec: SharedGameSpec = {\n  cardEffectsShared: COMMON_CARD_EFFECTS_SHARED,\n  numRows: 6,\n  numColumns: 5,\n  extraProtectedChecks: (defender, attacker, ctx) => {\n    const { inspector } = ctx;\n\n    // PROTECTS_ADJACENT_COLUMNS counter.\n    // This applies to both creatures and structures.\n    if (\n      inspector.getPermanents({\n        owner: defender.owner,\n        columnAdjacentTo: defender.slot.column,\n        hasCounter: CounterType.PROTECTS_ADJACENT_COLUMNS,\n      }).length > 0\n    )\n      return true;\n\n    return false;\n  },\n  adjustMoveChecks: (failedChecks, permanent, slot, ctx) => {\n    const { inspector } = ctx;\n\n    // ALLOWS_MOVE_TO_ADJACENT counter takes priority over adjacency\n    // or allied territory check\n    const isSlotEnabledByAMTA =\n      inspector.getPermanents({\n        owner: permanent.owner,\n        adjacentTo: slot,\n        hasCounter: CounterType.ALLOWS_MOVE_TO_ADJACENT,\n      }).length > 0;\n\n    if (isSlotEnabledByAMTA) {\n      // AMTA allows moving even to non-adjacent slots.\n      failedChecks.delete(Check.ADJACENT);\n    }\n  },\n};\n\nexport const PUZ_NAME_COMMON = \"common\";\n","import { SharedGameSpec } from \"engine/types/shared-game-specs\";\n\nexport const SharedRobotSpec: SharedGameSpec = {\n  hasAI: true,\n};\n","import { Player } from \"engine/types/game-state\";\nimport { Check } from \"engine/types/action-validation\";\nimport { SharedGameSpec } from \"engine/types/shared-game-specs\";\n\nexport const SharedTutorial1Spec: SharedGameSpec = {\n  allowCheckpoints: true,\n  hasAI: true,\n  aiDisableGemAccounting: true,\n  numColumns: 1,\n  numRows: 2,\n  deckOverrides: {\n    [Player.P1]: [],\n    [Player.P2]: [],\n  },\n  // no bases\n  basesOverrides: {\n    [Player.P1]: [],\n    [Player.P2]: [],\n  },\n  adjustEndTurnChecks: (failedChecks, player, ctx) => {\n    const { inspector } = ctx;\n    if (player !== Player.P1) return;\n    const { keyframe } = inspector.gameState;\n    if (keyframe === undefined || keyframe.id !== \"tutorial1-end-turn-1\")\n      failedChecks.add(Check.HIDDEN);\n  },\n};\n","import { Player } from \"engine/types/game-state\";\nimport { Check } from \"engine/types/action-validation\";\nimport { SharedGameSpec } from \"engine/types/shared-game-specs\";\n\nexport const SharedTutorial2Spec: SharedGameSpec = {\n  allowCheckpoints: true,\n  hasAI: true,\n  aiDisableGemAccounting: true,\n  numColumns: 1,\n  numRows: 6,\n  deckOverrides: {\n    [Player.P1]: [],\n    [Player.P2]: [],\n  },\n  basesOverrides: {\n    [Player.P1]: [\"camp\"],\n    [Player.P2]: [\"camp\"],\n  },\n  adjustEndTurnChecks: (failedChecks, player, ctx) => {\n    const { inspector } = ctx;\n    if (player !== Player.P1) return;\n    const { keyframe } = inspector.gameState;\n    if (\n      inspector.getTurnNumber() <= 3\n        ? keyframe === undefined ||\n          ![\"tutorial2-end-turn-1\", \"tutorial2-end-turn-2\"].includes(\n            keyframe.id\n          )\n        : keyframe !== undefined &&\n          ![\"tutorial2-free-play\"].includes(keyframe.id)\n    )\n      failedChecks.add(Check.HIDDEN);\n  },\n};\n","import { Player } from \"engine/types/game-state\";\nimport { SharedGameSpec } from \"engine/types/shared-game-specs\";\n\nexport const SharedTutorial3Spec: SharedGameSpec = {\n  allowCheckpoints: true,\n  aiDisableGemAccounting: true,\n  hasAI: true,\n  deckOverrides: {\n    [Player.P1]: [],\n    [Player.P2]: [],\n  },\n  basesOverrides: {\n    [Player.P1]: [\"camp\"],\n    [Player.P2]: [\"camp\", \"camp\"],\n  },\n};\n","import { Player } from \"engine/types/game-state\";\nimport { SharedGameSpec } from \"engine/types/shared-game-specs\";\n\nexport const SharedTutorial4Spec: SharedGameSpec = {\n  allowCheckpoints: true,\n  aiDisableGemAccounting: true,\n  hasAI: true,\n  deckOverrides: {\n    [Player.P1]: [\"beeowulf\", \"chocolate-calf\"],\n    [Player.P2]: [],\n  },\n  basesOverrides: {\n    [Player.P1]: [\"camp\", \"camp\", \"camp\"],\n    [Player.P2]: [\"camp\"],\n  },\n};\n","import { Player } from \"engine/types/game-state\";\nimport { SharedGameSpec } from \"engine/types/shared-game-specs\";\n\nexport const SharedTutorial5Spec: SharedGameSpec = {\n  allowCheckpoints: true,\n  aiDisableGemAccounting: true,\n  hasAI: true,\n  deckOverrides: {\n    [Player.P1]: [\n      \"beeowulf\",\n      \"beeowulf\",\n      \"pbee---j\",\n      \"pbee---j\",\n      \"two-bees\",\n      \"two-bees\",\n      \"chocolate-calf\",\n      \"chocolate-calf\",\n      \"new-boarn\",\n      \"new-boarn\",\n      \"hog\",\n      \"hog\",\n      \"hamlet\",\n      \"hamlet\",\n      \"yoshisaur-munchakoopas\",\n      \"yoshisaur-munchakoopas\",\n    ],\n    [Player.P2]: [],\n  },\n};\n","import { Player } from \"engine/types/game-state\";\nimport { Check } from \"engine/types/action-validation\";\nimport { SharedGameSpec } from \"engine/types/shared-game-specs\";\n\nexport const SharedTutorial6Spec: SharedGameSpec = {\n  allowCheckpoints: true,\n  aiDisableGemAccounting: true,\n  hasAI: true,\n  allowNoDeck: true,\n  basesOverrides: {\n    [Player.P2]: [\"camp\"],\n  },\n  adjustDeckChecks: (failedChecks) => {\n    failedChecks.delete(Check.DECK_TOO_SMALL);\n  },\n};\n","import { Player } from \"engine/types/game-state\";\nimport { SharedGameSpec } from \"engine/types/shared-game-specs\";\n\nexport const SharedPuzzle4Spec: SharedGameSpec = {\n  allowCheckpoints: true,\n  hasAI: true,\n  aiDisableGemAccounting: true,\n  aiDisableTurnCheck: true,\n  basesOverrides: {\n    // place bases in beforeNewGame\n    [Player.P2]: [],\n  },\n};\n","import { Player } from \"engine/types/game-state\";\nimport { SharedGameSpec } from \"engine/types/shared-game-specs\";\n\nexport const SharedPuzzle8Spec: SharedGameSpec = {\n  hasAI: true,\n  aiDisableGemAccounting: true,\n  basesOverrides: {\n    [Player.P2]: [\"mint\", \"mint\", \"mint\", \"mint\", \"mint\"],\n  },\n  cardEffectsShared: {\n    mint: {\n      isStructure: true,\n      isBase: true,\n    },\n    \"mint--overdrive-\": {\n      isStructure: true,\n      isBase: true,\n    },\n  },\n};\n","import { Player, Permanent } from \"engine/types/game-state\";\nimport { Check } from \"engine/types/action-validation\";\nimport {\n  InspectorContext,\n  SharedGameSpec,\n} from \"engine/types/shared-game-specs\";\n\nexport const SharedPuzzle9Spec: SharedGameSpec = {\n  allowCheckpoints: true,\n  hasAI: true,\n  aiDisableGemAccounting: true,\n  basesOverrides: {\n    [Player.P1]: [\"keep\"],\n    [Player.P2]: [\"keep\"],\n  },\n\n  disableCardEffectsAdjustAttackChecks: true,\n  adjustAttackChecks: (failedChecks, attacker, defender, ctx) => {\n    const { inspector } = ctx;\n    const attackerFirstLetter = inspector\n      .getCardDisplayName(attacker)\n      .charAt(0)\n      .toUpperCase();\n\n    if (\"KQRBNP\".includes(attackerFirstLetter)) {\n      failedChecks.delete(Check.PROTECTED);\n      if (!specialThreatened(attacker, defender, ctx))\n        failedChecks.add(Check.GENERIC);\n      return;\n    }\n\n    // Restore normal card effects check for everyone else\n    const effects = inspector.getSharedEffects(attacker);\n    const effectsAdjust = effects.adjustAttackChecks;\n    if (effectsAdjust)\n      effectsAdjust(failedChecks, attacker, defender, inspector.makeContext());\n  },\n};\n\nexport const specialThreatened = (\n  attacker: Permanent,\n  defender: Permanent,\n  ctx: InspectorContext\n): boolean => {\n  const inspector = ctx.inspector;\n  const attackerFirstLetter = inspector\n    .getCardDisplayName(attacker)\n    .charAt(0)\n    .toUpperCase();\n  if (attackerFirstLetter === \"K\") {\n    return threatenedByKing(attacker, defender, ctx);\n  }\n  if (attackerFirstLetter === \"Q\") {\n    return (\n      threatenedByRook(attacker, defender, ctx) ||\n      threatenedByBishop(attacker, defender, ctx)\n    );\n  }\n  if (attackerFirstLetter === \"R\") {\n    return threatenedByRook(attacker, defender, ctx);\n  }\n  if (attackerFirstLetter === \"B\") {\n    return threatenedByBishop(attacker, defender, ctx);\n  }\n  if (attackerFirstLetter === \"N\") {\n    return threatenedByKnight(attacker, defender, ctx);\n  }\n  if (attackerFirstLetter === \"P\") {\n    return threatenedByPawn(attacker, defender, ctx);\n  }\n  return false;\n};\n\nconst threatenedByKing = (\n  attacker: Permanent,\n  defender: Permanent,\n  ctx: InspectorContext\n): boolean => {\n  const rowDiff = attacker.slot.row - defender.slot.row;\n  const colDiff = attacker.slot.column - defender.slot.column;\n  return Math.max(Math.abs(rowDiff), Math.abs(colDiff)) == 1;\n};\n\nconst threatenedByRook = (\n  attacker: Permanent,\n  defender: Permanent,\n  ctx: InspectorContext\n): boolean => {\n  const rowDiff = attacker.slot.row - defender.slot.row;\n  const colDiff = attacker.slot.column - defender.slot.column;\n  if (rowDiff * colDiff != 0) {\n    return false;\n  }\n  if (Math.abs(rowDiff) + Math.abs(colDiff) == 1) {\n    return true;\n  }\n  if (Math.abs(rowDiff) + Math.abs(colDiff) == 0) {\n    return false;\n  }\n  // Otherwise, there is at least one space between pieces, which we need to\n  // check for obstructions.\n  for (let i = 1; i < Math.abs(rowDiff + colDiff); i++) {\n    const slot = {\n      row: defender.slot.row + (rowDiff * i) / Math.abs(rowDiff + colDiff),\n      column:\n        defender.slot.column + (colDiff * i) / Math.abs(rowDiff + colDiff),\n    };\n    if (ctx.inspector.isSlotOccupied(slot)) {\n      return false;\n    }\n  }\n  return true;\n};\n\nconst threatenedByBishop = (\n  attacker: Permanent,\n  defender: Permanent,\n  ctx: InspectorContext\n): boolean => {\n  const rowDiff = attacker.slot.row - defender.slot.row;\n  const colDiff = attacker.slot.column - defender.slot.column;\n  if (Math.abs(rowDiff) != Math.abs(colDiff)) {\n    return false;\n  }\n  if (Math.abs(rowDiff) == 0) {\n    return false;\n  }\n  if (Math.abs(rowDiff) == 1) {\n    return true;\n  }\n  // Otherwise, there is at least one space directly between the pieces,\n  // which we need to check for obstructions.\n  for (let i = 1; i < Math.abs(rowDiff); i++) {\n    if (\n      ctx.inspector.getPermanentsAt({\n        row: defender.slot.row + (rowDiff * i) / Math.abs(rowDiff),\n        column: defender.slot.column + (colDiff * i) / Math.abs(colDiff),\n      }).length > 0\n    ) {\n      return false;\n    }\n  }\n  return true;\n};\n\nconst threatenedByKnight = (\n  attacker: Permanent,\n  defender: Permanent,\n  ctx: InspectorContext\n): boolean => {\n  const rowDiff = attacker.slot.row - defender.slot.row;\n  const colDiff = attacker.slot.column - defender.slot.column;\n  return Math.abs(rowDiff) * Math.abs(colDiff) == 2; // ban on fractional positioning pls\n};\n\nconst threatenedByPawn = (\n  attacker: Permanent,\n  defender: Permanent,\n  ctx: InspectorContext\n): boolean => {\n  const rowDiff = attacker.slot.row - defender.slot.row;\n  const colDiff = attacker.slot.column - defender.slot.column;\n  return (\n    ctx.inspector.isRowInFrontOf(\n      defender.slot.row,\n      attacker.slot.row,\n      attacker.owner\n    ) &&\n    Math.abs(rowDiff) === 1 &&\n    Math.abs(colDiff) === 1\n  );\n};\n","import { CounterType } from \"engine/types/counters\";\nimport { EngineContext } from \"engine/types/game-specs\";\nimport { Permanent, Player } from \"engine/types/game-state\";\n\nexport const PUSHER_NAME = \"worker-bot\";\nexport const ZAP_PUSHER_NAME = \"zap-worker-bot\";\nexport const WALL_NAME = \"pothole\";\nexport const BOX_NAME = \"box\";\nexport const EXPLOSIVES_NAME = \"explosives\";\nexport const FIGHTER_ALLY_NAME = \"friendly-battle-bot\";\nexport const FIGHTER_ENEMY_NAME = \"enemy-battle-bot\";\nexport const ARMORED_FIGHTER_ENEMY_NAME = \"armored-enemy-battle-bot\";\nexport const ARMORED_CAMP_NAME = \"armored-camp\";\nconst BEAVER_NAME = \"eager-beever\";\n\nexport const ALL_PUSHERS = new Set([PUSHER_NAME, ZAP_PUSHER_NAME]);\nexport const ALL_AUTO_BATTLERS = new Set([\n  FIGHTER_ALLY_NAME,\n  FIGHTER_ENEMY_NAME,\n  ARMORED_FIGHTER_ENEMY_NAME,\n]);\n\nfunction nameForLetter(letter: string) {\n  switch (letter) {\n    case \"c\":\n    case \"C\":\n      return \"camp\";\n    case \"D\":\n      return ARMORED_CAMP_NAME;\n    case \"e\":\n    case \"E\":\n      return EXPLOSIVES_NAME;\n    case \"w\":\n      return PUSHER_NAME;\n    case \"z\":\n      return ZAP_PUSHER_NAME;\n    case \"X\":\n      return WALL_NAME;\n    case \"b\":\n    case \"B\":\n      return BOX_NAME;\n    case \"F\":\n      return FIGHTER_ENEMY_NAME;\n    case \"f\":\n      return FIGHTER_ALLY_NAME;\n    case \"A\":\n      return ARMORED_FIGHTER_ENEMY_NAME;\n    case \"v\":\n      return BEAVER_NAME;\n    default:\n      return \"\";\n  }\n}\n\nfunction playerForLetter(letter: string) {\n  switch (letter) {\n    case \"w\":\n    case \"z\":\n    case \"c\":\n    case \"f\":\n    case \"e\":\n    case \"b\":\n    case \"v\":\n      return Player.P1;\n    default:\n      return Player.P2;\n  }\n}\n\nfunction setPower(permanent: Permanent, power: number, ctx: EngineContext) {\n  const delta = power - ctx.inspector.getBasePower(permanent);\n  if (delta !== 0) {\n    ctx.engine.adjustPermanentStats(permanent, delta, 0);\n  }\n}\n\nfunction setHealth(permanent: Permanent, health: number, ctx: EngineContext) {\n  const delta = health - ctx.inspector.getBaseHealth(permanent);\n  if (delta !== 0) {\n    ctx.engine.adjustPermanentStats(permanent, 0, delta);\n  }\n}\n\nfunction setStats(\n  permanent: Permanent,\n  power: number,\n  health: number,\n  ctx: EngineContext\n) {\n  setPower(permanent, power, ctx);\n  setHealth(permanent, health, ctx);\n}\n\nconst LEVEL_1_LAYOUT = `\n..C..\n..F..\n.....\n.....\n.fw..\n..c..\n`;\n\nconst LEVEL_2_LAYOUT = `\n..C..\n...F.\n...F.\n..w..\nfffff\n..c..\n`;\n\nfunction LEVEL_2_EXTRA_INIT(ctx: EngineContext) {\n  const perm = ctx.inspector.getPermanentAtIfExists({ row: 4, column: 2 });\n  if (!perm) {\n    return;\n  }\n  // skipping adjustPermanentStats b/c custom explanation\n  ctx.engine.addCounter(perm, {\n    type: CounterType.POWER_ADJUSTMENT,\n    val: -1,\n    explanation: \"This bot seems defective for some reason.\",\n  });\n}\n\nconst LEVEL_3_LAYOUT = `\n.BC..\n.....\nBBBBB\n..wB.\n...f.\n..c..\n`;\n\nconst LEVEL_4_LAYOUT = `\n..C..\nFFFFF\n.FFF.\n.....\n.fw..\n..c..\n`;\n\nfunction LEVEL_4_EXTRA_INIT(ctx: EngineContext) {\n  const { inspector } = ctx;\n  const backFighter = inspector.getPermanents({ row: 1 });\n  for (const fighter of backFighter) {\n    setHealth(fighter, 3, ctx);\n  }\n  const myFighter = inspector.getPermanentsAt({ row: 4, column: 1 })[0];\n  setHealth(myFighter, 2, ctx);\n}\n\nconst LEVEL_5_LAYOUT = `\n....C\n....F\nXX..F\n..X..\nw?X.f\n....c\n`;\n\nfunction LEVEL_5_EXTRA_INIT(ctx: EngineContext) {\n  const { engine, inspector } = ctx;\n  engine.spawn(\"chicken\", { row: 4, column: 1 }, Player.P1);\n  const enemyBots = inspector.getPermanents({\n    owner: Player.P2,\n    name: FIGHTER_ENEMY_NAME,\n  });\n  for (const bot of enemyBots) {\n    setHealth(bot, 2, ctx);\n  }\n  const allCamps = inspector.getPermanents({ name: \"camp\" });\n  for (const camp of allCamps) {\n    setHealth(camp, 1, ctx);\n  }\n}\n\nconst LEVEL_12_LAYOUT = LEVEL_5_LAYOUT;\n\nfunction LEVEL_12_EXTRA_INIT(ctx: EngineContext) {\n  const { engine, inspector } = ctx;\n  engine.spawn(\"chicken\", { row: 4, column: 1 }, Player.P1);\n  const enemyBots = inspector.getPermanents({\n    owner: Player.P2,\n    name: FIGHTER_ENEMY_NAME,\n  });\n  for (const bot of enemyBots) {\n    setStats(bot, 100, 100, ctx);\n  }\n  const allCamps = inspector.getPermanents({ name: \"camp\" });\n  for (const camp of allCamps) {\n    setHealth(camp, 1, ctx);\n  }\n}\n\nconst LEVEL_6_LAYOUT = `\nFFCFF\nFFFFF\n.FFF.\n.FFF.\n.f...\nz.c..\n`;\n\nconst LEVEL_7_LAYOUT = `\nFFFFC\nFFFFF\nFFFFF\n.....\nffzfX\nffffc\n`;\n\nconst LEVEL_8_LAYOUT = `\n..C..\nXXXXX\nFFXFF\n.???.\n.w...\neecee\n`;\n\nfunction LEVEL_8_EXTRA_INIT(ctx: EngineContext) {\n  const { inspector, engine } = ctx;\n  const enemyBase = inspector.getPermanentAtIfExists({ row: 0, column: 2 });\n  if (enemyBase) {\n    setHealth(enemyBase, 9, ctx);\n  }\n  const bot1 = inspector.getPermanentAtIfExists({ row: 2, column: 0 });\n  const bot2 = inspector.getPermanentAtIfExists({ row: 2, column: 1 });\n  const bot3 = inspector.getPermanentAtIfExists({ row: 2, column: 3 });\n  const bot4 = inspector.getPermanentAtIfExists({ row: 2, column: 4 });\n  if (bot1) {\n    setStats(bot1, 4, 5, ctx);\n  }\n  if (bot2) {\n    setStats(bot2, 3, 3, ctx);\n  }\n  if (bot3) {\n    setStats(bot3, 8, 1, ctx);\n  }\n  if (bot4) {\n    setStats(bot4, 2, 3, ctx);\n  }\n\n  const boarName = \"boarry-farmer\";\n  engine.spawn(boarName, { row: 3, column: 1 }, Player.P1);\n  engine.spawn(boarName, { row: 3, column: 2 }, Player.P1);\n  engine.spawn(boarName, { row: 3, column: 3 }, Player.P1);\n\n  const boar1 = inspector.getPermanentAtIfExists({ row: 3, column: 1 });\n  const boar2 = inspector.getPermanentAtIfExists({ row: 3, column: 2 });\n  const boar3 = inspector.getPermanentAtIfExists({ row: 3, column: 3 });\n  if (boar1) {\n    setStats(boar1, 3, 4, ctx);\n  }\n  if (boar2) {\n    setStats(boar2, 2, 5, ctx);\n  }\n  if (boar3) {\n    setStats(boar3, 1, 5, ctx);\n  }\n\n  const myCamp = inspector.getPermanentAtIfExists({ row: 5, column: 2 });\n  if (myCamp) {\n    setHealth(myCamp, 1, ctx);\n  }\n}\n\nconst LEVEL_10_LAYOUT = `\nw...C\n.E.E.\n..E..\n.E.E.\n..E..\nf...c\n`;\n\nfunction LEVEL_10_EXTRA_INIT(ctx: EngineContext) {\n  const { inspector } = ctx;\n  const bomb1 = inspector.getPermanentAtIfExists({ row: 1, column: 1 });\n  const bomb2 = inspector.getPermanentAtIfExists({ row: 2, column: 2 });\n  const bomb3 = inspector.getPermanentAtIfExists({ row: 1, column: 3 });\n  const bomb4 = inspector.getPermanentAtIfExists({ row: 3, column: 1 });\n  const bomb5 = inspector.getPermanentAtIfExists({ row: 4, column: 2 });\n  const bomb6 = inspector.getPermanentAtIfExists({ row: 3, column: 3 });\n\n  if (bomb1) {\n    setHealth(bomb1, 1, ctx);\n  }\n  if (bomb2) {\n    setHealth(bomb2, 2, ctx);\n  }\n  if (bomb3) {\n    setHealth(bomb3, 3, ctx);\n  }\n  if (bomb4) {\n    setHealth(bomb4, 4, ctx);\n  }\n  if (bomb5) {\n    setHealth(bomb5, 5, ctx);\n  }\n  if (bomb6) {\n    setHealth(bomb6, 6, ctx);\n  }\n}\n\nconst LEVEL_11_LAYOUT = `\nC...C\nFf.fF\n..f..\n.f.f.\n..f..\nc.w.c\n`;\n\nfunction LEVEL_11_EXTRA_INIT(ctx: EngineContext) {\n  const { inspector } = ctx;\n  const enemy1 = inspector.getPermanentAtIfExists({ row: 1, column: 0 });\n  const enemy2 = inspector.getPermanentAtIfExists({ row: 1, column: 4 });\n  const ally1 = inspector.getPermanentAtIfExists({ row: 1, column: 1 });\n  const ally2 = inspector.getPermanentAtIfExists({ row: 2, column: 2 });\n  const ally3 = inspector.getPermanentAtIfExists({ row: 1, column: 3 });\n  const ally4 = inspector.getPermanentAtIfExists({ row: 3, column: 1 });\n  const ally5 = inspector.getPermanentAtIfExists({ row: 4, column: 2 });\n  const ally6 = inspector.getPermanentAtIfExists({ row: 3, column: 3 });\n\n  if (enemy1) {\n    setHealth(enemy1, 11, ctx);\n  }\n  if (enemy2) {\n    setHealth(enemy2, 53, ctx);\n  }\n  if (ally1) {\n    setPower(ally1, 1, ctx);\n  }\n  if (ally2) {\n    setPower(ally2, 2, ctx);\n  }\n  if (ally3) {\n    setPower(ally3, 3, ctx);\n  }\n  if (ally4) {\n    setPower(ally4, 4, ctx);\n  }\n  if (ally5) {\n    setPower(ally5, 5, ctx);\n  }\n  if (ally6) {\n    setPower(ally6, 6, ctx);\n  }\n}\n\nconst LEVEL_9_LAYOUT = `\nD...D\nA...A\n.....\n.?w?.\n..b..\neeeec\n`;\n\nfunction LEVEL_9_EXTRA_INIT(ctx: EngineContext) {\n  const { inspector, engine } = ctx;\n  engine.spawn(\"switch-boar-d\", { row: 3, column: 1 }, Player.P1);\n  engine.spawn(\"switch-boar-d\", { row: 3, column: 3 }, Player.P1);\n\n  const enemyCamp1 = inspector.getPermanentAtIfExists({ row: 0, column: 0 });\n  const enemyCamp2 = inspector.getPermanentAtIfExists({ row: 0, column: 4 });\n  const myCamp = inspector.getPermanentAtIfExists({ row: 5, column: 4 });\n  const bomb1 = inspector.getPermanentAtIfExists({ row: 5, column: 0 });\n  const bomb2 = inspector.getPermanentAtIfExists({ row: 5, column: 1 });\n  const bomb3 = inspector.getPermanentAtIfExists({ row: 5, column: 2 });\n  const bomb4 = inspector.getPermanentAtIfExists({ row: 5, column: 3 });\n\n  if (enemyCamp1) {\n    setHealth(enemyCamp1, 1, ctx);\n  }\n  if (enemyCamp2) {\n    setHealth(enemyCamp2, 1, ctx);\n  }\n  if (myCamp) {\n    setHealth(myCamp, 2, ctx);\n    // Extra gem for this battle.\n    engine.mergeValueCounter(myCamp, CounterType.BASE_GEMS, 1);\n  }\n  if (bomb1) {\n    setHealth(bomb1, 2, ctx);\n  }\n  if (bomb2) {\n    setHealth(bomb2, 2, ctx);\n  }\n  if (bomb3) {\n    setHealth(bomb3, 2, ctx);\n  }\n  if (bomb4) {\n    setHealth(bomb4, 2, ctx);\n  }\n}\n\nconst LEVEL_13_LAYOUT = `\n.XF.C\n..F.X\n..z..\n.v.e.\nX.X.X\nXfcXX\n`;\n\nfunction LEVEL_13_EXTRA_INIT(ctx: EngineContext) {\n  const { inspector, engine } = ctx;\n\n  const enemyFighter1 = inspector.getPermanentAtIfExists({ row: 0, column: 2 });\n  const enemyFighter2 = inspector.getPermanentAtIfExists({ row: 1, column: 2 });\n\n  const myBomb = inspector.getPermanentAtIfExists({ row: 3, column: 3 });\n  const zapBot = inspector.getPermanentAtIfExists({ row: 2, column: 2 });\n  const myCamp = inspector.getPermanentAtIfExists({ row: 5, column: 2 });\n\n  if (enemyFighter1) {\n    setHealth(enemyFighter1, 3, ctx);\n  }\n  if (enemyFighter2) {\n    setHealth(enemyFighter2, 3, ctx);\n  }\n  if (myBomb) {\n    setHealth(myBomb, 1, ctx);\n  }\n  if (zapBot) {\n    setHealth(zapBot, 2, ctx);\n  }\n  if (myCamp) {\n    setHealth(myCamp, 1, ctx);\n  }\n}\n\nconst ALL_LAYOUT_DATA = [\n  [LEVEL_1_LAYOUT],\n  [LEVEL_2_LAYOUT, LEVEL_2_EXTRA_INIT],\n  [LEVEL_3_LAYOUT],\n  [LEVEL_4_LAYOUT, LEVEL_4_EXTRA_INIT],\n  [LEVEL_5_LAYOUT, LEVEL_5_EXTRA_INIT],\n  [LEVEL_6_LAYOUT],\n  [LEVEL_7_LAYOUT],\n  [LEVEL_8_LAYOUT, LEVEL_8_EXTRA_INIT],\n  [LEVEL_9_LAYOUT, LEVEL_9_EXTRA_INIT],\n  [LEVEL_10_LAYOUT, LEVEL_10_EXTRA_INIT],\n  [LEVEL_11_LAYOUT, LEVEL_11_EXTRA_INIT],\n  [LEVEL_12_LAYOUT, LEVEL_12_EXTRA_INIT],\n  [LEVEL_13_LAYOUT, LEVEL_13_EXTRA_INIT],\n] as ReadonlyArray<LayoutData>;\n\nconst ALL_PARSED_LAYOUTS: ReadonlyArray<ParsedLayout> =\n  ALL_LAYOUT_DATA.map(parseLayout);\n\nexport function getNumRows(idx: number) {\n  return ALL_PARSED_LAYOUTS[idx].rows;\n}\n\nexport function getNumCols(idx: number) {\n  return ALL_PARSED_LAYOUTS[idx].cols;\n}\n\ntype ExtraInit = (ctx: EngineContext) => void;\ntype LayoutData = [string, ExtraInit?];\ntype LayoutItem = {\n  name: string;\n  row: number;\n  column: number;\n  player: Player;\n};\ntype ParsedLayout = {\n  allItems: LayoutItem[];\n  rows: number;\n  cols: number;\n  extraInit?: ExtraInit;\n};\n\nfunction parseLayout(layoutData: LayoutData): ParsedLayout {\n  const layout = layoutData[0];\n  const lines = layout.split(\"\\n\").filter((s) => !!s);\n  const rows = lines.length;\n  const cols = lines[0].length;\n  const allItems = [] as LayoutItem[];\n  for (let row = 0; row < rows; row++) {\n    const line = lines[row];\n    if (line.length != cols) {\n      throw new Error(\"bad sokoban layout :(\\n\" + layout);\n    }\n    for (let col = 0; col < cols; col++) {\n      const c = line[col];\n      const name = nameForLetter(c);\n      if (name) {\n        allItems.push({\n          name,\n          player: playerForLetter(c),\n          row,\n          column: col,\n        });\n      }\n    }\n  }\n\n  return {\n    allItems,\n    rows,\n    cols,\n    extraInit: layoutData[1],\n  };\n}\n\nfunction initFromParsed(ctx: EngineContext, parsed: ParsedLayout) {\n  const { engine } = ctx;\n  for (const item of parsed.allItems) {\n    engine.spawn(\n      item.name,\n      { row: item.row, column: item.column },\n      item.player\n    );\n  }\n  if (parsed.extraInit) {\n    parsed.extraInit(ctx);\n  }\n}\n\nexport const LEVEL_INDICES: ReadonlyArray<number> = ALL_LAYOUT_DATA.map(\n  (_, i) => i\n);\nexport const LEVEL_INITERS: ReadonlyArray<(ctx: EngineContext) => void> =\n  LEVEL_INDICES.map((i) => {\n    return (ctx: EngineContext) => initFromParsed(ctx, ALL_PARSED_LAYOUTS[i]);\n  });\n","import { SharedGameSpec } from \"engine/types/shared-game-specs\";\nimport { Check, FailedChecks } from \"engine/types/action-validation\";\nimport {\n  ALL_PUSHERS,\n  LEVEL_INDICES,\n  ZAP_PUSHER_NAME,\n  getNumCols,\n  getNumRows,\n  WALL_NAME,\n  ARMORED_CAMP_NAME,\n} from \"./puzzle-22-data\";\nimport { Permanent, Player } from \"engine/types/game-state\";\nimport { ColorSymbol } from \"engine/types/card-data\";\nimport {\n  EffectOptType,\n  EffectOptValidationContext,\n} from \"engine/types/effects\";\n\nconst BASE_SHARED_GAME_SPEC = {\n  allowCheckpoints: true,\n  aiDisableGemAccounting: true,\n  hasAI: true,\n  adjustMoveChecks(failedChecks, permanent, slot) {\n    if (ALL_PUSHERS.has(permanent.card.name || \"\")) {\n      const slot2 = permanent.slot;\n      const manhattan =\n        Math.abs(slot.column - slot2.column) + Math.abs(slot.row - slot2.row);\n      if (manhattan === 1) {\n        failedChecks.delete(Check.OCCUPIED);\n      }\n    }\n  },\n  adjustAttackChecks(failedChecks, attacker, defender) {\n    if (defender.card.name === WALL_NAME) {\n      failedChecks.add(Check.GENERIC);\n    }\n  },\n  basesOverrides: {\n    [Player.P1]: [],\n    [Player.P2]: [],\n  },\n  deckOverrides: {\n    [Player.P1]: [],\n    [Player.P2]: [],\n  },\n  cardEffectsShared: {\n    [ARMORED_CAMP_NAME]: {\n      isBase: true,\n      isStructure: true,\n    },\n    [ZAP_PUSHER_NAME]: {\n      flexCost: [ColorSymbol.ROCK],\n      flexForms: [\n        {\n          userPrompt: \"Choose an adjacent Unit to zap.\",\n          type: EffectOptType.PERMANENT,\n          validate: (\n            failedChecks: FailedChecks,\n            target: Permanent,\n            ctx: EffectOptValidationContext\n          ) => {\n            const { permanent, inspector } = ctx;\n            const slot1 = permanent.slot;\n            const slot2 = target.slot;\n            const manhattan =\n              Math.abs(slot1.row - slot2.row) +\n              Math.abs(slot1.column - slot2.column);\n            if (manhattan != 1) {\n              failedChecks.add(Check.ADJACENT);\n            }\n            if (target.card.name === WALL_NAME) {\n              failedChecks.add(Check.GENERIC);\n            }\n          },\n        },\n      ],\n    },\n  },\n} as SharedGameSpec;\n\nexport const SharedPuzzle22Specs: SharedGameSpec[] = LEVEL_INDICES.map((i) => {\n  const val = {\n    ...BASE_SHARED_GAME_SPEC,\n    numRows: getNumRows(i),\n    numColumns: getNumCols(i),\n  };\n  // Special cases.\n  // Level 9\n  if (i === 8) {\n    val.cardEffectsShared = Object.assign({}, val.cardEffectsShared ?? {});\n    val.cardEffectsShared[\"camp\"] = {\n      computeText: () =>\n        \"This camp is super energetic! On start of turn, gain {??}.\",\n    };\n  }\n  return val;\n});\n","import { Check } from \"engine/types/action-validation\";\nimport { Player } from \"engine/types/game-state\";\nimport { SharedGameSpec } from \"engine/types/shared-game-specs\";\n\nexport const SharedPuzzle28Spec: SharedGameSpec = {\n  hasAI: true,\n  aiDisableGemAccounting: true,\n  basesOverrides: {\n    [Player.P2]: [\"barn\"],\n  },\n  cardEffectsShared: {\n    barn: {\n      isStructure: true,\n      isBase: true,\n    },\n  },\n  adjustSummonChecks(failedChecks, player, cardName, slot, ctx) {\n    // can only summon on turn 0,1,2,3 (first two turns for each player)\n    const { inspector } = ctx;\n    const turnNumber = inspector.getTurnNumber();\n    if (turnNumber > 3) {\n      failedChecks.add(Check.GENERIC);\n    }\n  },\n};\n","import { Player } from \"engine/types/game-state\";\nimport { SharedGameSpec } from \"engine/types/shared-game-specs\";\n\nexport const SharedPuzzle31Spec: SharedGameSpec = {\n  allowCheckpoints: true,\n  hasAI: true,\n  aiDisableGemAccounting: true,\n  basesOverrides: {\n    // one camp to be \"easy\" to win against\n    [Player.P2]: [\"camp\"],\n  },\n};\n","import { Player } from \"engine/types/game-state\";\nimport { SharedGameSpec } from \"engine/types/shared-game-specs\";\n\nexport const SharedPuzzle44Spec: SharedGameSpec = {\n  allowCheckpoints: true,\n  hasAI: true,\n  aiDisableGemAccounting: true,\n  basesOverrides: {\n    [Player.P2]: [],\n  },\n};\n","import { Check } from \"engine/types/action-validation\";\nimport { CounterType } from \"engine/types/counters\";\nimport { Player } from \"engine/types/game-state\";\nimport { SharedGameSpec } from \"engine/types/shared-game-specs\";\n\nexport type SharedExtraState = {\n  canAttackMorgle: boolean;\n};\n\nexport const SharedPuzzle46Spec: SharedGameSpec = {\n  allowCheckpoints: true,\n  hasAI: true,\n  aiDisableGemAccounting: true,\n  basesOverrides: {\n    [Player.P2]: [],\n  },\n  cardEffectsShared: {\n    swargle: {\n      computeText: (permanent, ctx) => {\n        let blurgle = \"\";\n        const amt = ctx.inspector.getCounterValSum(permanent, CounterType.DOOM);\n        switch (amt) {\n          case 7:\n            blurgle = \"sergle\";\n            break;\n          case 6:\n            blurgle = \"sirgle\";\n            break;\n          case 5:\n            blurgle = \"firgle\";\n            break;\n          case 4:\n            blurgle = \"forgle\";\n            break;\n          case 3:\n            blurgle = \"thrergle\";\n            break;\n          case 2:\n            blurgle = \"tworgle\";\n            break;\n          case 1:\n            blurgle = \"onergle\";\n            break;\n          case 0:\n            blurgle = \"norgle\";\n            break;\n        }\n        return `If this Crergle targle Dargle, Dergle all Energle Unirgle.\nThis Crergle is Dergle autorgle in ${blurgle} turgle.`;\n      },\n    },\n  },\n  adjustAttackChecks: (failedChecks, attacker, defender, ctx) => {\n    const { inspector } = ctx;\n    if (inspector.getCardName(defender) === \"morgle\") {\n      const sharedExt = inspector.getSharedExtraState() as SharedExtraState;\n\n      // don't allow attacking morgle\n      if (!sharedExt.canAttackMorgle) {\n        failedChecks.add(Check.GENERIC);\n      }\n    }\n\n    // Restore normal card effects check for everyone else\n    const effects = inspector.getSharedEffects(attacker);\n    const effectsAdjust = effects.adjustAttackChecks;\n    if (effectsAdjust)\n      effectsAdjust(failedChecks, attacker, defender, inspector.makeContext());\n  },\n\n  // just override\n  modifySharedExtraState(updInfo, sharedExtraState) {\n    Object.assign(\n      sharedExtraState as SharedExtraState,\n      updInfo as SharedExtraState\n    );\n  },\n};\n","import { Player } from \"engine/types/game-state\";\nimport { CounterType, getCounterExplanation } from \"engine/types/counters\";\nimport { SharedGameSpec } from \"engine/types/shared-game-specs\";\nimport { Check } from \"engine/types/action-validation\";\n\nexport const SharedPuzzle50Spec: SharedGameSpec = {\n  cardEffectsShared: {\n    \"b-w-copier\": {\n      isStructure: true,\n      isBase: true,\n      specialCost: [],\n    },\n    \"pasture-planner\": {\n      isStructure: true,\n      isBase: true,\n      specialCost: [],\n    },\n  },\n  makeCardEffectsShared: (cardsDB) => {\n    return Object.fromEntries(\n      Object.values(cardsDB)\n        .filter(\n          ({ name: cardName, text }) =>\n            cardName.startsWith(\"puzzle-50\") && text === \"\"\n        )\n        .map(({ name: cardName }) => [\n          cardName,\n          {\n            computeText: (permanent, ctx) => {\n              const { inspector } = ctx;\n              const specialCounters = permanent.counters.filter(\n                ({ type: counterType }) =>\n                  [\n                    CounterType.CANNOT_BE_DESTROYED,\n                    CounterType.INVULNERABLE,\n                    CounterType.CANNOT_MOVE,\n                  ].includes(counterType)\n              );\n              if (specialCounters.length === 0) return \"\";\n              return `${specialCounters\n                .map((counter) => {\n                  const explanation =\n                    counter.type === CounterType.CANNOT_MOVE\n                      ? \"Immobile.\"\n                      : getCounterExplanation(counter);\n                  if (explanation === null)\n                    throw new Error(\n                      \"expect the keyworded counters to have explanations\"\n                    );\n                  return explanation.replace(/[^a-zA-Z]/g, \"\");\n                })\n                .join(\", \")}.`;\n            },\n          },\n        ])\n    );\n  },\n  hasAI: true,\n  aiDisableGemAccounting: true,\n  numRows: 7,\n  numColumns: 5,\n  basesOverrides: {\n    [Player.P1]: [\"b-w-copier\"],\n    [Player.P2]: [\"pasture-planner\"],\n  },\n  adjustSummonChecks: (failedChecks, _player, _cardName, slot, _ctx) => {\n    if (slot.row > 0) {\n      failedChecks.delete(Check.TERRAIN);\n    }\n  },\n  adjustAttackChecks: (failedChecks, attacker) => {\n    if (attacker.owner === Player.P2) {\n      failedChecks.delete(Check.PROTECTED);\n    }\n  },\n};\n","import { Check } from \"engine/types/action-validation\";\nimport { Player } from \"engine/types/game-state\";\nimport { EffectOptType } from \"engine/types/effects\";\nimport { SharedGameSpec } from \"engine/types/shared-game-specs\";\n\nexport const SharedPuzzle53Spec: SharedGameSpec = {\n  allowCheckpoints: true,\n  cardEffectsShared: {\n    yurt: {\n      isBase: true,\n      isStructure: true,\n    },\n  },\n  hasAI: true,\n  aiDisableGemAccounting: true,\n  basesOverrides: {\n    [Player.P2]: [\"yurt\", \"yurt\", \"yurt\"],\n  },\n  numRows: 16,\n  adjustSummonChecks: (failedChecks, player, _cardName, slot) => {\n    // player can only summon in first three rows\n    if (player === Player.P1 && slot.row <= 12) {\n      failedChecks.add(Check.TERRAIN);\n    }\n  },\n  adjustAttackChecks: (failedChecks, attacker, defender, ctx) => {\n    const { inspector } = ctx;\n    if (Math.abs(attacker.slot.row - defender.slot.row) > 6)\n      failedChecks.add(Check.TOO_FAR);\n  },\n  adjustEffectOptChecks: (failedChecks, effectOpt, form, ctx) => {\n    const { permanent } = ctx;\n    switch (effectOpt.type) {\n      case EffectOptType.PERMANENT: {\n        const { permanent: targetPermanent } = effectOpt;\n        if (Math.abs(permanent.slot.row - targetPermanent.slot.row) > 6)\n          failedChecks.add(Check.TOO_FAR);\n        break;\n      }\n      case EffectOptType.SLOT: {\n        const { slot } = effectOpt;\n        if (Math.abs(permanent.slot.row - slot.row) > 6)\n          failedChecks.add(Check.TOO_FAR);\n        break;\n      }\n    }\n  },\n};\n","import { CounterType } from \"engine/types/counters\";\nimport { Player } from \"engine/types/game-state\";\nimport { SharedGameSpec } from \"engine/types/shared-game-specs\";\nimport { CardEffectsShared } from \"engine/cards/card-effects-shared\";\nimport {\n  NUM_LEGENDARIES,\n  PUZ_NAME_POST_FINAL_BATTLE,\n} from \"engine/puzzles/puzzle-data\";\n\nexport type Puzzle76SharedExtraState = {\n  keroPhase: number;\n};\n\nconst textEffects: CardEffectsShared = {\n  computeText: (permanent, ctx) => {\n    const { inspector } = ctx;\n    const hasDoom = inspector.doesPermanentHaveCounterType(\n      permanent,\n      CounterType.DOOM\n    );\n    const doom = hasDoom\n      ? inspector.getCounterValSum(permanent, CounterType.DOOM) + 1\n      : 0;\n    return inspector\n      .getCardData(permanent)\n      .text.split(\"\\n\")\n      .map((line) => {\n        if (\n          line.startsWith(\"After\") &&\n          line.endsWith(\"Destroy all Enemy Units.\")\n        )\n          return `After ${doom} ${\n            doom === 1 ? \"turn\" : \"turns\"\n          }, Destroy all Enemy Units.`;\n        return line;\n      })\n      .join(\"\\n\");\n  },\n};\n\nexport const SharedPuzzle76Spec: SharedGameSpec = {\n  allowCheckpoints: true,\n  hasAI: true,\n  aiDisableGemAccounting: true,\n  basesOverrides: {\n    [Player.P2]: [\"kero-dos\"],\n  },\n  maxNumLegendaries: NUM_LEGENDARIES,\n  cardEffectsShared: {\n    \"kero-dos\": {\n      isBase: true,\n      isStructure: true,\n    },\n    \"dinosaur-tail\": textEffects,\n    \"boar-tusks\": textEffects,\n    \"dryad-horns\": textEffects,\n    \"cow-udder\": textEffects,\n    \"bee-wings\": textEffects,\n    kero: textEffects,\n    // TESTING:\n    // \"dinosaur-tail\": {\n    //   maxHealth: 3,\n    // },\n    // \"boar-tusks\": {\n    //   maxHealth: 3,\n    // },\n  },\n  modifySharedExtraState(updInfo, sharedExtraState) {\n    Object.assign(\n      sharedExtraState as Puzzle76SharedExtraState,\n      updInfo as Puzzle76SharedExtraState\n    );\n  },\n  endCutsceneRedirect: `/cutscene/${PUZ_NAME_POST_FINAL_BATTLE}/start`,\n};\n","import { Player } from \"engine/types/game-state\";\nimport { SharedGameSpec } from \"engine/types/shared-game-specs\";\n\nexport const SharedPuzzle80Spec: SharedGameSpec = {\n  allowCheckpoints: true,\n  hasAI: true,\n  aiDisableGemAccounting: true,\n  basesOverrides: {\n    [Player.P2]: [],\n  },\n};\n","import { CounterType } from \"engine/types/counters\";\nimport { Player } from \"engine/types/game-state\";\nimport { SharedGameSpec } from \"engine/types/shared-game-specs\";\n\nexport const ASTEROID_1_NAME = \"apocalyptic-asteroid\";\nexport const ASTEROID_2_NAME = \"asteroid-fragment\";\nexport const ASTEROID_3_NAME = \"meaty-ore\";\n\nfunction asteroidAnnounce(val: number) {\n  switch (val) {\n    case 0:\n      return \"BOOM!!!!!!!\";\n    case 1:\n      return \"This asteroid lands in 1 turn!\";\n    default:\n      return `This asteroid lands in ${val} turns!`;\n  }\n}\n\nexport const SharedPuzzle82Spec: SharedGameSpec = {\n  allowCheckpoints: true,\n  hasAI: true,\n  basesOverrides: {\n    [Player.P2]: [],\n  },\n  cardEffectsShared: {\n    [ASTEROID_1_NAME]: {\n      computeText: (permanent, ctx) => {\n        const doom = ctx.inspector.getCounterValSum(\n          permanent,\n          CounterType.DOOM\n        );\n        return `${asteroidAnnounce(doom)}\n        *If only we had known this were coming!*`;\n      },\n    },\n    [ASTEROID_2_NAME]: {\n      computeText: (permanent, ctx) => {\n        const doom = ctx.inspector.getCounterValSum(\n          permanent,\n          CounterType.DOOM\n        );\n        return `${asteroidAnnounce(doom)}\n        *I'm not sure what you thought blasting an asteroid would do.*`;\n      },\n    },\n    [ASTEROID_3_NAME]: {\n      computeText: (permanent, ctx) => {\n        const doom = ctx.inspector.getCounterValSum(\n          permanent,\n          CounterType.DOOM\n        );\n        return `${asteroidAnnounce(doom)}\n        Cannot Attack.\n        When this Creature lands, set its Health to equal its Power. For each Enemy Unit, deal damage to this Creature equal to that Unit's Health, then destroy that Unit.\n        *You’ve revealed the meaty ore within the asteroid! It looks like you’ll just have to absorb the impact though...*`;\n      },\n    },\n  },\n};\n","import { CardEffectsShared } from \"engine/cards/card-effects-shared\";\nimport { Check } from \"engine/types/action-validation\";\nimport { Player } from \"engine/types/game-state\";\nimport { SharedGameSpec } from \"engine/types/shared-game-specs\";\n\nconst BASE_EFFECT: CardEffectsShared = {\n  isBase: true,\n  isStructure: true,\n  adjustMoveChecks: (fail) => fail.delete(Check.CARD_TYPE),\n};\n\nexport const SharedPuzzle90Spec: SharedGameSpec = {\n  allowCheckpoints: true,\n  aiDisableGemAccounting: true,\n  cardEffectsShared: {\n    arvada: BASE_EFFECT,\n    burlington: BASE_EFFECT,\n    centennial: BASE_EFFECT,\n  },\n  hasAI: true,\n  deckOverrides: {\n    [Player.P1]: [],\n    [Player.P2]: [],\n  },\n  basesOverrides: {\n    [Player.P1]: [],\n    [Player.P2]: [],\n  },\n  numRows: 4,\n  numColumns: 7,\n};\n","import { Inspector } from \"engine/Inspector\";\nimport {\n  PermanentEventHandlers,\n  PermanentEventType,\n} from \"engine/server-hooks\";\nimport { CounterType } from \"engine/types/counters\";\nimport { GameSpecServerFragment } from \"engine/types/game-specs\";\nimport { Player, Slot } from \"engine/types/game-state\";\n\n// Implement Othello game state and move logic\nconst N = 10; // must be bigger than board size\nexport const BOARD_SIZE = 8;\nconst MAX_HEALTH = 100;\nconst AI_MAX_HEALTH = 200;\nfunction rowColToIndex(row: number, col: number) {\n  return N * row + col;\n}\nfunction slotToIndex(slot: Slot) {\n  return rowColToIndex(slot.row, slot.column);\n}\nfunction indexToSlot(index: number) {\n  return {\n    row: Math.floor(index / N),\n    column: index % N,\n  };\n}\n\nclass OthelloState {\n  constructor(private locations: { [index: number]: Player }) {}\n\n  static makeStateFromInspector(inspector: Inspector) {\n    const locations: { [index: number]: Player } = {};\n    for (const perm of inspector.getAllPermanents()) {\n      locations[slotToIndex(perm.slot)] = perm.owner;\n    }\n    return new OthelloState(locations);\n  }\n\n  // Find the result if the given slot is played on by the given player.\n  // Returns object with\n  //   state: OthelloState\n  //   swaps:\n  getResultingState(slot: Slot, player: Player) {\n    const newIndex = slotToIndex(slot);\n    const newLocations = {\n      ...this.locations,\n      [newIndex]: player,\n    };\n    // The possible 8 directions to go, by delta of index.\n    const directions = [1, N - 1, N, N + 1, -1, -N + 1, -N, -N - 1];\n    const allToFlip: number[] = [];\n\n    for (const delta of directions) {\n      let currentIndex = newIndex;\n      let toFlip = [];\n      while (true) {\n        currentIndex += delta;\n        // Check that the next adjacent space is occupied.\n        if (!this.locations[currentIndex]) {\n          toFlip = [];\n          break;\n        } else if (this.locations[currentIndex] !== player) {\n          // If occupied and opposite player, this will be flipped\n          toFlip.push(currentIndex);\n        } else {\n          // If occupied and same player, done finding things to flip\n          break;\n        }\n      }\n      allToFlip.push(...toFlip);\n    }\n\n    for (const flipIndex of allToFlip) {\n      newLocations[flipIndex] = player;\n    }\n\n    return {\n      state: new OthelloState(newLocations),\n      swaps: allToFlip.map(indexToSlot),\n    };\n  }\n\n  isLegalMove(slot: Slot) {\n    if (this.hasUnitAtSlot(slot)) {\n      return false;\n    }\n    const directions = [1, N - 1, N, N + 1, -1, -N + 1, -N, -N - 1];\n    const index = slotToIndex(slot);\n    for (const delta of directions) {\n      const newIndex = index + delta;\n      if (this.hasUnitAtIndex(newIndex)) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  hasUnitAtSlot(slot: Slot) {\n    return this.hasUnitAtIndex(slotToIndex(slot));\n  }\n\n  hasUnitAtIndex(idx: number) {\n    return this.locations[idx] != undefined;\n  }\n}\n\nconst SQUARE_TO_CHECK = {\n  [rowColToIndex(1, 0)]: rowColToIndex(0, 0),\n  [rowColToIndex(0, 1)]: rowColToIndex(0, 0),\n  [rowColToIndex(1, 1)]: rowColToIndex(0, 0),\n  [rowColToIndex(1, BOARD_SIZE - 1)]: rowColToIndex(0, BOARD_SIZE - 1),\n  [rowColToIndex(0, BOARD_SIZE - 2)]: rowColToIndex(0, BOARD_SIZE - 1),\n  [rowColToIndex(1, BOARD_SIZE - 2)]: rowColToIndex(0, BOARD_SIZE - 1),\n  [rowColToIndex(BOARD_SIZE - 1, 1)]: rowColToIndex(BOARD_SIZE - 1, 0),\n  [rowColToIndex(BOARD_SIZE - 2, 0)]: rowColToIndex(BOARD_SIZE - 1, 0),\n  [rowColToIndex(BOARD_SIZE - 2, 1)]: rowColToIndex(BOARD_SIZE - 1, 0),\n  [rowColToIndex(BOARD_SIZE - 1, BOARD_SIZE - 1)]: rowColToIndex(\n    BOARD_SIZE - 1,\n    BOARD_SIZE - 1\n  ),\n  [rowColToIndex(BOARD_SIZE - 1, BOARD_SIZE - 2)]: rowColToIndex(\n    BOARD_SIZE - 1,\n    BOARD_SIZE - 1\n  ),\n  [rowColToIndex(BOARD_SIZE - 2, BOARD_SIZE - 2)]: rowColToIndex(\n    BOARD_SIZE - 1,\n    BOARD_SIZE - 1\n  ),\n};\nfunction getAdjustmentValue(slot: Slot, startState: OthelloState) {\n  const { row, column } = slot;\n  // Corners are good\n  if (\n    (row === 0 || row === BOARD_SIZE - 1) &&\n    (column === 0 || column === BOARD_SIZE - 1)\n  ) {\n    return 2;\n  }\n  const index = slotToIndex(slot);\n  if (index in SQUARE_TO_CHECK) {\n    if (!startState.hasUnitAtIndex(SQUARE_TO_CHECK[index])) {\n      // This would free the corner to be played, so avoid doing that.\n      return -2;\n    }\n  }\n  // Slightly prefer playing on edges.\n  if (\n    row === 0 ||\n    row === BOARD_SIZE - 1 ||\n    column === 0 ||\n    column === BOARD_SIZE - 1\n  ) {\n    return 0.5;\n  }\n  return 0;\n}\n\nconst pieceHandlers: PermanentEventHandlers = {\n  [PermanentEventType.CREATED]: (ev) => {\n    const { permanent, ctx } = ev;\n    const { engine, inspector } = ctx;\n    engine.addCounter(permanent, { type: CounterType.CANNOT_ATTACK });\n    engine.addCounter(permanent, { type: CounterType.CANNOT_CREATE });\n    engine.addCounter(permanent, { type: CounterType.CANNOT_MOVE });\n    // const cardName = permanent.card.name;\n\n    // Change the loyalty (and name) of permanents\n    const currentState = OthelloState.makeStateFromInspector(inspector);\n    const { swaps } = currentState.getResultingState(\n      permanent.slot,\n      permanent.owner\n    );\n    const newCardName =\n      permanent.owner === Player.P1 ? \"light-piece\" : \"dark-piece\";\n    for (const swapSlot of swaps) {\n      const swapPerm = inspector.getPermanentAtIfExists(swapSlot);\n      if (swapPerm) {\n        engine.getBackdoorEngine().transformPermanent(swapPerm, newCardName);\n        engine.changePermanentOwner(swapPerm);\n      }\n    }\n  },\n};\n\ninterface Puzzle93ExtraState {\n  aiDamage: number; // the amount the AI (P2) has been damaged\n  playerDamage: number; // the amount the player (P1) has been damaged\n}\nexport const Puzzle93Spec: GameSpecServerFragment = {\n  disableNoBasesLossCondition: true,\n\n  extraLoseChecks: (player, ctx) => {\n    if (ctx.inspector.getPermanents({ owner: player }).length === 0) {\n      return true;\n    }\n    const extraState = ctx.engine.getExtraState() as Puzzle93ExtraState;\n    if (player === Player.P1) {\n      return extraState.playerDamage >= MAX_HEALTH;\n    } else {\n      return extraState.aiDamage >= AI_MAX_HEALTH;\n    }\n  },\n\n  cardEffects: {\n    \"light-piece\": {\n      handlers: pieceHandlers,\n    },\n    \"dark-piece\": {\n      handlers: pieceHandlers,\n    },\n  },\n\n  beforeNewGame: (ctx) => {\n    // spawn the 4 pieces\n    const { engine } = ctx;\n    engine.spawn(\"light-piece\", { row: 3, column: 3 }, Player.P1);\n    engine.spawn(\"light-piece\", { row: 4, column: 4 }, Player.P1);\n    engine.spawn(\"dark-piece\", { row: 3, column: 4 }, Player.P2);\n    engine.spawn(\"dark-piece\", { row: 4, column: 3 }, Player.P2);\n  },\n\n  aiTurn: (ctx) => {\n    const { ai, inspector } = ctx;\n    if (inspector.getTurnNumber() < 2) {\n      ai.speak(\n        \"Let’s play my game! On every turn, you get to place a piece, then all your units do an attack down their column. If they don’t have anyone to hit, they hit the opposing player. I get to go first, so hit End Turn and let’s get started!\"\n      );\n      return;\n    }\n\n    const cols = inspector.getNumColumns();\n    const rows = inspector.getNumRows();\n    const startState = OthelloState.makeStateFromInspector(inspector);\n\n    let bestMoveScore = -1;\n    let bestMove: Slot | null = null;\n\n    // detect best square to move on\n    for (let row = 0; row < rows; row++) {\n      for (let column = 0; column < cols; column++) {\n        const slot = { row, column };\n        if (!startState.isLegalMove(slot)) {\n          continue;\n        }\n        const thisScore =\n          startState.getResultingState(slot, Player.P2).swaps.length +\n          getAdjustmentValue(slot, startState);\n        if (thisScore > bestMoveScore) {\n          bestMoveScore = thisScore;\n          bestMove = slot;\n        }\n      }\n    }\n\n    if (bestMove != null) {\n      ai.trySpawn(\"dark-piece\", bestMove);\n    }\n  },\n\n  afterTurnEnd: (player, ctx) => {\n    const { ai, inspector, engine } = ctx;\n    if (inspector.getTurnNumber() <= 2) {\n      return;\n    }\n    // Deal damage!\n    let damage = 0;\n    const extraState = engine.getExtraState() as Puzzle93ExtraState;\n    for (const playerUnit of inspector.getPermanentsOf(player)) {\n      const targetUnits = inspector.getPermanents({\n        column: playerUnit.slot.column,\n        rowInFrontOf: {\n          row: playerUnit.slot.row,\n          perspective: player,\n        },\n        ownedByOpponentOf: player,\n        sort: [\n          { type: \"frontToBack\", perspective: inspector.getOpponentOf(player) },\n        ],\n      });\n      if (targetUnits.length === 0) {\n        damage++;\n        if (player === Player.P1) {\n          extraState.aiDamage += 1;\n        } else if (player === Player.P2) {\n          extraState.playerDamage += 1;\n        }\n      } else {\n        engine.damage(playerUnit, targetUnits[0], 1);\n      }\n    }\n\n    const prefix = player === Player.P1 ? \"You\" : \"I\";\n    ai.speak(`${prefix} dealt ${damage} damage this turn.\nMy health: ${AI_MAX_HEALTH - extraState.aiDamage}. Your health: ${\n      MAX_HEALTH - extraState.playerDamage\n    }.`);\n\n    if (\n      player === Player.P2 &&\n      inspector.getHandForUI(Player.P1).length === 0\n    ) {\n      engine.addCardToHand(Player.P1, { name: \"light-piece\" });\n    }\n  },\n\n  afterInitEngine: (ctx) => {\n    ctx.engine.initExtraState({\n      aiDamage: 0,\n      playerDamage: 0,\n    } as Puzzle93ExtraState);\n  },\n};\n","import { Player, Slot } from \"engine/types/game-state\";\nimport {\n  InspectorContext,\n  SharedGameSpec,\n} from \"engine/types/shared-game-specs\";\nimport { Check, FailedChecks } from \"engine/types/action-validation\";\nimport { BOARD_SIZE } from \"./puzzle-93\";\n\nexport const SharedPuzzle93Spec: SharedGameSpec = {\n  allowCheckpoints: true,\n  hasAI: true,\n  numRows: BOARD_SIZE,\n  numColumns: BOARD_SIZE,\n\n  basesOverrides: {\n    [Player.P1]: [],\n    [Player.P2]: [],\n  },\n\n  deckOverrides: {\n    [Player.P1]: [],\n    [Player.P2]: [],\n  },\n\n  cardEffectsShared: {\n    \"light-piece\": {\n      adjustSummonChecks: pieceSummonChecker,\n    },\n    \"dark-piece\": {\n      adjustSummonChecks: pieceSummonChecker,\n    },\n  },\n};\n\nfunction pieceSummonChecker(\n  failedChecks: FailedChecks,\n  player: Player,\n  cardName: string,\n  slot: Slot,\n  ctx: InspectorContext\n) {\n  failedChecks.delete(Check.TERRAIN);\n  const { inspector } = ctx;\n  for (const otherPerm of inspector.getAllPermanents()) {\n    if (isAdjacentSlot(slot, otherPerm.slot)) {\n      // Success! Don't add any FailedChecks\n      return;\n    }\n  }\n  failedChecks.add(Check.GENERIC);\n}\n\nfunction isAdjacentSlot(slot1: Slot, slot2: Slot) {\n  return (\n    Math.abs(slot1.column - slot2.column) <= 1 &&\n    Math.abs(slot1.row - slot2.row) <= 1 &&\n    !isEqualSlot(slot1, slot2)\n  );\n}\n\nfunction isEqualSlot(slot1: Slot, slot2: Slot) {\n  return slot1.column === slot2.column && slot1.row === slot2.row;\n}\n","import { Player } from \"engine/types/game-state\";\nimport { SharedGameSpec } from \"engine/types/shared-game-specs\";\n\nexport const SharedPuzzle98Spec: SharedGameSpec = {\n  allowCheckpoints: true,\n  hasAI: true,\n  aiDisableGemAccounting: true,\n  basesOverrides: {\n    [Player.P2]: [],\n  },\n} as SharedGameSpec;\n","import { SharedGameSpec } from \"engine/types/shared-game-specs\";\nimport { Player } from \"engine/types/game-state\";\n\nexport const SharedPuzzle101Spec: SharedGameSpec = {\n  allowCheckpoints: true,\n  hasAI: true,\n  aiDisableGemAccounting: true,\n  basesOverrides: {\n    [Player.P2]: [],\n  },\n};\n","import { Player } from \"engine/types/game-state\";\nimport { SharedGameSpec } from \"engine/types/shared-game-specs\";\nimport { Check } from \"engine/types/action-validation\";\n\nexport const BASE1 = \"pepper-rich-farm\";\nexport const BASE2 = \"train-boar-ding-platform\";\nexport const BOAR = \"angry-boarry-farmer\";\n\nexport const SharedPuzzle109Spec: SharedGameSpec = {\n  allowCheckpoints: true,\n  hasAI: true,\n  aiDisableGemAccounting: true,\n  basesOverrides: {\n    [Player.P2]: [BASE1, BASE2, BASE1],\n  },\n  cardEffectsShared: {\n    [BASE1]: {\n      isStructure: true,\n      isBase: true,\n    },\n    [BASE2]: {\n      isStructure: true,\n      isBase: true,\n    },\n    [BOAR]: {\n      adjustAttackChecks: (failedChecks, attacker, defender, ctx) => {\n        if (attacker.slot.column === defender.slot.column) {\n          return;\n        }\n        if (ctx.inspector.getTerrainOf(defender.slot) === attacker.owner) {\n          return;\n        }\n        failedChecks.add(Check.GENERIC);\n      },\n      adjustMoveChecks: (failedChecks, permanent, slot, ctx) => {\n        if (\n          ctx.inspector.getPermanents({ owner: permanent.owner, name: BASE2 })\n        ) {\n          failedChecks.delete(Check.ADJACENT);\n        }\n      },\n    },\n  },\n};\n","import { Player } from \"engine/types/game-state\";\nimport { SharedGameSpec } from \"engine/types/shared-game-specs\";\n\n// Common base shared spec for cutscenes.\nexport const SharedCutsceneSpec: SharedGameSpec = {\n  hasAI: true,\n  deckOverrides: {\n    [Player.P1]: [],\n    [Player.P2]: [],\n  },\n};\n","import { SharedGameSpec } from \"engine/types/shared-game-specs\";\nimport {\n  PUZ_NAME_TUTORIAL_1,\n  PUZ_NAME_FINAL_BATTLE,\n} from \"engine/puzzles/puzzle-data\";\nimport {\n  PUZ_NAME_COMMON,\n  SharedCommonSpec,\n} from \"engine/game-specs/common-shared\";\nimport { SharedRobotSpec } from \"engine/game-specs/robot-shared\";\nimport { SharedTutorial1Spec } from \"engine/game-specs/tutorial1-shared\";\nimport { SharedTutorial2Spec } from \"engine/game-specs/tutorial2-shared\";\nimport { SharedTutorial3Spec } from \"engine/game-specs/tutorial3-shared\";\nimport { SharedTutorial4Spec } from \"engine/game-specs/tutorial4-shared\";\nimport { SharedTutorial5Spec } from \"engine/game-specs/tutorial5-shared\";\nimport { SharedTutorial6Spec } from \"engine/game-specs/tutorial6-shared\";\nimport { SharedPuzzle4Spec } from \"./game-specs/puzzle-4-shared\";\nimport { SharedPuzzle8Spec } from \"./game-specs/puzzle-8-shared\";\nimport { SharedPuzzle9Spec } from \"./game-specs/puzzle-9-shared\";\nimport { SharedPuzzle22Specs } from \"./game-specs/puzzle-22-shared\";\nimport { SharedPuzzle28Spec } from \"./game-specs/puzzle-28-shared\";\nimport { SharedPuzzle31Spec } from \"./game-specs/puzzle-31-shared\";\nimport { SharedPuzzle44Spec } from \"./game-specs/puzzle-44-shared\";\nimport { SharedPuzzle46Spec } from \"./game-specs/puzzle-46-shared\";\nimport { SharedPuzzle50Spec } from \"./game-specs/puzzle-50-shared\";\nimport { SharedPuzzle51Spec } from \"./game-specs/puzzle-51-shared\";\nimport { SharedPuzzle53Spec } from \"./game-specs/puzzle-53-shared\";\nimport { SharedPuzzle76Spec } from \"./game-specs/puzzle-76-shared\";\nimport { SharedPuzzle80Spec } from \"./game-specs/puzzle-80-shared\";\nimport { SharedPuzzle82Spec } from \"./game-specs/puzzle-82-shared\";\nimport { SharedPuzzle90Spec } from \"./game-specs/puzzle-90-shared\";\nimport { SharedPuzzle93Spec } from \"./game-specs/puzzle-93-shared\";\nimport { SharedPuzzle98Spec } from \"./game-specs/puzzle-98-shared\";\nimport { SharedPuzzle101Spec } from \"./game-specs/puzzle-101-shared\";\nimport { SharedPuzzle109Spec } from \"./game-specs/puzzle-109-shared\";\nimport { SharedCutsceneSpec } from \"./game-specs/cutscene-shared\";\n\nconst SharedPvPSpec: SharedGameSpec = {\n  maxNumLegendaries: 0,\n};\n\nconst makeSharedSimpleCutsceneSpec = (\n  endCutsceneRedirect?: string\n): SharedGameSpec => ({\n  ...SharedCutsceneSpec,\n  endCutsceneRedirect,\n});\n\nconst makeSharedSimpleCutsceneRedirectDjangoSpec = (\n  endCutsceneRedirectDjango?: string\n): SharedGameSpec => ({\n  ...SharedCutsceneSpec,\n  endCutsceneRedirectDjango,\n});\n\ntype SharedGameSpecs = {\n  [puzName: string]: SharedGameSpec;\n};\n\nexport const ALL_SHARED_GAME_SPECS: SharedGameSpecs = {\n  [PUZ_NAME_COMMON]: SharedCommonSpec,\n  pvp: SharedPvPSpec,\n  robot: SharedRobotSpec,\n  tutorial1: SharedTutorial1Spec,\n  tutorial2: SharedTutorial2Spec,\n  tutorial3: SharedTutorial3Spec,\n  tutorial4: SharedTutorial4Spec,\n  tutorial5: SharedTutorial5Spec,\n  tutorial6: SharedTutorial6Spec,\n  gnutmeg_tree: SharedPuzzle4Spec,\n  mister_penny: SharedPuzzle8Spec,\n  blancmange: SharedPuzzle9Spec,\n  beebay_fulfillment_center_1: SharedPuzzle22Specs[0],\n  beebay_fulfillment_center_2: SharedPuzzle22Specs[1],\n  beebay_fulfillment_center_3: SharedPuzzle22Specs[2],\n  beebay_fulfillment_center_4: SharedPuzzle22Specs[3],\n  beebay_fulfillment_center_5: SharedPuzzle22Specs[4],\n  beebay_fulfillment_center_6: SharedPuzzle22Specs[5],\n  beebay_fulfillment_center_7: SharedPuzzle22Specs[6],\n  beebay_fulfillment_center_8: SharedPuzzle22Specs[7],\n  beebay_fulfillment_center_9: SharedPuzzle22Specs[8],\n  beebay_fulfillment_center_10: SharedPuzzle22Specs[9],\n  beebay_fulfillment_center_11: SharedPuzzle22Specs[10],\n  beebay_fulfillment_center_12: SharedPuzzle22Specs[11],\n  beebay_fulfillment_center_13: SharedPuzzle22Specs[12],\n  miss_yu: SharedPuzzle28Spec,\n  bb_b: SharedPuzzle31Spec,\n  slime: SharedPuzzle44Spec,\n  dargle_1: SharedPuzzle46Spec,\n  dargle_2: SharedPuzzle46Spec,\n  dargle_3: SharedPuzzle46Spec,\n  dargle_4: SharedPuzzle46Spec,\n  dargle_5: SharedPuzzle46Spec,\n  moonick_1: SharedPuzzle50Spec,\n  moonick_2: SharedPuzzle50Spec,\n  moonick_3: SharedPuzzle50Spec,\n  moonick_4: SharedPuzzle50Spec,\n  moonick_5: SharedPuzzle50Spec,\n  moonick_6: SharedPuzzle50Spec,\n  moonick_7: SharedPuzzle50Spec,\n  moonick_8: SharedPuzzle50Spec,\n  moonick_9: SharedPuzzle50Spec,\n  moonick_10: SharedPuzzle50Spec,\n  moonick_11: SharedPuzzle50Spec,\n  moonick_12: SharedPuzzle50Spec,\n  moonick_13: SharedPuzzle50Spec,\n  moonick_14: SharedPuzzle50Spec,\n  moonick_15: SharedPuzzle50Spec,\n  moonick_16: SharedPuzzle50Spec,\n  moonick_17: SharedPuzzle50Spec,\n  moonick_18: SharedPuzzle50Spec,\n  moonick_19: SharedPuzzle50Spec,\n  moonick_20: SharedPuzzle50Spec,\n  moonick_21: SharedPuzzle50Spec,\n  moonick_22: SharedPuzzle50Spec,\n  moonick_23: SharedPuzzle50Spec,\n  moonick_24: SharedPuzzle50Spec,\n  moonick_final: SharedPuzzle50Spec,\n  spelling_bee: SharedPuzzle51Spec,\n  the_swarm: SharedPuzzle53Spec,\n  kero: SharedPuzzle76Spec,\n  jabberwock_1: SharedPuzzle80Spec,\n  jabberwock_2: SharedPuzzle80Spec,\n  jabberwock_3: SharedPuzzle80Spec,\n  jabberwock_4: SharedPuzzle80Spec,\n  jabberwock_5: SharedPuzzle80Spec,\n  jabberwock_6: SharedPuzzle80Spec,\n  jabberwock_7: SharedPuzzle80Spec,\n  asteroid_1: SharedPuzzle82Spec,\n  asteroid_2: SharedPuzzle82Spec,\n  asteroid_3: SharedPuzzle82Spec,\n  coloring: SharedPuzzle90Spec,\n  othello: SharedPuzzle93Spec,\n  spirit_of_the_vines_1: SharedPuzzle98Spec,\n  spirit_of_the_vines_2: SharedPuzzle98Spec,\n  spirit_of_the_vines_3: SharedPuzzle98Spec,\n  spirit_of_the_vines_4: SharedPuzzle98Spec,\n  spirit_of_the_vines_5: SharedPuzzle98Spec,\n  infinitely_many_hogs_and_logs_1: SharedPuzzle101Spec,\n  infinitely_many_hogs_and_logs_2: SharedPuzzle101Spec,\n  infinitely_many_hogs_and_logs_3: SharedPuzzle101Spec,\n  infinitely_many_hogs_and_logs_4: SharedPuzzle101Spec,\n  angry_boarry_farmer: SharedPuzzle109Spec,\n  test_battle: SharedCutsceneSpec,\n  treasure_chest: makeSharedSimpleCutsceneSpec(\n    `/battle/${PUZ_NAME_TUTORIAL_1}/start`\n  ),\n  first_answer: makeSharedSimpleCutsceneSpec(\"/prep/mastery_tree/start\"),\n  first_legendary: makeSharedSimpleCutsceneSpec(\"/\"),\n  entering_the_water: makeSharedSimpleCutsceneSpec(\n    `/prep/${PUZ_NAME_FINAL_BATTLE}/start`\n  ),\n  the_end: makeSharedSimpleCutsceneSpec(\"/victory/start\"),\n};\n","import { GameSpecServerFragment } from \"engine/types/game-specs\";\nimport {\n  COMMON_COUNTER_DATA,\n  COMMON_CARD_EFFECTS,\n} from \"engine/cards/card-effects\";\n\n// Note: If this ever uses ExtraState, it needs a separate extra state\n// buffer and a new hook to access it, since it is used simultaneously\n// with other game specs.\n\n/**\n * Common \"game spec\" used in all puzzles. Note that only some subset\n * of the game spec hooks are supported for the common spec.\n */\nexport const CommonSpec: GameSpecServerFragment = {\n  counterData: COMMON_COUNTER_DATA,\n  cardEffects: COMMON_CARD_EFFECTS,\n};\n","import { GameSpecServerFragment } from \"engine/types/game-specs\";\n\nexport const RadlandsSpec: GameSpecServerFragment = {};\n","import { Player } from \"engine/types/game-state\";\nimport { AbilityType, EffectOptType } from \"engine/types/effects\";\nimport { GameSpecServerFragment } from \"engine/types/game-specs\";\n\n// basic battle: summon a robot each turn, attack with all robots\nexport const RobotSpec: GameSpecServerFragment = {\n  aiTurn: (ctx) => {\n    const { inspector, engine, ai } = ctx;\n\n    // TODO: give the AI as many gems as they need to attack\n\n    // play the robot somewhere\n    // TODO: retry if blocked and there's space somewhere else\n    // TODO: use some heuristic to play to 'most annoying' column\n\n    ai.trySpawn(\n      \"robot\",\n      Math.floor(Math.random() * 3),\n      Math.floor(Math.random() * 5)\n    );\n\n    // attack with all ready robots down their column\n    inspector.getPermanentsOf(Player.P2).forEach((permanent) => {\n      if (!permanent.ready) return;\n      const column = permanent.slot.column;\n\n      // use robot's special ability on first enemy below it\n      // TODO: reword card effect that robot only attacks this way, can't pick targets regularly\n      for (let row = permanent.slot.row + 1; row < 6; row++) {\n        const defender = inspector.getPermanentAtIfExists({\n          row,\n          column,\n        });\n        if (!defender || defender.owner !== Player.P1) continue;\n\n        const attackResolved = ai.tryActivateAbility(\n          permanent,\n          AbilityType.SPECIAL,\n          [\n            {\n              type: EffectOptType.PERMANENT,\n              permanentId: defender.id,\n            },\n          ]\n        );\n      }\n    });\n  },\n};\n","import { Player } from \"engine/types/game-state\";\nimport { CounterType } from \"engine/types/counters\";\nimport { StepType } from \"engine/types/steps\";\nimport { GameSpecServerFragment } from \"engine/types/game-specs\";\nimport { ColorSymbol } from \"engine/types/card-data\";\n\nexport const Tutorial1Spec: GameSpecServerFragment = {\n  disableNoBasesLossCondition: true,\n  beforeNewGame: (ctx) => {\n    const { inspector, engine, ai } = ctx;\n    engine.spawn(\"new-boarn\", 0, 0, Player.P2);\n\n    const enemyUnit = inspector.getPermanents({\n      name: \"new-boarn\",\n    })[0];\n    engine.damageUnattributed(enemyUnit, 3);\n    engine.addCounter(enemyUnit, { type: CounterType.CANNOT_MOVE });\n    engine.addCounter(enemyUnit, { type: CounterType.CANNOT_CREATE });\n    ai.setKeyframe(\"tutorial1-start-1\");\n  },\n  aiTurn: (ctx) => {\n    const { inspector, engine, ai } = ctx;\n    if (inspector.getTurnNumber() === 0) return;\n\n    const enemyUnits = inspector.getPermanentsOf(Player.P2);\n    if (enemyUnits.length !== 1)\n      throw new Error(\"expect one enemy unit in play\");\n    ai.tryAttackFirst(enemyUnits[0]);\n\n    switch (inspector.getTurnNumber()) {\n      case 2: {\n        ai.setKeyframe(\"tutorial1-start-2\");\n        break;\n      }\n    }\n  },\n  beforeStep: (step, ctx) => {\n    const { inspector, engine, ai } = ctx;\n    if (\n      step.type === StepType.ADVANCE_KEYFRAME &&\n      step.keyframeId === \"tutorial1-start-1\"\n    ) {\n      engine.spawn(\"yoshisaur-munchakoopas\", 1, 0, Player.P1);\n      const playerUnit = inspector.getPermanents({\n        name: \"yoshisaur-munchakoopas\",\n      })[0];\n      engine.addCounter(playerUnit, { type: CounterType.CANNOT_MOVE });\n      engine.addCounter(playerUnit, { type: CounterType.CANNOT_CREATE });\n    }\n    if (step.type === StepType.END_TURN && inspector.getTurnNumber() === 1) {\n      engine.clearKeyframe();\n    }\n    if (\n      step.type === StepType.ADVANCE_KEYFRAME &&\n      step.keyframeId === \"tutorial1-before-give-food\"\n    ) {\n      engine.addGems(Player.P1, [ColorSymbol.GREEN]);\n    }\n    if (step.type === StepType.ATTACK && inspector.getTurnNumber() === 3) {\n      engine.clearKeyframe();\n    }\n    return true;\n  },\n  afterStep: (step, ctx) => {\n    const { inspector, engine, ai } = ctx;\n    if (step.type === StepType.ATTACK && inspector.getTurnNumber() === 3) {\n      ai.setKeyframe(\"tutorial1-start-3\");\n    }\n  },\n  afterGameEnd: (winner, solves, ctx) => {\n    const { engine } = ctx;\n    engine.clearKeyframe();\n  },\n};\n","import { Player } from \"engine/types/game-state\";\nimport { CounterType } from \"engine/types/counters\";\nimport { StepType } from \"engine/types/steps\";\nimport { GameSpecServerFragment } from \"engine/types/game-specs\";\n\nexport const Tutorial2Spec: GameSpecServerFragment = {\n  disableP2NoBasesLossCondition: true,\n  beforeNewGame: (ctx) => {\n    const { inspector, engine, ai } = ctx;\n    ai.setKeyframe(\"tutorial2-start-1\");\n  },\n  aiTurn: (ctx) => {\n    const { inspector, engine, ai } = ctx;\n    if (inspector.getTurnNumber() === 0) return;\n\n    const enemyUnits = inspector.getPermanentsOf(Player.P2);\n    for (const enemyUnit of enemyUnits) {\n      ai.tryAttackFirst(enemyUnit);\n    }\n\n    switch (inspector.getTurnNumber()) {\n      case 2: {\n        ai.setKeyframe(\"tutorial2-start-2\");\n        break;\n      }\n      case 4: {\n        ai.trySpawn(\"hog\", 1, 0);\n        ai.trySpawn(\"hamlet\", 2, 0);\n\n        const hog = inspector.getPermanents({\n          name: \"hog\",\n        })[0];\n        const hamlet = inspector.getPermanents({\n          name: \"hamlet\",\n        })[0];\n        engine.addCounter(hog, { type: CounterType.CANNOT_MOVE });\n        engine.addCounter(hog, { type: CounterType.CANNOT_CREATE });\n        engine.addCounter(hamlet, { type: CounterType.CANNOT_MOVE });\n        engine.addCounter(hamlet, { type: CounterType.CANNOT_CREATE });\n        ai.setKeyframe(\"tutorial2-start-3\");\n        break;\n      }\n    }\n  },\n  beforeStep: (step, ctx) => {\n    const { inspector, engine, ai } = ctx;\n    if (\n      step.type === StepType.ADVANCE_KEYFRAME &&\n      step.keyframeId === \"tutorial2-before-summon\"\n    ) {\n      engine.clearKeyframe();\n      engine.spawn(\"new-boarn\", 4, 0, Player.P1);\n      const playerUnit = inspector.getPermanents({\n        name: \"new-boarn\",\n      })[0];\n      engine.addCounter(playerUnit, { type: CounterType.CANNOT_MOVE });\n      engine.addCounter(playerUnit, { type: CounterType.CANNOT_CREATE });\n    }\n    return true;\n  },\n  afterStep: (step, ctx) => {\n    const { inspector, engine, ai } = ctx;\n    const { keyframe } = inspector.gameState;\n    if (step.type === StepType.ATTACK && inspector.getTurnNumber() === 3) {\n      ai.setKeyframe(\"tutorial2-end-turn-2\");\n    }\n    if (\n      inspector.getBases(Player.P2).length === 0 &&\n      (keyframe === undefined || keyframe.id === \"tutorial2-free-play\")\n    ) {\n      // this triggers game win for player 1\n      ai.setKeyframe(\"tutorial2-start-4\");\n    }\n  },\n  afterGameEnd: (winner, solves, ctx) => {\n    const { engine } = ctx;\n    engine.clearKeyframe();\n  },\n};\n","import { Player, areSlotsEqual } from \"engine/types/game-state\";\nimport { StepType } from \"engine/types/steps\";\nimport { GameSpecServerFragment } from \"engine/types/game-specs\";\nimport { CardType } from \"engine/types/card-data\";\n\ntype ExtraState = {\n  phase: number;\n  wrongMove: boolean;\n  stampedeTurnStart?: number;\n  summonedAll: boolean;\n};\n\nexport const Tutorial3Spec: GameSpecServerFragment = {\n  disableP1NoBasesLossCondition: true,\n  afterInitEngine: (ctx) => {\n    ctx.engine.initExtraState({\n      phase: 1,\n      wrongMove: false,\n      summonedAll: false,\n    });\n  },\n  beforeNewGame: (ctx) => {\n    const { engine, ai } = ctx;\n    engine.spawn(\"yoshisaur-munchakoopas\", 3, 3, Player.P1);\n    engine.spawn(\"beeowulf\", 1, 1, Player.P2);\n    engine.spawn(\"beeowulf\", 1, 3, Player.P2);\n    ai.setKeyframe(\"tutorial3-start-1\");\n  },\n  afterStep: (step, ctx) => {\n    const { inspector, engine, ai } = ctx;\n    const turnNumber = inspector.getTurnNumber();\n    const { keyframe } = inspector.gameState;\n    const ext = engine.getExtraState() as ExtraState;\n\n    if (\n      step.type === StepType.ADVANCE_KEYFRAME &&\n      step.keyframeId === \"tutorial3-lose-1\" &&\n      ext.wrongMove\n    ) {\n      ai.setKeyframe(\"tutorial3-lose-1-wrong-move\");\n      return;\n    }\n\n    if (step.type === StepType.MOVE && turnNumber === 1) {\n      if (areSlotsEqual(step.slot, { row: 3, column: 2 })) {\n        ai.setKeyframe(\"tutorial3-after-move\");\n      } else {\n        ext.wrongMove = true;\n      }\n      return;\n    }\n\n    if (\n      step.type === StepType.ADVANCE_KEYFRAME &&\n      step.keyframeId === \"tutorial3-before-give-cards\"\n    ) {\n      engine.addCardToHand(Player.P1, { name: \"new-boarn\" });\n      engine.addCardToHand(Player.P1, { name: \"hog\" });\n      engine.addCardToHand(Player.P1, { name: \"hamlet\" });\n    }\n\n    if (\n      ext.phase === 3 &&\n      inspector.getPermanents({\n        name: \"new-boarn\",\n      }).length > 0\n    ) {\n      ai.setKeyframe(\"tutorial3-after-summon-new-boarn\");\n      ext.phase = 4;\n      return;\n    }\n  },\n  aiTurn: (ctx) => {\n    const { inspector, engine, ai } = ctx;\n    const turnNumber = inspector.getTurnNumber();\n    const ext = engine.getExtraState() as ExtraState;\n\n    // Turn 1: Set player camp health to 1\n    if (inspector.getTurnNumber() == 0) {\n      const camp = inspector.getPermanentAtIfExists({ row: 5, column: 2 });\n      if (!camp) throw new Error(\"expect camp to exist\");\n      engine.adjustPermanentStats(camp, 0, -3);\n      return;\n    }\n\n    const aiCreatures = inspector.getPermanents({\n      owner: Player.P2,\n      type: CardType.CREATURE,\n    });\n\n    for (const creature of aiCreatures) {\n      if (inspector.getBases(Player.P1).length === 0) break;\n      ai.tryAttackFirst(creature);\n    }\n\n    if (turnNumber === 2) {\n      if (inspector.getBases(Player.P1).length === 0) {\n        ai.setKeyframe(\"tutorial3-lose-1\");\n      } else {\n        ai.setKeyframe(\"tutorial3-start-2\");\n      }\n      return;\n    }\n\n    if (ext.phase === 1 && aiCreatures.length === 0) {\n      ai.setKeyframe(\"tutorial3-start-3\");\n      ext.stampedeTurnStart = turnNumber + 3 * 2;\n      ext.phase = 2;\n      return;\n    }\n\n    if (turnNumber === ext.stampedeTurnStart) {\n      engine.spawn(\"chocolate-calf\", 1, 0, Player.P2);\n      engine.spawn(\"chocolate-calf\", 1, 2, Player.P2);\n      engine.spawn(\"chocolate-calf\", 1, 4, Player.P2);\n      if (ext.phase === 4) {\n        ai.setKeyframe(\"tutorial3-stampede\");\n        ext.summonedAll = true;\n      } else {\n        ai.setKeyframe(\"tutorial3-stampede-fail\");\n      }\n      ext.phase = 5;\n      return;\n    }\n\n    const playerCreatures = inspector.getPermanents({\n      owner: Player.P1,\n      type: CardType.CREATURE,\n    });\n\n    if (ext.phase === 2 && playerCreatures.length === 3) {\n      ai.setKeyframe(\"tutorial3-start-5\");\n      ext.phase = 3;\n      return;\n    }\n  },\n  afterGameEnd: (winner, solves, ctx) => {\n    const { engine, ai } = ctx;\n    const ext = engine.getExtraState() as ExtraState;\n    if (winner === Player.P2 && ext.summonedAll) {\n      ai.setKeyframe(\"tutorial3-lose-2\");\n    }\n  },\n  extraLoseChecks: (player, ctx) => {\n    const { inspector } = ctx;\n    const { keyframe } = inspector.gameState;\n    const turnNumber = inspector.getTurnNumber();\n    if (player === Player.P1) {\n      return (\n        inspector.getBases(player).length === 0 &&\n        (turnNumber > 3 ||\n          (keyframe !== undefined &&\n            [\"tutorial3-lose-1-wrong-move\", \"tutorial3-lose-1-other\"].includes(\n              keyframe.id\n            )))\n      );\n    }\n    return false;\n  },\n};\n","import { Player } from \"engine/types/game-state\";\nimport { GameSpecServerFragment } from \"engine/types/game-specs\";\nimport { CardType } from \"engine/types/card-data\";\n\nexport const Tutorial4Spec: GameSpecServerFragment = {\n  aiTurn: (ctx) => {\n    const { inspector, engine, ai } = ctx;\n    const turnNumber = inspector.getTurnNumber();\n\n    const playerCreatures = inspector.getPermanents({\n      owner: Player.P1,\n      type: CardType.CREATURE,\n    });\n    const aiCreatures = inspector.getPermanents({\n      owner: Player.P2,\n      type: CardType.CREATURE,\n    });\n\n    switch (turnNumber) {\n      case 0: {\n        const base = inspector.getBases(Player.P2)[0];\n        engine.adjustPermanentStats(base, 0, -2);\n        ai.setKeyframe(\"tutorial4-start-1\");\n        return;\n      }\n      case 2: {\n        engine.spawn(\"pbee---j\", 1, 0, Player.P2);\n        engine.spawn(\"pbee---j\", 1, 1, Player.P2);\n        engine.spawn(\"two-bees\", 2, 2, Player.P2);\n        engine.spawn(\"pbee---j\", 1, 3, Player.P2);\n        engine.spawn(\"pbee---j\", 1, 4, Player.P2);\n        if (playerCreatures.length === 2) ai.setKeyframe(\"tutorial4-start-2\");\n        else ai.setKeyframe(\"tutorial4-start-2-not-all-summon\");\n        return;\n      }\n    }\n\n    // creature first attack\n    aiCreatures.forEach((creature) => {\n      ai.tryAttackFirst(creature, {\n        sort: [\n          \"creaturesFirst\",\n          \"health\",\n          { type: \"euclideanDistance\", slot: creature.slot },\n        ],\n      });\n    });\n  },\n};\n","import { Player } from \"engine/types/game-state\";\nimport { GameSpecServerFragment } from \"engine/types/game-specs\";\nimport { CardType } from \"engine/types/card-data\";\n\nexport const Tutorial5Spec: GameSpecServerFragment = {\n  beforeNewGame: (ctx) => {\n    const { engine, ai } = ctx;\n    engine.spawn(\"roe-doe-dendron\", 1, 0, Player.P2);\n    engine.spawn(\"flora-the-explora\", 2, 2, Player.P2);\n    engine.spawn(\"nepeta-legion\", 1, 4, Player.P2);\n    ai.setKeyframe(\"tutorial5-start\");\n  },\n  aiTurn: (ctx) => {\n    const { inspector, engine, ai } = ctx;\n\n    const turnVal = inspector.getTurnNumber() / 2;\n    // Don't do anything on the first turn\n    if (turnVal == 0) return;\n\n    const card = [\"flora-the-explora\", \"roe-doe-dendron\", \"nepeta-legion\"][\n      (turnVal - 1) % 3\n    ];\n\n    // TODO: Tune this preference ordering better\n    const rowPref = [1, 2, 0];\n    const colPref = [1, 3, 2, 0, 4];\n\n    // Play a random dryad if possible\n    let cardPlayed = false;\n\n    // Strong preference for playing in column 1 and 3\n    for (let r = 0; r < 3; r++) {\n      for (let c = 0; c < 2; c++) {\n        const summonResolved = ai.trySpawn(card, rowPref[r], colPref[c]);\n        if (summonResolved) {\n          cardPlayed = true;\n          break;\n        }\n      }\n      if (cardPlayed) break;\n    }\n\n    // If columns 1 and 3 are unplayable, try playing in the other columns\n    if (!cardPlayed) {\n      for (let r = 0; r < 3; r++) {\n        for (let c = 2; c < 5; c++) {\n          const summonResolved = ai.trySpawn(card, rowPref[r], colPref[c]);\n          if (summonResolved) {\n            cardPlayed = true;\n            break;\n          }\n        }\n        if (cardPlayed) break;\n      }\n    }\n\n    // basic attack\n    const aiCreatures = inspector.getPermanents({\n      owner: Player.P2,\n      type: CardType.CREATURE,\n    });\n\n    aiCreatures.forEach((creature) => {\n      ai.tryAttackFirst(creature);\n    });\n  },\n};\n","import { CardType } from \"engine/types/card-data\";\nimport { Player } from \"engine/types/game-state\";\nimport { GameSpecServerFragment } from \"engine/types/game-specs\";\n\nexport const Tutorial6Spec: GameSpecServerFragment = {\n  disableP2NoBasesLossCondition: true,\n  beforeNewGame: (ctx) => {\n    const { engine, ai } = ctx;\n  },\n  afterStep: (step, ctx) => {\n    const { inspector, engine, ai } = ctx;\n    const { keyframe } = inspector.gameState;\n    if (\n      inspector.getBases(Player.P2).length === 0 &&\n      keyframe !== undefined &&\n      keyframe.id === \"tutorial6-start-2\"\n    ) {\n      // show a final keyframe before game end\n      ai.setKeyframe(\"tutorial6-end\");\n    }\n  },\n  aiTurn: (ctx) => {\n    const { inspector, engine, ai } = ctx;\n    const turnNumber = inspector.getTurnNumber();\n\n    switch (turnNumber) {\n      case 0: {\n        const aiCamps = inspector.getPermanents({\n          name: \"camp\",\n          owner: Player.P2,\n        });\n        for (const camp of aiCamps) {\n          engine.adjustPermanentStats(camp, 0, -2);\n        }\n        if (inspector.gameState[Player.P1].hand.length <= 0) {\n          ai.setKeyframe(\"tutorial6-start-no-deck\");\n        } else {\n          ai.setKeyframe(\"tutorial6-start-1\");\n        }\n        return;\n      }\n      case 2: {\n        ai.trySpawn(\"o\", 1, 0);\n        ai.trySpawn(\"payne\", 1, 1);\n        ai.trySpawn(\"vanilla-calf\", 1, 3);\n        ai.trySpawn(\"re\", 1, 4);\n        ai.trySpawn(\"beethoven\", 2, 0);\n        ai.trySpawn(\"chicken\", 2, 1);\n        ai.trySpawn(\"petroleum-jelly\", 2, 3);\n        ai.trySpawn(\"log\", 2, 4);\n        ai.setKeyframe(\"tutorial6-start-2\");\n        break;\n      }\n    }\n\n    const aiCreatures = inspector.getPermanents({\n      owner: Player.P2,\n      type: CardType.CREATURE,\n    });\n\n    aiCreatures.forEach((creature) => {\n      ai.tryAttackFirst(creature);\n    });\n  },\n  afterGameEnd: (winner, solves, ctx) => {\n    const { engine } = ctx;\n    if (solves[Player.P1] !== undefined) engine.clearKeyframe();\n  },\n};\n","import {\n  Player,\n  Slot,\n  Permanent,\n  areSlotsEqual,\n} from \"engine/types/game-state\";\nimport { EngineContext, GameSpecServerFragment } from \"engine/types/game-specs\";\nimport { Step, StepType } from \"engine/types/steps\";\nimport { AbilityType, EffectOptResolved } from \"engine/types/effects\";\nimport { EffectOptType } from \"engine/types/effects\";\nimport { EffectOpt } from \"engine/types/effects\";\nimport { Inspector } from \"engine/Inspector\";\nimport { CounterType } from \"engine/types/counters\";\nimport { Role } from \"engine/types/updates\";\nimport { StepMaker } from \"engine/StepMaker\";\n\nconst reflectSlot = (slot: Slot, inspector: Inspector) =>\n  inspector.getReflectedSlot(slot);\n\nconst reflectPermanent = (permanent: Permanent, inspector: Inspector) =>\n  inspector\n    .getPermanentsAt(reflectSlot(permanent.slot, inspector))\n    .find(({ owner }) => owner !== permanent.owner);\n\n// check that reflected permanent is the same card\nconst areReflectionsEqual = (\n  permanent: Permanent,\n  reflection: Permanent,\n  inspector: Inspector\n) => inspector.getCardName(permanent) === inspector.getCardName(reflection);\n\nconst reflectOpt = (effectOpt: EffectOpt, inspector: Inspector): EffectOpt => {\n  if (effectOpt.type === EffectOptType.SLOT) {\n    const { slot } = effectOpt;\n    return {\n      type: EffectOptType.SLOT,\n      slot: reflectSlot(slot, inspector),\n    };\n  }\n  if (effectOpt.type === EffectOptType.PERMANENT) {\n    const { permanentId } = effectOpt;\n    const permanent = inspector.getPermanent(permanentId);\n    const newPermanent = reflectPermanent(permanent, inspector);\n    if (newPermanent) {\n      return {\n        type: EffectOptType.PERMANENT,\n        permanentId: newPermanent.id,\n      };\n    }\n  }\n  return effectOpt;\n};\n\nconst reflectOptResolved = (\n  effectOpt: EffectOptResolved,\n  inspector: Inspector\n): EffectOpt => {\n  if (effectOpt.type === EffectOptType.SLOT) {\n    const { slot } = effectOpt;\n    return {\n      type: EffectOptType.SLOT,\n      slot: reflectSlot(slot, inspector),\n    };\n  }\n  if (effectOpt.type === EffectOptType.PERMANENT) {\n    const { permanent } = effectOpt;\n    const newPermanent = reflectPermanent(permanent, inspector);\n    if (newPermanent) {\n      return {\n        type: EffectOptType.PERMANENT,\n        permanentId: newPermanent.id,\n      };\n    }\n  }\n  return effectOpt;\n};\n\n// (naively) checks if the defender is about to die from an attack from attacker\n//  should not affect the game state\n//  most of the logic is from engine.damagePermanent()\nconst isDefenderAboutToDie = (\n  attacker: Permanent,\n  defender: Permanent,\n  ctx: EngineContext\n) => {\n  const { inspector } = ctx;\n  const damage = inspector.getPower(attacker);\n  const health = inspector.getHealth(defender);\n  const isAlreadyDead = health <= 0;\n\n  // const effects = engine.getBackdoorEngine().getEffects(defender);\n  // const effectsAdjust = effects.adjustDamageReceived;\n  // const insteadOfDamaged = effects.insteadOfDamaged;\n\n  // NAH: beethoven's effect will trigger if this hook is called, so we have to be naive\n  // if (effectsAdjust) {\n  //   damage = effectsAdjust(defender, damage, attacker, ctx);\n  // }\n\n  if (damage <= 0) return isAlreadyDead;\n\n  if (\n    inspector.doesPermanentHaveCounterType(defender, CounterType.INVULNERABLE)\n  ) {\n    return isAlreadyDead;\n  }\n  // check for divine shield or cannot be destroyed\n  // divine shield pops on the first instance of damage\n  if (\n    inspector.doesPermanentHaveCounterType(\n      defender,\n      CounterType.DIVINE_SHIELD\n    ) ||\n    inspector.doesPermanentHaveCounterType(\n      defender,\n      CounterType.CANNOT_BE_DESTROYED\n    )\n  ) {\n    return isAlreadyDead;\n  }\n\n  // at this point, assume the attack will go through\n  return damage >= health;\n};\n\n// Hard-coded, needs to be kept in sync with card effects.\nconst UNITS_WITH_ATTACK_EFFECTS = new Set([\n  \"nice-cow\",\n  \"lady-jane\",\n  \"murray\",\n  \"rude-cow\",\n  \"giraffatitan\",\n  \"realistic-rex\",\n  \"touch-grass\",\n  \"roe-doe-dendron\",\n  \"switch-boar-d\",\n  \"oklahoma-tusks\",\n  \"quail-aboard-fiery-steeds\",\n  \"beeowulf\",\n  \"nightshade\",\n]) as ReadonlySet<string>;\n\ntype ExtraState = {\n  didCopyBeforeStep: boolean; // whether we copied an attack/special in the beforeStep\n};\n\nexport const Puzzle4Spec: GameSpecServerFragment = {\n  // if both players have no bases, then P1 loses\n  disableP2NoBasesLossCondition: true,\n  extraLoseChecks: (player, ctx) => {\n    const { inspector } = ctx;\n    const doesPlayerHaveBases = (player: Player) =>\n      inspector.getBases(player).length > 0;\n    if (player === Player.P2) {\n      // Check if P2 has no bases left and P1 has some base.\n      // This is necessary because afterStep gets evaluated\n      // before the lose checks.\n      return (\n        !doesPlayerHaveBases(player) &&\n        doesPlayerHaveBases(inspector.getOpponentOf(player))\n      );\n    }\n    return false;\n  },\n\n  afterInitEngine: (ctx) => {\n    ctx.engine.initExtraState({\n      didCopyBeforeStep: false,\n    } as ExtraState);\n  },\n  beforeNewGame: (ctx) => {\n    // copy P1's bases\n    const { inspector, engine } = ctx;\n    const bases = inspector.getDefaultBases(Player.P1);\n    const baseColumns = inspector.getBasePositions(Player.P2, bases.length);\n    for (let i = 0; i < bases.length; i++) {\n      const slot = {\n        row: inspector.getPlayerRowIndex(0, Player.P2),\n        column: baseColumns[i],\n      };\n      engine.spawn(bases[i], slot, Player.P2);\n    }\n  },\n  beforeStep: (step, ctx) => {\n    const { inspector, engine, ai } = ctx;\n    const ext = engine.getExtraState() as ExtraState;\n    const tryStep = (step: Step) => engine.getBackdoorEngine().aiTryStep(step);\n    const sm = new StepMaker(inspector, Player.P2, Role.GOD);\n\n    switch (step.type) {\n      case StepType.SUMMON: {\n        // const { player, slot, cardName } = step;\n        const { player, slot, handCardId, cardName } = step;\n        if (player !== Player.P1) break;\n\n        const resolvedCardName = (() => {\n          if (handCardId !== undefined) {\n            const handCard = inspector.getCardInHandIfExists(\n              player,\n              handCardId\n            );\n            if (!handCard) return null;\n            return inspector.getCardName(handCard);\n          }\n          return null;\n        })();\n\n        const spawnCardName = resolvedCardName ?? cardName;\n        if (spawnCardName) {\n          tryStep(sm.spawn(spawnCardName, reflectSlot(slot, inspector)));\n        }\n\n        // NAH: possibly we want two New Boarns to still attack each other from different slots?\n        // if so, then we can store state to create a 1:1 map between player's units and the copied units\n        break;\n      }\n      case StepType.MOVE: {\n        const { permanentId, slot } = step;\n        const permanent = inspector.getPermanent(permanentId);\n        if (permanent.owner !== Player.P1) break;\n        const reflectedPermanent = reflectPermanent(permanent, inspector);\n        const reflectedSlot = reflectSlot(slot, inspector);\n\n        if (\n          reflectedPermanent &&\n          areReflectionsEqual(permanent, reflectedPermanent, inspector)\n        ) {\n          tryStep(sm.move(reflectedPermanent, reflectedSlot));\n        }\n        break;\n      }\n      case StepType.ATTACK: {\n        const { attackerId, defenderId } = step;\n        const attacker = inspector.getPermanent(attackerId);\n        const defender = inspector.getPermanent(defenderId);\n        if (attacker.owner !== Player.P1) break;\n\n        // AI attacks first. however, if the AI is about to die, then it lets the player attack first, then clones to attack.\n        if (isDefenderAboutToDie(attacker, defender, ctx)) break;\n\n        const reflectAttacker = reflectPermanent(attacker, inspector);\n        const reflectDefender = reflectPermanent(defender, inspector);\n        let isSuccess = false;\n        if (reflectAttacker && reflectDefender) {\n          isSuccess = tryStep(sm.attack(reflectAttacker, reflectDefender));\n        }\n        if (isSuccess) ext.didCopyBeforeStep = true;\n\n        break;\n      }\n      case StepType.ACTIVATE_ABILITY: {\n        const { permanentId, abilityType, effectOpts } = step;\n        const permanent = inspector.getPermanent(permanentId);\n        if (permanent.owner !== Player.P1) break;\n\n        // TODO: uncurse this\n\n        // --- WARNING -- EXTREMELY CURSED ---\n        // check if the special involves an attack\n        // if so, assume that the permanent is attacking the first opt\n        //  and check isDefenderAboutToDie\n        // if so, then let the player attack first, then clone the special\n        const effects = engine.getBackdoorEngine().getEffects(permanent);\n        const effect =\n          abilityType === AbilityType.FLEX\n            ? effects.onRepeatable\n            : effects.onSpecial;\n\n        if (UNITS_WITH_ATTACK_EFFECTS.has(permanent.card.name || \"\")) {\n          const firstOpt = effectOpts[0];\n          if (!firstOpt) break;\n          if (firstOpt.type !== EffectOptType.PERMANENT) break;\n          const defender = inspector.getPermanent(firstOpt.permanentId);\n          if (isDefenderAboutToDie(permanent, defender, ctx)) break;\n        }\n\n        // --- END OF CURSED CODE ---\n\n        const reflectedPermanent = reflectPermanent(permanent, inspector);\n        const reflectedEffectOpts = effectOpts.map((opt) =>\n          reflectOpt(opt, inspector)\n        );\n        let isSuccess = false;\n        if (reflectedPermanent) {\n          isSuccess = tryStep(\n            sm.activateAbility(\n              reflectedPermanent,\n              abilityType,\n              reflectedEffectOpts\n            )\n          );\n        }\n        if (isSuccess) ext.didCopyBeforeStep = true;\n      }\n    }\n\n    // Revalidate whether we can execute the step, since the actions\n    // performed here may cause the step to no longer be valid.\n    const stepResolved = engine.getBackdoorEngine().resolve(step, Role.GOD);\n    return stepResolved !== null;\n  },\n  afterStep: (step, ctx) => {\n    const { inspector, engine, ai } = ctx;\n    const ext = engine.getExtraState() as ExtraState;\n\n    const tryStep = (step: Step) => engine.getBackdoorEngine().aiTryStep(step);\n    const sm = new StepMaker(inspector, Player.P2, Role.GOD);\n\n    // Spawn a card to slot without announcing or triggering any SUMMON effects.\n    const silentSpawn = (\n      permToCopy: Permanent,\n      slot: Slot,\n      player: Player\n    ): boolean => {\n      if (!inspector.isSlotInBounds(slot)) return false;\n      if (inspector.isSlotOccupied(slot)) return false;\n      const cardName = permToCopy.card.name;\n      const permanent = engine\n        .getBackdoorEngine()\n        .cardToPermanent({ name: cardName }, player, slot);\n      engine.getBackdoorController().createPermanent(permanent);\n      for (const c of permToCopy.counters) {\n        engine.addCounter(permanent, c);\n      }\n      return true;\n    };\n\n    const reportCopyFailed = () => {\n      ai.speak(\"...copy failed... 🥀\");\n    };\n\n    switch (step.type) {\n      case StepType.SUMMON: {\n        // handled in beforeStep\n        break;\n      }\n      case StepType.ATTACK: {\n        // only execute if the attack wasn't already copied in the beforeStep\n        if (ext.didCopyBeforeStep) {\n          ext.didCopyBeforeStep = false;\n          break;\n        }\n        const { attacker, defender } = step;\n        if (attacker.owner !== Player.P1) break;\n\n        const newAttacker = reflectPermanent(attacker, inspector);\n        const newDefender = reflectPermanent(defender, inspector);\n\n        let isSuccess = false;\n        if (\n          newAttacker &&\n          newDefender &&\n          tryStep(sm.attack(newAttacker, newDefender))\n        )\n          isSuccess = true;\n\n        if (isSuccess) break;\n\n        const isDefenderAboutToDie =\n          defender.damage >= inspector.getMaxHealth(defender);\n        const isDefenderReflectedAttacker = areSlotsEqual(\n          defender.slot,\n          reflectSlot(attacker.slot, inspector)\n        );\n\n        if (\n          isDefenderAboutToDie &&\n          isDefenderReflectedAttacker &&\n          newDefender // need a target to attack\n        ) {\n          // spawn a temporary attacker to copy the attack, then kill it\n          // don't trigger any summon effects\n          if (\n            silentSpawn(\n              attacker,\n              reflectSlot(attacker.slot, inspector),\n              Player.P2\n            )\n          ) {\n            const tempAttacker = inspector.getPermanentAtIfExists(\n              reflectSlot(attacker.slot, inspector)\n            );\n\n            if (tempAttacker) {\n              engine.ready(tempAttacker);\n              if (tryStep(sm.attack(tempAttacker, newDefender)))\n                isSuccess = true;\n\n              // destroy temp attacker, attributed to P1's attacker\n              engine.destroy(attacker, tempAttacker);\n            }\n          }\n        }\n        if (!isSuccess) reportCopyFailed();\n        break;\n      }\n      case StepType.MOVE: {\n        // handled in beforeStep\n        break;\n      }\n      case StepType.ACTIVATE_ABILITY: {\n        // only execute if the attack wasn't already copied in the beforeStep\n        if (ext.didCopyBeforeStep) {\n          ext.didCopyBeforeStep = false;\n          break;\n        }\n        const { permanent, abilityType, effectOptsResolved } = step;\n        if (permanent.owner !== Player.P1) break;\n        const newPermanent = reflectPermanent(permanent, inspector);\n        const newEffectOpts = effectOptsResolved.map((opt) =>\n          reflectOptResolved(opt, inspector)\n        );\n\n        let isSuccess = false;\n        if (\n          newPermanent &&\n          tryStep(sm.activateAbility(newPermanent, abilityType, newEffectOpts))\n        )\n          isSuccess = true;\n\n        if (isSuccess) break;\n\n        // spawn a temporary attacker to copy the attack, then kill it\n        // don't trigger any summon effects\n        if (\n          silentSpawn(\n            permanent,\n            reflectSlot(permanent.slot, inspector),\n            Player.P2\n          )\n        ) {\n          const tempAttacker = inspector.getPermanentAtIfExists(\n            reflectSlot(permanent.slot, inspector)\n          );\n\n          if (tempAttacker) {\n            engine.ready(tempAttacker);\n            if (\n              tryStep(\n                sm.activateAbility(tempAttacker, abilityType, newEffectOpts)\n              )\n            )\n              isSuccess = true;\n\n            // destroy temp attacker, attributed to P1's permanent\n            engine.destroy(permanent, tempAttacker);\n          }\n        }\n\n        if (!isSuccess) reportCopyFailed();\n\n        break;\n      }\n    }\n  },\n  aiTurn: (ctx) => {\n    // do nothing, say something\n    const { inspector, ai } = ctx;\n    if (inspector.getTurnNumber() === 0) {\n      ai.speak(\n        \"...watchful gnomes... 🌹 ...mimic foe...\\n...leave no openings... 🌺 ...none shall pass...\"\n      );\n    }\n  },\n  afterTurnEnd: (player, ctx) => {\n    const { inspector, engine, ai } = ctx;\n\n    if (player === Player.P2) {\n      // P2 just ended turn. Ready all P2's units\n      const permanents = inspector.getPermanents({ owner: Player.P2 });\n      for (const permanent of permanents) {\n        engine.ready(permanent);\n      }\n    }\n  },\n};\n","import { CardType, ColorSymbol } from \"engine/types/card-data\";\nimport { CounterType } from \"engine/types/counters\";\nimport { GameSpecServerFragment } from \"engine/types/game-specs\";\nimport { Player } from \"engine/types/game-state\";\n\n// attacking mint creatures deals damage based on attacker color & mint creature category\ntype DamageMap = { [color: string]: number };\nconst DAMAGE_MAPS: { [category: string]: DamageMap } = {\n  CAD: {\n    [ColorSymbol.PURPLE]: 10,\n    [ColorSymbol.GREEN]: 20,\n    [ColorSymbol.RED]: 50,\n  },\n  EUR: {\n    [ColorSymbol.WHITEBLACK]: 5,\n    [ColorSymbol.RED]: 10,\n    [ColorSymbol.GREEN]: 100,\n    [ColorSymbol.YELLOW]: 200,\n    [ColorSymbol.PURPLE]: 500,\n  },\n  AUD: {\n    [ColorSymbol.PURPLE]: 5,\n    [ColorSymbol.RED]: 20,\n    [ColorSymbol.YELLOW]: 50,\n    [ColorSymbol.GREEN]: 100,\n  },\n  KRW: {\n    [ColorSymbol.RED]: 5000,\n    [ColorSymbol.GREEN]: 10000,\n    [ColorSymbol.YELLOW]: 50000,\n  },\n  CHF: {\n    [ColorSymbol.YELLOW]: 10,\n    [ColorSymbol.RED]: 20,\n    [ColorSymbol.GREEN]: 50,\n    [ColorSymbol.PURPLE]: 1000,\n  },\n  SEK: {\n    [ColorSymbol.PURPLE]: 20,\n    [ColorSymbol.GREEN]: 200,\n    [ColorSymbol.RED]: 500,\n  },\n  THB: {\n    [ColorSymbol.GREEN]: 20,\n    [ColorSymbol.RED]: 100,\n    [ColorSymbol.PURPLE]: 500,\n  },\n  BRL: {\n    [ColorSymbol.PURPLE]: 5,\n    [ColorSymbol.RED]: 10,\n    [ColorSymbol.YELLOW]: 20,\n    [ColorSymbol.WHITEBLACK]: 200,\n  },\n};\n\n// map mintable creatures to their weaknesses\nconst mintCreatures: { [name: string]: DamageMap } = {\n  goose: DAMAGE_MAPS.CAD,\n  poutine: DAMAGE_MAPS.CAD,\n  wisent: DAMAGE_MAPS.EUR,\n  \"twelve-stars\": DAMAGE_MAPS.EUR,\n  \"consort-on-a-bull-deity\": DAMAGE_MAPS.EUR,\n  \"spicy-fermented-cabbage\": DAMAGE_MAPS.KRW,\n  hallyu: DAMAGE_MAPS.KRW,\n  \"wombat-mob\": DAMAGE_MAPS.AUD,\n  \"jar-of-vegemite\": DAMAGE_MAPS.AUD,\n  didgeridoo: DAMAGE_MAPS.AUD,\n  \"toblerone-dipped-in-fondue\": DAMAGE_MAPS.CHF,\n  \"plus-sign\": DAMAGE_MAPS.CHF,\n  \"army-knife\": DAMAGE_MAPS.CHF,\n  \"pungent-canned-herring\": DAMAGE_MAPS.SEK,\n  \"dala-horse\": DAMAGE_MAPS.SEK,\n  \"green-curry\": DAMAGE_MAPS.THB,\n  \"red-curry\": DAMAGE_MAPS.THB,\n  \"ka-api-ara\": DAMAGE_MAPS.BRL,\n  \"toasted-cassava\": DAMAGE_MAPS.BRL,\n  \"order-and-progress\": DAMAGE_MAPS.BRL,\n};\n\nexport const Puzzle8Spec: GameSpecServerFragment = {\n  adjustDamageReceived: (permanent, damage, attacker, ctx) => {\n    const { inspector, engine } = ctx;\n\n    if (!attacker) return damage;\n\n    const name = inspector.getCardName(permanent);\n    const weaknesses = mintCreatures[name];\n    if (!weaknesses) return damage; // all other creatures take normal damage\n\n    const defenderColor = inspector.getCardColor(permanent);\n    const attackerColor = inspector.getCardColor(attacker);\n\n    // non-existent color\n    if (!attackerColor || !defenderColor) return 0;\n\n    // if attacker same color, take 0\n    if (defenderColor === attackerColor) return 0;\n\n    // check damageMap\n    if (weaknesses[attackerColor]) {\n      return weaknesses[attackerColor];\n    }\n\n    // deal 0 damage otherwise\n    return 0;\n  },\n  afterStep: (step, ctx) => {\n    const { engine, inspector } = ctx;\n    const p2Creatures = inspector.getPermanents({\n      owner: Player.P2,\n      isBase: false,\n    });\n    if (p2Creatures.length === 0) {\n      const mints = inspector.getPermanents({\n        owner: Player.P2,\n        isBase: true,\n      });\n      for (const mint of mints) {\n        engine.removeCounterType(mint, CounterType.INVULNERABLE);\n      }\n    }\n  },\n  aiTurn: (ctx) => {\n    const { inspector, engine, ai } = ctx;\n    if (inspector.getTurnNumber() === 0) {\n      ai.speak(\n        \"How did you GET in here? I swear this boar treasury is OFF-LIMITS to VISITORS, or my name isn’t MISTER PENNY!\"\n      );\n    }\n\n    // TODO: if lost, say \"nooo!! my life’s work... ruined! please don’t tell my wife...\"\n\n    // mints spawn\n    let mints = inspector.getPermanents({\n      owner: Player.P2,\n      name: \"mint\",\n    });\n\n    // spawn 1 creature for first 5 turns, then spawn 2\n    let numToSpawn = 1;\n\n    if (inspector.getTurnNumber() / 2 === 5) {\n      mints.forEach((mint) => {\n        engine.getBackdoorEngine().transformPermanent(mint, \"mint--overdrive-\");\n      });\n      ai.speak(\"ENTERING MINTY OVERDRIVE!!!\");\n    }\n\n    if (inspector.getTurnNumber() / 2 >= 5) {\n      numToSpawn = 2;\n      mints = inspector.getPermanents({\n        owner: Player.P2,\n        name: \"mint--overdrive-\",\n      });\n    }\n\n    const mintsRandom = mints.sort(() => Math.random() - 0.5);\n\n    let spawned = 0;\n\n    for (const mint of mintsRandom) {\n      const { row, column } = mint.slot;\n      const creatureNameRandom =\n        Object.keys(mintCreatures)[\n          Math.floor(Math.random() * Object.keys(mintCreatures).length)\n        ];\n      const success = ai.trySpawn(creatureNameRandom, row + 1, column);\n      if (success) {\n        spawned++;\n      }\n      if (spawned >= numToSpawn) {\n        break;\n      }\n    }\n\n    // Update mint invuln\n    if (spawned > 0) {\n      for (const mint of mints) {\n        engine.removeCounterType(mint, CounterType.INVULNERABLE);\n        engine.addCounter(mint, { type: CounterType.INVULNERABLE });\n      }\n    }\n\n    // move / attack with all units\n    const creatures = inspector.getPermanents({\n      owner: Player.P2,\n      type: CardType.CREATURE,\n    });\n\n    for (const creature of creatures) {\n      let moved = false;\n      // move down to row 5, if unblocked\n      if (creature.slot.row < 4) {\n        moved = ai.tryMoveRel(creature, 1, 0);\n      }\n      if (!moved) {\n        ai.tryAttackFirst(creature);\n      }\n    }\n  },\n};\n","import { CounterType } from \"engine/types/counters\";\nimport { AbilityType } from \"engine/types/effects\";\nimport { Slot, Permanent, Player } from \"engine/types/game-state\";\nimport { StepType } from \"engine/types/steps\";\nimport { Speaker } from \"engine/types/keyframes\";\nimport { GameSpecServerFragment, AIContext } from \"engine/types/game-specs\";\nimport { PermanentEventType } from \"engine/server-hooks\";\nimport { specialThreatened } from \"engine/game-specs/puzzle-9-shared\";\n\ntype ExtraState = {\n  lastKnownKeepSlot: Slot;\n};\n\nconst UNIT_NAME_WHITE_PIECE = \"vanilla-calf\";\nconst UNIT_NAME_B = \"bell-flower\";\nconst UNIT_NAME_P = \"petroleum-jelly\";\nconst UNIT_NAME_Q = \"quail-aboard-fiery-steeds\";\nconst UNIT_NAME_R = \"realistic-rex\";\n\nconst unitAI: {\n  [cardName: string]: (unit: Permanent, ctx: AIContext) => void;\n} = {\n  [UNIT_NAME_P]: (unit, ctx) => {\n    const { inspector, engine, ai } = ctx;\n    let here = unit.slot;\n    let unitAttacked = false;\n    for (const defender of inspector.getPermanentsOf(Player.P1)) {\n      if (ai.tryAttack(unit, defender)) {\n        unitAttacked = true;\n        break;\n      }\n    }\n    if (!unitAttacked) {\n      ai.tryMoveRel(unit, 1, 0);\n    }\n    here = unit.slot;\n    if (here.row == 5) {\n      engine.despawn(unit);\n      engine.spawn(UNIT_NAME_Q, here, Player.P2);\n    }\n  },\n  [UNIT_NAME_WHITE_PIECE]: (unit, ctx) => {\n    // Attack if possible, otherwise move toward center column, otherwise move forward\n    const { inspector, ai } = ctx;\n    ai.tryActivateAbility(unit, AbilityType.FLEX);\n    for (const defender of inspector.getPermanentsOf(Player.P1)) {\n      if (ai.tryAttack(unit, defender)) {\n        return true;\n      }\n    }\n    // Move toward center if possible, otherwise move forward\n    if (ai.tryMove(unit, unit.slot.row, [1, 2, 2, 2, 3][unit.slot.column]))\n      return true;\n    if (ai.tryMoveRel(unit, 1, 0)) return true;\n    return;\n  },\n  [UNIT_NAME_B]: (unit, ctx) => {\n    // Attack if possible, otherwise move away from center column, otherwise move forward\n    const { inspector, ai } = ctx;\n    ai.tryActivateAbility(unit, AbilityType.FLEX);\n    for (const defender of inspector.getPermanentsOf(Player.P1)) {\n      if (ai.tryAttack(unit, defender)) {\n        return true;\n      }\n    }\n    // Move away from center if possible, otherwise move forward\n\n    if (ai.tryMove(unit, unit.slot.row, [0, 0, 1, 4, 4][unit.slot.column]))\n      return true;\n    if (ai.tryMoveRel(unit, 1, 0)) return true;\n    return;\n  },\n  [UNIT_NAME_R]: (unit, ctx) => {\n    // Attack if possible, otherwise move toward center column, otherwise move forward\n    // TODO: Refine this? Maybe try to line up against the enemy Keep specifically\n    const { inspector, ai } = ctx;\n    for (const defender of inspector.getPermanentsOf(Player.P1)) {\n      if (ai.tryAttack(unit, defender)) {\n        return true;\n      }\n    }\n    // Move toward odd positions if possible, otherwise move backward\n\n    if (ai.tryMove(unit, unit.slot.row, 3)) {\n      return true;\n    }\n    if (ai.tryMoveRel(unit, -1, 0)) {\n      return true;\n    }\n    return;\n  },\n  [UNIT_NAME_Q]: (unit, ctx) => {\n    // Attack if possible, otherwise move toward center column, otherwise move forward\n    // TODO: Refine this? Maybe try to line up against the enemy Keep specifically\n    const { inspector, ai } = ctx;\n    for (const defender of inspector.getPermanentsOf(Player.P1)) {\n      if (ai.tryAttack(unit, defender)) {\n        return true;\n      }\n    }\n    // Move toward odd positions if possible, otherwise move backward\n\n    if (ai.tryMove(unit, unit.slot.row, 3)) {\n      return true;\n    }\n    if (ai.tryMoveRel(unit, -1, 0)) {\n      return true;\n    }\n    return;\n  },\n};\n\nexport const Puzzle9Spec: GameSpecServerFragment = {\n  counterData: {\n    [CounterType.BODY_SLAM]: {\n      handlers: {\n        [PermanentEventType.AFTER_DESTROY_UNIT]: (event) => {\n          const { permanent, defender, ctx } = event;\n          const { engine } = ctx;\n          engine.move(permanent, defender.slot);\n        },\n      },\n    },\n  },\n\n  aiTurn: (ctx) => {\n    const { inspector, engine, ai } = ctx;\n    const turnNumber = inspector.getTurnNumber();\n    const units = inspector.getPermanentsOf(Player.P2);\n    if (turnNumber == 0) {\n      for (let c = 0; c < 5; c++) {\n        ai.trySpawn(UNIT_NAME_P, 1, c);\n      }\n      ai.speak(\n        \"Behold my confounding moo-gicks! Your Units won’t behave the same as normal here!\"\n      );\n      return;\n    }\n    // act with all present units\n    for (const unit of units) {\n      const unitAIFunc = unitAI[inspector.getCardName(unit)];\n      if (unitAIFunc) {\n        unitAIFunc(unit, ctx);\n      }\n    }\n    // TODO: Spawn more units on certain turns\n    switch (turnNumber) {\n      case 4: // After player's second turn\n        for (let c = 1; c < 4; c++) {\n          ai.trySpawn(UNIT_NAME_WHITE_PIECE, 1, c);\n        }\n        break;\n      case 8: // After the player's fourth turn\n        for (const col of [0, 4]) {\n          for (const row of [0, 1]) {\n            ai.trySpawn(UNIT_NAME_B, row, col);\n          }\n        }\n        break;\n      case 12: // After the player's sixth turn\n        for (let c = 0; c < 5; c++) {\n          ai.trySpawn(UNIT_NAME_P, 1, c);\n        }\n        break;\n      case 14: // After the player's seventh turn\n        for (let c = 0; c < 5; c++) {\n          if (ai.trySpawn(UNIT_NAME_R, 0, c)) {\n            break;\n          }\n        }\n        for (let c = 4; c >= 0; c--) {\n          if (ai.trySpawn(UNIT_NAME_R, 0, c)) {\n            break;\n          }\n        }\n        break;\n      default:\n        // Every three turns starting after the player's ninth turn\n        if (turnNumber >= 18 && turnNumber % 6 == 0) {\n          for (let c = 0; c < 5; c++) {\n            ai.trySpawn(UNIT_NAME_P, 1, c);\n            ai.trySpawn(\n              [UNIT_NAME_R, UNIT_NAME_B, UNIT_NAME_Q, UNIT_NAME_B, UNIT_NAME_R][\n                c\n              ],\n              0,\n              c\n            );\n          }\n        }\n    }\n    return true;\n  },\n  afterSummon: (permanent, ctx) => {\n    const { inspector, engine } = ctx;\n    if (\n      inspector\n        .getCardName(permanent)\n        .toLowerCase()\n        .match(/^[kqrbnp].*/)\n    ) {\n      engine.adjustPermanentStats(permanent, 1, 0);\n      engine.addCounter(permanent, { type: CounterType.BODY_SLAM });\n    }\n  },\n  afterInitEngine: (ctx) => {\n    ctx.engine.initExtraState({\n      lastKnownKeepSlot: { row: 0, column: 2 },\n    });\n  },\n  afterStep: (step, ctx) => {\n    const { inspector, engine } = ctx;\n    const ourKeep = inspector\n      .getPermanentsOf(Player.P2)\n      .filter(\n        (permanent) => inspector.getSharedEffects(permanent).isBase ?? false\n      )[0];\n    if (!ourKeep) {\n      return; // this is the step that killed it!\n    }\n    const ext = engine.getExtraState() as ExtraState;\n    ext.lastKnownKeepSlot = ourKeep.slot;\n\n    // check for player pawn promotion\n    if (\n      step.type == StepType.MOVE &&\n      step.slot.row == 0 &&\n      step.permanent.owner == Player.P1 &&\n      (inspector.getCardName(step.permanent).toLowerCase().match(/^p.*/) ??\n        false)\n    ) {\n      engine.despawn(step.permanent);\n      engine.spawn(UNIT_NAME_Q, step.slot, Player.P1);\n    } else if (\n      step.type == StepType.ATTACK &&\n      step.attacker.owner == Player.P1 &&\n      step.attacker.slot.row == 0 &&\n      (inspector.getCardName(step.attacker).toLowerCase().match(/^p.*/) ??\n        false)\n    ) {\n      engine.despawn(step.attacker);\n      engine.spawn(UNIT_NAME_Q, step.attacker.slot, Player.P1);\n    }\n  },\n  extraSolveChecks: (player, winner, ctx) => {\n    const { inspector, engine } = ctx;\n    const ext = engine.getExtraState() as ExtraState;\n    const slot = ext.lastKnownKeepSlot;\n\n    // now check all 8-adjacent things of slot\n    for (const dr of [-1, 0, 1]) {\n      for (const dc of [-1, 0, 1]) {\n        if (dr === 0 && dc === 0) {\n          continue;\n        }\n        const adjSlot = { row: slot.row + dr, column: slot.column + dc };\n        if (!inspector.isSlotInBounds(adjSlot)) {\n          continue;\n        }\n        const blocker = inspector.getPermanentsAt(adjSlot);\n        if (blocker.length > 0) {\n          if (blocker[0].owner == Player.P2) {\n            // King blocked by ally\n            continue;\n          }\n        }\n        // TODO: If there is a Player.P1 piece blocking the space, we should\n        // check if the King can safely take it -- which is to say, the King can\n        // capture the piece without taking damage, and the piece is not\n        // guarded. The latter check just falls down to the logic below, but the\n        // check on whether the King can actually capture gets weird (weirder\n        // than a straight power-vs-health check) when random defensive\n        // abilities come into play.\n\n        // fake permanent, so we can reuse logic\n        // TODO: Make specialThreatened take in slots instead.\n        // Backdoor access to engine.engine here is a hack and is\n        // not supported.\n        const defender = engine\n          .getBackdoorEngine()\n          .cardToPermanent({ name: UNIT_NAME_P }, Player.P2, adjSlot);\n\n        let foundAttacker = false;\n        for (const attacker of inspector.getPermanentsOf(Player.P1)) {\n          if (specialThreatened(attacker, defender, ctx)) {\n            foundAttacker = true;\n            break;\n          }\n        }\n\n        if (!foundAttacker) {\n          return false;\n        }\n      }\n    }\n\n    return true;\n  },\n  afterGameEnd: (winner, solves, ctx) => {\n    const { engine, ai } = ctx;\n    if (!(solves[Player.P1] ?? false) && winner == Player.P1) {\n      ai.speak(\n        \"As you raised the uwuand, Blancmange slid away! It seems you failed to befriend it. How puzzling!\",\n        {\n          hideBattler: true,\n          speaker: Speaker.NARRATOR,\n        }\n      );\n    } else {\n      engine.clearKeyframe();\n    }\n  },\n};\n","import { Slot, Permanent } from \"engine/types/game-state\";\nimport { Inspector } from \"engine/Inspector\";\nimport { WALL_NAME } from \"./puzzle-22-data\";\n\nconst N = 100; // must be bigger than board size\nexport function slotToIndex(slot: Slot) {\n  return N * slot.row + slot.column;\n}\nexport function indexToSlot(index: number) {\n  return {\n    row: Math.floor(index / N),\n    column: index % N,\n  };\n}\n\nconst WALLS = new Set([WALL_NAME]);\n\nexport enum SokobanUpdateType {\n  MOVE,\n  APPLY_POWERUP,\n}\nexport type MoveDescription = {\n  type: SokobanUpdateType.MOVE;\n  permanent: Permanent;\n  rowDiff: number;\n  colDiff: number;\n};\nexport type ApplyPowerupDescription = {\n  type: SokobanUpdateType.APPLY_POWERUP;\n  permanent: Permanent;\n  powerupPermanent: Permanent;\n};\nexport type UpdateDescription = MoveDescription | ApplyPowerupDescription;\n\nexport class SokobanState {\n  // key = location (index), value = list of permanents at that slot\n  constructor(\n    private actors: { [index: number]: Permanent[] },\n    private inspector: Inspector\n  ) {}\n\n  static makeStateFromInspector(inspector: Inspector) {\n    const locations: { [index: number]: Permanent[] } = {};\n    for (const perm of inspector.getAllPermanents()) {\n      locations[slotToIndex(perm.slot)] ||= [];\n      locations[slotToIndex(perm.slot)].push(perm);\n    }\n    return new SokobanState(locations, inspector);\n  }\n\n  private get rows() {\n    return this.inspector.getNumRows();\n  }\n\n  private get cols() {\n    return this.inspector.getNumColumns();\n  }\n\n  // Return a list of updates, in order, that must be made to apply the push.\n  getPushResult(\n    maxPower: number,\n    permanent: Permanent,\n    rowDiff: number,\n    colDiff: number\n  ): UpdateDescription[] {\n    if (Math.abs(rowDiff) + Math.abs(colDiff) !== 1) {\n      // Unit is magically hopping, no pushing!\n      const nextSlot = this.getResultingSlot(permanent.slot, rowDiff, colDiff);\n      if (nextSlot == null || this.slotHasWall(nextSlot)) {\n        // wall (or boundary)! can't move.\n        return [];\n      }\n      const actorInWay = this.getActorAt(nextSlot);\n      if (actorInWay) {\n        return [];\n      }\n      return [\n        {\n          type: SokobanUpdateType.MOVE,\n          permanent,\n          rowDiff,\n          colDiff,\n        },\n      ];\n    }\n\n    const startSlot = permanent.slot;\n    let currSlot = startSlot;\n    const allSlots = [startSlot];\n    let currWeight = 0;\n    let canMove = false;\n    while (true) {\n      const nextSlot = this.getResultingSlot(currSlot, rowDiff, colDiff);\n      if (nextSlot == null || this.slotHasWall(nextSlot)) {\n        // wall (or boundary)! can't move.\n        break;\n      }\n\n      allSlots.push(nextSlot);\n\n      const thingToAttemptToPush = this.getActorAt(nextSlot);\n      if (!thingToAttemptToPush) {\n        canMove = true;\n        break;\n      }\n      // Attempt to push the next thing\n      const newWeight = currWeight + this.getWeightOf(thingToAttemptToPush);\n      if (newWeight > maxPower) {\n        break;\n      }\n      currWeight = newWeight;\n      currSlot = nextSlot;\n    }\n    if (!canMove) {\n      return [];\n    }\n    const allUpdates = [] as UpdateDescription[];\n    for (let i = 0; i < allSlots.length; i++) {\n      // Skip last spot\n      if (i == allSlots.length - 1) {\n        break;\n      }\n      const slot = allSlots[i];\n      const perm = this.getActorAt(slot);\n      if (!perm) {\n        throw new Error(\"error in sokoban logic :(\");\n      }\n      allUpdates.push({\n        type: SokobanUpdateType.MOVE,\n        permanent: perm,\n        rowDiff,\n        colDiff,\n      });\n    }\n    // Reverse the order, because moves should start from farther away\n    allUpdates.reverse();\n    return allUpdates;\n  }\n\n  getWeightOf(perm: Permanent) {\n    // please don't move camp\n    if (perm.card.name === \"camp\") {\n      return 99;\n    }\n    // This used to be the weight\n    return 1;\n  }\n\n  getActorsAt(slot: Slot) {\n    return this.actors[slotToIndex(slot)] || [];\n  }\n\n  getActorAt(slot: Slot) {\n    // return this.getActorsAt(slot).find(\n    //   (perm) => !STACKABLE.has(perm.card.name || \"\")\n    // );\n\n    // when stackables don't exist, this is just the actor on the slot.\n    return this.getActorsAt(slot).find((perm) => true);\n  }\n\n  slotHasWall(slot: Slot) {\n    return !!this.getActorsAt(slot).find((perm) =>\n      WALLS.has(perm.card.name || \"\")\n    );\n  }\n\n  isSlotInBounds(slot: Slot) {\n    return (\n      0 <= slot.row &&\n      slot.row < this.rows &&\n      0 <= slot.column &&\n      slot.column < this.cols\n    );\n  }\n\n  // The slot that moving in the given relative amount will result in,\n  // or null if that's out of bounds.\n  getResultingSlot(slot: Slot, rowDiff: number, colDiff: number) {\n    const newSlot = {\n      row: slot.row + rowDiff,\n      column: slot.column + colDiff,\n    };\n    if (!this.isSlotInBounds(newSlot)) {\n      return null;\n    }\n    return newSlot;\n  }\n}\n","import { CreatedPermanentEvent, PermanentEventType } from \"engine/server-hooks\";\nimport { CounterType } from \"engine/types/counters\";\nimport { EngineContext, GameSpecServerFragment } from \"engine/types/game-specs\";\nimport {\n  ALL_AUTO_BATTLERS,\n  FIGHTER_ALLY_NAME,\n  WALL_NAME,\n  BOX_NAME,\n  LEVEL_INITERS,\n  LEVEL_INDICES,\n  ALL_PUSHERS,\n  EXPLOSIVES_NAME,\n  ZAP_PUSHER_NAME,\n  ARMORED_CAMP_NAME,\n  ARMORED_FIGHTER_ENEMY_NAME,\n} from \"./puzzle-22-data\";\nimport { SokobanState, SokobanUpdateType } from \"./puzzle-22-logic\";\nimport { Permanent } from \"engine/types/game-state\";\nimport { CardEffects } from \"engine/cards/card-effects\";\nimport { PermanentEffectOptResolved } from \"engine/types/effects\";\nimport { StepType } from \"engine/types/steps\";\n\nconst CARD_EFFECTS_BASE = {\n  [WALL_NAME]: {\n    handlers: {\n      [PermanentEventType.CREATED]: initWallCounters,\n    },\n  },\n  [FIGHTER_ALLY_NAME]: {\n    handlers: {\n      [PermanentEventType.CREATED]: initFriendlyUnitCounters,\n    },\n  },\n  [EXPLOSIVES_NAME]: {\n    handlers: {\n      [PermanentEventType.CREATED]: (ev) => {\n        ev.ctx.engine.addCounter(ev.permanent, {\n          type: CounterType.CANNOT_MOVE,\n        });\n        ev.ctx.engine.addCounter(ev.permanent, {\n          type: CounterType.CANNOT_ATTACK,\n        });\n        ev.ctx.engine.addCounter(ev.permanent, {\n          type: CounterType.CANNOT_CREATE,\n        });\n      },\n      [PermanentEventType.AFTER_DESTROYED]: (ev) => {\n        const { inspector, engine } = ev.ctx;\n\n        engine.announce(\"Explosives... explode!\");\n        for (const perm of inspector.getPermanents({\n          touching: ev.permanent.slot,\n        })) {\n          engine.damageUnattributed(perm, 2);\n        }\n      },\n    },\n  },\n  [ZAP_PUSHER_NAME]: {\n    onRepeatable(step, ctx) {\n      const effectOpt = step\n        .effectOptsResolved[0] as PermanentEffectOptResolved;\n      ctx.engine.damage(\n        step.permanent,\n        effectOpt.permanent,\n        ctx.inspector.getPower(step.permanent)\n      );\n      ctx.engine.damage(step.permanent, step.permanent, 1);\n    },\n  },\n  [ARMORED_CAMP_NAME]: {\n    adjustDamageReceived(_, damage) {\n      return Math.max(damage - 1, 0);\n    },\n  },\n  [ARMORED_FIGHTER_ENEMY_NAME]: {\n    adjustDamageReceived(_, damage) {\n      return Math.max(damage - 1, 0);\n    },\n  },\n} as { [cardName: string]: CardEffects };\nfor (const pusherName of ALL_PUSHERS) {\n  CARD_EFFECTS_BASE[pusherName] ||= {};\n  CARD_EFFECTS_BASE[pusherName].handlers = {\n    [PermanentEventType.CREATED]: initPusherCounters,\n  };\n}\n\nconst GAME_SPEC_BASE = {\n  cardEffects: CARD_EFFECTS_BASE,\n\n  afterTurnEnd: (player, ctx) => {\n    const { ai, inspector, engine } = ctx;\n    if (inspector.getTurnNumber() <= 1) {\n      return;\n    }\n\n    // Perform glorious combat.\n    const playerUnitsInOrder = inspector.getPermanents({\n      owner: player,\n      sort: [\n        (perm: Permanent) =>\n          -100 * inspector.getNthNearestRow(perm.slot.row, player) -\n          perm.slot.column,\n      ],\n    });\n\n    for (const playerUnit of playerUnitsInOrder) {\n      if (!ALL_AUTO_BATTLERS.has(playerUnit.card.name || \"\")) {\n        continue;\n      }\n      if (inspector.getPower(playerUnit) <= 0) {\n        continue;\n      }\n      const targetUnits = inspector.getPermanents({\n        column: playerUnit.slot.column,\n        rowInFrontOf: {\n          row: playerUnit.slot.row,\n          perspective: player,\n        },\n        sort: [\n          {\n            type: \"frontToBack\",\n            perspective: inspector.getOpponentOf(player),\n          },\n        ],\n      });\n      // Hit the first enemy unit seen.\n      for (const potentialTarget of targetUnits) {\n        // Boxes block all combat.\n        if (potentialTarget.card.name === BOX_NAME) {\n          break;\n        }\n        // Walls are ignored in combat (you can attack over them)\n        if (potentialTarget.card.name === WALL_NAME) {\n          continue;\n        }\n        // Skip past allied units.\n        if (potentialTarget.owner === player) {\n          continue;\n        }\n\n        engine.damage(\n          playerUnit,\n          potentialTarget,\n          inspector.getPower(playerUnit)\n        );\n        break;\n      }\n    }\n  },\n  overrideStep(step, ctx) {\n    // Only override move steps.\n    if (step.type !== StepType.MOVE) return false;\n\n    const { inspector, engine } = ctx;\n    const pusher = step.permanent;\n    if (!ALL_PUSHERS.has(pusher.card.name || \"\")) {\n      // Use normal move rules for non-pushers.\n      return false;\n    }\n\n    const oldSlot = pusher.slot;\n    const newSlot = step.slot;\n    const rowDiff = newSlot.row - oldSlot.row;\n    const colDiff = newSlot.column - oldSlot.column;\n\n    const state = SokobanState.makeStateFromInspector(inspector);\n    const updates = state.getPushResult(\n      1, // box weight that can be pushed\n      pusher,\n      rowDiff,\n      colDiff\n    );\n\n    for (const update of updates) {\n      if (update.type === SokobanUpdateType.MOVE) {\n        engine.moveRel(update.permanent, update.rowDiff, update.colDiff);\n      } else if (update.type === SokobanUpdateType.APPLY_POWERUP) {\n        // TODO: omnomnom\n      }\n    }\n\n    if (updates.length === 0) {\n      engine.announce(\"bonk.\");\n    }\n\n    return true;\n  },\n} as GameSpecServerFragment;\n\nexport const Puzzle22Specs: GameSpecServerFragment[] = LEVEL_INDICES.map(\n  (i) => {\n    const val = {\n      ...GAME_SPEC_BASE,\n\n      afterInitEngine(ctx: EngineContext) {\n        LEVEL_INITERS[i](ctx);\n      },\n    };\n    // Special cases, if any.\n    return val;\n  }\n);\n\nfunction initPusherCounters(ev: CreatedPermanentEvent) {\n  const { permanent, ctx } = ev;\n  const { engine } = ctx;\n  engine.addCounter(permanent, { type: CounterType.CANNOT_ATTACK });\n  engine.addCounter(permanent, { type: CounterType.CANNOT_CREATE });\n}\n\nfunction initFriendlyUnitCounters(ev: CreatedPermanentEvent) {\n  const { permanent, ctx } = ev;\n  const { engine } = ctx;\n  engine.addCounter(permanent, { type: CounterType.CANNOT_ATTACK });\n  engine.addCounter(permanent, { type: CounterType.CANNOT_CREATE });\n  engine.addCounter(permanent, { type: CounterType.CANNOT_MOVE });\n}\n\nfunction initWallCounters(ev: CreatedPermanentEvent) {\n  const { permanent, ctx } = ev;\n  const { engine } = ctx;\n  engine.addCounter(permanent, { type: CounterType.DOES_NOT_PROTECT });\n}\n","export type Puzzle28Game = {\n  final_6: string;\n  moves65: string;\n  moves54: string;\n  attks_6: string;\n  attks_5: string;\n  attks_4: string;\n};\n\nexport const GAMES: { [key: string]: Puzzle28Game } = {\n  \"0\": {\n    final_6: \".....b.b....w.w.....b.w.......\",\n    moves65: \".....D.X....R.D.....U.D.......\",\n    moves54: \"..........R..X.D...L.......R..\",\n    attks_6: \".s.s.!!!!!!s!!!!s!!!!!!!!.s.!!\",\n    attks_5: \"!!!!!!s!!!!!!!!!!!!!!ss!!!!!!.\",\n    attks_4: \"!!.s.!!sss!!!!s!ss!s!!!!!.s!!!\",\n  },\n  \"1\": {\n    final_6: \".....b...b.......w..bw..w.....\",\n    moves65: \".....U...L.......X..UD..L.....\",\n    moves54: \"S.......S......R.......D..X...\",\n    attks_6: \".s.s.!!!!!!s!!!!s!!!!!!!!.s.!!\",\n    attks_5: \"!!!!!!!!!!!!s!!!!!!!!s!!!!!!s.\",\n    attks_4: \"!!!!!!!!!!!!s!!s!!!!s!ss!.!!!!\",\n  },\n  \"2\": {\n    final_6: \"......b.w..w.w.....b......b...\",\n    moves65: \"......X.U..R.S.....D......L...\",\n    moves54: \"...X........DD..........UR....\",\n    attks_6: \".s.s.s!!!!s!!!!s!!!!s!ss!.!!!!\",\n    attks_5: \"!!!!!!!!!!!!!!!!sss!!s!!!!!!s.\",\n    attks_4: \".s.s.sssssssssss!!!!s!ss!.!!!!\",\n  },\n  \"3\": {\n    final_6: \"...w.......bwb.......w....b...\",\n    moves65: \"...L.......LDU.......X....L...\",\n    moves54: \"..X.....S.U......R.......R....\",\n    attks_6: \".!!!!s!ss!s!!!!s!!!!s!!!!.!!!!\",\n    attks_5: \".!!!!s!!!!!!!!!!s!!!!s!!!!!!!!\",\n    attks_4: \".s.s.!!!!s!ss!s!!s!ss!s!!.!!!!\",\n  },\n  \"4\": {\n    final_6: \"........wwb.b.......w....b....\",\n    moves65: \"........LSS.R.......X....R....\",\n    moves54: \".......U.XD..S............R...\",\n    attks_6: \".s.!!sss!!!!!!!!s!!!!s!!!!!!!!\",\n    attks_5: \"!!.!!!!!!!!!!!!s!!!!s!!!!.!!!!\",\n    attks_4: \"!!!!.!!!!s!!!!s!!!!sss!!!.s!!!\",\n  },\n  \"5\": {\n    final_6: \"......bww....w.....b......b...\",\n    moves65: \"......XDU....S.....D......L...\",\n    moves54: \"...X........DD..........UR....\",\n    attks_6: \".s.s.s!!!!s!!!!s!!!!s!ss!.!!!!\",\n    attks_5: \"!!!!!!!!!!!!!!!!sss!!s!!!!!!s.\",\n    attks_4: \".s.s.sssssssssss!!!!s!ss!.!!!!\",\n  },\n  \"6\": {\n    final_6: \".....w.b.........b..bww.......\",\n    moves65: \".....R.U.........L..DXR.......\",\n    moves54: \"..S...X.........S......D.R....\",\n    attks_6: \"!!!!!!s!!!!s!ss!s!!!!!!!!.s.!!\",\n    attks_5: \"!!!!!!!!s!!!!!!!!!!!!s!!!!!!s.\",\n    attks_4: \".s!!!ss!s!ss!!!s!!!!s!ss!.!!!!\",\n  },\n  \"7\": {\n    final_6: \"..b.......b..w......b...w...w.\",\n    moves65: \"..X.......S..S......U...U...L.\",\n    moves54: \"..........S..S.R...L.......X..\",\n    attks_6: \".s!!!ss!!!!!!!s!ss!!!!!s!.s!!!\",\n    attks_5: \"!!!!!!s!!!!!!!!!!!!!!ss!!!!!!.\",\n    attks_4: \".s.s.sssss!!!!!!!!!!!!sss!!.s.\",\n  },\n  \"8\": {\n    final_6: \".....w.b.........bw.b.w.......\",\n    moves65: \".....R.U.........LX.D.R.......\",\n    moves54: \"..S...X.........S......D.R....\",\n    attks_6: \"!!!!!!s!!!!s!ss!s!!!!!!!!.s.!!\",\n    attks_5: \"!!!!!!!!s!!!!!!!!!!!!s!!!!!!s.\",\n    attks_4: \".s!!!ss!s!ss!!!s!!!!s!ss!.!!!!\",\n  },\n  \"9\": {\n    final_6: \"b.....b.w.........wb.......w..\",\n    moves65: \"D.....D.L.........RX.......L..\",\n    moves54: \".....S.S...D.......U......X...\",\n    attks_6: \"!!!!!!!!!!!!sss!!!!!!!ss!.!!!!\",\n    attks_5: \".s.!!!!!!!!!!!!!!s!!!!!!!!!!s.\",\n    attks_4: \".s.!!!!!!!!sss!!!!!!!!sss!!.s.\",\n  },\n  \"10\": {\n    final_6: \"b.w...b............b....w..w..\",\n    moves65: \"D.D...D............X....U..L..\",\n    moves54: \".....S.S...D.......U......X...\",\n    attks_6: \"!!!!.!!!!s!!sss!!!!!!!ss!.!!!!\",\n    attks_5: \".s.!!!!!!!!!!!!!!s!!!!!!!!!!s.\",\n    attks_4: \".s.!!!!!!!!sss!!!!!!!!sss!!.s.\",\n  },\n  \"11\": {\n    final_6: \"..w....b....w...w..b......b...\",\n    moves65: \"..X....U....L...L..S......R...\",\n    moves54: \"..R........S...X...S.......L..\",\n    attks_6: \".!!!!!!!!!!!!sss!!!!s!ss!.!!!!\",\n    attks_5: \".s!!!ss!s!!!!s!!s!!!!s!ss!!!s.\",\n    attks_4: \"!!!!.!!s!ss!!!ss!!!!s!ss!.!!!!\",\n  },\n  \"12\": {\n    final_6: \".b.....b...ww.........b....w..\",\n    moves65: \".L.....L...XR.........L....S..\",\n    moves54: \"X.....D......D.......L.....R..\",\n    attks_6: \".!!!!s!!!!s!!ss!!!ss!!!!!.!!!!\",\n    attks_5: \"!!!!!!!!!!!!s!!!!s!!!!!!s!!!!.\",\n    attks_4: \"!!.s.!!sss!!!!s!ss!s!!!!!.s!!!\",\n  },\n  \"13\": {\n    final_6: \"b.w.........w....b..b.w.......\",\n    moves65: \"R.S.........X....R..U.D.......\",\n    moves54: \".DL............X..D........S..\",\n    attks_6: \"!!!!.!s!!s!s!ss!s!!!!!!!!.s.!!\",\n    attks_5: \".!!!!s!!!!s!!!!!!!!!!ss!!!!!!.\",\n    attks_4: \"!!!!!!!!!!!!s!!!!s!!s!!!!.!!!!\",\n  },\n  \"14\": {\n    final_6: \".....b.......b.w..w.b.......w.\",\n    moves65: \".....D.......D.X..R.U.......L.\",\n    moves54: \"..........R....D..XL.......R..\",\n    attks_6: \".s!!.!!!!s!!!!s!!!!!!!!s!.s!!!\",\n    attks_5: \"!!!!!!s!!!!!!!!!!!!!!ss!!!!!!.\",\n    attks_4: \"!!.s.!!sss!!!!s!ss!s!!!!!.s!!!\",\n  },\n  \"15\": {\n    final_6: \".....w.b...........bbww.......\",\n    moves65: \".....S.R...........DDUX.......\",\n    moves54: \".....X..L.......U.......UR....\",\n    attks_6: \"!!!!!!s!!!!s!ss!s!!!!!!!!.s.!!\",\n    attks_5: \"!!!!!!!!!!!!s!!!!!!!!s!!!!!!s.\",\n    attks_4: \"!!!!!!!!!!s!!sss!!!!s!ss!.!!!!\",\n  },\n  \"16\": {\n    final_6: \".w.......b..b...........wbw...\",\n    moves65: \".S.......X..R...........USR...\",\n    moves54: \".X...........D.....U.....R.R..\",\n    attks_6: \"!!!s.!s!!!!!!s!!!!s!!!!s!!!!!!\",\n    attks_5: \"!!!!!!!!!!!!!!!!sss!!ss!!!!!!.\",\n    attks_4: \".s.s.sss!!sss!!s!!!!s!ss!.!!!!\",\n  },\n  \"17\": {\n    final_6: \"...w...b...w......wb......b...\",\n    moves65: \"...S...X...R......UD......L...\",\n    moves54: \"...X........DD..........UR....\",\n    attks_6: \"!!!!!!!!!!s!!sss!!!!s!ss!.!!!!\",\n    attks_5: \"!!!!!!!!!!!!!!!!sss!!s!!!!!!s.\",\n    attks_4: \".s.s.sssssssssss!!!!s!ss!.!!!!\",\n  },\n  \"18\": {\n    final_6: \"..b.........w...w..b....w.b...\",\n    moves65: \"..S.........L...L..S....X.R...\",\n    moves54: \"..D........S...X...S.......L..\",\n    attks_6: \"!!!s.!s!ss!!!sss!!!!s!ss!.!!!!\",\n    attks_5: \".s!!!ss!s!!!!s!!s!!!!s!ss!!!s.\",\n    attks_4: \"!!!!!!!!!!s!!sss!!!!s!ss!.!!!!\",\n  },\n  \"19\": {\n    final_6: \"..w...b........wb..b.......w..\",\n    moves65: \"..S...U........XL..L.......S..\",\n    moves54: \".DL............X..D........S..\",\n    attks_6: \"!!!!.!!!!s!!sss!!!!!!!ss!.!!!!\",\n    attks_5: \".!!!!s!!!!s!!!!!!!!!!ss!!!!!!.\",\n    attks_4: \"!!!!!!!!!!!!s!!!!s!!s!!!!.!!!!\",\n  },\n  \"20\": {\n    final_6: \"..........b.b.w.....b..ww.....\",\n    moves65: \"..........X.L.D.....D..LS.....\",\n    moves54: \"...........D.......S..X.SR....\",\n    attks_6: \".s!!.ss!!!!!!s!!s!!!!!!!!.s.!!\",\n    attks_5: \"!!.s.!!sss!!!!!!s!!!!s!!!!!!!!\",\n    attks_4: \".s.s.ssssssss!!s!!!!s!ss!.!!!!\",\n  },\n  \"21\": {\n    final_6: \"......wb........w..b....w.b...\",\n    moves65: \"......DU........L..S....X.R...\",\n    moves54: \"..R........S...X...S.......L..\",\n    attks_6: \".s.s.!!!ss!!!sss!!!!s!ss!.!!!!\",\n    attks_5: \".s!!!ss!s!!!!s!!s!!!!s!ss!!!s.\",\n    attks_4: \"!!!!.!!s!ss!!!ss!!!!s!ss!.!!!!\",\n  },\n  \"22\": {\n    final_6: \".....b...b.......w..bw.w......\",\n    moves65: \".....U...L.......X..UD.S......\",\n    moves54: \"S.......S......R.......D..X...\",\n    attks_6: \".s.s.!!!!!!s!!!!s!!!!!!!!.s.!!\",\n    attks_5: \"!!!!!!!!!!!!s!!!!!!!!s!!!!!!s.\",\n    attks_4: \"!!!!!!!!!!!!s!!s!!!!s!ss!.!!!!\",\n  },\n  \"23\": {\n    final_6: \"..b....w...ww......b......b...\",\n    moves65: \"..R....U...LX......D......L...\",\n    moves54: \"..XS......R.............UR....\",\n    attks_6: \"!!!s.!!!sss!!sss!!!!s!ss!.!!!!\",\n    attks_5: \".!!!.!!s!s!ss!!!sss!!s!!!!!!s.\",\n    attks_4: \"!!!!.!!s!ss!!!ss!!!!s!ss!.!!!!\",\n  },\n  \"24\": {\n    final_6: \"..w..w...........b.bb.w.......\",\n    moves65: \"..S..X...........L.DD.U.......\",\n    moves54: \"..X.............SR......DR....\",\n    attks_6: \"!!!!.!s!!s!s!ss!s!!!!!!!!.s.!!\",\n    attks_5: \"!!!!.!!!!s!!s!!!!!!!!s!!!!!!s.\",\n    attks_4: \".s.s.sssssssssss!!!!s!ss!.!!!!\",\n  },\n  \"25\": {\n    final_6: \"b......ww.......b..b.......w..\",\n    moves65: \"R......UX.......L..L.......S..\",\n    moves54: \".DL............X..D........S..\",\n    attks_6: \"!!!!!!!!!!!!sss!!!!!!!ss!.!!!!\",\n    attks_5: \".!!!!s!!!!s!!!!!!!!!!ss!!!!!!.\",\n    attks_4: \"!!!!!!!!!!!!s!!!!s!!s!!!!.!!!!\",\n  },\n  \"26\": {\n    final_6: \"b......w....b......w.w.....b..\",\n    moves65: \"D......R....L......S.D.....X..\",\n    moves54: \".....S..D..D.......L......X...\",\n    attks_6: \"!!!s.!s!ss!s!!!!!!s!!!!s!!!!!!\",\n    attks_5: \".s.s.!!!!!!!!!!!!s!!!!!!!!!!s.\",\n    attks_4: \".s.s.!!!ss!s!!!!!!!!!!sss!!.s.\",\n  },\n  \"27\": {\n    final_6: \".w...w.b.........b..b.w.......\",\n    moves65: \".X...S.U.........L..D.R.......\",\n    moves54: \"..S..X..........S......R.R....\",\n    attks_6: \"!!!!!!s!!!!s!ss!s!!!!!!!!.s.!!\",\n    attks_5: \"!!!!!!!!s!!!!!!!!!!!!s!!!!!!s.\",\n    attks_4: \".s!!!ss!s!ss!!!s!!!!s!ss!.!!!!\",\n  },\n  \"28\": {\n    final_6: \"......wbw........b..b.w.......\",\n    moves65: \"......SUX........L..D.R.......\",\n    moves54: \"..S...X.........S......D.R....\",\n    attks_6: \".!!!!s!!!!!!!ss!s!!!!!!!!.s.!!\",\n    attks_5: \"!!!!!!!!s!!!!!!!!!!!!s!!!!!!s.\",\n    attks_4: \".s!!!ss!s!ss!!!s!!!!s!ss!.!!!!\",\n  },\n  \"29\": {\n    final_6: \"......b..w.........b.w..w.b...\",\n    moves65: \"......D..L.........S.L..X.R...\",\n    moves54: \"........X..D.......SR......L..\",\n    attks_6: \".s.!!s!!!!s!!!!s!!!!s!ss!.!!!!\",\n    attks_5: \"!!.!!!!s!!!!!!!!s!!!!s!ss!!!s.\",\n    attks_4: \".s.s.sssssssssss!!!!s!ss!.!!!!\",\n  },\n  \"30\": {\n    final_6: \".....w.b....w....b..b.w.......\",\n    moves65: \".....R.U....X....L..D.R.......\",\n    moves54: \"..S...X.........S......R.R....\",\n    attks_6: \"!!!!!!s!!!!s!ss!s!!!!!!!!.s.!!\",\n    attks_5: \"!!!!!!!!s!!!!!!!!!!!!s!!!!!!s.\",\n    attks_4: \".s!!!ss!s!ss!!!s!!!!s!ss!.!!!!\",\n  },\n  \"31\": {\n    final_6: \"......b.w.......b.wb.......w..\",\n    moves65: \"......L.L.......U.RX.......L..\",\n    moves54: \".....S.S...D.......U......X...\",\n    attks_6: \"!!!!!!!!!!!!sss!!!!!!!ss!.!!!!\",\n    attks_5: \".s.!!!!!!!!!!!!!!s!!!!!!!!!!s.\",\n    attks_4: \".s.!!!!!!!!sss!!!!!!!!sss!!.s.\",\n  },\n  \"32\": {\n    final_6: \"b..w....w.......b..b.......w..\",\n    moves65: \"R..L....X.......L..L.......S..\",\n    moves54: \".DL............X..D........S..\",\n    attks_6: \"!!!!!!!!!!!!sss!!!!!!!ss!.!!!!\",\n    attks_5: \".!!!!s!!!!s!!!!!!!!!!ss!!!!!!.\",\n    attks_4: \"!!!!!!!!!!!!s!!!!s!!s!!!!.!!!!\",\n  },\n  \"33\": {\n    final_6: \"..ww.......b.b..........w.b...\",\n    moves65: \"..LX.......R.U..........S.L...\",\n    moves54: \".S......D...D...........UX....\",\n    attks_6: \".!!!!s!ss!s!!!!s!!!!s!!!!.!!!!\",\n    attks_5: \"!!!!!!!!!!!!!!!!s!!!!s!!!!!!!!\",\n    attks_4: \"!!!!!!!!!!!!!!!!!!s!ss!!!.s!!.\",\n  },\n  \"34\": {\n    final_6: \"b.w..........b......b...w...w.\",\n    moves65: \"R.S..........D......U...X...L.\",\n    moves54: \".RR............X..D........S..\",\n    attks_6: \"!!!!.!ss!s!!!!s!!!!!!!!s!.s!!!\",\n    attks_5: \".!!!!s!!!!s!!!!!!!!!!ss!!!!!!.\",\n    attks_4: \".s!!!ss!s!ss!!!sss!!s!!!!.!!!!\",\n  },\n  \"35\": {\n    final_6: \".w....b.w.......b..b.......w..\",\n    moves65: \".R....U.X.......L..L.......S..\",\n    moves54: \".DS............X..R........S..\",\n    attks_6: \"!!!!!!!!!!!!sss!!!!!!!ss!.!!!!\",\n    attks_5: \".!!!!s!!!!s!!!!!!!!!!ss!!!!!!.\",\n    attks_4: \"!!!!.!!!!s!!sss!!!!!!!ss!.!!!!\",\n  },\n  \"36\": {\n    final_6: \".....b.wb...........b...w...w.\",\n    moves65: \".....U.XS...........U...U...L.\",\n    moves54: \"S.......S......R...X.......R..\",\n    attks_6: \".s.s.!!!!s!ss!s!ss!!!!!s!.s!!!\",\n    attks_5: \"!!!!!!!!!!!!s!!!!!!!!ss!!!!!!.\",\n    attks_4: \"!!!!!!!!!!!!s!!s!!!!s!ss!.!!!!\",\n  },\n  \"37\": {\n    final_6: \".wb........ww......b......b...\",\n    moves65: \".RX........RR......D......L...\",\n    moves54: \"..X.........DD..........UR....\",\n    attks_6: \"!!!s.!!!sss!!sss!!!!s!ss!.!!!!\",\n    attks_5: \"!!!!.!!!!s!!!!!!sss!!s!!!!!!s.\",\n    attks_4: \".s.s.sssssssssss!!!!s!ss!.!!!!\",\n  },\n  \"38\": {\n    final_6: \".....w.b.........b..b.w.w.....\",\n    moves65: \".....R.U.........L..D.X.L.....\",\n    moves54: \"..S...X.........S......D.R....\",\n    attks_6: \"!!!!!!s!!!!s!ss!s!!!!!!!!.s.!!\",\n    attks_5: \"!!!!!!!!s!!!!!!!!!!!!s!!!!!!s.\",\n    attks_4: \".s!!!ss!s!ss!!!s!!!!s!ss!.!!!!\",\n  },\n  \"39\": {\n    final_6: \"...w.b....w.b...........wb....\",\n    moves65: \"...L.D....R.R...........XR....\",\n    moves54: \"..R.......DX.S............R...\",\n    attks_6: \".s!!!!!!s!!s!!!!s!!!!s!!!!!!!!\",\n    attks_5: \"!!!!.!ss!!!!!!!s!!!!s!!!!.!!!!\",\n    attks_4: \"!!!!!!!!!!!!!!s!!!!sss!!!.s!!!\",\n  },\n  \"40\": {\n    final_6: \"...w.w.b.........b..b.w.......\",\n    moves65: \"...X.R.U.........L..D.R.......\",\n    moves54: \"..S...X.........S......D.R....\",\n    attks_6: \"!!!!!!s!!!!s!ss!s!!!!!!!!.s.!!\",\n    attks_5: \"!!!!!!!!s!!!!!!!!!!!!s!!!!!!s.\",\n    attks_4: \".s!!!ss!s!ss!!!s!!!!s!ss!.!!!!\",\n  },\n  \"41\": {\n    final_6: \"...b....w..w.......b.w....b...\",\n    moves65: \"...L....X..U.......S.L....R...\",\n    moves54: \"..R...D............SX......L..\",\n    attks_6: \"!!!!.!!s!ss!!!ss!!!!s!ss!.!!!!\",\n    attks_5: \"!!!!!!!!s!!!!s!!s!!!!s!ss!!!s.\",\n    attks_4: \"!!!!.!!s!ss!!!ss!!!!s!ss!.!!!!\",\n  },\n  \"42\": {\n    final_6: \"b..w....w........b..b.w.......\",\n    moves65: \"R..L....X........R..U.D.......\",\n    moves54: \".DS............X..R........S..\",\n    attks_6: \"!!!!!!s!!!!s!ss!s!!!!!!!!.s.!!\",\n    attks_5: \".!!!!s!!!!s!!!!!!!!!!ss!!!!!!.\",\n    attks_4: \"!!!!.!!!!s!!sss!!!!!!!ss!.!!!!\",\n  },\n  \"43\": {\n    final_6: \".....b..w...wb.....b.......w..\",\n    moves65: \".....S..R...XD.....D.......L..\",\n    moves54: \".....S...X........U.....U.R...\",\n    attks_6: \".s!!.!!!!s!!!!s!!!!!!!ss!.!!!!\",\n    attks_5: \".s.!!!!!!!!!!!!!!!!!!s!!!!!!s.\",\n    attks_4: \".s!!.!!!!s!!!!s!!!!!!!ss!.!!!!\",\n  },\n  \"44\": {\n    final_6: \".w.b....w..w.......b......b...\",\n    moves65: \".R.S....X..L.......D......L...\",\n    moves54: \"..XS......R.............UR....\",\n    attks_6: \"!!!!.!!s!ss!!!ss!!!!s!ss!.!!!!\",\n    attks_5: \".!!!.!!s!s!ss!!!sss!!s!!!!!!s.\",\n    attks_4: \"!!!!.!!s!ss!!!ss!!!!s!ss!.!!!!\",\n  },\n  \"45\": {\n    final_6: \"b..b.........w......bw......w.\",\n    moves65: \"S..D.........X......UD......L.\",\n    moves54: \"S.......S......R..........XR..\",\n    attks_6: \"!!!!.!ss!s!ss!s!ss!!!!!s!.s!!!\",\n    attks_5: \"!!!!!!!!!!!!s!!!!!!!!ss!!!!!!.\",\n    attks_4: \"!!!!!!!!!!!!s!!s!!!!s!ss!.!!!!\",\n  },\n  \"46\": {\n    final_6: \"......wb........w..b......b.w.\",\n    moves65: \"......DU........L..S......R.X.\",\n    moves54: \"..R........S...X...S.......L..\",\n    attks_6: \".s.s.!!!ss!!!sss!!!!s!ss!.!!!!\",\n    attks_5: \".s!!!ss!s!!!!s!!s!!!!s!ss!!!s.\",\n    attks_4: \"!!!!.!!s!ss!!!ss!!!!s!ss!.!!!!\",\n  },\n  \"47\": {\n    final_6: \"..w...b.........b.wb.......w..\",\n    moves65: \"..D...L.........U.RX.......L..\",\n    moves54: \".....S.S...D.......U......X...\",\n    attks_6: \"!!!!.!!!!s!!sss!!!!!!!ss!.!!!!\",\n    attks_5: \".s.!!!!!!!!!!!!!!s!!!!!!!!!!s.\",\n    attks_4: \".s.!!!!!!!!sss!!!!!!!!sss!!.s.\",\n  },\n  \"48\": {\n    final_6: \".b.......w.b....w.......b.w...\",\n    moves65: \".L.......L.U....X.......U.R...\",\n    moves54: \"X.....S.S..........L.......L..\",\n    attks_6: \".!!!!s!ss!s!!!!!!!!!!s!!!!!!s.\",\n    attks_5: \"!!!!!!!!!!!!sss!!!!!!!ss!.!!!!\",\n    attks_4: \"!!!!!!!!!!!!sss!!!!s!ss!s!!!!.\",\n  },\n  \"49\": {\n    final_6: \".....bw.b.w..........b.....w..\",\n    moves65: \".....UX.L.S..........R.....L..\",\n    moves54: \"D......R..X...........L...R...\",\n    attks_6: \".s.s.!!!!s!!!!s!!!!s!!!!s!!!!.\",\n    attks_5: \"!!!!!!s!!!!s!ss!!!ss!!!!!!!!!!\",\n    attks_4: \".s.s.!!!!s!!!!s!!!!s!!!!s!!!!.\",\n  },\n};\n","import { CounterType } from \"engine/types/counters\";\nimport { Permanent, Player, Slot } from \"engine/types/game-state\";\nimport { GameSpecServerFragment, AIContext } from \"engine/types/game-specs\";\nimport { Inspector } from \"engine/Inspector\";\nimport { CardType } from \"engine/types/card-data\";\nimport { GAMES, Puzzle28Game } from \"engine/game-specs/puzzle-28-SPOILERS-data\";\n\nconst BLACK_NAME = \"chocolate\";\nconst WHITE_NAME = \"vanilla\";\nconst COW_NAME = \"cyclow\";\n\n// values double as cardname suffix\nenum cowsState {\n  SLEEPING = \"--sleeping-\", // do nothing\n  AWAKE = \"--awake-\", // about to attack\n  TIRED = \"--tired-\", // just attacked, weak\n  WEAK = \"--weak-\", // not used as state, just card art: (weak + vulnerable)\n  ANGRY = \"--angry-\", // final state, angry cow\n}\n\ntype ExtraState = {\n  cows: cowsState;\n  level: number; // there is no cow level\n  game: Puzzle28Game;\n};\n\nconst cowQuery = (inspector: Inspector) => ({\n  owner: Player.P2,\n  custom: (permanent: Permanent) => {\n    return isCow(inspector, permanent);\n  },\n});\n\nconst isCow = (inspector: Inspector, permanent: Permanent) => {\n  return inspector.getCardName(permanent).includes(COW_NAME);\n};\n\nconst transformCows = (\n  state: cowsState,\n  ctx: AIContext,\n  cows?: Permanent[]\n) => {\n  const { inspector, engine } = ctx;\n  if (!cows) {\n    cows = inspector.getPermanents(cowQuery(inspector));\n  }\n  cows.forEach((cow) => {\n    if (inspector.getCardName(cow).startsWith(WHITE_NAME)) {\n      engine\n        .getBackdoorEngine()\n        .transformPermanent(cow, WHITE_NAME + \"-\" + COW_NAME + state);\n    } else {\n      engine\n        .getBackdoorEngine()\n        .transformPermanent(cow, BLACK_NAME + \"-\" + COW_NAME + state);\n    }\n  });\n};\n\nconst getAttacks = (level: number, game: Puzzle28Game) => {\n  if (level === 6) {\n    return game.attks_6;\n  } else if (level === 5) {\n    return game.attks_5;\n  } else if (level === 4) {\n    return game.attks_4;\n  }\n\n  throw new Error(\"No attacks found for invalid level: \" + level);\n};\n\nconst getKillableSlot = (level: number, game: Puzzle28Game): Slot => {\n  let move = \"\";\n\n  if (level === 6) {\n    move = game.moves65;\n  } else if (level === 5) {\n    move = game.moves54;\n  }\n\n  for (let row = 0; row < 6; row++) {\n    for (let column = 0; column < 5; column++) {\n      const index = row * 5 + column;\n      if (move[index] === \"X\") {\n        return { row, column };\n      }\n    }\n  }\n\n  throw new Error(\"No killable slot found for level: \" + level);\n};\n\n// move (permanent) to the closest empty slot on their side\n// prioritizes unsafe spots to shove\nconst shovePermanent = (ctx: AIContext, permanent: Permanent) => {\n  const { inspector, engine } = ctx;\n  const ext = engine.getExtraState() as ExtraState;\n\n  const emptySlots = inspector.getUnoccupiedSlotsClosestTo(\n    permanent.owner,\n    permanent.slot\n  );\n  for (const slot of emptySlots) {\n    const attacks = getAttacks(ext.level - 1, ext.game); // check the next level's attacks\n    const index = slot.row * inspector.getNumColumns() + slot.column;\n    // first try to shove to unsafe spots\n    if (attacks[index] === \"!\" && engine.move(permanent, slot)) return;\n  }\n  for (const slot of emptySlots) {\n    // now try any slot\n    if (engine.move(permanent, slot)) return;\n  }\n};\n\nconst spawnCows = (ctx: AIContext, game: Puzzle28Game) => {\n  const { inspector, engine } = ctx;\n\n  for (let row = 0; row < 6; row++) {\n    for (let column = 0; column < 5; column++) {\n      const slot = { row, column };\n      const char = game.final_6[row * 5 + column];\n      if (char !== \".\") {\n        // check if blocked\n        const blockingPermanent = inspector.getPermanentAtIfExists(slot);\n        if (blockingPermanent) {\n          shovePermanent(ctx, blockingPermanent);\n        }\n        // spawn\n        const cowName =\n          (char === \"b\" ? BLACK_NAME : WHITE_NAME) +\n          \"-\" +\n          COW_NAME +\n          cowsState.SLEEPING;\n        engine.spawn(cowName, slot, Player.P2);\n      }\n    }\n  }\n\n  const units = inspector.getPermanentsOf(Player.P2);\n  units.forEach((unit) => {\n    engine.addCounter(unit, {\n      type: CounterType.INVULNERABLE,\n    });\n  });\n};\n\nconst moveCows = (ctx: AIContext, game: Puzzle28Game) => {\n  const { inspector, engine } = ctx;\n  const ext = engine.getExtraState() as ExtraState;\n  // move now\n  let moves = \"\";\n  if (ext.level === 6) {\n    moves = game.moves65;\n  } else if (ext.level === 5) {\n    moves = game.moves54;\n  }\n\n  type cowToMove = {\n    cow: Permanent;\n    from: Slot;\n    to: Slot;\n  };\n\n  const cowsToMove: cowToMove[] = [];\n\n  for (let row = 0; row < 6; row++) {\n    for (let column = 0; column < 5; column++) {\n      const from = { row, column };\n      const move = moves[row * 5 + column];\n      let to;\n      switch (move) {\n        case \"L\":\n          to = { row, column: column - 1 };\n          break;\n        case \"R\":\n          to = { row, column: column + 1 };\n          break;\n        case \"U\":\n          to = { row: row - 1, column };\n          break;\n        case \"D\":\n          to = { row: row + 1, column };\n          break;\n        default: // XS. all skip\n          continue;\n      }\n\n      // move the cow\n      const cow = inspector.getPermanentAtIfExists(from);\n      if (cow && isCow(inspector, cow)) {\n        cowsToMove.push({ cow, from, to });\n      }\n    }\n  }\n\n  // fix infinite loop\n  let tries = 0;\n  // queue to prevent shoving other cows\n  while (cowsToMove.length > 0 && tries < 10) {\n    tries++;\n    const cowToMove = cowsToMove.shift();\n    if (!cowToMove) continue;\n\n    const { cow, from, to } = cowToMove;\n    // check if blocked\n    const blockingPermanent = inspector.getPermanentAtIfExists(to);\n    if (blockingPermanent) {\n      if (isCow(inspector, blockingPermanent)) {\n        // blocked by a cow, skip\n        cowsToMove.push(cowToMove);\n        continue;\n      }\n      shovePermanent(ctx, blockingPermanent);\n    }\n    // move\n    engine.move(cow, to);\n  }\n\n  // this should never happen, but if it does, just let the cows be in bad positions instead of crashing server.\n  // if (cowsToMove.length > 0) {\n  //   console.log(game);\n  //   throw new Error(`Failed to move cows`);\n  // }\n};\n\nexport const Puzzle28Spec: GameSpecServerFragment = {\n  counterData: {},\n  aiTurn: (ctx) => {\n    const { inspector, engine, ai } = ctx;\n    const ext = engine.getExtraState() as ExtraState;\n\n    const turnNumber = inspector.getTurnNumber();\n\n    const cows = inspector.getPermanents(cowQuery(inspector));\n\n    if (turnNumber === 0) {\n      spawnCows(ctx, ext.game);\n      ai.speak(\n        \"Howdy! The name’s Miss Yu. This here’s my ranch! Mind the cows.\"\n      );\n    } else {\n      switch (ext.cows) {\n        case cowsState.SLEEPING: {\n          ext.cows = cowsState.AWAKE;\n          transformCows(cowsState.AWAKE, ctx);\n          if (ext.level === 6) {\n            ai.speak(\n              \"They like to curl up into li’l balls if ya wake ’em, ya see. Watch yer step!\"\n            );\n          } else {\n            ai.speak(\"Hope you know what’s comin’.\");\n          }\n          break;\n        }\n        case cowsState.AWAKE: {\n          const attacks = getAttacks(ext.level, ext.game);\n\n          // attack!!!\n          for (let row = 0; row < 6; row++) {\n            for (let column = 0; column < 5; column++) {\n              const i = row * 5 + column;\n              const attack = attacks[i];\n              if (attack === \"!\") {\n                // TODO show ALL slots attacked with explosions\n                // maybe we can hack this by adding a explosion creature to empty slots?\n                const permanent = inspector.getPermanentAtIfExists({\n                  row,\n                  column,\n                });\n                if (\n                  permanent &&\n                  permanent.owner === Player.P1 &&\n                  inspector.getCardType(permanent) === CardType.CREATURE\n                ) {\n                  engine.destroy(permanent, permanent);\n                }\n              }\n            }\n          }\n\n          if (ext.level === 6) {\n            ai.speak(\n              \"My husband always said, the cows won’t pay the bills!\\nLemme tell ya, he sure shut up after he saw\\nthis ’ere cow-ordinated lasso attack!\"\n            );\n          } else {\n            ai.speak(\"Take that!\");\n          }\n\n          ext.cows = cowsState.TIRED;\n          transformCows(cowsState.TIRED, ctx);\n\n          // remove counter from killable\n          if (ext.level <= 4) {\n            // all are killable\n            cows.forEach((cow) => {\n              engine.removeCounterType(cow, CounterType.INVULNERABLE);\n            });\n            transformCows(cowsState.WEAK, ctx);\n            break;\n          }\n          const killableSlot = getKillableSlot(ext.level, ext.game);\n          const killableCow = inspector.getPermanentAtIfExists(killableSlot);\n          if (killableCow) {\n            engine.removeCounterType(killableCow, CounterType.INVULNERABLE);\n            transformCows(cowsState.WEAK, ctx, [killableCow]);\n          }\n\n          break;\n        }\n        case cowsState.TIRED: {\n          if (ext.level > cows.length) {\n            // a cow was killed, switch to MOVING to move on the next turn\n\n            if (ext.level <= 4) {\n              // less than 4 cows left\n              // final angry transition\n              const barn: Permanent = inspector.getPermanents({\n                name: \"barn\",\n              })[0];\n\n              engine.removeCounterType(barn, CounterType.INVULNERABLE);\n\n              ext.level = 3;\n              ext.cows = cowsState.ANGRY;\n              transformCows(cowsState.ANGRY, ctx);\n              ai.speak(\"I’ve had it with you! Get off my ranch!\");\n\n              break;\n            }\n\n            moveCows(ctx, ext.game);\n            ext.level -= 1;\n\n            ext.cows = cowsState.SLEEPING;\n            transformCows(cowsState.SLEEPING, ctx);\n            ai.speak(\n              \"What in tarnation didya do to my cow? Yer gonna get milked!\"\n            );\n          } else {\n            ai.speak(\"They’re tired, don’t give ’em any trouble now.\");\n          }\n          break;\n        }\n        case cowsState.ANGRY: {\n          // all cows attack bases\n          for (const cow of cows) {\n            ai.tryAttackFirst(cow, {\n              sort: [\n                // attack bases, lowest health, closest\n                \"structuresFirst\",\n                \"health\",\n                { type: \"euclideanDistance\", slot: cow.slot },\n              ],\n            });\n          }\n        }\n      }\n    }\n  },\n  afterInitEngine: (ctx) => {\n    // GOOD STATE FOR TESTING\n    // const final_6 = \".......b...w.....b......w.bw..\";\n    // const moves65 = \".......R...L.....X......S.LR..\";\n    // const moves54 = \"........D.R.............UR..X.\";\n    // const attks_6 = \"!!!!!!!!!!s!!sss!!!!s!ss!.!!!!\";\n    // const attks_5 = \".s.s.!!!!s!ss!s!ss!!!sss!!!!!!\";\n    // const attks_4 = \".s.!!sss!!!!!!!!!ss!s!s!!.!!!.\";\n    // KEEP THE ABOVE ONE\n\n    // pick a random game\n    const gamesArr = Object.values(GAMES);\n    const gameIndex = Math.floor(Math.random() * gamesArr.length);\n    const game = gamesArr[gameIndex];\n    // const { final_6, moves65, moves54, attks_6, attks_5, attks_4 } = game;\n\n    ctx.engine.initExtraState({\n      cows: cowsState.SLEEPING,\n      level: 6,\n      game,\n    } as ExtraState);\n  },\n};\n","import { EffectOptType } from \"engine/types/effects\";\nimport { AbilityType } from \"engine/types/effects\";\nimport { GameSpecServerFragment } from \"engine/types/game-specs\";\nimport { Player } from \"engine/types/game-state\";\n\ntype ExtraState = {\n  lastKnownBaseDamage: number;\n};\n\nexport const Puzzle31Spec: GameSpecServerFragment = {\n  // logic\n  afterInitEngine: (ctx) => {\n    ctx.engine.initExtraState({\n      lastKnownBaseDamage: 0,\n    });\n  },\n  afterStep: (step, ctx) => {\n    const { inspector, engine, ai } = ctx;\n    const aiBase = inspector.getPermanents({\n      owner: Player.P2,\n      isBase: true,\n    })[0];\n    if (aiBase !== undefined) {\n      const ext = engine.getExtraState() as ExtraState;\n      if (ext.lastKnownBaseDamage === 0 && aiBase.damage !== 0) {\n        ai.speak(\"i got hit... am i going to l, o, s, e again?\");\n        ext.lastKnownBaseDamage = aiBase.damage;\n      }\n    }\n  },\n  aiTurn: (ctx) => {\n    const { inspector, ai } = ctx;\n    const units = inspector.getPermanentsOf(Player.P2);\n    const aiBase = units.filter(\n      (unit) => inspector.getSharedEffects(unit).isBase\n    )[0];\n    if (aiBase === undefined) return;\n\n    // on turn 0, try to spawn mirrors, and we're done\n    if (inspector.getTurnNumber() === 0) {\n      ai.speak(\n        \"if only i could w, i, n just once, i'd be so much braver. if only i had a f, r, i, e, n, d...\"\n      );\n      ai.trySpawn(\"beeflector\", 3, 0);\n      ai.trySpawn(\"beeflector\", 3, 1);\n      ai.trySpawn(\"beeflector\", 3, 2);\n      ai.trySpawn(\"beeflector\", 3, 3);\n      ai.trySpawn(\"beeflector\", 3, 4);\n      return;\n    }\n\n    for (const unit of units) {\n      // medics try to special anything that has taken damage\n      // and on failure, will attack \"smartly\"\n      if (inspector.getCardName(unit) === \"reckless-medisaur\") {\n        let healed = false;\n        // look at permanents in order of opponents > ours, then sorted\n        // by how much damage they've taken\n        const targets = inspector.getPermanents({\n          sort: [(p) => (p.owner === Player.P1 ? 0 : 1), (p) => -p.damage],\n        });\n        for (const target of targets) {\n          healed = ai.tryActivateAbility(unit, AbilityType.SPECIAL, [\n            { type: EffectOptType.PERMANENT, permanentId: aiBase.id },\n            { type: EffectOptType.PERMANENT, permanentId: target.id },\n          ]);\n          if (healed) break;\n        }\n        // attack nearest, prioritizing bases\n        if (!healed) {\n          ai.tryAttackFirst(unit, {\n            sort: [\n              \"structuresFirst\",\n              { type: \"euclideanDistance\", slot: unit.slot },\n            ],\n          });\n        }\n      } else if (!inspector.getSharedEffects(unit).isBase) {\n        // bb b might have a unit from blancmange, so those should attack too.\n        // attack nearest, prioritizing bases\n        ai.tryAttackFirst(unit, {\n          sort: [\n            \"structuresFirst\",\n            { type: \"euclideanDistance\", slot: unit.slot },\n          ],\n        });\n      }\n    }\n\n    // try to spawn a medic\n    for (const col of [1, 3, 0, 4, 2]) {\n      if (ai.trySpawn(\"reckless-medisaur\", 1, col)) break;\n    }\n    // try to spawn a mirror in opponent territory\n    let mirrorSpawns = 0;\n    for (const row of [3, 4, 5]) {\n      for (const col of [0, 2, 4, 1, 3]) {\n        if (ai.trySpawn(\"beeflector\", row, col)) {\n          mirrorSpawns += 1;\n        }\n        if (mirrorSpawns === 3) break;\n      }\n      if (mirrorSpawns === 3) break;\n    }\n  },\n  // solved iff ai won\n  disableBattleWonSolvedCondition: true,\n  extraSolveChecks: (_, winner) => {\n    return winner === Player.P2;\n  },\n  afterGameEnd: (winner, solves, ctx) => {\n    const { engine, ai } = ctx;\n    if (!(solves[Player.P1] ?? false)) {\n      ai.speak(\n        \"Before you got the chance to use the uwuand, bb b zipped away crying! Looks like you failed to befriend it.\",\n        {\n          hideBattler: true,\n        }\n      );\n    } else {\n      engine.clearKeyframe();\n    }\n  },\n};\n","import { CounterType } from \"engine/types/counters\";\nimport { Permanent, Player } from \"engine/types/game-state\";\nimport { Speaker } from \"engine/types/keyframes\";\nimport { GameSpecServerFragment, AIContext } from \"engine/types/game-specs\";\nimport {\n  PermanentEventHandlers,\n  PermanentEventType,\n} from \"engine/server-hooks\";\n\ntype ExtraState = {\n  slimeKilledOrder: string[];\n};\n\n// killed slime -> children slimes\n// order of this array determines the correct slimeKilledOrder\nconst slimeSpawnOrder = [\n  { parent: \"slime\", children: [\"yellow\", \"sepia\"] }, // *\n  { parent: \"yellow\", children: [\"lemon\", \"amber\"] }, // E\n  { parent: \"amber\", children: [\"ivory\", \"orange\"] }, // A\n  { parent: \"lemon\", children: [\"ebony\", \"turquoise\"] }, // I\n  { parent: \"ivory\", children: [\"harlequin\"] }, // R\n  { parent: \"harlequin\", children: [] }, // L\n  { parent: \"ebony\", children: [\"indigo\", \"mauve\"] }, // S\n  { parent: \"indigo\", children: [] }, // H\n  { parent: \"sepia\", children: [\"ecru\", \"emerald\"] }, // T\n  { parent: \"emerald\", children: [\"khaki\", \"apricot\"] }, // M\n  { parent: \"khaki\", children: [\"eggplant\", \"lavender\"] }, // G\n  { parent: \"ecru\", children: [\"auburn\", \"teal\"] }, // N\n  { parent: \"auburn\", children: [\"lava\", \"rust\"] }, // D\n  { parent: \"lava\", children: [] }, // B\n  { parent: \"teal\", children: [\"white\", \"saffron\"] }, // K\n  { parent: \"white\", children: [] }, // C\n  { parent: \"apricot\", children: [] }, // O\n  { parent: \"lavender\", children: [] }, // Q\n  { parent: \"turquoise\", children: [\"silver\"] }, // U\n  { parent: \"silver\", children: [] }, // F\n  { parent: \"mauve\", children: [] }, // V\n  { parent: \"orange\", children: [\"red\", \"lilac\"] }, // W\n  { parent: \"lilac\", children: [] }, // J\n  { parent: \"red\", children: [] }, // P\n  { parent: \"rust\", children: [] }, // X\n  { parent: \"saffron\", children: [] }, // Y\n  { parent: \"eggplant\", children: [] }, // Z\n];\n\n// dot slime\n//    adds a poison counter to any unit it attacks\nconst dotSlimes = [\n  \"yellow\",\n  \"lemon\",\n  \"ebony\",\n  \"indigo\",\n  \"silver\",\n  \"ivory\",\n  \"harlequin\",\n  \"red\",\n  \"ecru\",\n  \"auburn\",\n  \"lava\",\n  \"white\",\n  \"khaki\",\n  \"eggplant\",\n];\n\n// dash slime\n//   ready on summon. moves each turn\nconst dashSlimes = [\n  \"sepia\",\n  \"emerald\",\n  \"apricot\",\n  \"lavender\",\n  \"teal\",\n  \"saffron\",\n  \"rust\",\n  \"amber\",\n  \"orange\",\n  \"lilac\",\n  \"turquoise\",\n  \"mauve\",\n];\n\n// attack closest creature, then closest structure.\nconst slimeAttackAI = (unit: Permanent, ctx: AIContext) => {\n  const { inspector, ai } = ctx;\n\n  ai.tryAttackFirst(unit, {\n    sort: [\n      \"creaturesFirst\",\n      // nearest first\n      { type: \"euclideanDistance\", slot: unit.slot },\n    ],\n  });\n};\n\nconst dotSlimeAI = (unit: Permanent, ctx: AIContext) => {\n  slimeAttackAI(unit, ctx);\n};\n\n// dash slimes move randomly each turn, then attack\nconst dashSlimeAI = (unit: Permanent, ctx: AIContext) => {\n  const { engine } = ctx;\n\n  const directions = [\n    { x: 0, y: 1 },\n    { x: 0, y: -1 },\n    { x: 1, y: 0 },\n    { x: -1, y: 0 },\n  ];\n\n  // pick a random direction to move\n  while (directions.length > 0) {\n    const idx = Math.floor(Math.random() * directions.length);\n    const dir = directions.splice(idx, 1)[0];\n\n    // we use engine.moveRel instead of ai.tryMoveRel since we want slime to remain ready to attack.\n    if (engine.moveRel(unit, dir.x, dir.y)) break;\n  }\n\n  slimeAttackAI(unit, ctx);\n};\n\nconst slimeHandler: PermanentEventHandlers = {\n  /** TODO: currently, this event triggers before the slime is destroyed.\n  /*  so a new slime won't spawn in the same slot as the parent\n  /*  imo (amon's opinion), this looks cooler, but in the event of slime flood, \n  /*  we may want to allow this.\n  /*/\n  [PermanentEventType.BEFORE_DESTROYED]: (event) => {\n    const { inspector, engine } = event.ctx;\n    // spawn child slimes (usually 2)\n    const name = inspector.getCardName(event.permanent);\n    const slot = event.permanent.slot;\n    slimeSpawnOrder\n      .find((s) => name.startsWith(s.parent))\n      ?.children.forEach((child) => {\n        const emptySlots = inspector.getUnoccupiedSlotsClosestTo(\n          Player.P2,\n          slot\n        );\n\n        let spawnSlot = slot;\n        // try to spawn the child in the closest empty slot\n        for (const emptySlot of emptySlots) {\n          if (engine.spawn(child + \"-slime\", emptySlot, Player.P2)) {\n            spawnSlot = emptySlot;\n            break;\n          }\n        }\n\n        // dot-slimes start frozen for one turn\n        if (dotSlimes.includes(child)) {\n          const slime = inspector.getPermanentAtIfExists(spawnSlot);\n          if (!slime) return;\n          engine.addCounter(slime, {\n            type: CounterType.FROZEN,\n            explanation: \"will not ready on its next turn\",\n            expiry: PermanentEventType.START_TURN,\n          });\n        }\n        // TODO: trigger loss if out of slots?\n      });\n\n    // track order of slimes killed\n    const ext = engine.getExtraState() as ExtraState;\n    const namePrefix = name.split(\"-\")[0];\n    ext.slimeKilledOrder.push(namePrefix);\n  },\n};\n\nexport const Puzzle44Spec: GameSpecServerFragment = {\n  disableP2NoBasesLossCondition: true,\n  counterData: {},\n\n  cardEffects: {\n    slime: {\n      handlers: slimeHandler,\n    },\n    ...dotSlimes.reduce(\n      (acc: { [key: string]: { handlers: PermanentEventHandlers } }, curr) => {\n        acc[curr + \"-slime\"] = {\n          handlers: {\n            ...slimeHandler,\n            // dotSlime adds +1 poison to any unit it attacks\n            [PermanentEventType.AFTER_DEAL_DAMAGE]: (event) => {\n              const { defender, ctx } = event;\n              const { engine } = ctx;\n              engine.mergeValueCounter(\n                defender,\n                CounterType.POISON,\n                1,\n                (poison) => `On start of turn, takes ${poison} Damage.`\n              );\n            },\n          },\n        };\n        return acc;\n      },\n      {}\n    ),\n    // TODO: ready dashSlimes on Summon\n    ...dashSlimes.reduce(\n      (acc: { [key: string]: { handlers: PermanentEventHandlers } }, curr) => {\n        acc[curr + \"-slime\"] = { handlers: slimeHandler };\n        return acc;\n      },\n      {}\n    ),\n  },\n  aiTurn: (ctx) => {\n    const { inspector, engine, ai } = ctx;\n    const turnNumber = inspector.getTurnNumber();\n    const units = inspector.getPermanentsOf(Player.P2);\n    if (turnNumber == 0) {\n      ai.trySpawn(\"slime\", 1, 2);\n    }\n    // act with all present units\n    for (const unit of units) {\n      const unitName = inspector.getCardName(unit);\n      if (dotSlimes.includes(unitName.split(\"-\")[0])) {\n        dotSlimeAI(unit, ctx);\n      } else if (dashSlimes.includes(unitName.split(\"-\")[0])) {\n        dashSlimeAI(unit, ctx);\n      } else if (unitName === \"slime\") {\n        slimeAttackAI(unit, ctx);\n      }\n    }\n  },\n  afterSummon: (permanent, ctx) => {\n    const { inspector, engine } = ctx;\n    const name = inspector.getCardName(permanent);\n    if (dashSlimes.includes(name.split(\"-\")[0])) {\n      // TODO: ready dashSlimes on Summon\n    }\n  },\n  afterInitEngine: (ctx) => {\n    ctx.engine.initExtraState({\n      slimeKilledOrder: [],\n    } as ExtraState);\n  },\n  extraLoseChecks: (player, ctx) => {\n    const { inspector } = ctx;\n\n    return (\n      player === Player.P2 && inspector.getPermanentsOf(player).length === 0\n    );\n  },\n  extraSolveChecks: (player, winner, ctx) => {\n    const { engine } = ctx;\n    const ext = engine.getExtraState() as ExtraState;\n    const slimeKilledOrder = ext.slimeKilledOrder;\n\n    // compare kill order with morse *EAIRLSHTMGNDBKCOQUFVWJPXYZ\n    // mapped to [\"slime\", \"yellow\", \"amber\", \"lemon\", ...]\n    const correctOrder = slimeSpawnOrder.map((slime) => slime.parent);\n    if (slimeKilledOrder.length !== correctOrder.length) return false;\n    for (let i = 0; i < slimeKilledOrder.length; i++) {\n      if (slimeKilledOrder[i] !== correctOrder[i]) return false;\n    }\n    return true;\n  },\n  afterGameEnd: (winner, solves, ctx) => {\n    const { engine, ai } = ctx;\n    if (!(solves[Player.P1] ?? false)) {\n      ai.speak(\n        \"The Slime disintegrated back into the sludge! It looks like you failed to befriend it. How puzzling!\",\n        {\n          hideBattler: true,\n          speaker: Speaker.NARRATOR,\n        }\n      );\n    }\n  },\n};\n","// import { CounterType } from \"engine/types/counters\";\nimport { Player } from \"engine/types/game-state\";\nimport { EngineContext, GameSpecServerFragment } from \"engine/types/game-specs\";\nimport { PermanentEventType } from \"engine/server-hooks\";\nimport { StepType } from \"engine/types/steps\";\nimport { SharedExtraState } from \"engine/game-specs/puzzle-46-shared\";\nimport { ColorSymbol } from \"engine/types/card-data\";\nimport { CounterType } from \"engine/types/counters\";\n\nconst BASE_SPEC: GameSpecServerFragment = {\n  disableP2NoBasesLossCondition: true,\n  counterData: {\n    // using doom counter, decrements by 1 each turn\n    [CounterType.DOOM]: {\n      handlers: {\n        [PermanentEventType.END_TURN]: (event) => {\n          const { permanent, counter, counterIndex, ctx } = event;\n          const { engine, inspector, ai } = ctx;\n          if (!inspector.isTurnPending(permanent.owner)) {\n            // Only apply on unit owner's turn\n            return;\n          }\n          if (counter == null || counterIndex == null) {\n            throw new Error(\"counter event should have counter specified\");\n          }\n          const isBargle = inspector.getCardName(permanent) === \"bargle\";\n          const isSwargle = inspector.getCardName(permanent) === \"swargle\";\n\n          // decrement\n          const newVal = (counter.val || 0) - 1;\n\n          if (newVal <= 0) {\n            if (isBargle) {\n              // Out of time!\n              ai.speak(\"Orgle orgle tirgle!\");\n              for (const unit of inspector.getPermanentsOf(Player.P1)) {\n                engine.destroy(permanent, unit);\n              }\n            } else if (isSwargle) {\n              // swargle dies\n              engine.destroy(permanent, permanent);\n            }\n            return { expire: true };\n          } else {\n            if (isBargle) {\n              if (newVal === 1) {\n                // Last turn to beat this round!\n                ai.speak(`Largle turgle torgle bergle thirgle rorgle!`);\n              } else if (newVal === 6) {\n                // Round 4! ${newVal} turns to beat this round.\n                ai.speak(`${newVal} turgle torgle bergle thirgle rorgle.`);\n              } else {\n                // {newVal} turns to beat this round.\n                ai.speak(`${newVal} turgle torgle bergle thirgle rorgle.`);\n              }\n            }\n            engine.updateCounterVal(permanent, counterIndex, newVal);\n          }\n        },\n      },\n    },\n  },\n  afterInitEngine: (ctx) => {\n    const { engine } = ctx;\n    engine.initSharedExtraState({\n      canAttackMorgle: false,\n    } as SharedExtraState);\n  },\n  cardEffects: {\n    // If any Enemy Creature would deal damage from the first or last columns, destroy it instead\n    cargle: {\n      insteadOfDamaged(permanent, damage, attacker, ctx) {\n        const { engine } = ctx;\n        if (attacker?.slot.column === 0 || attacker?.slot.column === 4) {\n          // destroy the attacker (attributed to cargle)\n          engine.destroy(permanent, attacker);\n          return false;\n        }\n        return true;\n      },\n    },\n    // If any Enemy Creature would deal damage from the second or fourth columns, destroy it instead\n    dorgle: {\n      insteadOfDamaged(permanent, damage, attacker, ctx) {\n        const { engine } = ctx;\n        if (attacker?.slot.column === 1 || attacker?.slot.column === 3) {\n          // destroy the attacker (attributed to dorgle)\n          engine.destroy(permanent, attacker);\n          return false;\n        }\n\n        return true;\n      },\n    },\n    // This Creature can only be attacked if another Creature moved into its column this turn.\n    //  (intentionally left blank): using SharedExtraState because client needs to know this,\n    //  see afterStep below and adjustAttackChecks in puzzle-46-shared\n    morgle: {},\n    // When this Creature is damaged, destroy the attacking Creature unless the player controlling it has exactly three Gems.\n    corgle: {\n      handlers: {\n        [PermanentEventType.AFTER_DAMAGED]: (event) => {\n          const { inspector, engine } = event.ctx;\n          const attacker = event.attacker;\n          if (!attacker) return;\n\n          const gems = inspector.getPlayerGems(attacker.owner);\n          if (gems.length === 3) return;\n\n          // destroy the attacker (attributed to corgle)\n          engine.destroy(event.permanent, attacker);\n        },\n      },\n    },\n    // At the beginning of your turn, if this Base's health is not prime, destroy all Enemy Units.\n    //    (time limit of 7 turns or else you lose - let's use a explicit counter for this)\n    bargle: {\n      handlers: {\n        [PermanentEventType.CREATED]: (event) => {\n          const { engine } = event.ctx;\n          engine.addCounter(event.permanent, {\n            type: CounterType.DOOM,\n            val: 8, // first tick immediately goes to val - 1\n          });\n        },\n        [PermanentEventType.START_TURN]: (event) => {\n          const { inspector, engine } = event.ctx;\n\n          // primes up to bargle's health - make sure to add primes if bargle gets buffed\n          const primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29];\n          if (primes.includes(inspector.getHealth(event.permanent))) return;\n\n          // destroy all enemy units\n          inspector.getPermanentsOf(Player.P1).forEach((permanent) => {\n            // destroy enemy unit (attributed to bargle)\n            engine.destroy(event.permanent, permanent);\n          });\n        },\n      },\n    },\n    // This Creature does not take damage from non-Green Creatures.\n    durgle: {\n      adjustDamageReceived(permanent, damage, attacker, ctx) {\n        const { inspector } = ctx;\n        if (!attacker) return 0;\n        const attackerColor = inspector.getCardColor(attacker);\n        if (attackerColor !== null && attackerColor === ColorSymbol.GREEN)\n          return damage;\n        return 0;\n      },\n    },\n    // This Creature takes ten times as much damage when it is attacked by Creatures with at least four health.\n    gorgle: {\n      adjustDamageReceived(permanent, damage, attacker, ctx) {\n        const { inspector } = ctx;\n        if (!attacker) return damage;\n        if (inspector.getHealth(attacker) >= 4) return damage * 10;\n        return damage;\n      },\n    },\n    // \"If this Creature takes damage, destroy all Enemy Units.\n    // This Creature dies automatically in six* turns\"\n    swargle: {\n      handlers: {\n        [PermanentEventType.CREATED]: (event) => {\n          const { engine } = event.ctx;\n          engine.addCounter(event.permanent, {\n            type: CounterType.DOOM,\n            val: 7, // first tick immediately goes to val - 1\n          });\n        },\n        [PermanentEventType.AFTER_DAMAGED]: (event) => {\n          const { inspector, engine } = event.ctx;\n\n          // destroy all enemy units\n          inspector.getPermanentsOf(Player.P1).forEach((permanent) => {\n            // destroy enemy unit (attributed to swargle)\n            engine.destroy(event.permanent, permanent);\n          });\n        },\n      },\n    },\n  },\n  afterStep(step, ctx) {\n    const { inspector, engine } = ctx;\n    // set canAttackMorgle true if a unit moved into its column\n    if (step.type !== StepType.MOVE) return;\n\n    const morgles = inspector.getPermanents({\n      owner: Player.P2,\n      name: \"morgle\",\n    });\n\n    // If the morgle has been destroyed, then there's nothing to do.\n    if (morgles.length === 0) return;\n    if (morgles.length > 1) throw new Error(\"multiple morgles found\");\n\n    const morgle = morgles[0];\n\n    if (step.slot.column === morgle.slot.column) {\n      engine.modifySharedExtraState({\n        canAttackMorgle: true,\n      } as SharedExtraState);\n    }\n  },\n  aiTurn: (ctx) => {\n    const { inspector, engine, ai } = ctx;\n    if (inspector.getTurnNumber() === 0) {\n      return;\n    }\n\n    const units = inspector.getPermanentsOf(Player.P2);\n\n    // clear canAttackMorgle\n    engine.modifySharedExtraState({\n      canAttackMorgle: false,\n    } as SharedExtraState);\n\n    for (const unit of units) {\n      // act with all present units, just use a basic attack\n      ai.tryAttackFirst(unit);\n    }\n  },\n\n  extraLoseChecks: (player, ctx) => {\n    const { inspector, engine } = ctx;\n\n    if (player === Player.P2) {\n      return inspector.getPermanentsOf(player).length === 0;\n    }\n    return false;\n  },\n};\n\nfunction spawnAt(\n  ctx: EngineContext,\n  name: string,\n  row: number,\n  column: number\n) {\n  ctx.engine.spawn(name, { row, column }, Player.P2);\n}\nexport const Puzzle46Spec_1: GameSpecServerFragment = {\n  ...BASE_SPEC,\n  beforeNewGame: (ctx) => {\n    spawnAt(ctx, \"cargle\", 1, 0);\n    spawnAt(ctx, \"dorgle\", 1, 4);\n  },\n};\nexport const Puzzle46Spec_2: GameSpecServerFragment = {\n  ...BASE_SPEC,\n  beforeNewGame: (ctx) => {\n    spawnAt(ctx, \"morgle\", 1, 2);\n  },\n};\nexport const Puzzle46Spec_3: GameSpecServerFragment = {\n  ...BASE_SPEC,\n  beforeNewGame: (ctx) => {\n    spawnAt(ctx, \"corgle\", 1, 2);\n  },\n};\nexport const Puzzle46Spec_4: GameSpecServerFragment = {\n  ...BASE_SPEC,\n  beforeNewGame: (ctx) => {\n    spawnAt(ctx, \"bargle\", 0, 2);\n  },\n};\nexport const Puzzle46Spec_5: GameSpecServerFragment = {\n  ...BASE_SPEC,\n  beforeNewGame: (ctx) => {\n    spawnAt(ctx, \"durgle\", 0, 0);\n    spawnAt(ctx, \"gorgle\", 0, 2);\n    spawnAt(ctx, \"swargle\", 0, 4);\n  },\n};\n","import { Inspector } from \"engine/Inspector\";\nimport { PermanentEventType } from \"engine/server-hooks\";\nimport { Check } from \"engine/types/action-validation\";\nimport { ColorSymbol } from \"engine/types/card-data\";\nimport { CounterType } from \"engine/types/counters\";\nimport { GameSpecServerFragment } from \"engine/types/game-specs\";\nimport { Permanent, Player, Slot } from \"engine/types/game-state\";\n\nexport type Puzzle50ExtraState = {\n  globalConstraints: { id: string; health: number }[];\n  clues: { id: string; health: number; row: number; column: number }[];\n  answer: boolean[][];\n  showSolution: boolean;\n  passed: boolean;\n  isInvulnerable: boolean;\n};\n\nexport const Puzzle50CommonSpec: GameSpecServerFragment = {\n  cardEffects: {\n    \"b-w-copier\": {\n      handlers: {\n        [PermanentEventType.CREATED]: (event) => {\n          event.ctx.engine.addCounter(event.permanent, {\n            type: CounterType.BASE_GEMS,\n            val: 3,\n          });\n        },\n      },\n      onSpecial: (step, ctx) => {\n        const { inspector, engine } = ctx;\n        const { permanent } = step;\n        const currSlot = permanent.slot;\n        const r = currSlot.row;\n        for (let c = 0; c < inspector.getNumColumns(); c++) {\n          if (c != currSlot.column) {\n            const permanent = inspector.getPermanentAtIfExists({\n              row: r,\n              column: c,\n            });\n            if (!permanent) continue;\n            const color = inspector.getCardColor(permanent);\n            // Don't do anything to WHITEBLACK cards\n            if (\n              color !== null &&\n              [ColorSymbol.WHITE, ColorSymbol.BLACK].includes(color)\n            ) {\n              engine.addCardToHand(permanent.owner, permanent.card);\n            }\n          }\n        }\n      },\n    },\n    \"pasture-planner\": {\n      adjustAttackChecks: (failed) => {\n        // this base can attack!!\n        failed.delete(Check.CARD_TYPE);\n      },\n      handlers: {\n        [PermanentEventType.CREATED]: (ev) => {\n          const { permanent, ctx } = ev;\n          const { engine } = ctx;\n          engine.addCounter(permanent, {\n            type: CounterType.INVULNERABLE,\n          });\n        },\n        [PermanentEventType.OTHER_UNIT_SPAWN]: (ev) => {\n          const { permanent, ctx } = ev;\n          const { engine } = ctx;\n          const played = ev.spawnedPermanent;\n          const extraState = engine.getExtraState() as Puzzle50ExtraState;\n          if (permanent.owner == played.owner) {\n            if (extraState.isInvulnerable) {\n              engine.addCounter(played, {\n                type: CounterType.INVULNERABLE,\n              });\n            } else {\n              engine.addCounter(played, {\n                type: CounterType.CANNOT_BE_DESTROYED,\n              });\n            }\n            engine.addCounter(played, {\n              type: CounterType.CANNOT_MOVE,\n            });\n          }\n        },\n        [PermanentEventType.END_TURN]: (ev) => {\n          const { permanent, ctx } = ev;\n          const { inspector, ai } = ctx;\n          // check for doom counter\n          if (\n            !inspector.doesPermanentHaveCounterType(\n              permanent,\n              CounterType.DOOM\n            ) ||\n            !inspector.isTurnPending(Player.P2)\n          ) {\n            return;\n          }\n          const counterIndex = permanent.counters.findIndex(\n            (counter) => counter.type === CounterType.DOOM\n          );\n          const counter = permanent.counters[counterIndex];\n          // decrement counter\n          const newVal = (counter.val || 0) - 1;\n          const timer = Array(newVal).fill(\"⏳\").join(\" \");\n          if (newVal === 1) {\n            ai.speak(`Audit is coming!\\n${timer}`);\n          } else if (newVal > 1) {\n            ai.speak(`Audit in ${newVal} turns!\\n${timer}`);\n          }\n        },\n      },\n    },\n  },\n  aiTurn: (ctx) => {\n    const { inspector, engine, ai } = ctx;\n    const extraState = engine.getExtraState() as Puzzle50ExtraState;\n    const { globalConstraints, clues, answer, showSolution } = extraState;\n    const turn = inspector.getTurnNumber() / 2;\n    const base = inspector\n      .getPermanentsOf(Player.P2)\n      .filter((permanent) => inspector.getSharedEffects(permanent).isBase)[0];\n    const playerBase = inspector\n      .getPermanentsOf(Player.P1)\n      .filter((permanent) => inspector.getSharedEffects(permanent).isBase)[0];\n\n    if (turn === 0) {\n      // Turn 0: place all global constraint cards on their home row (guaranteed that there are at most 4)\n      const slots: Slot[] = [\n        { row: 0, column: 0 },\n        { row: 0, column: 1 },\n        { row: 0, column: 3 },\n        { row: 0, column: 4 },\n      ];\n      for (const { id, health } of globalConstraints) {\n        const slot = slots.shift();\n        if (!slot) throw new Error(\"oops\");\n        ai.trySpawn(id, slot);\n        const permanent = inspector.getPermanentsAt(slot)[0];\n        engine.adjustPermanentStats(permanent, 0, health - 1);\n        // engine.addCounter(permanent, {\n        //   type: CounterType.MAX_HEALTH_ADJUSTMENT,\n        //   val: health - 1, // all start with 1 health already\n        // });\n      }\n    }\n\n    if (turn >= 1 && turn <= clues.length) {\n      // Turn 1~N: place one clue in the center per turn\n      const { id, health, row, column } = clues[turn - 1];\n      const slot = { row: row + 1, column };\n      for (const unit of inspector.getPermanentsAt(slot)) {\n        // destroying anything there first if occupied\n        engine.destroy(base, unit);\n      }\n      if (!ai.trySpawn(id, slot)) {\n        throw new Error(`why ${id} ${JSON.stringify(slot)}`);\n      }\n      const permanent = inspector.getPermanentsAt(slot)[0];\n      engine.adjustPermanentStats(permanent, 0, health - 1);\n      // engine.addCounter(permanent, {\n      //   type: CounterType.MAX_HEALTH_ADJUSTMENT,\n      //   val: health - 1, // all start with 1 health already\n      // });\n    }\n\n    if (turn === clues.length) {\n      // Turn N: add a DOOM counter to the AI base\n      if (clues.length <= 2) {\n        // If there are very few clues then give more turns\n        engine.addCounter(base, {\n          type: CounterType.DOOM,\n          val: 7 - clues.length,\n          explanation: \"Audit is coming\",\n        });\n      } else {\n        engine.addCounter(base, {\n          type: CounterType.DOOM,\n          val: 4,\n          explanation: \"Audit is coming\",\n        });\n      }\n    }\n\n    if (\n      turn > clues.length &&\n      inspector.getCounterValSum(base, CounterType.DOOM) === 1\n    ) {\n      /*\n      When DOOM counter hits zero, the AI base will \"activate\" all friendly cards,\n      and each card will check for the constraint it correspond to.\n      (Maybe it is easier to implement this check under each card instead of within the base?)\n      (If the center field is not completely filled with black or white cards, the base itself fails)\n      */\n      const failedPermanents = [];\n      const grid = convertToGrid(inspector);\n      if (grid === null) {\n        failedPermanents.push(base);\n      } else {\n        const components = splitComponents(grid);\n        for (const permanent of inspector.getPermanentsOf(Player.P2)) {\n          const getCheckerMakerId = (a: string) => {\n            const i = parseInt(a.split(\"-\").pop() ?? \"\");\n            return i % 2 === 1 ? `${i}-${i + 1}` : `${i - 1}-${i}`;\n          };\n          let ok = true;\n          if (permanent.card.name?.startsWith(\"puzzle-50-global-\")) {\n            ok = globalCheckerMakers[getCheckerMakerId(permanent.card.name)](\n              permanentToColor(inspector, permanent) ?? false\n            )(grid, components, inspector.getHealth(permanent), clues);\n          }\n          if (permanent.card.name?.startsWith(\"puzzle-50-local-\")) {\n            ok = localCheckerMakers[getCheckerMakerId(permanent.card.name)](\n              permanentToColor(inspector, permanent) ?? false\n            )(\n              grid,\n              components,\n              inspector.getHealth(permanent),\n              permanent.slot.row - 1,\n              permanent.slot.column\n            );\n          }\n          if (!ok) {\n            failedPermanents.push(permanent);\n          }\n        }\n      }\n      /*\n      Each failed card (local or global) gains 100 power.\n      If showSolution is set to True, the AI also destroys all incorrect cards that we placed\n      and replaces them with \"resident\" of the correct color (this includes any empty slots).\n      */\n      for (const permanent of failedPermanents) {\n        // Bypassing adjustPermanentStats because custom explanation\n        engine.addCounter(permanent, {\n          type: CounterType.POWER_ADJUSTMENT,\n          val: 100,\n          explanation: \"Failed audit!\",\n        });\n      }\n      if (showSolution) {\n        for (let i = 0; i < 5; i++) {\n          for (let j = 0; j < 5; j++) {\n            const slot = { row: i + 1, column: j };\n            const correct = answer[i][j];\n            for (const permanent of inspector.getPermanentsAt(slot)) {\n              if (permanentToColor(inspector, permanent) !== correct) {\n                engine.destroy(base, permanent);\n              }\n            }\n            ai.trySpawn(`puzzle-50-local-${correct ? 1 : 2}`, slot);\n          }\n        }\n      }\n\n      /*\n      All failed cards then attack our base (presumably destroying it).\n      If no card attacked, the AI base self-destructs (so we win).\n      */\n      for (const permanent of failedPermanents) {\n        ai.tryAttack(permanent, playerBase);\n      }\n      if (failedPermanents.length === 0) {\n        engine.destroy(base, base);\n      }\n    }\n  },\n  afterGameEnd: (winner, solves, ctx) => {\n    const { engine, ai } = ctx;\n    if (!(solves[Player.P1] ?? false)) {\n      ai.speak(\n        \"Audit failed! Violators shall be punished in accordance with the law!\"\n      );\n    } else {\n      engine.clearKeyframe();\n    }\n  },\n};\n\n// a connected component is a list of cells, each of the same color\ntype Cell = { row: number; column: number };\ntype Component = { color: boolean; cells: Cell[] };\n\ntype GlobalChecker = (\n  grid: boolean[][],\n  components: Component[],\n  health: number,\n  clues: Cell[]\n) => boolean;\n\ntype LocalChecker = (\n  grid: boolean[][],\n  components: Component[],\n  health: number,\n  row: number,\n  column: number\n) => boolean;\n\n// a CheckerMaker takes a color and makes its corresponding Checker\ntype GlobalCheckerMaker = (color: boolean) => GlobalChecker;\ntype LocalCheckerMaker = (color: boolean) => LocalChecker;\n\nconst permanentToColor = (inspector: Inspector, permanent: Permanent) => {\n  const color = inspector.getCardColor(permanent);\n  if (color === null) return null;\n  switch (color) {\n    case ColorSymbol.WHITE:\n      return false;\n    case ColorSymbol.BLACK:\n      return true;\n    default:\n      return null;\n  }\n};\n\nconst isInBounds = (cell: Cell): boolean => {\n  const { row, column } = cell;\n  return 0 <= row && row < 5 && 0 <= column && column < 5;\n};\n\nconst convertToGrid = (inspector: Inspector): boolean[][] | null => {\n  const grid: (boolean | null)[][] = Array(5)\n    .fill(null)\n    .map((_) => Array(5).fill(null));\n\n  inspector.getAllPermanents().forEach((permanent) => {\n    // Convert gameboard coordinate to grid coordinate (top-left = (1,0))\n    const row = permanent.slot.row - 1;\n    const column = permanent.slot.column;\n    if (isInBounds({ row, column })) {\n      grid[row][column] = permanentToColor(inspector, permanent);\n    }\n  });\n\n  return grid.every((a): a is boolean[] => a.every((a) => a !== null))\n    ? grid\n    : null;\n};\n\nconst isCellEqual = (a: Cell, b: Cell): boolean => {\n  return a.row === b.row && a.column === b.column;\n};\nconst hasEqualCell = (a: Cell[], b: Cell): boolean => {\n  return a.some((cell) => isCellEqual(cell, b));\n};\n\nconst splitComponentsMaker =\n  (neighborsOf: (cell: Cell) => Cell[]) =>\n  (grid: boolean[][]): Component[] => {\n    const colorOf = (grid: boolean[][], cell: Cell): boolean => {\n      return grid[cell.row][cell.column];\n    };\n    const result: Component[] = [];\n    const unseenCells: Cell[] = [];\n    for (let row = 0; row < 5; row++) {\n      for (let column = 0; column < 5; column++) {\n        unseenCells.push({ row, column });\n      }\n    }\n    while (unseenCells.length > 0) {\n      const cell = unseenCells[0];\n      const color = colorOf(grid, cell);\n      const cells: Cell[] = [];\n      const add = (cell: Cell) => {\n        const idx = unseenCells.findIndex((unseen) =>\n          isCellEqual(cell, unseen)\n        );\n        if (idx === -1) return;\n        unseenCells.splice(idx, 1);\n        cells.push(cell);\n        neighborsOf(cell)\n          .filter((neighbor) => colorOf(grid, neighbor) === color)\n          .forEach((neighbor) => add(neighbor));\n      };\n      add(cell);\n      result.push({ color, cells });\n    }\n    return result;\n  };\n\nconst splitComponents = splitComponentsMaker((cell: Cell) => {\n  const { row, column } = cell;\n  return [\n    { row: row + 1, column },\n    { row: row - 1, column },\n    { row, column: column + 1 },\n    { row, column: column - 1 },\n  ].filter(isInBounds);\n});\n\nconst globalCheckerMakers: { [id: string]: GlobalCheckerMaker } = {\n  // Must be orthogonally connected\n  \"1-2\": (color) => (grid, components, health, clues) => {\n    let count = 0;\n    for (let i = 0; i < components.length; i++) {\n      if (components[i].color == color) count++;\n    }\n    return count <= 1;\n  },\n  // Must be diagonally (including orthogonally) connected\n  \"3-4\": (color) => (grid) => {\n    const components = splitComponentsMaker((cell: Cell) => {\n      const { row, column } = cell;\n      return [\n        { row: row + 1, column },\n        { row: row - 1, column },\n        { row, column: column + 1 },\n        { row, column: column - 1 },\n        { row: row + 1, column: column + 1 },\n        { row: row - 1, column: column + 1 },\n        { row: row + 1, column: column - 1 },\n        { row: row - 1, column: column - 1 },\n      ].filter(isInBounds);\n    })(grid);\n    let count = 0;\n    for (let i = 0; i < components.length; i++) {\n      if (components[i].color == color) count++;\n    }\n    return count <= 1;\n  },\n  // Must be orthogonally connected to boundary\n  \"5-6\": (color) => (grid, components, health, clues) => {\n    for (let i = 0; i < components.length; i++) {\n      if (components[i].color == color) {\n        let connected = false;\n        for (const cell of components[i].cells) {\n          if (\n            cell.row == 0 ||\n            cell.row == 4 ||\n            cell.column == 0 ||\n            cell.column == 4\n          ) {\n            connected = true;\n            break;\n          }\n        }\n        if (!connected) return false;\n      }\n    }\n    return true;\n  },\n  // No 2x2 blocks\n  \"7-8\": (color) => (grid, components, health, clues) => {\n    for (let r = 0; r < 4; r++) {\n      for (let c = 0; c < 4; c++) {\n        if (\n          grid[r][c] == color &&\n          grid[r + 1][c] == color &&\n          grid[r][c + 1] == color &&\n          grid[r + 1][c + 1] == color\n        ) {\n          return false;\n        }\n      }\n    }\n    return true;\n  },\n  // Must be rectangles\n  \"9-10\": (color) => (grid, components, health, clues) => {\n    for (let r = 0; r < 4; r++) {\n      for (let c = 0; c < 4; c++) {\n        let count = 0;\n        // The condition is equivalent to \"No L-shape in a 2x2\"\n        if (grid[r][c] == color) count++;\n        if (grid[r][c + 1] == color) count++;\n        if (grid[r + 1][c] == color) count++;\n        if (grid[r + 1][c + 1] == color) count++;\n        if (count == 3) return false;\n      }\n    }\n    return true;\n  },\n  // Must be squares\n  \"11-12\": (color) => (grid, components, health, clues) => {\n    for (let r = 0; r < 5; r++) {\n      for (let c = 0; c < 5; c++) {\n        if (grid[r][c] != color) continue;\n        // every cell must see the same number of cells horizontally and vertically\n        let up, down, left, right;\n        up = down = left = right = 0;\n        for (let i = 1; i <= r; i++) {\n          if (grid[r - i][c] != color) break;\n          up++;\n        }\n        for (let i = 1; i <= 4 - r; i++) {\n          if (grid[r + i][c] != color) break;\n          down++;\n        }\n        for (let i = 1; i <= c; i++) {\n          if (grid[r][c - i] != color) break;\n          left++;\n        }\n        for (let i = 1; i <= 4 - c; i++) {\n          if (grid[r][c + i] != color) break;\n          right++;\n        }\n        if (up + down != left + right) return false;\n      }\n    }\n    return true;\n  },\n  // Must form paths\n  \"13-14\": (color) => (grid, components, health, clues) => {\n    for (let i = 0; i < components.length; i++) {\n      if (components[i].color != color) continue;\n      let numOnes = 0;\n      for (const cell of components[i].cells) {\n        const { row: r, column: c } = cell;\n        let count = 0;\n        if (r > 0 && grid[r - 1][c] == color) count++;\n        if (r < 4 && grid[r + 1][c] == color) count++;\n        if (c > 0 && grid[r][c - 1] == color) count++;\n        if (c < 4 && grid[r][c + 1] == color) count++;\n        if (count > 2 || count < 1) return false;\n        if (count == 1) numOnes++;\n      }\n      if (numOnes != 2) return false;\n    }\n    return true;\n  },\n  // Must form loops\n  \"15-16\": (color) => (grid, components, health, clues) => {\n    for (let r = 0; r < 5; r++) {\n      for (let c = 0; c < 5; c++) {\n        if (grid[r][c] != color) continue;\n        let count = 0;\n        if (r > 0 && grid[r - 1][c] == color) count++;\n        if (r < 4 && grid[r + 1][c] == color) count++;\n        if (c > 0 && grid[r][c - 1] == color) count++;\n        if (c < 4 && grid[r][c + 1] == color) count++;\n        if (count != 2) return false;\n      }\n    }\n    return true;\n  },\n  // Must have size N\n  \"17-18\": (color) => (grid, components, health, clues) => {\n    for (let i = 0; i < components.length; i++) {\n      if (components[i].color != color) continue;\n      if (components[i].cells.length != health) return false;\n    }\n    return true;\n  },\n  // Contains exactly N clues\n  \"19-20\": (color) => (grid, components, health, clues) => {\n    for (let i = 0; i < components.length; i++) {\n      if (components[i].color != color) continue;\n      let count = 0;\n      for (const cell of components[i].cells) {\n        if (hasEqualCell(clues, cell)) count++;\n      }\n      if (count != health) return false;\n    }\n    return true;\n  },\n  // Contains up to N clues\n  \"21-22\": (color) => (grid, components, health, clues) => {\n    for (let i = 0; i < components.length; i++) {\n      if (components[i].color != color) continue;\n      let count = 0;\n      for (const cell of components[i].cells) {\n        if (hasEqualCell(clues, cell)) count++;\n      }\n      if (count > health) return false;\n    }\n    return true;\n  },\n};\n\nconst localCheckerMakers: { [id: string]: LocalCheckerMaker } = {\n  // Nothing\n  \"1-2\": (color) => (grid, components, health, row, column) => {\n    return true;\n  },\n  // Number of neighboring cells with the same color\n  \"3-4\": (color) => (grid, components, health, row, column) => {\n    let count = 0;\n    if (row > 0 && grid[row - 1][column] == color) count++;\n    if (row < 4 && grid[row + 1][column] == color) count++;\n    if (column > 0 && grid[row][column - 1] == color) count++;\n    if (column < 4 && grid[row][column + 1] == color) count++;\n    return count == health;\n  },\n  // Number of surrounding cells with opposite color\n  \"5-6\": (color) => (grid, components, health, row, column) => {\n    let count = 0;\n    for (let r = Math.max(0, row - 1); r <= Math.min(4, row + 1); r++) {\n      for (let c = Math.max(0, column - 1); c <= Math.min(4, column + 1); c++) {\n        if (grid[r][c] != color) count++;\n      }\n    }\n    return count == health;\n  },\n  // Number of cells in this column with opposite color\n  \"7-8\": (color) => (grid, components, health, row, column) => {\n    let count = 0;\n    for (let r = 0; r < 5; r++) {\n      if (grid[r][column] != color) count++;\n    }\n    return count == health;\n  },\n  // Number of cells in this row with opposite color\n  \"9-10\": (color) => (grid, components, health, row, column) => {\n    let count = 0;\n    for (let c = 0; c < 5; c++) {\n      if (grid[row][c] != color) count++;\n    }\n    return count == health;\n  },\n  // Area of this region\n  \"11-12\": (color) => (grid, components, health, row, column) => {\n    for (let i = 0; i < components.length; i++) {\n      if (hasEqualCell(components[i].cells, { row, column })) {\n        return components[i].cells.length == health;\n      }\n    }\n    return false;\n  },\n  // Sum of areas of all neighboring regions\n  \"13-14\": (color) => (grid, components, health, row, column) => {\n    let count = 0;\n    for (let i = 0; i < components.length; i++) {\n      if (components[i].color == color) continue;\n      if (\n        hasEqualCell(components[i].cells, { row: row - 1, column: column }) ||\n        hasEqualCell(components[i].cells, { row: row + 1, column: column }) ||\n        hasEqualCell(components[i].cells, { row: row, column: column - 1 }) ||\n        hasEqualCell(components[i].cells, { row: row, column: column + 1 })\n      ) {\n        count += components[i].cells.length;\n      }\n    }\n    return count == health;\n  },\n  // Number of cells with the same color that this cell can \"see\"\n  \"15-16\": (color) => (grid, components, health, row, column) => {\n    let up, down, left, right;\n    up = down = left = right = 0;\n    for (let i = 1; i <= row; i++) {\n      if (grid[row - i][column] != color) break;\n      up++;\n    }\n    for (let i = 1; i <= 4 - row; i++) {\n      if (grid[row + i][column] != color) break;\n      down++;\n    }\n    for (let i = 1; i <= column; i++) {\n      if (grid[row][column - i] != color) break;\n      left++;\n    }\n    for (let i = 1; i <= 4 - column; i++) {\n      if (grid[row][column + i] != color) break;\n      right++;\n    }\n    return up + down + left + right + 1 == health;\n  },\n  // Number of cells with opposite color that this cell can \"see\"\n  \"17-18\": (color) => (grid, components, health, row, column) => {\n    let up, down, left, right;\n    up = down = left = right = 0;\n    for (let i = 1; i <= row; i++) {\n      if (grid[row - i][column] == color) break;\n      up++;\n    }\n    for (let i = 1; i <= 4 - row; i++) {\n      if (grid[row + i][column] == color) break;\n      down++;\n    }\n    for (let i = 1; i <= column; i++) {\n      if (grid[row][column - i] == color) break;\n      left++;\n    }\n    for (let i = 1; i <= 4 - column; i++) {\n      if (grid[row][column + i] == color) break;\n      right++;\n    }\n    return up + down + left + right == health;\n  },\n};\n","export default {\n  global_constraint: [\n    [1, 1],\n    [7, 1],\n  ],\n  puzzles: [\n    {\n      clues: [\n        [18, 8, 0, 4],\n        [18, 5, 1, 2],\n        [18, 2, 3, 3],\n        [18, 5, 4, 0],\n      ],\n      answer: [\n        [true, true, true, true, false],\n        [false, true, false, true, true],\n        [false, true, true, false, true],\n        [true, true, false, false, true],\n        [false, true, true, true, true],\n      ],\n    },\n    {\n      clues: [\n        [18, 1, 0, 4],\n        [18, 7, 1, 4],\n        [18, 1, 3, 0],\n        [18, 5, 3, 1],\n      ],\n      answer: [\n        [false, true, false, true, false],\n        [true, true, true, true, false],\n        [false, true, false, true, true],\n        [false, false, true, false, true],\n        [true, true, true, true, true],\n      ],\n    },\n    {\n      clues: [\n        [18, 4, 0, 2],\n        [18, 7, 2, 1],\n        [18, 1, 3, 0],\n        [18, 2, 3, 4],\n      ],\n      answer: [\n        [true, true, false, false, false],\n        [false, true, true, false, false],\n        [false, false, true, true, true],\n        [false, true, false, true, false],\n        [false, true, true, true, false],\n      ],\n    },\n    {\n      clues: [\n        [18, 4, 1, 3],\n        [18, 8, 2, 2],\n        [18, 3, 3, 4],\n        [18, 4, 4, 4],\n      ],\n      answer: [\n        [true, true, true, true, true],\n        [true, false, true, false, true],\n        [true, true, false, true, true],\n        [true, false, true, false, false],\n        [true, true, true, true, false],\n      ],\n    },\n    {\n      clues: [\n        [18, 4, 1, 2],\n        [18, 5, 1, 3],\n        [18, 8, 2, 0],\n        [18, 1, 4, 2],\n      ],\n      answer: [\n        [true, false, true, true, true],\n        [true, true, false, false, true],\n        [false, true, true, true, true],\n        [true, true, false, true, false],\n        [true, false, false, true, false],\n      ],\n    },\n    {\n      clues: [\n        [18, 2, 0, 0],\n        [18, 6, 2, 4],\n        [18, 6, 3, 1],\n        [18, 4, 4, 4],\n      ],\n      answer: [\n        [false, true, true, false, true],\n        [false, true, false, true, true],\n        [true, true, true, true, false],\n        [true, false, true, false, false],\n        [true, true, true, true, false],\n      ],\n    },\n    {\n      clues: [\n        [18, 3, 0, 0],\n        [18, 1, 2, 3],\n        [18, 7, 4, 4],\n      ],\n      answer: [\n        [false, false, true, true, true],\n        [true, true, true, false, true],\n        [true, false, false, false, true],\n        [true, true, false, false, true],\n        [false, true, true, true, false],\n      ],\n    },\n    {\n      clues: [\n        [18, 3, 0, 3],\n        [18, 4, 0, 4],\n        [18, 2, 1, 3],\n        [18, 6, 2, 1],\n        [18, 6, 3, 3],\n      ],\n      answer: [\n        [true, true, true, false, false],\n        [true, false, false, false, true],\n        [true, false, true, true, true],\n        [true, true, true, false, true],\n        [false, true, false, true, true],\n      ],\n    },\n    {\n      clues: [\n        [18, 4, 0, 3],\n        [18, 3, 1, 1],\n        [18, 1, 1, 2],\n        [18, 2, 2, 0],\n        [18, 3, 2, 2],\n        [18, 1, 4, 4],\n      ],\n      answer: [\n        [false, false, false, false, false],\n        [false, false, false, true, false],\n        [false, true, false, true, false],\n        [true, true, true, true, false],\n        [false, true, false, true, false],\n      ],\n    },\n    {\n      clues: [\n        [18, 2, 0, 1],\n        [18, 4, 1, 4],\n        [18, 7, 2, 1],\n        [18, 8, 3, 3],\n      ],\n      answer: [\n        [true, false, false, true, false],\n        [true, true, false, true, false],\n        [true, false, true, true, true],\n        [true, true, true, false, true],\n        [false, true, false, true, true],\n      ],\n    },\n  ],\n};\n","export default {\n  global_constraint: [\n    [2, 1],\n    [5, 1],\n  ],\n  puzzles: [\n    {\n      clues: [\n        [16, 3, 0, 0],\n        [16, 6, 0, 2],\n        [16, 4, 1, 2],\n        [16, 7, 2, 0],\n        [16, 4, 3, 2],\n        [16, 5, 3, 4],\n      ],\n      answer: [\n        [false, false, false, true, false],\n        [true, true, false, true, false],\n        [false, false, false, false, false],\n        [false, true, false, true, false],\n        [false, true, true, true, false],\n      ],\n    },\n    {\n      clues: [\n        [16, 6, 0, 1],\n        [16, 5, 0, 4],\n        [16, 7, 1, 2],\n        [16, 9, 3, 3],\n        [16, 7, 4, 4],\n      ],\n      answer: [\n        [false, false, false, false, false],\n        [true, false, false, false, true],\n        [true, true, false, false, false],\n        [false, false, false, false, false],\n        [false, false, false, false, false],\n      ],\n    },\n    {\n      clues: [\n        [16, 2, 0, 1],\n        [16, 4, 0, 2],\n        [16, 4, 0, 4],\n        [16, 5, 2, 2],\n        [16, 3, 3, 3],\n      ],\n      answer: [\n        [true, false, false, true, false],\n        [true, true, false, true, false],\n        [true, true, false, false, false],\n        [true, true, true, false, false],\n        [true, true, true, true, true],\n      ],\n    },\n    {\n      clues: [\n        [16, 5, 1, 0],\n        [16, 8, 2, 2],\n        [16, 5, 2, 4],\n        [16, 9, 4, 1],\n        [16, 8, 4, 2],\n        [16, 8, 4, 3],\n      ],\n      answer: [\n        [true, false, true, true, true],\n        [false, false, false, false, true],\n        [false, false, false, false, false],\n        [true, false, false, false, true],\n        [false, false, false, false, false],\n      ],\n    },\n    {\n      clues: [\n        [16, 7, 0, 1],\n        [16, 6, 1, 0],\n        [16, 7, 2, 1],\n        [16, 6, 3, 2],\n        [16, 8, 3, 4],\n        [16, 5, 4, 4],\n      ],\n      answer: [\n        [false, false, false, true, true],\n        [false, false, true, true, false],\n        [false, false, false, true, false],\n        [false, false, false, false, false],\n        [false, false, true, false, false],\n      ],\n    },\n    {\n      clues: [\n        [16, 8, 0, 0],\n        [16, 7, 1, 0],\n        [16, 4, 2, 0],\n        [16, 5, 3, 1],\n        [16, 5, 4, 3],\n      ],\n      answer: [\n        [false, false, false, false, false],\n        [false, false, false, false, true],\n        [false, true, true, true, true],\n        [false, false, false, false, true],\n        [true, false, false, false, false],\n      ],\n    },\n    {\n      clues: [\n        [16, 6, 0, 3],\n        [16, 7, 1, 0],\n        [16, 5, 2, 1],\n        [16, 7, 2, 3],\n        [16, 6, 3, 2],\n        [16, 3, 4, 1],\n      ],\n      answer: [\n        [false, true, false, false, false],\n        [false, false, false, false, false],\n        [false, false, false, false, true],\n        [true, true, false, false, true],\n        [false, false, false, true, true],\n      ],\n    },\n    {\n      clues: [\n        [16, 4, 0, 0],\n        [16, 3, 0, 2],\n        [16, 5, 0, 4],\n        [16, 5, 3, 3],\n        [16, 3, 4, 1],\n        [16, 6, 4, 3],\n      ],\n      answer: [\n        [false, true, false, false, false],\n        [false, true, true, false, false],\n        [false, false, false, false, false],\n        [false, false, true, false, true],\n        [true, false, true, false, false],\n      ],\n    },\n    {\n      clues: [\n        [16, 5, 0, 3],\n        [16, 5, 1, 0],\n        [16, 6, 1, 1],\n        [16, 3, 1, 4],\n        [16, 7, 2, 1],\n        [16, 3, 4, 2],\n      ],\n      answer: [\n        [false, false, false, false, false],\n        [false, false, true, true, false],\n        [false, false, false, true, false],\n        [false, false, true, true, true],\n        [true, false, false, false, true],\n      ],\n    },\n    {\n      clues: [\n        [16, 2, 0, 1],\n        [16, 3, 1, 0],\n        [16, 5, 3, 3],\n        [16, 6, 4, 1],\n        [16, 7, 4, 3],\n        [16, 8, 4, 4],\n      ],\n      answer: [\n        [false, false, true, true, false],\n        [false, true, true, false, false],\n        [false, false, true, false, false],\n        [true, false, true, false, false],\n        [true, false, false, false, false],\n      ],\n    },\n  ],\n};\n","export default {\n  global_constraint: [\n    [2, 1],\n    [17, 1],\n  ],\n  puzzles: [\n    {\n      clues: [\n        [16, 9, 1, 3],\n        [16, 5, 1, 4],\n        [16, 2, 3, 0],\n        [16, 6, 4, 1],\n      ],\n      answer: [\n        [false, true, false, false, true],\n        [false, false, false, false, false],\n        [true, false, false, false, true],\n        [false, false, true, false, false],\n        [true, false, false, false, true],\n      ],\n    },\n    {\n      clues: [\n        [16, 3, 1, 1],\n        [16, 6, 2, 1],\n        [16, 4, 4, 2],\n        [16, 3, 4, 4],\n      ],\n      answer: [\n        [false, true, false, false, false],\n        [false, false, true, false, true],\n        [false, false, false, false, false],\n        [false, true, false, false, false],\n        [true, false, false, true, false],\n      ],\n    },\n    {\n      clues: [\n        [16, 7, 1, 4],\n        [16, 3, 2, 3],\n        [16, 3, 4, 2],\n      ],\n      answer: [\n        [false, false, false, true, false],\n        [true, false, false, false, false],\n        [false, false, true, false, false],\n        [false, false, false, true, false],\n        [false, true, false, false, true],\n      ],\n    },\n    {\n      clues: [\n        [16, 3, 0, 0],\n        [16, 4, 0, 1],\n        [16, 4, 4, 3],\n        [16, 8, 4, 4],\n      ],\n      answer: [\n        [false, false, false, true, false],\n        [true, false, false, false, false],\n        [false, true, false, false, false],\n        [false, false, false, true, false],\n        [true, false, false, false, false],\n      ],\n    },\n    {\n      clues: [\n        [16, 5, 0, 0],\n        [16, 9, 2, 3],\n        [16, 6, 2, 4],\n        [16, 8, 3, 3],\n        [16, 8, 4, 2],\n      ],\n      answer: [\n        [false, false, false, false, false],\n        [true, false, false, false, true],\n        [false, false, false, false, false],\n        [true, false, false, false, false],\n        [false, false, false, false, true],\n      ],\n    },\n    {\n      clues: [\n        [16, 7, 1, 0],\n        [16, 5, 3, 1],\n        [16, 9, 3, 2],\n        [16, 7, 4, 3],\n      ],\n      answer: [\n        [true, false, false, false, false],\n        [false, false, false, false, true],\n        [false, true, false, false, false],\n        [false, false, false, false, false],\n        [false, true, false, false, false],\n      ],\n    },\n    {\n      clues: [\n        [16, 5, 0, 1],\n        [16, 4, 2, 3],\n        [16, 8, 3, 0],\n        [16, 8, 4, 4],\n      ],\n      answer: [\n        [false, false, false, false, false],\n        [false, true, false, true, false],\n        [false, false, true, false, false],\n        [false, false, false, false, false],\n        [true, false, false, false, false],\n      ],\n    },\n    {\n      clues: [\n        [16, 9, 0, 1],\n        [16, 5, 0, 2],\n        [16, 6, 1, 0],\n        [16, 6, 3, 4],\n        [16, 7, 4, 2],\n      ],\n      answer: [\n        [false, false, false, false, false],\n        [false, false, true, false, false],\n        [false, false, false, false, true],\n        [false, false, false, false, false],\n        [false, false, false, false, false],\n      ],\n    },\n    {\n      clues: [\n        [16, 8, 1, 4],\n        [16, 7, 2, 2],\n        [16, 9, 2, 3],\n        [16, 9, 3, 0],\n        [16, 5, 4, 3],\n      ],\n      answer: [\n        [false, false, true, false, false],\n        [false, false, false, false, false],\n        [false, false, false, false, false],\n        [false, false, false, false, false],\n        [false, false, true, false, true],\n      ],\n    },\n    {\n      clues: [\n        [16, 6, 0, 2],\n        [16, 5, 1, 1],\n        [16, 7, 2, 0],\n        [16, 3, 2, 4],\n      ],\n      answer: [\n        [false, true, false, false, false],\n        [false, false, false, false, true],\n        [false, false, false, true, false],\n        [false, true, false, false, false],\n        [false, false, true, false, false],\n      ],\n    },\n  ],\n};\n","export default {\n  global_constraint: [],\n  puzzles: [\n    {\n      clues: [\n        [14, 3, 0, 1],\n        [14, 7, 1, 1],\n        [14, 6, 1, 4],\n        [14, 4, 3, 4],\n        [14, 7, 4, 2],\n      ],\n      answer: [\n        [false, false, true, true, true],\n        [true, false, false, false, false],\n        [true, true, false, true, true],\n        [true, true, false, true, false],\n        [true, true, false, false, true],\n      ],\n    },\n    {\n      clues: [\n        [14, 9, 0, 0],\n        [14, 9, 0, 2],\n        [14, 9, 1, 3],\n        [14, 10, 1, 4],\n        [14, 3, 2, 0],\n        [14, 10, 4, 3],\n      ],\n      answer: [\n        [false, true, false, false, true],\n        [false, true, true, false, false],\n        [false, false, true, true, true],\n        [true, true, false, true, true],\n        [true, false, true, false, true],\n      ],\n    },\n    {\n      clues: [\n        [14, 1, 1, 0],\n        [14, 3, 1, 4],\n        [14, 1, 2, 2],\n        [14, 7, 3, 2],\n        [14, 4, 3, 4],\n      ],\n      answer: [\n        [true, false, false, true, true],\n        [false, false, true, false, false],\n        [false, false, false, false, true],\n        [true, true, false, true, false],\n        [true, true, false, true, true],\n      ],\n    },\n    {\n      clues: [\n        [14, 8, 0, 0],\n        [14, 3, 0, 2],\n        [14, 2, 0, 4],\n        [14, 8, 2, 2],\n        [14, 2, 3, 3],\n        [14, 8, 4, 2],\n      ],\n      answer: [\n        [false, true, false, true, false],\n        [true, false, true, false, true],\n        [true, true, false, false, false],\n        [true, true, false, false, true],\n        [true, true, false, true, false],\n      ],\n    },\n    {\n      clues: [\n        [14, 3, 0, 2],\n        [14, 2, 2, 1],\n        [14, 5, 2, 2],\n        [14, 7, 2, 4],\n        [14, 2, 3, 0],\n      ],\n      answer: [\n        [true, true, false, false, true],\n        [true, false, false, false, true],\n        [false, false, false, true, false],\n        [false, true, false, true, true],\n        [false, true, false, true, true],\n      ],\n    },\n    {\n      clues: [\n        [14, 2, 0, 4],\n        [14, 8, 1, 4],\n        [14, 8, 2, 3],\n        [14, 2, 3, 0],\n        [14, 8, 3, 1],\n        [14, 8, 4, 4],\n      ],\n      answer: [\n        [false, false, true, true, false],\n        [true, false, false, false, false],\n        [true, false, true, false, true],\n        [false, false, true, true, true],\n        [false, true, true, true, false],\n      ],\n    },\n    {\n      clues: [\n        [14, 1, 0, 0],\n        [14, 2, 1, 4],\n        [14, 3, 2, 1],\n        [14, 6, 2, 3],\n        [14, 2, 4, 1],\n        [14, 4, 4, 3],\n      ],\n      answer: [\n        [false, true, false, true, false],\n        [false, false, false, true, false],\n        [true, false, true, false, false],\n        [false, true, false, true, true],\n        [false, false, true, false, true],\n      ],\n    },\n    {\n      clues: [\n        [14, 2, 0, 2],\n        [14, 3, 1, 2],\n        [14, 8, 1, 4],\n        [14, 9, 3, 0],\n        [14, 7, 4, 2],\n      ],\n      answer: [\n        [false, true, false, false, false],\n        [false, true, false, true, false],\n        [true, false, false, false, true],\n        [false, true, true, true, true],\n        [true, false, false, true, true],\n      ],\n    },\n    {\n      clues: [\n        [14, 6, 0, 2],\n        [14, 9, 1, 3],\n        [14, 10, 1, 4],\n        [14, 9, 4, 0],\n      ],\n      answer: [\n        [true, true, false, false, true],\n        [true, true, false, false, false],\n        [true, true, false, true, true],\n        [false, false, true, true, true],\n        [false, true, true, true, true],\n      ],\n    },\n    {\n      clues: [\n        [14, 3, 0, 2],\n        [14, 2, 0, 4],\n        [14, 1, 1, 0],\n        [14, 4, 2, 3],\n        [14, 2, 3, 0],\n        [14, 3, 3, 2],\n        [14, 1, 4, 2],\n      ],\n      answer: [\n        [false, true, false, false, false],\n        [false, false, true, false, true],\n        [true, false, true, false, true],\n        [false, true, false, false, false],\n        [false, false, false, true, false],\n      ],\n    },\n  ],\n};\n","export default {\n  global_constraint: [\n    [19, 1],\n    [20, 1],\n  ],\n  puzzles: [\n    {\n      clues: [\n        [12, 5, 0, 3],\n        [12, 3, 1, 0],\n        [11, 8, 1, 3],\n        [2, 1, 3, 3],\n        [1, 1, 4, 2],\n      ],\n      answer: [\n        [false, true, false, false, false],\n        [false, true, false, true, false],\n        [false, true, true, true, true],\n        [true, false, false, false, true],\n        [true, true, true, false, false],\n      ],\n    },\n    {\n      clues: [\n        [2, 1, 0, 2],\n        [1, 1, 0, 3],\n        [2, 1, 0, 4],\n        [12, 1, 1, 0],\n        [2, 1, 3, 0],\n        [11, 3, 3, 2],\n        [12, 6, 3, 3],\n        [1, 1, 3, 4],\n      ],\n      answer: [\n        [true, true, false, true, false],\n        [false, true, true, true, true],\n        [true, true, false, false, false],\n        [false, false, true, false, true],\n        [false, true, true, false, false],\n      ],\n    },\n    {\n      clues: [\n        [2, 1, 0, 2],\n        [2, 1, 1, 1],\n        [11, 3, 1, 2],\n        [12, 3, 2, 3],\n        [1, 1, 4, 0],\n        [12, 1, 4, 1],\n      ],\n      answer: [\n        [true, true, false, false, false],\n        [true, false, true, true, true],\n        [true, true, false, false, false],\n        [true, true, true, true, true],\n        [true, false, true, true, true],\n      ],\n    },\n    {\n      clues: [\n        [1, 1, 1, 2],\n        [2, 1, 2, 0],\n        [11, 3, 2, 1],\n        [12, 4, 2, 2],\n        [11, 1, 2, 4],\n        [1, 1, 4, 4],\n      ],\n      answer: [\n        [false, false, false, false, false],\n        [false, false, true, true, false],\n        [false, true, false, false, true],\n        [false, true, true, false, false],\n        [false, false, false, true, true],\n      ],\n    },\n    {\n      clues: [\n        [1, 1, 0, 0],\n        [12, 9, 1, 1],\n        [12, 1, 1, 4],\n        [11, 8, 2, 1],\n        [2, 1, 4, 3],\n      ],\n      answer: [\n        [true, true, true, true, true],\n        [false, false, false, true, false],\n        [false, true, false, false, true],\n        [false, true, true, true, true],\n        [false, false, true, false, true],\n      ],\n    },\n    {\n      clues: [[2, 1, 1, 2]],\n      answer: [\n        [false, false, false, false, false],\n        [false, false, false, false, false],\n        [false, false, false, false, false],\n        [false, false, false, false, false],\n        [false, false, false, false, false],\n      ],\n    },\n    {\n      clues: [\n        [12, 7, 1, 4],\n        [12, 2, 2, 3],\n        [1, 1, 3, 3],\n      ],\n      answer: [\n        [false, false, false, false, false],\n        [false, true, true, true, false],\n        [true, true, false, false, true],\n        [true, true, true, true, true],\n        [true, true, true, true, true],\n      ],\n    },\n    {\n      clues: [\n        [11, 7, 0, 1],\n        [12, 4, 0, 2],\n        [1, 1, 0, 3],\n        [2, 1, 0, 4],\n        [12, 9, 2, 4],\n      ],\n      answer: [\n        [true, true, false, true, false],\n        [true, false, false, true, true],\n        [true, true, false, true, false],\n        [false, true, true, false, false],\n        [false, false, false, false, false],\n      ],\n    },\n    {\n      clues: [\n        [2, 1, 1, 2],\n        [12, 5, 2, 0],\n        [12, 7, 2, 4],\n        [1, 1, 3, 0],\n      ],\n      answer: [\n        [false, true, true, true, false],\n        [false, true, false, true, false],\n        [false, false, true, true, false],\n        [true, false, true, false, false],\n        [true, true, true, false, false],\n      ],\n    },\n    {\n      clues: [\n        [12, 4, 2, 2],\n        [12, 9, 3, 3],\n        [1, 1, 4, 0],\n      ],\n      answer: [\n        [true, true, true, true, false],\n        [true, false, false, true, false],\n        [true, false, false, true, false],\n        [true, true, true, false, false],\n        [true, false, false, false, false],\n      ],\n    },\n  ],\n};\n","export default {\n  global_constraint: [],\n  puzzles: [\n    {\n      clues: [\n        [6, 3, 0, 0],\n        [6, 5, 0, 3],\n        [6, 5, 2, 2],\n        [6, 2, 2, 4],\n        [6, 2, 3, 0],\n        [6, 2, 3, 4],\n        [6, 4, 4, 2],\n      ],\n      answer: [\n        [false, true, true, false, true],\n        [true, true, true, true, true],\n        [false, false, false, false, false],\n        [false, true, true, false, false],\n        [false, true, false, true, true],\n      ],\n    },\n    {\n      clues: [\n        [6, 4, 0, 1],\n        [6, 3, 0, 4],\n        [6, 5, 1, 1],\n        [6, 3, 2, 0],\n        [6, 2, 3, 0],\n        [6, 5, 3, 4],\n        [6, 3, 4, 1],\n      ],\n      answer: [\n        [true, false, true, true, false],\n        [true, false, true, true, true],\n        [false, true, false, true, true],\n        [false, true, true, true, false],\n        [false, false, true, true, true],\n      ],\n    },\n    {\n      clues: [\n        [6, 3, 0, 2],\n        [6, 3, 1, 1],\n        [6, 3, 1, 4],\n        [6, 2, 2, 0],\n        [6, 5, 2, 3],\n        [6, 5, 3, 1],\n        [6, 3, 4, 1],\n        [6, 3, 4, 2],\n        [6, 3, 4, 4],\n      ],\n      answer: [\n        [false, true, false, true, true],\n        [false, false, false, true, false],\n        [false, true, true, false, false],\n        [true, false, true, true, true],\n        [true, false, false, true, false],\n      ],\n    },\n    {\n      clues: [\n        [6, 2, 0, 2],\n        [6, 3, 1, 0],\n        [6, 5, 1, 1],\n        [6, 4, 1, 3],\n        [6, 5, 2, 3],\n        [6, 4, 3, 0],\n        [6, 4, 4, 1],\n        [6, 5, 4, 3],\n      ],\n      answer: [\n        [true, false, false, true, true],\n        [false, false, true, false, false],\n        [true, true, true, false, false],\n        [false, true, true, true, true],\n        [true, false, true, false, true],\n      ],\n    },\n    {\n      clues: [\n        [6, 3, 0, 1],\n        [6, 1, 0, 4],\n        [6, 3, 1, 0],\n        [6, 6, 1, 2],\n        [6, 3, 2, 0],\n        [6, 1, 2, 4],\n        [6, 5, 3, 1],\n        [6, 6, 3, 3],\n      ],\n      answer: [\n        [true, false, true, true, false],\n        [false, true, false, false, false],\n        [false, true, true, true, false],\n        [true, false, true, false, false],\n        [false, false, true, true, true],\n      ],\n    },\n    {\n      clues: [\n        [6, 1, 0, 0],\n        [6, 4, 0, 3],\n        [6, 5, 1, 3],\n        [6, 3, 2, 1],\n        [6, 2, 2, 4],\n        [6, 3, 4, 0],\n        [6, 2, 4, 3],\n      ],\n      answer: [\n        [false, true, true, false, true],\n        [false, false, true, false, true],\n        [false, false, false, true, false],\n        [true, true, false, false, false],\n        [false, true, true, false, true],\n      ],\n    },\n    {\n      clues: [\n        [6, 1, 1, 0],\n        [6, 2, 1, 2],\n        [6, 2, 1, 3],\n        [6, 1, 1, 4],\n        [6, 3, 3, 1],\n        [6, 3, 3, 2],\n        [6, 1, 3, 3],\n        [6, 1, 4, 2],\n      ],\n      answer: [\n        [false, false, false, false, true],\n        [false, false, false, false, false],\n        [false, true, true, false, false],\n        [false, false, false, false, false],\n        [false, true, false, false, false],\n      ],\n    },\n    {\n      clues: [\n        [6, 1, 0, 0],\n        [6, 2, 0, 1],\n        [6, 2, 0, 2],\n        [6, 3, 1, 3],\n        [6, 3, 3, 1],\n        [6, 5, 3, 2],\n        [6, 1, 4, 3],\n      ],\n      answer: [\n        [false, false, false, false, false],\n        [false, true, true, false, false],\n        [false, true, true, true, false],\n        [false, false, false, true, false],\n        [false, true, false, false, false],\n      ],\n    },\n    {\n      clues: [\n        [6, 2, 0, 0],\n        [6, 6, 1, 1],\n        [6, 6, 1, 3],\n        [6, 4, 1, 4],\n        [6, 4, 3, 1],\n        [6, 4, 3, 4],\n        [6, 4, 4, 3],\n      ],\n      answer: [\n        [false, true, true, true, true],\n        [true, false, true, false, false],\n        [true, true, false, true, true],\n        [false, false, true, true, false],\n        [false, false, true, false, true],\n      ],\n    },\n    {\n      clues: [\n        [6, 3, 0, 4],\n        [6, 4, 1, 0],\n        [6, 7, 1, 1],\n        [6, 3, 3, 0],\n        [6, 2, 3, 4],\n        [6, 1, 4, 1],\n        [6, 3, 4, 2],\n      ],\n      answer: [\n        [true, true, true, true, false],\n        [false, false, true, true, true],\n        [true, true, true, false, false],\n        [false, true, false, true, false],\n        [false, false, false, true, false],\n      ],\n    },\n  ],\n};\n","export default {\n  global_constraint: [\n    [4, 1],\n    [7, 1],\n    [10, 1],\n    [22, 1],\n  ],\n  puzzles: [\n    {\n      clues: [\n        [12, 4, 0, 4],\n        [12, 2, 1, 0],\n        [12, 4, 3, 3],\n        [12, 4, 4, 1],\n      ],\n      answer: [\n        [true, true, true, false, false],\n        [false, false, true, false, false],\n        [true, true, false, true, true],\n        [false, false, true, false, false],\n        [false, false, true, false, false],\n      ],\n    },\n    {\n      clues: [\n        [12, 3, 1, 0],\n        [12, 2, 1, 3],\n        [12, 2, 3, 1],\n        [12, 4, 3, 4],\n      ],\n      answer: [\n        [false, true, false, true, true],\n        [false, true, true, false, false],\n        [false, true, false, true, true],\n        [true, false, true, false, false],\n        [true, false, true, false, false],\n      ],\n    },\n    {\n      clues: [\n        [12, 3, 1, 1],\n        [12, 2, 1, 4],\n        [12, 2, 3, 4],\n        [12, 4, 4, 2],\n      ],\n      answer: [\n        [true, true, true, true, false],\n        [false, false, false, true, false],\n        [true, true, true, false, true],\n        [true, false, false, true, false],\n        [true, false, false, true, false],\n      ],\n    },\n    {\n      clues: [\n        [12, 1, 0, 2],\n        [12, 2, 1, 0],\n        [12, 1, 1, 4],\n        [12, 2, 3, 0],\n        [12, 2, 3, 4],\n      ],\n      answer: [\n        [true, true, false, true, true],\n        [false, false, true, true, false],\n        [true, true, false, false, true],\n        [false, false, true, true, false],\n        [true, true, false, true, false],\n      ],\n    },\n    {\n      clues: [\n        [12, 1, 0, 0],\n        [12, 4, 1, 4],\n        [12, 8, 4, 3],\n      ],\n      answer: [\n        [false, true, true, true, true],\n        [true, false, false, false, false],\n        [false, true, true, true, true],\n        [true, false, false, false, false],\n        [true, false, false, false, false],\n      ],\n    },\n    {\n      clues: [\n        [12, 2, 0, 0],\n        [12, 1, 0, 3],\n        [12, 4, 3, 1],\n        [12, 4, 3, 3],\n        [12, 1, 4, 2],\n      ],\n      answer: [\n        [false, false, true, false, true],\n        [true, true, false, true, true],\n        [false, false, true, false, false],\n        [false, false, true, false, false],\n        [true, true, false, true, true],\n      ],\n    },\n    {\n      clues: [\n        [12, 8, 0, 3],\n        [12, 1, 2, 1],\n      ],\n      answer: [\n        [true, false, true, false, false],\n        [false, true, true, false, false],\n        [true, false, true, false, false],\n        [false, true, true, false, false],\n        [true, false, false, true, true],\n      ],\n    },\n    {\n      clues: [\n        [12, 1, 0, 2],\n        [12, 1, 0, 4],\n        [12, 3, 1, 0],\n        [12, 2, 2, 2],\n        [12, 3, 4, 4],\n      ],\n      answer: [\n        [true, true, false, true, false],\n        [false, true, true, false, true],\n        [false, true, false, true, false],\n        [false, true, false, true, false],\n        [true, false, true, true, false],\n      ],\n    },\n    {\n      clues: [\n        [12, 3, 2, 2],\n        [12, 3, 2, 4],\n        [12, 3, 3, 0],\n        [12, 1, 4, 4],\n      ],\n      answer: [\n        [true, true, false, true, false],\n        [false, true, false, true, false],\n        [false, true, false, true, false],\n        [false, true, true, false, true],\n        [true, false, false, true, false],\n      ],\n    },\n    {\n      clues: [\n        [12, 4, 1, 1],\n        [12, 2, 2, 4],\n        [12, 3, 3, 1],\n        [12, 1, 4, 0],\n        [12, 1, 4, 4],\n      ],\n      answer: [\n        [true, false, false, true, true],\n        [true, false, false, true, false],\n        [false, true, true, true, false],\n        [true, false, false, false, true],\n        [false, true, true, true, false],\n      ],\n    },\n  ],\n};\n","export default {\n  global_constraint: [\n    [1, 1],\n    [7, 1],\n    [20, 1],\n  ],\n  puzzles: [\n    {\n      clues: [\n        [2, 1, 0, 4],\n        [12, 3, 1, 2],\n        [12, 1, 2, 1],\n        [12, 6, 3, 4],\n      ],\n      answer: [\n        [true, false, false, true, false],\n        [true, true, false, true, false],\n        [true, false, true, true, true],\n        [true, true, true, false, false],\n        [true, false, false, false, false],\n      ],\n    },\n    {\n      clues: [\n        [12, 1, 0, 0],\n        [12, 1, 1, 1],\n        [12, 4, 4, 1],\n        [12, 10, 4, 3],\n      ],\n      answer: [\n        [false, true, true, false, false],\n        [true, false, true, false, false],\n        [true, true, true, false, false],\n        [false, false, true, false, false],\n        [false, false, true, false, false],\n      ],\n    },\n    {\n      clues: [\n        [2, 1, 0, 0],\n        [2, 1, 0, 2],\n        [12, 1, 0, 4],\n        [12, 1, 3, 1],\n      ],\n      answer: [\n        [false, true, false, true, false],\n        [false, true, false, true, true],\n        [true, true, false, false, true],\n        [true, false, true, false, true],\n        [true, true, true, true, true],\n      ],\n    },\n    {\n      clues: [\n        [12, 2, 1, 0],\n        [2, 1, 1, 2],\n        [12, 6, 3, 0],\n        [12, 6, 3, 4],\n      ],\n      answer: [\n        [false, true, true, false, false],\n        [false, true, false, true, false],\n        [true, true, true, true, false],\n        [false, false, false, true, false],\n        [false, false, false, true, false],\n      ],\n    },\n    {\n      clues: [\n        [12, 6, 0, 3],\n        [2, 1, 1, 2],\n        [12, 1, 4, 0],\n      ],\n      answer: [\n        [true, true, true, false, false],\n        [true, false, false, true, false],\n        [true, false, false, true, false],\n        [true, true, false, true, false],\n        [false, true, true, true, false],\n      ],\n    },\n    {\n      clues: [\n        [12, 1, 0, 4],\n        [12, 3, 1, 0],\n        [12, 6, 3, 4],\n        [12, 2, 4, 2],\n      ],\n      answer: [\n        [false, true, true, true, false],\n        [false, true, false, true, true],\n        [false, true, false, false, false],\n        [true, true, true, true, false],\n        [true, false, false, true, false],\n      ],\n    },\n    {\n      clues: [\n        [12, 4, 1, 3],\n        [12, 1, 2, 4],\n        [2, 1, 4, 4],\n      ],\n      answer: [\n        [true, true, true, true, true],\n        [true, false, false, false, true],\n        [true, true, false, true, false],\n        [false, true, true, true, true],\n        [false, false, false, false, false],\n      ],\n    },\n    {\n      clues: [\n        [12, 1, 1, 0],\n        [12, 2, 1, 3],\n        [12, 3, 3, 3],\n      ],\n      answer: [\n        [true, true, true, true, true],\n        [false, true, false, false, true],\n        [true, true, true, true, true],\n        [true, false, false, false, true],\n        [true, true, true, true, true],\n      ],\n    },\n    {\n      clues: [\n        [12, 7, 2, 2],\n        [12, 5, 3, 0],\n        [2, 1, 3, 3],\n      ],\n      answer: [\n        [true, true, false, false, false],\n        [false, true, false, false, false],\n        [false, true, false, true, true],\n        [false, true, true, false, true],\n        [false, false, true, true, true],\n      ],\n    },\n    {\n      clues: [\n        [12, 2, 0, 3],\n        [12, 4, 1, 0],\n        [12, 1, 1, 2],\n        [12, 1, 2, 3],\n        [12, 1, 4, 3],\n      ],\n      answer: [\n        [true, true, true, false, false],\n        [false, true, false, true, true],\n        [false, true, true, false, true],\n        [false, false, true, true, true],\n        [true, true, true, false, true],\n      ],\n    },\n  ],\n};\n","export default {\n  global_constraint: [\n    [1, 1],\n    [6, 1],\n  ],\n  puzzles: [\n    {\n      clues: [\n        [3, 3, 0, 1],\n        [4, 4, 1, 3],\n        [3, 2, 3, 1],\n        [3, 1, 3, 2],\n        [4, 1, 4, 0],\n      ],\n      answer: [\n        [true, true, true, false, false],\n        [true, true, false, false, false],\n        [true, false, false, false, false],\n        [true, true, true, false, false],\n        [false, false, false, false, false],\n      ],\n    },\n    {\n      clues: [\n        [3, 2, 0, 2],\n        [3, 2, 1, 0],\n        [3, 3, 1, 1],\n        [4, 2, 2, 0],\n        [4, 1, 2, 1],\n        [3, 1, 2, 3],\n        [4, 2, 4, 0],\n        [3, 1, 4, 3],\n      ],\n      answer: [\n        [true, true, true, false, false],\n        [true, true, true, false, false],\n        [false, false, true, true, false],\n        [false, true, true, false, false],\n        [false, false, true, true, false],\n      ],\n    },\n    {\n      clues: [\n        [3, 2, 0, 1],\n        [3, 2, 1, 2],\n        [3, 1, 2, 0],\n        [4, 4, 2, 3],\n        [4, 2, 2, 4],\n        [4, 3, 3, 3],\n        [3, 1, 4, 2],\n      ],\n      answer: [\n        [false, true, true, true, true],\n        [false, true, true, false, true],\n        [true, true, false, false, false],\n        [false, true, true, false, false],\n        [false, false, true, false, false],\n      ],\n    },\n    {\n      clues: [\n        [4, 2, 1, 0],\n        [4, 3, 1, 2],\n        [4, 2, 2, 4],\n        [3, 1, 3, 0],\n        [4, 2, 3, 1],\n        [4, 1, 3, 2],\n        [4, 1, 3, 4],\n      ],\n      answer: [\n        [false, false, false, false, false],\n        [false, false, false, false, false],\n        [true, true, true, true, false],\n        [true, false, false, true, false],\n        [false, false, true, true, true],\n      ],\n    },\n    {\n      clues: [\n        [3, 3, 0, 2],\n        [3, 2, 0, 4],\n        [4, 3, 1, 0],\n        [3, 3, 1, 2],\n        [4, 2, 2, 1],\n        [3, 1, 2, 4],\n        [4, 2, 3, 0],\n        [3, 3, 4, 2],\n        [3, 1, 4, 4],\n      ],\n      answer: [\n        [false, true, true, true, true],\n        [false, false, true, true, true],\n        [false, false, true, false, true],\n        [false, true, true, false, false],\n        [false, true, true, true, true],\n      ],\n    },\n    {\n      clues: [\n        [4, 2, 0, 1],\n        [3, 3, 1, 4],\n        [4, 3, 2, 1],\n        [4, 4, 2, 2],\n        [4, 1, 2, 3],\n        [3, 1, 3, 0],\n        [3, 2, 3, 4],\n      ],\n      answer: [\n        [false, false, true, true, true],\n        [false, false, false, true, true],\n        [false, false, false, false, true],\n        [true, true, false, true, true],\n        [false, true, true, true, false],\n      ],\n    },\n    {\n      clues: [\n        [4, 2, 0, 1],\n        [3, 1, 0, 2],\n        [4, 1, 1, 1],\n        [3, 1, 1, 3],\n        [4, 2, 2, 3],\n        [3, 4, 3, 1],\n        [3, 1, 4, 1],\n      ],\n      answer: [\n        [false, false, true, false, false],\n        [true, false, true, true, false],\n        [true, true, true, false, false],\n        [true, true, true, false, false],\n        [false, true, false, false, false],\n      ],\n    },\n    {\n      clues: [\n        [3, 2, 0, 2],\n        [3, 1, 0, 3],\n        [3, 1, 2, 0],\n        [4, 1, 2, 2],\n        [4, 4, 2, 3],\n        [4, 1, 4, 0],\n        [3, 1, 4, 4],\n      ],\n      answer: [\n        [false, false, true, true, false],\n        [false, true, true, false, false],\n        [true, true, false, false, false],\n        [false, true, true, false, false],\n        [false, true, true, true, true],\n      ],\n    },\n    {\n      clues: [\n        [3, 1, 1, 0],\n        [4, 3, 1, 3],\n        [3, 2, 1, 4],\n        [4, 3, 2, 1],\n        [4, 3, 2, 2],\n        [3, 3, 4, 3],\n      ],\n      answer: [\n        [false, false, false, false, true],\n        [true, false, false, false, true],\n        [true, false, false, false, true],\n        [true, false, true, true, true],\n        [true, true, true, true, true],\n      ],\n    },\n    {\n      clues: [\n        [4, 2, 0, 2],\n        [4, 1, 1, 3],\n        [3, 1, 2, 1],\n        [3, 3, 3, 1],\n        [3, 3, 3, 2],\n        [3, 3, 4, 1],\n        [3, 2, 4, 4],\n      ],\n      answer: [\n        [false, false, false, true, true],\n        [false, false, false, false, true],\n        [false, true, false, true, true],\n        [false, true, true, true, true],\n        [true, true, true, true, true],\n      ],\n    },\n  ],\n};\n","export default {\n  global_constraint: [\n    [1, 1],\n    [6, 1],\n    [13, 1],\n  ],\n  puzzles: [\n    {\n      clues: [\n        [3, 1, 0, 0],\n        [8, 1, 0, 3],\n        [10, 2, 2, 3],\n        [10, 2, 3, 4],\n        [8, 1, 4, 4],\n      ],\n      answer: [\n        [true, false, false, false, false],\n        [true, false, true, true, true],\n        [true, false, true, false, false],\n        [true, false, true, false, false],\n        [true, true, true, false, false],\n      ],\n    },\n    {\n      clues: [\n        [8, 3, 0, 1],\n        [10, 2, 1, 2],\n        [8, 3, 1, 3],\n        [10, 3, 3, 2],\n        [10, 4, 4, 4],\n      ],\n      answer: [\n        [false, false, false, true, true],\n        [false, true, false, false, true],\n        [true, true, false, false, true],\n        [true, false, false, true, true],\n        [true, true, true, true, false],\n      ],\n    },\n    {\n      clues: [\n        [3, 1, 1, 1],\n        [8, 3, 1, 3],\n        [3, 1, 3, 2],\n      ],\n      answer: [\n        [false, true, true, true, true],\n        [false, true, false, false, true],\n        [false, false, false, true, true],\n        [false, false, true, true, false],\n        [false, false, false, false, false],\n      ],\n    },\n    {\n      clues: [\n        [8, 1, 1, 0],\n        [10, 1, 2, 0],\n        [8, 4, 4, 3],\n        [3, 1, 4, 4],\n      ],\n      answer: [\n        [true, true, true, true, false],\n        [false, false, false, true, false],\n        [false, false, false, true, false],\n        [false, false, false, true, true],\n        [false, false, false, false, true],\n      ],\n    },\n    {\n      clues: [\n        [3, 2, 0, 3],\n        [8, 3, 1, 0],\n        [3, 1, 1, 1],\n        [10, 3, 2, 4],\n      ],\n      answer: [\n        [false, false, false, true, true],\n        [false, true, false, true, false],\n        [true, true, false, true, false],\n        [true, false, false, true, false],\n        [true, true, true, true, false],\n      ],\n    },\n    {\n      clues: [\n        [3, 1, 0, 0],\n        [10, 4, 1, 4],\n        [8, 3, 2, 2],\n        [10, 3, 3, 4],\n      ],\n      answer: [\n        [true, false, false, false, false],\n        [true, true, true, true, false],\n        [false, false, false, true, false],\n        [true, false, true, true, false],\n        [true, true, true, false, false],\n      ],\n    },\n    {\n      clues: [\n        [8, 3, 0, 0],\n        [8, 1, 0, 1],\n        [3, 1, 1, 0],\n        [3, 2, 1, 3],\n        [8, 1, 2, 2],\n        [10, 2, 2, 3],\n      ],\n      answer: [\n        [false, false, false, true, false],\n        [true, false, false, true, true],\n        [true, false, false, false, true],\n        [true, true, true, true, true],\n        [false, false, false, false, false],\n      ],\n    },\n    {\n      clues: [\n        [8, 1, 0, 3],\n        [3, 1, 1, 2],\n        [10, 4, 1, 3],\n        [3, 2, 1, 4],\n        [10, 3, 3, 2],\n      ],\n      answer: [\n        [false, false, false, false, true],\n        [true, true, true, false, true],\n        [true, false, false, false, true],\n        [true, true, false, false, true],\n        [false, true, true, true, true],\n      ],\n    },\n    {\n      clues: [\n        [3, 1, 1, 3],\n        [10, 2, 2, 2],\n        [8, 3, 4, 0],\n        [3, 1, 4, 1],\n      ],\n      answer: [\n        [true, true, true, true, false],\n        [true, false, false, true, false],\n        [true, true, false, false, false],\n        [false, true, false, false, false],\n        [false, true, false, false, false],\n      ],\n    },\n    {\n      clues: [\n        [10, 2, 0, 0],\n        [10, 2, 1, 2],\n        [10, 1, 2, 3],\n        [10, 3, 4, 3],\n        [8, 1, 4, 4],\n      ],\n      answer: [\n        [false, true, true, false, false],\n        [true, true, false, false, false],\n        [true, false, false, false, false],\n        [true, false, true, true, true],\n        [true, true, true, false, false],\n      ],\n    },\n  ],\n};\n","export default {\n  global_constraint: [\n    [2, 1],\n    [11, 1],\n  ],\n  puzzles: [\n    {\n      clues: [\n        [14, 2, 0, 1],\n        [14, 1, 0, 2],\n        [14, 4, 2, 4],\n        [14, 5, 4, 2],\n      ],\n      answer: [\n        [true, false, false, true, false],\n        [false, true, false, false, false],\n        [false, false, false, false, false],\n        [false, false, false, true, true],\n        [false, true, false, true, true],\n      ],\n    },\n    {\n      clues: [\n        [14, 1, 0, 1],\n        [14, 4, 1, 4],\n        [14, 6, 2, 1],\n        [14, 1, 4, 4],\n      ],\n      answer: [\n        [true, false, false, false, false],\n        [false, false, true, true, false],\n        [true, false, true, true, false],\n        [false, true, false, false, false],\n        [false, false, false, true, false],\n      ],\n    },\n    {\n      clues: [\n        [14, 1, 0, 4],\n        [14, 1, 1, 2],\n        [14, 2, 2, 0],\n        [14, 2, 2, 2],\n        [14, 1, 3, 0],\n        [14, 2, 4, 3],\n      ],\n      answer: [\n        [false, false, true, false, false],\n        [true, false, false, false, true],\n        [false, true, false, true, false],\n        [false, false, false, false, false],\n        [true, false, true, false, true],\n      ],\n    },\n    {\n      clues: [\n        [14, 5, 2, 1],\n        [14, 2, 2, 3],\n        [14, 1, 2, 4],\n        [14, 1, 4, 2],\n        [14, 1, 4, 4],\n      ],\n      answer: [\n        [true, true, false, false, false],\n        [true, true, false, true, false],\n        [false, false, true, false, false],\n        [false, false, false, false, true],\n        [false, true, false, false, false],\n      ],\n    },\n    {\n      clues: [\n        [14, 9, 1, 0],\n        [14, 9, 1, 4],\n        [14, 9, 4, 1],\n        [14, 9, 4, 3],\n      ],\n      answer: [\n        [false, false, false, false, false],\n        [false, true, true, true, false],\n        [false, true, true, true, false],\n        [false, true, true, true, false],\n        [false, false, false, false, false],\n      ],\n    },\n    {\n      clues: [\n        [14, 5, 1, 3],\n        [14, 2, 2, 4],\n        [14, 2, 3, 1],\n        [14, 1, 4, 2],\n      ],\n      answer: [\n        [false, true, true, false, false],\n        [false, true, true, false, true],\n        [false, false, false, false, false],\n        [true, false, true, false, true],\n        [false, false, false, false, false],\n      ],\n    },\n    {\n      clues: [\n        [14, 5, 0, 3],\n        [14, 1, 4, 0],\n        [14, 4, 4, 4],\n      ],\n      answer: [\n        [false, true, true, false, true],\n        [false, true, true, false, false],\n        [false, false, false, false, false],\n        [true, false, true, true, false],\n        [false, false, true, true, false],\n      ],\n    },\n    {\n      clues: [\n        [14, 5, 1, 3],\n        [14, 1, 3, 1],\n        [14, 2, 3, 2],\n      ],\n      answer: [\n        [false, true, true, false, false],\n        [false, true, true, false, true],\n        [false, false, false, false, false],\n        [true, false, false, true, false],\n        [false, false, true, false, false],\n      ],\n    },\n    {\n      clues: [\n        [14, 2, 2, 0],\n        [14, 5, 2, 2],\n        [14, 1, 3, 4],\n      ],\n      answer: [\n        [false, false, true, true, false],\n        [true, false, true, true, false],\n        [false, false, false, false, false],\n        [true, false, true, false, false],\n        [false, false, false, false, true],\n      ],\n    },\n    {\n      clues: [\n        [14, 2, 0, 3],\n        [14, 2, 1, 1],\n        [14, 4, 2, 3],\n        [14, 2, 3, 1],\n      ],\n      answer: [\n        [false, false, true, false, true],\n        [true, false, false, false, false],\n        [false, true, false, false, false],\n        [false, false, false, true, true],\n        [false, true, false, true, true],\n      ],\n    },\n  ],\n};\n","export default {\n  global_constraint: [\n    [1, 1],\n    [2, 1],\n    [7, 1],\n    [8, 1],\n  ],\n  puzzles: [\n    {\n      clues: [\n        [1, 1, 0, 0],\n        [2, 1, 0, 1],\n        [1, 1, 0, 3],\n        [1, 1, 1, 2],\n        [2, 1, 3, 2],\n      ],\n      answer: [\n        [true, false, true, true, true],\n        [true, false, true, false, true],\n        [true, false, true, false, true],\n        [true, false, false, false, true],\n        [true, true, true, true, true],\n      ],\n    },\n    {\n      clues: [\n        [1, 1, 0, 2],\n        [2, 1, 0, 3],\n        [1, 1, 1, 1],\n        [1, 1, 2, 2],\n      ],\n      answer: [\n        [false, false, true, false, false],\n        [false, true, true, true, false],\n        [false, false, true, false, false],\n        [false, true, true, true, false],\n        [false, false, false, false, false],\n      ],\n    },\n    {\n      clues: [\n        [1, 1, 0, 0],\n        [2, 1, 2, 1],\n        [2, 1, 2, 2],\n        [2, 1, 3, 2],\n        [2, 1, 3, 3],\n        [2, 1, 4, 0],\n      ],\n      answer: [\n        [true, true, true, true, true],\n        [false, true, false, false, true],\n        [false, false, false, true, true],\n        [false, true, false, false, true],\n        [false, true, true, true, true],\n      ],\n    },\n    {\n      clues: [\n        [2, 1, 0, 2],\n        [1, 1, 0, 3],\n        [2, 1, 0, 4],\n        [1, 1, 2, 2],\n        [1, 1, 3, 2],\n      ],\n      answer: [\n        [false, false, false, true, false],\n        [false, true, true, true, false],\n        [false, false, true, false, false],\n        [false, true, true, true, false],\n        [false, false, false, false, false],\n      ],\n    },\n    {\n      clues: [\n        [1, 1, 1, 2],\n        [1, 1, 2, 3],\n        [1, 1, 2, 4],\n        [2, 1, 3, 2],\n        [2, 1, 4, 1],\n        [1, 1, 4, 4],\n      ],\n      answer: [\n        [false, false, false, false, false],\n        [false, true, true, true, false],\n        [false, true, false, true, true],\n        [false, true, false, false, true],\n        [false, false, false, true, true],\n      ],\n    },\n    {\n      clues: [\n        [2, 1, 0, 3],\n        [2, 1, 1, 1],\n        [2, 1, 1, 2],\n        [2, 1, 2, 2],\n        [1, 1, 3, 0],\n        [2, 1, 4, 4],\n      ],\n      answer: [\n        [true, true, false, false, false],\n        [true, false, false, true, false],\n        [true, true, false, true, false],\n        [true, false, false, true, false],\n        [true, true, true, true, false],\n      ],\n    },\n    {\n      clues: [\n        [2, 1, 1, 2],\n        [1, 1, 1, 4],\n        [1, 1, 3, 1],\n        [1, 1, 3, 3],\n        [1, 1, 4, 0],\n      ],\n      answer: [\n        [true, true, true, true, true],\n        [true, false, false, false, true],\n        [true, false, true, false, false],\n        [true, true, true, true, false],\n        [true, false, false, false, false],\n      ],\n    },\n    {\n      clues: [\n        [2, 1, 0, 4],\n        [2, 1, 1, 2],\n        [1, 1, 2, 4],\n        [1, 1, 3, 1],\n        [1, 1, 4, 0],\n      ],\n      answer: [\n        [false, false, false, false, false],\n        [false, true, false, true, false],\n        [false, true, false, true, true],\n        [false, true, false, false, true],\n        [true, true, true, true, true],\n      ],\n    },\n    {\n      clues: [\n        [2, 1, 0, 1],\n        [2, 1, 1, 2],\n        [2, 1, 1, 3],\n        [2, 1, 4, 1],\n        [1, 1, 4, 4],\n      ],\n      answer: [\n        [false, false, false, true, true],\n        [false, true, false, false, true],\n        [false, true, true, true, true],\n        [false, true, false, false, true],\n        [false, false, false, true, true],\n      ],\n    },\n    {\n      clues: [\n        [2, 1, 2, 0],\n        [2, 1, 2, 3],\n        [2, 1, 3, 1],\n        [1, 1, 3, 3],\n      ],\n      answer: [\n        [false, false, false, false, false],\n        [false, true, true, true, false],\n        [false, false, true, false, false],\n        [true, false, true, true, false],\n        [true, true, true, false, false],\n      ],\n    },\n  ],\n};\n","export default {\n  global_constraint: [],\n  puzzles: [\n    {\n      clues: [\n        [6, 1, 0, 1],\n        [3, 2, 0, 3],\n        [4, 2, 2, 0],\n        [4, 4, 2, 2],\n        [6, 3, 2, 3],\n        [6, 3, 3, 0],\n        [3, 2, 3, 4],\n        [6, 2, 4, 2],\n      ],\n      answer: [\n        [false, false, false, true, true],\n        [true, false, false, true, false],\n        [false, false, false, false, true],\n        [false, true, false, false, true],\n        [true, true, false, false, true],\n      ],\n    },\n    {\n      clues: [\n        [3, 1, 0, 3],\n        [5, 2, 1, 1],\n        [3, 1, 2, 0],\n        [6, 8, 2, 3],\n        [6, 7, 3, 1],\n        [6, 2, 4, 4],\n      ],\n      answer: [\n        [true, true, false, true, false],\n        [false, true, true, true, true],\n        [true, true, true, false, true],\n        [false, false, true, true, true],\n        [true, true, true, false, false],\n      ],\n    },\n    {\n      clues: [\n        [6, 1, 0, 0],\n        [4, 1, 0, 4],\n        [5, 4, 1, 2],\n        [3, 1, 1, 4],\n        [6, 1, 2, 0],\n        [5, 3, 2, 3],\n        [5, 7, 3, 1],\n        [6, 5, 3, 2],\n        [3, 1, 3, 4],\n        [5, 3, 4, 3],\n      ],\n      answer: [\n        [false, true, true, false, false],\n        [false, false, true, true, true],\n        [false, false, false, true, false],\n        [false, true, false, true, true],\n        [false, true, false, true, false],\n      ],\n    },\n    {\n      clues: [\n        [4, 1, 0, 0],\n        [3, 1, 0, 2],\n        [3, 1, 0, 4],\n        [3, 3, 1, 1],\n        [4, 4, 2, 3],\n        [3, 3, 3, 0],\n        [5, 4, 3, 4],\n        [6, 3, 4, 2],\n        [3, 1, 4, 4],\n      ],\n      answer: [\n        [false, false, true, false, true],\n        [true, true, true, false, true],\n        [true, true, false, false, false],\n        [true, true, true, false, true],\n        [true, true, false, false, true],\n      ],\n    },\n    {\n      clues: [\n        [5, 4, 0, 1],\n        [6, 3, 0, 2],\n        [6, 4, 1, 1],\n        [6, 3, 1, 3],\n        [5, 4, 2, 0],\n        [3, 1, 2, 4],\n        [4, 1, 3, 0],\n        [5, 4, 3, 2],\n        [3, 1, 3, 4],\n      ],\n      answer: [\n        [false, true, false, true, false],\n        [false, false, true, false, false],\n        [true, true, false, false, true],\n        [false, false, true, false, true],\n        [true, true, true, true, false],\n      ],\n    },\n    {\n      clues: [\n        [6, 5, 0, 3],\n        [3, 2, 1, 0],\n        [3, 2, 1, 1],\n        [4, 1, 2, 2],\n        [5, 3, 3, 0],\n        [6, 5, 3, 4],\n        [6, 5, 4, 2],\n      ],\n      answer: [\n        [true, false, true, false, true],\n        [true, true, true, true, true],\n        [false, false, false, true, true],\n        [true, true, true, true, false],\n        [false, true, false, true, true],\n      ],\n    },\n    {\n      clues: [\n        [6, 4, 0, 3],\n        [5, 2, 1, 1],\n        [5, 2, 1, 2],\n        [3, 3, 1, 3],\n        [5, 1, 2, 0],\n        [6, 7, 2, 2],\n        [5, 1, 3, 0],\n        [3, 2, 3, 3],\n        [4, 1, 3, 4],\n        [5, 2, 4, 2],\n        [6, 1, 4, 4],\n      ],\n      answer: [\n        [false, true, true, false, false],\n        [true, true, true, true, true],\n        [true, true, false, true, true],\n        [true, false, true, true, false],\n        [true, true, true, false, false],\n      ],\n    },\n    {\n      clues: [\n        [5, 1, 0, 2],\n        [6, 3, 0, 4],\n        [5, 3, 1, 1],\n        [6, 5, 2, 0],\n        [5, 3, 2, 2],\n        [6, 7, 3, 3],\n        [4, 1, 4, 1],\n        [5, 2, 4, 2],\n      ],\n      answer: [\n        [false, true, true, true, false],\n        [true, true, false, true, true],\n        [false, true, true, false, true],\n        [true, true, true, false, true],\n        [false, false, true, true, true],\n      ],\n    },\n    {\n      clues: [\n        [5, 4, 0, 1],\n        [4, 4, 1, 2],\n        [6, 3, 1, 4],\n        [3, 1, 2, 0],\n        [6, 4, 3, 0],\n        [6, 7, 3, 2],\n        [6, 3, 3, 4],\n      ],\n      answer: [\n        [true, true, false, true, true],\n        [false, false, false, false, false],\n        [true, true, false, true, false],\n        [false, true, false, true, false],\n        [false, true, true, true, false],\n      ],\n    },\n    {\n      clues: [\n        [6, 4, 0, 2],\n        [3, 1, 0, 3],\n        [6, 2, 1, 0],\n        [4, 2, 2, 0],\n        [3, 1, 2, 2],\n        [5, 3, 2, 3],\n        [6, 3, 3, 1],\n        [4, 2, 4, 2],\n        [4, 2, 4, 3],\n        [3, 1, 4, 4],\n      ],\n      answer: [\n        [false, true, false, true, false],\n        [false, true, false, true, true],\n        [false, false, true, true, true],\n        [true, false, false, false, true],\n        [false, true, false, false, true],\n      ],\n    },\n  ],\n};\n","export default {\n  global_constraint: [],\n  puzzles: [\n    {\n      clues: [\n        [10, 2, 0, 1],\n        [7, 2, 0, 2],\n        [8, 1, 1, 0],\n        [10, 2, 1, 3],\n        [9, 1, 2, 1],\n        [7, 1, 2, 4],\n        [9, 4, 3, 0],\n        [10, 3, 4, 1],\n      ],\n      answer: [\n        [false, false, true, false, true],\n        [false, true, false, false, true],\n        [false, true, true, true, true],\n        [true, false, false, false, false],\n        [false, false, true, true, true],\n      ],\n    },\n    {\n      clues: [\n        [10, 3, 0, 3],\n        [10, 3, 1, 1],\n        [7, 3, 1, 4],\n        [7, 1, 2, 0],\n        [9, 1, 2, 1],\n        [7, 4, 2, 3],\n        [10, 1, 3, 0],\n        [7, 2, 4, 1],\n        [9, 2, 4, 4],\n      ],\n      answer: [\n        [true, true, true, false, false],\n        [true, false, true, false, true],\n        [true, true, true, true, false],\n        [false, false, true, false, false],\n        [true, true, false, false, true],\n      ],\n    },\n    {\n      clues: [\n        [10, 4, 0, 4],\n        [8, 4, 1, 0],\n        [8, 4, 1, 3],\n        [8, 2, 1, 4],\n        [9, 1, 2, 2],\n        [9, 3, 3, 0],\n        [8, 2, 4, 1],\n        [8, 3, 4, 2],\n      ],\n      answer: [\n        [true, true, true, true, false],\n        [false, true, true, false, false],\n        [true, false, true, true, true],\n        [true, false, false, true, false],\n        [true, false, false, true, true],\n      ],\n    },\n    {\n      clues: [\n        [9, 3, 0, 2],\n        [10, 2, 1, 1],\n        [8, 2, 1, 4],\n        [9, 4, 2, 2],\n        [7, 3, 3, 0],\n        [10, 4, 3, 3],\n        [7, 2, 4, 1],\n        [10, 4, 4, 2],\n      ],\n      answer: [\n        [false, true, true, false, false],\n        [false, false, true, true, false],\n        [false, false, true, false, false],\n        [true, true, true, false, true],\n        [true, true, false, true, true],\n      ],\n    },\n    {\n      clues: [\n        [9, 2, 0, 0],\n        [10, 4, 1, 0],\n        [9, 2, 2, 0],\n        [9, 2, 2, 1],\n        [9, 2, 2, 4],\n        [10, 4, 3, 4],\n        [7, 1, 4, 1],\n        [9, 2, 4, 2],\n        [7, 2, 4, 3],\n      ],\n      answer: [\n        [true, false, true, false, true],\n        [false, true, true, true, true],\n        [true, true, false, false, true],\n        [true, true, true, true, false],\n        [false, true, true, true, false],\n      ],\n    },\n    {\n      clues: [\n        [10, 3, 0, 2],\n        [9, 3, 1, 1],\n        [7, 4, 1, 4],\n        [9, 3, 2, 1],\n        [10, 2, 3, 2],\n        [9, 1, 4, 1],\n        [7, 4, 4, 2],\n        [7, 3, 4, 3],\n      ],\n      answer: [\n        [true, true, false, true, false],\n        [false, true, false, false, true],\n        [true, true, false, false, false],\n        [true, true, false, false, false],\n        [true, true, true, true, false],\n      ],\n    },\n    {\n      clues: [\n        [10, 1, 0, 1],\n        [8, 1, 0, 4],\n        [10, 3, 1, 0],\n        [7, 4, 1, 2],\n        [9, 3, 2, 1],\n        [9, 3, 2, 3],\n        [10, 2, 3, 1],\n        [8, 3, 3, 3],\n        [10, 2, 4, 0],\n      ],\n      answer: [\n        [true, false, false, false, false],\n        [false, true, true, true, false],\n        [false, true, false, true, false],\n        [true, false, false, false, true],\n        [false, true, false, true, false],\n      ],\n    },\n    {\n      clues: [\n        [9, 1, 0, 3],\n        [10, 4, 1, 0],\n        [9, 1, 2, 2],\n        [10, 2, 3, 0],\n        [8, 3, 3, 1],\n        [9, 4, 4, 1],\n        [8, 2, 4, 3],\n      ],\n      answer: [\n        [true, false, true, true, true],\n        [false, true, true, true, true],\n        [true, true, true, false, true],\n        [false, false, true, false, true],\n        [false, true, false, false, false],\n      ],\n    },\n    {\n      clues: [\n        [8, 2, 0, 2],\n        [10, 4, 1, 1],\n        [7, 4, 1, 4],\n        [8, 4, 2, 0],\n        [8, 2, 2, 3],\n        [9, 2, 3, 0],\n        [7, 4, 4, 1],\n      ],\n      answer: [\n        [true, false, false, false, false],\n        [true, false, true, true, true],\n        [false, false, false, false, false],\n        [true, false, true, true, false],\n        [true, true, false, false, false],\n      ],\n    },\n    {\n      clues: [\n        [10, 3, 0, 0],\n        [7, 2, 0, 4],\n        [10, 2, 1, 1],\n        [8, 4, 1, 2],\n        [9, 3, 2, 3],\n        [7, 2, 3, 1],\n        [10, 4, 3, 3],\n        [8, 2, 4, 0],\n        [9, 3, 4, 2],\n      ],\n      answer: [\n        [false, true, true, false, true],\n        [true, false, false, false, true],\n        [false, false, true, true, false],\n        [true, true, true, false, true],\n        [false, true, true, false, false],\n      ],\n    },\n  ],\n};\n","export default {\n  global_constraint: [],\n  puzzles: [\n    {\n      clues: [\n        [16, 3, 0, 0],\n        [18, 2, 0, 3],\n        [17, 2, 1, 2],\n        [17, 5, 1, 3],\n        [16, 5, 3, 2],\n        [15, 2, 3, 4],\n        [15, 2, 4, 0],\n        [17, 4, 4, 1],\n      ],\n      answer: [\n        [false, false, true, false, false],\n        [false, false, true, true, false],\n        [true, true, true, false, true],\n        [false, false, false, false, true],\n        [true, true, false, false, false],\n      ],\n    },\n    {\n      clues: [\n        [18, 1, 0, 2],\n        [18, 5, 1, 0],\n        [15, 1, 1, 4],\n        [15, 5, 3, 0],\n        [15, 7, 4, 1],\n        [15, 6, 4, 3],\n      ],\n      answer: [\n        [true, false, false, false, false],\n        [false, true, true, false, true],\n        [true, true, false, true, false],\n        [true, true, true, true, false],\n        [false, true, true, true, true],\n      ],\n    },\n    {\n      clues: [\n        [18, 4, 0, 1],\n        [15, 2, 1, 2],\n        [18, 2, 1, 3],\n        [17, 6, 2, 0],\n        [18, 1, 2, 3],\n        [17, 5, 3, 2],\n        [17, 4, 4, 4],\n      ],\n      answer: [\n        [true, false, true, true, true],\n        [false, false, true, false, false],\n        [true, false, false, false, true],\n        [false, false, true, false, true],\n        [false, false, false, false, true],\n      ],\n    },\n    {\n      clues: [\n        [16, 6, 0, 2],\n        [18, 2, 1, 3],\n        [17, 3, 1, 4],\n        [17, 7, 3, 0],\n        [16, 6, 3, 3],\n        [15, 4, 3, 4],\n        [17, 3, 4, 1],\n      ],\n      answer: [\n        [false, false, false, true, false],\n        [false, true, false, false, true],\n        [false, false, false, false, true],\n        [true, false, false, false, true],\n        [false, true, true, false, true],\n      ],\n    },\n    {\n      clues: [\n        [18, 2, 0, 1],\n        [16, 5, 1, 2],\n        [15, 1, 1, 4],\n        [17, 7, 3, 0],\n        [15, 6, 4, 0],\n        [17, 4, 4, 3],\n      ],\n      answer: [\n        [false, false, false, false, false],\n        [false, true, false, false, true],\n        [false, true, false, false, false],\n        [true, false, false, false, false],\n        [true, true, true, true, true],\n      ],\n    },\n    {\n      clues: [\n        [18, 6, 0, 3],\n        [18, 4, 1, 0],\n        [18, 4, 1, 2],\n        [15, 6, 3, 1],\n        [15, 3, 3, 2],\n        [17, 2, 4, 4],\n      ],\n      answer: [\n        [true, true, true, false, true],\n        [false, true, false, true, true],\n        [true, true, false, true, false],\n        [true, true, true, false, false],\n        [false, false, false, true, true],\n      ],\n    },\n    {\n      clues: [\n        [18, 4, 0, 3],\n        [17, 5, 1, 4],\n        [15, 1, 2, 1],\n        [16, 1, 2, 4],\n        [17, 4, 3, 2],\n        [15, 6, 4, 0],\n      ],\n      answer: [\n        [true, true, true, false, true],\n        [false, false, false, false, true],\n        [false, true, false, true, false],\n        [true, false, true, false, true],\n        [true, true, true, true, true],\n      ],\n    },\n    {\n      clues: [\n        [17, 4, 0, 1],\n        [18, 5, 0, 2],\n        [16, 6, 0, 3],\n        [16, 5, 1, 0],\n        [17, 4, 1, 2],\n        [15, 3, 3, 4],\n        [16, 4, 4, 1],\n      ],\n      answer: [\n        [true, true, false, false, false],\n        [false, false, true, false, true],\n        [false, true, true, false, true],\n        [false, false, true, false, true],\n        [false, false, false, true, false],\n      ],\n    },\n    {\n      clues: [\n        [17, 2, 0, 0],\n        [17, 4, 0, 3],\n        [18, 3, 2, 2],\n        [15, 4, 3, 1],\n        [15, 3, 3, 4],\n        [15, 5, 4, 0],\n        [18, 6, 4, 4],\n      ],\n      answer: [\n        [true, false, false, true, false],\n        [true, false, false, false, false],\n        [false, true, false, true, true],\n        [true, true, false, true, true],\n        [true, true, true, true, false],\n      ],\n    },\n    {\n      clues: [\n        [18, 2, 0, 2],\n        [18, 3, 1, 2],\n        [16, 2, 1, 4],\n        [15, 1, 2, 0],\n        [18, 2, 2, 3],\n        [15, 2, 3, 2],\n        [17, 3, 4, 4],\n      ],\n      answer: [\n        [true, true, false, false, true],\n        [false, false, false, true, false],\n        [true, false, true, false, false],\n        [false, false, true, false, true],\n        [true, false, false, false, true],\n      ],\n    },\n  ],\n};\n","export default {\n  global_constraint: [],\n  puzzles: [\n    {\n      clues: [\n        [14, 13, 1, 1],\n        [13, 1, 2, 4],\n        [14, 5, 3, 0],\n        [12, 7, 3, 2],\n        [11, 8, 4, 2],\n      ],\n      answer: [\n        [true, true, false, false, true],\n        [true, false, true, true, false],\n        [true, true, false, true, true],\n        [false, false, false, false, true],\n        [false, false, true, true, true],\n      ],\n    },\n    {\n      clues: [\n        [11, 9, 0, 3],\n        [11, 8, 1, 2],\n        [13, 5, 3, 3],\n        [12, 2, 4, 1],\n      ],\n      answer: [\n        [true, true, false, true, true],\n        [true, true, true, false, true],\n        [true, false, false, false, true],\n        [true, true, false, true, true],\n        [false, false, true, true, true],\n      ],\n    },\n    {\n      clues: [\n        [13, 6, 0, 0],\n        [14, 11, 0, 3],\n        [14, 14, 3, 3],\n        [13, 11, 3, 4],\n        [13, 4, 4, 0],\n      ],\n      answer: [\n        [true, false, false, false, false],\n        [true, true, true, true, false],\n        [true, true, true, true, false],\n        [true, false, false, false, true],\n        [true, false, true, true, false],\n      ],\n    },\n    {\n      clues: [\n        [14, 9, 0, 2],\n        [11, 1, 0, 3],\n        [12, 4, 3, 2],\n        [14, 15, 4, 0],\n      ],\n      answer: [\n        [true, true, false, true, false],\n        [true, true, true, false, false],\n        [true, true, false, true, true],\n        [true, false, false, false, true],\n        [false, true, true, true, true],\n      ],\n    },\n    {\n      clues: [\n        [14, 12, 1, 2],\n        [14, 9, 3, 1],\n        [12, 9, 4, 0],\n        [14, 7, 4, 2],\n      ],\n      answer: [\n        [false, true, true, true, true],\n        [false, false, false, true, false],\n        [true, false, true, false, true],\n        [true, false, true, true, true],\n        [false, false, false, true, true],\n      ],\n    },\n    {\n      clues: [\n        [13, 3, 0, 1],\n        [12, 3, 1, 3],\n        [12, 1, 3, 4],\n        [14, 14, 4, 0],\n        [11, 5, 4, 4],\n      ],\n      answer: [\n        [false, true, true, true, true],\n        [false, false, true, false, false],\n        [true, true, true, false, true],\n        [true, false, false, true, false],\n        [false, true, true, true, true],\n      ],\n    },\n    {\n      clues: [\n        [12, 2, 0, 1],\n        [12, 5, 0, 3],\n        [14, 10, 2, 0],\n        [14, 7, 2, 3],\n        [14, 13, 4, 2],\n      ],\n      answer: [\n        [false, false, true, false, true],\n        [true, true, true, false, true],\n        [false, true, true, false, false],\n        [true, false, true, false, true],\n        [true, true, false, true, true],\n      ],\n    },\n    {\n      clues: [\n        [11, 5, 1, 2],\n        [13, 9, 3, 0],\n        [13, 10, 3, 3],\n        [14, 8, 3, 4],\n        [11, 8, 4, 4],\n      ],\n      answer: [\n        [false, false, true, true, true],\n        [false, false, true, false, true],\n        [false, false, false, true, false],\n        [true, true, false, true, false],\n        [false, true, true, true, true],\n      ],\n    },\n    {\n      clues: [\n        [13, 3, 0, 1],\n        [12, 5, 0, 3],\n        [14, 1, 0, 4],\n        [14, 9, 3, 3],\n        [14, 9, 4, 3],\n      ],\n      answer: [\n        [false, true, true, false, false],\n        [false, true, false, false, true],\n        [false, true, false, true, false],\n        [true, true, true, false, false],\n        [false, false, true, false, true],\n      ],\n    },\n    {\n      clues: [\n        [14, 1, 1, 4],\n        [12, 1, 2, 2],\n        [13, 13, 3, 3],\n        [11, 8, 4, 2],\n        [14, 8, 4, 4],\n      ],\n      answer: [\n        [true, false, false, false, true],\n        [false, false, true, false, false],\n        [false, true, false, true, false],\n        [false, true, true, true, false],\n        [false, true, true, true, false],\n      ],\n    },\n  ],\n};\n","export default {\n  global_constraint: [\n    [19, 1],\n    [20, 1],\n  ],\n  puzzles: [\n    {\n      clues: [[2, 1, 1, 0]],\n      answer: [\n        [false, false, false, false, false],\n        [false, false, false, false, false],\n        [false, false, false, false, false],\n        [false, false, false, false, false],\n        [false, false, false, false, false],\n      ],\n    },\n    {\n      clues: [[1, 1, 0, 2]],\n      answer: [\n        [true, true, true, true, true],\n        [true, true, true, true, true],\n        [true, true, true, true, true],\n        [true, true, true, true, true],\n        [true, true, true, true, true],\n      ],\n    },\n    {\n      clues: [[2, 1, 4, 4]],\n      answer: [\n        [false, false, false, false, false],\n        [false, false, false, false, false],\n        [false, false, false, false, false],\n        [false, false, false, false, false],\n        [false, false, false, false, false],\n      ],\n    },\n    {\n      clues: [[1, 1, 4, 4]],\n      answer: [\n        [true, true, true, true, true],\n        [true, true, true, true, true],\n        [true, true, true, true, true],\n        [true, true, true, true, true],\n        [true, true, true, true, true],\n      ],\n    },\n    {\n      clues: [[1, 1, 3, 1]],\n      answer: [\n        [true, true, true, true, true],\n        [true, true, true, true, true],\n        [true, true, true, true, true],\n        [true, true, true, true, true],\n        [true, true, true, true, true],\n      ],\n    },\n    {\n      clues: [[1, 1, 2, 2]],\n      answer: [\n        [true, true, true, true, true],\n        [true, true, true, true, true],\n        [true, true, true, true, true],\n        [true, true, true, true, true],\n        [true, true, true, true, true],\n      ],\n    },\n    {\n      clues: [[2, 1, 2, 0]],\n      answer: [\n        [false, false, false, false, false],\n        [false, false, false, false, false],\n        [false, false, false, false, false],\n        [false, false, false, false, false],\n        [false, false, false, false, false],\n      ],\n    },\n    {\n      clues: [[2, 1, 1, 2]],\n      answer: [\n        [false, false, false, false, false],\n        [false, false, false, false, false],\n        [false, false, false, false, false],\n        [false, false, false, false, false],\n        [false, false, false, false, false],\n      ],\n    },\n    {\n      clues: [[1, 1, 4, 1]],\n      answer: [\n        [true, true, true, true, true],\n        [true, true, true, true, true],\n        [true, true, true, true, true],\n        [true, true, true, true, true],\n        [true, true, true, true, true],\n      ],\n    },\n    {\n      clues: [[1, 1, 4, 0]],\n      answer: [\n        [true, true, true, true, true],\n        [true, true, true, true, true],\n        [true, true, true, true, true],\n        [true, true, true, true, true],\n        [true, true, true, true, true],\n      ],\n    },\n  ],\n};\n","export default {\n  global_constraint: [\n    [17, 1],\n    [18, 1],\n  ],\n  puzzles: [\n    {\n      clues: [[1, 1, 0, 1]],\n      answer: [\n        [false, true, false, true, false],\n        [true, false, true, false, true],\n        [false, true, false, true, false],\n        [true, false, true, false, true],\n        [false, true, false, true, false],\n      ],\n    },\n    {\n      clues: [[1, 1, 0, 4]],\n      answer: [\n        [true, false, true, false, true],\n        [false, true, false, true, false],\n        [true, false, true, false, true],\n        [false, true, false, true, false],\n        [true, false, true, false, true],\n      ],\n    },\n    {\n      clues: [[1, 1, 2, 2]],\n      answer: [\n        [true, false, true, false, true],\n        [false, true, false, true, false],\n        [true, false, true, false, true],\n        [false, true, false, true, false],\n        [true, false, true, false, true],\n      ],\n    },\n    {\n      clues: [[1, 1, 0, 4]],\n      answer: [\n        [true, false, true, false, true],\n        [false, true, false, true, false],\n        [true, false, true, false, true],\n        [false, true, false, true, false],\n        [true, false, true, false, true],\n      ],\n    },\n    {\n      clues: [[2, 1, 0, 3]],\n      answer: [\n        [true, false, true, false, true],\n        [false, true, false, true, false],\n        [true, false, true, false, true],\n        [false, true, false, true, false],\n        [true, false, true, false, true],\n      ],\n    },\n    {\n      clues: [[2, 1, 4, 2]],\n      answer: [\n        [false, true, false, true, false],\n        [true, false, true, false, true],\n        [false, true, false, true, false],\n        [true, false, true, false, true],\n        [false, true, false, true, false],\n      ],\n    },\n    {\n      clues: [[1, 1, 0, 0]],\n      answer: [\n        [true, false, true, false, true],\n        [false, true, false, true, false],\n        [true, false, true, false, true],\n        [false, true, false, true, false],\n        [true, false, true, false, true],\n      ],\n    },\n    {\n      clues: [[2, 1, 4, 4]],\n      answer: [\n        [false, true, false, true, false],\n        [true, false, true, false, true],\n        [false, true, false, true, false],\n        [true, false, true, false, true],\n        [false, true, false, true, false],\n      ],\n    },\n    {\n      clues: [[1, 1, 1, 4]],\n      answer: [\n        [false, true, false, true, false],\n        [true, false, true, false, true],\n        [false, true, false, true, false],\n        [true, false, true, false, true],\n        [false, true, false, true, false],\n      ],\n    },\n    {\n      clues: [[2, 1, 0, 1]],\n      answer: [\n        [true, false, true, false, true],\n        [false, true, false, true, false],\n        [true, false, true, false, true],\n        [false, true, false, true, false],\n        [true, false, true, false, true],\n      ],\n    },\n  ],\n};\n","export default {\n  global_constraint: [\n    [9, 1],\n    [10, 1],\n  ],\n  puzzles: [\n    {\n      clues: [\n        [1, 1, 0, 4],\n        [2, 1, 1, 2],\n        [2, 1, 2, 4],\n        [2, 1, 3, 0],\n        [1, 1, 3, 1],\n        [2, 1, 3, 3],\n        [2, 1, 4, 1],\n        [2, 1, 4, 2],\n        [2, 1, 4, 4],\n      ],\n      answer: [\n        [false, true, true, false, true],\n        [true, false, false, true, false],\n        [true, false, false, true, false],\n        [false, true, true, false, true],\n        [true, false, false, true, false],\n      ],\n    },\n    {\n      clues: [\n        [2, 1, 0, 2],\n        [2, 1, 0, 3],\n        [2, 1, 0, 4],\n        [1, 1, 1, 1],\n        [2, 1, 1, 4],\n        [2, 1, 2, 4],\n        [1, 1, 3, 0],\n        [2, 1, 3, 3],\n        [2, 1, 4, 2],\n      ],\n      answer: [\n        [true, true, false, false, false],\n        [true, true, false, false, false],\n        [true, true, false, false, false],\n        [true, true, false, false, false],\n        [true, true, false, false, false],\n      ],\n    },\n    {\n      clues: [\n        [2, 1, 0, 2],\n        [1, 1, 1, 3],\n        [1, 1, 2, 1],\n        [1, 1, 2, 2],\n        [1, 1, 2, 3],\n        [1, 1, 3, 0],\n        [2, 1, 3, 3],\n        [1, 1, 4, 2],\n        [2, 1, 4, 4],\n      ],\n      answer: [\n        [true, false, false, false, true],\n        [false, true, true, true, false],\n        [false, true, true, true, false],\n        [true, false, false, false, true],\n        [false, true, true, true, false],\n      ],\n    },\n    {\n      clues: [\n        [1, 1, 0, 1],\n        [1, 1, 0, 3],\n        [2, 1, 1, 0],\n        [2, 1, 2, 3],\n        [2, 1, 2, 4],\n        [2, 1, 3, 2],\n        [1, 1, 3, 3],\n        [1, 1, 4, 0],\n        [1, 1, 4, 1],\n      ],\n      answer: [\n        [true, true, false, true, true],\n        [false, false, true, false, false],\n        [false, false, true, false, false],\n        [true, true, false, true, true],\n        [true, true, false, true, true],\n      ],\n    },\n    {\n      clues: [\n        [1, 1, 0, 1],\n        [2, 1, 0, 2],\n        [2, 1, 1, 0],\n        [2, 1, 1, 2],\n        [1, 1, 2, 2],\n        [1, 1, 2, 3],\n        [2, 1, 3, 1],\n        [1, 1, 3, 4],\n        [1, 1, 4, 2],\n      ],\n      answer: [\n        [false, true, false, false, false],\n        [false, true, false, false, false],\n        [true, false, true, true, true],\n        [true, false, true, true, true],\n        [true, false, true, true, true],\n      ],\n    },\n    {\n      clues: [\n        [1, 1, 0, 3],\n        [2, 1, 0, 4],\n        [2, 1, 1, 1],\n        [1, 1, 1, 2],\n        [1, 1, 2, 3],\n        [2, 1, 3, 0],\n        [2, 1, 4, 0],\n        [2, 1, 4, 1],\n        [1, 1, 4, 3],\n      ],\n      answer: [\n        [false, false, true, true, false],\n        [false, false, true, true, false],\n        [false, false, true, true, false],\n        [false, false, true, true, false],\n        [false, false, true, true, false],\n      ],\n    },\n    {\n      clues: [\n        [2, 1, 0, 4],\n        [1, 1, 1, 0],\n        [2, 1, 1, 1],\n        [2, 1, 1, 3],\n        [2, 1, 2, 0],\n        [1, 1, 3, 1],\n        [2, 1, 3, 4],\n        [1, 1, 4, 0],\n        [2, 1, 4, 2],\n      ],\n      answer: [\n        [false, true, true, true, false],\n        [true, false, false, false, true],\n        [false, true, true, true, false],\n        [false, true, true, true, false],\n        [true, false, false, false, true],\n      ],\n    },\n    {\n      clues: [\n        [2, 1, 0, 0],\n        [2, 1, 1, 2],\n        [2, 1, 1, 4],\n        [1, 1, 2, 4],\n        [2, 1, 3, 0],\n        [2, 1, 3, 3],\n        [1, 1, 4, 0],\n        [2, 1, 4, 1],\n        [1, 1, 4, 4],\n      ],\n      answer: [\n        [false, true, false, false, false],\n        [false, true, false, false, false],\n        [true, false, true, true, true],\n        [false, true, false, false, false],\n        [true, false, true, true, true],\n      ],\n    },\n    {\n      clues: [\n        [2, 1, 0, 3],\n        [2, 1, 1, 0],\n        [2, 1, 1, 2],\n        [2, 1, 2, 3],\n        [1, 1, 3, 1],\n        [1, 1, 3, 2],\n        [1, 1, 3, 3],\n        [2, 1, 4, 3],\n        [1, 1, 4, 4],\n      ],\n      answer: [\n        [false, false, false, false, true],\n        [false, false, false, false, true],\n        [false, false, false, false, true],\n        [true, true, true, true, false],\n        [false, false, false, false, true],\n      ],\n    },\n    {\n      clues: [\n        [1, 1, 0, 0],\n        [1, 1, 1, 0],\n        [1, 1, 1, 1],\n        [2, 1, 1, 4],\n        [2, 1, 2, 4],\n        [2, 1, 3, 0],\n        [1, 1, 3, 3],\n        [1, 1, 4, 2],\n        [1, 1, 4, 4],\n      ],\n      answer: [\n        [true, true, false, false, false],\n        [true, true, false, false, false],\n        [true, true, false, false, false],\n        [false, false, true, true, true],\n        [false, false, true, true, true],\n      ],\n    },\n  ],\n};\n","export default {\n  global_constraint: [\n    [11, 1],\n    [12, 1],\n  ],\n  puzzles: [\n    {\n      clues: [\n        [1, 1, 2, 3],\n        [2, 1, 4, 0],\n      ],\n      answer: [\n        [false, true, false, true, false],\n        [true, false, true, false, true],\n        [false, true, false, true, false],\n        [true, false, true, false, true],\n        [false, true, false, true, false],\n      ],\n    },\n    {\n      clues: [\n        [2, 1, 0, 4],\n        [1, 1, 3, 2],\n      ],\n      answer: [\n        [false, true, false, true, false],\n        [true, false, true, false, true],\n        [false, true, false, true, false],\n        [true, false, true, false, true],\n        [false, true, false, true, false],\n      ],\n    },\n    {\n      clues: [\n        [1, 1, 3, 0],\n        [2, 1, 3, 1],\n      ],\n      answer: [\n        [false, true, false, true, false],\n        [true, false, true, false, true],\n        [false, true, false, true, false],\n        [true, false, true, false, true],\n        [false, true, false, true, false],\n      ],\n    },\n    {\n      clues: [\n        [1, 1, 1, 3],\n        [1, 1, 4, 3],\n      ],\n      answer: [\n        [true, true, true, true, true],\n        [true, true, true, true, true],\n        [true, true, true, true, true],\n        [true, true, true, true, true],\n        [true, true, true, true, true],\n      ],\n    },\n    {\n      clues: [\n        [2, 1, 2, 2],\n        [1, 1, 3, 2],\n      ],\n      answer: [\n        [false, true, false, true, false],\n        [true, false, true, false, true],\n        [false, true, false, true, false],\n        [true, false, true, false, true],\n        [false, true, false, true, false],\n      ],\n    },\n    {\n      clues: [\n        [1, 1, 2, 1],\n        [1, 1, 4, 4],\n      ],\n      answer: [\n        [true, true, true, true, true],\n        [true, true, true, true, true],\n        [true, true, true, true, true],\n        [true, true, true, true, true],\n        [true, true, true, true, true],\n      ],\n    },\n    {\n      clues: [\n        [2, 1, 1, 0],\n        [2, 1, 4, 0],\n      ],\n      answer: [\n        [false, false, false, false, false],\n        [false, false, false, false, false],\n        [false, false, false, false, false],\n        [false, false, false, false, false],\n        [false, false, false, false, false],\n      ],\n    },\n    {\n      clues: [\n        [2, 1, 3, 3],\n        [1, 1, 4, 3],\n      ],\n      answer: [\n        [false, true, false, true, false],\n        [true, false, true, false, true],\n        [false, true, false, true, false],\n        [true, false, true, false, true],\n        [false, true, false, true, false],\n      ],\n    },\n    {\n      clues: [\n        [1, 1, 0, 1],\n        [2, 1, 2, 4],\n      ],\n      answer: [\n        [false, true, false, true, false],\n        [true, false, true, false, true],\n        [false, true, false, true, false],\n        [true, false, true, false, true],\n        [false, true, false, true, false],\n      ],\n    },\n    {\n      clues: [\n        [1, 1, 1, 2],\n        [1, 1, 4, 2],\n      ],\n      answer: [\n        [true, true, true, true, true],\n        [true, true, true, true, true],\n        [true, true, true, true, true],\n        [true, true, true, true, true],\n        [true, true, true, true, true],\n      ],\n    },\n  ],\n};\n","export default {\n  global_constraint: [\n    [1, 1],\n    [2, 1],\n    [13, 1],\n    [14, 1],\n  ],\n  puzzles: [\n    {\n      clues: [\n        [1, 1, 2, 2],\n        [2, 1, 2, 4],\n        [2, 1, 4, 4],\n      ],\n      answer: [\n        [true, true, true, true, true],\n        [true, false, false, false, false],\n        [true, false, true, true, false],\n        [true, false, false, true, false],\n        [true, true, true, true, false],\n      ],\n    },\n    {\n      clues: [\n        [2, 1, 1, 1],\n        [2, 1, 3, 3],\n        [2, 1, 4, 2],\n      ],\n      answer: [\n        [true, true, true, true, true],\n        [true, false, false, false, true],\n        [true, false, true, false, true],\n        [true, true, true, false, true],\n        [false, false, false, false, true],\n      ],\n    },\n    {\n      clues: [\n        [2, 1, 0, 2],\n        [2, 1, 1, 3],\n        [1, 1, 4, 4],\n      ],\n      answer: [\n        [false, false, false, false, true],\n        [true, true, true, false, true],\n        [true, false, true, false, true],\n        [true, false, false, false, true],\n        [true, true, true, true, true],\n      ],\n    },\n    {\n      clues: [\n        [1, 1, 2, 2],\n        [1, 1, 3, 3],\n        [2, 1, 4, 1],\n      ],\n      answer: [\n        [true, true, true, true, true],\n        [true, false, false, false, true],\n        [true, false, true, false, true],\n        [true, false, true, true, true],\n        [true, false, false, false, false],\n      ],\n    },\n    {\n      clues: [\n        [1, 1, 1, 4],\n        [1, 1, 2, 3],\n        [1, 1, 4, 4],\n      ],\n      answer: [\n        [true, true, true, true, true],\n        [true, false, false, false, true],\n        [true, false, true, true, true],\n        [true, false, false, false, false],\n        [true, true, true, true, true],\n      ],\n    },\n    {\n      clues: [\n        [2, 1, 0, 0],\n        [2, 1, 1, 3],\n        [2, 1, 2, 0],\n        [1, 1, 4, 3],\n      ],\n      answer: [\n        [false, true, true, true, true],\n        [false, true, false, false, true],\n        [false, true, true, false, true],\n        [false, false, false, false, true],\n        [true, true, true, true, true],\n      ],\n    },\n    {\n      clues: [\n        [1, 1, 0, 2],\n        [1, 1, 1, 3],\n        [1, 1, 3, 3],\n      ],\n      answer: [\n        [true, true, true, true, false],\n        [false, false, false, true, false],\n        [false, true, false, true, false],\n        [false, true, true, true, false],\n        [false, false, false, false, false],\n      ],\n    },\n    {\n      clues: [\n        [2, 1, 1, 1],\n        [2, 1, 1, 4],\n        [2, 1, 2, 1],\n        [2, 1, 4, 2],\n      ],\n      answer: [\n        [true, false, false, false, false],\n        [true, false, true, true, false],\n        [true, false, false, true, false],\n        [true, true, true, true, false],\n        [false, false, false, false, false],\n      ],\n    },\n    {\n      clues: [\n        [1, 1, 2, 0],\n        [2, 1, 2, 3],\n        [1, 1, 3, 3],\n      ],\n      answer: [\n        [true, true, true, true, true],\n        [true, false, false, false, true],\n        [true, false, true, false, true],\n        [true, false, true, true, true],\n        [true, false, false, false, false],\n      ],\n    },\n    {\n      clues: [\n        [1, 1, 0, 2],\n        [1, 1, 1, 3],\n        [2, 1, 3, 2],\n      ],\n      answer: [\n        [true, true, true, true, false],\n        [true, false, false, true, false],\n        [true, false, true, true, false],\n        [true, false, false, false, false],\n        [true, true, true, true, true],\n      ],\n    },\n  ],\n};\n","export default {\n  global_constraint: [[13, 1]],\n  puzzles: [\n    {\n      clues: [\n        [6, 8, 0, 3],\n        [6, 6, 1, 2],\n        [6, 2, 1, 4],\n        [6, 2, 2, 1],\n        [6, 3, 2, 4],\n        [6, 2, 3, 2],\n        [6, 2, 4, 3],\n      ],\n      answer: [\n        [false, true, true, false, false],\n        [false, true, false, true, false],\n        [false, false, true, true, false],\n        [false, false, false, false, true],\n        [false, false, false, false, true],\n      ],\n    },\n    {\n      clues: [\n        [6, 3, 1, 0],\n        [6, 4, 1, 1],\n        [6, 2, 1, 3],\n        [6, 1, 1, 4],\n        [6, 2, 2, 2],\n        [6, 9, 2, 4],\n        [6, 5, 3, 0],\n        [6, 3, 3, 2],\n      ],\n      answer: [\n        [false, true, true, true, false],\n        [false, false, false, false, false],\n        [true, true, false, false, false],\n        [false, true, false, false, true],\n        [true, true, false, false, true],\n      ],\n    },\n    {\n      clues: [\n        [6, 8, 0, 0],\n        [6, 5, 1, 3],\n        [6, 1, 2, 2],\n        [6, 2, 3, 0],\n        [6, 1, 4, 2],\n        [6, 2, 4, 3],\n      ],\n      answer: [\n        [false, true, true, true, true],\n        [true, true, false, false, true],\n        [false, false, false, false, true],\n        [false, false, false, false, true],\n        [true, true, false, false, true],\n      ],\n    },\n    {\n      clues: [\n        [6, 2, 0, 0],\n        [6, 4, 0, 2],\n        [6, 1, 1, 4],\n        [6, 3, 3, 3],\n        [6, 10, 3, 4],\n        [6, 5, 4, 1],\n      ],\n      answer: [\n        [false, true, false, false, false],\n        [false, true, true, true, false],\n        [false, false, false, false, false],\n        [true, true, true, false, false],\n        [true, false, true, true, false],\n      ],\n    },\n    {\n      clues: [\n        [6, 10, 0, 1],\n        [6, 1, 1, 2],\n        [6, 2, 1, 3],\n        [6, 4, 3, 4],\n        [6, 1, 4, 1],\n      ],\n      answer: [\n        [true, false, false, false, false],\n        [true, true, false, false, true],\n        [false, false, false, false, true],\n        [false, false, true, true, false],\n        [false, false, false, true, true],\n      ],\n    },\n    {\n      clues: [\n        [6, 2, 0, 3],\n        [6, 7, 1, 1],\n        [6, 4, 2, 2],\n        [6, 5, 3, 2],\n        [6, 2, 4, 1],\n        [6, 9, 4, 4],\n      ],\n      answer: [\n        [true, true, true, false, false],\n        [true, false, true, false, false],\n        [true, true, false, true, true],\n        [false, true, false, false, false],\n        [false, false, true, true, false],\n      ],\n    },\n    {\n      clues: [\n        [6, 3, 0, 3],\n        [6, 9, 1, 0],\n        [6, 2, 2, 3],\n        [6, 2, 2, 4],\n        [6, 6, 3, 1],\n        [6, 3, 3, 3],\n        [6, 3, 4, 3],\n      ],\n      answer: [\n        [false, true, true, false, true],\n        [false, false, false, false, true],\n        [true, true, false, false, false],\n        [true, false, false, false, true],\n        [true, true, true, false, true],\n      ],\n    },\n    {\n      clues: [\n        [6, 1, 1, 0],\n        [6, 3, 1, 2],\n        [6, 1, 2, 3],\n        [6, 9, 3, 1],\n        [6, 1, 4, 3],\n      ],\n      answer: [\n        [false, false, false, true, true],\n        [false, false, false, false, false],\n        [false, true, true, false, false],\n        [true, false, false, false, false],\n        [true, true, true, false, false],\n      ],\n    },\n    {\n      clues: [\n        [6, 2, 0, 4],\n        [6, 4, 1, 0],\n        [6, 4, 1, 1],\n        [6, 4, 1, 4],\n        [6, 5, 3, 1],\n        [6, 2, 4, 0],\n        [6, 9, 4, 3],\n      ],\n      answer: [\n        [true, true, false, true, false],\n        [false, false, false, true, false],\n        [true, true, false, true, true],\n        [true, false, false, false, true],\n        [false, true, true, false, false],\n      ],\n    },\n    {\n      clues: [\n        [6, 3, 0, 1],\n        [6, 4, 1, 1],\n        [6, 4, 1, 3],\n        [6, 3, 1, 4],\n        [6, 2, 3, 0],\n        [6, 8, 3, 2],\n        [6, 3, 3, 4],\n      ],\n      answer: [\n        [true, false, true, true, true],\n        [true, false, false, false, false],\n        [false, true, false, true, false],\n        [false, true, false, true, false],\n        [false, false, true, true, false],\n      ],\n    },\n  ],\n};\n","export default {\n  global_constraint: [[2, 1]],\n  puzzles: [\n    {\n      clues: [\n        [16, 8, 0, 4],\n        [16, 5, 1, 1],\n        [16, 5, 1, 2],\n        [16, 7, 1, 3],\n        [16, 11, 3, 4],\n        [16, 5, 4, 0],\n      ],\n      answer: [\n        [true, false, false, false, false],\n        [true, false, false, false, false],\n        [false, true, true, false, false],\n        [false, false, false, false, false],\n        [false, false, false, true, false],\n      ],\n    },\n    {\n      clues: [\n        [16, 3, 0, 3],\n        [16, 6, 1, 1],\n        [16, 3, 2, 2],\n        [16, 5, 3, 0],\n        [16, 6, 4, 3],\n        [16, 11, 4, 4],\n      ],\n      answer: [\n        [true, false, true, false, false],\n        [false, false, true, false, false],\n        [false, false, false, true, false],\n        [false, false, true, false, false],\n        [false, false, false, false, false],\n      ],\n    },\n    {\n      clues: [\n        [16, 4, 0, 0],\n        [16, 4, 1, 1],\n        [16, 2, 1, 3],\n        [16, 11, 2, 2],\n        [16, 2, 4, 0],\n      ],\n      answer: [\n        [false, false, false, false, true],\n        [true, false, true, false, true],\n        [true, false, false, true, true],\n        [false, false, true, true, true],\n        [false, true, true, true, true],\n      ],\n    },\n    {\n      clues: [\n        [16, 11, 1, 1],\n        [16, 4, 2, 1],\n        [16, 4, 2, 4],\n        [16, 5, 3, 3],\n        [16, 5, 4, 0],\n        [16, 7, 4, 4],\n      ],\n      answer: [\n        [true, true, true, true, true],\n        [true, false, true, false, true],\n        [true, false, true, false, false],\n        [true, false, true, false, false],\n        [false, false, false, false, false],\n      ],\n    },\n    {\n      clues: [\n        [16, 3, 0, 2],\n        [16, 5, 1, 1],\n        [16, 11, 1, 4],\n        [16, 6, 2, 0],\n        [16, 7, 2, 2],\n        [16, 9, 2, 3],\n        [16, 4, 4, 2],\n      ],\n      answer: [\n        [true, false, false, false, true],\n        [false, false, true, false, false],\n        [false, false, false, false, false],\n        [true, false, false, false, false],\n        [true, true, false, false, true],\n      ],\n    },\n    {\n      clues: [\n        [16, 10, 0, 1],\n        [16, 6, 1, 4],\n        [16, 3, 2, 0],\n        [16, 5, 3, 2],\n        [16, 9, 3, 3],\n      ],\n      answer: [\n        [false, false, false, false, false],\n        [true, false, true, false, false],\n        [false, false, true, false, false],\n        [false, false, false, false, false],\n        [true, false, true, false, false],\n      ],\n    },\n    {\n      clues: [\n        [16, 5, 0, 1],\n        [16, 8, 1, 2],\n        [16, 8, 2, 3],\n        [16, 9, 2, 4],\n        [16, 10, 3, 2],\n        [16, 8, 4, 4],\n      ],\n      answer: [\n        [true, false, true, true, false],\n        [false, false, false, false, false],\n        [false, false, false, false, false],\n        [false, false, false, false, false],\n        [true, false, false, false, false],\n      ],\n    },\n    {\n      clues: [\n        [16, 12, 0, 1],\n        [16, 8, 1, 4],\n        [16, 5, 2, 1],\n        [16, 7, 3, 3],\n        [16, 9, 4, 4],\n      ],\n      answer: [\n        [true, false, true, true, false],\n        [true, false, false, false, false],\n        [true, false, true, false, false],\n        [true, false, false, false, false],\n        [false, false, false, false, false],\n      ],\n    },\n    {\n      clues: [\n        [16, 7, 0, 4],\n        [16, 3, 1, 0],\n        [16, 7, 1, 4],\n        [16, 12, 3, 4],\n        [16, 9, 4, 3],\n      ],\n      answer: [\n        [false, true, false, false, false],\n        [false, true, false, false, false],\n        [false, false, false, false, false],\n        [true, true, false, false, false],\n        [false, false, false, false, false],\n      ],\n    },\n    {\n      clues: [\n        [16, 8, 0, 3],\n        [16, 5, 1, 1],\n        [16, 4, 2, 4],\n        [16, 10, 3, 0],\n        [16, 9, 4, 3],\n      ],\n      answer: [\n        [true, false, false, false, false],\n        [false, false, false, false, true],\n        [false, true, true, false, false],\n        [false, false, false, false, false],\n        [false, false, false, false, false],\n      ],\n    },\n  ],\n};\n","export default {\n  global_constraint: [[9, 1]],\n  puzzles: [\n    {\n      clues: [\n        [11, 13, 3, 1],\n        [11, 8, 4, 4],\n      ],\n      answer: [\n        [true, true, false, false, false],\n        [true, true, false, true, true],\n        [true, true, false, true, true],\n        [true, true, false, true, true],\n        [true, true, false, true, true],\n      ],\n    },\n    {\n      clues: [\n        [11, 1, 0, 1],\n        [11, 11, 1, 2],\n        [11, 2, 1, 4],\n        [11, 6, 3, 0],\n        [11, 3, 3, 3],\n      ],\n      answer: [\n        [false, true, false, false, true],\n        [false, false, true, false, true],\n        [true, true, false, true, false],\n        [true, true, false, true, false],\n        [true, true, false, true, false],\n      ],\n    },\n    {\n      clues: [\n        [11, 2, 0, 0],\n        [11, 11, 2, 0],\n        [11, 1, 3, 1],\n        [11, 10, 3, 4],\n        [11, 1, 4, 0],\n      ],\n      answer: [\n        [true, true, false, true, true],\n        [false, false, false, true, true],\n        [true, false, false, true, true],\n        [false, true, false, true, true],\n        [true, false, false, true, true],\n      ],\n    },\n    {\n      clues: [\n        [11, 10, 1, 1],\n        [11, 11, 2, 3],\n      ],\n      answer: [\n        [true, true, false, true, false],\n        [true, true, false, true, false],\n        [true, true, false, true, false],\n        [true, true, false, true, false],\n        [true, true, false, true, false],\n      ],\n    },\n    {\n      clues: [\n        [11, 11, 0, 1],\n        [11, 1, 0, 4],\n        [11, 4, 1, 3],\n        [11, 1, 2, 0],\n        [11, 3, 4, 2],\n        [11, 1, 4, 4],\n      ],\n      answer: [\n        [false, true, false, false, true],\n        [false, false, true, true, false],\n        [true, false, true, true, false],\n        [false, false, false, false, false],\n        [true, true, true, false, true],\n      ],\n    },\n    {\n      clues: [\n        [11, 2, 1, 1],\n        [11, 3, 2, 0],\n        [11, 11, 3, 3],\n      ],\n      answer: [\n        [false, true, false, true, false],\n        [false, true, false, true, false],\n        [true, false, false, true, false],\n        [true, false, false, true, false],\n        [true, false, false, true, false],\n      ],\n    },\n    {\n      clues: [\n        [11, 4, 0, 3],\n        [11, 6, 1, 0],\n        [11, 11, 3, 2],\n        [11, 2, 4, 0],\n      ],\n      answer: [\n        [true, true, false, true, true],\n        [true, true, false, true, true],\n        [true, true, false, false, false],\n        [false, false, true, true, true],\n        [true, true, false, false, false],\n      ],\n    },\n    {\n      clues: [\n        [11, 10, 2, 0],\n        [11, 13, 4, 3],\n      ],\n      answer: [\n        [true, true, false, false, false],\n        [true, true, false, true, true],\n        [true, true, false, true, true],\n        [true, true, false, true, true],\n        [true, true, false, true, true],\n      ],\n    },\n    {\n      clues: [\n        [11, 3, 0, 1],\n        [11, 1, 0, 3],\n        [11, 11, 4, 1],\n        [11, 3, 4, 4],\n      ],\n      answer: [\n        [false, true, false, true, false],\n        [false, true, false, false, false],\n        [false, true, false, false, true],\n        [false, false, false, false, true],\n        [true, true, true, false, true],\n      ],\n    },\n    {\n      clues: [\n        [11, 5, 1, 4],\n        [11, 11, 3, 0],\n        [11, 1, 3, 2],\n        [11, 1, 4, 1],\n        [11, 2, 4, 3],\n      ],\n      answer: [\n        [false, false, false, false, false],\n        [true, true, true, true, true],\n        [false, false, false, false, false],\n        [true, false, true, false, false],\n        [false, true, false, true, true],\n      ],\n    },\n  ],\n};\n","export default {\n  puzzles: [\n    {\n      global_constraint: [[11, 1]],\n      clues: [\n        [14, 9, 0, 1],\n        [13, 4, 2, 4],\n        [5, 8, 3, 1],\n        [6, 1, 4, 0],\n      ],\n      answer: [\n        [false, false, true, true, true],\n        [false, false, true, true, true],\n        [true, false, true, true, true],\n        [false, true, false, false, false],\n        [false, false, true, false, true],\n      ],\n    },\n    {\n      global_constraint: [\n        [8, 1],\n        [17, 1],\n      ],\n      clues: [\n        [9, 4, 0, 2],\n        [14, 5, 1, 2],\n        [7, 4, 1, 3],\n        [9, 4, 3, 0],\n      ],\n      answer: [\n        [false, false, true, false, false],\n        [false, true, false, true, false],\n        [false, false, true, false, true],\n        [true, false, false, false, false],\n        [false, false, true, false, true],\n      ],\n    },\n    {\n      global_constraint: [\n        [18, 1],\n        [1, 1],\n      ],\n      clues: [\n        [15, 7, 0, 3],\n        [15, 11, 2, 0],\n        [5, 3, 2, 3],\n        [3, 1, 4, 2],\n        [3, 2, 4, 3],\n      ],\n      answer: [\n        [true, false, true, true, true],\n        [true, true, false, true, false],\n        [true, true, true, true, true],\n        [true, true, false, true, true],\n        [true, false, true, true, false],\n      ],\n    },\n    {\n      global_constraint: [[11, 1]],\n      clues: [\n        [14, 1, 0, 1],\n        [9, 4, 0, 4],\n        [13, 6, 1, 4],\n        [4, 4, 3, 3],\n        [12, 3, 4, 0],\n      ],\n      answer: [\n        [false, false, false, true, true],\n        [false, true, false, true, true],\n        [true, false, true, false, false],\n        [false, true, false, false, false],\n        [false, false, true, false, true],\n      ],\n    },\n    {\n      global_constraint: [\n        [22, 1],\n        [2, 1],\n      ],\n      clues: [\n        [3, 4, 1, 3],\n        [13, 8, 2, 1],\n        [6, 4, 2, 3],\n      ],\n      answer: [\n        [true, true, true, true, true],\n        [true, true, false, true, false],\n        [true, true, false, false, false],\n        [true, true, true, true, true],\n        [true, true, true, true, true],\n      ],\n    },\n    {\n      global_constraint: [\n        [6, 1],\n        [10, 1],\n      ],\n      clues: [\n        [12, 3, 0, 4],\n        [11, 5, 3, 0],\n        [13, 8, 3, 1],\n        [10, 4, 4, 2],\n      ],\n      answer: [\n        [false, false, true, true, false],\n        [false, false, true, true, false],\n        [false, false, true, true, false],\n        [true, true, false, true, true],\n        [true, true, false, true, true],\n      ],\n    },\n    {\n      global_constraint: [\n        [5, 1],\n        [14, 1],\n        [10, 1],\n      ],\n      clues: [\n        [11, 2, 0, 4],\n        [11, 3, 2, 0],\n        [7, 3, 3, 2],\n      ],\n      answer: [\n        [true, false, true, false, true],\n        [true, false, true, false, true],\n        [true, false, true, true, false],\n        [false, true, true, true, false],\n        [false, true, false, false, true],\n      ],\n    },\n    {\n      global_constraint: [[11, 1]],\n      clues: [\n        [17, 1, 0, 1],\n        [16, 4, 0, 2],\n        [18, 2, 1, 4],\n        [15, 4, 3, 1],\n        [10, 1, 4, 4],\n      ],\n      answer: [\n        [true, true, false, true, false],\n        [true, true, false, false, false],\n        [false, false, false, true, true],\n        [false, true, false, true, true],\n        [false, false, true, false, false],\n      ],\n    },\n    {\n      global_constraint: [[11, 1]],\n      clues: [\n        [15, 8, 2, 2],\n        [17, 2, 3, 0],\n        [6, 2, 3, 4],\n      ],\n      answer: [\n        [true, false, true, true, true],\n        [false, false, true, true, true],\n        [false, false, true, true, true],\n        [true, true, false, false, false],\n        [true, true, false, false, false],\n      ],\n    },\n    {\n      global_constraint: [\n        [4, 1],\n        [10, 1],\n        [7, 1],\n      ],\n      clues: [\n        [17, 4, 0, 3],\n        [4, 2, 1, 0],\n        [6, 7, 3, 2],\n        [13, 5, 3, 3],\n        [12, 2, 4, 1],\n      ],\n      answer: [\n        [true, true, false, true, false],\n        [false, false, true, false, true],\n        [false, false, true, false, true],\n        [true, true, false, true, false],\n        [false, false, true, true, false],\n      ],\n    },\n    {\n      global_constraint: [[12, 1]],\n      clues: [\n        [4, 4, 0, 0],\n        [17, 2, 0, 4],\n        [16, 1, 2, 3],\n        [13, 1, 3, 4],\n        [11, 1, 4, 1],\n      ],\n      answer: [\n        [false, false, true, false, true],\n        [false, false, true, true, false],\n        [true, true, true, false, true],\n        [true, false, true, true, true],\n        [false, true, false, true, false],\n      ],\n    },\n    {\n      global_constraint: [\n        [3, 1],\n        [21, 1],\n        [13, 1],\n      ],\n      clues: [\n        [10, 6, 0, 2],\n        [4, 1, 1, 3],\n        [4, 2, 2, 2],\n        [13, 6, 3, 2],\n        [12, 1, 3, 4],\n      ],\n      answer: [\n        [false, true, false, true, true],\n        [false, true, true, false, true],\n        [true, false, false, false, true],\n        [true, false, true, true, false],\n        [true, true, false, true, true],\n      ],\n    },\n    {\n      global_constraint: [\n        [8, 1],\n        [13, 1],\n        [10, 1],\n      ],\n      clues: [\n        [14, 8, 1, 4],\n        [12, 5, 3, 0],\n        [16, 1, 4, 3],\n      ],\n      answer: [\n        [false, true, false, true, true],\n        [false, true, false, true, false],\n        [false, true, false, true, false],\n        [false, true, false, true, true],\n        [false, true, true, false, true],\n      ],\n    },\n    {\n      global_constraint: [\n        [14, 1],\n        [22, 1],\n      ],\n      clues: [\n        [15, 2, 0, 1],\n        [10, 1, 1, 0],\n        [9, 3, 2, 4],\n        [18, 2, 3, 1],\n        [14, 4, 4, 3],\n      ],\n      answer: [\n        [false, true, true, false, false],\n        [false, false, false, true, false],\n        [true, true, false, true, true],\n        [false, false, true, false, true],\n        [true, false, true, false, false],\n      ],\n    },\n    {\n      global_constraint: [\n        [5, 1],\n        [11, 1],\n      ],\n      clues: [\n        [13, 3, 1, 3],\n        [15, 1, 4, 0],\n        [6, 4, 4, 3],\n      ],\n      answer: [\n        [false, true, true, true, false],\n        [false, true, true, true, false],\n        [false, true, true, true, false],\n        [false, false, false, false, true],\n        [true, false, true, false, false],\n      ],\n    },\n    {\n      global_constraint: [[11, 1]],\n      clues: [\n        [10, 3, 0, 0],\n        [17, 9, 2, 3],\n        [4, 2, 3, 4],\n        [16, 6, 4, 1],\n      ],\n      answer: [\n        [false, true, true, false, true],\n        [false, true, true, false, false],\n        [false, false, false, true, false],\n        [false, true, false, false, false],\n        [true, false, true, false, true],\n      ],\n    },\n    {\n      global_constraint: [\n        [1, 1],\n        [7, 1],\n        [22, 1],\n      ],\n      clues: [\n        [6, 2, 1, 4],\n        [13, 6, 2, 1],\n        [5, 6, 2, 2],\n        [7, 3, 4, 2],\n        [5, 3, 4, 3],\n      ],\n      answer: [\n        [false, true, false, false, false],\n        [false, true, false, true, false],\n        [false, true, true, true, false],\n        [false, true, false, true, false],\n        [false, false, true, true, false],\n      ],\n    },\n    {\n      global_constraint: [\n        [10, 1],\n        [21, 1],\n      ],\n      clues: [\n        [9, 2, 0, 0],\n        [16, 2, 1, 3],\n        [6, 6, 2, 1],\n        [14, 8, 3, 1],\n        [15, 2, 4, 4],\n      ],\n      answer: [\n        [true, true, false, true, false],\n        [false, false, true, false, true],\n        [false, false, true, false, true],\n        [false, false, true, true, false],\n        [true, true, false, true, true],\n      ],\n    },\n    {\n      global_constraint: [[12, 1]],\n      clues: [\n        [3, 3, 1, 2],\n        [15, 4, 1, 4],\n        [17, 2, 2, 2],\n        [13, 3, 3, 4],\n        [15, 1, 4, 0],\n      ],\n      answer: [\n        [true, true, false, true, false],\n        [false, true, true, true, true],\n        [true, false, true, true, false],\n        [false, true, false, true, true],\n        [true, false, true, true, false],\n      ],\n    },\n    {\n      global_constraint: [\n        [9, 1],\n        [7, 1],\n      ],\n      clues: [\n        [14, 6, 0, 3],\n        [6, 3, 1, 0],\n        [14, 7, 3, 0],\n        [11, 2, 4, 4],\n      ],\n      answer: [\n        [false, true, true, false, true],\n        [false, false, false, false, true],\n        [true, true, true, true, false],\n        [false, false, false, false, true],\n        [true, true, true, false, true],\n      ],\n    },\n    {\n      global_constraint: [\n        [9, 1],\n        [7, 1],\n      ],\n      clues: [\n        [11, 6, 1, 1],\n        [7, 2, 1, 3],\n        [16, 4, 1, 4],\n        [4, 2, 3, 3],\n        [11, 2, 4, 3],\n      ],\n      answer: [\n        [false, true, false, false, false],\n        [false, true, false, true, false],\n        [false, true, false, true, false],\n        [false, true, false, false, false],\n        [false, true, false, true, true],\n      ],\n    },\n    {\n      global_constraint: [\n        [21, 1],\n        [3, 1],\n        [8, 1],\n      ],\n      clues: [\n        [16, 5, 0, 1],\n        [4, 1, 0, 3],\n        [14, 4, 2, 0],\n        [4, 2, 3, 3],\n        [4, 1, 4, 1],\n        [17, 4, 4, 4],\n      ],\n      answer: [\n        [false, false, true, false, false],\n        [true, false, true, true, false],\n        [false, true, false, true, false],\n        [true, true, false, false, false],\n        [false, false, true, true, true],\n      ],\n    },\n    {\n      global_constraint: [\n        [21, 1],\n        [1, 1],\n      ],\n      clues: [\n        [18, 3, 0, 3],\n        [15, 9, 1, 1],\n        [8, 2, 2, 0],\n        [18, 9, 3, 4],\n        [18, 4, 4, 2],\n      ],\n      answer: [\n        [false, true, true, false, false],\n        [true, true, true, true, true],\n        [false, true, false, false, true],\n        [true, true, true, true, false],\n        [false, true, false, true, true],\n      ],\n    },\n    {\n      global_constraint: [\n        [7, 1],\n        [12, 1],\n      ],\n      clues: [\n        [11, 1, 0, 0],\n        [12, 4, 0, 3],\n        [15, 3, 2, 0],\n        [14, 6, 2, 3],\n        [11, 4, 3, 3],\n      ],\n      answer: [\n        [true, false, true, false, true],\n        [false, true, false, true, false],\n        [true, false, true, false, true],\n        [true, true, false, true, true],\n        [true, false, true, false, true],\n      ],\n    },\n    {\n      global_constraint: [\n        [4, 1],\n        [18, 1],\n      ],\n      clues: [\n        [3, 3, 0, 3],\n        [11, 4, 1, 1],\n        [3, 6, 3, 3],\n        [5, 2, 4, 0],\n      ],\n      answer: [\n        [true, false, true, true, true],\n        [true, true, false, true, true],\n        [true, false, true, true, true],\n        [false, true, true, true, true],\n        [true, true, true, true, true],\n      ],\n    },\n  ],\n};\n","import { GameSpecServerFragment } from \"engine/types/game-specs\";\nimport { Puzzle50CommonSpec, Puzzle50ExtraState } from \"./puzzle-50-common\";\n\nimport CanalView from \"./puzzle-50-data/canalview\";\nimport Cave from \"./puzzle-50-data/cave\";\nimport Kurodoko from \"./puzzle-50-data/kurodoko\";\nimport Kurotto from \"./puzzle-50-data/kurotto\";\nimport LightAndShadow from \"./puzzle-50-data/lightandshadow\";\nimport Minesweeper from \"./puzzle-50-data/minesweeper\";\nimport Mochikoro from \"./puzzle-50-data/mochikoro\";\nimport Nurikabe from \"./puzzle-50-data/nurikabe\";\nimport Slitherlink from \"./puzzle-50-data/slitherlink\";\nimport Snake from \"./puzzle-50-data/snake\";\nimport Tasquare from \"./puzzle-50-data/tasquare\";\nimport YinYang from \"./puzzle-50-data/yinyang\";\n\nimport Neighbors from \"./puzzle-50-data/neighbors\";\nimport RowColumn from \"./puzzle-50-data/rowcolumn\";\nimport Visions from \"./puzzle-50-data/visions\";\nimport Areas from \"./puzzle-50-data/areas\";\n\nimport Single from \"./puzzle-50-data/single\";\nimport Ones from \"./puzzle-50-data/ones\";\n// import Fives from \"./puzzle-50-data/fives\";\nimport Rectangles from \"./puzzle-50-data/rectangles\";\n// import NarrowRectangles from \"./puzzle-50-data/narrowrectangles\";\n// import OutsideRectangles from \"./puzzle-50-data/outsiderectangles\";\nimport Squares from \"./puzzle-50-data/squares\";\nimport TwoSnakes from \"./puzzle-50-data/twosnakes\";\n\nimport TouchingPaths from \"./puzzle-50-data/touchingpaths\";\nimport ConnectedVision from \"./puzzle-50-data/connectedvision\";\nimport RectangleAreas from \"./puzzle-50-data/rectangleareas\";\n\nimport Final from \"./puzzle-50-data/final\";\n\nconst shuffle = <T>(a: T[]) => {\n  const array = a.slice();\n  for (let i = array.length - 1; i > 0; i--) {\n    const j = Math.floor(Math.random() * (i + 1));\n    [array[i], array[j]] = [array[j], array[i]];\n  }\n  return array;\n};\n\nconst makePuzzle50Spec = (\n  INFO: {\n    global_constraint: number[][];\n    puzzles: {\n      clues: number[][];\n      answer: boolean[][];\n    }[];\n  },\n  showSolution: boolean,\n  isInvulnerable: boolean\n): GameSpecServerFragment => ({\n  ...Puzzle50CommonSpec,\n  beforeNewGame: (ctx) => {\n    // TODO: seed?\n    // choose a puzzle nondeterministically\n    const puzzleId = Math.floor(Math.random() * INFO.puzzles.length);\n    ctx.engine.initExtraState({\n      globalConstraints: INFO.global_constraint.map((a) => ({\n        id: `puzzle-50-global-${a[0]}`,\n        health: a[1],\n      })),\n      // shuffle clues\n      clues: shuffle(\n        INFO.puzzles[puzzleId].clues.map((a) => ({\n          id: `puzzle-50-local-${a[0]}`,\n          health: a[1],\n          row: a[2],\n          column: a[3],\n        }))\n      ),\n      cluesPlaced: 0,\n      answer: INFO.puzzles[puzzleId].answer,\n      showSolution: showSolution,\n      passed: false,\n      isInvulnerable: isInvulnerable,\n    } as Puzzle50ExtraState);\n  },\n});\n\nconst makePuzzle50FinalSpec = (\n  INFO: {\n    puzzles: {\n      global_constraint: number[][];\n      clues: number[][];\n      answer: boolean[][];\n    }[];\n  },\n  showSolution: boolean,\n  isInvulnerable: boolean\n): GameSpecServerFragment => ({\n  ...Puzzle50CommonSpec,\n  beforeNewGame: (ctx) => {\n    // TODO: seed?\n    // choose a puzzle nondeterministically\n    const puzzleId = Math.floor(Math.random() * INFO.puzzles.length);\n    ctx.engine.initExtraState({\n      globalConstraints: INFO.puzzles[puzzleId].global_constraint.map((a) => ({\n        id: `puzzle-50-global-${a[0]}`,\n        health: a[1],\n      })),\n      // shuffle clues\n      clues: shuffle(\n        INFO.puzzles[puzzleId].clues.map((a) => ({\n          id: `puzzle-50-local-${a[0]}`,\n          health: a[1],\n          row: a[2],\n          column: a[3],\n        }))\n      ),\n      cluesPlaced: 0,\n      answer: INFO.puzzles[puzzleId].answer,\n      showSolution: showSolution,\n      passed: false,\n      isInvulnerable: isInvulnerable,\n    } as Puzzle50ExtraState);\n  },\n});\n\n// Stage 1\nexport const Puzzle50_1Spec = makePuzzle50Spec(Minesweeper, true, true);\nexport const Puzzle50_2Spec = makePuzzle50Spec(YinYang, true, true);\nexport const Puzzle50_3Spec = makePuzzle50Spec(LightAndShadow, true, true);\nexport const Puzzle50_4Spec = makePuzzle50Spec(Nurikabe, true, true);\nexport const Puzzle50_5Spec = makePuzzle50Spec(Kurotto, true, true);\nexport const Puzzle50_6Spec = makePuzzle50Spec(Kurodoko, true, true);\nexport const Puzzle50_7Spec = makePuzzle50Spec(Cave, true, true);\nexport const Puzzle50_8Spec = makePuzzle50Spec(Slitherlink, true, true);\nexport const Puzzle50_9Spec = makePuzzle50Spec(CanalView, true, true);\nexport const Puzzle50_10Spec = makePuzzle50Spec(Snake, true, true);\nexport const Puzzle50_11Spec = makePuzzle50Spec(Mochikoro, true, true);\nexport const Puzzle50_12Spec = makePuzzle50Spec(Tasquare, true, true);\n\n// Stage 2A\nexport const Puzzle50_13Spec = makePuzzle50Spec(Neighbors, false, true);\nexport const Puzzle50_14Spec = makePuzzle50Spec(RowColumn, false, true);\nexport const Puzzle50_15Spec = makePuzzle50Spec(Visions, false, true);\nexport const Puzzle50_16Spec = makePuzzle50Spec(Areas, false, true);\n\n// Stage 2B\nexport const Puzzle50_17Spec = makePuzzle50Spec(Single, false, true);\nexport const Puzzle50_18Spec = makePuzzle50Spec(Ones, false, true);\n// export const Puzzle50_19Spec = makePuzzle50Spec(Fives, false, true);\nexport const Puzzle50_19Spec = makePuzzle50Spec(Rectangles, false, true);\n// export const Puzzle50_21Spec = makePuzzle50Spec(NarrowRectangles, false, true);\n// export const Puzzle50_22Spec = makePuzzle50Spec(OutsideRectangles, false, true);\nexport const Puzzle50_20Spec = makePuzzle50Spec(Squares, false, true);\nexport const Puzzle50_21Spec = makePuzzle50Spec(TwoSnakes, false, true);\n\n// Stage 3\nexport const Puzzle50_22Spec = makePuzzle50Spec(TouchingPaths, false, false);\nexport const Puzzle50_23Spec = makePuzzle50Spec(ConnectedVision, false, false);\nexport const Puzzle50_24Spec = makePuzzle50Spec(RectangleAreas, false, false);\n\n// Final\nexport const Puzzle50_FinalSpec = makePuzzle50FinalSpec(Final, false, false);\n","export const OLYMPIC_WINTER_SPORTS = new Set([\n  \"BIATHLON\",\n  \"BOBSLED\",\n  \"CURLING\",\n  \"LUGE\",\n  \"LUGING\",\n  \"SKATING\",\n  \"SKELETON\",\n  \"SKIING\",\n]);\n\nexport const FIRST_151_POKEMON = new Set([\n  \"IVYSAUR\",\n  \"VENUSAUR\",\n  \"SQUIRTLE\",\n  \"CATERPIE\",\n  \"METAPOD\",\n  \"WEEDLE\",\n  \"KAKUNA\",\n  \"BEEDRILL\",\n  \"PIDGEY\",\n  \"PIDGEOT\",\n  \"RATTATA\",\n  \"RATICATE\",\n  \"SPEAROW\",\n  \"FEAROW\",\n  \"EKANS\",\n  \"ARBOK\",\n  \"PIKACHU\",\n  \"RAICHU\",\n  \"NIDORAN\",\n  \"NIDORINA\",\n  \"NIDORAN\",\n  \"NIDORINO\",\n  \"NIDOKING\",\n  \"CLEFAIRY\",\n  \"CLEFABLE\",\n  \"VULPIX\",\n  \"ZUBAT\",\n  \"GOLBAT\",\n  \"ODDISH\",\n  \"GLOOM\",\n  \"PARAS\",\n  \"PARASECT\",\n  \"VENONAT\",\n  \"VENOMOTH\",\n  \"DIGLETT\",\n  \"DUGTRIO\",\n  \"MEOWTH\",\n  \"PERSIAN\",\n  \"PSYDUCK\",\n  \"GOLDUCK\",\n  \"MANKEY\",\n  \"PRIMEAPE\",\n  \"ARCANINE\",\n  \"POLIWAG\",\n  \"ABRA\",\n  \"KADABRA\",\n  \"ALAKAZAM\",\n  \"MACHOP\",\n  \"MACHOKE\",\n  \"MACHAMP\",\n  \"GEODUDE\",\n  \"GRAVELER\",\n  \"GOLEM\",\n  \"PONYTA\",\n  \"RAPIDASH\",\n  \"SLOWPOKE\",\n  \"SLOWBRO\",\n  \"MAGNETON\",\n  \"DODUO\",\n  \"DODRIO\",\n  \"SEEL\",\n  \"DEWGONG\",\n  \"GRIMER\",\n  \"MUK\",\n  \"SHELLDER\",\n  \"CLOYSTER\",\n  \"GASTLY\",\n  \"HAUNTER\",\n  \"GENGAR\",\n  \"ONIX\",\n  \"DROWZEE\",\n  \"HYPNO\",\n  \"KRABBY\",\n  \"KINGLER\",\n  \"VOLTORB\",\n  \"CUBONE\",\n  \"MAROWAK\",\n  \"KOFFING\",\n  \"WEEZING\",\n  \"RHYHORN\",\n  \"RHYDON\",\n  \"CHANSEY\",\n  \"TANGELA\",\n  \"HORSEA\",\n  \"SEADRA\",\n  \"GOLDEEN\",\n  \"SEAKING\",\n  \"STARYU\",\n  \"STARMIE\",\n  \"MRMIME\",\n  \"SCYTHER\",\n  \"JYNX\",\n  \"MAGMAR\",\n  \"PINSIR\",\n  \"TAUROS\",\n  \"MAGIKARP\",\n  \"GYARADOS\",\n  \"LAPRAS\",\n  \"DITTO\",\n  \"EEVEE\",\n  \"VAPOREON\",\n  \"JOLTEON\",\n  \"FLAREON\",\n  \"PORYGON\",\n  \"OMANYTE\",\n  \"OMASTAR\",\n  \"KABUTO\",\n  \"KABUTOPS\",\n  \"SNORLAX\",\n  \"ARTICUNO\",\n  \"ZAPDOS\",\n  \"MOLTRES\",\n  \"DRATINI\",\n  \"MEWTWO\",\n  \"MEW\",\n]);\n\nexport const COLORS = new Set([\n  \"AERO\",\n  \"ALIZARIN\",\n  \"ALMOND\",\n  \"AMAZON\",\n  \"AMBER\",\n  \"AMETHYST\",\n  \"APRICOT\",\n  \"AQUA\",\n  \"AUREOLIN\",\n  \"AZURE\",\n  \"BEAVER\",\n  \"BEIGE\",\n  \"BISQUE\",\n  \"BISTRE\",\n  \"BLACK\",\n  \"BLUE\",\n  \"BLUSH\",\n  \"BOLE\",\n  \"BONE\",\n  \"BRONZE\",\n  \"BROWN\",\n  \"BUFF\",\n  \"BURGUNDY\",\n  \"CAFNOIR\",\n  \"CAMEL\",\n  \"CANARY\",\n  \"CARDINAL\",\n  \"CARMINE\",\n  \"CATAWBA\",\n  \"CELADON\",\n  \"CELESTE\",\n  \"CERISE\",\n  \"CERULEAN\",\n  \"CHARCOAL\",\n  \"CHESTNUT\",\n  \"CINNABAR\",\n  \"CITRINE\",\n  \"CITRON\",\n  \"CLARET\",\n  \"COFFEE\",\n  \"COOLGREY\",\n  \"COPPER\",\n  \"CORAL\",\n  \"CORDOVAN\",\n  \"CORN\",\n  \"CREAM\",\n  \"CRIMSON\",\n  \"CYAN\",\n  \"CYCLAMEN\",\n  \"DENIM\",\n  \"DESERT\",\n  \"EBONY\",\n  \"ECRU\",\n  \"EGGPLANT\",\n  \"EGGSHELL\",\n  \"EMERALD\",\n  \"EMINENCE\",\n  \"ERIN\",\n  \"FALLOW\",\n  \"FANDANGO\",\n  \"FAWN\",\n  \"FINN\",\n  \"FLAME\",\n  \"FLAX\",\n  \"FLIRT\",\n  \"FUCHSIA\",\n  \"FULVOUS\",\n  \"GAMBOGE\",\n  \"GLAUCOUS\",\n  \"GOLD\",\n  \"GRAY\",\n  \"GREEN\",\n  \"GUNMETAL\",\n  \"HEATWAVE\",\n  \"ICEBERG\",\n  \"INCHWORM\",\n  \"INDIGO\",\n  \"IVORY\",\n  \"JASMINE\",\n  \"JET\",\n  \"JONQUIL\",\n  \"JUNEBUD\",\n  \"KEPPEL\",\n  \"KHAKI\",\n  \"KOBE\",\n  \"KOBI\",\n  \"LAVA\",\n  \"LAVENDER\",\n  \"LEMON\",\n  \"LIBERTY\",\n  \"LILAC\",\n  \"LIME\",\n  \"LINEN\",\n  \"LION\",\n  \"LIVER\",\n  \"LIVID\",\n  \"MAGENTA\",\n  \"MAGNOLIA\",\n  \"MAHOGANY\",\n  \"MAIZE\",\n  \"MANATEE\",\n  \"MANDARIN\",\n  \"MANGO\",\n  \"MANTIS\",\n  \"MAROON\",\n  \"MAUVE\",\n  \"MELON\",\n  \"MIDNIGHT\",\n  \"MINDARO\",\n  \"MING\",\n  \"MINT\",\n  \"MONALISA\",\n  \"MULBERRY\",\n  \"MUSTARD\",\n  \"MYSTIC\",\n  \"NEWCAR\",\n  \"NICKEL\",\n  \"NYANZA\",\n  \"OCHRE\",\n  \"OLDLACE\",\n  \"OLIVE\",\n  \"OLIVINE\",\n  \"ONYX\",\n  \"OPAL\",\n  \"ORANGE\",\n  \"ORCHID\",\n  \"OXBLOOD\",\n  \"PAUA\",\n  \"PEACH\",\n  \"PEAR\",\n  \"PHLOX\",\n  \"PINETREE\",\n  \"PINK\",\n  \"PLATINUM\",\n  \"PLUM\",\n  \"POPSTAR\",\n  \"PRUNE\",\n  \"PUCE\",\n  \"PUMPKIN\",\n  \"PURPLE\",\n  \"RAJAH\",\n  \"RED\",\n  \"RHYTHM\",\n  \"ROCKET\",\n  \"ROSE\",\n  \"RUBER\",\n  \"RUBY\",\n  \"RUFOUS\",\n  \"RUSSET\",\n  \"RUST\",\n  \"SAFFRON\",\n  \"SAGE\",\n  \"SALMON\",\n  \"SAND\",\n  \"SAPPHIRE\",\n  \"SCARLET\",\n  \"SEANCE\",\n  \"SEASHELL\",\n  \"SECRET\",\n  \"SEPIA\",\n  \"SHADOW\",\n  \"SIENNA\",\n  \"SILVER\",\n  \"SINOPIA\",\n  \"SMITTEN\",\n  \"SNOW\",\n  \"STRAW\",\n  \"SUNGLOW\",\n  \"SUNRAY\",\n  \"SUNSET\",\n  \"TAN\",\n  \"TAUPE\",\n  \"TAWNY\",\n  \"TEAL\",\n  \"TENNE\",\n  \"THISTLE\",\n  \"TOMATO\",\n  \"TUSCAN\",\n  \"UMBER\",\n  \"VANILLA\",\n  \"VERONICA\",\n  \"VIOLET\",\n  \"VIRIDIAN\",\n  \"VOLT\",\n  \"WHEAT\",\n  \"WHITE\",\n  \"WINE\",\n  \"WISTERIA\",\n  \"XANADU\",\n  \"XANTHIC\",\n  \"XANTHOUS\",\n  \"YELLOW\",\n  \"ZAFFRE\",\n  \"ZOMP\",\n]);\n\nexport const FRUITS = new Set([\n  \"ABIU\",\n  \"ACAI\",\n  \"ACEROLA\",\n  \"ACKEE\",\n  \"AKEBI\",\n  \"APPLE\",\n  \"APRICOT\",\n  \"ARATILES\",\n  \"ARAZA\",\n  \"ATIS\",\n  \"AVOCADO\",\n  \"BANANA\",\n  \"BILBERRY\",\n  \"BRINJAL\",\n  \"CACAO\",\n  \"CANISTEL\",\n  \"CATMON\",\n  \"CEMPEDAK\",\n  \"CHERRY\",\n  \"COCONUT\",\n  \"CUCUMBER\",\n  \"CURRANT\",\n  \"DAMSON\",\n  \"DATE\",\n  \"DURIAN\",\n  \"EGGFRUIT\",\n  \"EGGPLANT\",\n  \"FEIJOA\",\n  \"FIG\",\n  \"GACFRUIT\",\n  \"GRAPE\",\n  \"GUAVA\",\n  \"GUYABANO\",\n  \"HONEYDEW\",\n  \"JALAPENO\",\n  \"JAMBUL\",\n  \"JUJUBE\",\n  \"KIWANO\",\n  \"KUMQUAT\",\n  \"LANZONES\",\n  \"LEMON\",\n  \"LIME\",\n  \"LONGAN\",\n  \"LOQUAT\",\n  \"LULO\",\n  \"LYCHEE\",\n  \"MACOPA\",\n  \"MANGO\",\n  \"MEDLAR\",\n  \"MELON\",\n  \"MULBERRY\",\n  \"NANCE\",\n  \"OLIVE\",\n  \"ORANGE\",\n  \"PAPAYA\",\n  \"PAWPAW\",\n  \"PEA\",\n  \"PITAYA\",\n  \"PLANTAIN\",\n  \"PLINIA\",\n  \"PLUM\",\n  \"PLUOT\",\n  \"POMELO\",\n  \"PRUNE\",\n  \"PUMPKIN\",\n  \"QUINCE\",\n  \"RAISIN\",\n  \"RAMBUTAN\",\n  \"SALAK\",\n  \"SAMPALOC\",\n  \"SANTOL\",\n  \"SAPOTE\",\n  \"SATSUMA\",\n  \"SOURSOP\",\n  \"SQUASH\",\n  \"TAMARIND\",\n  \"TAMBIS\",\n  \"TANGELO\",\n  \"TAYBERRY\",\n  \"TOMATO\",\n  \"XIMENIA\",\n  \"YUZU\",\n  \"ZUCCHINI\",\n]);\n\nexport const DAY_OF_WEEK_ABBREVIATIONS = new Set([\n  \"MON\",\n  \"TUE\",\n  \"WED\",\n  \"THU\",\n  \"FRI\",\n  \"SAT\",\n  \"SUN\",\n]);\n\nexport const IATA_AIRPORT_CODES_FLORIDA = new Set([\n  \"DAB\",\n  \"FLL\",\n  \"RSW\",\n  \"VPS\",\n  \"GNV\",\n  \"JAX\",\n  \"EYW\",\n  \"MLB\",\n  \"MIA\",\n  \"MCO\",\n  \"ECP\",\n  \"PNS\",\n  \"PGD\",\n  \"SFB\",\n  \"SRQ\",\n  \"PIE\",\n  \"TLH\",\n  \"TPA\",\n  \"PBI\",\n  \"FXE\",\n  \"VRB\",\n  \"BCT\",\n  \"CLW\",\n  \"FMY\",\n  \"HWO\",\n  \"CRG\",\n  \"ISM\",\n  \"LAL\",\n  \"TMB\",\n  \"OPF\",\n  \"ORL\",\n  \"SPG\",\n  \"TPF\",\n  \"VNC\",\n  \"LNA\",\n  \"AAF\",\n  \"AVO\",\n  \"BOW\",\n  \"CDK\",\n  \"CEW\",\n  \"CTY\",\n  \"DSI\",\n  \"FPR\",\n  \"IMM\",\n  \"NZC\",\n  \"LCQ\",\n  \"LEE\",\n  \"MTH\",\n  \"MRK\",\n  \"COI\",\n  \"TNT\",\n  \"MPB\",\n  \"APF\",\n  \"OCF\",\n  \"OBE\",\n  \"PHK\",\n  \"FPY\",\n  \"PPM\",\n  \"SEF\",\n  \"UST\",\n  \"SUA\",\n  \"TIX\",\n  \"GIF\",\n  \"ZPH\",\n  \"OCA\",\n  \"COF\",\n  \"EGI\",\n  \"HST\",\n  \"NIP\",\n  \"NEN\",\n  \"NQX\",\n  \"NRB\",\n  \"NSE\",\n  \"PAM\",\n  \"NPA\",\n  \"NUN\",\n  \"MCF\",\n  \"VPS\",\n]);\n\nexport const NFL_TEAM_NAMES = new Set([\n  \"BILLS\",\n  \"DOLPHINS\",\n  \"PATRIOTS\",\n  \"JETS\",\n  \"RAVENS\",\n  \"BENGALS\",\n  \"BROWNS\",\n  \"STEELERS\",\n  \"TEXANS\",\n  \"COLTS\",\n  \"JAGUARS\",\n  \"TITANS\",\n  \"BRONCOS\",\n  \"CHIEFS\",\n  \"RAIDERS\",\n  \"CHARGERS\",\n  \"COWBOYS\",\n  \"GIANTS\",\n  \"EAGLES\",\n  \"BEARS\",\n  \"LIONS\",\n  \"PACKERS\",\n  \"VIKINGS\",\n  \"FALCONS\",\n  \"PANTHERS\",\n  \"SAINTS\",\n  \"RAMS\",\n  \"SEAHAWKS\",\n]);\n\nexport const CURRENCY_CODES = new Set([\n  \"AFN\",\n  \"ALL\",\n  \"DZD\",\n  \"USD\",\n  \"EUR\",\n  \"AOA\",\n  \"XCD\",\n  \"XCD\",\n  \"ARS\",\n  \"AMD\",\n  \"AWG\",\n  \"AUD\",\n  \"EUR\",\n  \"AZN\",\n  \"BSD\",\n  \"BHD\",\n  \"BDT\",\n  \"BBD\",\n  \"BYN\",\n  \"EUR\",\n  \"BZD\",\n  \"XOF\",\n  \"BMD\",\n  \"BTN\",\n  \"INR\",\n  \"BOB\",\n  \"BOV\",\n  \"USD\",\n  \"BAM\",\n  \"BWP\",\n  \"NOK\",\n  \"BRL\",\n  \"USD\",\n  \"BND\",\n  \"BGN\",\n  \"XOF\",\n  \"BIF\",\n  \"CVE\",\n  \"KHR\",\n  \"XAF\",\n  \"CAD\",\n  \"KYD\",\n  \"XAF\",\n  \"XAF\",\n  \"CLF\",\n  \"CLP\",\n  \"CNY\",\n  \"AUD\",\n  \"AUD\",\n  \"COP\",\n  \"COU\",\n  \"KMF\",\n  \"CDF\",\n  \"XAF\",\n  \"NZD\",\n  \"CRC\",\n  \"HRK\",\n  \"CUC\",\n  \"CUP\",\n  \"ANG\",\n  \"EUR\",\n  \"CZK\",\n  \"XOF\",\n  \"DKK\",\n  \"DJF\",\n  \"XCD\",\n  \"DOP\",\n  \"USD\",\n  \"EGP\",\n  \"SVC\",\n  \"USD\",\n  \"XAF\",\n  \"ERN\",\n  \"EUR\",\n  \"ETB\",\n  \"EUR\",\n  \"FKP\",\n  \"DKK\",\n  \"FJD\",\n  \"EUR\",\n  \"EUR\",\n  \"EUR\",\n  \"XPF\",\n  \"EUR\",\n  \"XAF\",\n  \"GMD\",\n  \"GEL\",\n  \"EUR\",\n  \"GHS\",\n  \"GIP\",\n  \"EUR\",\n  \"DKK\",\n  \"XCD\",\n  \"EUR\",\n  \"USD\",\n  \"GTQ\",\n  \"GBP\",\n  \"GNF\",\n  \"XOF\",\n  \"GYD\",\n  \"HTG\",\n  \"USD\",\n  \"AUD\",\n  \"EUR\",\n  \"HNL\",\n  \"HKD\",\n  \"HUF\",\n  \"ISK\",\n  \"INR\",\n  \"IDR\",\n  \"XDR\",\n  \"IRR\",\n  \"IQD\",\n  \"EUR\",\n  \"GBP\",\n  \"ILS\",\n  \"EUR\",\n  \"JMD\",\n  \"JPY\",\n  \"GBP\",\n  \"JOD\",\n  \"KZT\",\n  \"KES\",\n  \"AUD\",\n  \"KPW\",\n  \"KRW\",\n  \"KWD\",\n  \"KGS\",\n  \"LAK\",\n  \"EUR\",\n  \"LBP\",\n  \"LSL\",\n  \"ZAR\",\n  \"LRD\",\n  \"LYD\",\n  \"CHF\",\n  \"EUR\",\n  \"EUR\",\n  \"MOP\",\n  \"MGA\",\n  \"MWK\",\n  \"MYR\",\n  \"MVR\",\n  \"XOF\",\n  \"EUR\",\n  \"USD\",\n  \"EUR\",\n  \"MRU\",\n  \"MUR\",\n  \"EUR\",\n  \"XUA\",\n  \"MXN\",\n  \"MXV\",\n  \"USD\",\n  \"MDL\",\n  \"EUR\",\n  \"MNT\",\n  \"EUR\",\n  \"XCD\",\n  \"MAD\",\n  \"MZN\",\n  \"MMK\",\n  \"NAD\",\n  \"ZAR\",\n  \"AUD\",\n  \"NPR\",\n  \"EUR\",\n  \"XPF\",\n  \"NZD\",\n  \"NIO\",\n  \"XOF\",\n  \"NGN\",\n  \"NZD\",\n  \"AUD\",\n  \"USD\",\n  \"NOK\",\n  \"OMR\",\n  \"PKR\",\n  \"USD\",\n  \"PAB\",\n  \"USD\",\n  \"PGK\",\n  \"PYG\",\n  \"PEN\",\n  \"PHP\",\n  \"NZD\",\n  \"PLN\",\n  \"EUR\",\n  \"USD\",\n  \"QAR\",\n  \"MKD\",\n  \"RON\",\n  \"RUB\",\n  \"RWF\",\n  \"EUR\",\n  \"EUR\",\n  \"SHP\",\n  \"XCD\",\n  \"XCD\",\n  \"EUR\",\n  \"EUR\",\n  \"XCD\",\n  \"WST\",\n  \"EUR\",\n  \"STN\",\n  \"SAR\",\n  \"XOF\",\n  \"RSD\",\n  \"SCR\",\n  \"SLE\",\n  \"SGD\",\n  \"ANG\",\n  \"XSU\",\n  \"EUR\",\n  \"EUR\",\n  \"SBD\",\n  \"SOS\",\n  \"ZAR\",\n  \"SSP\",\n  \"EUR\",\n  \"LKR\",\n  \"SDG\",\n  \"SRD\",\n  \"NOK\",\n  \"SZL\",\n  \"SEK\",\n  \"CHE\",\n  \"CHF\",\n  \"CHW\",\n  \"SYP\",\n  \"TWD\",\n  \"TJS\",\n  \"TZS\",\n  \"THB\",\n  \"USD\",\n  \"XOF\",\n  \"NZD\",\n  \"TOP\",\n  \"TTD\",\n  \"TND\",\n  \"TRY\",\n  \"TMT\",\n  \"USD\",\n  \"AUD\",\n  \"UGX\",\n  \"UAH\",\n  \"AED\",\n  \"GBP\",\n  \"USD\",\n  \"USD\",\n  \"USN\",\n  \"UYI\",\n  \"UYU\",\n  \"UZS\",\n  \"VUV\",\n  \"VEF\",\n  \"VED\",\n  \"VND\",\n  \"USD\",\n  \"USD\",\n  \"XPF\",\n  \"MAD\",\n  \"YER\",\n  \"ZMW\",\n  \"ZWL\",\n  \"EUR\",\n]);\n\nexport const SYNONYMS_FOR_TRICKED = new Set([\n  \"BEGUILED\",\n  \"BILKED\",\n  \"BURNED\",\n  \"CHEATED\",\n  \"CONFUSED\",\n  \"CONNED\",\n  \"DECEIVED\",\n  \"DELUDED\",\n  \"DUPED\",\n  \"FINESSED\",\n  \"FOOLED\",\n  \"HAD\",\n  \"MISLED\",\n  \"MISTAKEN\",\n  \"SCAMMED\",\n  \"SWINDLED\",\n  \"TAKENIN\",\n  \"TOOKIN\",\n  \"WRONGED\",\n]);\n\n// Note: any number will contain one of these as a substring.\nexport const ONES_DIGITS: [string, number][] = [\n  [\"ONE\", 1],\n  [\"TWO\", 2],\n  [\"THREE\", 3],\n  [\"FOUR\", 4],\n  [\"FIVE\", 5],\n  [\"SIX\", 6],\n  [\"SEVEN\", 7],\n  [\"EIGHT\", 8],\n  [\"NINE\", 9],\n];\n\nexport const TENS_DIGITS: [string, number][] = [\n  [\"TWENTY\", 20],\n  [\"THIRTY\", 30],\n  [\"FORTY\", 40],\n  [\"FIFTY\", 50],\n  [\"SIXTY\", 60],\n  [\"SEVENTY\", 70],\n  [\"EIGHTY\", 80],\n  [\"NINETY\", 90],\n];\n\nexport const STANDALONE_NUMBERS: [string, number][] = [\n  [\"ZERO\", 0],\n  [\"TEN\", 10],\n  [\"ELEVEN\", 11],\n  [\"TWELVE\", 12],\n  [\"THIRTEEN\", 13],\n  [\"FOURTEEN\", 14],\n  [\"FIFTEEN\", 15],\n  [\"SIXTEEN\", 16],\n  [\"SEVENTEEN\", 17],\n  [\"EIGHTEEN\", 18],\n  [\"NINETEEN\", 19],\n  // These are too long for any concatenations to be used in the puzzle.\n  [\"HUNDRED\", 100],\n  [\"THOUSAND\", 1000],\n  [\"MILLION\", 1000000],\n  [\"BILLION\", 1000000000],\n  [\"TRILLION\", 1000000000000],\n];\n\nexport const WEAPONS = new Set([\n  \"ABUS\",\n  \"ACINACES\",\n  \"ADZE\",\n  \"AIKUCHI\",\n  \"AKINAKA\",\n  \"AKLYS\",\n  \"AKRAFENA\",\n  \"AMIRRE\",\n  \"ANELACE\",\n  \"ANGON\",\n  \"ANKUS\",\n  \"ARBALEST\",\n  \"ARBIR\",\n  \"ARBLAST\",\n  \"ARIT\",\n  \"ARQUEBUS\",\n  \"ARUVAL\",\n  \"ASA\",\n  \"ASSEGAI\",\n  \"ATGEIR\",\n  \"ATHAME\",\n  \"ATLATL\",\n  \"AXE\",\n  \"AYLLO\",\n  \"BADIK\",\n  \"BAGHNAKH\",\n  \"BAKATWA\",\n  \"BALARAO\",\n  \"BALISONG\",\n  \"BALLISTA\",\n  \"BANGKAW\",\n  \"BANGKUNG\",\n  \"BANYAL\",\n  \"BARDICHE\",\n  \"BARONG\",\n  \"BASELARD\",\n  \"BASILARD\",\n  \"BASILISK\",\n  \"BATANGAS\",\n  \"BATON\",\n  \"BAYONET\",\n  \"BHUJ\",\n  \"BICHUWA\",\n  \"BICUCO\",\n  \"BILL\",\n  \"BISENTO\",\n  \"BLADE\",\n  \"BLAKAS\",\n  \"BLOWPIPE\",\n  \"BLOWTUBE\",\n  \"BLUDGEON\",\n  \"BO\",\n  \"BRIQUET\",\n  \"CAESTUS\",\n  \"CAMBUK\",\n  \"CANE\",\n  \"CANNON\",\n  \"CARBINE\",\n  \"CATAPULT\",\n  \"CELURIT\",\n  \"CESTRUS\",\n  \"CESTUS\",\n  \"CETBANG\",\n  \"CHAIN\",\n  \"CHAKO\",\n  \"CHAPE\",\n  \"CHICOTTE\",\n  \"CHOKUTO\",\n  \"CHUI\",\n  \"CHURIKA\",\n  \"CIMPABA\",\n  \"CLAYMORE\",\n  \"CLUB\",\n  \"CORVO\",\n  \"CROP\",\n  \"CUDGEL\",\n  \"CULVERIN\",\n  \"CUTLASS\",\n  \"DAIKYU\",\n  \"DAO\",\n  \"DART\",\n  \"DHA\",\n  \"DIRK\",\n  \"DISACKN\",\n  \"DOLOIRE\",\n  \"DORY\",\n  \"DOTANUKI\",\n  \"DUSACK\",\n  \"DUSAGGE\",\n  \"DUSEGG\",\n  \"DUSSACK\",\n  \"DYSACK\",\n  \"EKU\",\n  \"EMEICI\",\n  \"EPEE\",\n  \"ESPADON\",\n  \"ESTOC\",\n  \"FACON\",\n  \"FALARICA\",\n  \"FALCATA\",\n  \"FALCHION\",\n  \"FALCONET\",\n  \"FALX\",\n  \"FAN\",\n  \"FARANGI\",\n  \"FAUCHARD\",\n  \"FIRANGI\",\n  \"FIREARM\",\n  \"FIRINGHA\",\n  \"FIRINGI\",\n  \"FLAIL\",\n  \"FLYSSA\",\n  \"FOIL\",\n  \"FORK\",\n  \"FU\",\n  \"GAIZAZ\",\n  \"GAR\",\n  \"GAUNTLET\",\n  \"GAYANG\",\n  \"GEIRR\",\n  \"GER\",\n  \"GINGAL\",\n  \"GINSU\",\n  \"GLADIUS\",\n  \"GLAIVE\",\n  \"GOLOK\",\n  \"GRENADE\",\n  \"GUISARME\",\n  \"GUN\",\n  \"HAKAPIK\",\n  \"HALADIE\",\n  \"HALBERD\",\n  \"HAMMER\",\n  \"HANKYU\",\n  \"HARPE\",\n  \"HARPI\",\n  \"HARPOON\",\n  \"HASTA\",\n  \"HATCHET\",\n  \"HOWITZER\",\n  \"HUDUNPAO\",\n  \"HUOCHE\",\n  \"HUOCHONG\",\n  \"HURLBAT\",\n  \"HWAL\",\n  \"HWANDO\",\n  \"IDA\",\n  \"IKLWA\",\n  \"IKUL\",\n  \"IMVUBU\",\n  \"ITAK\",\n  \"JAMBIA\",\n  \"JAMBIYA\",\n  \"JAMBYA\",\n  \"JANBIA\",\n  \"JANBIYA\",\n  \"JANJAL\",\n  \"JI\",\n  \"JO\",\n  \"JUTTE\",\n  \"KABEALA\",\n  \"KAIKEN\",\n  \"KALIS\",\n  \"KAMA\",\n  \"KAMPILAN\",\n  \"KARABELA\",\n  \"KARD\",\n  \"KASKARA\",\n  \"KASTANE\",\n  \"KASUYU\",\n  \"KATANA\",\n  \"KATAR\",\n  \"KERALA\",\n  \"KESTROS\",\n  \"KETERIYA\",\n  \"KHANDA\",\n  \"KHANJALI\",\n  \"KHANJAR\",\n  \"KHUKRI\",\n  \"KILA\",\n  \"KILIJ\",\n  \"KILONDA\",\n  \"KINJAL\",\n  \"KIRPAN\",\n  \"KLEWANG\",\n  \"KNIFE\",\n  \"KNOUT\",\n  \"KOPIS\",\n  \"KOTIATE\",\n  \"KRABI\",\n  \"KRIS\",\n  \"KUDI\",\n  \"KUJANG\",\n  \"KUKRI\",\n  \"KUNAI\",\n  \"KURBASH\",\n  \"LABRYS\",\n  \"LANCE\",\n  \"LANTAKA\",\n  \"LARIAT\",\n  \"LASSO\",\n  \"LATHI\",\n  \"LELA\",\n  \"LITHOS\",\n  \"LITUPA\",\n  \"LIWI\",\n  \"LUWUK\",\n  \"MACANA\",\n  \"MACE\",\n  \"MACHETE\",\n  \"MADUVU\",\n  \"MAHERA\",\n  \"MALLET\",\n  \"MAMBELE\",\n  \"MAMELUKE\",\n  \"MANDAU\",\n  \"MARU\",\n  \"MATTOCK\",\n  \"MERE\",\n  \"MESSER\",\n  \"MINE\",\n  \"MISSILE\",\n  \"MNIGOLO\",\n  \"MONSMEG\",\n  \"MOPLAH\",\n  \"MORTAR\",\n  \"MUBUCHAE\",\n  \"MUCHAN\",\n  \"MUSKET\",\n  \"MYRMEX\",\n  \"NAGAIKA\",\n  \"NAGAMAKI\",\n  \"NAGINATA\",\n  \"NAGYKA\",\n  \"NAIR\",\n  \"NANDAKA\",\n  \"NANGSUN\",\n  \"NAVAJA\",\n  \"NAYAR\",\n  \"NGAO\",\n  \"NIHONTO\",\n  \"NIMCHA\",\n  \"NINJATO\",\n  \"NOGAIKA\",\n  \"NSAPO\",\n  \"NUNCHAKU\",\n  \"NYEPEL\",\n  \"ODACHI\",\n  \"ONO\",\n  \"ONZIL\",\n  \"OTSUCHI\",\n  \"OTTA\",\n  \"OXYBELES\",\n  \"PALITAI\",\n  \"PALUPAD\",\n  \"PANABA\",\n  \"PANDAT\",\n  \"PARANG\",\n  \"PARANKI\",\n  \"PARTISAN\",\n  \"PATA\",\n  \"PATU\",\n  \"PELEKYS\",\n  \"PERNACH\",\n  \"PETRONEL\",\n  \"PEURAWOT\",\n  \"PHURBA\",\n  \"PICK\",\n  \"PIKE\",\n  \"PILUM\",\n  \"PINUTI\",\n  \"PIRAH\",\n  \"PIRANGI\",\n  \"PIRANKI\",\n  \"PISTOL\",\n  \"PLUMBATA\",\n  \"POIGNAL\",\n  \"POLEARM\",\n  \"POTDEFER\",\n  \"PRANGA\",\n  \"PRANGI\",\n  \"PRANGU\",\n  \"PRANKI\",\n  \"PRANKU\",\n  \"PUGIO\",\n  \"PULWAR\",\n  \"PUNAL\",\n  \"PUNYAL\",\n  \"PUUKKO\",\n  \"QAMA\",\n  \"QIANG\",\n  \"QUAMA\",\n  \"RABAULD\",\n  \"RAM\",\n  \"RANSEUR\",\n  \"RAPIER\",\n  \"RAWCON\",\n  \"RESOLZA\",\n  \"REVOLVER\",\n  \"RIBAULT\",\n  \"RICASSO\",\n  \"RIFLE\",\n  \"ROCKET\",\n  \"ROMFEA\",\n  \"ROMPHEA\",\n  \"ROPE\",\n  \"RUDUS\",\n  \"RUNGU\",\n  \"RUNKA\",\n  \"SABER\",\n  \"SABRE\",\n  \"SAI\",\n  \"SAKER\",\n  \"SARISSA\",\n  \"SCHNEPF\",\n  \"SCIMITAR\",\n  \"SCYTHE\",\n  \"SEAX\",\n  \"SEME\",\n  \"SENGESE\",\n  \"SFERE\",\n  \"SHAMSHIR\",\n  \"SHIV\",\n  \"SHOTEL\",\n  \"SHOUM\",\n  \"SHUCKRA\",\n  \"SHURIKEN\",\n  \"SIBAT\",\n  \"SICA\",\n  \"SICKLE\",\n  \"SIDEARM\",\n  \"SLAPJACK\",\n  \"SLING\",\n  \"SOVNYA\",\n  \"SPADE\",\n  \"SPADONE\",\n  \"SPADROON\",\n  \"SPATHA\",\n  \"SPEAR\",\n  \"SPETUM\",\n  \"STAFF\",\n  \"STAVE\",\n  \"STILETTO\",\n  \"SUBURITO\",\n  \"SUMBLING\",\n  \"SURIK\",\n  \"SUWAIYA\",\n  \"SWORD\",\n  \"SZABLA\",\n  \"TABARZIN\",\n  \"TACHI\",\n  \"TAIAHA\",\n  \"TAKOBA\",\n  \"TALWAR\",\n  \"TASER\",\n  \"TEGHA\",\n  \"TEKKAN\",\n  \"TEKKO\",\n  \"TEKPI\",\n  \"TESAK\",\n  \"TOMAHAWK\",\n  \"TONFA\",\n  \"TONGI\",\n  \"TORADAR\",\n  \"TORADOR\",\n  \"TORPEDO\",\n  \"TRIDENT\",\n  \"TRUMBASH\",\n  \"TSURUGI\",\n  \"TUCK\",\n  \"TUMI\",\n  \"TUSECKN\",\n  \"ULFBERHT\",\n  \"ULU\",\n  \"URUMI\",\n  \"UURGA\",\n  \"VEL\",\n  \"VERUTUM\",\n  \"VEUGLAIR\",\n  \"VOULGE\",\n  \"WADDY\",\n  \"WEDUNG\",\n  \"WHIP\",\n  \"WOLDO\",\n  \"WOOMERA\",\n  \"XANADU\",\n  \"XIFOS\",\n  \"XIPHOS\",\n  \"XIXIA\",\n  \"YARI\",\n  \"YATAGAN\",\n  \"YAWARI\",\n  \"ZANBATO\",\n  \"ZAPPOZAP\",\n]);\n\nexport const OPTICAL_COMPONENTS = new Set([\n  \"ASPHERE\",\n  \"AXICON\",\n  \"DIFFUSER\",\n  \"ETALON\",\n  \"FILTER\",\n  \"GLASS\",\n  \"GRATE\",\n  \"GRATING\",\n  \"GRISM\",\n  \"ISOLATER\",\n  \"LENS\",\n  \"MIRROR\",\n  \"NULLER\",\n  \"PINHOLE\",\n  \"PRISM\",\n  \"QPLATE\",\n  \"RETICLE\",\n  \"SPLITTER\",\n  \"WINDOW\",\n]);\n\nexport const KENTUCKY_DERBY_WINNERS = new Set([\n  \"MAGE\",\n  \"JUSTIFY\",\n  \"NYQUIST\",\n  \"ORB\",\n  \"BIGBROWN\",\n  \"BARBARO\",\n  \"GIACOMO\",\n  \"GOFORGIN\",\n  \"SEAHERO\",\n  \"LILETEE\",\n  \"ALYSHEBA\",\n  \"SWALE\",\n  \"AFFIRMED\",\n  \"TOMYLEE\",\n  \"TIMTAM\",\n  \"NEEDLES\",\n  \"SWAPS\",\n  \"DARKSTAR\",\n  \"HILLGAIL\",\n  \"PONDER\",\n  \"CITATION\",\n  \"JETPILOT\",\n  \"ASSAULT\",\n  \"HOOPJR\",\n  \"PENSIVE\",\n  \"SHUTOUT\",\n  \"LAWRIN\",\n  \"OMAHA\",\n  \"WHISKERY\",\n  \"ZEV\",\n  \"MORVICH\",\n  \"REGRET\",\n  \"DONERAIL\",\n  \"WORTH\",\n  \"MERIDIAN\",\n  \"DONAU\",\n  \"PINKSTAR\",\n  \"SIRHUON\",\n  \"AGILE\",\n  \"ELWOOD\",\n  \"BABEHURD\",\n]);\n\nexport const SUMMER_OLYMPIC_SPORTS = new Set([\n  \"ARCHERY\",\n  \"BASEBALL\",\n  \"SOFTBALL\",\n  \"BOXING\",\n  \"BREAKING\",\n  \"CANOE\",\n  \"CANOEING\",\n  \"CYCLING\",\n  \"DIVING\",\n  \"FENCING\",\n  \"FOOTBALL\",\n  \"GOLF\",\n  \"HANDBALL\",\n  \"HOCKEY\",\n  \"JUDO\",\n  \"KARATE\",\n  \"ROWING\",\n  \"RUGBY\",\n  \"SAILING\",\n  \"SHOOTING\",\n  \"SURFING\",\n  \"SWIMMING\",\n  \"TENNIS\",\n]);\n\nexport const LEAGUE_OF_LEGENDS_CHAMPIONS = new Set([\n  \"AATROX\",\n  \"AHRI\",\n  \"AKALI\",\n  \"AKSHAN\",\n  \"ALISTAR\",\n  \"AMUMU\",\n  \"ANNIE\",\n  \"APHELIOS\",\n  \"ASHE\",\n  \"AZIR\",\n  \"BARD\",\n  \"BELVETH\",\n  \"BRAND\",\n  \"BRAUM\",\n  \"CAITLYN\",\n  \"CAMILLE\",\n  \"CHOGATH\",\n  \"CORKI\",\n  \"DARIUS\",\n  \"DIANA\",\n  \"DRAVEN\",\n  \"EKKO\",\n  \"ELISE\",\n  \"EVELYNN\",\n  \"EZREAL\",\n  \"FIORA\",\n  \"FIZZ\",\n  \"GALIO\",\n  \"GAREN\",\n  \"GNAR\",\n  \"GRAGAS\",\n  \"GRAVES\",\n  \"GWEN\",\n  \"HECARIM\",\n  \"ILLAOI\",\n  \"IRELIA\",\n  \"IVERN\",\n  \"JANNA\",\n  \"JAX\",\n  \"JAYCE\",\n  \"JHIN\",\n  \"JINX\",\n  \"KAISA\",\n  \"KALISTA\",\n  \"KARMA\",\n  \"KARTHUS\",\n  \"KASSADIN\",\n  \"KATARINA\",\n  \"KAYLE\",\n  \"KAYN\",\n  \"KENNEN\",\n  \"KHAZIX\",\n  \"KINDRED\",\n  \"KLED\",\n  \"KOGMAW\",\n  \"KSANTE\",\n  \"LEBLANC\",\n  \"LEESIN\",\n  \"LEONA\",\n  \"LILLIA\",\n  \"LUCIAN\",\n  \"LULU\",\n  \"LUX\",\n  \"MALPHITE\",\n  \"MALZAHAR\",\n  \"MAOKAI\",\n  \"MILIO\",\n  \"MORGANA\",\n  \"NAAFIRI\",\n  \"NAMI\",\n  \"NASUS\",\n  \"NAUTILUS\",\n  \"NEEKO\",\n  \"NIDALEE\",\n  \"NILAH\",\n  \"NOCTURNE\",\n  \"OLAF\",\n  \"ORIANNA\",\n  \"ORNN\",\n  \"PANTHEON\",\n  \"POPPY\",\n  \"PYKE\",\n  \"QIYANA\",\n  \"QUINN\",\n  \"RAKAN\",\n  \"RAMMUS\",\n  \"REKSAI\",\n  \"RELL\",\n  \"RENEKTON\",\n  \"RENGAR\",\n  \"RIVEN\",\n  \"RUMBLE\",\n  \"RYZE\",\n  \"SAMIRA\",\n  \"SEJUANI\",\n  \"SENNA\",\n  \"SETT\",\n  \"SHACO\",\n  \"SHEN\",\n  \"SHYVANA\",\n  \"SINGED\",\n  \"SION\",\n  \"SKARNER\",\n  \"SONA\",\n  \"SORAKA\",\n  \"SWAIN\",\n  \"SYLAS\",\n  \"SYNDRA\",\n  \"TALIYAH\",\n  \"TALON\",\n  \"TARIC\",\n  \"TEEMO\",\n  \"THRESH\",\n  \"TRISTANA\",\n  \"TRUNDLE\",\n  \"TWITCH\",\n  \"UDYR\",\n  \"URGOT\",\n  \"VARUS\",\n  \"VAYNE\",\n  \"VEIGAR\",\n  \"VELKOZ\",\n  \"VEX\",\n  \"VI\",\n  \"VLADIMIR\",\n  \"VOLIBEAR\",\n  \"WARWICK\",\n  \"WUKONG\",\n  \"XAYAH\",\n  \"XERATH\",\n  \"XINZHAO\",\n  \"YASUO\",\n  \"YONE\",\n  \"YORICK\",\n  \"YUUMI\",\n  \"ZAC\",\n  \"ZED\",\n  \"ZERI\",\n  \"ZIGGS\",\n  \"ZILEAN\",\n  \"ZOE\",\n  \"ZYRA\",\n]);\n\nexport const US_STATES = new Set([\n  \"ALABAMA\",\n  \"ALASKA\",\n  \"ARIZONA\",\n  \"ARKANSAS\",\n  \"CALIFORNIA\",\n  \"COLORADO\",\n  \"CONNECTICUT\",\n  \"DELAWARE\",\n  \"FLORIDA\",\n  \"GEORGIA\",\n  \"HAWAII\",\n  \"IDAHO\",\n  \"ILLINOIS\",\n  \"INDIANA\",\n  \"IOWA\",\n  \"KANSAS\",\n  \"KENTUCKY\",\n  \"LOUISIANA\",\n  \"MAINE\",\n  \"MARYLAND\",\n  \"MASSACHUSETTS\",\n  \"MICHIGAN\",\n  \"MINNESOTA\",\n  \"MISSISSIPPI\",\n  \"MISSOURI\",\n  \"MONTANA\",\n  \"NEBRASKA\",\n  \"NEVADA\",\n  \"NEWHAMPSHIRE\",\n  \"NEWJERSEY\",\n  \"NEWMEXICO\",\n  \"NEWYORK\",\n  \"NORTHCAROLINA\",\n  \"NORTHDAKOTA\",\n  \"OHIO\",\n  \"OKLAHOMA\",\n  \"OREGON\",\n  \"PENNSYLVANIA\",\n  \"RHODEISLAND\",\n  \"SOUTHCAROLINA\",\n  \"SOUTHDAKOTA\",\n  \"TENNESSEE\",\n  \"TEXAS\",\n  \"UTAH\",\n  \"VERMONT\",\n  \"VIRGINIA\",\n  \"WASHINGTON\",\n  \"WESTVIRGINIA\",\n  \"WISCONSIN\",\n  \"WYOMING\",\n]);\n\nexport const MONTHS = new Set([\n  \"JANUARY\",\n  \"FEBRUARY\",\n  \"MARCH\",\n  \"APRIL\",\n  \"MAY\",\n  \"JUNE\",\n  \"JULY\",\n  \"AUGUST\",\n  \"SEPTEMBER\",\n  \"OCTOBER\",\n  \"NOVEMBER\",\n  \"DECEMBER\",\n]);\n\nexport const TREES = new Set([\n  \"ACACIA\",\n  \"ALDER\",\n  \"ALMOND\",\n  \"APPLE\",\n  \"APRICOT\",\n  \"ARBUTUS\",\n  \"ARECA\",\n  \"ARGAN\",\n  \"ASH\",\n  \"ASPEN\",\n  \"AVOCADO\",\n  \"BALSA\",\n  \"BAMBOO\",\n  \"BANYAN\",\n  \"BAOBAB\",\n  \"BASSWOOD\",\n  \"BAY\",\n  \"BEADTREE\",\n  \"BEECH\",\n  \"BIRCH\",\n  \"BOOJUM\",\n  \"BUCKEYE\",\n  \"CACAO\",\n  \"CAMPHOR\",\n  \"CATALPA\",\n  \"CEDAR\",\n  \"CEIBA\",\n  \"CHERRY\",\n  \"CHESTNUT\",\n  \"CINCHONA\",\n  \"CINNAMON\",\n  \"CITRUS\",\n  \"COCONUT\",\n  \"COFFEE\",\n  \"CYCAD\",\n  \"CYPRESS\",\n  \"DODO\",\n  \"DOGWOOD\",\n  \"DURIAN\",\n  \"ELDER\",\n  \"ELM\",\n  \"EUCALYPT\",\n  \"EUCOMMIA\",\n  \"FIG\",\n  \"FIR\",\n  \"FOXGLOVE\",\n  \"GINKGO\",\n  \"GUAVA\",\n  \"GURJAN\",\n  \"HACKBERRY\",\n  \"HAWTHORN\",\n  \"HAZEL\",\n  \"HEMLOCK\",\n  \"HICKORY\",\n  \"HOLLY\",\n  \"HORNBEAM\",\n  \"IPE\",\n  \"IRONWOOD\",\n  \"JACARANDA\",\n  \"JOSHUA\",\n  \"JUJUBE\",\n  \"KALYNA\",\n  \"KAPOK\",\n  \"KAURI\",\n  \"KUMQUAT\",\n  \"LAPACHO\",\n  \"LARCH\",\n  \"LAUREL\",\n  \"LEMON\",\n  \"LIME\",\n  \"LINDEN\",\n  \"LYCHEE\",\n  \"MAGNOLIA\",\n  \"MAHOE\",\n  \"MAHOGANY\",\n  \"MANGO\",\n  \"MANGROVE\",\n  \"MAPLE\",\n  \"MIRO\",\n  \"MORINGA\",\n  \"MULBERRY\",\n  \"MYALL\",\n  \"MYRTLE\",\n  \"NARRA\",\n  \"NEEM\",\n  \"NUTMEG\",\n  \"OAK\",\n  \"OLIVE\",\n  \"ORANGE\",\n  \"ORCHID\",\n  \"PALM\",\n  \"PAPAYA\",\n  \"PAWPAW\",\n  \"PEACH\",\n  \"PEAR\",\n  \"PECAN\",\n  \"PEREPAT\",\n  \"PERSIMMON\",\n  \"PINE\",\n  \"PISTACHIO\",\n  \"PLANE\",\n  \"PLUM\",\n  \"POPLAR\",\n  \"REDWOOD\",\n  \"RIMU\",\n  \"ROWAN\",\n  \"RUBBER\",\n  \"SAKHUA\",\n  \"SAL\",\n  \"SARAI\",\n  \"SASSAFRAS\",\n  \"SEQUOIA\",\n  \"SHALA\",\n  \"SOURSOP\",\n  \"SPRUCE\",\n  \"STOPPER\",\n  \"SUGI\",\n  \"SUMAC\",\n  \"SWEETGUM\",\n  \"SYCAMORE\",\n  \"TAMARACK\",\n  \"TEA\",\n  \"THUJA\",\n  \"TOTARA\",\n  \"TULIP\",\n  \"TUPELO\",\n  \"ULLIRI\",\n  \"WALNUT\",\n  \"WILLOW\",\n  \"WINGNUT\",\n  \"YEW\",\n  \"YUCCA\",\n]);\n","import { Permanent, Player } from \"engine/types/game-state\";\nimport { GameSpecServerFragment } from \"engine/types/game-specs\";\nimport { Inspector } from \"engine/Inspector\";\nimport { ColorSymbol } from \"engine/types/card-data\";\nimport {\n  COLORS,\n  CURRENCY_CODES,\n  DAY_OF_WEEK_ABBREVIATIONS,\n  FIRST_151_POKEMON,\n  FRUITS,\n  IATA_AIRPORT_CODES_FLORIDA,\n  KENTUCKY_DERBY_WINNERS,\n  LEAGUE_OF_LEGENDS_CHAMPIONS,\n  MONTHS,\n  NFL_TEAM_NAMES,\n  OLYMPIC_WINTER_SPORTS,\n  ONES_DIGITS,\n  OPTICAL_COMPONENTS,\n  STANDALONE_NUMBERS,\n  SUMMER_OLYMPIC_SPORTS,\n  SYNONYMS_FOR_TRICKED,\n  TENS_DIGITS,\n  TREES,\n  US_STATES,\n  WEAPONS,\n} from \"./puzzle-51-server-data\";\nimport { CounterType } from \"engine/types/counters\";\nimport { EffectsDB, extractOptChoiceString } from \"engine/cards/card-effects\";\nimport { PUZZLE_51_CARDS } from \"./puzzle-51-shared\";\nimport {\n  PermanentEventHandlers,\n  PermanentEventType,\n} from \"engine/server-hooks\";\nimport { StepType } from \"engine/types/steps\";\nimport { AbilityType } from \"engine/types/effects\";\n\nconst AI_BASE_ID = \"bearhive\";\nconst BEEHIVE_ID = \"beehive\";\nconst LARVA_ID = \"larva\";\nconst NUM_STARTING_GEMS = 15;\nconst AI_CARD_IDS = [\n  \"luge-bear\", // 0\n  \"stufful-bear\", // 1\n  \"black-bear\", // 2\n  \"banana-bear\", // 3\n  \"sun-bear\", // 4\n  \"ord-bear\", // 5\n  \"bears-bear\", // 6\n  \"confused-bear\", // 7\n  \"eur-bear\", // 8\n  \"three-bear\", // 9\n  \"bludgeon-bear\", // 10\n  \"four-bear\", // 11\n  \"grism-bear\", // 12\n  \"assault-bear\", // 13\n  \"archery-bear\", // 14\n  \"oak-bear\", // 15\n  \"december-bear\", // 16\n  \"alabama-bear\", // 17\n  \"rammus-bear\", // 18\n];\nconst NUMBERS = ONES_DIGITS.concat(TENS_DIGITS).concat(STANDALONE_NUMBERS);\n\ntype Puzzle51ExtraState = {\n  firstNumber: undefined | number;\n  usedDraw: boolean;\n  usedSpecial: boolean;\n};\n\n/**\n * Returns all strings available by reading across or down. Blank grid spaces break strings.\n * All letters are in upper case.\n *\n * @param inspector\n * @returns\n */\nfunction getAllStrings(inspector: Inspector): Set<string> {\n  const rows = inspector.getNumRows();\n  const cols = inspector.getNumColumns();\n  const permanents = inspector.getAllPermanents();\n  const grid: (Permanent | undefined)[][] = [];\n  for (let r = 0; r < rows; r++) {\n    const row: (Permanent | undefined)[] = [];\n    for (let c = 0; c < cols; c++) {\n      row.push(undefined);\n    }\n    grid.push(row);\n  }\n  for (const p of permanents) {\n    grid[p.slot.row][p.slot.column] = p;\n  }\n  // Read across.\n  const res = new Set<string>();\n  for (let r = 0; r < rows; r++) {\n    let string = \"\";\n    for (let c = 0; c < cols; c++) {\n      const p = grid[r][c];\n      if (p === undefined || p.card.name === LARVA_ID) {\n        res.add(string);\n        string = \"\";\n      } else {\n        string += p.card.name?.charAt(0).toUpperCase();\n      }\n    }\n    // When you reach the end of the column, add whatever you have.\n    res.add(string);\n  }\n  // Read down.\n  for (let c = 0; c < cols; c++) {\n    let string = \"\";\n    for (let r = 0; r < rows; r++) {\n      const p = grid[r][c];\n      if (p === undefined || p.card.name === LARVA_ID) {\n        res.add(string);\n        string = \"\";\n      } else {\n        string += p.card.name?.charAt(0).toUpperCase();\n      }\n    }\n    // When you reach the end of the row, add whatever you have.\n    res.add(string);\n  }\n  return res;\n}\n\n/**\n * Returns true iff one of the items in shouldContain is contained within the grid (reading across or down, breaking at empty space).\n * Requires that all entries of shouldContain are in upper case.\n *\n * @param shouldContain The set of strings where we want to know if one of them is present on the board.\n * @param allStringsBeforeAnyDespawns The set of all strings that are present before any despawns.\n */\nfunction containsOneOf(\n  shouldContain: Set<string>,\n  allStringsBeforeAnyDespawns: Set<string>\n): boolean {\n  for (const string of allStringsBeforeAnyDespawns) {\n    for (const substring of shouldContain) {\n      if (string.includes(substring)) {\n        return true;\n      }\n    }\n  }\n  return false;\n}\n\nconst beeOrLarvaHandlers: PermanentEventHandlers = {\n  [PermanentEventType.CREATED]: (ev) => {\n    const { ctx, permanent } = ev;\n    ctx.engine.addCounter(permanent, { type: CounterType.CANNOT_CREATE });\n    ctx.engine.addCounter(permanent, { type: CounterType.CANNOT_ATTACK });\n    ctx.engine.addCounter(permanent, { type: CounterType.CANNOT_MOVE });\n  },\n};\nconst cardEffects: EffectsDB = {\n  larva: {\n    onSpecial: (step, ctx) => {\n      const { engine } = ctx;\n      const { permanent } = step;\n      const newPermanentName = extractOptChoiceString(step, 0);\n      const newPermanentId = newPermanentName.toLowerCase().replace(/ /g, \"-\");\n      const slot = permanent.slot;\n      const owner = permanent.owner;\n\n      engine.despawn(permanent);\n      engine.spawn(newPermanentId, slot, owner);\n    },\n    handlers: beeOrLarvaHandlers,\n  },\n};\n\nfor (const cardName of PUZZLE_51_CARDS) {\n  cardEffects[cardName.toLocaleLowerCase().replace(/ /g, \"-\")] = {\n    onRepeatable: (step, ctx) => {\n      const { engine } = ctx;\n      engine.despawn(step.permanent);\n    },\n    handlers: beeOrLarvaHandlers,\n  };\n}\n\nexport const Puzzle51Spec: GameSpecServerFragment = {\n  afterInitEngine: (ctx) => {\n    const { engine } = ctx;\n    engine.initExtraState({\n      firstNumber: undefined,\n      usedDraw: false,\n      usedSpecial: false,\n    } as Puzzle51ExtraState);\n  },\n  afterTurnEnd: (player, ctx) => {\n    const { inspector, engine } = ctx;\n    if (player === Player.P2) {\n      const amt = inspector\n        .getPermanentsOf(Player.P1)\n        .filter((p) => p.card.name !== BEEHIVE_ID).length;\n      engine.addGems(Player.P1, new Array(amt).fill(ColorSymbol.YELLOW));\n    }\n    // if (player === Player.P1) {\n    //   engine.checkpoint();\n    // }\n  },\n  beforeNewGame: (ctx) => {\n    const { ai, engine } = ctx;\n    engine.addGems(\n      Player.P1,\n      new Array(NUM_STARTING_GEMS).fill(ColorSymbol.YELLOW)\n    );\n    ai.speak(\n      \"The B, E, A, R, S are looking rather down today. Help us C, H, E, E, R them up!\\nWe’ll keep the H, O, N, E, Y fresh, so it won’t reset between T, U, R, N, S!\"\n    );\n  },\n  cardEffects,\n  aiTurn: (ctx) => {\n    const { ai, engine, inspector } = ctx;\n    const extraState = engine.getExtraState() as Puzzle51ExtraState;\n    const aiTurnNumber = inspector.getTurnNumber() / 2;\n    const allStringsBeforeAnyDespawns = getAllStrings(inspector);\n\n    const bearhive = inspector\n      .getPermanentsOf(Player.P2)\n      .find((p) => p.card.name === AI_BASE_ID);\n\n    // Set up the bearhive.\n    if (aiTurnNumber === 0) {\n      if (bearhive === undefined) return;\n      engine.addCounter(bearhive, { type: CounterType.HAPPY_BEARS, val: 0 });\n      engine.addCounter(bearhive, { type: CounterType.SAD_BEARS, val: 0 });\n    }\n\n    const bearResults: string[] = [];\n    const completeBear = (isHappy: boolean, permanent?: Permanent) => {\n      if (bearhive === undefined) return;\n      const bearName =\n        permanent === undefined\n          ? \"Bear\"\n          : inspector.getCardDisplayName(permanent);\n      engine.mergeValueCounter(\n        bearhive,\n        isHappy ? CounterType.HAPPY_BEARS : CounterType.SAD_BEARS,\n        1\n      );\n      bearResults.push(\n        `${bearName} is ${isHappy ? \"H, A, P, P, Y!\" : \"S, A, D :(\"}`\n      );\n    };\n    function despawnAndUpdateCounters(cardId: string, category: Set<string>) {\n      const cardToDespawn = inspector\n        .getPermanentsOf(Player.P2)\n        .find((p) => p.card.name === cardId);\n      const bearName =\n        cardToDespawn === undefined\n          ? \"Bear\"\n          : inspector.getCardDisplayName(cardToDespawn);\n\n      completeBear(\n        containsOneOf(category, allStringsBeforeAnyDespawns),\n        cardToDespawn\n      );\n\n      if (cardToDespawn !== undefined) {\n        engine.despawn(cardToDespawn);\n      }\n    }\n\n    // De-spawn everything.\n    switch (aiTurnNumber) {\n      case 2:\n        despawnAndUpdateCounters(AI_CARD_IDS[0], OLYMPIC_WINTER_SPORTS);\n        break;\n      case 5:\n        despawnAndUpdateCounters(AI_CARD_IDS[1], FIRST_151_POKEMON);\n        break;\n      case 6:\n        despawnAndUpdateCounters(AI_CARD_IDS[2], COLORS);\n        break;\n      case 7:\n        despawnAndUpdateCounters(AI_CARD_IDS[3], FRUITS);\n        break;\n      case 8:\n        despawnAndUpdateCounters(AI_CARD_IDS[4], DAY_OF_WEEK_ABBREVIATIONS);\n        despawnAndUpdateCounters(AI_CARD_IDS[5], IATA_AIRPORT_CODES_FLORIDA);\n        break;\n      case 9:\n        despawnAndUpdateCounters(AI_CARD_IDS[6], NFL_TEAM_NAMES);\n        break;\n      case 10:\n        despawnAndUpdateCounters(AI_CARD_IDS[7], SYNONYMS_FOR_TRICKED);\n        despawnAndUpdateCounters(AI_CARD_IDS[8], CURRENCY_CODES);\n        break;\n      case 11: {\n        // Get the smallest number present on the board.\n        const allStrings = getAllStrings(inspector);\n        let minimumValue = undefined;\n        for (const [number, value] of NUMBERS) {\n          for (const string of allStrings) {\n            if (\n              string.includes(number) &&\n              (minimumValue === undefined || minimumValue > value)\n            ) {\n              minimumValue = value;\n            }\n          }\n        }\n        // If a number was spelled out, despawn the correct AI card and store the firstNumber in extraState.\n        const cardToDespawn = inspector\n          .getPermanentsOf(Player.P2)\n          .find((p) => p.card.name === AI_CARD_IDS[9]);\n\n        const isSatisfied = minimumValue !== undefined;\n        if (isSatisfied) extraState.firstNumber = minimumValue;\n        completeBear(isSatisfied, cardToDespawn);\n\n        if (cardToDespawn !== undefined) engine.despawn(cardToDespawn);\n        // Despawn based on spelled weapons.\n        despawnAndUpdateCounters(AI_CARD_IDS[10], WEAPONS);\n        break;\n      }\n      case 13: {\n        // Get the largest number present on the board.\n        const allStrings2 = getAllStrings(inspector);\n        let maximumValue = undefined;\n        const generatedNumbers: [string, number][] = [];\n        for (const [tensDigit, tensValue] of TENS_DIGITS) {\n          for (const [onesDigit, onesValue] of ONES_DIGITS) {\n            generatedNumbers.push([\n              tensDigit + onesDigit,\n              tensValue + onesValue,\n            ]);\n          }\n        }\n        for (const [number, value] of NUMBERS.concat(generatedNumbers)) {\n          for (const string of allStrings2) {\n            if (\n              string.includes(number) &&\n              (maximumValue === undefined || maximumValue < value)\n            ) {\n              maximumValue = value;\n            }\n          }\n        }\n        // If a larger number was spelled out, despawn the correct AI card.\n        const cardToDespawn = inspector\n          .getPermanentsOf(Player.P2)\n          .find((p) => p.card.name === AI_CARD_IDS[11]);\n\n        const isSatisfied =\n          maximumValue !== undefined &&\n          extraState.firstNumber !== undefined &&\n          maximumValue > extraState.firstNumber;\n        completeBear(isSatisfied, cardToDespawn);\n\n        if (cardToDespawn !== undefined) engine.despawn(cardToDespawn);\n\n        // Despawn based on geometric shapes & Kentucky Derby winners.\n        despawnAndUpdateCounters(AI_CARD_IDS[12], OPTICAL_COMPONENTS);\n        despawnAndUpdateCounters(AI_CARD_IDS[13], KENTUCKY_DERBY_WINNERS);\n        break;\n      }\n      case 15:\n        despawnAndUpdateCounters(AI_CARD_IDS[14], SUMMER_OLYMPIC_SPORTS);\n        despawnAndUpdateCounters(AI_CARD_IDS[15], TREES);\n        despawnAndUpdateCounters(AI_CARD_IDS[16], MONTHS);\n        despawnAndUpdateCounters(AI_CARD_IDS[17], US_STATES);\n        despawnAndUpdateCounters(AI_CARD_IDS[18], LEAGUE_OF_LEGENDS_CHAMPIONS);\n        break;\n    }\n\n    const showHint =\n      aiTurnNumber === 3 &&\n      !(engine.getExtraState() as Puzzle51ExtraState).usedDraw;\n\n    const hintDialogue =\n      \"Oh yeah, a certain M, A, S, T, E, R, Y might bee very helpful for this battle!\";\n    if (bearResults.length > 0 || showHint) {\n      ai.speak(\n        [\n          ...(bearResults.length > 0\n            ? [\n                bearResults.join(\n                  showHint || bearResults.length > 4 ? \" \" : \"\\n\"\n                ),\n              ]\n            : []),\n          ...(showHint ? [hintDialogue] : []),\n        ].join(\"\\n\")\n      );\n    }\n\n    function clear(row: number, col: number) {\n      inspector\n        .getAllPermanents()\n        .filter((p) => p.slot.column === col && p.slot.row === row)\n        .forEach((p) => engine.despawn(p));\n    }\n\n    // Now do new spawns.\n    switch (aiTurnNumber) {\n      case 1:\n        clear(2, 2);\n        ai.trySpawn(AI_CARD_IDS[0], 2, 2);\n        break;\n      case 4:\n        clear(2, 2);\n        ai.trySpawn(AI_CARD_IDS[1], 2, 2);\n        break;\n      case 5:\n        clear(2, 2);\n        ai.trySpawn(AI_CARD_IDS[2], 2, 2);\n        break;\n      case 6:\n        clear(2, 2);\n        ai.trySpawn(AI_CARD_IDS[3], 2, 2);\n        break;\n      case 7:\n        clear(2, 2);\n        clear(2, 3);\n        ai.trySpawn(AI_CARD_IDS[4], 2, 2);\n        ai.trySpawn(AI_CARD_IDS[5], 2, 3);\n        break;\n      case 8:\n        clear(2, 2);\n        ai.trySpawn(AI_CARD_IDS[6], 2, 2);\n        break;\n      case 9:\n        clear(2, 2);\n        clear(2, 3);\n        ai.trySpawn(AI_CARD_IDS[7], 2, 2);\n        ai.trySpawn(AI_CARD_IDS[8], 2, 3);\n        break;\n      case 10:\n        clear(2, 3);\n        clear(2, 2);\n        ai.trySpawn(AI_CARD_IDS[9], 2, 3);\n        ai.trySpawn(AI_CARD_IDS[10], 2, 2); // Needed for 1st letter.\n        break;\n      case 12:\n        clear(2, 2);\n        clear(2, 3);\n        clear(2, 4);\n        ai.trySpawn(AI_CARD_IDS[11], 2, 2);\n        ai.trySpawn(AI_CARD_IDS[12], 2, 3);\n        ai.trySpawn(AI_CARD_IDS[13], 2, 4);\n        break;\n      case 14:\n        clear(1, 2);\n        clear(2, 2);\n        clear(0, 5);\n        clear(1, 5);\n        clear(2, 5);\n        // Letter placements important.\n        ai.trySpawn(AI_CARD_IDS[14], 1, 2);\n        ai.trySpawn(AI_CARD_IDS[15], 2, 2);\n        ai.trySpawn(AI_CARD_IDS[16], 0, 5);\n        ai.trySpawn(AI_CARD_IDS[17], 1, 5);\n        ai.trySpawn(AI_CARD_IDS[18], 2, 5);\n        break;\n    }\n  },\n  extraLoseChecks: (player, ctx) => {\n    const { inspector } = ctx;\n    const bearhive = inspector\n      .getPermanentsOf(Player.P2)\n      .find((p) => p.card.name === AI_BASE_ID);\n    const noSadBears =\n      (bearhive?.counters.find((c) => c.type === CounterType.SAD_BEARS)?.val ??\n        0) === 0;\n    return (\n      inspector.getTurnNumber() >= 31 &&\n      // P2 loses if there are no sad bears;\n      // P1 loses if there are sad bears.\n      noSadBears === (player === Player.P2)\n    );\n  },\n  afterStep: (step, ctx) => {\n    if (step.type === StepType.DRAW) {\n      (ctx.engine.getExtraState() as Puzzle51ExtraState).usedDraw = true;\n      return;\n    }\n    const { ai, engine } = ctx;\n    const extraState = engine.getExtraState() as Puzzle51ExtraState;\n    if (extraState.usedSpecial) return;\n    if (step.type !== StepType.ACTIVATE_ABILITY) return;\n    if (step.abilityType !== AbilityType.SPECIAL) return;\n    extraState.usedSpecial = true;\n    ai.speak(\n      \"This battle has a S, P, E, C, I, A, L hotkey! When transforming a Larva into a bee, you can type any letter key to select the bee type whose first letter matches!\"\n    );\n  },\n};\n","import {\n  CreatedPermanentEvent,\n  EndTurnPermanentEvent,\n  PermanentEventType,\n} from \"engine/server-hooks\";\nimport { CardType } from \"engine/types/card-data\";\nimport { CounterType } from \"engine/types/counters\";\nimport { AIContext, GameSpecServerFragment } from \"engine/types/game-specs\";\nimport { Player } from \"engine/types/game-state\";\nimport { UpdateType } from \"engine/types/updates\";\nimport { CardEffects } from \"engine/cards/card-effects\";\nimport { Puzzle76SharedExtraState } from \"engine/game-specs/puzzle-76-shared\";\n\nconst LAST_WAVE = 6;\n\n// make sure to modify the card's text in Deck sheet as well\nconst DINOSAUR_TAIL_TURNS = 5;\nconst BOAR_TUSKS_TURNS = 2;\nconst DRYAD_HORNS_TURNS = 14;\nconst COW_UDDER_TURNS = 4;\nconst BEE_WINGS_TURNS = 3;\nconst KERO_TURNS = 5;\n\nconst announceDoom = (ctx: AIContext, dialogue: string, turnsLeft: number) => {\n  const { ai } = ctx;\n  ai.speak(`${dialogue}\\n${Array(turnsLeft).fill(\"⏳\").join(\" \")}`);\n};\n\nconst summonDoomHandler = (turns: number) => (event: CreatedPermanentEvent) => {\n  const { permanent, ctx } = event;\n  const { engine } = ctx;\n\n  engine.addCounter(permanent, {\n    type: CounterType.DOOM,\n    val: turns,\n  });\n};\n\nconst endTurnDoomHandler =\n  (turns: number) => (event: EndTurnPermanentEvent) => {\n    // note this triggers before the counter itself decrements\n    // check for doom counter\n    const { permanent, ctx } = event;\n    const { inspector, engine, ai } = ctx;\n    const sharedExt =\n      inspector.getSharedExtraState() as Puzzle76SharedExtraState;\n\n    if (inspector.doesPermanentHaveCounterType(permanent, CounterType.DOOM)) {\n      const doomValue = inspector.getCounterValSum(permanent, CounterType.DOOM);\n      // console.log(`doom counter exists with ${doomValue}`);\n\n      const beforeMyCardDestroysYou = `before my ${inspector.getCardDisplayName(\n        permanent\n      )} destroys you!`;\n\n      if (doomValue === turns) {\n        // ai.speak(\n        //   `Wave ${sharedExt.keroPhase}: ${doomValue} turns left ${beforeMyCardDestroysYou}`\n        // );\n      } else if (doomValue > 1) {\n        // ai.speak(`${doomValue} turns left ${beforeMyCardDestroysYou}`);\n      } else if (doomValue === 1) {\n        // ai.speak(`Last turn ${beforeMyCardDestroysYou}`);\n      } else if (doomValue === 0) {\n        // destroy all enemy units\n        const enemyUnits = inspector.getPermanents({\n          ownedByOpponentOf: permanent.owner,\n        });\n\n        enemyUnits.forEach((unit) => {\n          engine.destroy(permanent, unit);\n        });\n\n        // destroy counter\n        engine.removeCounterType(permanent, CounterType.DOOM);\n        engine.announce(\n          `${inspector.getCardDisplayName(permanent)} destroys all enemy units`\n        );\n      }\n    }\n  };\n\nconst cowLegEffects: CardEffects = {\n  // Whenever an allied unit dies, gain +0/+1.\n  handlers: {\n    [PermanentEventType.AFTER_DAMAGED]: (event) => {\n      const { permanent, attacker, ctx } = event;\n      const { inspector, engine } = ctx;\n      // Attack back only if the damage comes from an attacker.\n      if (attacker) {\n        engine.announce(\n          `${inspector.getCardDisplayName(\n            permanent\n          )} attacks back for 1 damage!`\n        );\n        // Do not attribute damage to prevent triggering other card effects.\n        engine.damageUnattributed(attacker, 1);\n      }\n    },\n    [PermanentEventType.OTHER_UNIT_DESTROYED]: (event) => {\n      const { permanent, destroyedPermanent, ctx } = event;\n      const { inspector, engine } = ctx;\n\n      if (permanent.owner === destroyedPermanent.owner) {\n        engine.adjustPermanentStats(permanent, 0, 1);\n      }\n      engine.announce(\n        `${inspector.getCardDisplayName(permanent)} gains +1 max health`\n      );\n    },\n  },\n};\n\nexport const Puzzle76Spec: GameSpecServerFragment = {\n  // counterData: {},\n  cardEffects: {\n    \"kero-dos\": {\n      handlers: {\n        [PermanentEventType.CREATED]: (ev) => {\n          const { permanent, ctx } = ev;\n          const { engine } = ctx;\n          engine.addCounter(permanent, { type: CounterType.INVULNERABLE });\n        },\n      },\n    },\n    // wave 1\n    \"dinosaur-tail\": {\n      // Takes at most 1 damage from any single source of damage.\n      adjustDamageReceived: (permanent, damage, attacker, ctx) => {\n        if (damage >= 1) return 1;\n        return damage;\n      },\n      // After 3 turns, destroy all enemy units.\n      handlers: {\n        [PermanentEventType.CREATED]: summonDoomHandler(DINOSAUR_TAIL_TURNS),\n        [PermanentEventType.END_TURN]: endTurnDoomHandler(DINOSAUR_TAIL_TURNS),\n      },\n    },\n    // wave 2\n    \"boar-tusks\": {\n      // Creatures that do damage to this Creature take 3 damage.\n      // After 2 turns, destroy all enemy units.\n      handlers: {\n        [PermanentEventType.AFTER_DAMAGED]: (event) => {\n          const { permanent, attacker, ctx } = event;\n          const { inspector, engine } = ctx;\n          // Attack back only if the damage comes from an attacker.\n          if (attacker) {\n            engine.announce(\n              `${inspector.getCardDisplayName(\n                permanent\n              )} attacks back for 3 damage!`\n            );\n            // Do not attribute damage to prevent triggering other card effects.\n            engine.damageUnattributed(attacker, 3);\n          }\n        },\n        [PermanentEventType.CREATED]: summonDoomHandler(BOAR_TUSKS_TURNS),\n        [PermanentEventType.END_TURN]: endTurnDoomHandler(BOAR_TUSKS_TURNS),\n      },\n    },\n    // wave 3\n    \"dryad-horns\": {\n      handlers: {\n        [PermanentEventType.CREATED]: summonDoomHandler(DRYAD_HORNS_TURNS),\n        [PermanentEventType.END_TURN]: endTurnDoomHandler(DRYAD_HORNS_TURNS),\n      },\n    },\n    // wave 4\n    \"cow-leg-white\": cowLegEffects,\n    \"cow-leg-black\": cowLegEffects,\n    \"cow-udder\": {\n      handlers: {\n        [PermanentEventType.CREATED]: summonDoomHandler(COW_UDDER_TURNS),\n        [PermanentEventType.END_TURN]: endTurnDoomHandler(COW_UDDER_TURNS),\n        // Whenever an allied unit dies, gain +0/+1.\n        [PermanentEventType.AFTER_DAMAGED]: (event) => {\n          const { permanent, attacker, ctx } = event;\n          const { inspector, engine } = ctx;\n          // Attack back only if the damage comes from an attacker.\n          if (attacker) {\n            engine.announce(\n              `${inspector.getCardDisplayName(\n                permanent\n              )} attacks back for 1 damage!`\n            );\n            // Do not attribute damage to prevent triggering other card effects.\n            engine.damageUnattributed(attacker, 1);\n          }\n        },\n        [PermanentEventType.OTHER_UNIT_DESTROYED]: (event) => {\n          const { permanent, destroyedPermanent, ctx } = event;\n          const { inspector, engine } = ctx;\n\n          if (permanent.owner === destroyedPermanent.owner) {\n            engine.adjustPermanentStats(permanent, 0, 1);\n          }\n          engine.announce(\n            `${inspector.getCardDisplayName(permanent)} gains +1 max health`\n          );\n        },\n      },\n    },\n    // wave 5\n    \"bee-wings\": {\n      handlers: {\n        [PermanentEventType.CREATED]: summonDoomHandler(BEE_WINGS_TURNS),\n        [PermanentEventType.END_TURN]: endTurnDoomHandler(BEE_WINGS_TURNS),\n      },\n      // Platinum Archangel doesn't take damage from enemy units.\n      insteadOfDamaged: (permanent, damage, attacker, ctx) => {\n        const { inspector } = ctx;\n        if (\n          attacker &&\n          permanent.owner === inspector.getOpponentOf(attacker.owner)\n        )\n          return false;\n        return true;\n      },\n    },\n    // wave 6\n    kero: {\n      // After this creature takes damage, double its remaining health.\n      handlers: {\n        [PermanentEventType.CREATED]: summonDoomHandler(KERO_TURNS),\n        [PermanentEventType.END_TURN]: endTurnDoomHandler(KERO_TURNS),\n        [PermanentEventType.AFTER_DAMAGED]: (event) => {\n          const { permanent, ctx } = event;\n          const { inspector, engine } = ctx;\n          const me = inspector.getPermanents({\n            name: \"kero\",\n            owner: Player.P2,\n          })[0];\n          if (!me) {\n            return;\n          }\n          const health = inspector.getHealth(me);\n          engine.adjustPermanentStats(me, 0, health);\n          engine.announce(`Kero increases its Health by ${health}`);\n        },\n      },\n    },\n  },\n  afterInitEngine: (ctx) => {\n    const { inspector, engine } = ctx;\n    engine.initSharedExtraState({\n      keroPhase: 0,\n    } as Puzzle76SharedExtraState);\n  },\n  afterStep: (step, ctx) => {\n    const { inspector, engine } = ctx;\n    const sharedExt =\n      inspector.getSharedExtraState() as Puzzle76SharedExtraState;\n    if (sharedExt.keroPhase === 4) {\n      // cow leg phase only\n      const udder = inspector.getPermanents({\n        owner: Player.P2,\n        name: \"cow-udder\",\n      })[0];\n      if (!udder) {\n        return;\n      }\n      const numLegs =\n        inspector.getPermanents({\n          owner: Player.P2,\n          name: \"cow-leg-white\",\n        }).length +\n        inspector.getPermanents({\n          owner: Player.P2,\n          name: \"cow-leg-black\",\n        }).length;\n      if (numLegs === 0) {\n        engine.removeCounterType(udder, CounterType.INVULNERABLE);\n      }\n    }\n\n    // If Kero Dos (and Kero) has been destroyed, the battle has ended.\n    const enemyUnits = inspector.getPermanentsOf(Player.P2);\n    if (enemyUnits.length === 0) {\n      engine.modifySharedExtraState({\n        keroPhase: sharedExt.keroPhase + 1,\n      } as Puzzle76SharedExtraState);\n      engine.getBackdoorController().broadcastAndApply({\n        type: UpdateType.WAIT_ANIMATE,\n        waitTime: 4000,\n      });\n    }\n  },\n  aiTurn: (ctx) => {\n    const { inspector, engine, ai } = ctx;\n    const units = inspector.getPermanentsOf(Player.P2);\n    const sharedExt =\n      inspector.getSharedExtraState() as Puzzle76SharedExtraState;\n\n    const hasCreatures = units.some(\n      (unit) => inspector.getCardType(unit) === CardType.CREATURE\n    );\n\n    // new round if no Creatures left\n    if (!hasCreatures) {\n      engine.modifySharedExtraState({\n        keroPhase: sharedExt.keroPhase + 1,\n      } as Puzzle76SharedExtraState);\n\n      // Only unit left is Kero Dos.\n      const base = units[0];\n\n      if (sharedExt.keroPhase > 1) {\n        // deal 1 damage to kero dos\n        engine.damageUnattributed(\n          base,\n          Math.round(inspector.getMaxHealth(base) / 6),\n          true\n        );\n      }\n\n      // set up new round\n      // clear board of player's creatures\n      inspector.getPermanentsOf(Player.P1).forEach((permanent) => {\n        if (inspector.getCardType(permanent) === CardType.CREATURE) {\n          engine.despawn(permanent);\n        }\n      });\n\n      switch (sharedExt.keroPhase) {\n        case 1:\n          // // TEST to draw all cards\n          // while (inspector.getDrawPile(Player.P1).length > 0)\n          //   engine.drawCard(Player.P1);\n          ai.trySpawn(\"dinosaur-tail\", 1, 2);\n          break;\n        case 2:\n          ai.trySpawn(\"boar-tusks\", 1, 2);\n          break;\n        case 3:\n          ai.trySpawn(\"dryad-horns\", 1, 2);\n          break;\n        case 4: {\n          ai.trySpawn(\"cow-udder\", 1, 2);\n          for (let row = 1; row < 3; row++) {\n            for (let col = 0; col < 5; col++) {\n              ai.trySpawn(\n                (row + col) % 2 === 0 ? \"cow-leg-white\" : \"cow-leg-black\",\n                row,\n                col\n              );\n            }\n          }\n          const udder = inspector.getPermanents({\n            owner: Player.P2,\n            name: \"cow-udder\",\n          })[0];\n          if (udder) {\n            engine.addCounter(udder, { type: CounterType.INVULNERABLE });\n          }\n          break;\n        }\n        case 5:\n          ai.trySpawn(\"bee-wings\", 1, 2);\n          break;\n        case 6: {\n          engine.despawn(base);\n          engine.spawn(\"kero\", 0, 2, Player.P2);\n          break;\n        }\n      }\n    }\n\n    const doomUnit = inspector.getPermanents({\n      hasCounter: CounterType.DOOM,\n    })[0];\n    const turnsToDoom =\n      doomUnit === undefined\n        ? 0\n        : inspector.getCounterValSum(doomUnit, CounterType.DOOM);\n    switch (sharedExt.keroPhase) {\n      case 1: {\n        announceDoom(\n          ctx,\n          \"How dare y'all turn against me?\\nAfter everything we've been thruwu!\\nHand over the cards, or...\\nI'll smash all of you to bits with my tail! ( •̀_•́)💢\",\n          turnsToDoom\n        );\n        break;\n      }\n      case 2: {\n        announceDoom(\n          ctx,\n          \"You... destroyed my tail? How is that possible?!\\nThe power of all our Dino friends was stored within it!\\nNo matter. I still have power from all the other Factions!\\nI'll destroy youwu with my tusks!! (╬ Ò﹏Ó)\",\n          turnsToDoom\n        );\n        break;\n      }\n      case 3: {\n        announceDoom(\n          ctx,\n          \"STOP IT!!! I'll destroy ALL of you! ヽ(#`Д´)ﾉ\\nI'll destroy the whole uwuorld!\\nIf these horns would just — *cough* 🌷 — charge up a little faster...\\nAll the cards... will be MINE! MY FRIENDS!!! FOREVER!!!!\",\n          turnsToDoom\n        );\n        break;\n      }\n      case 4: {\n        announceDoom(\n          ctx,\n          \"What, no!!! GIVE THEM BACK!!! (ง ‵□′)ง\\nYou were my FRIEND! ALL of you were my FRIENDS!!!\\nWe were so close... the UWU... Just... give up already!!!\\nI'll- I'll share some of the UWU with you, I promise!!!\",\n          turnsToDoom\n        );\n        break;\n      }\n      case 5: {\n        announceDoom(\n          ctx,\n          \"No... (๑′°︿°๑) I don't wanna...\\nI don't wanna go back to being a fish again...\\nI don't... I CAN'T go back in that box again...\\nNot another 1000 years... alone...\",\n          turnsToDoom\n        );\n        break;\n      }\n      case 6: {\n        announceDoom(\n          ctx,\n          \"Nouwu~! Everything... EVERYTHING IS RUWUINED!!! (ಥ﹏ಥ)\\nI... No, I can't give up, not nouwu...!\\nI don't need you, I NEVER needed you!\\nNot youwu, not cards... just the power... of UWU...\",\n          turnsToDoom\n        );\n        break;\n      }\n    }\n\n    // TODO: uncomment\n    // for (const unit of units) {\n    //   // act with all present units, just use a basic attack\n    //   ai.tryAttackFirst(unit);\n    // }\n  },\n  disableP2NoBasesLossCondition: true,\n  extraLoseChecks: (player, ctx) => {\n    const { inspector, engine } = ctx;\n    const sharedExt =\n      inspector.getSharedExtraState() as Puzzle76SharedExtraState;\n    return player === Player.P2 && sharedExt.keroPhase === 7;\n  },\n};\n","import { CardColor, ColorSymbol } from \"engine/types/card-data\";\nimport { Permanent, Player } from \"engine/types/game-state\";\nimport { GameSpecServerFragment } from \"engine/types/game-specs\";\nimport { Inspector } from \"engine/Inspector\";\nimport {\n  PermanentEventHandlers,\n  PermanentEventType,\n} from \"engine/server-hooks\";\n\ntype Puzzle80ExtraState = {\n  // Transient state (cleared at the end of each turn) to store\n  // damage mappings to announce.\n  damageMappings: {\n    [gostakName: string]: {\n      targetName: string;\n      damage: number;\n    }[];\n  };\n};\n\nfunction manhattanDistance(a: Permanent, b: Permanent) {\n  return (\n    Math.abs(a.slot.row - b.slot.row) + Math.abs(a.slot.column - b.slot.column)\n  );\n}\n\nfunction puzzleLength(s: string) {\n  let count = 0;\n  for (const c of s) {\n    if (/[0-9a-zA-Z]/.test(c)) {\n      count += 1;\n    }\n  }\n  return count;\n}\n\nfunction a1color(color: CardColor | null) {\n  if (color === null) return 0;\n  // WHITEBLACK is Gray\n  if (color === ColorSymbol.WHITEBLACK) return 7;\n  if (!/^[A-Z]/.test(color)) return 0;\n  return color.charCodeAt(0) - \"A\".charCodeAt(0) + 1;\n}\n\nconst damageFuncs = [\n  [\n    function (inspector: Inspector, _me: Permanent, target: Permanent) {\n      return inspector.getPower(target);\n    },\n  ],\n  [\n    function (inspector: Inspector, _me: Permanent, target: Permanent) {\n      return inspector.getMaxHealth(target);\n    },\n  ],\n  [\n    function (inspector: Inspector, _me: Permanent, target: Permanent) {\n      return Math.abs(\n        inspector.getPower(target) - inspector.getMaxHealth(target)\n      );\n    },\n  ],\n  [\n    function (inspector: Inspector, _me: Permanent, target: Permanent) {\n      return Math.abs(\n        inspector.getPower(target) -\n          puzzleLength(inspector.getCardDisplayName(target))\n      );\n    },\n  ],\n  [\n    function (inspector: Inspector, me: Permanent, target: Permanent) {\n      return Math.abs(\n        manhattanDistance(me, target) - a1color(inspector.getCardColor(target))\n      );\n    },\n  ],\n  [\n    function (inspector: Inspector, me: Permanent, target: Permanent) {\n      return Math.abs(\n        puzzleLength(inspector.getCardDisplayName(target)) -\n          manhattanDistance(me, target) *\n            a1color(inspector.getCardColor(target))\n      );\n    },\n  ],\n  [\n    function (inspector: Inspector, me: Permanent, target: Permanent) {\n      return Math.abs(\n        inspector.getMaxHealth(target) *\n          puzzleLength(inspector.getCardDisplayName(target)) -\n          manhattanDistance(me, target)\n      );\n    },\n    function (inspector: Inspector, _me: Permanent, target: Permanent) {\n      return (\n        Math.floor(inspector.getTurnNumber() / 2) *\n        Math.abs(\n          inspector.getMaxHealth(target) -\n            puzzleLength(inspector.getCardDisplayName(target))\n        )\n      );\n    },\n  ],\n];\n\nfunction makeGostakHandler(\n  damageFuncs: ((\n    inspector: Inspector,\n    me: Permanent,\n    target: Permanent\n  ) => number)[]\n): PermanentEventHandlers {\n  return {\n    [PermanentEventType.START_TURN]: (event) => {\n      const me = event.permanent;\n      const { inspector, engine } = event.ctx;\n      const ext = engine.getExtraState() as Puzzle80ExtraState;\n      const gostakName = inspector.getCardDisplayName(me);\n      for (const func of damageFuncs) {\n        const targets = inspector\n          .getPermanentsOf(inspector.getOpponentOf(me.owner))\n          .filter((perm) => !inspector.isProtectedFrom(perm, me));\n        for (const perm of targets) {\n          const damage = func(inspector, me, perm);\n          const targetName = inspector.getCardDisplayName(perm);\n          engine.announce(`The gostak attacks ${targetName} for ${damage}...`);\n          ext.damageMappings[gostakName] ??= [];\n          ext.damageMappings[gostakName].push({\n            targetName,\n            damage,\n          });\n          engine.damage(me, perm, damage);\n        }\n      }\n    },\n  };\n}\n\nexport const Puzzle80Specs: GameSpecServerFragment[] = damageFuncs.map(\n  (f, i) => {\n    const gostakName = `gostak${i + 1}`;\n    return {\n      disableP2NoBasesLossCondition: true,\n      counterData: {},\n      cardEffects: {\n        [gostakName]: {\n          handlers: makeGostakHandler(f),\n        },\n      },\n      afterInitEngine: (ctx) => {\n        ctx.engine.initExtraState({\n          damageMappings: {},\n        } as Puzzle80ExtraState);\n      },\n      aiTurn: (ctx) => {\n        const { inspector, engine, ai } = ctx;\n        const ext = engine.getExtraState() as Puzzle80ExtraState;\n        if (inspector.getTurnNumber() === 0) {\n          ai.trySpawn(gostakName, 0, 2);\n        }\n        if (Object.keys(ext.damageMappings).length > 0) {\n          ai.speak(\n            `A portion of damage to every foe!\\n${Object.entries(\n              ext.damageMappings\n            )\n              .map(([gostakName, damages]) =>\n                damages\n                  .map(({ targetName, damage }) => `${targetName}, ${damage}.`)\n                  .join(\" \")\n              )\n              .join(\"\\n\")}`\n          );\n          ext.damageMappings = {};\n        } else {\n          engine.clearKeyframe();\n        }\n      },\n      extraLoseChecks: (player, ctx) => {\n        const { inspector } = ctx;\n\n        if (player === Player.P2) {\n          // if P2 has no creatures they lose\n          return inspector.getPermanentsOf(Player.P2).length === 0;\n        }\n        return false;\n      },\n    };\n  }\n);\n","import { CounterType } from \"engine/types/counters\";\nimport { Player } from \"engine/types/game-state\";\nimport { Speaker } from \"engine/types/keyframes\";\nimport {\n  AIContext,\n  EngineContext,\n  GameSpecServerFragment,\n} from \"engine/types/game-specs\";\nimport {\n  PermanentEventType,\n  StartTurnPermanentEvent,\n} from \"engine/server-hooks\";\nimport {\n  ASTEROID_1_NAME,\n  ASTEROID_2_NAME,\n  ASTEROID_3_NAME,\n} from \"./puzzle-82-shared\";\n\nconst announceAsteroidLand = (ctx: AIContext, plural: boolean) => {\n  const { ai } = ctx;\n  ai.speak(\n    `Good heavens! The ${\n      plural ? \"asteroids are\" : \"asteroid is\"\n    } here! Doom, doom to us all!`,\n    { hideBattler: true, speaker: Speaker.DINO }\n  );\n};\n\nconst announceAsteroidTime = (ctx: AIContext, val: number) => {\n  const { ai } = ctx;\n  ai.speak(\n    `The asteroid approches. ${val} ${\n      val === 1 ? \"turn remains\" : \"turns remain\"\n    }!\\n${Array(val).fill(\"⏳\").join(\" \")}`,\n    { speaker: Speaker.DINO }\n  );\n};\n\n// basic battle: DPS race\nexport const Puzzle82_1Spec: GameSpecServerFragment = {\n  disableP2NoBasesLossCondition: true,\n  extraLoseChecks: loseCheck,\n  beforeNewGame(ctx) {\n    const { engine } = ctx;\n    engine.spawn(ASTEROID_1_NAME, { row: 0, column: 2 }, Player.P2);\n  },\n  counterData: {\n    [CounterType.DOOM]: {\n      handlers: {\n        [PermanentEventType.START_TURN]: makeDecrementer(asteroidExplanation),\n      },\n    },\n  },\n  cardEffects: {\n    [ASTEROID_1_NAME]: {\n      handlers: {\n        [PermanentEventType.CREATED]: (event) => {\n          event.ctx.engine.addCounter(event.permanent, {\n            type: CounterType.DOOM,\n            val: 11, // first tick immediately goes to val - 1\n          });\n        },\n      },\n    },\n  },\n  aiTurn: (ctx) => {\n    const { inspector, engine, ai } = ctx;\n    const perms = inspector.getPermanentsOf(Player.P2);\n    const asteroidWithDoom = perms.find((p) =>\n      inspector.doesPermanentHaveCounterType(p, CounterType.DOOM)\n    );\n    if (asteroidWithDoom) {\n      announceAsteroidTime(\n        ctx,\n        inspector.getCounterValSum(asteroidWithDoom, CounterType.DOOM)\n      );\n      return;\n    }\n    const asteroid = perms.find((p) => p.card.name === ASTEROID_1_NAME);\n    for (const perm of inspector.getPermanentsOf(Player.P1)) {\n      if (asteroid) {\n        engine.destroy(asteroid, perm);\n      } else {\n        engine.despawn(perm);\n      }\n    }\n    announceAsteroidLand(ctx, false);\n  },\n};\n\nexport const Puzzle82_2Spec: GameSpecServerFragment = {\n  disableP2NoBasesLossCondition: true,\n  extraLoseChecks: loseCheck,\n  beforeNewGame(ctx) {\n    const { engine } = ctx;\n    engine.spawn(ASTEROID_2_NAME, { row: 0, column: 0 }, Player.P2);\n    engine.spawn(ASTEROID_2_NAME, { row: 1, column: 1 }, Player.P2);\n    engine.spawn(ASTEROID_2_NAME, { row: 2, column: 2 }, Player.P2);\n    engine.spawn(ASTEROID_2_NAME, { row: 1, column: 3 }, Player.P2);\n    engine.spawn(ASTEROID_2_NAME, { row: 0, column: 4 }, Player.P2);\n  },\n  counterData: {\n    [CounterType.DOOM]: {\n      handlers: {\n        [PermanentEventType.START_TURN]: makeDecrementer(asteroidExplanation),\n      },\n    },\n  },\n  cardEffects: {\n    [ASTEROID_2_NAME]: {\n      handlers: {\n        [PermanentEventType.CREATED]: (event) => {\n          event.ctx.engine.addCounter(event.permanent, {\n            type: CounterType.DOOM,\n            val: 11, // first tick immediately goes to val - 1\n          });\n        },\n      },\n    },\n  },\n  aiTurn: (ctx) => {\n    const { inspector, engine } = ctx;\n    const perms = inspector.getPermanentsOf(Player.P2);\n    const asteroidWithDoom = perms.find((p) =>\n      inspector.doesPermanentHaveCounterType(p, CounterType.DOOM)\n    );\n    if (asteroidWithDoom) {\n      announceAsteroidTime(\n        ctx,\n        inspector.getCounterValSum(asteroidWithDoom, CounterType.DOOM)\n      );\n      return;\n    }\n    const asteroid = perms.find((p) => p.card.name === ASTEROID_2_NAME);\n    for (const perm of inspector.getPermanentsOf(Player.P1)) {\n      if (asteroid) {\n        engine.destroy(asteroid, perm);\n      } else {\n        engine.despawn(perm);\n      }\n    }\n    announceAsteroidLand(ctx, true);\n  },\n};\n\nexport const Puzzle82_3Spec: GameSpecServerFragment = {\n  disableP2NoBasesLossCondition: true,\n  extraLoseChecks: loseCheck,\n  beforeNewGame(ctx) {\n    const { engine } = ctx;\n    engine.spawn(ASTEROID_3_NAME, { row: 0, column: 2 }, Player.P2);\n  },\n  counterData: {\n    [CounterType.DOOM]: {\n      handlers: {\n        [PermanentEventType.START_TURN]: makeDecrementer(asteroidExplanation),\n      },\n    },\n  },\n  cardEffects: {\n    [ASTEROID_3_NAME]: {\n      handlers: {\n        [PermanentEventType.CREATED]: (event) => {\n          event.ctx.engine.addCounter(event.permanent, {\n            type: CounterType.DOOM,\n            val: 11, // first tick immediately goes to val - 1\n          });\n        },\n      },\n    },\n  },\n  aiTurn: (ctx) => {\n    const { inspector, engine } = ctx;\n    const perms = inspector.getPermanentsOf(Player.P2);\n    const asteroidWithDoom = perms.find((p) =>\n      inspector.doesPermanentHaveCounterType(p, CounterType.DOOM)\n    );\n    if (asteroidWithDoom) {\n      announceAsteroidTime(\n        ctx,\n        inspector.getCounterValSum(asteroidWithDoom, CounterType.DOOM)\n      );\n      return;\n    }\n    const asteroid = perms.find((p) => p.card.name === ASTEROID_3_NAME);\n    if (!asteroid) {\n      return;\n    }\n    const power = inspector.getPower(asteroid);\n    engine.removeDamage(asteroid, inspector.getBaseHealth(asteroid));\n    const startingHealth = inspector.getHealth(asteroid);\n    const adjustment = power - startingHealth;\n    if (adjustment !== 0) {\n      engine.adjustPermanentStats(asteroid, 0, adjustment);\n    }\n    let currentHealth = power;\n    for (const perm of inspector.getPermanents({\n      owner: Player.P1,\n      sort: [\"creaturesFirst\", { type: \"frontToBack\", perspective: Player.P1 }],\n    })) {\n      const healthToRemove = inspector.getHealth(perm);\n      if (healthToRemove > currentHealth) {\n        engine.announce(`${perm.card.name} catches the Meaty Ore!`);\n        engine.damage(perm, asteroid, healthToRemove);\n        break;\n      }\n      engine.damage(perm, asteroid, healthToRemove);\n      engine.adjustPermanentStats(asteroid, -healthToRemove, 0);\n      engine.destroy(asteroid, perm);\n      currentHealth -= healthToRemove;\n    }\n    if (inspector.getPermanents({ name: ASTEROID_3_NAME }).length !== 0)\n      announceAsteroidLand(ctx, false);\n  },\n};\n\nfunction loseCheck(player: Player, ctx: EngineContext): boolean {\n  const { inspector } = ctx;\n\n  // player is P2, the AI. Check for any units\n  return player === Player.P2 && inspector.getPermanentsOf(player).length === 0;\n}\n\nfunction makeDecrementer(explanation: (val: number) => string) {\n  return (event: StartTurnPermanentEvent) => {\n    const { permanent, counter, counterIndex, ctx } = event;\n    const { engine, inspector } = ctx;\n    if (!inspector.isTurnPending(permanent.owner)) {\n      // Only apply on unit owner's turn\n      return;\n    }\n    if (counter == null || counterIndex == null) {\n      throw new Error(\"counter event should have counter specified\");\n    }\n    const newVal = (counter.val || 0) - 1;\n    if (newVal <= 0) {\n      return { expire: true };\n    } else {\n      engine.updateCounterVal(permanent, counterIndex, newVal, explanation);\n    }\n  };\n}\n\nfunction asteroidExplanation(val: number) {\n  switch (val) {\n    case 0:\n      return \"BOOM!!!!!!!\";\n    case 1:\n      return \"This asteroid lands in 1 turn!\";\n    default:\n      return `This asteroid lands in ${val} turns.`;\n  }\n}\n\nfunction asteroidAnnounce1(val: number) {\n  switch (val) {\n    case 0:\n      return \"BOOM!!!!!!!\";\n    case 1:\n      return \"The asteroid lands in 1 turn!\";\n    default:\n      return `The asteroid lands in ${val} turns!`;\n  }\n}\n\nfunction asteroidAnnounce2(val: number) {\n  switch (val) {\n    case 0:\n      return \"BOOM!!!!!!!\";\n    case 1:\n      return \"The asteroids land in 1 turn!\";\n    default:\n      return `The asteroids land in ${val} turns!`;\n  }\n}\n","import { CardEffects } from \"engine/cards/card-effects\";\nimport { PermanentEventType } from \"engine/server-hooks\";\nimport { CounterType } from \"engine/types/counters\";\nimport { GameSpecServerFragment } from \"engine/types/game-specs\";\nimport { areSlotsEqual } from \"engine/types/game-state\";\nimport { Slot } from \"engine/types/game-state\";\nimport { Player } from \"engine/types/game-state\";\nimport { StepType } from \"engine/types/steps\";\n\nconst ALL_CARDS = [\n  \"arvada\",\n  \"burlington\",\n  \"centennial\",\n  \"grover\",\n  \"cow-butte\",\n  \"ramsey-peak\",\n  \"saddle-mountain\",\n  \"finger-rock\",\n] as ReadonlyArray<string>;\nconst NUM_UNITS = 8;\n\nconst OUR_DESTINATION: { [id: string]: [number, number] } = {\n  arvada: [0, 4],\n  grover: [2, 0],\n  burlington: [0, 2],\n  centennial: [3, 4],\n  \"cow-butte\": [3, 3],\n  \"ramsey-peak\": [3, 1],\n  \"saddle-mountain\": [0, 1],\n  \"finger-rock\": [0, 3],\n};\n\nconst ENEMY_DESTINATION: { [id: string]: [number, number] } = {\n  arvada: [1, 3],\n  grover: [0, 4],\n  burlington: [1, 6],\n  centennial: [1, 4],\n  \"cow-butte\": [2, 5],\n  \"ramsey-peak\": [0, 3],\n  \"saddle-mountain\": [2, 1],\n  \"finger-rock\": [0, 2],\n};\n\nconst toSlot = (a: [number, number]): Slot => ({ row: a[0], column: a[1] });\n\nconst BASE_EFFECT: CardEffects = {\n  handlers: {\n    [PermanentEventType.CREATED]: (event) => {\n      event.ctx.engine.addCounter(event.permanent, {\n        type: CounterType.BASE_GEMS,\n        val: 1,\n      });\n    },\n  },\n};\n\ninterface ExtraState {\n  isAngry: boolean;\n}\n\nexport const Puzzle90Spec: GameSpecServerFragment = {\n  cardEffects: {\n    arvada: BASE_EFFECT,\n    burlington: BASE_EFFECT,\n    centennial: BASE_EFFECT,\n  },\n  disableNoBasesLossCondition: true,\n  afterInitEngine: (ctx) => {\n    ctx.engine.initExtraState({\n      isAngry: false,\n    });\n  },\n  beforeNewGame: (ctx) => {\n    for (const name of ALL_CARDS) {\n      ctx.engine.addCardToHand(Player.P1, { name });\n      ctx.engine.spawn(name, toSlot(ENEMY_DESTINATION[name]), Player.P2);\n    }\n  },\n  extraLoseChecks: (player, ctx) => {\n    const { inspector } = ctx;\n    if (player === Player.P1) {\n      const stillAlive =\n        inspector.getPermanentsOf(player).length +\n          inspector.gameState[player].hand.length ===\n        NUM_UNITS;\n      if (!stillAlive) {\n        ctx.ai.speak(\"...you have no hope of victory now...\");\n      }\n      return !stillAlive;\n    }\n    // P2\n    const cards = inspector.getPermanentsOf(Player.P1);\n    const checkDestination = (dest: typeof OUR_DESTINATION) => {\n      return (\n        cards.length >= NUM_UNITS &&\n        // every card...\n        cards.every((card) => {\n          if (!card.card.name) throw new Error(\"oops\");\n          const destination = dest[card.card.name];\n          // has a destination and is in that destination\n          return destination && areSlotsEqual(card.slot, toSlot(destination));\n        })\n      );\n    };\n    if (checkDestination(OUR_DESTINATION)) {\n      ctx.ai.speak(\"\");\n      return true;\n    }\n    return false;\n  },\n  afterStep: (step, ctx) => {\n    // anger check\n    const extraState = ctx.engine.getExtraState() as ExtraState;\n    if (!extraState.isAngry) {\n      if (ctx.inspector.getPermanentsOf(Player.P2).length !== NUM_UNITS) {\n        ctx.ai.speak(\n          \"...must coordinate troops... ...partition the land... ...degree by degree...\"\n        );\n        extraState.isAngry = true;\n      }\n    }\n\n    if (step.type !== StepType.ATTACK) {\n      return;\n    }\n    if (ctx.inspector.getPermanentsOf(Player.P2).length === 0) {\n      ctx.ai.speak(\n        \"...my strength is gone... ...but you won’t take me... ...not with that formation...\"\n      );\n    }\n  },\n  aiTurn: (ctx) => {\n    const { inspector, ai } = ctx;\n    if (!(ctx.engine.getExtraState() as ExtraState).isAngry) {\n      return;\n    }\n\n    // for each unit we own...\n    const sneakyPower = 0;\n    const totalPower = 0;\n    for (const unit of inspector.getPermanentsOf(Player.P2)) {\n      if (!unit.ready) {\n        continue;\n      }\n      const power = inspector.getPower(unit);\n      if (power <= 0) {\n        continue;\n      }\n\n      ctx.ai.tryAttackFirst(unit, {\n        sort: [\"health\"],\n      });\n      // const isSneaky = unit.slot.row >= 2;\n      // totalPower += power;\n      // if (isSneaky) {\n      //   sneakyPower += power;\n      // }\n    }\n  },\n};\n","import { Player } from \"engine/types/game-state\";\nimport { GameSpecServerFragment } from \"engine/types/game-specs\";\nimport { PermanentEventType } from \"engine/server-hooks\";\n\nexport const Puzzle98RampSpec: GameSpecServerFragment = {\n  disableP2NoBasesLossCondition: true,\n  cardEffects: {\n    \"miracle-growth\": {\n      handlers: {\n        [PermanentEventType.OTHER_UNIT_SPAWN]: (event) => {\n          const me = event.permanent;\n          const { inspector, engine } = event.ctx;\n          const power = inspector.getPower(me);\n          if (power > 0) {\n            engine.adjustPermanentStats(me, power, 0);\n          }\n          const maxHealth = inspector.getMaxHealth(me);\n          const health = inspector.getHealth(me);\n          engine.adjustPermanentStats(me, 0, maxHealth);\n          if (maxHealth - health) {\n            engine.damageUnattributed(me, maxHealth - health);\n          }\n        },\n      },\n    },\n  },\n  aiTurn: (ctx) => {\n    const { inspector, ai } = ctx;\n    if (inspector.getTurnNumber() === 0) {\n      ai.trySpawn(\"miracle-growth\", 0, 2);\n    }\n\n    inspector.getPermanentsOf(Player.P2).forEach((permanent) =>\n      ai.tryAttackFirst(permanent, {\n        sort: [\n          {\n            type: \"weighted\",\n            weights: [\n              // prioritize higher power, since they are scarier\n              { criterion: \"-power\", weight: 1 },\n              // prioritize lower health, since they are faster to kill off\n              { criterion: \"health\", weight: 1 },\n            ],\n          },\n          // tiebreak by nearest first\n          { type: \"euclideanDistance\", slot: permanent.slot },\n        ],\n      })\n    );\n  },\n  extraLoseChecks: (player, ctx) => {\n    const { inspector } = ctx;\n\n    // if P2 has no creatures they lose\n    return (\n      player === Player.P2 && inspector.getPermanentsOf(player).length === 0\n    );\n  },\n};\n","import { Player } from \"engine/types/game-state\";\nimport { GameSpecServerFragment } from \"engine/types/game-specs\";\nimport { PermanentEventType } from \"engine/server-hooks\";\nimport { CardType } from \"engine/types/card-data\";\n\nexport const Puzzle98ShadowSpec: GameSpecServerFragment = {\n  disableP2NoBasesLossCondition: true,\n  cardEffects: {\n    \"leech-seed\": {\n      handlers: {\n        [PermanentEventType.START_TURN]: (event) => {\n          const me = event.permanent;\n          const { inspector, engine } = event.ctx;\n          const totalPower = inspector\n            .getPermanents({ type: CardType.CREATURE })\n            .map((permanent) => inspector.getPower(permanent))\n            .reduce((a, b) => a + b, 0);\n          if (totalPower > 0) {\n            engine.adjustPermanentStats(me, 0, totalPower);\n          }\n        },\n      },\n    },\n  },\n  aiTurn: (ctx) => {\n    const { inspector, ai } = ctx;\n    if (inspector.getTurnNumber() === 0) {\n      ai.trySpawn(\"leech-seed\", 0, 2);\n    }\n\n    inspector\n      .getPermanentsOf(Player.P2)\n      .forEach((permanent) => ai.tryAttackFirst(permanent));\n  },\n  extraLoseChecks: (player, ctx) => {\n    const { inspector } = ctx;\n\n    // if P2 has no creatures they lose\n    return (\n      player === Player.P2 && inspector.getPermanentsOf(player).length === 0\n    );\n  },\n};\n","import { Player } from \"engine/types/game-state\";\nimport { GameSpecServerFragment } from \"engine/types/game-specs\";\nimport { PermanentEventType } from \"engine/server-hooks\";\n\nexport const Puzzle98SplitterSpec: GameSpecServerFragment = {\n  disableP2NoBasesLossCondition: true,\n  cardEffects: {\n    \"wild-weed\": {\n      handlers: {\n        [PermanentEventType.OTHER_UNIT_SPAWN]: (event) => {\n          const { permanent: me, spawnedPermanent } = event;\n          if (me.owner !== spawnedPermanent.owner) {\n            const { engine, inspector } = event.ctx;\n            let toSpawn = inspector.getPower(spawnedPermanent);\n            if (!toSpawn) return;\n            const emptySlots = inspector.getUnoccupiedSlotsClosestTo(\n              Player.P2,\n              me.slot\n            );\n            for (const emptySlot of emptySlots) {\n              if (engine.spawn(\"wild-weed\", emptySlot, Player.P2)) {\n                toSpawn--;\n                if (toSpawn === 0) break;\n              }\n            }\n          }\n        },\n      },\n    },\n  },\n  aiTurn: (ctx) => {\n    const { inspector, ai } = ctx;\n    if (inspector.getTurnNumber() === 0) {\n      ai.trySpawn(\"wild-weed\", 0, 2);\n    }\n\n    inspector.getPermanentsOf(Player.P2).forEach((permanent) =>\n      ai.tryAttackFirst(permanent, {\n        sort: [\n          {\n            type: \"weighted\",\n            weights: [\n              // prioritize higher power, since they are scarier\n              { criterion: \"-power\", weight: 1 },\n              // prioritize lower health, since they are faster to kill off\n              { criterion: \"health\", weight: 1 },\n            ],\n          },\n          // tiebreak by nearest first\n          { type: \"euclideanDistance\", slot: permanent.slot },\n        ],\n      })\n    );\n  },\n  extraLoseChecks: (player, ctx) => {\n    const { inspector } = ctx;\n\n    // if P2 has no creatures they lose\n    return (\n      player === Player.P2 && inspector.getPermanentsOf(player).length === 0\n    );\n  },\n};\n","import { Player } from \"engine/types/game-state\";\nimport { CounterType } from \"engine/types/counters\";\nimport { GameSpecServerFragment } from \"engine/types/game-specs\";\nimport { PermanentEventType } from \"engine/server-hooks\";\n\nexport const Puzzle98YinYangSpec: GameSpecServerFragment = {\n  disableP2NoBasesLossCondition: true,\n  cardEffects: {\n    \"spirit-of-the-vines\": {\n      handlers: {\n        [PermanentEventType.START_TURN]: (event) => {\n          const { permanent } = event;\n          const { engine } = event.ctx;\n          engine.adjustPermanentStats(permanent, 0, 2);\n        },\n        [PermanentEventType.OTHER_UNIT_DESTROYED]: (event) => {\n          const { permanent: me, destroyedPermanent } = event;\n          const { engine } = event.ctx;\n          if (destroyedPermanent.owner === me.owner) {\n            engine.adjustPermanentStats(me, 10000, 10000);\n          }\n        },\n      },\n    },\n    \"overgrown-vines\": {\n      handlers: {\n        [PermanentEventType.OTHER_UNIT_SPAWN]: (event) => {\n          const { spawnedPermanent } = event;\n          const { engine } = event.ctx;\n          engine.addCounter(spawnedPermanent, {\n            type: CounterType.CANNOT_MOVE,\n            explanation: \"Immobile.\",\n          });\n        },\n      },\n    },\n  },\n  aiTurn: (ctx) => {\n    const { inspector, ai } = ctx;\n    if (inspector.getTurnNumber() === 0) {\n      ai.trySpawn(\"spirit-of-the-vines\", 0, 2);\n      ai.trySpawn(\"overgrown-vines\", 1, 2);\n    }\n\n    inspector\n      .getPermanentsOf(Player.P2)\n      .forEach((permanent) => ai.tryAttackFirst(permanent));\n  },\n  extraLoseChecks: (player, ctx) => {\n    const { inspector } = ctx;\n\n    // if P2 has no creatures they lose\n    return (\n      player === Player.P2 && inspector.getPermanentsOf(player).length === 0\n    );\n  },\n};\n","import { Player } from \"engine/types/game-state\";\nimport { GameSpecServerFragment } from \"engine/types/game-specs\";\nimport { PermanentEventType } from \"engine/server-hooks\";\n\nexport const Puzzle98VultureSpec: GameSpecServerFragment = {\n  disableP2NoBasesLossCondition: true,\n  cardEffects: {\n    \"venus-bee-trap\": {\n      handlers: {\n        [PermanentEventType.START_TURN]: (event) => {\n          const { permanent } = event;\n          const { engine } = event.ctx;\n          engine.adjustPermanentStats(permanent, 0, 3);\n        },\n        [PermanentEventType.OTHER_UNIT_DESTROYED]: (event) => {\n          const { permanent: me } = event;\n          const { engine } = event.ctx;\n          engine.adjustPermanentStats(me, 10000, 10000);\n        },\n      },\n    },\n  },\n  aiTurn: (ctx) => {\n    const { inspector, ai } = ctx;\n    if (inspector.getTurnNumber() === 0) {\n      ai.trySpawn(\"venus-bee-trap\", 0, 2);\n    }\n\n    inspector.getPermanentsOf(Player.P2).forEach((permanent) =>\n      ai.tryAttackFirst(permanent, {\n        sort: [\n          \"creaturesFirst\",\n          // lowest first since we \"win\" if we kill anybody\n          \"health\",\n          // tiebreak by nearest first\n          { type: \"euclideanDistance\", slot: permanent.slot },\n        ],\n      })\n    );\n  },\n  extraLoseChecks: (player, ctx) => {\n    const { inspector } = ctx;\n\n    // if P2 has no creatures they lose\n    return (\n      player === Player.P2 && inspector.getPermanentsOf(player).length === 0\n    );\n  },\n};\n","import { PermanentEventType } from \"engine/server-hooks\";\nimport { CardType, ColorSymbol } from \"engine/types/card-data\";\nimport { AbilityType, EffectOptType } from \"engine/types/effects\";\nimport { GameSpecServerFragment } from \"engine/types/game-specs\";\nimport { Player, getSlotsEuclideanDistance } from \"engine/types/game-state\";\n\nexport const Puzzle53Spec: GameSpecServerFragment = {\n  cardEffects: {\n    yurt: {\n      handlers: {\n        [PermanentEventType.START_TURN]: (event) => {\n          const { permanent, ctx } = event;\n          const { inspector, engine } = ctx;\n          if (inspector.isTurnPending(permanent.owner)) {\n            engine.addGems(permanent.owner, [ColorSymbol.YELLOW]);\n          }\n        },\n      },\n    },\n  },\n  adjustDamageReceived: (permanent, damage, attacker, ctx) => {\n    const { inspector, engine, ai } = ctx;\n    if (!attacker) {\n      return damage;\n    }\n    if (Math.abs(attacker.slot.row - permanent.slot.row) > 6) {\n      engine.announce(\n        `${inspector.getCardDisplayName(\n          attacker\n        )} failed to damage ${inspector.getCardDisplayName(\n          permanent\n        )} because it was too far.`\n      );\n      return 0;\n    }\n    return damage;\n  },\n  disableP2NoBasesLossCondition: true,\n  extraLoseChecks: (player, ctx) => {\n    const { inspector } = ctx;\n    // ai loses iff no permanents\n    return (\n      player === Player.P2 && inspector.getPermanentsOf(player).length === 0\n    );\n  },\n  aiTurn: (ctx) => {\n    const { inspector, ai } = ctx;\n\n    // first turn: spawn a bunch of stuff\n    if (inspector.getTurnNumber() === 0) {\n      for (let row = 0; row <= 6; row++) {\n        for (let column = 0; column <= 4; column++) {\n          ai.trySpawn(\"bee-rider\", { row, column });\n        }\n      }\n      return;\n    }\n\n    // try spawning horse riders next to yurts\n    inspector\n      .getPermanentsOf(Player.P2)\n      .filter((permanent) => inspector.getSharedEffects(permanent).isBase)\n      .forEach((yurt) => {\n        const { row, column } = yurt.slot;\n        for (let dr = -1; dr <= 1; dr++) {\n          for (let dc = -1; dc <= 1; dc++) {\n            ai.trySpawn(\"bee-rider\", { row: row + dr, column: column + dc });\n          }\n        }\n      });\n\n    // permanents sorted from bottom to top\n    inspector\n      .getPermanents({\n        owner: Player.P2,\n        type: CardType.CREATURE,\n        sort: [(permanent) => -permanent.slot.row],\n      })\n      .forEach((permanent) => {\n        const { row, column } = permanent.slot;\n        // try move down\n        ai.tryActivateAbility(permanent, AbilityType.FLEX, [\n          {\n            type: EffectOptType.SLOT,\n            slot: { row: row + 1, column },\n          },\n        ]);\n        // try move down (again)\n        ai.tryMoveRel(permanent, 1, 0);\n        // if still ready, try attacking something near\n        ai.tryAttackFirst(permanent, {\n          owner: Player.P1,\n          notProtectedFrom: permanent,\n          custom: (target) =>\n            getSlotsEuclideanDistance(permanent.slot, target.slot) < 2,\n        });\n      });\n  },\n};\n","import { AIContext, GameSpecServerFragment } from \"engine/types/game-specs\";\nimport { Permanent, Player } from \"engine/types/game-state\";\n\nconst round1Specs: GameSpecServerFragment = {\n  beforeNewGame: (ctx) => {\n    const { engine } = ctx;\n    engine.spawn(\"hog-factory\", { row: 0, column: 1 }, Player.P2);\n    engine.spawn(\"log-factory\", { row: 0, column: 3 }, Player.P2);\n  },\n  aiTurn: (ctx) => {\n    if (ctx.inspector.getTurnNumber() === 0) {\n      return;\n    }\n    spawnHogsAndLogs(ctx);\n    performAttacksOrHogMoves(ctx);\n  },\n};\nconst round2Specs: GameSpecServerFragment = {\n  beforeNewGame: (ctx) => {\n    const { engine } = ctx;\n    engine.spawn(\"hog-factory\", { row: 0, column: 0 }, Player.P2);\n    engine.spawn(\"log-factory\", { row: 0, column: 4 }, Player.P2);\n    engine.spawn(\"stacktory\", { row: 0, column: 2 }, Player.P2);\n  },\n  aiTurn: (ctx) => {\n    const bases = getAIBases(ctx);\n    // Spawn.\n    if (bases.length == 3) {\n      spawnStacks(ctx);\n    } else {\n      spawnHogsAndLogs(ctx);\n    }\n    // Attack!\n    if (ctx.inspector.getTurnNumber() === 0) {\n      return;\n    }\n    performAttacksOrHogMoves(ctx);\n  },\n};\nconst round4Specs: GameSpecServerFragment = {\n  beforeNewGame: (ctx) => {\n    const { engine } = ctx;\n    engine.spawn(\"stackstack-tory\", { row: 0, column: 2 }, Player.P2);\n  },\n  aiTurn: (ctx) => {\n    const { inspector, ai } = ctx;\n    if (inspector.getTurnNumber() === 0) {\n      return;\n    }\n\n    const stacktory = inspector.getPermanents({\n      owner: Player.P2,\n      name: \"stackstack-tory\",\n    })[0];\n\n    if (stacktory) {\n      const col = stacktory.slot.column;\n      for (const row of [0, 1, 2]) {\n        const success = ai.trySpawn(\"hog-on-a-log-on-a\", row, col);\n        if (success) {\n          break;\n        }\n      }\n    }\n    performAttacksOrHogMoves(ctx);\n  },\n};\nconst round3Specs: GameSpecServerFragment = {\n  beforeNewGame: (ctx) => {\n    const { engine } = ctx;\n    engine.spawn(\"hog-factorytorytory\", { row: 0, column: 0 }, Player.P2);\n    engine.spawn(\"log-factorytorytory\", { row: 0, column: 1 }, Player.P2);\n  },\n  aiTurn: (ctx) => {\n    const { inspector, ai } = ctx;\n    if (inspector.getTurnNumber() === 0) {\n      return;\n    }\n    const aiUnitsInOrder = inspector.getPermanents({\n      owner: Player.P2,\n      sort: [(perm: Permanent) => 100 * perm.slot.row + perm.slot.column],\n    });\n    // spawn stuff\n    for (const unit of aiUnitsInOrder) {\n      const unitToSpawn = getFactoryOutput(unit.card.name);\n      if (unitToSpawn) {\n        let spawned = false;\n        for (const slotToSpawn of emptyAiSlotsInOrder(ctx)) {\n          const summonResolved = ai.trySpawn(unitToSpawn, slotToSpawn);\n          if (summonResolved) {\n            spawned = true;\n            break;\n          }\n        }\n        if (!spawned) {\n          // Stop trying to spawn all other units\n          break;\n        }\n      }\n    }\n    performAttacksOrHogMoves(ctx);\n  },\n};\nexport const Puzzle101Specs: GameSpecServerFragment[] = [\n  round1Specs,\n  round2Specs,\n  round3Specs,\n  round4Specs,\n];\n\nfunction hogAttackAI(unit: Permanent, ctx: AIContext) {\n  // Boar Smart. Boar Attack down column.\n  const success = ctx.ai.tryAttackFirst(unit, {\n    column: unit.slot.column,\n    sort: [{ type: \"frontToBack\", perspective: Player.P2 }],\n  });\n  if (success) {\n    return true;\n  }\n\n  const attackableUnits = ctx.inspector.getPermanents({\n    owner: Player.P1,\n    notProtectedFrom: unit,\n    sort: [(p: Permanent) => Math.abs(p.slot.column - unit.slot.column)],\n  });\n\n  if (attackableUnits[0]) {\n    const colDelta = attackableUnits[0].slot.column > unit.slot.column ? 1 : -1;\n    ctx.ai.tryMoveRel(unit, 0, colDelta);\n  }\n\n  return false;\n}\n\nfunction logAttackAI(unit: Permanent, ctx: AIContext) {\n  return ctx.ai.tryAttackFirst(unit);\n}\n\nfunction attackAI(unit: Permanent, ctx: AIContext) {\n  if ((unit.card.name || \"\").startsWith(\"hog\")) {\n    return hogAttackAI(unit, ctx);\n  }\n  return logAttackAI(unit, ctx);\n}\n\nfunction performAttacksOrHogMoves(ctx: AIContext) {\n  const { inspector } = ctx;\n  // hogs (or hog on x)s first, then logs\n  const units = inspector.getPermanents({\n    owner: Player.P2,\n    sort: [\n      (p) => ((p.card.name || \"\").startsWith(\"h\") ? 0 : 1),\n      (p) => -10 * p.slot.row + p.slot.column,\n    ],\n  });\n  for (const unit of units) {\n    if (inspector.getPower(unit) <= 0) {\n      continue;\n    }\n    if (!unit.ready) {\n      continue;\n    }\n    attackAI(unit, ctx);\n  }\n}\n\nconst BASES = new Set([\n  \"hog-factory\",\n  \"log-factory\",\n  \"stacktory\",\n  \"stackstack-tory\",\n]);\n\nfunction getAIBases(ctx: AIContext) {\n  const { inspector } = ctx;\n  return inspector\n    .getPermanentsOf(Player.P2)\n    .filter((p) => BASES.has(p.card.name || \"\"));\n}\n\nfunction* slotsInPreferenceOrder(ctx: AIContext) {\n  const bases = getAIBases(ctx);\n  const baseCols = new Set(bases.map((p) => p.slot.column));\n\n  for (const row of [1, 2, 0]) {\n    for (let column = 0; column <= 4; column++) {\n      if (baseCols.has(column)) {\n        yield { row, column };\n      }\n    }\n  }\n  for (const row of [1, 2, 0]) {\n    for (let column = 0; column <= 4; column++) {\n      if (!baseCols.has(column)) {\n        yield { row, column };\n      }\n    }\n  }\n}\n\nfunction* emptyAiSlotsInOrder(ctx: AIContext) {\n  for (let row = 0; row < 3; row++) {\n    for (let column = 0; column < 5; column++) {\n      if (!ctx.inspector.isSlotOccupied({ row, column })) {\n        yield { row, column };\n      }\n    }\n  }\n}\n\nfunction getFactoryOutput(name: string | undefined) {\n  switch (name) {\n    case \"hog-factory\":\n      return \"hog\";\n    case \"hog-factorytory\":\n      return \"hog-factory\";\n    case \"hog-factorytorytory\":\n      return \"hog-factorytory\";\n    case \"log-factory\":\n      return \"log\";\n    case \"log-factorytory\":\n      return \"log-factory\";\n    case \"log-factorytorytory\":\n      return \"log-factorytory\";\n    default:\n      return null;\n  }\n}\n\nfunction spawnHogsAndLogs(ctx: AIContext) {\n  const { inspector, ai } = ctx;\n  const units = inspector.getPermanentsOf(Player.P2);\n  let mustPlayHog = !!units.find((unit) => unit.card.name === \"hog-factory\");\n  let mustPlayLog = !!units.find((unit) => unit.card.name === \"log-factory\");\n\n  for (const slot of slotsInPreferenceOrder(ctx)) {\n    if (!mustPlayHog && !mustPlayLog) {\n      break;\n    }\n    const summonResolved = ai.trySpawn(mustPlayHog ? \"hog\" : \"log\", slot);\n    if (summonResolved) {\n      if (mustPlayHog) {\n        mustPlayHog = false;\n      } else {\n        mustPlayLog = false;\n      }\n    }\n  }\n}\n\nfunction spawnStacks(ctx: AIContext) {\n  const { inspector, ai } = ctx;\n\n  const turnNumber = inspector.getTurnNumber();\n  const cardName = (turnNumber / 2) % 2 === 0 ? \"hog-on-a-log\" : \"log-on-a-hog\";\n\n  for (const slot of slotsInPreferenceOrder(ctx)) {\n    const summonResolved = ai.trySpawn(cardName, slot);\n\n    if (summonResolved) {\n      break;\n    }\n  }\n}\n","import { Permanent, Player, Slot } from \"engine/types/game-state\";\nimport { AIContext, GameSpecServerFragment } from \"engine/types/game-specs\";\nimport { PermanentEventType } from \"engine/server-hooks\";\nimport { BASE1, BASE2, BOAR } from \"./puzzle-109-shared\";\nimport { CardType } from \"engine/types/card-data\";\n\nexport const Puzzle109Spec: GameSpecServerFragment = {\n  cardEffects: {\n    [BASE1]: {\n      handlers: {\n        [PermanentEventType.END_TURN]: (ev) => {\n          const { engine, inspector } = ev.ctx;\n          const { permanent } = ev;\n          for (const otherP of inspector.getPermanents({\n            column: permanent.slot.column,\n            type: CardType.CREATURE,\n          })) {\n            engine.adjustPermanentStats(otherP, 1, 0);\n          }\n        },\n      },\n    },\n    [BOAR]: {\n      handlers: {\n        [PermanentEventType.END_TURN]: (ev) => {\n          const { engine } = ev.ctx;\n          const { permanent } = ev;\n          engine.adjustPermanentStats(permanent, 1, 0);\n        },\n      },\n    },\n  },\n  aiTurn: (ctx) => {\n    const { ai, engine, inspector } = ctx;\n    if (inspector.getTurnNumber() === 0) {\n      ai.speak(\n        \"What are y’all trespassers DOING on my FARM?\\nGIT yer butts OUTTA here and keep yer hands off my dang BOARRIES!\"\n      );\n      ai.trySpawn(BOAR, { row: 2, column: 2 });\n      return;\n    }\n\n    const boar = inspector.getPermanents({ name: BOAR, owner: Player.P2 })[0];\n\n    // boar is dead. sad :(\n    if (!boar) {\n      return;\n    }\n    const boarAtk = inspector.getPower(boar);\n\n    const bases = inspector.getPermanents({\n      owner: Player.P2,\n      type: CardType.STRUCTURE,\n    });\n    const hasTrain = !!bases.find((p) => p.card.name === BASE2);\n\n    // Prioritize\n    // 1: Units\n    // 2: Invading units (in friendly territory)\n    // 3: Killable\n    // 4: Highest Power\n    // 5: Closest, column-wise (mostly for if we must move)\n    const attackableUnits = inspector.getPermanents({\n      owner: Player.P1,\n      notProtectedFrom: boar,\n      sort: [\n        \"creaturesFirst\",\n        (p: Permanent) =>\n          inspector.getTerrainOf(p.slot) === Player.P2 ? 0 : 1,\n        (p: Permanent) => (inspector.getHealth(p) <= boarAtk ? 0 : 1),\n        \"-power\",\n        (p: Permanent) => Math.abs(p.slot.column - boar.slot.column),\n      ],\n    });\n\n    if (hasTrain) {\n      const victim = attackableUnits[0];\n      if (!victim) {\n        // um, how could this happen ???\n        return;\n      }\n      if (inspector.getTerrainOf(victim.slot) === Player.P2) {\n        // free to move anywhere! let's take a power boost, from our weakest farm.\n        const farms = inspector.getPermanents({\n          owner: Player.P2,\n          name: BASE1,\n          sort: [\"health\"],\n        });\n        let success = false;\n        for (const farm of farms) {\n          for (const row of [2, 1, 0]) {\n            success = tryFreeMove(ctx, boar, { column: farm.slot.column, row });\n            if (success) {\n              break;\n            }\n          }\n          if (success) {\n            break;\n          }\n        }\n        ai.tryAttack(boar, victim);\n        return;\n      }\n      // Unit is on P1's terrain. Move to attack this unit!\n      if (victim.slot.column !== boar.slot.column) {\n        let success = false;\n        for (const row of [2, 1, 0]) {\n          success = tryFreeMove(ctx, boar, { column: victim.slot.column, row });\n          if (success) {\n            break;\n          }\n        }\n      }\n      ai.tryAttack(boar, victim);\n    } else {\n      // doesn't have train.\n      // If we can attack without moving, let's do that.\n      const attackableWithoutMovingUnit = attackableUnits.find(\n        (p) =>\n          p.slot.column === boar.slot.column ||\n          inspector.getTerrainOf(p.slot) === Player.P2\n      );\n      if (attackableWithoutMovingUnit) {\n        ai.tryAttack(boar, attackableWithoutMovingUnit);\n        return;\n      }\n      // Move towards closest unit\n      const victim = attackableUnits[0];\n      if (!victim) {\n        // um, how could this happen ???\n        return;\n      }\n      const colDelta = victim.slot.column > boar.slot.column ? 1 : -1;\n      ai.tryMoveRel(boar, 0, colDelta);\n    }\n  },\n};\n\nfunction tryFreeMove(ctx: AIContext, boar: Permanent, slot: Slot): boolean {\n  const success = ctx.ai.tryMove(boar, slot);\n  if (success) {\n    ctx.engine.ready(boar);\n  }\n  return success;\n}\n","import { Player } from \"engine/types/game-state\";\nimport { GameSpecServerFragment } from \"engine/types/game-specs\";\n\nexport const TestBattleSpec: GameSpecServerFragment = {\n  extraLoseChecks: (player, ctx) => {\n    return player === Player.P2 && ctx.inspector.getTurnNumber() >= 2 * 1;\n  },\n};\n","import { GameSpecServerFragment, GameSpec } from \"engine/types/game-specs\";\nimport { ALL_SHARED_GAME_SPECS } from \"engine/all-shared-game-specs\";\nimport { PUZ_NAME_COMMON } from \"engine/game-specs/common-shared\";\nimport { CommonSpec } from \"engine/game-specs/common\";\nimport { RadlandsSpec } from \"engine/game-specs/radlands\";\nimport { RobotSpec } from \"engine/game-specs/robot\";\nimport { Tutorial1Spec } from \"engine/game-specs/tutorial1\";\nimport { Tutorial2Spec } from \"engine/game-specs/tutorial2\";\nimport { Tutorial3Spec } from \"engine/game-specs/tutorial3\";\nimport { Tutorial4Spec } from \"engine/game-specs/tutorial4\";\nimport { Tutorial5Spec } from \"engine/game-specs/tutorial5\";\nimport { Tutorial6Spec } from \"engine/game-specs/tutorial6\";\nimport { Puzzle4Spec } from \"engine/game-specs/puzzle-4\";\nimport { Puzzle8Spec } from \"engine/game-specs/puzzle-8\";\nimport { Puzzle9Spec } from \"engine/game-specs/puzzle-9\";\nimport { Puzzle22Specs } from \"engine/game-specs/puzzle-22\";\nimport { Puzzle28Spec } from \"engine/game-specs/puzzle-28\";\nimport { Puzzle31Spec } from \"./game-specs/puzzle-31\";\nimport { Puzzle44Spec } from \"engine/game-specs/puzzle-44\";\nimport {\n  Puzzle46Spec_1,\n  Puzzle46Spec_2,\n  Puzzle46Spec_3,\n  Puzzle46Spec_4,\n  Puzzle46Spec_5,\n} from \"engine/game-specs/puzzle-46\";\nimport {\n  Puzzle50_1Spec,\n  Puzzle50_2Spec,\n  Puzzle50_3Spec,\n  Puzzle50_4Spec,\n  Puzzle50_5Spec,\n  Puzzle50_6Spec,\n  Puzzle50_7Spec,\n  Puzzle50_8Spec,\n  Puzzle50_9Spec,\n  Puzzle50_10Spec,\n  Puzzle50_11Spec,\n  Puzzle50_12Spec,\n  Puzzle50_13Spec,\n  Puzzle50_14Spec,\n  Puzzle50_15Spec,\n  Puzzle50_16Spec,\n  Puzzle50_17Spec,\n  Puzzle50_18Spec,\n  Puzzle50_19Spec,\n  Puzzle50_20Spec,\n  Puzzle50_21Spec,\n  Puzzle50_22Spec,\n  Puzzle50_23Spec,\n  Puzzle50_24Spec,\n  Puzzle50_FinalSpec,\n} from \"engine/game-specs/puzzle-50\";\nimport { Puzzle51Spec } from \"./game-specs/puzzle-51\";\nimport { Puzzle76Spec } from \"./game-specs/puzzle-76\";\nimport { Puzzle80Specs } from \"./game-specs/puzzle-80\";\nimport {\n  Puzzle82_1Spec,\n  Puzzle82_2Spec,\n  Puzzle82_3Spec,\n} from \"./game-specs/puzzle-82\";\nimport { Puzzle93Spec } from \"./game-specs/puzzle-93\";\nimport { Puzzle90Spec } from \"./game-specs/puzzle-90\";\nimport { Puzzle98RampSpec } from \"./game-specs/puzzle-98-ramp\";\nimport { Puzzle98ShadowSpec } from \"./game-specs/puzzle-98-shadow\";\nimport { Puzzle98SplitterSpec } from \"./game-specs/puzzle-98-splitter\";\nimport { Puzzle98YinYangSpec } from \"./game-specs/puzzle-98-yinyang\";\nimport { Puzzle98VultureSpec } from \"./game-specs/puzzle-98-vulture\";\nimport { Puzzle53Spec } from \"./game-specs/puzzle-53\";\nimport { Puzzle101Specs } from \"./game-specs/puzzle-101\";\nimport { Puzzle109Spec } from \"./game-specs/puzzle-109\";\nimport { TestBattleSpec } from \"./game-specs/test-battle\";\n\nconst makeSimpleCutsceneSpec = (\n  firstKeyframe: string\n): GameSpecServerFragment => ({\n  beforeNewGame: (ctx) => {\n    ctx.ai.setKeyframe(firstKeyframe);\n  },\n});\n\ntype GameSpecServerFragments = {\n  [puzName: string]: GameSpecServerFragment;\n};\n\nconst ALL_SERVER_ONLY_GAME_SPECS: GameSpecServerFragments = {\n  [PUZ_NAME_COMMON]: CommonSpec,\n  vanilla: RadlandsSpec,\n  pvp: RadlandsSpec,\n  intra_pvp_1: RadlandsSpec,\n  intra_pvp_2: RadlandsSpec,\n  robot: RobotSpec,\n  tutorial1: Tutorial1Spec,\n  tutorial2: Tutorial2Spec,\n  tutorial3: Tutorial3Spec,\n  tutorial4: Tutorial4Spec,\n  tutorial5: Tutorial5Spec,\n  tutorial6: Tutorial6Spec,\n  gnutmeg_tree: Puzzle4Spec,\n  mister_penny: Puzzle8Spec,\n  blancmange: Puzzle9Spec,\n  beebay_fulfillment_center_1: Puzzle22Specs[0],\n  beebay_fulfillment_center_2: Puzzle22Specs[1],\n  beebay_fulfillment_center_3: Puzzle22Specs[2],\n  beebay_fulfillment_center_4: Puzzle22Specs[3],\n  beebay_fulfillment_center_5: Puzzle22Specs[4],\n  beebay_fulfillment_center_6: Puzzle22Specs[5],\n  beebay_fulfillment_center_7: Puzzle22Specs[6],\n  beebay_fulfillment_center_8: Puzzle22Specs[7],\n  beebay_fulfillment_center_9: Puzzle22Specs[8],\n  beebay_fulfillment_center_10: Puzzle22Specs[9],\n  beebay_fulfillment_center_11: Puzzle22Specs[10],\n  beebay_fulfillment_center_12: Puzzle22Specs[11],\n  beebay_fulfillment_center_13: Puzzle22Specs[12],\n  miss_yu: Puzzle28Spec,\n  bb_b: Puzzle31Spec,\n  slime: Puzzle44Spec,\n  dargle_1: Puzzle46Spec_1,\n  dargle_2: Puzzle46Spec_2,\n  dargle_3: Puzzle46Spec_3,\n  dargle_4: Puzzle46Spec_4,\n  dargle_5: Puzzle46Spec_5,\n  moonick_1: Puzzle50_1Spec,\n  moonick_2: Puzzle50_2Spec,\n  moonick_3: Puzzle50_3Spec,\n  moonick_4: Puzzle50_4Spec,\n  moonick_5: Puzzle50_5Spec,\n  moonick_6: Puzzle50_6Spec,\n  moonick_7: Puzzle50_7Spec,\n  moonick_8: Puzzle50_8Spec,\n  moonick_9: Puzzle50_9Spec,\n  moonick_10: Puzzle50_10Spec,\n  moonick_11: Puzzle50_11Spec,\n  moonick_12: Puzzle50_12Spec,\n  moonick_13: Puzzle50_13Spec,\n  moonick_14: Puzzle50_14Spec,\n  moonick_15: Puzzle50_15Spec,\n  moonick_16: Puzzle50_16Spec,\n  moonick_17: Puzzle50_17Spec,\n  moonick_18: Puzzle50_18Spec,\n  moonick_19: Puzzle50_19Spec,\n  moonick_20: Puzzle50_20Spec,\n  moonick_21: Puzzle50_21Spec,\n  moonick_22: Puzzle50_22Spec,\n  moonick_23: Puzzle50_23Spec,\n  moonick_24: Puzzle50_24Spec,\n  moonick_final: Puzzle50_FinalSpec,\n  spelling_bee: Puzzle51Spec,\n  the_swarm: Puzzle53Spec,\n  kero: Puzzle76Spec,\n  jabberwock_1: Puzzle80Specs[0],\n  jabberwock_2: Puzzle80Specs[1],\n  jabberwock_3: Puzzle80Specs[2],\n  jabberwock_4: Puzzle80Specs[3],\n  jabberwock_5: Puzzle80Specs[4],\n  jabberwock_6: Puzzle80Specs[5],\n  jabberwock_7: Puzzle80Specs[6],\n  asteroid_1: Puzzle82_1Spec,\n  asteroid_2: Puzzle82_2Spec,\n  asteroid_3: Puzzle82_3Spec,\n  coloring: Puzzle90Spec,\n  othello: Puzzle93Spec,\n  spirit_of_the_vines_1: Puzzle98RampSpec,\n  spirit_of_the_vines_2: Puzzle98ShadowSpec,\n  spirit_of_the_vines_3: Puzzle98SplitterSpec,\n  spirit_of_the_vines_4: Puzzle98VultureSpec,\n  spirit_of_the_vines_5: Puzzle98YinYangSpec,\n  infinitely_many_hogs_and_logs_1: Puzzle101Specs[0],\n  infinitely_many_hogs_and_logs_2: Puzzle101Specs[1],\n  infinitely_many_hogs_and_logs_3: Puzzle101Specs[2],\n  infinitely_many_hogs_and_logs_4: Puzzle101Specs[3],\n  angry_boarry_farmer: Puzzle109Spec,\n  test_battle: TestBattleSpec,\n  treasure_chest: makeSimpleCutsceneSpec(\"intro-start\"),\n  first_answer: makeSimpleCutsceneSpec(\"masteries-start\"),\n  first_legendary: makeSimpleCutsceneSpec(\"legendary-start\"),\n  entering_the_water: makeSimpleCutsceneSpec(\"pre-final-battle-start\"),\n  the_end: makeSimpleCutsceneSpec(\"post-final-battle-start\"),\n};\n\nexport const getGameSpec = (puzName: string): GameSpec => {\n  const sharedGameSpec = ALL_SHARED_GAME_SPECS[puzName];\n  const gameSpec = ALL_SERVER_ONLY_GAME_SPECS[puzName];\n\n  if (sharedGameSpec === undefined && gameSpec === undefined) {\n    throw new Error(`unknown puzzle name ${puzName} requested`);\n  }\n\n  return {\n    ...(sharedGameSpec ?? {}),\n    ...(gameSpec ?? {}),\n  };\n};\n","import { z } from \"zod\";\n\nimport { ColorSymbol, CardColor } from \"engine/types/card-data\";\nimport { PlayerStateStats } from \"engine/types/game-state\";\n\nexport enum Faction {\n  BOARS = \"boars\",\n  COWS = \"cows\",\n  BEES = \"bees\",\n  DINOSAURS = \"dinosaurs\",\n  DRYADS = \"dryads\",\n}\nexport const FactionZod = z.nativeEnum(Faction);\n\nexport const makeInitFactionScores = (): { [faction in Faction]: number } => {\n  return {\n    [Faction.BOARS]: 0,\n    [Faction.COWS]: 0,\n    [Faction.BEES]: 0,\n    [Faction.DINOSAURS]: 0,\n    [Faction.DRYADS]: 0,\n  };\n};\n\nexport const makeHuntEndFactionScores = (): {\n  [faction in Faction]: number;\n} => {\n  return {\n    [Faction.BOARS]: 1787669,\n    [Faction.COWS]: 4446436,\n    [Faction.BEES]: 3409702,\n    [Faction.DINOSAURS]: 4850820,\n    [Faction.DRYADS]: 2082386,\n  };\n};\n\nexport const factionToColor = (faction: Faction | null): ColorSymbol => {\n  if (faction === null) return ColorSymbol.ROCK;\n  switch (faction) {\n    case Faction.BOARS:\n      return ColorSymbol.RED;\n    case Faction.COWS:\n      return ColorSymbol.WHITEBLACK;\n    case Faction.BEES:\n      return ColorSymbol.YELLOW;\n    case Faction.DINOSAURS:\n      return ColorSymbol.GREEN;\n    case Faction.DRYADS:\n      return ColorSymbol.PURPLE;\n  }\n};\n\nexport const doesCardColorBelongToFaction = (\n  color: CardColor | null,\n  faction: Faction | null\n): boolean => {\n  if (faction === null || color === null) return false;\n  switch (faction) {\n    case Faction.BOARS:\n      return color === ColorSymbol.RED;\n    case Faction.COWS:\n      return [\n        ColorSymbol.WHITE,\n        ColorSymbol.BLACK,\n        ColorSymbol.WHITEBLACK,\n      ].includes(color);\n    case Faction.BEES:\n      return color === ColorSymbol.YELLOW;\n    case Faction.DINOSAURS:\n      return color === ColorSymbol.GREEN;\n    case Faction.DRYADS:\n      return color === ColorSymbol.PURPLE;\n  }\n};\n\n// Constants for faction score calculation.\nexport const FactionScoreConstants = {\n  SOLVE_BONUS: 100,\n  SUMMONS_MULTIPLIER: 10,\n  FACTION_SUMMONS_MULTIPLIER: 30,\n  DESTROYS_MULTIPLIER: 10,\n  DAMAGE_DEALT_MULTIPLIER: 1,\n  DAMAGE_DEALT_CAP: 100,\n  PVP_MULTIPLIER: 5,\n};\n\nexport const calcFactionScore = (\n  stats: PlayerStateStats,\n  isPvP: boolean,\n  isWinner: boolean\n): number => {\n  // Important: Any changes to this formula should be correspondingly\n  // reflected in the faction score calculation display.\n  if (isPvP && !isWinner) return 0;\n  const baseScore =\n    FactionScoreConstants.SOLVE_BONUS +\n    stats.summons * FactionScoreConstants.SUMMONS_MULTIPLIER +\n    stats.factionSummons * FactionScoreConstants.FACTION_SUMMONS_MULTIPLIER +\n    stats.destroys * FactionScoreConstants.DESTROYS_MULTIPLIER +\n    Math.min(stats.damageDealt, FactionScoreConstants.DAMAGE_DEALT_CAP) *\n      FactionScoreConstants.DAMAGE_DEALT_MULTIPLIER;\n  return baseScore * (isPvP ? FactionScoreConstants.PVP_MULTIPLIER : 1);\n};\n\nexport const capitalize = (str: string): string => {\n  return str.charAt(0).toUpperCase() + str.slice(1);\n};\n\nexport const FACTION_RANK_THRESHOLDS = [0, 5000, 30000];\n\nexport const getFactionRank = (score: number) => {\n  for (let i = 0; i < FACTION_RANK_THRESHOLDS.length; i++) {\n    if (score < FACTION_RANK_THRESHOLDS[i]) return i;\n  }\n  return FACTION_RANK_THRESHOLDS.length;\n};\n","import { CardType } from \"engine/types/card-data\";\nimport {\n  Permanent,\n  Slot,\n  Player,\n  areSlotsEqual,\n  areSlotsAdjacent,\n  getSlotsEuclideanDistance,\n} from \"engine/types/game-state\";\nimport { CounterType } from \"engine/types/counters\";\nimport { Inspector } from \"engine/Inspector\";\n\n/**\n * A sort criterion is a function that takes a permanent to a number\n * (its \"sort value\"). Permanents are sorted in increasing order of\n * their sort value.\n * Boolean sort criteria (e.g. \"creaturesFirst\") correspond to a\n * difference of one in sort value.\n * Sort criteria may be combined using the \"weighted\" sort criterion,\n * which assigns each permanent a sort value equal to a weighted sum\n * over the subcriteria.\n */\nexport type SortCriterion =\n  | \"health\"\n  | \"-health\"\n  | \"power\"\n  | \"-power\"\n  | \"shell\"\n  | \"-shell\"\n  | \"creaturesFirst\"\n  | \"structuresFirst\"\n  | { type: \"frontToBack\"; perspective: Player }\n  | {\n      type: \"prioritize\" | \"deprioritize\";\n      cardNames: string[];\n    }\n  | {\n      type: \"euclideanDistance\" | \"-euclideanDistance\";\n      slot: Slot;\n    }\n  | {\n      type: \"weighted\";\n      weights: {\n        criterion: SortCriterion;\n        weight: number;\n      }[];\n    }\n  | ((permanent: Permanent) => number);\n\nconst evalSortCriterion = (\n  permanent: Permanent,\n  sortCriterion: SortCriterion,\n  inspector: Inspector\n): number => {\n  if (typeof sortCriterion === \"function\") {\n    return sortCriterion(permanent);\n  }\n  if (typeof sortCriterion === \"string\") {\n    switch (sortCriterion) {\n      case \"health\":\n        return inspector.getHealth(permanent);\n      case \"-health\":\n        return -inspector.getHealth(permanent);\n      case \"power\":\n        return inspector.getPower(permanent);\n      case \"-power\":\n        return -inspector.getPower(permanent);\n      case \"shell\":\n        return inspector.getShell(permanent);\n      case \"-shell\":\n        return -inspector.getShell(permanent);\n      case \"creaturesFirst\":\n        return inspector.getCardType(permanent) === CardType.CREATURE ? -1 : 0;\n      case \"structuresFirst\":\n        return inspector.getCardType(permanent) === CardType.STRUCTURE ? -1 : 0;\n    }\n  }\n  switch (sortCriterion.type) {\n    case \"frontToBack\":\n      return -inspector.getNthNearestRow(\n        permanent.slot.row,\n        sortCriterion.perspective\n      );\n    case \"prioritize\":\n      return sortCriterion.cardNames.includes(inspector.getCardName(permanent))\n        ? -1\n        : 0;\n    case \"deprioritize\":\n      return sortCriterion.cardNames.includes(inspector.getCardName(permanent))\n        ? 1\n        : 0;\n    case \"euclideanDistance\":\n      return getSlotsEuclideanDistance(permanent.slot, sortCriterion.slot);\n    case \"-euclideanDistance\":\n      return -getSlotsEuclideanDistance(permanent.slot, sortCriterion.slot);\n    case \"weighted\": {\n      const { weights } = sortCriterion;\n      let val = 0;\n      for (const weightSpec of weights) {\n        const { criterion, weight } = weightSpec;\n        val += weight * evalSortCriterion(permanent, criterion, inspector);\n      }\n      return val;\n    }\n  }\n  // unhandled cases will result in a return type error\n};\n\n/**\n * A specification for a permanent query.\n * Each property (besides \"sort\") corresponds to a filter criterion.\n * \"sort\" specifies a sort order for the returned permanents,\n * formatted as a list of sort criteria. The returned permanents are\n * sorted first by the first sort criterion, then by the second, etc.\n * See {@link SortCriterion} for the specification for sort criteria.\n */\nexport type PermanentQuery = {\n  name?: string;\n  ready?: boolean;\n  terrain?: Player;\n  owner?: Player;\n  ownedByOpponentOf?: Player;\n  type?: CardType;\n  isBase?: boolean;\n  row?: number;\n  column?: number;\n  slot?: Slot;\n  rowInFrontOf?: { row: number; perspective: Player };\n  rowBehind?: { row: number; perspective: Player };\n  adjacentTo?: Slot;\n  touching?: Slot;\n  columnAdjacentTo?: number;\n  protectedFrom?: Permanent;\n  notProtectedFrom?: Permanent;\n  except?: Permanent; // exclude one permanent (often \"self\")\n  hasCounter?: CounterType;\n  custom?: (permanent: Permanent) => boolean;\n  sort?: SortCriterion[];\n};\n\n/**\n * Filters and sorts permanents in the field.\n * See {@link PermanentQuery} for the query format.\n */\nexport const queryPermanents = (\n  inspector: Inspector,\n  query: PermanentQuery\n): Permanent[] => {\n  const permanents = inspector.getAllPermanents().filter((permanent) => {\n    for (const [k, v] of Object.entries(query)) {\n      const matches = ((): boolean => {\n        switch (k) {\n          case \"name\":\n            return inspector.getCardName(permanent) === query.name;\n          case \"ready\":\n            return permanent.ready === query.ready;\n          case \"terrain\":\n            return inspector.getTerrainOf(permanent.slot) === query.terrain;\n          case \"owner\":\n            return permanent.owner === query.owner;\n          case \"ownedByOpponentOf\":\n            return permanent.owner !== query.ownedByOpponentOf;\n          case \"type\":\n            return inspector.getCardType(permanent) === query.type;\n          case \"isBase\":\n            return (\n              (inspector.getSharedEffects(permanent).isBase ?? false) ===\n              query.isBase\n            );\n          case \"row\":\n            return permanent.slot.row === query.row;\n          case \"column\":\n            return permanent.slot.column === query.column;\n          case \"slot\":\n            if (query.slot === undefined) throw new Error();\n            return areSlotsEqual(permanent.slot, query.slot);\n          case \"rowInFrontOf\":\n            if (query.rowInFrontOf === undefined) throw new Error();\n            return inspector.isRowInFrontOf(\n              permanent.slot.row,\n              query.rowInFrontOf.row,\n              query.rowInFrontOf.perspective\n            );\n          case \"rowBehind\":\n            if (query.rowBehind === undefined) throw new Error();\n            return inspector.isRowInFrontOf(\n              query.rowBehind.row,\n              permanent.slot.row,\n              query.rowBehind.perspective\n            );\n          case \"adjacentTo\": // excludes SELF\n            if (query.adjacentTo === undefined) throw new Error();\n            return areSlotsAdjacent(permanent.slot, query.adjacentTo);\n          case \"touching\": // includes SELF and diagonals\n            if (query.touching === undefined) throw new Error();\n            return (\n              getSlotsEuclideanDistance(permanent.slot, query.touching) < 2\n            );\n          case \"columnAdjacentTo\":\n            if (query.columnAdjacentTo === undefined) throw new Error();\n            return (\n              Math.abs(permanent.slot.column - query.columnAdjacentTo) === 1\n            );\n          case \"protectedFrom\":\n            if (query.protectedFrom === undefined) throw new Error();\n            return inspector.isProtectedFrom(permanent, query.protectedFrom);\n          case \"notProtectedFrom\":\n            if (query.notProtectedFrom === undefined) throw new Error();\n            return !inspector.isProtectedFrom(\n              permanent,\n              query.notProtectedFrom\n            );\n          case \"except\":\n            if (query.except === undefined) throw new Error();\n            return permanent.id !== query.except.id;\n          case \"custom\":\n            if (query.custom === undefined) throw new Error();\n            return query.custom(permanent);\n          case \"hasCounter\":\n            if (query.hasCounter === undefined) throw new Error();\n            return inspector.doesPermanentHaveCounterType(\n              permanent,\n              query.hasCounter\n            );\n          case \"sort\":\n            // not actually a filtering key\n            return true;\n        }\n        throw new Error(`unrecognized permanent filter key ${k}`);\n      })();\n      if (!matches) return false;\n    }\n    return true;\n  });\n  if (query.sort) {\n    permanents.sort((p1, p2) => {\n      if (query.sort === undefined) throw new Error();\n      for (const sortCriterion of query.sort) {\n        const sortResult =\n          evalSortCriterion(p1, sortCriterion, inspector) -\n          evalSortCriterion(p2, sortCriterion, inspector);\n        if (sortResult !== 0) {\n          return sortResult;\n        }\n      }\n      return 0;\n    });\n  }\n  return permanents;\n};\n","import { Deck } from \"engine/types/decks\";\nimport {\n  CardData,\n  CardType,\n  ColorSymbol,\n  GemColor,\n  CostColor,\n  CardColor,\n  getDefaultCreateGemsColors,\n} from \"engine/types/card-data\";\nimport {\n  Card,\n  HandCard,\n  Permanent,\n  CardLike,\n  Slot,\n  Player,\n  DevKnobs,\n  GamePhase,\n  GAME_PHASE_ORDER,\n  GameState,\n  areSlotsAdjacent,\n  getSlotsEuclideanDistance,\n  isCheckpointSlotValid,\n} from \"engine/types/game-state\";\nimport { CounterType, ValueCounterType } from \"engine/types/counters\";\nimport {\n  AbilityType,\n  EffectOptType,\n  EffectOpt,\n  EffectOptResolved,\n  EffectOptForm,\n  EffectOptValidationContext,\n} from \"engine/types/effects\";\nimport { Step, StepResolved, StepType, stepToPlayer } from \"engine/types/steps\";\nimport { Role, canRoleControlPlayer } from \"engine/types/updates\";\nimport { Check, FailedChecks } from \"engine/types/action-validation\";\nimport {\n  SharedGameSpec,\n  StaticInspectorContext,\n  InspectorContext,\n} from \"engine/types/shared-game-specs\";\nimport { calcFactionScore } from \"engine/types/factions\";\nimport {\n  CardEffectsShared,\n  validateEffectOpt,\n  SharedEffectsDB,\n} from \"engine/cards/card-effects-shared\";\nimport { CardsDB } from \"engine/cards/CardsDB\";\nimport { DRAW_CARD_MASTERY_ID } from \"engine/puzzles/mastery-data\";\nimport { PermanentQuery, queryPermanents } from \"engine/PermanentQuery\";\nimport { StepMaker } from \"engine/StepMaker\";\nimport { validateDeck } from \"game-server/deckbuilding\";\nimport { getAllSlots } from \"engine/types/game-state\";\n\n/**\n * Card or game spec related utility functions. Does not mutate.\n * Used to inspect properties that do not depend on game state.\n * For now, anything here should work nicely with multiple game specs.\n * This is because there may not be a \"primary\" game spec in contexts\n * like deckbuilding.\n */\nexport class StaticInspector {\n  cardsDB: CardsDB;\n  effectsDB: SharedEffectsDB;\n  allSpecs: ReadonlyArray<SharedGameSpec>;\n\n  constructor(\n    allSpecs: ReadonlyArray<SharedGameSpec>,\n    cardsDB: CardsDB,\n    effectsDB: SharedEffectsDB\n  ) {\n    this.allSpecs = allSpecs;\n    this.cardsDB = cardsDB;\n    this.effectsDB = effectsDB;\n  }\n\n  /** Returns what a GameSpec can get from the Inspector. */\n  makeContext(): StaticInspectorContext {\n    return {\n      inspector: this,\n    };\n  }\n\n  /** Whether we have an AI. */\n  hasAI(): boolean {\n    return this.allSpecs.some((spec) => spec.hasAI ?? false);\n  }\n\n  getDefaultRole(): Role {\n    if (this.hasAI()) return Role.P1;\n    return Role.GOD;\n  }\n\n  isNoDeckAllowed(): boolean {\n    for (const spec of this.allSpecs.slice().reverse()) {\n      if (spec.allowNoDeck ?? false) return true;\n    }\n    return false;\n  }\n\n  areCheckpointsAllowed(): boolean {\n    return this.allSpecs.some((spec) => spec.allowCheckpoints ?? false);\n  }\n\n  getDeckOverride(player: Player): ReadonlyArray<string> | null {\n    for (const spec of this.allSpecs.slice().reverse()) {\n      const deckOverride = spec.deckOverrides?.[player] ?? null;\n      if (deckOverride !== null) return deckOverride;\n    }\n\n    // AIs should always have an override deck. If none is supplied,\n    // use an empty deck by default.\n    if (this.hasAI() && player === Player.P2) return [];\n\n    return null;\n  }\n\n  getMaxNumCards(): number {\n    return 30;\n  }\n\n  getMaxNumLegendaries(): number {\n    for (const { maxNumLegendaries } of this.allSpecs) {\n      if (maxNumLegendaries !== undefined) return maxNumLegendaries;\n    }\n    return 1;\n  }\n\n  validateDeck(failedChecks: FailedChecks, player: Player, deck: Deck) {\n    const maxNumCards = this.getMaxNumCards();\n    const maxNumLegendaries = this.getMaxNumLegendaries();\n    if (deck !== undefined)\n      validateDeck(failedChecks, deck, maxNumCards, maxNumLegendaries);\n\n    for (const spec of this.allSpecs) {\n      if (spec.adjustDeckChecks) {\n        spec.adjustDeckChecks(\n          failedChecks,\n          player,\n          deck ?? null,\n          this.makeContext()\n        );\n      }\n    }\n  }\n\n  getCardName(arg: CardLike): string {\n    if (typeof arg === \"string\") return arg;\n    // If `card` exists, then this is a HandCard or Permanent.\n    if (arg.card !== undefined) return this.getCardName(arg.card);\n    // If `displayName` exists, then this is a CardData.\n    if (arg.displayName !== undefined) return arg.name;\n    // Otherwise, this is a Card.\n    if (arg.name === undefined) {\n      throw new Error(\"card not known\");\n    }\n    return arg.name;\n  }\n\n  getCardData(arg: CardLike): CardData {\n    const name = typeof arg === \"string\" ? arg : this.getCardName(arg);\n    return this.cardsDB[name];\n  }\n\n  getSharedEffects(arg: CardLike): CardEffectsShared {\n    const effects = this.effectsDB[this.getCardName(arg)];\n    return effects ? effects : {};\n  }\n\n  isLegendary(arg: CardLike): boolean {\n    return this.getSharedEffects(arg).isLegendary ?? false;\n  }\n}\n\n/** Utilities to inspect game state. Does not mutate. */\nexport class Inspector {\n  cardsDB: CardsDB;\n  effectsDB: SharedEffectsDB;\n  gameSpec: SharedGameSpec;\n  allSpecs: ReadonlyArray<SharedGameSpec>;\n  gameState: GameState;\n  staticInspector: StaticInspector;\n\n  constructor(\n    gameSpec: SharedGameSpec,\n    allSpecs: ReadonlyArray<SharedGameSpec>,\n    cardsDB: CardsDB,\n    effectsDB: SharedEffectsDB,\n    gameState: GameState\n  ) {\n    this.gameSpec = gameSpec;\n    this.allSpecs = allSpecs;\n\n    this.cardsDB = cardsDB;\n    this.effectsDB = effectsDB;\n    this.gameState = gameState;\n    this.staticInspector = new StaticInspector(\n      this.allSpecs,\n      this.cardsDB,\n      this.effectsDB\n    );\n  }\n\n  /** Returns what a GameSpec can get from the Inspector. */\n  makeContext(): InspectorContext {\n    return {\n      inspector: this,\n    };\n  }\n\n  /** Check if player has mastery masteryId enabled. */\n  doesPlayerHaveMastery(player: Player, masteryId: string): boolean {\n    return (\n      this.gameState[player].teamData?.enabledMasteries[masteryId] ?? false\n    );\n  }\n\n  /** Get the number of rows on the board. */\n  getNumRows(): number {\n    for (const spec of this.allSpecs.slice().reverse()) {\n      if (spec.numRows !== undefined) return spec.numRows;\n    }\n    throw new Error(\"no definition for num rows\");\n  }\n\n  /** Get the number of columns on the board. */\n  getNumColumns(): number {\n    for (const spec of this.allSpecs.slice().reverse()) {\n      if (spec.numColumns !== undefined) return spec.numColumns;\n    }\n    throw new Error(\"no definition for num columns\");\n  }\n\n  getSlotBackground(slot: Slot): string {\n    if (this.gameSpec.getSlotBackground) {\n      return this.gameSpec.getSlotBackground(slot, this.makeContext());\n    }\n    return \"\";\n  }\n\n  isNoDeckAllowed(): boolean {\n    return this.staticInspector.isNoDeckAllowed();\n  }\n\n  getDeckOverride(player: Player): ReadonlyArray<string> | null {\n    return this.staticInspector.getDeckOverride(player);\n  }\n\n  getBasesOverride(player: Player): ReadonlyArray<string> | null {\n    return this.gameSpec.basesOverrides?.[player] ?? null;\n  }\n\n  getDefaultBases(player: Player): ReadonlyArray<string> {\n    return this.getBasesOverride(player) ?? [\"camp\", \"camp\", \"camp\"];\n  }\n\n  getBasePositions(player: Player, numBases: number): ReadonlyArray<number> {\n    const baseColumnOverride = this.gameSpec.baseColumnOverrides?.[player];\n    if (baseColumnOverride !== undefined) {\n      if (baseColumnOverride.length !== numBases)\n        throw new Error(\"base column override has wrong number of columns\");\n      return baseColumnOverride;\n    }\n\n    const width = this.getNumColumns();\n    if (numBases > width) throw new Error(\"too many bases\");\n    if (numBases == 1) return [Math.floor((width - 1) / 2)]; // center position\n    // bases are distributed as evenly as possible, with the first base going on\n    // the far left and the last base going on the far right\n    const baseColumns: number[] = [];\n    for (let i = 0; i < numBases; i++) {\n      baseColumns.push(Math.round((i * (width - 1)) / (numBases - 1)));\n    }\n    return baseColumns;\n  }\n\n  getEndCutsceneRedirect(): string | null {\n    for (const { endCutsceneRedirect } of this.allSpecs) {\n      if (endCutsceneRedirect !== undefined) return endCutsceneRedirect;\n    }\n    return null;\n  }\n\n  getEndCutsceneRedirectDjango(): string | null {\n    for (const { endCutsceneRedirectDjango } of this.allSpecs) {\n      if (endCutsceneRedirectDjango !== undefined)\n        return endCutsceneRedirectDjango;\n    }\n    return null;\n  }\n\n  /**\n   * Check if the game has started. If the game has not started, the\n   * client should still be in the \"prep for battle\" screen.\n   */\n  hasGameStarted(): boolean {\n    return (\n      GAME_PHASE_ORDER[this.gameState.phase] >=\n      GAME_PHASE_ORDER[GamePhase.ACTIVE]\n    );\n  }\n\n  /**\n   * Check if the game is active, meaning that it can receive\n   * steps for player game actions.\n   */\n  isGameActive(): boolean {\n    return this.gameState.phase === GamePhase.ACTIVE;\n  }\n\n  /**\n   * Check if the game has ended, meaning that the end modal\n   * can be shown.\n   */\n  hasGameEnded(): boolean {\n    return (\n      GAME_PHASE_ORDER[this.gameState.phase] >=\n      GAME_PHASE_ORDER[GamePhase.ENDED]\n    );\n  }\n\n  getSpeedrunTime(): number {\n    if (!this.hasGameEnded())\n      throw new Error(\n        \"getting speedrun time not supported before the game has ended\"\n      );\n    const p1State = this.gameState[Player.P1];\n    const p2State = this.gameState[Player.P2];\n    if (p1State.startTurnTime !== null || p2State.startTurnTime !== null)\n      throw new Error(\n        \"expect start turn times to be unset once game has ended\"\n      );\n\n    // Currently, speedrun times are only defined for single-player games,\n    // so we just include the time from both players.\n    return p1State.prevTurnsTime + p2State.prevTurnsTime;\n  }\n\n  calcFactionScore(player: Player, isPvP: boolean, isSolved: boolean): number {\n    if (!isPvP && (!isSolved || player !== Player.P1)) return 0;\n    const playerState = this.gameState[player];\n    const winner = this.gameState.winner;\n    const { stats } = playerState;\n    return calcFactionScore(stats, isPvP, winner === player);\n  }\n\n  /**\n   * Get the current turn number. This counts turns from both players.\n   * It starts from 0 and increments every time a turn is ended.\n   */\n  getTurnNumber(): number {\n    return this.gameState.turnNumber;\n  }\n\n  /** Get the opponent of a player. */\n  getOpponentOf(player: Player): Player {\n    return player === Player.P1 ? Player.P2 : Player.P1;\n  }\n\n  /**\n   * Returns a card's name, throws if not known.\n   * A card's name is a unique identifier for the card, and is\n   * distinct from its display name.\n   */\n  getCardName(card: CardData | Card): string;\n\n  /**\n   * Returns a permanent's card name, throws if not known.\n   * A card's name is a unique identifier for the card, and is\n   * distinct from its display name, or the permanent's ID.\n   */\n  getCardName(permanent: Permanent): string;\n\n  getCardName(arg: CardLike): string;\n\n  getCardName(arg: CardLike): string {\n    return this.staticInspector.getCardName(arg);\n  }\n\n  /**\n   * Returns a card or permanent's card data, throws if not known.\n   * If a string is passed in, it is interpreted as a card name.\n   */\n  getCardData(arg: CardLike): CardData {\n    return this.staticInspector.getCardData(arg);\n  }\n\n  /** Returns a card's name, throws if not known. */\n  getCardDisplayName(card: string | CardData | Card): string;\n\n  /** Returns a permanent's card name, throws if not known. */\n  getCardDisplayName(permanent: Permanent): string;\n\n  getCardDisplayName(arg: CardLike): string {\n    return this.getCardData(arg).displayName;\n  }\n\n  /**\n   * Get the color of a card or permanent.\n   * If a string is passed in, it is interpreted as a card name.\n   */\n  getCardColor(arg: CardLike): CardColor | null {\n    return this.getCardData(arg).color;\n  }\n\n  /**\n   * Returns the player's draw pile (current deck in play)\n   * Can be empty.\n   */\n  getDrawPile(player: Player): ReadonlyArray<Card> {\n    const drawPile = this.gameState[player].drawPile;\n    if (drawPile === undefined) {\n      throw new Error(\"draw pile not visible\");\n    }\n    return drawPile;\n  }\n\n  /**\n   * Get gem colors that the card or permanent can create.\n   */\n  getCreateGemsColors(arg: CardLike): GemColor[][] {\n    const effects = this.getSharedEffects(arg);\n    if (effects.createGemColors) {\n      return effects.createGemColors;\n    }\n\n    const cardColor = this.getCardColor(arg);\n    if (cardColor !== null) {\n      return getDefaultCreateGemsColors(cardColor);\n    }\n    return [];\n  }\n\n  /**\n   * Returns the top two cards of player's draw pile, if they exit.\n   * Throws if draw pile not visible.\n   */\n  getTopCardsInDrawPile(player: Player): {\n    topCard: Card | null;\n    nextTopCard: Card | null;\n  } {\n    const drawPile = this.gameState[player].drawPile;\n    if (drawPile === undefined) {\n      throw new Error(\"draw pile not visible\");\n    }\n    const drawPileSize = drawPile.length;\n    return {\n      topCard: drawPileSize > 0 ? drawPile[drawPileSize - 1] : null,\n      nextTopCard: drawPileSize > 1 ? drawPile[drawPileSize - 2] : null,\n    };\n  }\n\n  /**\n   * Get a card in a Player's hand, or null if it doesn't exist.\n   */\n  getCardInHandIfExists(player: Player, handCardId: string): HandCard | null {\n    const handCard = this.gameState[player].hand.find((handCard) => {\n      return handCard.id === handCardId;\n    });\n    if (handCard === undefined) {\n      return null;\n    }\n    return handCard;\n  }\n\n  /**\n   * Get the card with ID handCardId in a Player's hand; throws if\n   * it doesn't exist.\n   */\n  getCardInHand(player: Player, handCardId: string): HandCard {\n    const card = this.getCardInHandIfExists(player, handCardId);\n    if (card === null) {\n      throw new Error(\"card does not exist in hand\");\n    }\n    return card;\n  }\n\n  /**\n   * Get the row'th row nearest to player.\n   */\n  getRowForPlayer(row: number, player: Player): number {\n    if (player === Player.P1) return this.getNumRows() - row - 1;\n    else return row;\n  }\n\n  /** Get all slots, in an unspecified order. */\n  getAllSlots(): Slot[] {\n    return getAllSlots(this.getNumRows(), this.getNumColumns());\n  }\n\n  /**\n   * Get all unoccupied slots for a player's side.\n   */\n  getUnoccupiedSlots(player: Player): Slot[] {\n    return this.getAllSlots().filter(\n      (slot) => this.getTerrainOf(slot) === player && !this.isSlotOccupied(slot)\n    );\n  }\n\n  /**\n   * Get all unoccupied slots for a player's side, sorted by distance to a given slot.\n   * No guarantee on the order of equidistant slots.\n   * example:\n   *    .\n   *   748\n   *  .3019\n   *   625\n   *    .\n   */\n  getUnoccupiedSlotsClosestTo(player: Player, slot: Slot): Slot[] {\n    return this.getUnoccupiedSlots(player).sort(\n      (a, b) =>\n        getSlotsEuclideanDistance(a, slot) - getSlotsEuclideanDistance(b, slot)\n    );\n  }\n\n  /**\n   * Returns the slot reflected to the opponent's side.\n   */\n  getReflectedSlot(slot: Slot): Slot {\n    return {\n      row: this.getNumRows() - slot.row - 1,\n      column: slot.column,\n    };\n  }\n\n  /** Get adjacent friendly permanents to a permanent. */\n  getAdjacentFriendlyPermanents(permanent: Permanent): Permanent[] {\n    return this.getPermanents({\n      owner: permanent.owner,\n      adjacentTo: permanent.slot,\n    });\n  }\n\n  /** Get friendly permanents behind a permanent from closest to furthest */\n  getBehindFriendlyPermanents(permanent: Permanent): Permanent[] {\n    const player = permanent.owner;\n    return this.getPermanents({\n      owner: player,\n      column: permanent.slot.column,\n      rowBehind: { row: permanent.slot.row, perspective: player },\n      sort: [\n        // sort by closest to furthest\n        { type: \"frontToBack\", perspective: player },\n      ],\n    });\n  }\n\n  getBases(player: Player): Permanent[] {\n    return this.getPermanents({\n      owner: player,\n      isBase: true,\n    });\n  }\n\n  /** Is this column in bounds? */\n  isColumnInBounds(column: number): boolean {\n    if (column < 0 || column >= this.getNumColumns()) return false;\n    return true;\n  }\n\n  /**\n   * Returns the row index from a player's perspective, where the\n   * zeroth row is the row nearest to the player.\n   */\n  getPlayerRowIndex(row: number, player: Player): number {\n    switch (player) {\n      case Player.P1:\n        return this.getNumRows() - row - 1;\n      case Player.P2:\n        return row;\n    }\n  }\n\n  /**\n   * Returns the row index of the nth nearest row from a player's\n   * perspective.\n   */\n  getNthNearestRow(row: number, player: Player): number {\n    switch (player) {\n      case Player.P1:\n        return this.getNumRows() - row - 1;\n      case Player.P2:\n        return row;\n    }\n  }\n\n  /** Returns if row1 is in front of row2 from player's perspective. */\n  isRowInFrontOf(row1: number, row2: number, player: Player): boolean {\n    return (\n      this.getPlayerRowIndex(row1, player) >\n      this.getPlayerRowIndex(row2, player)\n    );\n  }\n\n  /**\n   * Returns if permanent is in opponent terrain,\n   * meaning it no longer Protects Friendly Units and can attack Protected Enemy Units.\n   */\n  isSneaky(permanent: Permanent): boolean {\n    const terrainOwner = this.getTerrainOf(permanent.slot);\n    return permanent.owner !== terrainOwner;\n  }\n\n  /**\n   * Returns if defender is protected from attacker, taking into account things\n   * like passives.\n   */\n  isProtectedFrom(defender: Permanent, attacker: Permanent): boolean {\n    const defenderSlot = defender.slot;\n    const attackerSlot = attacker.slot;\n    const defenderPlayer = defender.owner;\n    const attackerPlayer = attacker.owner;\n    const defenderTerrain = this.getTerrainOf(defenderSlot);\n    const attackerTerrain = this.getTerrainOf(attackerSlot);\n\n    if (attackerPlayer === defenderTerrain) {\n      // If the attacker is in hostile terrain, it treats all\n      // hostile units as unprotected.\n      return false;\n    }\n\n    const defenderPermanents = this.getPermanentsOf(defenderPlayer);\n\n    // A unit in hostile terrain is unprotected.\n    if (defenderPlayer === attackerTerrain) return false;\n\n    // A unit is protected if there is at least one allied unit\n    // in front of it (up to the midline of the battlefield).\n    if (\n      defenderPermanents.some(\n        (permanent) =>\n          this.getTerrainOf(permanent.slot) === defenderTerrain &&\n          permanent.slot.column === defenderSlot.column &&\n          this.isRowInFrontOf(\n            permanent.slot.row,\n            defenderSlot.row,\n            defenderPlayer\n          ) &&\n          !this.doesPermanentHaveCounterType(\n            permanent,\n            CounterType.DOES_NOT_PROTECT\n          )\n      )\n    )\n      return true;\n\n    for (const spec of this.allSpecs) {\n      if (\n        spec.extraProtectedChecks &&\n        spec.extraProtectedChecks(defender, attacker, this.makeContext())\n      )\n        return true;\n    }\n\n    return false;\n  }\n\n  /** Is this slot in bounds? */\n  isSlotInBounds(slot: Slot): boolean {\n    const { row, column } = slot;\n    if (row < 0 || row >= this.getNumRows()) return false;\n    if (!this.isColumnInBounds(column)) return false;\n    return true;\n  }\n\n  /** Whose terrain is this? */\n  getTerrainOf(slot: Slot): Player {\n    if (slot.row < this.getNumRows() / 2) return Player.P2;\n    return Player.P1;\n  }\n\n  /** Get the permanent in slot if one exists, otherwise returns null. */\n  getPermanentAtIfExists(slot: Slot): Permanent | null {\n    const permanents = this.getPermanentsAt(slot);\n    if (permanents.length > 1) {\n      throw new Error(\"should have at most one permanent per slot\");\n    }\n    return permanents[0] ?? null;\n  }\n\n  /** Get all permanents in the given slot. */\n  getPermanentsAt(slot: Slot): Permanent[] {\n    return this.getPermanents({ slot });\n  }\n\n  /** Is there a permanent (creature or structure) in this slot? */\n  isSlotOccupied(slot: Slot): boolean {\n    return this.getPermanentsAt(slot).length > 0;\n  }\n\n  /** Get all permanents. */\n  getAllPermanents(): Permanent[] {\n    return Object.values(this.gameState.permanents);\n  }\n\n  /**\n   * Get permanents filtered and sorted by given criteria.\n   * See {@link PermanentQuery} for the query format.\n   */\n  getPermanents(query: PermanentQuery): Permanent[] {\n    return queryPermanents(this, query);\n  }\n\n  /** Get all permanents controlled by a player. */\n  getPermanentsOf(player: Player): Permanent[] {\n    return this.getPermanents({ owner: player });\n  }\n\n  /** Get the permanent with given id, returning null if one doesn't exist. */\n  getPermanentIfExists(id: string): Permanent | null {\n    return this.gameState.permanents[id] ?? null;\n  }\n\n  /** Get the permanent with given id, asserting its existence. */\n  getPermanent(id: string): Permanent {\n    const permanent = this.getPermanentIfExists(id);\n    if (permanent === null) {\n      throw new Error(`permanent ${id} does not exist`);\n    }\n    return permanent;\n  }\n\n  /** Check if a permanent still exists in the field. */\n  doesPermanentExist(permanent: Permanent): boolean {\n    return this.getPermanentIfExists(permanent.id) !== null;\n  }\n\n  /** Get a player's gems. */\n  getPlayerGems(player: Player): ReadonlyArray<GemColor> {\n    return this.gameState[player].gems;\n  }\n\n  // Get the cost of drawing a card.\n  getDrawCardCost(): CostColor[] {\n    return [ColorSymbol.ROCK, ColorSymbol.ROCK];\n  }\n\n  /**\n   * Resolve what gems are used to pay for a cost, given a set of\n   * available gems.\n   * Does so greedily, by paying with more specific gems first.\n   * Returns null if gems can't pay.\n   */\n  resolvePayment(\n    player: Player,\n    costs: ReadonlyArray<CostColor>\n  ): GemColor[] | null {\n    if (player === Player.P2 && this.gameSpec.aiDisableGemAccounting) return [];\n    const available = this.getPlayerGems(player);\n    // Get available and costs as frequency maps.\n    // availableMap[color] can be undefined or 0 when there is no more of that ColorSymbol available.\n    const availableMap = new Map<GemColor, number>();\n    for (const color of available) {\n      availableMap.set(color, (availableMap.get(color) ?? 0) + 1);\n    }\n    const costMap = new Map<CostColor, number>();\n    for (const color of costs) {\n      costMap.set(color, (costMap.get(color) ?? 0) + 1);\n    }\n    const payment: GemColor[] = [];\n\n    const pay = (gemColor: GemColor, costColor: CostColor, num: number) => {\n      if (num === 0) return;\n      if (num < 0) throw new Error(\"negative payment\");\n      const leftover = (availableMap.get(gemColor) ?? 0) - num;\n      const leftoverCost = (costMap.get(costColor) ?? 0) - num;\n      if (leftoverCost < 0) throw new Error(\"overpaid\");\n      if (leftover < 0) throw new Error(\"overspent\");\n      availableMap.set(gemColor, leftover);\n      costMap.set(costColor, leftoverCost);\n      for (let i = 0; i < num; i++) {\n        payment.push(gemColor);\n      }\n    };\n\n    /** Pay as much of the gem color towards the cost color. */\n    const payMax = (gemColor: GemColor, costColor: CostColor) => {\n      pay(\n        gemColor,\n        costColor,\n        Math.min(availableMap.get(gemColor) ?? 0, costMap.get(costColor) ?? 0)\n      );\n    };\n\n    const costColorToGemColor = (color: CostColor): GemColor | null => {\n      switch (color) {\n        case ColorSymbol.RED:\n        case ColorSymbol.YELLOW:\n        case ColorSymbol.GREEN:\n        case ColorSymbol.PURPLE:\n        case ColorSymbol.WHITE:\n        case ColorSymbol.BLACK:\n          return color;\n        default:\n          return null;\n      }\n    };\n\n    // Handle the concrete colors.\n    for (const [costColor, cost] of costMap) {\n      const gemColor = costColorToGemColor(costColor);\n      if (gemColor === null) continue;\n\n      payMax(gemColor, costColor);\n\n      // See if the rainbow gems in our possession can cover the cost.\n      payMax(ColorSymbol.RAINBOW, costColor);\n    }\n\n    // Now handle the multiple-possibility costs (WHITEBLACK and RAINBOW).\n    // We do this by determining \"least popular\" gems and using those to pay first.\n\n    // For each color, add all non-rock gem costs in hand.\n    const numUses = new Map<CostColor, number>();\n    const incNumUses = (color: CostColor) => {\n      numUses.set(color, (numUses.get(color) ?? 0) + 1);\n    };\n    if (player) {\n      for (const card of this.gameState[player].hand) {\n        // If we don't have access to a card, don't include it\n        // in the heuristic.\n        if (card.card.name === undefined) continue;\n\n        for (const color of this.getCardData(card).cost) {\n          if (color !== ColorSymbol.ROCK) {\n            incNumUses(color);\n          }\n        }\n      }\n      // For each color, add all owned ready permanents in play.\n      for (const permanent of this.getPermanents({\n        owner: player,\n        ready: true,\n      })) {\n        // If we don't have access to a card, don't include it\n        // in the heuristic.\n        if (permanent.card.name === undefined) continue;\n\n        const color = this.getCardColor(permanent);\n        if (color !== null) incNumUses(color);\n      }\n    }\n\n    const costTiebreakOrder: { [color in CostColor]: number } = {\n      [ColorSymbol.RED]: 0,\n      [ColorSymbol.YELLOW]: 1,\n      [ColorSymbol.GREEN]: 2,\n      [ColorSymbol.PURPLE]: 3,\n      [ColorSymbol.WHITE]: 4,\n      [ColorSymbol.BLACK]: 5,\n      [ColorSymbol.WHITEBLACK]: 6,\n      [ColorSymbol.ROCK]: 7,\n    };\n\n    // Some colors might not appear in the frequency map, so handle\n    // any remaining available colors.\n    for (const gemColor of availableMap.keys()) {\n      if (gemColor === ColorSymbol.RAINBOW) continue;\n      if (numUses.has(gemColor)) continue;\n      numUses.set(gemColor, 0);\n    }\n\n    // Now sort ascending by frequency, with ColorSymbol enum order as a tiebreaker.\n    const colorFreqPairs = Array.from(numUses).sort((a, b) => {\n      const difference = a[1] - b[1];\n      return difference == 0\n        ? costTiebreakOrder[a[0]] - costTiebreakOrder[b[0]]\n        : difference;\n    });\n\n    // Handle WHITEBLACK.\n    const whiteIndex = colorFreqPairs.find(\n      ([color, _]) => color === ColorSymbol.WHITE\n    );\n    const blackIndex = colorFreqPairs.find(\n      ([color, _]) => color === ColorSymbol.BLACK\n    );\n    if (\n      (whiteIndex ?? colorFreqPairs.length) <=\n      (blackIndex ?? colorFreqPairs.length)\n    ) {\n      // White is \"less popular\" than black.\n      payMax(ColorSymbol.WHITE, ColorSymbol.WHITEBLACK);\n      // Consume all the W, then overflow over to B.\n      payMax(ColorSymbol.BLACK, ColorSymbol.WHITEBLACK);\n    } else {\n      // Black is \"less popular\" than white.\n      payMax(ColorSymbol.BLACK, ColorSymbol.WHITEBLACK);\n      // Consume all the B, then overflow over to W.\n      payMax(ColorSymbol.WHITE, ColorSymbol.WHITEBLACK);\n    }\n    // If necessary, overflow onto Rainbow.\n    payMax(ColorSymbol.RAINBOW, ColorSymbol.WHITEBLACK);\n\n    // Handle ROCK.\n    // Go through all the concrete colors to see if we can use them to pay for the ROCKs.\n    for (const [costColor, freq] of colorFreqPairs) {\n      const gemColor = costColorToGemColor(costColor);\n      if (gemColor === null) continue;\n      payMax(gemColor, ColorSymbol.ROCK);\n    }\n    // Handle RAINBOW last, so that it has lower priority than\n    // the concrete colors.\n    payMax(ColorSymbol.RAINBOW, ColorSymbol.ROCK);\n\n    // If the payment doesn't cover the costs, then we're not able to pay.\n    if (payment.length < costs.length) return null;\n\n    return payment;\n  }\n\n  /**\n   * Subtract payment from gems. Throws if can't pay.\n   * Returns the gems remaining.\n   */\n  subtractGems(\n    gems: ReadonlyArray<GemColor>,\n    payment: ReadonlyArray<GemColor>\n  ): GemColor[] {\n    const remainingGems = gems.slice();\n    for (const paymentGem of payment) {\n      const index = remainingGems.findIndex((gem) => gem === paymentGem);\n      if (index === -1) throw new Error(\"payment not a subset of gems\");\n      remainingGems.splice(index, 1);\n    }\n    return remainingGems;\n  }\n\n  /** Can player perform an action at this time? */\n  isTurnPending(player: Player): boolean {\n    if (this.isNoTurnCheck()) return true;\n    if (!this.isGameActive()) return false;\n    return this.gameState.currentTurnPlayer === player;\n  }\n\n  /**\n   * Computes card text. If the card has an effect defined for computeText,\n   * returns the result of that function. Otherwise, gets the text from the\n   * card data. */\n  getCardText(arg: CardLike): string {\n    if (!(typeof arg === \"object\" && arg.counters !== undefined))\n      return this.getCardData(arg).text;\n\n    const permanent = arg;\n    const computeTextFn = this.getSharedEffects(permanent).computeText;\n    return computeTextFn !== undefined\n      ? computeTextFn(permanent, this.makeContext())\n      : this.getCardData(permanent).text;\n  }\n\n  /** Get the sum of all counters for a permanent matching a type. */\n  getCounterValSum(permanent: Permanent, type: ValueCounterType): number {\n    let totVal = 0;\n    for (const counter of permanent.counters) {\n      if (counter.type === type) {\n        totVal += counter.val;\n      }\n    }\n    return totVal;\n  }\n\n  /** Returns whether permanent has counter of type counterType. */\n  doesPermanentHaveCounterType(\n    permanent: Permanent,\n    counterType: CounterType\n  ): boolean {\n    return permanent.counters.some((counter) => counter.type === counterType);\n  }\n\n  /**\n   * Get the effects that are shared with client and server.\n   * If a string is passed in, it is interpreted as a card name.\n   */\n  getSharedEffects(arg: CardLike): CardEffectsShared {\n    return this.staticInspector.getSharedEffects(arg);\n  }\n\n  /** Get whether a card is a legendary. */\n  isLegendary(arg: CardLike): boolean {\n    return this.staticInspector.isLegendary(arg);\n  }\n\n  /**\n   * Get the ability cost of a card or permanent.\n   * Returns null if there's no such ability.\n   * If a string is passed in, it is interpreted as a card name.\n   */\n  getAbilityCostIfExists(\n    arg: CardLike,\n    abilityType: AbilityType\n  ): CostColor[] | null {\n    const effects = this.getSharedEffects(arg);\n    switch (abilityType) {\n      case AbilityType.FLEX: {\n        return effects.flexCost ?? null;\n      }\n      case AbilityType.SPECIAL: {\n        return effects.specialCost ?? null;\n      }\n    }\n  }\n\n  /**\n   * Returns a card or permanent's type (whether it is a creature\n   * or a structure).\n   * If a string is passed in, it is interpreted as a card name.\n   */\n  getCardType(arg: CardLike): CardType {\n    const isStructure = this.getSharedEffects(arg).isStructure ?? false;\n    return isStructure ? CardType.STRUCTURE : CardType.CREATURE;\n  }\n\n  /**\n   * Returns a card or permanent's base power.\n   * If a string is passed in, it is interpreted as a card name.\n   */\n  getBasePower(arg: CardLike): number {\n    const powerOverride = this.getSharedEffects(arg).power;\n    if (powerOverride !== undefined) return powerOverride;\n    return this.getCardData(arg).power;\n  }\n\n  /**\n   * Returns card's power.\n   * If a string is passed in, it is interpreted as a card name.\n   */\n  getPower(card: string | CardData | Card): number;\n\n  /**\n   * Returns permanent's power, including adjustments.\n   */\n  getPower(permanent: Permanent): number;\n\n  getPower(arg: CardLike): number {\n    // If arg is a card, then there is only the base power.\n    if (!(typeof arg === \"object\" && arg.counters !== undefined))\n      return this.getBasePower(arg);\n\n    const permanent = arg;\n    const adjustment = this.getCounterValSum(\n      permanent,\n      CounterType.POWER_ADJUSTMENT\n    );\n    return Math.max(this.getBasePower(permanent) + adjustment, 0);\n  }\n\n  /**\n   * Returns a card or permanent's base (max) health.\n   * If a string is passed in, it is interpreted as a card name.\n   */\n  getBaseHealth(arg: CardLike): number {\n    const maxHealthOverride = this.getSharedEffects(arg).maxHealth;\n    if (maxHealthOverride !== undefined) return maxHealthOverride;\n    return this.getCardData(arg).maxHealth;\n  }\n\n  /** Returns a permanent's max health, including adjustments. */\n  getMaxHealth(permanent: Permanent): number {\n    const adjustment = this.getCounterValSum(\n      permanent,\n      CounterType.MAX_HEALTH_ADJUSTMENT\n    );\n    return Math.max(this.getBaseHealth(permanent) + adjustment, 0);\n  }\n\n  /**\n   * Returns card's health.\n   * If a string is passed in, it is interpreted as a card name.\n   */\n  getHealth(card: string | CardData | Card): number;\n\n  /**\n   * Returns permanent's health, including adjustments and damage.\n   */\n  getHealth(permanent: Permanent): number;\n\n  getHealth(arg: CardLike): number {\n    // If arg is a card, then there is only the base health.\n    if (!(typeof arg === \"object\" && arg.counters !== undefined))\n      return this.getBaseHealth(arg);\n\n    const permanent = arg;\n    const health = this.getMaxHealth(permanent) - permanent.damage;\n    if (health < 0) {\n      // The Reducer should guarantee that health never goes below 0.\n      throw new Error(\"health should not be negative\");\n    }\n    return health;\n  }\n\n  /**\n   * Returns a card or permanent's base shell.\n   * If a string is passed in, it is interpreted as a card name.\n   */\n  getBaseShell(arg: CardLike): number {\n    return this.getCardData(arg).shell;\n  }\n\n  /**\n   * Returns card's shell.\n   * If a string is passed in, it is interpreted as a card name.\n   */\n  getShell(card: string | CardData | Card): number;\n\n  /**\n   * Returns permanent's shell, including adjustments.\n   */\n  getShell(permanent: Permanent): number;\n\n  getShell(arg: CardLike): number {\n    // If arg is a card, then there is only the base shell.\n    if (!(typeof arg === \"object\" && arg.counters !== undefined))\n      return this.getBaseShell(arg);\n\n    const permanent = arg;\n    const adjustment = this.getCounterValSum(\n      permanent,\n      CounterType.SHELL_ADJUSTMENT\n    );\n    return Math.max(this.getBaseShell(permanent) + adjustment, 0);\n  }\n\n  /**\n   * Returns permanent's undamaged shell.\n   */\n  getUndamagedShell(permanent: Permanent): number {\n    const shell = this.getShell(permanent);\n    const shellDamage = this.getCounterValSum(\n      permanent,\n      CounterType.SHELL_DAMAGE_TAKEN\n    );\n    return Math.max(shell - shellDamage, 0);\n  }\n\n  /** Whether we have an AI. */\n  hasAI(): boolean {\n    return this.staticInspector.hasAI();\n  }\n\n  /** Whether player is an AI. */\n  isPlayerAI(player: Player): boolean {\n    return this.hasAI() && player === Player.P2;\n  }\n\n  areCheckpointsAllowed(): boolean {\n    return this.staticInspector.areCheckpointsAllowed();\n  }\n\n  /** Whether we have disabled gem clearing at the end of the turn. */\n  isGemClearingDisabled(): boolean {\n    return this.gameSpec.disableClearGems ?? false;\n  }\n\n  /**\n   * Get the battle-specific extra state shared between client and server.\n   */\n  getSharedExtraState(): object {\n    const sharedExtraState = this.gameState.sharedExtraState;\n    if (sharedExtraState === undefined) {\n      throw new Error(\"sharedExtraState not initialized\");\n    }\n    return sharedExtraState;\n  }\n\n  //\n  // DEV KNOBS\n  //\n\n  getDevKnobs(): DevKnobs {\n    return this.gameState.devKnobs ?? {};\n  }\n\n  /** Check if the dev-only all-cards-available mode is enabled. */\n  isAllCardsAvailable(): boolean {\n    return this.getDevKnobs().allCardsAvailable ?? false;\n  }\n\n  /**\n   * Get the hand that would be displayed in the UI.\n   * In all-cards-available mode, every card in the cards DB would\n   * be displayed in the hand.\n   */\n  getHandForUI(player: Player): ReadonlyArray<HandCard> {\n    if (this.isAllCardsAvailable()) {\n      const allCardNames = Object.keys(this.cardsDB);\n      allCardNames.sort();\n      return allCardNames.map((name, i) => ({\n        card: { name },\n        id: `${i}`,\n      }));\n    }\n    return this.gameState[player].hand;\n  }\n\n  /** Check if the dev-only always-ready mode is enabled. */\n  isAlwaysReady(): boolean {\n    return this.getDevKnobs().alwaysReady ?? false;\n  }\n\n  /** Check if the dev-only no-turn-check mode is enabled. */\n  isNoTurnCheck(): boolean {\n    return this.getDevKnobs().noTurnCheck ?? false;\n  }\n\n  //\n  // STEPS: COSTS AND VALIDATORS\n  // none of the validators should check turn/cost/ready!\n  //\n\n  validateCreateGems(\n    failedChecks: FailedChecks,\n    permanent: Permanent,\n    gemColors: GemColor[]\n  ): void {\n    const cardType = this.getCardType(permanent);\n\n    // check counter\n    if (this.doesPermanentHaveCounterType(permanent, CounterType.CANNOT_CREATE))\n      failedChecks.add(Check.CANNOT_CREATE);\n\n    // only creatures can create gems\n    if (cardType !== CardType.CREATURE) failedChecks.add(Check.CARD_TYPE);\n\n    // gem color must match permanent's color\n    if (\n      !this.getCreateGemsColors(permanent).some(\n        (colors) =>\n          colors.length === gemColors.length &&\n          colors.every((c, i) => c === gemColors[i])\n      )\n    )\n      failedChecks.add(Check.COLOR);\n  }\n\n  /** Check if a card can be summoned to a slot. */\n  validateSummon(\n    failedChecks: FailedChecks,\n    player: Player,\n    cardName: string,\n    slot: Slot\n  ): void {\n    const effects = this.getSharedEffects(cardName);\n    const effectsAdjust = this.gameSpec.disableCardEffectsAdjustSummonChecks\n      ? undefined\n      : effects.adjustSummonChecks;\n\n    const cardData = this.cardsDB[cardName];\n    const cardType = this.getCardType(cardData);\n\n    if (!this.isSlotInBounds(slot)) {\n      failedChecks.add(Check.BOUNDS);\n      // We can't do any further validation if the slot is out of bounds.\n      return;\n    }\n\n    // cannot move into occupied slot\n    if (this.isSlotOccupied(slot)) failedChecks.add(Check.OCCUPIED);\n    if (this.getTerrainOf(slot) !== player) failedChecks.add(Check.TERRAIN);\n\n    if (effectsAdjust)\n      effectsAdjust(failedChecks, player, cardName, slot, this.makeContext());\n\n    for (const spec of this.allSpecs) {\n      if (spec.adjustSummonChecks) {\n        spec.adjustSummonChecks(\n          failedChecks,\n          player,\n          cardName,\n          slot,\n          this.makeContext()\n        );\n      }\n    }\n  }\n\n  /**\n   * Check if a move is valid, including effects.\n   * Does not do input validation (e.g. slot bounds).\n   */\n  validateMove(\n    failedChecks: FailedChecks,\n    permanent: Permanent,\n    slot: Slot\n  ): void {\n    const effects = this.getSharedEffects(permanent);\n    const effectsAdjust = this.gameSpec.disableCardEffectsAdjustMoveChecks\n      ? undefined\n      : effects.adjustMoveChecks;\n\n    const cardType = this.getCardType(permanent);\n\n    if (!this.isSlotInBounds(slot)) {\n      failedChecks.add(Check.BOUNDS);\n      // We can't do any further validation if the slot is out of bounds.\n      return;\n    }\n\n    // only creatures can move\n    if (cardType !== CardType.CREATURE) failedChecks.add(Check.CARD_TYPE);\n\n    // check counter\n    if (this.doesPermanentHaveCounterType(permanent, CounterType.CANNOT_MOVE))\n      failedChecks.add(Check.CANNOT_MOVE);\n\n    // cannot move into occupied slot\n    if (this.isSlotOccupied(slot)) failedChecks.add(Check.OCCUPIED);\n\n    // can only move to adjacent slots\n    if (!areSlotsAdjacent(permanent.slot, slot))\n      failedChecks.add(Check.ADJACENT);\n\n    if (effectsAdjust)\n      effectsAdjust(failedChecks, permanent, slot, this.makeContext());\n\n    for (const spec of this.allSpecs) {\n      if (spec.adjustMoveChecks) {\n        spec.adjustMoveChecks(\n          failedChecks,\n          permanent,\n          slot,\n          this.makeContext()\n        );\n      }\n    }\n  }\n\n  /** Check if an attack is valid, including effects. */\n  validateAttack(\n    failedChecks: FailedChecks,\n    attacker: Permanent,\n    defender: Permanent\n  ): void {\n    const effects = this.getSharedEffects(attacker);\n    const effectsAdjust = this.gameSpec.disableCardEffectsAdjustAttackChecks\n      ? undefined\n      : effects.adjustAttackChecks;\n\n    // check can't attack counter\n    if (this.doesPermanentHaveCounterType(attacker, CounterType.CANNOT_ATTACK))\n      failedChecks.add(Check.CANNOT_ATTACK);\n\n    // only creatures can attack\n    if (this.getCardType(attacker) !== CardType.CREATURE)\n      failedChecks.add(Check.CARD_TYPE);\n\n    // cannot attack allied unit\n    if (attacker.owner === defender.owner) failedChecks.add(Check.ALLIED);\n\n    // cannot attack unit with counter\n    if (this.doesPermanentHaveCounterType(defender, CounterType.INVULNERABLE))\n      failedChecks.add(Check.INVULNERABLE);\n\n    // cannot attack protected unit\n    if (this.isProtectedFrom(defender, attacker))\n      failedChecks.add(Check.PROTECTED);\n\n    if (effectsAdjust)\n      effectsAdjust(failedChecks, attacker, defender, this.makeContext());\n\n    for (const spec of this.allSpecs) {\n      if (spec.adjustAttackChecks) {\n        spec.adjustAttackChecks(\n          failedChecks,\n          attacker,\n          defender,\n          this.makeContext()\n        );\n      }\n    }\n  }\n\n  /** Get the cost to summon a given card. */\n  getSummonCost(arg: string | CardData | Card): CostColor[] {\n    const isSummonFree = this.getDevKnobs().freeSummon ?? false;\n    if (isSummonFree) return [];\n    return this.getCardData(arg).cost;\n  }\n\n  /** Resolve the effect opt, null if we can't. */\n  resolveEffectOptIfExists(effectOpt: EffectOpt): EffectOptResolved | null {\n    switch (effectOpt.type) {\n      case EffectOptType.PERMANENT: {\n        const permanent = this.getPermanentIfExists(effectOpt.permanentId);\n        if (permanent === null) return null;\n        return { ...effectOpt, permanent };\n        break;\n      }\n      default: {\n        return effectOpt;\n      }\n    }\n  }\n\n  /** Resolve the effect opts, null if we can't. */\n  resolveEffectOptsIfExist(\n    effectOpts: ReadonlyArray<EffectOpt>\n  ): EffectOptResolved[] | null {\n    const effectOptsResolved = [];\n    for (const effectOpt of effectOpts) {\n      const effectOptResolved = this.resolveEffectOptIfExists(effectOpt);\n      if (effectOptResolved === null) return null;\n      effectOptsResolved.push(effectOptResolved);\n    }\n    return effectOptsResolved;\n  }\n\n  validateEffectOpt(\n    failedChecks: FailedChecks,\n    effectOpt: EffectOptResolved,\n    form: EffectOptForm,\n    ctx: EffectOptValidationContext\n  ): void {\n    validateEffectOpt(failedChecks, effectOpt, form, ctx);\n    for (const spec of this.allSpecs) {\n      if (spec.adjustEffectOptChecks) {\n        spec.adjustEffectOptChecks(failedChecks, effectOpt, form, ctx);\n      }\n    }\n  }\n\n  /** Validate activating an ability. */\n  validateActivateAbility(\n    failedChecks: FailedChecks,\n    permanent: Permanent,\n    abilityType: AbilityType,\n    effectOpts: ReadonlyArray<EffectOptResolved>\n  ): void {\n    const effects = this.getSharedEffects(permanent);\n\n    // check existence\n    const cost =\n      abilityType === AbilityType.FLEX ? effects.flexCost : effects.specialCost;\n\n    if (!cost) {\n      failedChecks.add(Check.ABILITY_EXISTS);\n      return;\n    }\n\n    // validate forms\n    const forms =\n      (abilityType === AbilityType.FLEX\n        ? effects.flexForms\n        : effects.specialForms) ?? [];\n\n    if (effectOpts.length !== forms.length) {\n      failedChecks.add(Check.NUM_OPTS);\n    }\n\n    // Validate whatever opts we have, even if there are too few of them.\n    // This is necessary for validation in the UI since we want to\n    // validate partial effect opts as they are being specified.\n    const validationCtx = {\n      permanent,\n      effectOpts,\n      inspector: this,\n    };\n    for (const [i, form] of forms.entries()) {\n      const effectOpt = effectOpts[i];\n      if (!effectOpt) break;\n      this.validateEffectOpt(failedChecks, effectOpt, form, validationCtx);\n    }\n  }\n\n  /** Resolve a step, null if we can't. */\n  resolveStep(step: Step): StepResolved | null {\n    switch (step.type) {\n      case StepType.SUMMON: {\n        const { player, handCardId, cardName } = step;\n        const resolvedCardName = (() => {\n          if (handCardId !== undefined) {\n            const handCard = this.getCardInHandIfExists(player, handCardId);\n            if (!handCard) return null;\n            return this.getCardName(handCard);\n          }\n          if (\n            (this.isAllCardsAvailable() || this.isPlayerAI(player)) &&\n            cardName !== undefined\n          ) {\n            return cardName;\n          }\n          return null;\n        })();\n        if (!resolvedCardName) return null;\n\n        const payment = this.resolvePayment(\n          player,\n          this.getSummonCost(resolvedCardName)\n        );\n\n        return {\n          ...step,\n          cardName: resolvedCardName,\n          cannotPay: payment === null,\n          payment: payment ?? [],\n        };\n      }\n      case StepType.ATTACK: {\n        const { attackerId, defenderId } = step;\n        const attacker = this.getPermanentIfExists(attackerId);\n        const defender = this.getPermanentIfExists(defenderId);\n        if (!attacker) return null;\n        if (!defender) return null;\n\n        const isAttackFree = this.doesPermanentHaveCounterType(\n          attacker,\n          CounterType.ATTACKS_FOR_FREE\n        );\n        const attackColor = isAttackFree ? null : this.getCardColor(attacker);\n        const payment =\n          attackColor === null\n            ? []\n            : this.resolvePayment(attacker.owner, [attackColor]);\n        return {\n          ...step,\n          attacker,\n          defender,\n          cannotPay: payment === null,\n          payment: payment ?? [],\n        };\n      }\n      case StepType.CREATE_GEMS:\n      case StepType.MOVE:\n      case StepType.REMOVE: {\n        const { permanentId } = step;\n        const permanent = this.getPermanentIfExists(permanentId);\n        if (!permanent) return null;\n        return { ...step, permanent };\n      }\n      case StepType.DRAW: {\n        const { player } = step;\n        const payment = this.resolvePayment(player, this.getDrawCardCost());\n        return { ...step, cannotPay: payment === null, payment: payment ?? [] };\n      }\n      case StepType.ACTIVATE_ABILITY: {\n        const { permanentId, abilityType, effectOpts } = step;\n\n        const permanent = this.getPermanentIfExists(permanentId);\n        if (!permanent) return null;\n\n        const cost = this.getAbilityCostIfExists(permanent, abilityType);\n        if (cost === null) return null;\n        const payment = this.resolvePayment(permanent.owner, cost);\n\n        const effectOptsResolved = this.resolveEffectOptsIfExist(effectOpts);\n        if (effectOptsResolved === null) return null;\n\n        return {\n          ...step,\n          permanent,\n          effectOptsResolved,\n          cannotPay: payment === null,\n          payment: payment ?? [],\n        };\n      }\n      case StepType.ADVANCE_KEYFRAME: {\n        const { keyframe } = this.gameState;\n        if (keyframe === undefined) return null;\n        return {\n          ...step,\n          keyframe,\n        };\n      }\n      default: {\n        return step;\n      }\n    }\n  }\n\n  /** Check if a step is valid (in base game). */\n  validateResolvedStep(\n    failedChecks: FailedChecks,\n    step: StepResolved,\n    role: Role\n  ): void {\n    const player = stepToPlayer(step);\n    /** Acting permanent that needs to be ready. */\n    const readyPermanent = (() => {\n      switch (step.type) {\n        case StepType.ATTACK:\n          return step.attacker;\n        case StepType.CREATE_GEMS:\n        case StepType.MOVE:\n          return step.permanent;\n        case StepType.ACTIVATE_ABILITY:\n          return step.abilityType === AbilityType.SPECIAL\n            ? step.permanent\n            : null;\n        default:\n          return null;\n      }\n    })();\n    /** Whether the step is invalid due to cost. */\n    const cannotPay = (() => {\n      switch (step.type) {\n        case StepType.DRAW:\n        case StepType.SUMMON:\n        case StepType.ATTACK:\n        case StepType.ACTIVATE_ABILITY:\n          return step.cannotPay;\n        default:\n          return false;\n      }\n    })();\n    const stepNumber = ((): number | null => {\n      switch (step.type) {\n        case StepType.SUMMON:\n        case StepType.ATTACK:\n        case StepType.CREATE_GEMS:\n        case StepType.MOVE:\n        case StepType.DRAW:\n        case StepType.ACTIVATE_ABILITY:\n        case StepType.END_TURN:\n          return step.stepNumber;\n        default:\n          return null;\n      }\n    })();\n\n    if (!this.isGameActive()) failedChecks.add(Check.GAME_ENDED);\n\n    if (player !== null && !canRoleControlPlayer(role, player))\n      failedChecks.add(Check.ROLE);\n\n    if (player !== null && cannotPay) failedChecks.add(Check.COST);\n\n    if (player !== null && !this.isTurnPending(player)) {\n      // check for bypass turn check\n      if (!(this.isPlayerAI(player) && this.gameSpec.aiDisableTurnCheck))\n        failedChecks.add(Check.TURN);\n    }\n\n    if (readyPermanent !== null && !readyPermanent.ready)\n      failedChecks.add(Check.READY);\n\n    if (\n      this.gameState.keyframe !== undefined &&\n      (this.gameState.keyframe.blocking ?? false) &&\n      ![StepType.ADVANCE_KEYFRAME, StepType.CREATE_CHECKPOINT].includes(\n        step.type\n      )\n    )\n      failedChecks.add(Check.KEYFRAME);\n\n    if (stepNumber !== null) {\n      if (player === null)\n        throw new Error(\"expect player to check step number for\");\n      if (stepNumber !== this.gameState[player].stepNumber)\n        failedChecks.add(Check.STALE);\n    }\n\n    switch (step.type) {\n      case StepType.CREATE_GEMS: {\n        const { permanent, gemColors } = step;\n        this.validateCreateGems(failedChecks, permanent, gemColors);\n        break;\n      }\n      case StepType.SUMMON: {\n        const { player, cardName, slot } = step;\n        this.validateSummon(failedChecks, player, cardName, slot);\n        break;\n      }\n      case StepType.MOVE: {\n        const { permanent, slot } = step;\n        this.validateMove(failedChecks, permanent, slot);\n        break;\n      }\n      case StepType.ATTACK: {\n        const { attacker, defender } = step;\n        this.validateAttack(failedChecks, attacker, defender);\n        break;\n      }\n      case StepType.ACTIVATE_ABILITY: {\n        const { permanent, abilityType, effectOptsResolved } = step;\n        this.validateActivateAbility(\n          failedChecks,\n          permanent,\n          abilityType,\n          effectOptsResolved\n        );\n        break;\n      }\n      case StepType.DRAW: {\n        const { player } = step;\n        const playerState = this.gameState[player];\n        if (!this.doesPlayerHaveMastery(player, DRAW_CARD_MASTERY_ID))\n          failedChecks.add(Check.MASTERY);\n        const drawPileSize = (() => {\n          if (playerState.drawPileSize !== undefined)\n            return playerState.drawPileSize;\n          if (playerState.drawPile !== undefined)\n            return playerState.drawPile.length;\n          return null;\n        })();\n        if (drawPileSize === null) {\n          // If we don't have access to the draw pile, then we don't\n          // have perms to do a draw card step anyway.\n          failedChecks.add(Check.ROLE);\n          break;\n        }\n        if (drawPileSize <= 0) failedChecks.add(Check.DECK_EMPTY);\n        break;\n      }\n      case StepType.END_TURN: {\n        const { player } = step;\n        for (const spec of this.allSpecs) {\n          if (spec.adjustEndTurnChecks) {\n            spec.adjustEndTurnChecks(failedChecks, player, this.makeContext());\n          }\n        }\n        break;\n      }\n      case StepType.ADVANCE_KEYFRAME: {\n        const { keyframeId, keyframe, dialogOptionIndex } = step;\n        const { dialogOptions } = keyframe;\n        if (\n          dialogOptionIndex !== undefined &&\n          dialogOptions !== undefined &&\n          (!Number.isInteger(dialogOptionIndex) ||\n            dialogOptionIndex < 0 ||\n            dialogOptionIndex >= dialogOptions.length)\n        )\n          failedChecks.add(Check.INVALID_DIALOG_OPTION);\n        if (keyframe.id !== keyframeId) failedChecks.add(Check.STALE);\n        break;\n      }\n      case StepType.CREATE_CHECKPOINT: {\n        const { slot } = step;\n        if (!this.areCheckpointsAllowed()) failedChecks.add(Check.GENERIC);\n        if (!isCheckpointSlotValid(slot) || slot === 0)\n          failedChecks.add(Check.INVALID_CHECKPOINT_SLOT);\n        break;\n      }\n      case StepType.REMOVE: {\n        if (role !== Role.GOD) failedChecks.add(Check.ROLE);\n        break;\n      }\n    }\n  }\n\n  /**\n   * Check if a step made by role is valid.\n   * Returns the step resolved and a set of reasons why the step\n   * is invalid, if any.\n   */\n  resolveAndValidate(\n    step: Step,\n    role: Role\n  ): {\n    resolved: StepResolved | null;\n    failedChecks: FailedChecks;\n    isValid: boolean;\n  } {\n    const failedChecks: FailedChecks = new Set();\n    const resolved = this.resolveStep(step);\n    if (resolved) {\n      this.validateResolvedStep(failedChecks, resolved, role);\n    } else {\n      failedChecks.add(Check.RESOLVE);\n    }\n    return {\n      resolved,\n      failedChecks,\n      isValid: failedChecks.size === 0,\n    };\n  }\n\n  /**\n   * Return whether step made by role is valid.\n   */\n  isValid(step: Step, role: Role): boolean {\n    return this.resolveAndValidate(step, role).isValid;\n  }\n\n  /**\n   * Returns whether a permanent has actions, distinct from being ready. This\n   * overestimates: sometimes it says there are actions when there aren't any.\n   */\n  hasActions(permanent: Permanent): boolean {\n    const permanentId = permanent.id;\n    const player = permanent.owner;\n    const role = player === Player.P1 ? Role.P1 : Role.P2;\n    const effects = this.getSharedEffects(permanent);\n    const sm = new StepMaker(this, permanent.owner, role);\n\n    // nothing ever acts out of turn:\n    if (!this.isTurnPending(player)) {\n      return false;\n    }\n\n    // can we flex?\n    if (effects.flexCost && this.resolvePayment(player, effects.flexCost)) {\n      // no forms, so check:\n      if (effects.flexForms?.length === 0) {\n        return this.isValid(\n          sm.activateAbility(permanent, AbilityType.FLEX, []),\n          role\n        );\n      }\n      // don't bother checking forms in this case:\n      return true;\n    }\n\n    // everything following requires readiness\n    if (!permanent.ready) {\n      return false;\n    }\n\n    // can we create?\n    if (\n      this.getCreateGemsColors(permanent).some((gemColors) =>\n        this.isValid(sm.create(permanent, gemColors), role)\n      )\n    ) {\n      return true;\n    }\n\n    // can we move?\n    if (\n      this.getAllSlots()\n        // check adjacent slots first:\n        .sort((slot) => (areSlotsAdjacent(slot, permanent.slot) ? 0 : 1))\n        .some((slot) => this.isValid(sm.move(permanent, slot), role))\n    ) {\n      return true;\n    }\n\n    // can we attack?\n    if (\n      this.getPermanents({\n        // check enemy permanents first:\n        sort: [(defender) => (defender.owner !== player ? 0 : 1)],\n      }).some((defender) => this.isValid(sm.attack(permanent, defender), role))\n    ) {\n      return true;\n    }\n\n    // can we special?\n    if (\n      effects.specialCost &&\n      this.resolvePayment(player, effects.specialCost)\n    ) {\n      if (effects.specialForms?.length === 0) {\n        return this.isValid(\n          sm.activateAbility(permanent, AbilityType.SPECIAL, []),\n          role\n        );\n      }\n      // don't bother checking forms in this case:\n      return true;\n    }\n\n    return false;\n  }\n\n  getStepNumber(player: Player) {\n    return this.gameState[player].stepNumber;\n  }\n}\n","import {\n  Card,\n  HandCard,\n  Player,\n  GAME_PHASE_ORDER,\n  MutablePermanent,\n  MutableGameState,\n} from \"engine/types/game-state\";\nimport { UpdateType, Update } from \"engine/types/updates\";\nimport { SharedGameSpec, ReducerContext } from \"engine/types/shared-game-specs\";\nimport { Inspector } from \"engine/Inspector\";\n\n// Contains only core game state control utilities and update\n// functions. Used by both the server and client. The client uses\n// this to apply updates received by the server.\n//\n// The client accesses Reducer functionality from immer\n// by creating a new Reducer instance, calling an update\n// function, then reading out the game state.\n//\n// Only solver-visible content should go in here. Specifically, only\n// the functionality that is required to apply updates coming from\n// UPDATES messages.\n//\n// Because Updates should be small and granular, there shouldn't\n// be any game logic inside the Reducer! If an update does\n// more than one thing, it probably should be split.\n\nexport class Reducer {\n  gameSpec: SharedGameSpec;\n  allSpecs: ReadonlyArray<SharedGameSpec>;\n  gameState: MutableGameState;\n  inspector: Inspector;\n\n  constructor(\n    gameSpec: SharedGameSpec,\n    allSpecs: ReadonlyArray<SharedGameSpec>,\n    gameState: MutableGameState\n  ) {\n    this.gameSpec = gameSpec;\n    this.allSpecs = allSpecs;\n    this.gameState = gameState;\n    // The reducer doesn't have access to card data or effects.\n    // This restriction ensures that updates are sufficiently\n    // granular, and leaves open the possibility of the client\n    // loading card data asynchronously.\n    this.inspector = new Inspector(\n      this.gameSpec,\n      this.allSpecs,\n      {},\n      {},\n      this.gameState\n    );\n  }\n\n  /** Returns what a GameSpec can get from the Reducer. */\n  makeContext(): ReducerContext {\n    return {\n      inspector: this.inspector,\n      reducer: this,\n    };\n  }\n\n  /**\n   * Get the permanent with a given id, asserting its existence.\n   * Unlike the corresponding Inspector method, the permanent\n   * returned by this method can be mutated and should only be\n   * used within the Reducer.\n   */\n  getPermanent(id: string): MutablePermanent {\n    const permanent = this.gameState.permanents[id];\n    if (permanent === undefined) {\n      throw new Error(`permanent ${id} does not exist`);\n    }\n    return permanent;\n  }\n\n  /** Remove a card from a player's hand; throws if doesn't exist. */\n  takeCardFromHand(player: Player, handCardId: string): HandCard {\n    const hand = this.gameState[player].hand;\n    const handIndex = hand.findIndex((handCard) => handCard.id === handCardId);\n    if (handIndex === -1)\n      throw new Error(`${player} has no hand card with id ${handCardId}`);\n    const [card] = hand.splice(handIndex, 1);\n    return card;\n  }\n\n  /**\n   * Remove a card from the player's draw pile and return it.\n   * If this returns null, then either the draw pile is not visible to\n   * the owner of this GameState, or the draw pile is empty.\n   * If spliceIndex is not provided, then pop from the top of the\n   * draw pile instead.\n   */\n  removeFromDrawPile(player: Player, spliceIndex?: number): Card | null {\n    const playerState = this.gameState[player];\n    const { drawPile } = playerState;\n\n    // Update the draw pile size, if we're keeping track of it.\n    if (playerState.drawPileSize !== undefined) playerState.drawPileSize--;\n\n    // If the draw pile is undefined, then it is not visible to the user.\n    if (!drawPile) return null;\n    const card = (() => {\n      if (spliceIndex === undefined) return drawPile.pop();\n      return drawPile.splice(spliceIndex, 1)[0];\n    })();\n    return card ?? null;\n  }\n\n  /** Add a card to player's discard pile. */\n  addCardToDiscard(player: Player, card: Card) {\n    // Only track the discard pile if we have access to it.\n    const discardPile = this.gameState[player].discardPile;\n    if (discardPile !== undefined) {\n      discardPile.push(card);\n    }\n  }\n\n  applyUpdate(upd: Update): void {\n    switch (upd.type) {\n      case UpdateType.OVERRIDE_STATE: {\n        const { state } = upd;\n        Object.keys(this.gameState).forEach((key) => {\n          // @ts-expect-error: Here, we delete all the keys in the\n          // current state, then copy over everything from the new\n          // state. In the middle, this.gameState will not conform\n          // to the GameState type, but this is okay.\n          delete this.gameState[key];\n        });\n        Object.assign(this.gameState, state);\n        break;\n      }\n      case UpdateType.ADVANCE_PHASE: {\n        const { phase } = upd;\n\n        if (GAME_PHASE_ORDER[phase] <= GAME_PHASE_ORDER[this.gameState.phase])\n          throw new Error(\"cannot go backwards in phase\");\n\n        this.gameState.phase = phase;\n        break;\n      }\n      case UpdateType.SET_GAME_RESULT: {\n        const { winner, loseReason, solves, cardUnlocks, endTime } = upd;\n        this.gameState.winner = winner;\n        this.gameState.loseReason = loseReason;\n        for (const player of [Player.P1, Player.P2]) {\n          const playerState = this.gameState[player];\n\n          // Stop any running clocks.\n          const { startTurnTime } = playerState;\n          if (startTurnTime !== null) {\n            playerState.prevTurnsTime += endTime - startTurnTime;\n            playerState.startTurnTime = null;\n          }\n\n          if (solves[player] ?? false) playerState.isSolved = true;\n          if (cardUnlocks[player] !== undefined)\n            playerState.cardUnlocks = cardUnlocks[player];\n        }\n        break;\n      }\n      case UpdateType.START_TURN: {\n        const { player, startTurnTime } = upd;\n        const playerState = this.gameState[player];\n        playerState.startTurnTime = startTurnTime;\n        break;\n      }\n      case UpdateType.END_TURN: {\n        const { player, endTurnTime } = upd;\n        this.gameState.currentTurnPlayer = this.inspector.getOpponentOf(player);\n        this.gameState.turnNumber++;\n\n        const playerState = this.gameState[player];\n        const { startTurnTime } = playerState;\n        if (startTurnTime === null)\n          throw new Error(\"no start turn timestamp found\");\n        playerState.prevTurnsTime += endTurnTime - startTurnTime;\n        playerState.startTurnTime = null;\n        break;\n      }\n      case UpdateType.SET_KEYFRAME: {\n        const { keyframe } = upd;\n        if (keyframe === null) {\n          delete this.gameState.keyframe;\n        } else {\n          this.gameState.keyframe = keyframe;\n        }\n        break;\n      }\n      case UpdateType.ADD_GEMS: {\n        const { player, gems } = upd;\n\n        if (this.gameSpec.aiDisableGemAccounting && player === Player.P2) break;\n\n        this.gameState[player].gems.push(...gems);\n        break;\n      }\n      case UpdateType.REMOVE_GEMS: {\n        const { player, gems } = upd;\n\n        if (this.gameSpec.aiDisableGemAccounting && player === Player.P2) break;\n\n        const newGems = this.inspector.subtractGems(\n          this.inspector.getPlayerGems(player),\n          gems\n        );\n        if (newGems === null) {\n          throw new Error(\"can't pay\");\n        }\n        this.gameState[player].gems = newGems;\n        break;\n      }\n      case UpdateType.CLEAR_GEMS: {\n        const { player } = upd;\n        this.gameState[player].gems = [];\n        break;\n      }\n      case UpdateType.CREATE_PERMANENT: {\n        const { handCardId, permanent } = upd;\n        if (handCardId != undefined) {\n          this.takeCardFromHand(permanent.owner, handCardId);\n        }\n        // Do a deep copy to enforce type safety.\n        this.gameState.permanents[permanent.id] = JSON.parse(\n          JSON.stringify(permanent)\n        );\n        break;\n      }\n      case UpdateType.READY_PERMANENT: {\n        const { permanentId } = upd;\n        const permanent = this.getPermanent(permanentId);\n        permanent.ready = true;\n        break;\n      }\n      case UpdateType.UNREADY_PERMANENT: {\n        const { permanentId } = upd;\n        const permanent = this.getPermanent(permanentId);\n        permanent.ready = false;\n        break;\n      }\n      case UpdateType.CHANGE_PERMANENT_OWNER: {\n        const { permanentId, owner } = upd;\n        const permanent = this.getPermanent(permanentId);\n        permanent.owner = owner;\n        break;\n      }\n      case UpdateType.MOVE: {\n        const { permanentId, slot } = upd;\n        const permanent = this.getPermanent(permanentId);\n        permanent.slot = slot;\n        break;\n      }\n      case UpdateType.SWAP: {\n        const { permanent1Id, permanent2Id } = upd;\n        const permanent1 = this.getPermanent(permanent1Id);\n        const permanent2 = this.getPermanent(permanent2Id);\n        const slot1 = permanent1.slot;\n        const slot2 = permanent2.slot;\n        permanent1.slot = slot2;\n        permanent2.slot = slot1;\n        break;\n      }\n      case UpdateType.DRAW_CARD: {\n        const { player, card, handCardId, nextTopCard, shouldPopDrawPile } =\n          upd;\n        if (shouldPopDrawPile) {\n          this.removeFromDrawPile(player);\n        }\n        const playerState = this.gameState[player];\n        // Only update the top card if the player is allowed to see it.\n        if (playerState.topCard !== undefined) {\n          // Handle the case where the draw pile goes empty as a special\n          // case, as we don't send down a topCard then.\n          if (\n            playerState.drawPileSize !== undefined &&\n            playerState.drawPileSize === 0\n          )\n            playerState.topCard = null;\n          else if (nextTopCard !== undefined) playerState.topCard = nextTopCard;\n        }\n        playerState.hand.push({ card, id: handCardId });\n        break;\n      }\n      case UpdateType.REMOVE_FROM_DRAW_PILE: {\n        const { player, drawPileIndex, nextTopCard } = upd;\n        const playerState = this.gameState[player];\n        this.removeFromDrawPile(player, drawPileIndex);\n        // Only update the top card if the player is allowed to see it.\n        if (playerState.topCard !== undefined && nextTopCard !== undefined)\n          playerState.topCard = nextTopCard;\n        break;\n      }\n      case UpdateType.DISCARD_CARD: {\n        const { player, handCardId } = upd;\n        this.takeCardFromHand(player, handCardId);\n        break;\n      }\n      case UpdateType.DAMAGE_PERMANENT: {\n        const { permanentId, damage } = upd;\n        const permanent = this.getPermanent(permanentId);\n        permanent.damage = Math.max(permanent.damage + damage, 0);\n        break;\n      }\n      case UpdateType.REMOVE_PERMANENT: {\n        const { permanentId, discard } = upd;\n        const permanent = this.getPermanent(permanentId);\n        delete this.gameState.permanents[permanentId];\n        if (discard) {\n          this.addCardToDiscard(permanent.owner, permanent.card);\n        }\n        break;\n      }\n      case UpdateType.TRANSFORM_PERMANENT: {\n        const { permanentId, newCardName } = upd;\n        const permanent = this.getPermanent(permanentId);\n        permanent.card.name = newCardName;\n        // TODO: Lower damage taken so that unit always survives?\n        // this.inspector.getCounterValSum(permanent, CounterType.DAMAGE_TAKEN)\n        break;\n      }\n      case UpdateType.ADD_COUNTER: {\n        const { permanentId, counter } = upd;\n        const permanent = this.getPermanent(permanentId);\n        permanent.counters.push(counter);\n        break;\n      }\n      case UpdateType.REMOVE_COUNTER: {\n        const { permanentId, counterIndex } = upd;\n        const permanent = this.getPermanent(permanentId);\n        permanent.counters.splice(counterIndex, 1);\n        break;\n      }\n      case UpdateType.SET_COUNTER: {\n        const { permanentId, counterIndex, counterVal } = upd;\n        const permanent = this.getPermanent(permanentId);\n        permanent.counters[counterIndex].val = counterVal;\n        if (upd.explanation) {\n          permanent.counters[counterIndex].explanation = upd.explanation;\n        }\n        break;\n      }\n      case UpdateType.SET_DRAW_PILE: {\n        const { player, drawPile } = upd;\n        const playerState = this.gameState[player];\n        if (playerState.drawPile === undefined) {\n          throw new Error(\"player should not have access to drawPile\");\n        }\n        playerState.drawPile = [...drawPile];\n        break;\n      }\n      case UpdateType.SET_DEV_KNOBS: {\n        this.gameState.devKnobs = upd.devKnobs;\n        break;\n      }\n      case UpdateType.INIT_SHARED_EXTRA_STATE: {\n        this.gameState.sharedExtraState = upd.sharedExtraState;\n        break;\n      }\n      case UpdateType.MODIFY_SHARED_EXTRA_STATE: {\n        const { updInfo } = upd;\n        const modifySharedExtraState = this.gameSpec.modifySharedExtraState;\n        if (modifySharedExtraState === undefined)\n          throw new Error(\n            \"game spec does not support modifying shared extra state\"\n          );\n        if (this.gameState.sharedExtraState === undefined)\n          throw new Error(\"shared extra state not initialized\");\n        modifySharedExtraState(updInfo, this.gameState.sharedExtraState);\n        break;\n      }\n      case UpdateType.MODIFY_STATS: {\n        const {\n          player,\n          diffSummons,\n          diffDestroys,\n          diffDamageDealt,\n          diffFactionSummons,\n        } = upd;\n        const { stats } = this.gameState[player];\n        stats.summons += diffSummons ?? 0;\n        stats.destroys += diffDestroys ?? 0;\n        stats.damageDealt += diffDamageDealt ?? 0;\n        stats.factionSummons += diffFactionSummons ?? 0;\n        break;\n      }\n      case UpdateType.SET_STEP_NUMBER: {\n        const { player, stepNumber } = upd;\n        this.gameState[player].stepNumber = stepNumber;\n        break;\n      }\n      default: {\n        // There might be updates that don't affect game state, so\n        // don't throw here.\n      }\n    }\n  }\n}\n\n// Apply an update. Only used by the client.\nexport const applyUpdate = (\n  gameSpec: SharedGameSpec,\n  allSpecs: ReadonlyArray<SharedGameSpec>,\n  gameState: MutableGameState,\n  upd: Update\n): void => {\n  // Single-use Reducer, just used to hold\n  // the context needed to apply the update.\n  const reducer = new Reducer(gameSpec, allSpecs, gameState);\n  reducer.applyUpdate(upd);\n};\n","import {\n  Card,\n  Permanent,\n  Slot,\n  Player,\n  DevKnobs,\n  GamePhase,\n  GameState,\n} from \"engine/types/game-state\";\nimport { Counter } from \"engine/types/counters\";\nimport {\n  Role,\n  UpdateType,\n  Update,\n  UpdateDrawCard,\n  UpdateRemoveFromDrawPile,\n} from \"engine/types/updates\";\nimport { GemColor } from \"engine/types/card-data\";\nimport { WSErrorCode, WSError } from \"game-server/ws\";\nimport { UpdatesMulticaster } from \"game-server/UpdatesMulticaster\";\nimport { Keyframe } from \"./types/keyframes\";\n\n/**\n * Controller is a thin utility wrapper around UpdatesMulticaster.\n * It handles raw Update creation, as well as ensuring that the\n * right broadcastAndApply functions are called for asymmetric updates.\n *\n * Each Controller function should generate at most a single update.\n */\nexport class Controller {\n  multicaster: UpdatesMulticaster;\n\n  constructor(multicaster: UpdatesMulticaster) {\n    this.multicaster = multicaster;\n  }\n\n  stepAck(roomMemberId: string, err?: WSError) {\n    this.multicaster.send(roomMemberId, {\n      type: UpdateType.STEP_ACK,\n      err,\n    });\n  }\n\n  respSuccess(roomMemberId: string) {\n    this.stepAck(roomMemberId);\n  }\n\n  respInvalidStep(roomMemberId: string) {\n    this.stepAck(roomMemberId, { errCode: WSErrorCode.INVALID_STEP });\n  }\n\n  advancePhase(phase: GamePhase) {\n    this.broadcastAndApply({\n      type: UpdateType.ADVANCE_PHASE,\n      phase,\n    });\n  }\n\n  startTurn(player: Player) {\n    this.broadcastAndApply({\n      type: UpdateType.START_TURN,\n      player: player,\n      startTurnTime: new Date().getTime(),\n    });\n  }\n\n  endTurn(player: Player) {\n    this.broadcastAndApply({\n      type: UpdateType.END_TURN,\n      player: player,\n      endTurnTime: new Date().getTime(),\n    });\n  }\n\n  setDrawPile(player: Player, drawPile: ReadonlyArray<Card>) {\n    // TODO: This should error out if it is ever used while clients\n    // are connected, since players should not have access to even\n    // their own draw pile. If we ever really need to use this\n    // while users are connected, make sure to only send the\n    // pile size/top card to clients, and the full draw pile only\n    // to the reducer.\n    this.broadcastAndApply({\n      type: UpdateType.SET_DRAW_PILE,\n      player,\n      drawPile,\n    });\n  }\n\n  setDevKnobs(devKnobs: DevKnobs) {\n    this.broadcastAndApply({\n      type: UpdateType.SET_DEV_KNOBS,\n      devKnobs: devKnobs,\n    });\n  }\n\n  addGems(player: Player, gems: GemColor[]) {\n    this.broadcastAndApply({\n      type: UpdateType.ADD_GEMS,\n      player,\n      gems,\n    });\n  }\n\n  removeGems(player: Player, gems: GemColor[]) {\n    this.broadcastAndApply({\n      type: UpdateType.REMOVE_GEMS,\n      player,\n      gems,\n    });\n  }\n\n  clearGems(player: Player) {\n    this.broadcastAndApply({\n      type: UpdateType.CLEAR_GEMS,\n      player,\n    });\n  }\n\n  /**\n   * Create a permanent on the board. This just adds the permanent to\n   * the board and does not trigger any effects.\n   */\n  createPermanent(permanent: Permanent, handCardId?: string) {\n    // This function does not propagate in-game effects that care about\n    // summoning, e.g. on-summon effects. To do those things, call\n    // Engine.summonPermanent instead.\n    this.broadcastAndApply({\n      type: UpdateType.CREATE_PERMANENT,\n      handCardId,\n      permanent: JSON.parse(JSON.stringify(permanent)) as Permanent,\n    });\n  }\n\n  readyPermanent(permanentId: string) {\n    this.broadcastAndApply({\n      type: UpdateType.READY_PERMANENT,\n      permanentId,\n    });\n  }\n\n  unreadyPermanent(permanentId: string) {\n    this.broadcastAndApply({\n      type: UpdateType.UNREADY_PERMANENT,\n      permanentId,\n    });\n  }\n\n  changePermanentOwner(permanentId: string, owner: Player) {\n    this.broadcastAndApply({\n      type: UpdateType.CHANGE_PERMANENT_OWNER,\n      permanentId,\n      owner,\n    });\n  }\n\n  transformPermanent(permanentId: string, newCardName: string) {\n    this.broadcastAndApply({\n      type: UpdateType.TRANSFORM_PERMANENT,\n      permanentId,\n      newCardName,\n    });\n  }\n\n  move(permanentId: string, slot: Slot) {\n    this.broadcastAndApply({\n      type: UpdateType.MOVE,\n      permanentId,\n      slot,\n    });\n  }\n\n  swap(permanent1Id: string, permanent2Id: string) {\n    this.broadcastAndApply({\n      type: UpdateType.SWAP,\n      permanent1Id,\n      permanent2Id,\n    });\n  }\n\n  drawCard(\n    player: Player,\n    card: Card,\n    handCardId: string,\n    nextTopCard?: Card | null,\n    shouldPopDrawPile?: boolean\n  ) {\n    const fullUpd: UpdateDrawCard = {\n      type: UpdateType.DRAW_CARD,\n      player,\n      card,\n      handCardId,\n      nextTopCard,\n      shouldPopDrawPile: shouldPopDrawPile ?? true, // pop from draw pile by default\n    };\n    this.broadcastAndApplyAsymmetric(player, fullUpd, {\n      ...fullUpd,\n      nextTopCard: undefined,\n      card: {},\n    });\n  }\n\n  removeFromDrawPile(\n    player: Player,\n    drawPileIndex: number,\n    nextTopCard?: Card | null\n  ) {\n    const fullUpd: UpdateRemoveFromDrawPile = {\n      type: UpdateType.REMOVE_FROM_DRAW_PILE,\n      player,\n      drawPileIndex,\n      nextTopCard,\n    };\n    this.broadcastAndApplyAsymmetric(player, fullUpd, {\n      ...fullUpd,\n      nextTopCard: undefined,\n    });\n  }\n\n  discardCard(player: Player, handCardId: string) {\n    this.broadcastAndApply({\n      type: UpdateType.DISCARD_CARD,\n      player,\n      handCardId,\n    });\n  }\n\n  damagePermanent(permanentId: string, damage: number, attackerId?: string) {\n    this.broadcastAndApply({\n      type: UpdateType.DAMAGE_PERMANENT,\n      permanentId,\n      damage,\n      attackerId,\n    });\n  }\n\n  removePermanent(permanentId: string, discard?: boolean) {\n    this.broadcastAndApply({\n      type: UpdateType.REMOVE_PERMANENT,\n      permanentId,\n      discard,\n    });\n  }\n\n  addCounter(permanentId: string, counter: Counter) {\n    this.broadcastAndApply({\n      type: UpdateType.ADD_COUNTER,\n      permanentId,\n      counter,\n    });\n  }\n\n  removeCounter(permanentId: string, counterIndex: number) {\n    this.broadcastAndApply({\n      type: UpdateType.REMOVE_COUNTER,\n      permanentId,\n      counterIndex,\n    });\n  }\n\n  setCounter(\n    permanentId: string,\n    counterIndex: number,\n    counterVal?: number,\n    explanation?: string\n  ) {\n    this.broadcastAndApply({\n      type: UpdateType.SET_COUNTER,\n      permanentId,\n      counterIndex,\n      counterVal,\n      explanation,\n    });\n  }\n\n  setKeyframe(keyframe: Keyframe) {\n    this.broadcastAndApply({\n      type: UpdateType.SET_KEYFRAME,\n      keyframe,\n    });\n  }\n\n  clearKeyframe() {\n    this.broadcastAndApply({\n      type: UpdateType.SET_KEYFRAME,\n      keyframe: null,\n    });\n  }\n\n  announce(message: string) {\n    this.broadcastAndApply({\n      type: UpdateType.ANNOUNCE,\n      message,\n    });\n  }\n\n  announceSummonPermanent(player: Player, cardName: string) {\n    this.broadcastAndApply({\n      type: UpdateType.ANNOUNCE_SUMMON_PERMANENT,\n      player,\n      cardName,\n    });\n  }\n\n  announceMove(player: Player, cardName: string) {\n    this.broadcastAndApply({\n      type: UpdateType.ANNOUNCE_MOVE,\n      player: player,\n      cardName: cardName,\n    });\n  }\n\n  announceAttackCard(cardName: string, damage: number, targetName: string) {\n    this.broadcastAndApply({\n      type: UpdateType.ANNOUNCE_ATTACK_CARD,\n      cardName: cardName,\n      target: targetName,\n      damage: damage,\n    });\n  }\n\n  overrideState(\n    roomId: string,\n    fullState: GameState,\n    p1State: GameState,\n    p2State: GameState\n  ) {\n    this.multicaster.broadcastPerRoleAndApply({\n      [Role.GOD]: {\n        type: UpdateType.OVERRIDE_STATE,\n        roomId,\n        state: fullState,\n      },\n      [Role.P1]: {\n        type: UpdateType.OVERRIDE_STATE,\n        roomId,\n        state: p1State,\n      },\n      [Role.P2]: {\n        type: UpdateType.OVERRIDE_STATE,\n        roomId,\n        state: p2State,\n      },\n    });\n  }\n\n  respOverrideState(roomMemberId: string, roomId: string, state: GameState) {\n    this.multicaster.send(roomMemberId, {\n      type: UpdateType.OVERRIDE_STATE,\n      roomId,\n      state: state,\n    });\n  }\n\n  // Internal methods\n\n  notifySystem(upd: Update): void {\n    this.multicaster.notifySystem(upd);\n  }\n\n  broadcastAndApply(upd: Update): void {\n    this.multicaster.broadcastAndApply(upd);\n  }\n\n  // Broadcast and apply an asymmetric update.\n  // The full update `upd` is broadcast to all roles with full\n  // information about `player`, while `updHidden` is broadcast\n  // to all other roles. If `updHidden` is null, then nothing\n  // is broadcast to other roles.\n  broadcastAndApplyAsymmetric(\n    player: Player,\n    upd: Update,\n    updHidden: Update | null\n  ): void {\n    this.multicaster.broadcastAndApplyAsymmetric(player, upd, updHidden);\n  }\n}\n","import { DeckSelection, deckToCardList } from \"engine/types/decks\";\nimport {\n  LoadoutResolved,\n  DevKnobs,\n  Card,\n  Permanent,\n  CardLike,\n  Slot,\n  Player,\n  PlayerState,\n  PlayerStateTeamData,\n  GamePhase,\n  GameState,\n  EngineGameState,\n  FullGameState,\n  MutableGameState,\n  MutableEngineOnlyGameState,\n  makeInitGameState,\n} from \"engine/types/game-state\";\nimport { CounterType, ValueCounterType } from \"engine/types/counters\";\nimport {\n  PermanentEventType,\n  PermanentEvent,\n  PermanentEventHandlers,\n  PermanentEventHandlerResult,\n  HooksEngineAPI,\n  HooksAIAPI,\n  HooksOutOfTurnAIAPI,\n} from \"engine/server-hooks\";\nimport {\n  StepType,\n  Step,\n  StepResolved,\n  AttackStepResolved,\n  SummonStepResolved,\n  MoveStepResolved,\n  ActivateAbilityStepResolved,\n  EndTurnStep,\n  CreateGemsStepResolved,\n  DrawStepResolved,\n  RemoveStepResolved,\n  AdvanceKeyframeStepResolved,\n  stepToPlayer,\n  SystemStep,\n} from \"engine/types/steps\";\nimport { ColorSymbol } from \"engine/types/card-data\";\nimport {\n  SCRY_TOP_CARD_MASTERY_ID,\n  PRIORITY_CARD_MASTERY_ID,\n} from \"engine/puzzles/mastery-data\";\nimport { AbilityType } from \"engine/types/effects\";\nimport { Keyframe } from \"engine/types/keyframes\";\nimport { Role, UpdateType } from \"engine/types/updates\";\nimport { CardsDB } from \"engine/cards/CardsDB\";\nimport { GameSpec, EngineContext, AIContext } from \"engine/types/game-specs\";\nimport { Inspector } from \"engine/Inspector\";\nimport { Reducer } from \"engine/Reducer\";\nimport { Controller } from \"engine/Controller\";\nimport { CardEffects, EffectsDB, CountersDB } from \"engine/cards/card-effects\";\nimport { RoomMember } from \"game-server/Room\";\nimport {\n  LoseReason,\n  TeamCard,\n} from \"game-server/backend-interface/BackendInterface\";\nimport { doesCardColorBelongToFaction } from \"engine/types/factions\";\nimport { UpdatesMulticaster } from \"game-server/UpdatesMulticaster\";\n\n//\n// constants\n//\n\nconst STARTING_HAND_SIZE = 4;\n\ntype CheckpointHandler = (engine: Engine, slots: number[]) => void;\ntype CutsceneChoiceHandler = (\n  engine: Engine,\n  keyframeId: string,\n  dialogOptionIndex: number\n) => void;\n\nexport class Engine {\n  multicaster: UpdatesMulticaster;\n  puzName: string;\n  roomId: string;\n\n  /** The primary game spec. */\n  gameSpec: GameSpec;\n  /** All the mods to apply, including the common spec and primary spec. */\n  allSpecs: ReadonlyArray<GameSpec>;\n  /** Function to get the card unlocks for player if solved. */\n  getCardUnlocks: (player: Player) => string[];\n  cardsDB: CardsDB;\n  effectsDB: EffectsDB;\n  countersDB: CountersDB;\n  keyframes: Keyframe[];\n\n  // This should be treated as readonly outside controller methods.\n  // TODO: should this be removed in favor of inspector?\n  gameState: EngineGameState;\n\n  inspector: Inspector;\n  controller: Controller;\n\n  hooksApi: HooksEngineAPI;\n  hooksAiApi: HooksAIAPI;\n  hooksOutOfTurnAiApi: HooksOutOfTurnAIAPI;\n\n  /**\n   * Whether a checkpoint should be created once the current step\n   * has finished processing.\n   * This should only be transiently used while processing a step.\n   */\n  needCheckpoint: number[];\n  checkpointHandler: CheckpointHandler;\n\n  cutsceneChoiceHandler: CutsceneChoiceHandler;\n\n  constructor(\n    multicaster: UpdatesMulticaster,\n    puzName: string,\n    roomId: string,\n    allSpecs: ReadonlyArray<GameSpec>,\n    getCardUnlocks: (player: Player) => string[],\n    cardsDB: CardsDB,\n    effectsDB: EffectsDB,\n    countersDB: CountersDB,\n    keyframes: Keyframe[],\n    teamData: { [player in Player]?: PlayerStateTeamData },\n    deckSelections: { [player in Player]?: DeckSelection },\n    checkpointHandler: CheckpointHandler,\n    cutsceneChoiceHandler: CutsceneChoiceHandler,\n    devKnobs?: DevKnobs,\n    gameStateOpt?: MutableGameState\n  ) {\n    this.multicaster = multicaster;\n    this.puzName = puzName;\n    this.roomId = roomId;\n    this.allSpecs = allSpecs;\n    this.gameSpec = this.allSpecs[1];\n    this.getCardUnlocks = getCardUnlocks;\n\n    this.cardsDB = cardsDB;\n    this.effectsDB = effectsDB;\n    this.countersDB = countersDB;\n    this.keyframes = keyframes;\n\n    // Safety check that all card effects correspond to actual cards.\n    // This would help catch problems with card renaming.\n    for (const cardName of Object.keys(this.effectsDB)) {\n      if (this.cardsDB[cardName] === undefined) {\n        throw new Error(\n          `card ${cardName} not found in cards database -- perhaps the card names in the deck sheet and code got out of sync, or a card name was misspelled.`\n        );\n      }\n    }\n\n    const gameState =\n      gameStateOpt ??\n      (() => {\n        const gameState = makeInitGameState(this.puzName, this.gameSpec);\n        for (const [kPlayer, playerTeamData] of Object.entries(teamData)) {\n          const player = kPlayer as Player;\n          gameState[player].teamData = playerTeamData;\n        }\n        gameState.devKnobs = devKnobs;\n        gameState.engineOnly.deckSelections = deckSelections;\n        return gameState;\n      })();\n    this.gameState = gameState;\n\n    // The engine uses a separate Inspector from its Reducer\n    // since it has access to all card and effects data.\n    this.inspector = new Inspector(\n      this.gameSpec,\n      this.allSpecs,\n      this.cardsDB,\n      this.effectsDB,\n      this.gameState\n    );\n\n    const reducer = new Reducer(this.gameSpec, this.allSpecs, gameState);\n    this.multicaster.setApplyUpdateFunc((upd) => {\n      reducer.applyUpdate(upd);\n    });\n    this.controller = new Controller(this.multicaster);\n\n    this.hooksApi = new HooksEngineAPI(this);\n    this.hooksAiApi = new HooksAIAPI(this);\n    this.hooksOutOfTurnAiApi = new HooksOutOfTurnAIAPI(this.hooksAiApi);\n\n    this.needCheckpoint = [];\n    this.checkpointHandler = checkpointHandler;\n    this.cutsceneChoiceHandler = cutsceneChoiceHandler;\n  }\n\n  /**\n   * A separate init allows creating the Engine with a pre-defined\n   * gameState, as required by backend-saved game loading.\n   */\n  init() {\n    for (const spec of this.allSpecs) {\n      if (spec.afterInitEngine) {\n        spec.afterInitEngine(this.makeContext());\n      }\n    }\n\n    this.startNewGame();\n\n    if (!this.inspector.isGameActive())\n      throw new Error(\"expect game to still be active after starting\");\n  }\n\n  //\n  // helpers\n  //\n\n  /**\n   * Access point to allow game specs to trigger game behavior on specified\n   * events.\n   */\n  makeContext(): EngineContext {\n    return {\n      inspector: this.inspector,\n      engine: this.hooksApi,\n      ai: this.hooksOutOfTurnAiApi,\n    };\n  }\n\n  makeAIContext(): AIContext {\n    return {\n      ...this.makeContext(),\n      ai: this.hooksAiApi,\n    };\n  }\n\n  getEffects(arg: CardLike): CardEffects {\n    const effects = this.effectsDB[this.inspector.getCardName(arg)];\n    return effects ? effects : {};\n  }\n\n  /**\n   * Get the engine-only portion of the game state.\n   * Since this is not used by the client, we are allowed to\n   * mutate it directly in the Engine.\n   */\n  getEngineOnly(): MutableEngineOnlyGameState {\n    const engineOnly = this.gameState.engineOnly;\n    if (engineOnly === undefined) {\n      throw new Error(\"engine should have access to engine-only state\");\n    }\n    return engineOnly;\n  }\n\n  /**\n   * If the game should end or has ended, returns the game's winner.\n   * Otherwise, returns null.\n   */\n  getWinner(): Player | null {\n    const isLoser = (player: Player): boolean => {\n      if (\n        !(this.gameSpec.disableNoBasesLossCondition ?? false) &&\n        !(\n          player === Player.P1 &&\n          (this.gameSpec.disableP1NoBasesLossCondition ?? false)\n        ) &&\n        !(\n          player === Player.P2 &&\n          (this.gameSpec.disableP2NoBasesLossCondition ?? false)\n        ) &&\n        this.inspector.getBases(player).length === 0\n      )\n        return true;\n      if (\n        this.gameSpec.extraLoseChecks &&\n        this.gameSpec.extraLoseChecks(player, this.makeContext())\n      ) {\n        return true;\n      }\n      return false;\n    };\n\n    if (isLoser(Player.P2)) return Player.P1;\n    if (isLoser(Player.P1)) return Player.P2;\n    return null;\n  }\n\n  /**\n   * Checks if the puzzle is solved, once the game has ended.\n   */\n  getIsSolved(player: Player, winner: Player): boolean {\n    // Currently, only AI battles have a \"solved\" concept.\n    if (!this.inspector.hasAI()) return false;\n    if (player !== Player.P1) return false;\n    if (!this.gameSpec.disableBattleWonSolvedCondition && winner !== player) {\n      return false;\n    }\n    if (\n      this.gameSpec.extraSolveChecks &&\n      !this.gameSpec.extraSolveChecks(player, winner, this.makeContext())\n    ) {\n      return false;\n    }\n    return true;\n  }\n\n  /**\n   * Turn a card to an initially-played permanent.\n   * This has to go here since it might be overriden by a game spec.\n   */\n  cardToPermanent(card: Card, owner: Player, slot: Slot): Permanent {\n    return {\n      id: (this.getEngineOnly().nextPermanentId++).toString(),\n      card,\n      damage: 0,\n      counters: [],\n      // Cards are summoned unready by default (\"summoning sickness\").\n      // In \"always ready\" mode, cards are summoned ready.\n      ready: this.inspector.isAlwaysReady(),\n      owner,\n      slot,\n    };\n  }\n\n  /** Draw a card from the top of player's deck. */\n  drawCard(player: Player): void {\n    const { topCard, nextTopCard } =\n      this.inspector.getTopCardsInDrawPile(player);\n    if (topCard !== null) {\n      this.controller.drawCard(\n        player,\n        topCard,\n        `${this.getEngineOnly().nextHandCardId++}`,\n        nextTopCard === null ? undefined : nextTopCard\n      );\n    }\n  }\n\n  /**\n   * Add a given card to the player's hand, without modifying\n   * the draw pile.\n   */\n  addCardToHand(player: Player, card: Card): void {\n    this.controller.drawCard(\n      player,\n      card,\n      `${this.getEngineOnly().nextHandCardId++}`,\n      undefined,\n      false\n    );\n  }\n\n  /** Remove a card by index from the player's deck. */\n  removeCardIndex(player: Player, drawPileIndex: number): void {\n    const drawPile = this.inspector.getDrawPile(player);\n    this.controller.removeFromDrawPile(\n      player,\n      drawPileIndex,\n      drawPileIndex === drawPile.length - 1 &&\n        drawPile.length > 1 &&\n        this.inspector.doesPlayerHaveMastery(player, SCRY_TOP_CARD_MASTERY_ID)\n        ? drawPile[drawPile.length - 2]\n        : undefined\n    );\n  }\n\n  /** Initialize a new game. */\n  startNewGame(): void {\n    // Signal client to reset any client-only game state.\n    // This does not affect the shared game state, since this is\n    // taken care of by the override-state update on join.\n    this.controller.broadcastAndApply({\n      type: UpdateType.RESET,\n    });\n\n    const devKnobs = this.inspector.getDevKnobs();\n    const noShuffle = devKnobs.noShuffle !== undefined && devKnobs.noShuffle;\n    const shuffleDeck = (deck: string[]): void => {\n      // Fisher-Yates shuffle\n      for (let i = deck.length - 1; i >= 1; i--) {\n        const j = Math.floor(Math.random() * (i + 1));\n        [deck[j], deck[i]] = [deck[i], deck[j]];\n      }\n    };\n\n    const loadouts: { [player in Player]?: LoadoutResolved } = {};\n    for (const player of [Player.P1, Player.P2]) {\n      const {\n        deckCardList,\n        priorityCard: deckPriorityCard,\n      }: {\n        deckCardList: string[];\n        priorityCard?: string;\n      } = (() => {\n        const deckOverride = this.inspector.getDeckOverride(player);\n        if (deckOverride !== null) return { deckCardList: [...deckOverride] };\n        // If all cards are available, then there's no use setting a deck.\n        if (this.inspector.isAllCardsAvailable()) return { deckCardList: [] };\n        const deckSelection = this.getEngineOnly().deckSelections[player];\n        if (deckSelection === undefined) {\n          if (this.inspector.isNoDeckAllowed()) return { deckCardList: [] };\n          throw new Error(`expect deck to be defined for ${player}`);\n        }\n        const { deck } = deckSelection;\n        return {\n          deckCardList: deckToCardList(deck),\n          priorityCard: deck.priorityCard,\n        };\n      })();\n\n      const hasPriorityCardMastery = this.inspector.doesPlayerHaveMastery(\n        player,\n        PRIORITY_CARD_MASTERY_ID\n      );\n      const priorityCard = hasPriorityCardMastery\n        ? deckPriorityCard\n        : undefined;\n      const priorityCardIndex =\n        priorityCard === undefined ? -1 : deckCardList.indexOf(priorityCard);\n      if (priorityCardIndex !== -1) deckCardList.splice(priorityCardIndex, 1);\n\n      if (!noShuffle) shuffleDeck(deckCardList);\n\n      if (priorityCardIndex !== -1) {\n        if (priorityCard === undefined)\n          throw new Error(\n            \"expect there to be a priority card if we removed one\"\n          );\n        deckCardList.push(priorityCard);\n      }\n\n      this.controller.setDrawPile(\n        player,\n        deckCardList.map((name) => ({\n          name,\n        }))\n      );\n    }\n\n    for (const spec of this.allSpecs) {\n      if (spec.beforeNewGame) {\n        spec.beforeNewGame(this.makeContext());\n      }\n    }\n\n    // Place bases.\n    const width = this.inspector.getNumColumns();\n    const height = this.inspector.getNumRows();\n    for (const player of [Player.P1, Player.P2]) {\n      const bases = this.inspector.getDefaultBases(player);\n      if (bases.length > width) {\n        throw new Error(\n          \"invalid number of bases (no more than one per column)\"\n        );\n      }\n      const baseColumns = this.inspector.getBasePositions(player, bases.length);\n      if (baseColumns.length !== bases.length) {\n        throw new Error(\n          \"the number of base positions specified does not equal the number of bases\"\n        );\n      }\n      for (let i = 0; i < bases.length; i++) {\n        const slot = {\n          row: this.inspector.getPlayerRowIndex(0, player),\n          column: baseColumns[i],\n        };\n        this.spawnPermanent(bases[i], player, slot);\n      }\n    }\n\n    // Draw initial hands.\n    for (const player of [Player.P1, Player.P2]) {\n      for (let i = 0; i < STARTING_HAND_SIZE; i++) {\n        this.drawCard(player);\n      }\n    }\n\n    this.getEngineOnly().hasGameStarted = true;\n\n    // P2 goes first.\n    this.startTurn(Player.P2);\n  }\n\n  endGame(\n    winner: Player,\n    loseReason: LoseReason,\n    solves: { [player in Player]?: boolean },\n    cardUnlocks: { [player in Player]?: string[] }\n  ): void {\n    this.controller.broadcastAndApply({\n      type: UpdateType.SET_GAME_RESULT,\n      winner,\n      loseReason,\n      solves,\n      cardUnlocks,\n      endTime: new Date().getTime(),\n    });\n    this.controller.advancePhase(GamePhase.ENDED);\n    if (this.gameSpec.afterGameEnd) {\n      this.gameSpec.afterGameEnd(winner, solves, this.makeContext());\n    }\n    const solvedTeamIds: string[] = [];\n    const cardUnlocksData: TeamCard[] = [];\n    for (const player of [Player.P1, Player.P2]) {\n      if (solves[player] ?? false) {\n        const teamId = this.gameState[player].teamData?.teamId;\n        if (teamId === undefined)\n          throw new Error(\"if puzzle is solved, expect a team to exist\");\n        solvedTeamIds.push(teamId);\n      }\n      for (const cardName of cardUnlocks[player] ?? []) {\n        const teamId = this.gameState[player].teamData?.teamId;\n        if (teamId === undefined)\n          throw new Error(\n            \"if there are cards unlocked, expect a team to exist\"\n          );\n        cardUnlocksData.push({\n          teamId,\n          cardName,\n        });\n      }\n    }\n    this.controller.notifySystem({\n      type: UpdateType.SYSTEM_ROOM_COMPLETE,\n      solvedTeamIds: solvedTeamIds,\n      cardUnlocks: cardUnlocksData,\n    });\n  }\n\n  destroyPermanent(permanent: Permanent, attacker?: Permanent): void {\n    // can't be destroyed\n    if (\n      permanent !== attacker &&\n      this.inspector.doesPermanentHaveCounterType(\n        permanent,\n        CounterType.INVULNERABLE\n      )\n    )\n      return;\n\n    this.handlePermanentEvent({\n      type: PermanentEventType.BEFORE_DESTROYED,\n      permanent,\n      attacker,\n      ctx: this.makeContext(),\n    });\n    if (attacker) {\n      this.handlePermanentEvent({\n        type: PermanentEventType.BEFORE_DESTROY_UNIT,\n        permanent: attacker,\n        defender: permanent,\n        ctx: this.makeContext(),\n      });\n    }\n    this.controller.removePermanent(permanent.id);\n    if (attacker) {\n      this.controller.broadcastAndApply({\n        type: UpdateType.MODIFY_STATS,\n        player: attacker.owner,\n        diffDestroys: 1,\n      });\n      this.handlePermanentEvent({\n        type: PermanentEventType.AFTER_DESTROY_UNIT,\n        permanent: attacker,\n        defender: permanent,\n        ctx: this.makeContext(),\n      });\n    }\n    this.handlePermanentEvent({\n      type: PermanentEventType.AFTER_DESTROYED,\n      permanent,\n      attacker,\n      ctx: this.makeContext(),\n    });\n    // Handle OTHER_UNIT_DESTROYED.\n    for (const otherPermanent of this.inspector.getAllPermanents()) {\n      if (otherPermanent.id === permanent.id) continue; // no self trigger\n      this.handlePermanentEvent({\n        type: PermanentEventType.OTHER_UNIT_DESTROYED,\n        permanent: otherPermanent,\n        destroyedPermanent: permanent,\n        attacker,\n        ctx: this.makeContext(),\n      });\n    }\n  }\n\n  /**\n   * Apply damage to permanent. The damage may optionally be attributed\n   * to an attacker, for card effects.\n   */\n  damagePermanent(\n    permanent: Permanent,\n    damage: number,\n    attacker?: Permanent,\n    /** Ignore the INVULNERABLE counter. */\n    ignoreInvulnerability?: boolean\n  ): void {\n    const effects = this.getEffects(permanent);\n    const effectsAdjust = effects.adjustDamageReceived;\n    const insteadOfDamaged = effects.insteadOfDamaged;\n\n    if (effectsAdjust) {\n      damage = effectsAdjust(permanent, damage, attacker, this.makeContext());\n    }\n\n    for (const spec of this.allSpecs) {\n      if (spec.adjustDamageReceived) {\n        damage = spec.adjustDamageReceived(\n          permanent,\n          damage,\n          attacker,\n          this.makeContext()\n        );\n      }\n    }\n\n    if (damage <= 0) {\n      // Return early if no damage is actually dealt.\n      // This is relevant for card effects.\n      return;\n    }\n\n    // can't be damaged\n    if (\n      !(ignoreInvulnerability ?? false) &&\n      this.inspector.doesPermanentHaveCounterType(\n        permanent,\n        CounterType.INVULNERABLE\n      )\n    )\n      return;\n\n    // --- AFTER THIS POINT, SOME DAMAGE WOULD BE DEALT ---\n\n    if (insteadOfDamaged) {\n      const shouldDamageAnyway = insteadOfDamaged(\n        permanent,\n        damage,\n        attacker,\n        this.makeContext()\n      );\n      if (!shouldDamageAnyway) return;\n    }\n\n    // check for divine shield\n    // divine shield pops on the first instance of damage\n    if (\n      this.inspector.doesPermanentHaveCounterType(\n        permanent,\n        CounterType.DIVINE_SHIELD\n      )\n    ) {\n      this.removeCounterType(permanent, CounterType.DIVINE_SHIELD);\n      return;\n    }\n\n    const undamagedShell = this.inspector.getUndamagedShell(permanent);\n    const maxDamageReceivable =\n      this.inspector.getHealth(permanent) + undamagedShell;\n    // Prevent a permanent's health from going negative, even\n    // instantaneously. This is necessary to prevent thorns\n    // from recursing infinitely.\n    const netDamageReceived = Math.min(damage, maxDamageReceivable);\n    const shellDamage = Math.min(netDamageReceived, undamagedShell);\n    if (shellDamage > 0) {\n      this.controller.addCounter(permanent.id, {\n        type: CounterType.SHELL_DAMAGE_TAKEN,\n        val: shellDamage,\n        explanation: `shell received ${shellDamage} damage`,\n        expiry: PermanentEventType.START_TURN,\n      });\n    }\n    const healthDamage = netDamageReceived - shellDamage;\n    if (healthDamage > 0) {\n      const isIndestructable = this.inspector.doesPermanentHaveCounterType(\n        permanent,\n        CounterType.CANNOT_BE_DESTROYED\n      );\n      const health = this.inspector.getHealth(permanent);\n      this.controller.damagePermanent(\n        permanent.id,\n        isIndestructable ? Math.min(healthDamage, health - 1) : healthDamage,\n        attacker?.id\n      );\n    }\n\n    if (attacker) {\n      this.controller.broadcastAndApply({\n        type: UpdateType.MODIFY_STATS,\n        player: attacker.owner,\n        diffDamageDealt: netDamageReceived,\n      });\n      this.handlePermanentEvent({\n        type: PermanentEventType.AFTER_DEAL_DAMAGE,\n        permanent: attacker,\n        damage: netDamageReceived,\n        defender: permanent,\n        ctx: this.makeContext(),\n      });\n    }\n    this.handlePermanentEvent({\n      type: PermanentEventType.AFTER_DAMAGED,\n      permanent,\n      damage: netDamageReceived,\n      attacker,\n      ctx: this.makeContext(),\n    });\n\n    if (!this.inspector.doesPermanentExist(permanent)) return;\n\n    if (this.inspector.getHealth(permanent) <= 0) {\n      this.destroyPermanent(permanent, attacker);\n      return;\n    }\n\n    this.controller.addCounter(permanent.id, {\n      type: CounterType.DAMAGE_TAKEN,\n      val: netDamageReceived,\n      expiry: PermanentEventType.START_TURN,\n    });\n  }\n\n  /**\n   * Remove (damage) from (permanent).\n   * (damage) must be positive.\n   * (permanent)'s health will not go above max health.\n   * On-damage effects are not triggered, but after-damage-removed is.\n   */\n  removeDamageFromPermanent(permanent: Permanent, damage: number): void {\n    // amount of damage that is actually removed, never more than current damage\n    // eg. permanent at 3/5 health, permanent.damage = 2\n    //     damage = 5, realDamage = min(2, 5) = 2\n    const realDamage = Math.min(permanent.damage, damage);\n    this.controller.damagePermanent(permanent.id, -realDamage);\n\n    this.handlePermanentEvent({\n      type: PermanentEventType.AFTER_DAMAGE_REMOVED,\n      permanent,\n      damage: realDamage,\n      ctx: this.makeContext(),\n    });\n  }\n\n  /**\n   * If it doesn't exist, add a value counter to (permanent) with (val), (explanation(val)) and (expiry).\n   * If it exists, increment the value of the existing counter by (val) and set the explanation to (explanation(new value))\n   */\n  mergeValueCounter(\n    permanent: Permanent,\n    counterType: ValueCounterType,\n    val: number,\n    explanation?: (val: number) => string,\n    expiry?: PermanentEventType\n  ): void {\n    if (!this.inspector.doesPermanentExist(permanent)) return;\n\n    for (const [idx, counter] of permanent.counters.entries()) {\n      if (counter.type === counterType && counter.expiry === expiry) {\n        this.controller.setCounter(\n          permanent.id,\n          idx,\n          counter.val + val,\n          explanation && explanation(counter.val + val)\n        );\n        return;\n      }\n    }\n\n    this.controller.addCounter(permanent.id, {\n      type: counterType,\n      val: val,\n      explanation: explanation && explanation(val),\n      expiry,\n    });\n  }\n\n  adjustPermanentStats(\n    permanent: Permanent,\n    powerDelta: number,\n    healthDelta: number\n  ): void {\n    if (powerDelta !== 0) {\n      this.mergeValueCounter(\n        permanent,\n        CounterType.POWER_ADJUSTMENT,\n        powerDelta\n      );\n    }\n    if (healthDelta !== 0) {\n      this.mergeValueCounter(\n        permanent,\n        CounterType.MAX_HEALTH_ADJUSTMENT,\n        healthDelta\n      );\n    }\n    this.handlePermanentEvent({\n      type: PermanentEventType.AFTER_STATS_CHANGED,\n      permanent,\n      powerDelta,\n      healthDelta,\n      ctx: this.makeContext(),\n    });\n  }\n\n  /**\n   * Remove the first counter of (CounterType) on (permanent).\n   * Returns whether successful.\n   */\n  removeCounterType(permanent: Permanent, counterType: CounterType): boolean {\n    for (const [idx, counter] of permanent.counters.entries()) {\n      if (counter.type === counterType) {\n        this.controller.removeCounter(permanent.id, idx);\n        return true;\n      }\n    }\n    return false;\n  }\n\n  // Attack defender with attacker.\n  attack(attacker: Permanent, defender: Permanent): void {\n    const power = this.inspector.getPower(attacker);\n    this.damagePermanent(defender, power, attacker);\n  }\n\n  /** Unready a permanent as part of performing an action. */\n  unreadyPermanentForAction(permanent: Permanent): void {\n    // In \"always ready\" dev mode, don't unready after an action.\n    if (this.inspector.isAlwaysReady()) return;\n    this.controller.unreadyPermanent(permanent.id);\n  }\n\n  transformPermanent(permanent: Permanent, newCardName: string) {\n    this.controller.transformPermanent(permanent.id, newCardName);\n  }\n\n  /**\n   * Trigger all handlers in handlers listening on ev.\n   */\n  handlePermanentEventWithHandlers(\n    ev: PermanentEvent,\n    handlers: PermanentEventHandlers\n  ): PermanentEventHandlerResult {\n    switch (ev.type) {\n      case PermanentEventType.CREATED: {\n        const handler = handlers[PermanentEventType.CREATED];\n        if (handler) return handler(ev);\n        break;\n      }\n      case PermanentEventType.BEFORE_DESTROYED: {\n        const handler = handlers[PermanentEventType.BEFORE_DESTROYED];\n        if (handler) return handler(ev);\n        break;\n      }\n      case PermanentEventType.AFTER_DESTROYED: {\n        const handler = handlers[PermanentEventType.AFTER_DESTROYED];\n        if (handler) return handler(ev);\n        break;\n      }\n      case PermanentEventType.START_TURN: {\n        const handler = handlers[PermanentEventType.START_TURN];\n        if (handler) return handler(ev);\n        break;\n      }\n      case PermanentEventType.END_TURN: {\n        const handler = handlers[PermanentEventType.END_TURN];\n        if (handler) return handler(ev);\n        break;\n      }\n      case PermanentEventType.BEFORE_DESTROY_UNIT: {\n        const handler = handlers[PermanentEventType.BEFORE_DESTROY_UNIT];\n        if (handler) return handler(ev);\n        break;\n      }\n      case PermanentEventType.AFTER_DESTROY_UNIT: {\n        const handler = handlers[PermanentEventType.AFTER_DESTROY_UNIT];\n        if (handler) return handler(ev);\n        break;\n      }\n      case PermanentEventType.AFTER_DAMAGED: {\n        const handler = handlers[PermanentEventType.AFTER_DAMAGED];\n        if (handler) return handler(ev);\n        break;\n      }\n      case PermanentEventType.AFTER_DAMAGE_REMOVED: {\n        const handler = handlers[PermanentEventType.AFTER_DAMAGE_REMOVED];\n        if (handler) return handler(ev);\n        break;\n      }\n      case PermanentEventType.AFTER_STATS_CHANGED: {\n        const handler = handlers[PermanentEventType.AFTER_STATS_CHANGED];\n        if (handler) return handler(ev);\n        break;\n      }\n      case PermanentEventType.AFTER_DEAL_DAMAGE: {\n        const handler = handlers[PermanentEventType.AFTER_DEAL_DAMAGE];\n        if (handler) return handler(ev);\n        break;\n      }\n      case PermanentEventType.OTHER_UNIT_DESTROYED: {\n        const handler = handlers[PermanentEventType.OTHER_UNIT_DESTROYED];\n        if (handler) return handler(ev);\n        break;\n      }\n      case PermanentEventType.OTHER_UNIT_SPAWN: {\n        const handler = handlers[PermanentEventType.OTHER_UNIT_SPAWN];\n        if (handler) return handler(ev);\n        break;\n      }\n      default: {\n        throw new Error(\"unknown permanent event type\");\n      }\n    }\n  }\n\n  /**\n   * Take care of all custom event handlers arising from ev.\n   */\n  handlePermanentEvent(ev: PermanentEvent): void {\n    const { permanent } = ev;\n\n    // Fire handlers attached to the permanent itself.\n    const handlers = this.getEffects(permanent).handlers;\n    if (handlers !== undefined) {\n      this.handlePermanentEventWithHandlers(ev, handlers);\n    }\n\n    // Fire handlers attached to counters on the permanent.\n    // Be careful since removing counters changes the index.\n    let counterIndex = 0;\n    while (this.inspector.doesPermanentExist(permanent)) {\n      const counter = permanent.counters[counterIndex];\n      if (counter === undefined) {\n        break;\n      }\n      const counterData = this.countersDB[counter.type];\n      let shouldExpire = false;\n      if (counterData !== undefined) {\n        if (counterData.handlers !== undefined) {\n          const res = this.handlePermanentEventWithHandlers(\n            {\n              ...ev,\n              counter,\n              counterIndex,\n            },\n            counterData.handlers\n          );\n          if (res && res.expire !== undefined && res.expire) {\n            shouldExpire = true;\n          }\n        }\n      }\n      if (counter.expiry && counter.expiry === ev.type) {\n        shouldExpire = true;\n      }\n      if (shouldExpire && this.inspector.doesPermanentExist(permanent)) {\n        this.controller.removeCounter(permanent.id, counterIndex);\n        // Do not increment the index!\n        continue;\n      }\n      counterIndex++;\n    }\n  }\n\n  startTurn(player: Player): void {\n    // untap!\n    this.inspector.getPermanentsOf(player).forEach((permanent) => {\n      // Don't ready frozen permanents.\n      if (\n        this.inspector.doesPermanentHaveCounterType(\n          permanent,\n          CounterType.FROZEN\n        )\n      )\n        return;\n      if (permanent.ready) return;\n      this.controller.readyPermanent(permanent.id);\n    });\n\n    // upkeep!\n    const devExtraGemsPerTurn = this.inspector.getDevKnobs().extraGemsPerTurn;\n    if (devExtraGemsPerTurn !== undefined) {\n      const extraGems = new Array(devExtraGemsPerTurn).fill(\n        ColorSymbol.RAINBOW\n      );\n      this.controller.addGems(player, extraGems);\n      this.controller.addGems(this.inspector.getOpponentOf(player), extraGems);\n    }\n\n    // draw!\n    this.drawCard(player);\n\n    for (const permanent of this.inspector.getPermanentsOf(player)) {\n      this.handlePermanentEvent({\n        type: PermanentEventType.START_TURN,\n        permanent,\n        ctx: this.makeContext(),\n      });\n    }\n\n    // first player balancing\n    if (this.gameState.turnNumber === 0) {\n      // Sometimes, the AI starts with <3 bases so it cannot pay.\n      // This is fine.\n      const payment = this.inspector.resolvePayment(player, [\n        ColorSymbol.ROCK,\n        ColorSymbol.ROCK,\n      ]);\n      if (payment !== null) {\n        this.controller.removeGems(player, payment);\n      } else if (!this.inspector.hasAI()) {\n        throw new Error(\"only AI can be exempt from first-turn handicap\");\n      }\n    }\n\n    // Inform ui and tests that we're ready to accept steps.\n    this.controller.startTurn(player);\n\n    // Run the AI turn if necessary.\n    if (this.gameSpec.hasAI && player === Player.P2) {\n      for (const spec of this.allSpecs) {\n        if (spec.aiTurn) {\n          spec.aiTurn(this.makeAIContext());\n        }\n      }\n\n      // Only end the turn if the game is still active.\n      if (this.inspector.isGameActive()) this.endTurn(Player.P2);\n      // Only start the next turn if the game is still active.\n      if (this.inspector.isGameActive()) this.startTurn(Player.P1);\n    }\n  }\n\n  endTurn(player: Player): void {\n    for (const permanent of this.inspector.getPermanentsOf(player)) {\n      this.handlePermanentEvent({\n        type: PermanentEventType.END_TURN,\n        permanent,\n        ctx: this.makeContext(),\n      });\n    }\n\n    this.inspector.getPermanentsOf(player).forEach((permanent) => {\n      if (!permanent.ready) return;\n      this.controller.unreadyPermanent(permanent.id);\n    });\n\n    if (!this.inspector.isGemClearingDisabled()) {\n      this.controller.clearGems(player);\n    }\n    if (this.inspector.isNoTurnCheck()) {\n      const otherPlayer = this.inspector.getOpponentOf(player);\n      this.controller.clearGems(otherPlayer);\n    }\n\n    // change current player and increment turn number\n    this.controller.endTurn(player);\n\n    if (this.gameSpec.afterTurnEnd) {\n      this.gameSpec.afterTurnEnd(player, this.makeContext());\n    }\n  }\n\n  //\n  // STEPS, VALIDATORS AND APPLIERS\n  // these should be paired with each other\n  //\n  // we only need to check things that the inspector doesn't already check\n  // (so the server-only checks)\n  //\n\n  applySummon(step: SummonStepResolved): void {\n    const { player, handCardId, slot, cardName, payment } = step;\n\n    // announce before executing any actions\n    this.controller.announceSummonPermanent(\n      player,\n      this.inspector.getCardDisplayName(cardName)\n    );\n\n    // deduct gem cost\n    this.controller.removeGems(player, payment);\n\n    const faction = this.gameState[player].teamData?.faction ?? null;\n    const isFactionCard = doesCardColorBelongToFaction(\n      this.inspector.getCardColor(cardName),\n      faction\n    );\n    this.controller.broadcastAndApply({\n      type: UpdateType.MODIFY_STATS,\n      player,\n      diffSummons: 1,\n      diffFactionSummons: isFactionCard ? 1 : undefined,\n    });\n\n    // place in field\n    this.spawnPermanent(cardName, player, slot, handCardId);\n  }\n\n  spawnPermanent(\n    cardName: string,\n    owner: Player,\n    slot: Slot,\n    handCardId?: string\n  ): void {\n    // TODO: Return boolean to indicate success?\n    const permanent = this.cardToPermanent({ name: cardName }, owner, slot);\n\n    this.controller.createPermanent(permanent, handCardId);\n\n    this.handlePermanentEvent({\n      type: PermanentEventType.CREATED,\n      permanent,\n      ctx: this.makeContext(),\n    });\n\n    // Handle OTHER_UNIT_SPAWN.\n    for (const otherPermanent of this.inspector.getAllPermanents()) {\n      if (otherPermanent.id === permanent.id) continue; // no self trigger\n      this.handlePermanentEvent({\n        type: PermanentEventType.OTHER_UNIT_SPAWN,\n        permanent: otherPermanent,\n        spawnedPermanent: permanent,\n        ctx: this.makeContext(),\n      });\n    }\n\n    for (const spec of this.allSpecs) {\n      if (spec.afterSummon) {\n        spec.afterSummon(permanent, this.makeContext());\n      }\n    }\n  }\n\n  applyRemove(step: RemoveStepResolved): void {\n    const { permanent } = step;\n    this.controller.removePermanent(permanent.id);\n  }\n\n  applyMove(step: MoveStepResolved): void {\n    const { permanent, slot } = step;\n    const cardData = this.inspector.getCardData(permanent);\n\n    // announce before executing any actions\n    this.controller.announceMove(permanent.owner, cardData.displayName);\n\n    this.unreadyPermanentForAction(permanent);\n    this.controller.move(permanent.id, slot);\n  }\n\n  applyAttack(step: AttackStepResolved): void {\n    const { attacker, defender, payment } = step;\n    const cardData = this.inspector.getCardData(attacker);\n    const defenderData = this.inspector.getCardData(defender);\n\n    // TODO: Don't announce the power here. The damage is already\n    // announced when the damage is applied.\n    this.controller.announceAttackCard(\n      cardData.displayName,\n      this.inspector.getPower(attacker),\n      defenderData.displayName\n    );\n\n    this.unreadyPermanentForAction(attacker);\n    this.controller.removeGems(attacker.owner, payment);\n    this.attack(attacker, defender);\n  }\n\n  applyCreateGems(step: CreateGemsStepResolved): void {\n    const { permanent, gemColors } = step;\n\n    this.unreadyPermanentForAction(permanent);\n    this.controller.addGems(permanent.owner, gemColors);\n  }\n\n  applyDraw(step: DrawStepResolved): void {\n    const { player, payment } = step;\n\n    this.controller.removeGems(player, payment);\n    this.drawCard(player);\n  }\n\n  applyActivateAbility(step: ActivateAbilityStepResolved): void {\n    const { permanent, abilityType, payment } = step;\n\n    switch (abilityType) {\n      case AbilityType.SPECIAL: {\n        this.unreadyPermanentForAction(permanent);\n        break;\n      }\n      // Flex does not unready the permanent and can be activated\n      // multiple times.\n    }\n\n    this.controller.removeGems(permanent.owner, payment);\n\n    const effects = this.getEffects(permanent);\n    const onAbility = (() => {\n      switch (abilityType) {\n        case AbilityType.FLEX: {\n          return effects.onRepeatable;\n        }\n        case AbilityType.SPECIAL: {\n          return effects.onSpecial;\n        }\n      }\n    })();\n\n    if (onAbility) {\n      onAbility(step, this.makeContext());\n    }\n  }\n\n  applyEndTurn(step: EndTurnStep): void {\n    const { player } = step;\n\n    if (this.gameSpec.hasAI && player !== Player.P1) {\n      throw new Error(\"validations should only allow P1 steps for AI games\");\n    }\n\n    this.endTurn(player);\n    // Only start the next turn if the game is still active.\n    this.startTurn(this.inspector.getOpponentOf(player));\n  }\n\n  applyAdvanceKeyframe(step: AdvanceKeyframeStepResolved): void {\n    const { keyframe, dialogOptionIndex } = step;\n    const { dialogOptions } = keyframe;\n\n    if (dialogOptions !== undefined && dialogOptions.length > 1)\n      this.cutsceneChoiceHandler(this, keyframe.id, dialogOptionIndex ?? 0);\n\n    // Returns if end game was activated.\n    const activateKeyframeEndGame = (keyframe: Keyframe): boolean => {\n      if (keyframe.endGame ?? false) {\n        this.endGame(Player.P1, LoseReason.NORMAL, { [Player.P1]: true }, {});\n        return true;\n      }\n      if (keyframe.endGameUnsolved ?? false) {\n        this.endGame(Player.P2, LoseReason.NORMAL, {}, {});\n        return true;\n      }\n      return false;\n    };\n\n    if (activateKeyframeEndGame(keyframe)) return;\n\n    // advance to next keyframe, if exists and okay:\n    if (!keyframe.endCutscene) {\n      const { nextIds, dialogOptions } = keyframe;\n      const keyframes = this.keyframes;\n\n      const getKeyframeById = (keyframeId: string) => {\n        return keyframes.find(({ id }) => id === keyframeId);\n      };\n      const getKeyframeIndexById = (keyframeId: string) => {\n        return keyframes.findIndex(({ id }) => id === keyframeId);\n      };\n\n      const nextKeyframe = ((): Keyframe | null => {\n        if (nextIds === undefined) {\n          const index = getKeyframeIndexById(keyframe.id);\n          if (index === -1)\n            throw new Error(\n              `could not find index of current keyframe ${keyframe.id}`\n            );\n          return keyframes[index + 1];\n        }\n\n        const nextId = ((): string | null => {\n          if (nextIds.length === 1) return nextIds[0];\n\n          // Don't throw as the user might have adversarially omitted\n          // a dialog option index.\n          if (dialogOptionIndex === undefined) return null;\n\n          // Don't throw as the user might have adversarially specified\n          // an invalid dialog option index.\n          const nextId = nextIds[dialogOptionIndex];\n          if (nextId === undefined) return null;\n\n          return nextId;\n        })();\n\n        if (nextId === null) return null;\n\n        const nextKeyframe = getKeyframeById(nextId);\n        if (nextKeyframe === undefined)\n          throw new Error(`could not find next keyframe ${nextId}`);\n        return nextKeyframe;\n      })();\n\n      if (nextKeyframe !== null) {\n        this.controller.setKeyframe(nextKeyframe);\n        if (\n          !(nextKeyframe.blocking ?? false) &&\n          activateKeyframeEndGame(nextKeyframe)\n        )\n          return;\n        return;\n      }\n    }\n\n    // otherwise, just clear keyframe:\n    this.controller.clearKeyframe();\n  }\n\n  // validate and apply a step\n\n  /** Checks if a step is valid, and if so, return it resolved. */\n  resolve(step: Step, role: Role): StepResolved | null {\n    const { resolved, isValid } = this.inspector.resolveAndValidate(step, role);\n    if (!isValid) {\n      return null;\n    }\n    return resolved;\n  }\n\n  /** Execute a player's step. Does not validate. */\n  execute(step: StepResolved): void {\n    for (const spec of this.allSpecs) {\n      if (spec.overrideStep) {\n        if (spec.overrideStep(step, this.makeContext())) {\n          return;\n        }\n      }\n    }\n\n    switch (step.type) {\n      // Game steps\n      case StepType.SUMMON: {\n        this.applySummon(step);\n        break;\n      }\n      case StepType.ATTACK: {\n        this.applyAttack(step);\n        break;\n      }\n      case StepType.CREATE_GEMS: {\n        this.applyCreateGems(step);\n        break;\n      }\n      case StepType.MOVE: {\n        this.applyMove(step);\n        break;\n      }\n      case StepType.DRAW: {\n        this.applyDraw(step);\n        break;\n      }\n      case StepType.ACTIVATE_ABILITY: {\n        this.applyActivateAbility(step);\n        break;\n      }\n      case StepType.END_TURN: {\n        this.applyEndTurn(step);\n        break;\n      }\n      case StepType.ADVANCE_KEYFRAME: {\n        this.applyAdvanceKeyframe(step);\n        break;\n      }\n\n      // Non-game steps\n      case StepType.REMOVE: {\n        this.applyRemove(step);\n        break;\n      }\n      case StepType.CREATE_CHECKPOINT: {\n        this.needCheckpoint.push(step.slot);\n        break;\n      }\n      default: {\n        if (this.gameSpec.applyStep) {\n          this.gameSpec.applyStep(step, this.makeContext());\n        }\n      }\n    }\n  }\n\n  /**\n   * Resolve and execute a step.\n   * Returns whether resolve was successful.\n   * AIs should use aiTryStep.\n   */\n  tryStep(step: Step, role: Role): boolean {\n    // The room may be left open after the game has ended to support\n    // checkpoint restore. However, clients cannot restore checkpoints\n    // directly with steps, so any step made by clients after the game\n    // has ended is invalid.\n    // We need to allow system steps, though, since clients may be\n    // joined to the room after the game has ended, to allow them\n    // to receive updates upon checkpoint restore.\n    if (!this.inspector.isGameActive()) {\n      return false;\n    }\n\n    if (\n      this.inspector.isTurnPending(Player.P1) &&\n      (this.inspector.getDevKnobs().instasolve ?? false)\n    ) {\n      this.endGame(Player.P1, LoseReason.NORMAL, { [Player.P1]: true }, {});\n      return true;\n    }\n\n    const stepResolved = this.resolve(step, role);\n    if (stepResolved === null) {\n      return false;\n    }\n\n    let shouldSkipExecute = false;\n    for (const spec of this.allSpecs) {\n      if (spec.beforeStep) {\n        if (!spec.beforeStep(step, this.makeContext()))\n          shouldSkipExecute = true;\n      }\n    }\n\n    if (!shouldSkipExecute) this.execute(stepResolved);\n\n    for (const spec of this.allSpecs) {\n      if (spec.afterStep) {\n        spec.afterStep(stepResolved, this.makeContext());\n      }\n    }\n\n    const player = stepToPlayer(stepResolved);\n    if (\n      player !== null &&\n      // Don't track step numbers for the AI, since there are\n      // no race conditions or syncs dependent on it.\n      !(this.inspector.hasAI() && player === Player.P2)\n    ) {\n      this.controller.broadcastAndApply({\n        type: UpdateType.SET_STEP_NUMBER,\n        player,\n        stepNumber: this.gameState[player].stepNumber + 1,\n      });\n    }\n\n    // AI steps executed after a player's end turn step may cause\n    // the game to have already ended. Exit early if so to\n    // prevent running game completion actions twice.\n    if (!this.inspector.isGameActive()) return true;\n\n    const winner = this.getWinner();\n    if (winner) {\n      const solves: { [player in Player]?: boolean } = {};\n      const cardUnlocks: { [player in Player]?: string[] } = {};\n      for (const player of [Player.P1, Player.P2]) {\n        if (!this.getIsSolved(player, winner)) continue;\n        solves[player] = true;\n        const playerCardUnlocks = this.getCardUnlocks(player);\n        if (playerCardUnlocks.length > 0)\n          cardUnlocks[player] = playerCardUnlocks;\n      }\n      this.endGame(winner, LoseReason.NORMAL, solves, cardUnlocks);\n      return true;\n    }\n\n    if (\n      this.inspector.getDevKnobs().checkpointAfterEveryStep ||\n      (this.inspector.areCheckpointsAllowed() &&\n        stepResolved.type == StepType.END_TURN)\n    )\n      this.needCheckpoint.push(0); // autosave slot\n    if (this.needCheckpoint.length) {\n      this.checkpointHandler(this, this.needCheckpoint);\n      this.needCheckpoint.length = 0;\n    }\n\n    return true;\n  }\n\n  /** Get the player state visible to its opponent. */\n  getPublicPlayerState(player: Player, gameState: FullGameState): PlayerState {\n    const playerState = gameState[player];\n    const {\n      teamData,\n      stepNumber,\n      drawPile,\n      prevTurnsTime,\n      startTurnTime,\n      stats,\n    } = playerState;\n    return {\n      teamData,\n      stepNumber,\n      // hide cards in hand\n      hand: playerState.hand.map((handCard) => ({\n        ...handCard,\n        card: { ...handCard.card, name: undefined },\n      })),\n      gems: playerState.gems,\n      drawPileSize: drawPile.length,\n      prevTurnsTime,\n      startTurnTime,\n      stats,\n    };\n  }\n\n  /** Get the player state visible to the player itself. */\n  getClientPlayerState(player: Player, gameState: FullGameState): PlayerState {\n    const playerState = gameState[player];\n    const { drawPile } = playerState;\n    const { topCard } = this.inspector.getTopCardsInDrawPile(player);\n    return {\n      ...playerState,\n      drawPile: undefined,\n      discardPile: undefined,\n      drawPileSize: drawPile.length,\n      topCard: this.inspector.doesPlayerHaveMastery(\n        player,\n        SCRY_TOP_CARD_MASTERY_ID\n      )\n        ? topCard\n        : undefined,\n    };\n  }\n\n  // Returns the client view of the game state.\n  // Note that this is not a deep copy. Any use of an\n  // OVERRIDE_STATE update should not be followed by\n  // any more basic updates, since further updates would\n  // be reflected in the state object used here.\n  getClientGameStateForRole(role: Role, gameState: FullGameState): GameState {\n    switch (role) {\n      case Role.GOD: {\n        return {\n          ...gameState,\n        };\n      }\n      case Role.P1: {\n        const { engineOnly, ...clientGameState } = {\n          ...gameState,\n          [Player.P1]: this.getClientPlayerState(Player.P1, gameState),\n          [Player.P2]: this.getPublicPlayerState(Player.P2, gameState),\n        };\n        return clientGameState;\n      }\n      case Role.P2: {\n        const { engineOnly, ...clientGameState } = {\n          ...gameState,\n          [Player.P1]: this.getPublicPlayerState(Player.P1, gameState),\n          [Player.P2]: this.getClientPlayerState(Player.P2, gameState),\n        };\n        return clientGameState;\n      }\n    }\n  }\n\n  // Respond with override state. This is only used when a client\n  // first joins.\n  respOverrideState(roomMember: RoomMember): void {\n    this.controller.respOverrideState(\n      roomMember.id,\n      this.roomId,\n      this.getClientGameStateForRole(roomMember.role, this.gameState)\n    );\n  }\n\n  // This should only be used to save and load game states.\n  broadcastOverrideState(gameState: FullGameState): void {\n    this.controller.overrideState(\n      this.roomId,\n      gameState,\n      this.getClientGameStateForRole(Role.P1, gameState),\n      this.getClientGameStateForRole(Role.P2, gameState)\n    );\n  }\n\n  /**\n   * Accept a member into the room and send it an OVERRIDE_STATE\n   * update. No updates should be sent after this call, since\n   * the state set in OVERRIDE_STATE is a reference that would\n   * get updated before it is serialized. If we ever want to\n   * add updates after the OVERRIDE_STATE (such as to show fancy\n   * animations), we can make a deep copy of the state in controller\n   * (potentially expensive), but even then only one player would\n   * get to see it if multiple players join the room at once.\n   */\n  acceptMember(roomMember: RoomMember): void {\n    this.multicaster.enableMember(roomMember);\n    this.respOverrideState(roomMember);\n  }\n\n  applySystemStep(step: SystemStep): void {\n    switch (step.type) {\n      case StepType.SYSTEM_JOIN: {\n        const { teamId, roomMember, role } = step;\n\n        this.acceptMember(roomMember);\n\n        break;\n      }\n      case StepType.SYSTEM_RESIGN: {\n        if (!this.inspector.isGameActive()) break;\n\n        this.endGame(\n          this.inspector.getOpponentOf(step.player),\n          LoseReason.RESIGN,\n          {},\n          {}\n        );\n        break;\n      }\n      case StepType.SYSTEM_TIME_OUT: {\n        if (!this.inspector.isGameActive()) break;\n\n        this.endGame(\n          this.inspector.getOpponentOf(step.player),\n          LoseReason.TIME,\n          {},\n          {}\n        );\n        break;\n      }\n      default: {\n        throw new Error(\"Invalid system step type.\");\n      }\n    }\n  }\n\n  applyStep(sender: RoomMember, step: Step): void {\n    if (this.needCheckpoint.length)\n      throw new Error(\n        \"needCheckpoint should only be used during the processing of a step, and consumed when the step is done\"\n      );\n\n    if (this.tryStep(step, sender.role)) {\n      this.controller.respSuccess(sender.id);\n    } else {\n      this.controller.respInvalidStep(sender.id);\n    }\n  }\n\n  // Utility functions for AIs.\n\n  /**\n   * Resolve and execute a step as an AI.\n   * Returns whether resolve was successful.\n   */\n  aiTryStep(step: Step): boolean {\n    return this.tryStep(step, Role.GOD);\n  }\n}\n","import { Player } from \"engine/types/game-state\";\nimport {\n  UpdateType,\n  Update,\n  Role,\n  canRoleControlPlayer,\n} from \"engine/types/updates\";\nimport { RoomMember } from \"game-server/Room\";\n\n// Any room activity with state shared between the client and server\n// should never mutate its own state directly. Instead, it should\n// formulate mutations in the form of Updates, which are both\n// applied to the server's state, as well as broadcast to clients\n// to apply to their local state. This ensures that server and client\n// state always remains in sync.\n\nexport enum UpdateBroadcastSpecType {\n  /** Update targets the game server system, rather than clients. */\n  SYSTEM = \"system\",\n  /** Only send to a specific room member ID. */\n  ROOM_MEMBER_ID = \"room_member_id\",\n  /** Send to all room members. */\n  BROADCAST = \"broadcast\",\n  /** Send to members of a given role. */\n  ROLE = \"role\",\n  /** Send to roles satisfying a given filter predicate. */\n  ROLE_FILTER = \"role_filter\",\n}\n\n/** Spec for broadcasting an update to some subset of members in a room. */\nexport type UpdateBroadcastSpec = {\n  upd: Update;\n} & (\n  | {\n      type: UpdateBroadcastSpecType.SYSTEM;\n    }\n  | {\n      type: UpdateBroadcastSpecType.ROOM_MEMBER_ID;\n      roomMemberId: string;\n    }\n  | {\n      type: UpdateBroadcastSpecType.BROADCAST;\n    }\n  | {\n      type: UpdateBroadcastSpecType.ROLE;\n      role: Role;\n    }\n  | {\n      type: UpdateBroadcastSpecType.ROLE_FILTER;\n      pred: (role: Role) => boolean;\n    }\n);\n\n/**\n * All Updates should be sent through an UpdatesMulticaster. This\n * ensures that any Updates that get applied to server state also\n * gets broadcast to clients and applied to client state.\n *\n * While a room activity is in the process of applying a step (or\n * async task), UpdatesMulticaster accumulates all requested updates\n * in an update buffer. After processing the step, the room activity\n * uses readOutUpdates to grab the accumulated updates and clear the\n * buffer.\n */\nexport class UpdatesMulticaster {\n  /**\n   * Transient buffer to accumulate updates while in the process of\n   * applying a step. It should always be empty except while the\n   * room activity is in the process of applying a step.\n   */\n  updates: UpdateBroadcastSpec[];\n  /**\n   * Function to apply an update to the server's copy of the state.\n   */\n  applyUpdateFunc?: (upd: Update) => void;\n\n  constructor() {\n    this.updates = [];\n  }\n\n  setApplyUpdateFunc(applyUpdateFunc: (upd: Update) => void): void {\n    this.applyUpdateFunc = applyUpdateFunc;\n  }\n\n  applyUpdate(upd: Update): void {\n    if (this.applyUpdateFunc === undefined) {\n      throw new Error(\"apply update func not initialized\");\n    }\n    this.applyUpdateFunc(upd);\n  }\n\n  /** Emit a system update. */\n  notifySystem(upd: Update): void {\n    this.updates.push({\n      type: UpdateBroadcastSpecType.SYSTEM,\n      upd,\n    });\n  }\n\n  /**\n   * Send an update to only a specific room member. Such updates\n   * should not affect shared state.\n   */\n  send(roomMemberId: string, upd: Update): void {\n    this.updates.push({\n      type: UpdateBroadcastSpecType.ROOM_MEMBER_ID,\n      upd,\n      roomMemberId,\n    });\n  }\n\n  broadcastAndApply(upd: Update): void {\n    // Note that since the broadcast only happens after all updates from\n    // a step is accumulated, the order of these operations doesn't\n    // actually matter.\n    this.updates.push({\n      type: UpdateBroadcastSpecType.BROADCAST,\n      upd,\n    });\n    this.applyUpdate(upd);\n  }\n\n  /**\n   * Broadcast and apply an asymmetric update.\n   * The full update `upd` is broadcast to all roles with full\n   * information about `player`, while `updHidden` is broadcast\n   * to all other roles. If `updHidden` is null, then nothing\n   * is broadcast to other roles.\n   */\n  broadcastAndApplyAsymmetric(\n    player: Player,\n    upd: Update,\n    updHidden: Update | null\n  ): void {\n    this.applyUpdate(upd);\n    this.updates.push({\n      type: UpdateBroadcastSpecType.ROLE_FILTER,\n      upd: upd,\n      pred: (role) => canRoleControlPlayer(role, player),\n    });\n    if (updHidden != null) {\n      this.updates.push({\n        type: UpdateBroadcastSpecType.ROLE_FILTER,\n        upd: updHidden,\n        pred: (role) => !canRoleControlPlayer(role, player),\n      });\n    }\n  }\n\n  /**\n   * Broadcast and apply an update that is different for every role.\n   * The GOD role update is the one applied to the server state.\n   */\n  broadcastPerRoleAndApply(upds: { [role in Role]?: Update }): void {\n    const fullUpd = upds[Role.GOD];\n    if (fullUpd === undefined) throw new Error(\"full update not provided\");\n    this.applyUpdate(fullUpd);\n    for (const [role, upd] of Object.entries(upds)) {\n      this.updates.push({\n        type: UpdateBroadcastSpecType.ROLE,\n        upd,\n        role: role as Role,\n      });\n    }\n  }\n\n  readOutUpdates(): UpdateBroadcastSpec[] {\n    const updates = this.updates;\n    // reset\n    this.updates = [];\n\n    return updates;\n  }\n\n  enableMember(roomMember: RoomMember): void {\n    this.notifySystem({\n      type: UpdateType.SYSTEM_ENABLE_MEMBER,\n      roomMember,\n    });\n  }\n}\n","import { Player } from \"engine/types/game-state\";\n\nimport { GameServer } from \"game-server/GameServer\";\nimport { BackendRoom } from \"game-server/backend-interface/BackendInterface\";\nimport {\n  BackendSyncReqPacket,\n  SyncLoopController,\n  SyncTracker,\n} from \"game-server/backend-interface/backend-sync\";\n\nexport class MiscTeamStateSyncController {\n  server: GameServer;\n  /**\n   * Team IDs that have been seen in a previous iteration of the sync,\n   * in the current sync loop.\n   */\n  seenTeamIds: Set<string>;\n  syncLoopController: SyncLoopController;\n\n  constructor(server: GameServer) {\n    this.server = server;\n    this.seenTeamIds = new Set();\n    this.syncLoopController = new SyncLoopController(async () => {\n      return await this.runSyncAsync();\n    });\n  }\n\n  /**\n   * Run one iteration of the sync. Should only be used by the sync loop.\n   * Returns if the sync is already complete (i.e. we have seen all\n   * the teams).\n   */\n  private async runSyncAsync(): Promise<boolean> {\n    const syncPacket: { [teamId: string]: BackendSyncReqPacket } = {};\n    for (const teamController of this.server.teamControllers.values()) {\n      if (this.seenTeamIds.has(teamController.teamId)) continue;\n      if (\n        Object.keys(syncPacket).length >=\n        this.server.config.miscTeamStateTeamsSyncLimit\n      )\n        break;\n\n      const {\n        teamId,\n        slowSyncTracking: { syncController },\n      } = teamController;\n      const snapshot = syncController.startSync();\n      if (snapshot === null) continue;\n      this.seenTeamIds.add(teamId);\n      syncPacket[teamId] = snapshot;\n    }\n    if (Object.keys(syncPacket).length === 0) {\n      // Reset the seen team IDs to try them again on the next loop.\n      this.seenTeamIds.clear();\n      return true;\n    }\n\n    this.server.recordSlowSyncPacket();\n    const didSyncSucceed = await (async () => {\n      try {\n        await this.server.syncDataThrottledAsync({\n          teamState: syncPacket,\n        });\n        return true;\n      } catch (err) {\n        console.error(err);\n        return false;\n      }\n    })();\n\n    for (const [teamId, snapshot] of Object.entries(syncPacket)) {\n      const teamController = this.server.getTeamController(teamId);\n      const { syncController } = teamController.slowSyncTracking;\n      syncController.endSync(didSyncSucceed ? snapshot : null);\n    }\n    return false;\n  }\n}\n\nexport class DecksAndMasteryTreesSyncController {\n  server: GameServer;\n  /**\n   * Team IDs that have been seen in a previous iteration of the sync,\n   * in the current sync loop.\n   */\n  seenTeamIds: Set<string>;\n  syncLoopController: SyncLoopController;\n\n  constructor(server: GameServer) {\n    this.server = server;\n    this.seenTeamIds = new Set();\n    this.syncLoopController = new SyncLoopController(async () => {\n      return await this.runSyncAsync();\n    });\n  }\n\n  /**\n   * Run one iteration of the sync. Should only be used by the sync loop.\n   * Returns if the sync is already complete (i.e. we have seen all\n   * the teams).\n   */\n  private async runSyncAsync(): Promise<boolean> {\n    const syncPacket: { [teamId: string]: BackendSyncReqPacket } = {};\n    for (const teamController of this.server.teamControllers.values()) {\n      if (this.seenTeamIds.has(teamController.teamId)) continue;\n      if (\n        Object.keys(syncPacket).length >=\n        this.server.config.decksAndMasteryTreesTeamsSyncLimit\n      )\n        break;\n\n      const { teamId, deckControllers, masteryTreeController } = teamController;\n      const teamSyncPacket: BackendSyncReqPacket = {};\n      for (const [slot, deckController] of deckControllers.entries()) {\n        if (deckController === null) continue;\n        const {\n          deck,\n          slowSyncTracking: { tracker },\n        } = deckController;\n        if (tracker.snapshot()) {\n          teamSyncPacket.decks ??= {};\n          teamSyncPacket.decks[slot] = { teamId, slot, deck };\n        }\n      }\n\n      const {\n        masteryTree,\n        slowSyncTracking: { tracker: masteryTreeTracker },\n      } = masteryTreeController;\n      if (masteryTreeTracker.snapshot()) {\n        teamSyncPacket.masteryTree = masteryTree;\n      }\n\n      this.seenTeamIds.add(teamId);\n      if (Object.keys(teamSyncPacket).length === 0) continue;\n      syncPacket[teamId] = teamSyncPacket;\n    }\n    if (Object.keys(syncPacket).length === 0) {\n      // Reset the seen team IDs to try them again on the next loop.\n      this.seenTeamIds.clear();\n      return true;\n    }\n\n    this.server.recordSlowSyncPacket();\n    const didSyncSucceed = await (async () => {\n      try {\n        await this.server.syncDataThrottledAsync({\n          teamState: syncPacket,\n        });\n        return true;\n      } catch (err) {\n        console.error(err);\n        return false;\n      }\n    })();\n\n    for (const [teamId, snapshot] of Object.entries(syncPacket)) {\n      const teamController = this.server.getTeamController(teamId);\n      for (const { slot, deck } of Object.values(snapshot.decks ?? {})) {\n        const { tracker } =\n          teamController.getDeckController(slot).slowSyncTracking;\n        tracker.handleSyncResult(didSyncSucceed);\n      }\n      if (snapshot.masteryTree !== undefined) {\n        const { tracker } =\n          teamController.masteryTreeController.slowSyncTracking;\n        tracker.handleSyncResult(didSyncSucceed);\n      }\n    }\n    return false;\n  }\n}\n\nexport class CheckpointsSyncController {\n  server: GameServer;\n  /**\n   * Team IDs that have been seen in a previous iteration of the sync,\n   * in the current sync loop.\n   */\n  seenTeamIds: Set<string>;\n  syncLoopController: SyncLoopController;\n\n  constructor(server: GameServer) {\n    this.server = server;\n    this.seenTeamIds = new Set();\n    this.syncLoopController = new SyncLoopController(async () => {\n      return await this.runSyncAsync();\n    });\n  }\n\n  /**\n   * Run one iteration of the sync. Should only be used by the sync loop.\n   * Returns if the sync is already complete (i.e. we have seen all\n   * the teams).\n   */\n  private async runSyncAsync(): Promise<boolean> {\n    const syncPacket: { [teamId: string]: BackendSyncReqPacket } = {};\n    let numCheckpointsInPacket = 0;\n    for (const teamController of this.server.teamControllers.values()) {\n      if (this.seenTeamIds.has(teamController.teamId)) continue;\n      if (numCheckpointsInPacket >= this.server.config.checkpointsSyncLimit)\n        break;\n\n      const { teamId, battleControllers } = teamController;\n      const teamSyncPacket: BackendSyncReqPacket = {};\n      for (const [puzName, battleController] of battleControllers.entries()) {\n        const { checkpoints, checkpointsSyncTracker: tracker } =\n          battleController;\n        if (tracker.snapshot()) {\n          teamSyncPacket.checkpoints ??= {};\n          teamSyncPacket.checkpoints[puzName] = checkpoints;\n          numCheckpointsInPacket += Object.keys(checkpoints).length;\n        }\n      }\n\n      this.seenTeamIds.add(teamId);\n      if (Object.keys(teamSyncPacket).length === 0) continue;\n      syncPacket[teamId] = teamSyncPacket;\n    }\n    if (Object.keys(syncPacket).length === 0) {\n      // Reset the seen team IDs to try them again on the next loop.\n      this.seenTeamIds.clear();\n      return true;\n    }\n\n    this.server.recordSlowSyncPacket();\n    const didSyncSucceed = await (async () => {\n      try {\n        await this.server.syncDataThrottledAsync({\n          teamState: syncPacket,\n        });\n        return true;\n      } catch (err) {\n        console.error(err);\n        return false;\n      }\n    })();\n\n    for (const [teamId, snapshot] of Object.entries(syncPacket)) {\n      const teamController = this.server.getTeamController(teamId);\n      for (const [puzName, checkpoints] of Object.entries(\n        snapshot.checkpoints ?? {}\n      )) {\n        const { checkpointsSyncTracker: tracker } =\n          teamController.getBattleController(puzName);\n        tracker.handleSyncResult(didSyncSucceed);\n      }\n    }\n    return false;\n  }\n}\n\nexport class ActiveRoomsSyncController {\n  server: GameServer;\n  /**\n   * Room IDs that have been seen in a previous iteration of the sync,\n   * in the current sync loop.\n   */\n  seenRoomIds: Set<string>;\n  /**\n   * Team IDs that have been seen in a previous iteration of the sync,\n   * in the current sync loop.\n   */\n  seenTeamIds: Set<string>;\n  syncLoopController: SyncLoopController;\n\n  constructor(server: GameServer) {\n    this.server = server;\n    this.seenRoomIds = new Set();\n    this.seenTeamIds = new Set();\n    this.syncLoopController = new SyncLoopController(async () => {\n      return await this.runSyncAsync();\n    });\n  }\n\n  /**\n   * Run one iteration of the sync. Should only be used by the sync loop.\n   * Returns if the sync is already complete (i.e. we have seen all\n   * the rooms).\n   */\n  private async runSyncAsync(): Promise<boolean> {\n    const syncPacket: { [roomId: string]: BackendRoom } = {};\n    const syncTrackers: SyncTracker[] = [];\n    for (const teamController of this.server.teamControllers.values()) {\n      const { teamId, battleControllers } = teamController;\n      if (this.seenTeamIds.has(teamId)) continue;\n      if (\n        Object.keys(syncPacket).length >=\n        this.server.config.activeRoomsSyncLimit\n      )\n        break;\n\n      let isPartialTeamSync = false;\n      for (const [puzName, battleController] of battleControllers) {\n        if (\n          Object.keys(syncPacket).length >=\n          this.server.config.activeRoomsSyncLimit\n        ) {\n          isPartialTeamSync = true;\n          break;\n        }\n        const room = battleController.getActiveRoom();\n        if (room === null) continue;\n        // If the room is inactive, then it should already have\n        // been added to slow sync, so don't sync it here.\n        if (!battleController.isRoomActive()) continue;\n        // Only sync for the primary player, so that we don't get\n        // duplicate syncs. We are guaranteed that every game room\n        // has a real team playing as P1.\n        if (battleController.getPlayer() !== Player.P1) continue;\n        const { engine, roomId, hostPuzName, createTime, tracker } = room;\n        if (this.seenRoomIds.has(roomId)) continue;\n        if (tracker.snapshot()) {\n          const { puzName, gameState } = engine;\n          const p1TeamData = gameState[Player.P1].teamData;\n          const p2TeamData = gameState[Player.P2].teamData;\n          const p1TeamId = p1TeamData?.teamId;\n          const p2TeamId = p2TeamData?.teamId;\n          this.seenRoomIds.add(roomId);\n          syncPacket[roomId] = {\n            roomId,\n            puzName,\n            hostPuzName,\n            createTime,\n            p1TeamId,\n            p2TeamId,\n            p1Faction: p1TeamData?.faction ?? undefined,\n            p2Faction: p2TeamData?.faction ?? undefined,\n            savedRoom: { gameState },\n          };\n          syncTrackers.push(tracker);\n        }\n      }\n      if (!isPartialTeamSync) this.seenTeamIds.add(teamId);\n    }\n    if (Object.keys(syncPacket).length === 0) {\n      // Reset the seen room/team IDs to try them again on the next loop.\n      this.seenRoomIds.clear();\n      this.seenTeamIds.clear();\n      return true;\n    }\n\n    const { lockedRoomIds } =\n      this.server.gameRoomsController.slowSyncTracking\n        .completedRoomsSyncController;\n    for (const roomId of Object.keys(syncPacket)) {\n      lockedRoomIds.add(roomId);\n    }\n    this.server.recordSlowSyncPacket();\n    const didSyncSucceed = await (async () => {\n      try {\n        await this.server.syncDataThrottledAsync({\n          rooms: syncPacket,\n        });\n        return true;\n      } catch (err) {\n        console.error(err);\n        return false;\n      }\n    })();\n    for (const roomId of Object.keys(syncPacket)) {\n      lockedRoomIds.delete(roomId);\n    }\n\n    if (lockedRoomIds.size !== 0) {\n      // Not a critical failure, so don't throw.\n      // This might mean that there are multiple sync loops running\n      // at once, which should not be happening.\n      console.error(\n        \"locked rooms found in active rooms sync not owned by current sync loop\"\n      );\n    }\n\n    for (const tracker of syncTrackers) {\n      tracker.handleSyncResult(didSyncSucceed);\n    }\n    return false;\n  }\n}\n\nexport class CompletedRoomsSyncController {\n  server: GameServer;\n  roomsToSync: BackendRoom[];\n  /**\n   * Room IDs that should not be synced here as they are actively being\n   * synced in a previous slow sync.\n   */\n  lockedRoomIds: Set<string>;\n  /**\n   * Room IDs that have been seen in a previous iteration of the sync,\n   * in the current sync loop. This prevents the sync loop from\n   * repeatedly retrying errored rooms if it hits an error.\n   */\n  seenRoomIds: Set<string>;\n  syncLoopController: SyncLoopController;\n\n  constructor(server: GameServer) {\n    this.server = server;\n    this.roomsToSync = [];\n    this.lockedRoomIds = new Set();\n    this.seenRoomIds = new Set();\n    this.syncLoopController = new SyncLoopController(async () => {\n      return await this.runSyncAsync();\n    });\n  }\n\n  addRoom(room: BackendRoom) {\n    this.roomsToSync.push(room);\n  }\n\n  /**\n   * Run one iteration of the sync. Should only be used by the sync loop.\n   * Returns if the sync is already complete (i.e. there are no more\n   * rooms in the buffers to sync).\n   */\n  private async runSyncAsync(): Promise<boolean> {\n    const syncPacket: { [roomId: string]: BackendRoom } = {};\n    for (const room of this.roomsToSync) {\n      const { roomId } = room;\n      if (\n        Object.keys(syncPacket).length >=\n        this.server.config.completedRoomsSyncLimit\n      )\n        break;\n      // Skip locked rooms. They can be synced next iteration if\n      // their other syncs has completed by then.\n      if (this.lockedRoomIds.has(roomId)) continue;\n      if (this.seenRoomIds.has(roomId)) continue;\n      this.seenRoomIds.add(roomId);\n      syncPacket[roomId] = room;\n    }\n    if (Object.keys(syncPacket).length === 0) {\n      // Reset the seen room IDs to try them again on the next loop.\n      this.seenRoomIds.clear();\n      return true;\n    }\n    this.server.recordSlowSyncPacket();\n    const didSyncSucceed = await (async () => {\n      try {\n        await this.server.syncDataThrottledAsync({\n          rooms: syncPacket,\n        });\n        return true;\n      } catch (err) {\n        console.error(err);\n        return false;\n      }\n    })();\n    if (!didSyncSucceed) return false;\n\n    this.roomsToSync = this.roomsToSync.filter(\n      (room) => syncPacket[room.roomId] === undefined\n    );\n    return false;\n  }\n}\n","import { DeckSelection } from \"engine/types/decks\";\nimport {\n  Player,\n  DevKnobs,\n  PlayerStateTeamData,\n  MutableGameState,\n} from \"engine/types/game-state\";\nimport { PUZ_NAME_PVP } from \"engine/puzzles/puzzle-data\";\nimport { GameSpec } from \"engine/types/game-specs\";\nimport {\n  EffectsDB,\n  CountersDB,\n  getEffectsDB,\n  getCountersDB,\n} from \"engine/cards/card-effects\";\nimport { getPrimaryPuzName } from \"engine/puzzles/puzzle-data\";\nimport { FACTIONS_MASTERY_ID } from \"engine/puzzles/mastery-data\";\nimport { PUZ_NAME_COMMON } from \"engine/game-specs/common-shared\";\nimport { getGameSpec } from \"engine/all-game-specs\";\nimport { StaticInspector } from \"engine/Inspector\";\nimport { Engine } from \"engine/Engine\";\nimport { UpdatesMulticaster } from \"game-server/UpdatesMulticaster\";\nimport { GameServer } from \"game-server/GameServer\";\nimport {\n  ActiveRoomsSyncController,\n  CompletedRoomsSyncController,\n} from \"game-server/sync-controllers\";\nimport {\n  TeamCard,\n  makeBattleSolveAnswerSubmission,\n} from \"game-server/backend-interface/BackendInterface\";\nimport {\n  SyncTracker,\n  SyncObjectType,\n} from \"game-server/backend-interface/backend-sync\";\nimport { GameRoom } from \"game-server/Room\";\nimport { DirtyStateType, ServerDirtyStateUpdate } from \"game-server/monitoring\";\n\nexport class GameRoomsController {\n  server: GameServer;\n\n  /**\n   * Map from roomId to room objects, and a refcount to ensure that\n   * the room gets cleared once it is no longer referenced by any\n   * active games.\n   */\n  rooms: Map<\n    string,\n    {\n      room: GameRoom;\n      refcount: number;\n    }\n  >;\n  /** Map from teamId and puzName to the active roomId. */\n  activeRoomIds: Map<string, Map<string, string>>;\n\n  slowSyncTracking: {\n    activeRoomsSyncController: ActiveRoomsSyncController;\n    completedRoomsSyncController: CompletedRoomsSyncController;\n  };\n\n  puzDataCache: {\n    [puzName: string]: {\n      allSpecs: ReadonlyArray<GameSpec>;\n      effectsDB: EffectsDB;\n      countersDB: CountersDB;\n      inspector: StaticInspector;\n    };\n  };\n\n  constructor(server: GameServer) {\n    this.server = server;\n    this.rooms = new Map();\n    this.activeRoomIds = new Map();\n    this.slowSyncTracking = {\n      activeRoomsSyncController: new ActiveRoomsSyncController(this.server),\n      completedRoomsSyncController: new CompletedRoomsSyncController(\n        this.server\n      ),\n    };\n    this.puzDataCache = {};\n  }\n\n  getPuzData(puzName: string) {\n    const existingPuzData = this.puzDataCache[puzName];\n    if (existingPuzData !== undefined) return existingPuzData;\n\n    const allSpecs = [PUZ_NAME_COMMON, ...puzName.split(\",\")].map((specName) =>\n      getGameSpec(specName)\n    );\n    const effectsDB = getEffectsDB(allSpecs, this.server.cardsDB);\n    const countersDB = getCountersDB(allSpecs, effectsDB);\n    const inspector = new StaticInspector(\n      allSpecs,\n      this.server.cardsDB,\n      effectsDB\n    );\n\n    const puzData = {\n      allSpecs,\n      effectsDB,\n      countersDB,\n      inspector,\n    };\n    this.puzDataCache[puzName] = puzData;\n    return puzData;\n  }\n\n  getInspector(puzName: string): StaticInspector {\n    return this.getPuzData(puzName).inspector;\n  }\n\n  createRoomWithTeamData(\n    puzName: string,\n    hostPuzName: string,\n    teamData: { [player in Player]?: PlayerStateTeamData },\n    deckSelections: { [player in Player]?: DeckSelection },\n    devKnobs?: DevKnobs,\n    gameState?: MutableGameState,\n    roomId?: string\n  ): GameRoom {\n    roomId ??= this.server.genGameRoomId();\n    const multicaster = new UpdatesMulticaster();\n    const { allSpecs, effectsDB, countersDB } = this.getPuzData(puzName);\n    const engine = new Engine(\n      multicaster,\n      puzName,\n      roomId,\n      allSpecs,\n      (player) => [],\n      this.server.cardsDB,\n      effectsDB,\n      countersDB,\n      this.server.keyframes,\n      teamData,\n      deckSelections,\n      (engine, slots) => {\n        // this should only be one team, since we are in an AI battle\n        for (const { teamId } of Object.values(teamData))\n          this.server\n            .getBattleController(teamId, hostPuzName)\n            .makeCheckpoint(engine, slots);\n      },\n      (engine, keyframeId, dialogOptionIndex) => {\n        for (const { teamId } of Object.values(teamData)) {\n          // HACK: We now depend on the cutscene choice sync to render\n          // the victory page, so this needs to be blocking. We don't\n          // need to block right here, though, since we will block\n          // later anyway to sync the final cutscene solve.\n          // No need to trigger the sync loop either, since we already\n          // trigger the fast sync loop periodically (in addition to\n          // immediately on normal fast syncs).\n          this.server.getTeamController(teamId).mergeFastSyncPacket({\n            cutsceneChoices: [\n              {\n                keyframeId,\n                dialogOptionIndex,\n              },\n            ],\n          });\n        }\n      },\n      devKnobs,\n      gameState\n    );\n    if (gameState === undefined) engine.init();\n    const room: GameRoom = {\n      engine,\n      roomId,\n      hostPuzName,\n      createTime: new Date().getTime(),\n      members: new Map(),\n      multicaster,\n      tracker: new SyncTracker(\n        this.server.config,\n        SyncObjectType.ROOM,\n        (dirtyState) => {\n          const dirtyStateUpd: ServerDirtyStateUpdate = { teams: {} };\n          // Only merge the dirty state update if the room is still\n          // active. Otherwise, the dirty state should be marked as\n          // synced and reponsibility for syncing the room state should\n          // transfer to the completed rooms sync path.\n          for (const { teamId } of Object.values(teamData)) {\n            const activeRoom = this.getActiveRoom(teamId, hostPuzName);\n            if (activeRoom === null || activeRoom.roomId !== roomId) continue;\n            const battleController = this.server.getBattleController(\n              teamId,\n              hostPuzName\n            );\n            if (!battleController.isRoomActive()) continue;\n            dirtyStateUpd.teams[teamId] = {\n              rooms: { [hostPuzName]: dirtyState },\n            };\n          }\n          this.server.dirtyStateTracker.update(dirtyStateUpd);\n        }\n      ),\n    };\n    this.server.prepareRoom(room);\n    this.rooms.set(roomId, {\n      room,\n      refcount: 0,\n    });\n    return room;\n  }\n\n  createRoomFromGameState(\n    puzName: string,\n    hostPuzName: string,\n    gameState: MutableGameState,\n    roomId?: string\n  ): GameRoom {\n    const teamData = Object.fromEntries(\n      [Player.P1, Player.P2].flatMap((player) => {\n        const playerTeamData = gameState[player].teamData;\n        if (playerTeamData === undefined) return [];\n        return [[player, playerTeamData]];\n      })\n    );\n\n    return this.server.gameRoomsController.createRoomWithTeamData(\n      puzName,\n      hostPuzName,\n      teamData,\n      gameState.engineOnly.deckSelections,\n      gameState.devKnobs,\n      gameState,\n      roomId\n    );\n  }\n\n  createRoom(\n    puzName: string,\n    hostPuzName: string,\n    teamIds: { [player in Player]?: string },\n    deckSelections: { [player in Player]?: DeckSelection },\n    devKnobs?: DevKnobs\n  ): GameRoom {\n    const teamData = Object.fromEntries(\n      Object.entries(teamIds).map(([player, teamId]) => {\n        const teamController = this.server.getTeamController(teamId);\n        return [player, teamController.makeTeamDataForBattle(puzName)];\n      })\n    );\n    return this.createRoomWithTeamData(\n      puzName,\n      hostPuzName,\n      teamData,\n      deckSelections,\n      devKnobs\n    );\n  }\n\n  getActiveRoom(teamId: string, puzName: string): GameRoom | null {\n    const teamRooms = this.activeRoomIds.get(teamId);\n    if (teamRooms === undefined) return null;\n    const roomId = teamRooms.get(puzName);\n    if (roomId === undefined) return null;\n    const roomTracker = this.rooms.get(roomId);\n    if (roomTracker === undefined)\n      throw new Error(\"expect active room to be available\");\n    return roomTracker.room;\n  }\n\n  setActiveRoom(teamId: string, puzName: string, roomId: string) {\n    const roomTracker = this.rooms.get(roomId);\n    if (roomTracker === undefined)\n      throw new Error(\"expect room to exist if setting active\");\n    roomTracker.refcount++;\n    const teamRooms = (() => {\n      const existingTeamRooms = this.activeRoomIds.get(teamId);\n      if (existingTeamRooms !== undefined) return existingTeamRooms;\n      const newTeamRooms = new Map();\n      this.activeRoomIds.set(teamId, newTeamRooms);\n      return newTeamRooms;\n    })();\n    const prevRoomId = teamRooms.get(puzName);\n    if (prevRoomId !== undefined) {\n      const prevRoomTracker = this.rooms.get(prevRoomId);\n      if (prevRoomTracker === undefined)\n        throw new Error(\"expect prev room to exist if unsetting\");\n      prevRoomTracker.refcount--;\n      if (prevRoomTracker.refcount <= 0) this.rooms.delete(prevRoomId);\n    }\n    teamRooms.set(puzName, roomId);\n  }\n\n  getNumRoomMembers(teamId: string, puzName: string) {\n    const room = this.getActiveRoom(teamId, puzName);\n    if (room === null) return 0;\n    return [...room.members.values()].filter(\n      (otherMember) => otherMember.conn.teamId === teamId\n    ).length;\n  }\n\n  handleRoomMembersUpdate(teamId: string, puzName: string) {\n    this.server.bigBoardStateTracker.updateTeam(teamId, {\n      unlocks: {\n        [puzName]: {\n          numMembers: this.getNumRoomMembers(teamId, puzName),\n        },\n      },\n    });\n  }\n\n  async handleRoomCompleteAsync(\n    room: GameRoom,\n    solvedTeamIds: string[],\n    cardUnlocks: TeamCard[]\n  ): Promise<void> {\n    const { roomId, hostPuzName, engine, createTime } = room;\n    const { inspector } = engine;\n    const { puzName: fullPuzName, gameState } = room.engine;\n    const puzName = getPrimaryPuzName(fullPuzName);\n    const isPvP = puzName === PUZ_NAME_PVP;\n    const timeNow = new Date().getTime();\n\n    // Deduplicate the teamIds so that we only report solves once.\n    const p1TeamData = gameState[Player.P1].teamData;\n    const p2TeamData = gameState[Player.P2].teamData;\n    const p1TeamId = p1TeamData?.teamId;\n    const p2TeamId = p2TeamData?.teamId;\n    const teamIds = new Set([\n      ...(p1TeamId === undefined ? [] : [p1TeamId]),\n      ...(p2TeamId === undefined ? [] : [p2TeamId]),\n    ]);\n    const teamControllers = Array.from(teamIds, (teamId) =>\n      this.server.getTeamController(teamId)\n    );\n    /**\n     * Just treat it as solved if any player solved, since it sounds like\n     * we're only ever going to have P1 solving anyway.\n     */\n    const isSolved = solvedTeamIds.length > 0;\n    const totalTime = inspector.getSpeedrunTime();\n    const speedrunPlayers = isSolved ? [Player.P1] : [];\n\n    const playerScores: { [player in Player]?: number } = {};\n    for (const player of [Player.P1, Player.P2]) {\n      let factionScore = inspector.calcFactionScore(player, isPvP, isSolved);\n      if (!isPvP) {\n        if (factionScore > gameState.engineOnly.gainedScore) {\n          factionScore -= gameState.engineOnly.gainedScore;\n          gameState.engineOnly.gainedScore += factionScore;\n        } else factionScore = 0;\n      }\n      if (factionScore !== 0) playerScores[player] = factionScore;\n    }\n\n    const { winner, loseReason } = gameState;\n    if (winner === undefined || loseReason === undefined)\n      throw new Error(\"winner/loseReason should be defined on game end\");\n\n    const roomToSync = {\n      roomId,\n      puzName,\n      hostPuzName,\n      createTime,\n      p1TeamId,\n      p2TeamId,\n      p1Faction: p1TeamData?.faction ?? undefined,\n      p2Faction: p2TeamData?.faction ?? undefined,\n      savedRoom: { gameState },\n      gameEndInfo: {\n        totalTime,\n        isSolved,\n        winner,\n        loseReason,\n        p1FactionScoreContribution: playerScores[Player.P1],\n        p2FactionScoreContribution: playerScores[Player.P2],\n      },\n    };\n\n    /**\n     * Detect immediate-retries (\"mulligans\") in AI rooms and don't\n     * bother adding those rooms to sync.\n     */\n    if (room.tracker.revNumber > 0 || !inspector.hasAI()) {\n      // Treat the room as synced, since we've transferred responsibility\n      // for syncing it to the completed rooms sync controller.\n      const teamDirtyStateUpd = {\n        rooms: {\n          [hostPuzName]: {\n            type: DirtyStateType.SYNCED,\n            lastSyncTime: Date.now(),\n          },\n        },\n      };\n      this.server.dirtyStateTracker.update({\n        teams: Object.fromEntries(\n          [...teamIds].map((teamId) => [teamId, teamDirtyStateUpd])\n        ),\n      });\n\n      const { completedRoomsSyncController } = this.slowSyncTracking;\n      this.slowSyncTracking.completedRoomsSyncController.addRoom(roomToSync);\n    }\n\n    await Promise.all(\n      Array.from(teamControllers, (teamController) =>\n        teamController.handleTeamUpdatesAsync({\n          answerSubmissionsToAdd: solvedTeamIds\n            .filter((teamId) => teamId === teamController.teamId)\n            .map((teamId) =>\n              makeBattleSolveAnswerSubmission(teamId, puzName, timeNow)\n            ),\n          cardUnlocksToAdd: cardUnlocks\n            .filter(({ teamId }) => teamId === teamController.teamId)\n            .map(({ teamId, cardName }) => ({\n              teamId,\n              puzName,\n              cardName,\n              timestamp: timeNow,\n            })),\n        })\n      )\n    );\n\n    for (const player of speedrunPlayers) {\n      const { teamData } = gameState[player];\n      if (teamData === undefined)\n        throw new Error(\"expect speedrunning players to belong to a team\");\n      const { teamId, enabledMasteries } = teamData;\n      this.server\n        .getTeamController(teamId)\n        .handleNewSpeedrunTime(puzName, totalTime);\n    }\n\n    for (const [kPlayer, score] of Object.entries(playerScores)) {\n      const player = kPlayer as Player;\n      const { teamData } = gameState[player];\n      if (teamData === undefined)\n        throw new Error(\"expect scored players to belong to teams\");\n      const { teamId, faction, enabledMasteries } = teamData;\n      const teamController = this.server.getTeamController(teamId);\n      if (!(enabledMasteries[FACTIONS_MASTERY_ID] ?? false)) continue;\n      if (faction === null) continue;\n      teamController.handleChangeFactionScoreContributions({\n        [faction]: score,\n      });\n    }\n\n    for (const teamController of teamControllers) {\n      teamController\n        .getBattleController(hostPuzName)\n        .handleRoomComplete(roomId, gameState.engineOnly.gainedScore);\n    }\n  }\n\n  async triggerSlowSyncAsync(): Promise<void> {\n    await this.slowSyncTracking.completedRoomsSyncController.syncLoopController.triggerLoopAsync();\n    await this.slowSyncTracking.activeRoomsSyncController.syncLoopController.triggerLoopAsync();\n  }\n}\n","import { Faction, makeInitFactionScores } from \"engine/types/factions\";\nimport { SOLVE_COUNTS_MASTERY_ID } from \"engine/puzzles/mastery-data\";\nimport { GameServer } from \"game-server/GameServer\";\nimport {\n  GlobalUpdatesScopeType,\n  GlobalUpdateType,\n  GlobalStatePuzzleStats,\n  ClientSpeedrunTimeRecord,\n  SPEEDRUN_LEADERBOARD_SUMMARY_LENGTH,\n  RankedLeaderboard,\n  TeamNameDisplayDataUpdate,\n} from \"game-server/global-updates\";\nimport {\n  TeamSummaryUpdate,\n  teamSummaryUpdateToTeamNameDisplayUpdate,\n} from \"game-server/monitoring\";\n\nexport type SpeedrunTimeRecord = {\n  teamId: string;\n  speedrunTime: number;\n};\n\nexport type SolveTimeRecord = {\n  teamId: string;\n  solveTime: number;\n};\n\nexport class StatsController {\n  server: GameServer;\n\n  /** Map from battleGroupName to the number of teams that unlocked it. */\n  unlockCounts: Map<string, number>;\n  /** Map from battleGroupName to the number of teams that solved it. */\n  solveCounts: Map<string, number>;\n  /** Total faction scores. */\n  factionScores: { [faction in Faction]: number };\n  factionHistory: { [key: string]: number };\n  factionHistoryUnsynced: { [key: string]: number };\n\n  speedrunLeaderboards: {\n    [puzName: string]: RankedLeaderboard<SpeedrunTimeRecord>;\n  };\n  solveTimeLeaderboards: {\n    [puzName: string]: RankedLeaderboard<SolveTimeRecord>;\n  };\n\n  constructor(server: GameServer) {\n    this.server = server;\n\n    this.unlockCounts = new Map(\n      Array.from(this.server.puzzlesDB.battleGroups.keys(), (puzName) => [\n        puzName,\n        0,\n      ])\n    );\n    this.solveCounts = new Map(\n      Array.from(this.server.puzzlesDB.battleGroups.keys(), (puzName) => [\n        puzName,\n        0,\n      ])\n    );\n    this.factionScores = makeInitFactionScores();\n    this.factionHistory = {};\n    this.factionHistoryUnsynced = {};\n\n    const { puzzles } = this.server.puzzlesDB;\n    // Include the dummy battles, in case we want to keep track\n    // of overall battle times too.\n    this.speedrunLeaderboards = {};\n    this.solveTimeLeaderboards = {};\n  }\n\n  getSpeedrunLeaderboard(\n    puzName: string\n  ): RankedLeaderboard<SpeedrunTimeRecord> {\n    this.speedrunLeaderboards[puzName] ??= new RankedLeaderboard(\n      (record) => record.teamId,\n      (record1, record2) => record1.speedrunTime - record2.speedrunTime\n    );\n    return this.speedrunLeaderboards[puzName];\n  }\n\n  getSolveTimeLeaderboard(puzName: string): RankedLeaderboard<SolveTimeRecord> {\n    this.solveTimeLeaderboards[puzName] ??= new RankedLeaderboard(\n      (record) => record.teamId,\n      (record1, record2) => record1.solveTime - record2.solveTime\n    );\n    return this.solveTimeLeaderboards[puzName];\n  }\n\n  getPuzzleStats(battleGroupName: string): GlobalStatePuzzleStats {\n    const unlockCount = this.unlockCounts.get(battleGroupName);\n    const solveCount = this.solveCounts.get(battleGroupName);\n    if (unlockCount === undefined || solveCount === undefined)\n      throw new Error(\"expect stats to be defined\");\n    return { unlockCount, solveCount };\n  }\n\n  getSpeedrunRank(teamId: string, puzName: string): number | null {\n    const speedrunTime = this.server\n      .getTeamController(teamId)\n      .speedrunTimes.get(puzName);\n    if (speedrunTime === undefined) return null;\n    const { sortedList } = this.getSpeedrunLeaderboard(puzName);\n    const rank = sortedList.findIndex((record) => record.teamId === teamId);\n    if (rank === undefined) {\n      console.error(\"expect team to exist in leaderboard\");\n      // This isn't a critical error; return gracefully.\n      return null;\n    }\n    return rank;\n  }\n\n  getSpeedrunLeaderboardSummary(puzName: string): ClientSpeedrunTimeRecord[] {\n    const { sortedList } = this.getSpeedrunLeaderboard(puzName);\n    return sortedList\n      .slice(0, SPEEDRUN_LEADERBOARD_SUMMARY_LENGTH)\n      .map(({ teamId, speedrunTime }) => ({\n        teamData: this.server.getTeamController(teamId).getTeamSummaryState(),\n        speedrunTime,\n      }));\n  }\n\n  /**\n   * Update and broadcast stats/leaderboard updates when a team's\n   * stats gets updated. This should only be called after the\n   * updates have been merged into TeamController state.\n   */\n  handleTeamUpdates(\n    teamId: string,\n    opts: {\n      factionScoreChanges?: { [faction in Faction]?: number };\n      // This flag lets us distinguish between updates (which should create new\n      // history entries) and initialization (which should not).\n      updateFactionHistory?: boolean;\n      solvesToDelete?: string[];\n      unlocksToDelete?: string[];\n      solvesToAdd?: string[];\n      unlocksToAdd?: string[];\n      solveTimes?: { [puzName: string]: number | null };\n      speedrunTimes?: { [puzName: string]: number | null };\n      /** If set, force the updates even if the team is hidden. */\n      forceIfHidden?: boolean;\n    }\n  ): void {\n    const {\n      factionScoreChanges,\n      updateFactionHistory,\n      solvesToDelete,\n      unlocksToDelete,\n      solvesToAdd,\n      unlocksToAdd,\n      solveTimes,\n      speedrunTimes,\n      forceIfHidden = false,\n    } = opts;\n\n    const isHidden = this.server.getTeamController(teamId).isHidden;\n    // By default, don't update any stats if the team is hidden.\n    if (!forceIfHidden && isHidden) return;\n\n    if (factionScoreChanges !== undefined) {\n      const timeBucket = Math.floor(Date.now() / 1000 / 60 / 60);\n      const factionHistoryToBroadcast: { [key: string]: number } = {};\n      for (const [kFaction, diffFactionScore] of Object.entries(\n        factionScoreChanges ?? {}\n      )) {\n        const faction = kFaction as Faction;\n        this.factionScores[faction] += diffFactionScore;\n        if (updateFactionHistory && diffFactionScore) {\n          const key = `${kFaction}.${timeBucket}`;\n          const value = (this.factionHistory[key] ?? 0) + diffFactionScore;\n          this.factionHistory[key] = value;\n          this.factionHistoryUnsynced[key] = value;\n          factionHistoryToBroadcast[key] = value;\n        }\n      }\n      const factionScoresToUpdate = Object.fromEntries(\n        Object.entries(this.factionScores).filter(\n          ([kFaction, score]) =>\n            factionScoreChanges[kFaction as Faction] ?? 0 !== 0\n        )\n      );\n      for (const teamController of this.server.teamControllers.values()) {\n        teamController.broadcastTeamGlobalUpdate({\n          type: GlobalUpdateType.TEAM_UPDATE_STATE,\n          factionScores: factionScoresToUpdate,\n        });\n      }\n      if (Object.keys(factionHistoryToBroadcast).length) {\n        this.server.broadcastGlobalUpdate(\n          { type: GlobalUpdatesScopeType.FACTION_HISTORY },\n          {\n            type: GlobalUpdateType.FACTION_HISTORY_UPDATE_STATE,\n            factionHistory: factionHistoryToBroadcast,\n          }\n        );\n      }\n    }\n\n    // Only update the stats of the puzzles we're tracking.\n    // For example, some puzNames may be sub-battles, and we don't\n    // track stats for those.\n    for (const puzName of solvesToDelete ?? []) {\n      const solveCount = this.solveCounts.get(puzName);\n      if (solveCount === undefined) continue;\n      this.solveCounts.set(puzName, solveCount - 1);\n    }\n    for (const puzName of solvesToAdd ?? []) {\n      const solveCount = this.solveCounts.get(puzName);\n      if (solveCount === undefined) continue;\n      this.solveCounts.set(puzName, solveCount + 1);\n    }\n    for (const puzName of unlocksToDelete ?? []) {\n      const unlockCount = this.unlockCounts.get(puzName);\n      if (unlockCount === undefined) continue;\n      this.unlockCounts.set(puzName, unlockCount - 1);\n    }\n    for (const puzName of unlocksToAdd ?? []) {\n      const unlockCount = this.unlockCounts.get(puzName);\n      if (unlockCount === undefined) continue;\n      this.unlockCounts.set(puzName, unlockCount + 1);\n    }\n\n    const updatedPuzzles = new Set([\n      ...(unlocksToAdd ?? []),\n      ...(unlocksToDelete ?? []),\n      ...(solvesToAdd ?? []),\n      ...(solvesToDelete ?? []),\n    ]);\n    const stats = Object.fromEntries(\n      [...updatedPuzzles].flatMap((puzName) =>\n        this.server.puzzlesDB.battleGroups.has(puzName)\n          ? [[puzName, this.getPuzzleStats(puzName)]]\n          : []\n      )\n    );\n    for (const teamController of this.server.teamControllers.values()) {\n      if (\n        !teamController.masteryTreeController\n          .getEnabledMasteries()\n          .has(SOLVE_COUNTS_MASTERY_ID)\n      )\n        continue;\n      teamController.broadcastTeamGlobalUpdate({\n        type: GlobalUpdateType.TEAM_UPDATE_PUZZLE_STATS,\n        stats: Object.fromEntries(\n          Object.entries(stats).filter(([battleGroupName, puzStats]) =>\n            teamController.unlockTimes.has(battleGroupName)\n          )\n        ),\n      });\n    }\n\n    for (const [puzName, solveTime] of Object.entries(solveTimes ?? {})) {\n      const leaderboard = this.getSolveTimeLeaderboard(puzName);\n      if (solveTime === null) {\n        leaderboard.remove(teamId);\n        continue;\n      }\n      this.addSolveTimeRecord(teamId, puzName, solveTime);\n    }\n\n    for (const [puzName, speedrunTime] of Object.entries(speedrunTimes ?? {})) {\n      if (speedrunTime === null) this.removeSpeedrunRecord(teamId, puzName);\n      else this.addSpeedrunRecord(teamId, puzName, speedrunTime);\n    }\n  }\n\n  startSync(): { [key: string]: number } {\n    return { ...this.factionHistoryUnsynced };\n  }\n\n  endSync(snapshot: { [key: string]: number }): void {\n    for (const [key, value] of Object.entries(snapshot))\n      if (this.factionHistoryUnsynced[key] == value)\n        delete this.factionHistoryUnsynced[key];\n  }\n\n  private addSolveTimeRecord(\n    teamId: string,\n    puzName: string,\n    solveTime: number\n  ) {\n    const leaderboard = this.getSolveTimeLeaderboard(puzName);\n    leaderboard.insert({ teamId, solveTime }, false);\n  }\n\n  private addSpeedrunRecord(\n    teamId: string,\n    puzName: string,\n    speedrunTime: number\n  ) {\n    const leaderboard = this.getSpeedrunLeaderboard(puzName);\n    const { oldIndex, newIndex } = leaderboard.insert(\n      { teamId, speedrunTime },\n      true\n    );\n\n    this.broadcastSpeedrunLeaderboardUpdates(\n      puzName,\n      newIndex,\n      oldIndex === null ? leaderboard.sortedList.length : oldIndex + 1,\n      {\n        speedrunRecordsToAdd: [\n          {\n            teamData: this.server\n              .getTeamController(teamId)\n              .getTeamSummaryState(),\n            speedrunTime,\n          },\n        ],\n      }\n    );\n  }\n\n  private removeSpeedrunRecord(teamId: string, puzName: string): void {\n    const leaderboard = this.getSpeedrunLeaderboard(puzName);\n    const removeRes = leaderboard.remove(teamId);\n    if (removeRes === null) return;\n\n    const { oldIndex } = removeRes;\n    const newLast =\n      leaderboard.sortedList[SPEEDRUN_LEADERBOARD_SUMMARY_LENGTH - 1];\n    this.broadcastSpeedrunLeaderboardUpdates(\n      puzName,\n      oldIndex,\n      leaderboard.sortedList.length,\n      {\n        speedrunRecordsToAdd:\n          newLast === undefined\n            ? undefined\n            : [\n                {\n                  teamData: this.server\n                    .getTeamController(newLast.teamId)\n                    .getTeamSummaryState(),\n                  speedrunTime: newLast.speedrunTime,\n                },\n              ],\n        speedrunRecordsToRemove: [teamId],\n      }\n    );\n  }\n\n  /**\n   * Hide the team.\n   * Warning: Not idempotent. Only call if the team was previously\n   * not hidden.\n   */\n  hideTeam(teamId: string): void {\n    const teamController = this.server.getTeamController(teamId);\n    this.handleTeamUpdates(teamId, {\n      factionScoreChanges: Object.fromEntries(\n        Object.entries(teamController.factionScoreContributions).map(\n          ([faction, contrib]) => [faction, -contrib]\n        )\n      ),\n      updateFactionHistory: true,\n      solvesToDelete: [...teamController.solveTimes.keys()],\n      unlocksToDelete: [...teamController.unlockTimes.keys()],\n      solveTimes: Object.fromEntries(\n        Array.from(teamController.solveTimes.keys(), (puzName) => [\n          puzName,\n          null,\n        ])\n      ),\n      speedrunTimes: Object.fromEntries(\n        Array.from(teamController.speedrunTimes.keys(), (puzName) => [\n          puzName,\n          null,\n        ])\n      ),\n      forceIfHidden: true,\n    });\n  }\n\n  /**\n   * Unhide the team.\n   * Warning: Not idempotent. Only call if the team was previously hidden.\n   */\n  unhideTeam(teamId: string): void {\n    const teamController = this.server.getTeamController(teamId);\n    this.handleTeamUpdates(teamId, {\n      factionScoreChanges: teamController.factionScoreContributions,\n      updateFactionHistory: true,\n      solvesToAdd: [...teamController.solveTimes.keys()],\n      unlocksToAdd: [...teamController.unlockTimes.keys()],\n      solveTimes: Object.fromEntries(teamController.solveTimes.entries()),\n      speedrunTimes: Object.fromEntries(teamController.speedrunTimes.entries()),\n      forceIfHidden: true,\n    });\n  }\n\n  /**\n   * Broadcast speedrun leaderboard updates, where the changes impact\n   * all ranks in the range [rankStart, rankEnd). The actual updates\n   * may be broadcast to more teams than the given range, if the affected\n   * range includes the summary presented to all teams.\n   */\n  private broadcastSpeedrunLeaderboardUpdates(\n    puzName: string,\n    rankStart: number,\n    rankEnd: number,\n    upds: {\n      speedrunRecordsToAdd?: ClientSpeedrunTimeRecord[];\n      speedrunRecordsToRemove?: string[];\n    }\n  ): void {\n    const leaderboard = this.getSpeedrunLeaderboard(puzName);\n    const needUpdateTopRankings =\n      rankStart < SPEEDRUN_LEADERBOARD_SUMMARY_LENGTH;\n    const updateStart = needUpdateTopRankings ? 0 : rankStart;\n    const updateEnd = needUpdateTopRankings\n      ? leaderboard.sortedList.length\n      : Math.min(rankEnd, leaderboard.sortedList.length);\n    for (\n      let updateIndex = updateStart;\n      updateIndex < updateEnd;\n      updateIndex++\n    ) {\n      const { teamId: updateTeamId } = leaderboard.sortedList[updateIndex];\n      const teamController = this.server.getTeamController(updateTeamId);\n\n      teamController\n        .getBattleController(puzName)\n        .broadcastTeamSpeedrunLeaderboardSummaryGlobalUpdate({\n          type: GlobalUpdateType.TEAM_SPEEDRUN_LEADERBOARD_SUMMARY_UPDATE_STATE,\n          speedrunRank: updateIndex,\n          // No need to send the updates besides the rank if it\n          // doesn't affect top rankings.\n          ...(needUpdateTopRankings ? upds : undefined),\n        });\n    }\n  }\n\n  handleTeamSummaryUpdates(upds: {\n    [teamId: string]: TeamSummaryUpdate;\n  }): void {\n    for (const [puzName, leaderboard] of Object.entries(\n      this.speedrunLeaderboards\n    )) {\n      const teamNameDisplayUpds: {\n        [teamId: string]: TeamNameDisplayDataUpdate;\n      } = {};\n      for (const { teamId } of leaderboard.sortedList.slice(\n        0,\n        SPEEDRUN_LEADERBOARD_SUMMARY_LENGTH\n      )) {\n        const teamUpd = upds[teamId];\n        if (teamUpd === undefined) continue;\n        const teamNameDisplayUpd =\n          teamSummaryUpdateToTeamNameDisplayUpdate(teamUpd);\n        if (Object.keys(teamNameDisplayUpd).length === 0) continue;\n        teamNameDisplayUpds[teamId] = teamNameDisplayUpd;\n      }\n      if (Object.keys(teamNameDisplayUpds).length === 0) continue;\n      for (const teamController of this.server.teamControllers.values()) {\n        teamController\n          .getBattleController(puzName)\n          .broadcastTeamSpeedrunLeaderboardSummaryGlobalUpdate({\n            type: GlobalUpdateType.TEAM_SPEEDRUN_LEADERBOARD_SUMMARY_UPDATE_STATE,\n            teamNameDisplayUpds,\n          });\n      }\n    }\n  }\n}\n","import { z } from \"zod\";\n\nexport enum CursorEventType {\n  MOVE = \"move\",\n  REMOVE = \"remove\",\n  CLICK = \"click\",\n}\n\nconst CursorEventMoveZod = z.object({\n  type: z.literal(CursorEventType.MOVE),\n  rX: z.number(),\n  rY: z.number(),\n});\nexport type CursorEventMove = z.infer<typeof CursorEventMoveZod>;\n\nconst CursorEventRemoveZod = z.object({\n  type: z.literal(CursorEventType.REMOVE),\n});\ntype CursorEventRemove = z.infer<typeof CursorEventRemoveZod>;\n\nconst CursorEventClickZod = z.object({\n  type: z.literal(CursorEventType.CLICK),\n  rX: z.number(),\n  rY: z.number(),\n});\ntype CursorEventClick = z.infer<typeof CursorEventClickZod>;\n\nexport const CursorEventZod = z.union([\n  CursorEventMoveZod,\n  CursorEventRemoveZod,\n  CursorEventClickZod,\n]);\nexport type CursorEvent = z.infer<typeof CursorEventZod>;\n\nexport type CursorResp = {\n  connId: string;\n  event: CursorEvent;\n};\n","import {\n  CursorEventType,\n  CursorEventMove,\n  CursorEvent,\n  CursorResp,\n} from \"engine/types/presence\";\nimport { WSRespType } from \"game-server/ws\";\nimport { ClientConnection, GameServer } from \"game-server/GameServer\";\n\nexport class CursorsController {\n  server: GameServer;\n  /**\n   * The cursor groups, keyed first by teamId, then by the\n   * cursor group name (usually the roomId). A cursor group\n   * is represented as a set of client connections, keyed by connId.\n   */\n  cursorGroups: Map<string, Map<string, CursorGroup>>;\n\n  constructor(server: GameServer) {\n    this.server = server;\n    this.cursorGroups = new Map();\n  }\n\n  private getTeamCursorGroups(teamId: string) {\n    const teamCursorGroups = this.cursorGroups.get(teamId);\n    if (teamCursorGroups !== undefined) return teamCursorGroups;\n    const newTeamCursorGroups = new Map();\n    this.cursorGroups.set(teamId, newTeamCursorGroups);\n    return newTeamCursorGroups;\n  }\n\n  private getCursorGroup(teamId: string, cursorGroupName: string) {\n    const teamCursorGroups = this.getTeamCursorGroups(teamId);\n    const cursorGroup = teamCursorGroups.get(cursorGroupName);\n    if (cursorGroup !== undefined) return cursorGroup;\n    const newCursorGroup = new CursorGroup();\n    teamCursorGroups.set(cursorGroupName, newCursorGroup);\n    return newCursorGroup;\n  }\n\n  private getConnCursorGroup(conn: ClientConnection) {\n    const { teamId, cursorGroupName } = conn;\n    if (teamId === undefined) return null;\n    if (cursorGroupName === undefined) return null;\n    return this.getCursorGroup(teamId, cursorGroupName);\n  }\n\n  removeConnFromGroup(conn: ClientConnection) {\n    this.broadcastEvent(conn, {\n      type: CursorEventType.REMOVE,\n    });\n\n    const { teamId, cursorGroupName } = conn;\n    if (teamId === undefined) return;\n    if (cursorGroupName === undefined) return;\n    const teamCursorGroups = this.cursorGroups.get(teamId);\n    if (teamCursorGroups === undefined) {\n      console.error(\"expect team cursor group to exist\");\n      return;\n    }\n    const cursorGroup = teamCursorGroups.get(cursorGroupName);\n    if (cursorGroup === undefined) {\n      console.error(\"expect cursor group to exist\");\n      return;\n    }\n    cursorGroup.conns.delete(conn.connId);\n    if (cursorGroup.conns.size === 0) teamCursorGroups.delete(cursorGroupName);\n    if (teamCursorGroups.size === 0) this.cursorGroups.delete(teamId);\n    delete conn.cursorGroupName;\n  }\n\n  addConnToGroup(conn: ClientConnection, cursorGroupName: string) {\n    this.removeConnFromGroup(conn);\n    const { teamId } = conn;\n    if (teamId === undefined) return;\n    this.getCursorGroup(teamId, cursorGroupName).conns.set(conn.connId, conn);\n    conn.cursorGroupName = cursorGroupName;\n  }\n\n  async broadcastEvent(srcConn: ClientConnection, event: CursorEvent) {\n    if (srcConn.cursorGroupName === undefined) return;\n    const cursorGroup = this.getConnCursorGroup(srcConn);\n    if (cursorGroup === null) return;\n    cursorGroup.addEvent(srcConn, event);\n    if (cursorGroup.locked) return;\n    cursorGroup.locked = true;\n    await new Promise((resolve) => setTimeout(resolve, 0));\n    const queuedEvents: CursorResp[] = cursorGroup.pullEvents();\n    for (const dstConn of cursorGroup.conns.values()) {\n      const events = queuedEvents.filter(\n        ({ connId }) => dstConn.connId !== connId\n      );\n      if (events.length)\n        this.server.sendResp(dstConn, {\n          type: WSRespType.CURSOR_EVENT,\n          events,\n        });\n    }\n    cursorGroup.locked = false;\n  }\n}\n\nclass CursorGroup {\n  conns: Map<string, ClientConnection>;\n  queuedMoves: Map<string, CursorEventMove>;\n  queuedEvents: [string, CursorEvent][];\n  locked: boolean;\n\n  constructor() {\n    this.conns = new Map();\n    this.queuedMoves = new Map();\n    this.queuedEvents = [];\n    this.locked = false;\n  }\n\n  addEvent({ connId }: ClientConnection, event: CursorEvent) {\n    if (event.type == CursorEventType.MOVE) this.queuedMoves.set(connId, event);\n    else this.queuedEvents.push([connId, event]);\n  }\n\n  pullEvents(): CursorResp[] {\n    const events = [...this.queuedMoves.entries(), ...this.queuedEvents];\n    this.queuedMoves.clear();\n    this.queuedEvents.length = 0;\n    return events.map(([connId, event]) => ({ connId, event }));\n  }\n}\n","import { CursorEvent, CursorEventType } from \"engine/types/presence\";\n\nexport const safeParseCursorEvent = (\n  event: ReturnType<typeof JSON.parse>\n): CursorEvent | null => {\n  if (typeof event !== \"object\" || typeof event.type !== \"string\") return null;\n  switch (event.type) {\n    case CursorEventType.REMOVE: {\n      return event;\n    }\n    case CursorEventType.MOVE:\n    case CursorEventType.CLICK: {\n      const { rX, rY } = event;\n      if (typeof rX !== \"number\" || typeof rY !== \"number\") return null;\n      return event;\n    }\n  }\n  return null;\n};\n","import {\n  HuntJwtPayload,\n  AuthenticationInterface,\n} from \"game-server/authentication-interface/AuthenticationInterface\";\nimport {\n  WSReqType,\n  WSRespType,\n  WSReq,\n  WSResp,\n  WSError,\n  WSErrorCode,\n} from \"game-server/ws\";\nimport {\n  HuntNotificationType,\n  HuntNotification,\n} from \"game-server/notifications\";\nimport {\n  GlobalUpdatesScopeType,\n  GlobalUpdatesScope,\n  GlobalUpdateType,\n  GlobalUpdate,\n  ClientMasteryGlobalState,\n} from \"game-server/global-updates\";\nimport { NUM_DECK_SLOTS } from \"engine/types/decks\";\nimport { Player } from \"engine/types/game-state\";\nimport { StepType, Step, SystemStep } from \"engine/types/steps\";\nimport { UpdateType, Update, Role } from \"engine/types/updates\";\nimport { Keyframe } from \"engine/types/keyframes\";\nimport { CardsDB } from \"engine/cards/CardsDB\";\nimport {\n  BattleGroupData,\n  PuzzlesDB,\n  PUZ_NAME_MYOSB,\n} from \"engine/puzzles/puzzle-data\";\nimport { MasteriesDB } from \"engine/puzzles/mastery-data\";\nimport { BackendInterfaceController } from \"game-server/backend-interface/BackendInterfaceController\";\nimport {\n  BackendInterface,\n  BackendNotificationDataType,\n  BackendErratum,\n  SyncDataBackendReq,\n  GetInitTeamDataBackendResp,\n} from \"game-server/backend-interface/BackendInterface\";\nimport {\n  Room,\n  GameRoom,\n  UnjoinedRoomMember,\n  RoomMember,\n} from \"game-server/Room\";\nimport {\n  TeamController,\n  TeamBattleController,\n  DeckController,\n  TeamMasteryTreeController,\n  GameRoomsController,\n  PvPLobbyController,\n  StatsController,\n  CursorsController,\n} from \"game-server/server-controllers\";\nimport {\n  DecksAndMasteryTreesSyncController,\n  CheckpointsSyncController,\n  MiscTeamStateSyncController,\n} from \"game-server/sync-controllers\";\nimport { SyncObjectType } from \"game-server/backend-interface/backend-sync\";\nimport {\n  IntervalMetrics,\n  ServerDirtyStateTracker,\n  BigBoardStateTracker,\n  TeamListStateTracker,\n  TeamMetricsTracker,\n  TeamSummaryUpdate,\n  HEALTH_MONITORING_INTERVAL_MS,\n  CURSOR_EVENTS_MONITORING_INTERVAL_MS,\n} from \"game-server/monitoring\";\nimport { UpdateBroadcastSpecType } from \"game-server/UpdatesMulticaster\";\nimport { safeParseCursorEvent } from \"game-server/manual-validation\";\n\nexport type GameServerConfig = {\n  /**\n   * Maximum number of completed rooms to batch into one request when\n   * syncing to backend.\n   */\n  completedRoomsSyncLimit: number;\n  /**\n   * Maximum number of active rooms to batch into one request when syncing\n   * to backend.\n   */\n  activeRoomsSyncLimit: number;\n  /**\n   * Maximum number of teams to batch into one request when syncing\n   * decks and mastery trees to backend.\n   */\n  decksAndMasteryTreesTeamsSyncLimit: number;\n  /**\n   * Maximum number of teams to batch into one request when syncing\n   * checkpoints to backend.\n   */\n  checkpointsSyncLimit: number;\n  /**\n   * Maximum number of teams to batch into one request when syncing\n   * misc team state to backend.\n   */\n  miscTeamStateTeamsSyncLimit: number;\n  /** Maximum number of parallel sync backend requests. */\n  syncThrottleParallelism: number;\n  /**\n   * Amount of time to throttle the slow sync, depending on the\n   * slow sync type.\n   */\n  slowSyncThrottle: { [syncObjectType in SyncObjectType]: number };\n};\n\ntype GameServerOpts = {\n  backend: BackendInterface;\n  dumpWsMessages: boolean;\n  dumpBackendRequests: boolean;\n  periodicSyncInterval?: number;\n  authInterface: AuthenticationInterface;\n  parseWSReq: (req: object) => req is WSReq;\n  cursorsMode?: boolean;\n  /**\n   * Dev backdoor called after each step if provided; used to\n   * dump highest mem game states.\n   */\n  afterStepBackdoor?: (room: GameRoom) => void;\n  logMetrics?: (msg: string) => Promise<void>;\n  logCursorsMetrics?: (msg: string) => Promise<void>;\n  metricsDumpInterval?: number;\n  getCpuUsage?: () => {\n    user: number;\n    system: number;\n  };\n};\n\ntype ClientInterface = {\n  send: (msg: string) => void;\n  close: () => void;\n};\n\nexport type ClientConnection = {\n  connId: string;\n  client: ClientInterface;\n  // teamId only gets set once the connection is authenticated,\n  // so it can be used to check if a connection is authenticated.\n  teamId?: string;\n  spectateTeamId?: string;\n  /**\n   * Whether the connection is an admin connection. An admin can be\n   * connected as a non-admin team through impersonation.\n   */\n  isAdmin: boolean;\n  // In the current design, each connection can only control\n  // one room client at a time.\n  roomMember?: RoomMember;\n  /**\n   * The cursor group that the client is in, denoted by puzName.\n   * A client can only be part of one cursor group at a time.\n   */\n  cursorGroupName?: string;\n  /** Global updates scopes that the connection is subscribed to. */\n  subscriptions: Map<GlobalUpdatesScopeType, GlobalUpdatesScope>;\n};\n\nexport class GameServer {\n  /** Unique identifier from the backend for this instance. */\n  gameServerId: string;\n  cardsDB: CardsDB;\n  puzzlesDB: PuzzlesDB;\n  masteriesDB: MasteriesDB;\n  keyframes: Keyframe[];\n  opts: GameServerOpts;\n  /**\n   * Functions to be called once the GameServer is ready to\n   * accept connections.\n   */\n  onReadyCallbacks: (() => void)[];\n\n  // Static hunt config synced from Django on startup.\n\n  maxGuessesPerPuzzle: number;\n  huntStartTime: number;\n  huntEndTime: number;\n\n  backend: BackendInterfaceController;\n  numActiveConns: number;\n  /**\n   * Map of team ID to the client connections authenticated for it,\n   * indexed by connId.\n   */\n  teamConns: Map<string, Map<string, ClientConnection>>;\n  /** Map of team ID to team controller. */\n  teamControllers: Map<string, TeamController>;\n  gameRoomsController: GameRoomsController;\n  pvpLobbyController: PvPLobbyController;\n  statsController: StatsController;\n  cursorsController: CursorsController;\n  dirtyStateTracker: ServerDirtyStateTracker;\n  bigBoardStateTracker: BigBoardStateTracker;\n  teamListStateTracker: TeamListStateTracker;\n  teamMetricsTracker: TeamMetricsTracker;\n\n  fastSyncMetrics: IntervalMetrics;\n  slowSyncMetrics: IntervalMetrics;\n  checkAnswerMetrics: IntervalMetrics;\n  cursorEventsMetrics: IntervalMetrics;\n  numAuthsMetrics: IntervalMetrics;\n  numRequestsMetrics: IntervalMetrics;\n\n  metricsDumpTracking: {\n    lastDumpTime: number;\n    lastUserTime: number;\n    lastSystemTime: number;\n    userTimeUsage: number;\n    systemTimeUsage: number;\n  };\n\n  /**\n   * Map of connId to connections for connections subscribed to\n   * server updates.\n   */\n  subscriptions: Map<string, ClientConnection>;\n  /**\n   * Map of connId to connections for connections subscribed to\n   * team list updates.\n   */\n  teamListSubscriptions: Map<string, ClientConnection>;\n  /**\n   * Map of connId to connections for connections subscribed to\n   * faction history updates.\n   */\n  factionHistorySubscriptions: Map<string, ClientConnection>;\n  /**\n   * Map of connId to connections for connections subscribed to\n   * server health updates.\n   */\n  serverHealthSubscriptions: Map<string, ClientConnection>;\n  /**\n   * Map of connId to connections for connections subscribed to\n   * big board updates.\n   */\n  bigBoardSubscriptions: Map<string, ClientConnection>;\n\n  /** Whether a init backend request is pending. */\n  isInitPending: boolean;\n  /** Whether the server is ready to accept requests. */\n  isReady: boolean;\n  /** Whether the server has been torn down. */\n  isStopped: boolean;\n\n  /** teamIds of teams that need init. */\n  queuedTeamInits: Set<string>;\n  isTeamInitInFlight: boolean;\n\n  nextConnId: number;\n  nextRoomMemberId: number;\n  nextGameRoomId: number;\n  nextAnswerSubmissionId: number;\n\n  /** Prevent opening too many connections at a time. */\n  syncThrottle: {\n    /** Number of syncs currently in flight. */\n    numSyncsInFlight: number;\n    /**\n     * Callbacks to trigger when there's capacity,\n     * from earliest to latest.\n     */\n    queue: (() => void)[];\n  };\n\n  /**\n   * Tracking state for the periodic backend sync.\n   */\n  slowSyncTracking: {\n    isDownloadInFlight: boolean;\n    decksAndMasteryTreesSyncController: DecksAndMasteryTreesSyncController;\n    checkpointsSyncController: CheckpointsSyncController;\n    miscTeamStateSyncController: MiscTeamStateSyncController;\n    /** The notif index to start the next sync from. */\n    notifsNextIndex: number;\n  };\n\n  numActivePeriodicTasksHandlers: number;\n  periodicSyncInterval: number;\n  /** Timer handle for periodic tasks. */\n  periodicTasksTimer?: ReturnType<typeof setInterval>;\n\n  numPendingSubmissionTasks: number;\n\n  errata: { [erratumId: string]: BackendErratum };\n  unclaimedHints: number;\n\n  jwtCache: Map<string, HuntJwtPayload>;\n\n  config: GameServerConfig;\n\n  constructor(\n    puzzlesDB: PuzzlesDB,\n    cardsDB: CardsDB,\n    masteriesDB: MasteriesDB,\n    keyframes: Keyframe[],\n    opts: GameServerOpts\n  ) {\n    // Unused data to initialize the fields with.\n    // These should only be used after the game server is initialized\n    // with the first getInitData backend call.\n    // TODO: Probably wrap this in something that does the initialization\n    // and passes these in during construction, to ensure that they\n    // are only ever used after initialization.\n    this.gameServerId = \"__UNINITIALIZED__\";\n    this.maxGuessesPerPuzzle = 0;\n    this.huntStartTime = 0;\n    this.huntEndTime = 0;\n\n    this.puzzlesDB = puzzlesDB;\n    this.cardsDB = cardsDB;\n    this.masteriesDB = masteriesDB;\n    this.keyframes = keyframes;\n    this.opts = opts;\n    this.onReadyCallbacks = [];\n\n    const backendOpts = {\n      dumpBackendRequests: this.opts.dumpBackendRequests,\n    };\n    this.backend = new BackendInterfaceController({\n      backend: this.opts.backend,\n      dumpBackendRequests: this.opts.dumpBackendRequests,\n    });\n    this.numActiveConns = 0;\n    this.teamConns = new Map();\n    this.teamControllers = new Map();\n    this.gameRoomsController = new GameRoomsController(this);\n    this.pvpLobbyController = new PvPLobbyController(this);\n    this.statsController = new StatsController(this);\n    this.cursorsController = new CursorsController(this);\n    this.dirtyStateTracker = new ServerDirtyStateTracker();\n    this.bigBoardStateTracker = new BigBoardStateTracker();\n    this.teamListStateTracker = new TeamListStateTracker();\n    this.teamMetricsTracker = new TeamMetricsTracker(this);\n    this.fastSyncMetrics = new IntervalMetrics(HEALTH_MONITORING_INTERVAL_MS);\n    this.slowSyncMetrics = new IntervalMetrics(HEALTH_MONITORING_INTERVAL_MS);\n    this.checkAnswerMetrics = new IntervalMetrics(\n      HEALTH_MONITORING_INTERVAL_MS\n    );\n    this.cursorEventsMetrics = new IntervalMetrics(\n      CURSOR_EVENTS_MONITORING_INTERVAL_MS\n    );\n    this.numAuthsMetrics = new IntervalMetrics(HEALTH_MONITORING_INTERVAL_MS);\n    this.numRequestsMetrics = new IntervalMetrics(\n      HEALTH_MONITORING_INTERVAL_MS\n    );\n    this.metricsDumpTracking = {\n      lastDumpTime: 0,\n      lastUserTime: 0,\n      lastSystemTime: 0,\n      userTimeUsage: 0,\n      systemTimeUsage: 0,\n    };\n    this.subscriptions = new Map();\n    this.teamListSubscriptions = new Map();\n    this.factionHistorySubscriptions = new Map();\n    this.serverHealthSubscriptions = new Map();\n    this.bigBoardSubscriptions = new Map();\n    this.isInitPending = false;\n    this.isReady = false;\n    this.isStopped = false;\n    this.queuedTeamInits = new Set();\n    this.isTeamInitInFlight = false;\n    this.nextConnId = 0;\n    this.nextRoomMemberId = 0;\n    this.nextGameRoomId = 0;\n    this.nextAnswerSubmissionId = 0;\n    this.syncThrottle = {\n      numSyncsInFlight: 0,\n      queue: [],\n    };\n    this.slowSyncTracking = {\n      isDownloadInFlight: false,\n      decksAndMasteryTreesSyncController:\n        new DecksAndMasteryTreesSyncController(this),\n      checkpointsSyncController: new CheckpointsSyncController(this),\n      miscTeamStateSyncController: new MiscTeamStateSyncController(this),\n      notifsNextIndex: 0,\n    };\n\n    this.numActivePeriodicTasksHandlers = 0;\n    // 3 seconds by default\n    this.periodicSyncInterval = this.opts.periodicSyncInterval ?? 3000;\n    this.periodicTasksTimer = setInterval(() => {\n      this.runPeriodicTasks();\n    }, this.periodicSyncInterval);\n\n    this.numPendingSubmissionTasks = 0;\n\n    this.errata = {};\n    this.unclaimedHints = 0;\n\n    this.jwtCache = new Map();\n\n    this.config = {\n      completedRoomsSyncLimit: 10,\n      activeRoomsSyncLimit: 10,\n      decksAndMasteryTreesTeamsSyncLimit: 10,\n      checkpointsSyncLimit: 10,\n      miscTeamStateTeamsSyncLimit: 10,\n      syncThrottleParallelism: 2,\n      slowSyncThrottle: {\n        [SyncObjectType.FAST]: 0,\n        [SyncObjectType.MISC]: 0,\n        [SyncObjectType.MASTERY_TREE]: 0,\n        [SyncObjectType.DECK]: 0,\n        [SyncObjectType.ROOM]: 0,\n        [SyncObjectType.CHECKPOINTS]: 0,\n        [SyncObjectType.ANSWER]: 0,\n      },\n    };\n  }\n\n  /**\n   * TODO: This is just a test utility to remove pending tasks and\n   * allow tests to end gracefully. If this is to be used in a\n   * production server, it needs to ensure that all pending promises\n   * are responded to (e.g. onReadyCallbacks).\n   *\n   * This is now also used for the shared worker mock server. There\n   * are memory leaks with pending promises, but it should not be\n   * okay for now since users are not expected to reset repeatedly.\n   */\n  teardown(): void {\n    if (this.periodicTasksTimer !== undefined)\n      clearInterval(this.periodicTasksTimer);\n    for (const teamConnsForTeam of this.teamConns.values()) {\n      for (const conn of teamConnsForTeam.values()) {\n        conn.client.close();\n      }\n    }\n    this.isStopped = true;\n  }\n\n  genConnId() {\n    const connId = this.nextConnId;\n    this.nextConnId++;\n    return `${connId}`;\n  }\n\n  genRoomMemberId() {\n    const memberId = this.nextRoomMemberId;\n    this.nextRoomMemberId++;\n    return `${memberId}`;\n  }\n\n  genGameRoomId() {\n    const roomId = `${this.gameServerId}_room_${this.nextGameRoomId}`;\n    this.nextGameRoomId++;\n    return roomId;\n  }\n\n  getTeamController(teamId: string): TeamController {\n    const teamController = this.teamControllers.get(teamId);\n    if (teamController === undefined)\n      throw new Error(`team ${teamId} not initialized yet`);\n    return teamController;\n  }\n\n  getBattleController(teamId: string, puzName: string): TeamBattleController {\n    return this.getTeamController(teamId).getBattleController(puzName);\n  }\n\n  getDeckController(teamId: string, slot: number): DeckController {\n    return this.getTeamController(teamId).getDeckController(slot);\n  }\n\n  getMasteryTreeController(teamId: string): TeamMasteryTreeController {\n    return this.getTeamController(teamId).masteryTreeController;\n  }\n\n  isValidPuzzle(teamController: TeamController, puzName: string): boolean {\n    return (\n      this.puzzlesDB.puzzles.has(puzName) &&\n      teamController.isPuzzleUnlocked(puzName)\n    );\n  }\n\n  isValidDeckSlot(slot: number) {\n    return Number.isInteger(slot) && slot >= 0 && slot < NUM_DECK_SLOTS;\n  }\n\n  async waitForReadyAsync(): Promise<void> {\n    if (this.isReady) return;\n    await new Promise<void>((resolve, reject) => {\n      this.onReadyCallbacks.push(resolve);\n    });\n  }\n\n  async tryInitAsync(): Promise<void> {\n    if (this.isReady) return;\n    if (this.isInitPending) return;\n\n    this.isInitPending = true;\n    try {\n      const resp = await (async () => {\n        try {\n          return await this.backend.getInitData();\n        } catch (err) {\n          // If we fail, the periodic tasks handler will call this again.\n          console.error(err);\n        }\n      })();\n\n      if (resp !== undefined) {\n        const {\n          gameServerId,\n          teams,\n          factionHistory,\n          maxGuessesPerPuzzle,\n          huntStartTime,\n          huntEndTime,\n          notifsNextIndex,\n          errata,\n          unclaimedHints,\n        } = resp;\n\n        this.gameServerId = gameServerId;\n        this.maxGuessesPerPuzzle = maxGuessesPerPuzzle;\n        this.huntStartTime = huntStartTime;\n        this.huntEndTime = huntEndTime;\n        this.slowSyncTracking.notifsNextIndex = notifsNextIndex;\n        this.errata = errata;\n        this.unclaimedHints = unclaimedHints;\n        for (const [teamId, teamData] of Object.entries(teams)) {\n          await this.createTeamAsync(teamId, teamData);\n        }\n        Object.assign(this.statsController.factionHistory, factionHistory);\n\n        this.isReady = true;\n        for (const callback of this.onReadyCallbacks) {\n          callback();\n        }\n        this.onReadyCallbacks = [];\n        console.log(\"Game server init complete.\");\n      }\n    } finally {\n      this.isInitPending = false;\n    }\n  }\n\n  async initAsync(): Promise<void> {\n    if (this.isReady || this.isInitPending)\n      throw new Error(\"don't expect to request init more than once\");\n    if (this.opts.cursorsMode ?? false) {\n      this.isReady = true;\n      return;\n    }\n    await this.tryInitAsync();\n    await this.waitForReadyAsync();\n  }\n\n  /**\n   * Returns an interface for the added client, containing\n   * a function to handle received messages.\n   * For development, a particular connId may be specified\n   * to aid debugging.\n   */\n  addClient(client: ClientInterface, connId?: string) {\n    this.numActiveConns++;\n\n    const conn = {\n      connId: connId ?? this.genConnId(),\n      client: client,\n      // The connection only ever gets marked as admin after auth.\n      isAdmin: false,\n      subscriptions: new Map(),\n    };\n\n    return {\n      handleMsg: (msg: string) => {\n        (async () => {\n          try {\n            await this.handleMsg(conn, msg);\n          } catch (err) {\n            console.error(err);\n            this.sendErr(conn, { errCode: WSErrorCode.SERVER_ERROR });\n          }\n        })();\n      },\n      removeClient: () => {\n        this.removeClient(conn);\n      },\n    };\n  }\n\n  removeClient(conn: ClientConnection) {\n    this.numActiveConns--;\n\n    const { connId, teamId, roomMember, subscriptions } = conn;\n    for (const scopeType of subscriptions.keys()) {\n      this.unsubscribeFromUpdates(conn, scopeType);\n    }\n    this.cursorsController.removeConnFromGroup(conn);\n    if (roomMember !== undefined) {\n      this.kickRoomMember(roomMember);\n    }\n    if (teamId !== undefined) {\n      const teamConnsForTeam = this.teamConns.get(teamId);\n      if (teamConnsForTeam === undefined)\n        throw new Error(\"expect team conns to be defined for team\");\n      teamConnsForTeam.delete(connId);\n    }\n  }\n\n  async createTeamAsync(teamId: string, teamData: GetInitTeamDataBackendResp) {\n    // Create the team controller. This signals that the team\n    // has been initialized.\n    const teamController = new TeamController(teamId, teamData, this);\n    this.teamControllers.set(teamId, teamController);\n    teamController.initStats();\n    teamController.initRooms(teamData.rooms);\n\n    this.broadcastAdminGlobalUpdate({\n      type: GlobalUpdateType.SERVER_ADD_TEAM,\n      teamId: teamController.teamId,\n      teamAdminData: teamController.getClientAdminData(),\n    });\n    // We add the team even if it's hidden. We will filter the hidden teams\n    // downstream.\n    this.handleTeamListAddTeam(teamId);\n\n    const bigBoardState = teamController.getClientBigBoardState();\n    this.bigBoardStateTracker.addTeam(teamId, bigBoardState);\n    this.broadcastBigBoardGlobalUpdate({\n      type: GlobalUpdateType.BIG_BOARD_UPDATE_STATE,\n      addTeams: { [teamId]: bigBoardState },\n    });\n\n    // Ensure consistency between solves and unlocks, and also handle\n    // the initial unlocks.\n    await teamController.handleTeamUpdatesAsync({});\n  }\n\n  private async triggerTeamInits() {\n    if (this.isTeamInitInFlight) return;\n    this.isTeamInitInFlight = true;\n    for (const teamId of [...this.queuedTeamInits]) {\n      try {\n        await this.initTeamAsync(teamId);\n      } catch (err) {\n        console.error(err);\n      }\n    }\n    this.isTeamInitInFlight = false;\n  }\n\n  private async initTeamAsync(teamId: string) {\n    let resp: GetInitTeamDataBackendResp | null = null;\n    try {\n      resp = await this.backend.getInitTeamData(teamId);\n    } catch (err) {\n      console.error(err);\n    }\n    if (resp === null) return;\n\n    this.queuedTeamInits.delete(teamId);\n    await this.createTeamAsync(teamId, resp);\n\n    if (!(this.opts.cursorsMode ?? false)) {\n      const teamController = this.getTeamController(teamId);\n      for (let i = 0; i < (this.teamConns.get(teamId)?.size ?? 0); i++) {\n        teamController.numAuthsMetrics.record();\n        this.teamMetricsTracker.recordAuth(teamId);\n      }\n    }\n\n    // Tell all connections for the team that we're ready to\n    // accept input.\n    this.broadcastRespToTeam(teamId, {\n      type: WSRespType.AUTH_SUCCESS,\n    });\n  }\n\n  /**\n   * Room-agnostic preparation, called immediately after any\n   * room construction.\n   */\n  prepareRoom(room: Room): void {\n    // Flush out any updates generated during construction.\n    // At this point, there aren't any joined members, so\n    // we only have system updates.\n    this.broadcastUpdates(room);\n  }\n\n  completeEnterRoom(\n    { reqId, conn, role: reqRole }: UnjoinedRoomMember,\n    room: Room\n  ): void {\n    const { puzName } = room.engine;\n    const role = reqRole ?? Role.GOD;\n\n    this.sendResp(conn, {\n      type: WSRespType.ENTERED_ROOM,\n      reqId,\n      params: {\n        puzName,\n        role,\n      },\n    });\n\n    this.joinConnToRoom(conn, room, role);\n  }\n\n  joinConnToRoom(conn: ClientConnection, room: Room, role: Role): void {\n    const roomMember = {\n      id: this.genRoomMemberId(),\n      conn,\n      room,\n      role,\n      enabled: false,\n    };\n    conn.roomMember = roomMember;\n    room.members.set(roomMember.id, roomMember);\n\n    const teamId = conn.teamId;\n    if (teamId === undefined) throw new Error(\"expect client to be authed\");\n\n    this.gameRoomsController.handleRoomMembersUpdate(teamId, room.hostPuzName);\n\n    this.sendSystemStep(room, {\n      type: StepType.SYSTEM_JOIN,\n      teamId,\n      roomMember,\n      role,\n    });\n  }\n\n  kickRoomMember(roomMember: RoomMember): void {\n    const { id: memberId, room, conn } = roomMember;\n    room.members.delete(memberId);\n    delete conn.roomMember;\n\n    const teamId = conn.teamId;\n    if (teamId === undefined) throw new Error(\"expect client to be authed\");\n    this.gameRoomsController.handleRoomMembersUpdate(teamId, room.hostPuzName);\n  }\n\n  /** Get the battle group that a puzzle belongs to. */\n  tryGetBattleGroup(puzName: string): BattleGroupData | null {\n    return this.puzzlesDB.tryGetBattleGroup(puzName);\n  }\n\n  /** Get the battle group that a puzzle belongs to. */\n  getBattleGroup(puzName: string): BattleGroupData {\n    return this.puzzlesDB.getBattleGroup(puzName);\n  }\n\n  /**\n   * Returns a map of connId to connections subscribed to a given global\n   * updates scope.\n   */\n  getSubscriptions(scope: GlobalUpdatesScope): Map<string, ClientConnection> {\n    switch (scope.type) {\n      case GlobalUpdatesScopeType.SERVER:\n        return this.subscriptions;\n      case GlobalUpdatesScopeType.SERVER_HEALTH:\n        return this.serverHealthSubscriptions;\n      case GlobalUpdatesScopeType.BIG_BOARD:\n        return this.bigBoardSubscriptions;\n      case GlobalUpdatesScopeType.PVP:\n        return this.pvpLobbyController.subscriptions;\n      case GlobalUpdatesScopeType.TEAM_LIST:\n        return this.teamListSubscriptions;\n      case GlobalUpdatesScopeType.TEAM_MEMBERS:\n        return this.getTeamController(scope.teamId).membersSubscriptions;\n      case GlobalUpdatesScopeType.FACTION_HISTORY:\n        return this.factionHistorySubscriptions;\n      case GlobalUpdatesScopeType.TEAM:\n        return this.getTeamController(scope.teamId).subscriptions;\n      case GlobalUpdatesScopeType.TEAM_BATTLE:\n        return this.getTeamController(scope.teamId).getBattleController(\n          scope.puzName\n        ).subscriptions;\n      case GlobalUpdatesScopeType.TEAM_FISH_PUZZLE:\n        return this.getTeamController(scope.teamId).getFishPuzzleController(\n          scope.puzName\n        ).subscriptions;\n      case GlobalUpdatesScopeType.TEAM_DECKS:\n        return this.getTeamController(scope.teamId).decksSubscriptions;\n      case GlobalUpdatesScopeType.TEAM_MASTERY_TREE:\n        return this.getMasteryTreeController(scope.teamId).subscriptions;\n      case GlobalUpdatesScopeType.TEAM_PVP:\n        return this.getTeamController(scope.teamId).pvpController.subscriptions;\n      case GlobalUpdatesScopeType.TEAM_SPEEDRUN_LEADERBOARD_SUMMARY:\n        return this.getTeamController(scope.teamId).getBattleController(\n          scope.puzName\n        ).speedrunLeaderboardSummarySubscriptions;\n    }\n  }\n\n  unsubscribeFromUpdates(\n    conn: ClientConnection,\n    scopeType: GlobalUpdatesScopeType\n  ): void {\n    const scope = conn.subscriptions.get(scopeType);\n    if (scope === undefined) return;\n    this.getSubscriptions(scope).delete(conn.connId);\n  }\n\n  validateSubscribeToUpdates(\n    conn: ClientConnection,\n    scope: GlobalUpdatesScope\n  ): WSError | null {\n    switch (scope.type) {\n      case GlobalUpdatesScopeType.SERVER:\n      case GlobalUpdatesScopeType.SERVER_HEALTH:\n      case GlobalUpdatesScopeType.BIG_BOARD: {\n        if (!conn.isAdmin) return { errCode: WSErrorCode.PERMISSION_DENIED };\n        return null;\n      }\n      case GlobalUpdatesScopeType.PVP: {\n        // No reason to check for PvP mastery here, but if we do\n        // we must make sure to guard the subscription from the\n        // client side behind the mastery too.\n        return null;\n      }\n      case GlobalUpdatesScopeType.TEAM_LIST: {\n        return null;\n      }\n      case GlobalUpdatesScopeType.TEAM_MEMBERS: {\n        const { teamId } = scope;\n        // Any team can see any other team's members, as long as the\n        // teamId is valid.\n        const teamController = this.teamControllers.get(teamId);\n        if (teamController === undefined)\n          return { errCode: WSErrorCode.INVALID_TEAM };\n        return null;\n      }\n      case GlobalUpdatesScopeType.FACTION_HISTORY: {\n        return null;\n      }\n      case GlobalUpdatesScopeType.TEAM: {\n        const { teamId } = scope;\n        if (conn.teamId !== teamId && !conn.isAdmin)\n          return { errCode: WSErrorCode.PERMISSION_DENIED };\n        return null;\n      }\n      case GlobalUpdatesScopeType.TEAM_FISH_PUZZLE: {\n        const { teamId, puzName } = scope;\n        if (conn.teamId !== teamId && !conn.isAdmin)\n          return { errCode: WSErrorCode.PERMISSION_DENIED };\n        const teamController = this.getTeamController(teamId);\n        if (!teamController.isValidFishPuzzle(puzName))\n          return { errCode: WSErrorCode.INVALID_PUZZLE };\n        return null;\n      }\n      case GlobalUpdatesScopeType.TEAM_BATTLE: {\n        const { teamId, puzName } = scope;\n        if (conn.teamId !== teamId && !conn.isAdmin)\n          return { errCode: WSErrorCode.PERMISSION_DENIED };\n        const teamController = this.getTeamController(teamId);\n        if (!teamController.isValidBattle(puzName))\n          return { errCode: WSErrorCode.INVALID_PUZZLE };\n        return null;\n      }\n      case GlobalUpdatesScopeType.TEAM_DECKS:\n      case GlobalUpdatesScopeType.TEAM_MASTERY_TREE:\n      case GlobalUpdatesScopeType.TEAM_PVP: {\n        const { teamId } = scope;\n        if (conn.teamId !== teamId && !conn.isAdmin)\n          return { errCode: WSErrorCode.PERMISSION_DENIED };\n        return null;\n      }\n      case GlobalUpdatesScopeType.TEAM_SPEEDRUN_LEADERBOARD_SUMMARY: {\n        const { teamId, puzName } = scope;\n        if (conn.teamId !== teamId && !conn.isAdmin)\n          return { errCode: WSErrorCode.PERMISSION_DENIED };\n        const teamController = this.getTeamController(teamId);\n        if (!teamController.isValidBattle(puzName))\n          return { errCode: WSErrorCode.INVALID_PUZZLE };\n        return null;\n      }\n      // Don't include a default case to ensure this is exhaustive.\n    }\n  }\n\n  subscribeToUpdates(conn: ClientConnection, scope: GlobalUpdatesScope): void {\n    const err = this.validateSubscribeToUpdates(conn, scope);\n    if (err !== null) return this.sendErr(conn, err);\n\n    // Connections are only allowed to maintain at most one\n    // subscription per scope type.\n    this.unsubscribeFromUpdates(conn, scope.type);\n\n    const subscriptions = this.getSubscriptions(scope);\n    subscriptions.set(conn.connId, conn);\n    conn.subscriptions.set(scope.type, scope);\n\n    // Broadcast the initial state.\n    switch (scope.type) {\n      case GlobalUpdatesScopeType.SERVER: {\n        this.respGlobalUpdate(conn, {\n          type: GlobalUpdateType.SERVER_OVERRIDE_STATE,\n          teamAdminData: Object.fromEntries(\n            Array.from(this.teamControllers.values(), (teamController) => [\n              teamController.teamId,\n              teamController.getClientAdminData(),\n            ])\n          ),\n          puzzles: Object.fromEntries(this.puzzlesDB.puzzles.entries()),\n          battleGroups: Object.fromEntries(\n            this.puzzlesDB.battleGroups.entries()\n          ),\n          masteries: Object.fromEntries(\n            Object.values(this.masteriesDB).map(\n              ({ masteryId, displayName }) => [masteryId, { displayName }]\n            )\n          ),\n          unclaimedHints: this.unclaimedHints,\n        });\n        break;\n      }\n      case GlobalUpdatesScopeType.SERVER_HEALTH: {\n        this.respGlobalUpdate(conn, {\n          type: GlobalUpdateType.SERVER_HEALTH_OVERRIDE_STATE,\n          state: {\n            slowSyncMetrics: this.slowSyncMetrics.getSummary(),\n            fastSyncMetrics: this.fastSyncMetrics.getSummary(),\n            checkAnswerMetrics: this.checkAnswerMetrics.getSummary(),\n            numAuthsMetrics: this.numAuthsMetrics.getSummary(),\n            numRequestsMetrics: this.numRequestsMetrics.getSummary(),\n            teamNumAuthsMetrics: this.teamMetricsTracker.numAuthsSummaries,\n            teamNumRequestsMetrics:\n              this.teamMetricsTracker.numRequestsSummaries,\n            fastSyncQueueLength: this.syncThrottle.queue.length,\n            numActivePeriodicTasksHandlers: this.numActivePeriodicTasksHandlers,\n            numPendingSubmissionTasks: this.numPendingSubmissionTasks,\n            numCompletedRoomsToSync:\n              this.gameRoomsController.slowSyncTracking\n                .completedRoomsSyncController.roomsToSync.length,\n            teamInitQueueLength: this.queuedTeamInits.size,\n            numActiveConns: this.numActiveConns,\n            userTimeUsage: this.metricsDumpTracking.userTimeUsage,\n            systemTimeUsage: this.metricsDumpTracking.systemTimeUsage,\n            dirtyState: this.dirtyStateTracker.dirtyState,\n          },\n        });\n        break;\n      }\n      case GlobalUpdatesScopeType.BIG_BOARD: {\n        this.respGlobalUpdate(conn, {\n          type: GlobalUpdateType.BIG_BOARD_OVERRIDE_STATE,\n          state: {\n            teams: Object.fromEntries(\n              Array.from(this.teamControllers.values(), (teamController) => [\n                teamController.teamId,\n                teamController.getClientBigBoardState(),\n              ])\n            ),\n          },\n        });\n        break;\n      }\n      case GlobalUpdatesScopeType.PVP: {\n        this.respGlobalUpdate(conn, {\n          type: GlobalUpdateType.PVP_OVERRIDE_STATE,\n          state: {\n            ring: this.pvpLobbyController.ring,\n          },\n        });\n        break;\n      }\n      case GlobalUpdatesScopeType.TEAM_LIST: {\n        this.sendRespRaw(\n          conn,\n          this.teamListStateTracker.getSerializedOverrideGlobalUpdate()\n        );\n        break;\n      }\n      case GlobalUpdatesScopeType.TEAM_MEMBERS: {\n        const { teamId } = scope;\n        const teamController = this.getTeamController(teamId);\n        this.respGlobalUpdate(conn, {\n          type: GlobalUpdateType.TEAM_MEMBERS_OVERRIDE_STATE,\n          state: {\n            teamId,\n            members: teamController.members,\n          },\n        });\n        break;\n      }\n      case GlobalUpdatesScopeType.FACTION_HISTORY: {\n        this.respGlobalUpdate(conn, {\n          type: GlobalUpdateType.FACTION_HISTORY_OVERRIDE_STATE,\n          factionHistory: this.statsController.factionHistory,\n        });\n        break;\n      }\n      case GlobalUpdatesScopeType.TEAM: {\n        const { teamId } = scope;\n        const teamController = this.getTeamController(teamId);\n        const {\n          displayName,\n          faction,\n          factionScoreContributions,\n          solveTimes,\n          unlockTimes,\n          cardUnlocks,\n          speedrunTimes,\n        } = teamController;\n        const enabledMasteries =\n          teamController.masteryTreeController.getEnabledMasteries();\n        const solvesDict = Object.fromEntries(\n          Array.from(solveTimes.keys(), (puzName) => [puzName, true])\n        );\n        const puzzlesDict = Object.fromEntries(\n          [...this.puzzlesDB.puzzles.keys()].flatMap((puzName) => {\n            if (!unlockTimes.has(puzName)) return [];\n            return [[puzName, teamController.getClientPuzzleState(puzName)]];\n          })\n        );\n        const battleGroupsDict = Object.fromEntries(\n          [...this.puzzlesDB.battleGroups.entries()].flatMap(\n            ([battleGroupName, battleGroup]) => {\n              if (!unlockTimes.has(battleGroupName)) return [];\n              return [\n                [\n                  battleGroupName,\n                  teamController.getClientBattleGroupState(battleGroupName),\n                ],\n              ];\n            }\n          )\n        );\n        const masteriesDict: { [masteryId: string]: ClientMasteryGlobalState } =\n          Object.fromEntries(\n            Object.values(this.masteriesDB).map(\n              ({ masteryId, order, x, y, displayName, effectText }) => {\n                const masteryData = {\n                  masteryId,\n                  order,\n                  x,\n                  y,\n                  isEnabled: enabledMasteries.has(masteryId),\n                };\n                if (teamController.solveTimes.has(masteryId))\n                  Object.assign(masteryData, { displayName, effectText });\n                return [masteryId, masteryData];\n              }\n            )\n          );\n        const { hintsTotal, hintsUsed } = teamController.backendOwned;\n        this.respGlobalUpdate(conn, {\n          type: GlobalUpdateType.TEAM_OVERRIDE_STATE,\n          state: {\n            teamId,\n            displayName,\n            faction,\n            factionScoreContributions,\n            factionScores: this.statsController.factionScores,\n            puzzles: puzzlesDict,\n            battleGroups: battleGroupsDict,\n            cardUnlocks: Object.fromEntries(\n              Array.from(cardUnlocks.entries(), ([cardName, puzName]) => [\n                cardName,\n                {\n                  cardName,\n                  puzName,\n                },\n              ])\n            ),\n            masteries: masteriesDict,\n            hintsInfo: {\n              numHintsTotal: hintsTotal,\n              numHintsUsed: hintsUsed.length,\n            },\n            huntEndTime: this.huntEndTime,\n          },\n        });\n        break;\n      }\n      case GlobalUpdatesScopeType.TEAM_FISH_PUZZLE: {\n        const { teamId, puzName } = scope;\n        const teamController = this.getTeamController(teamId);\n        const fishPuzzleController =\n          teamController.getFishPuzzleController(puzName);\n        this.respGlobalUpdate(conn, {\n          type: GlobalUpdateType.TEAM_FISH_PUZZLE_OVERRIDE_STATE,\n          state: {\n            teamId,\n            puzName,\n            numGuessesRemaining: fishPuzzleController.getNumGuessesRemaining(),\n            previousGuesses: fishPuzzleController.recentSubmissions.map(\n              ({ answer, timestamp }) => ({\n                submittedAnswer: answer,\n                timestamp,\n              })\n            ),\n          },\n        });\n        break;\n      }\n      case GlobalUpdatesScopeType.TEAM_BATTLE: {\n        const { teamId, puzName } = scope;\n        const battleController = this.getBattleController(teamId, puzName);\n        const { masteryTreeController } = this.getTeamController(teamId);\n        this.respGlobalUpdate(conn, {\n          type: GlobalUpdateType.TEAM_BATTLE_OVERRIDE_STATE,\n          state: {\n            teamId,\n            puzName,\n            selectedPuzName: battleController.selectedPuzName,\n            roomPuzName: battleController.getRoomPuzName(),\n            selectedDeckSlot: battleController.selectedDeckSlot,\n            lockedDeckSelection: battleController.getLockedDeckSelection(),\n            activeGame: battleController.getClientActiveGameState(),\n            errata: battleController.filterErrata(conn),\n            checkpointSummaries: battleController.summarizeCheckpoints(),\n          },\n        });\n        break;\n      }\n      case GlobalUpdatesScopeType.TEAM_DECKS: {\n        const { teamId } = scope;\n        const { deckControllers } = this.getTeamController(teamId);\n        this.respGlobalUpdate(conn, {\n          type: GlobalUpdateType.TEAM_DECKS_OVERRIDE_STATE,\n          state: {\n            teamId,\n            decks: deckControllers.map((deckController) => {\n              if (deckController === null) return null;\n              return deckController.deck;\n            }),\n          },\n        });\n        break;\n      }\n      case GlobalUpdatesScopeType.TEAM_MASTERY_TREE: {\n        const { teamId } = scope;\n        const { masteryTree } = this.getMasteryTreeController(teamId);\n        this.respGlobalUpdate(conn, {\n          type: GlobalUpdateType.TEAM_MASTERY_TREE_OVERRIDE_STATE,\n          state: {\n            teamId,\n            masteryTree,\n          },\n        });\n        break;\n      }\n      case GlobalUpdatesScopeType.TEAM_PVP: {\n        const { teamId } = scope;\n        const pvpController = this.getTeamController(teamId).pvpController;\n        this.respGlobalUpdate(conn, {\n          type: GlobalUpdateType.TEAM_PVP_OVERRIDE_STATE,\n          state: {\n            teamId,\n            outgoingRequests: Object.fromEntries(\n              pvpController.outgoingRequests\n            ),\n            incomingRequests: Object.fromEntries(\n              pvpController.incomingRequests\n            ),\n            blockedTeams: Object.fromEntries(\n              Array.from(pvpController.blockedTeams, (k) => [k, true])\n            ),\n            blockedByTeams: Object.fromEntries(\n              [...this.teamControllers.values()]\n                .filter(({ pvpController }) =>\n                  pvpController.blockedTeams.has(teamId)\n                )\n                .map(({ teamId }) => [teamId, true])\n            ),\n          },\n        });\n        break;\n      }\n      case GlobalUpdatesScopeType.TEAM_SPEEDRUN_LEADERBOARD_SUMMARY: {\n        const { teamId, puzName } = scope;\n        const battleController = this.getBattleController(teamId, puzName);\n        this.respGlobalUpdate(conn, {\n          type: GlobalUpdateType.TEAM_SPEEDRUN_LEADERBOARD_SUMMARY_OVERRIDE_STATE,\n          state: {\n            teamId,\n            puzName,\n            speedrunRank:\n              this.statsController.getSpeedrunRank(teamId, puzName) ??\n              undefined,\n            speedrunLeaderboardSummary:\n              this.statsController.getSpeedrunLeaderboardSummary(puzName),\n          },\n        });\n        break;\n      }\n    }\n  }\n\n  sendRespRaw(conn: ClientConnection, resp: string): void {\n    if (this.opts.dumpWsMessages) {\n      console.log(\n        `${conn.connId} < ${JSON.stringify(JSON.parse(resp), null, 2)}`\n      );\n    }\n    conn.client.send(resp);\n  }\n\n  sendResp(conn: ClientConnection, resp: WSResp): void {\n    this.sendRespRaw(conn, JSON.stringify(resp));\n  }\n\n  sendRespMultiple(conns: Iterable<ClientConnection>, resp: WSResp): void {\n    const serializedResp = JSON.stringify(resp);\n    for (const conn of conns) {\n      this.sendRespRaw(conn, serializedResp);\n    }\n  }\n\n  sendEnterRoomErr({ reqId, conn }: UnjoinedRoomMember, err: WSError) {\n    this.sendResp(conn, {\n      type: WSRespType.ENTER_ROOM_ERROR,\n      reqId,\n      err,\n    });\n  }\n\n  sendErr(conn: ClientConnection, err: WSError) {\n    this.sendResp(conn, {\n      type: WSRespType.ERROR,\n      err,\n    });\n  }\n\n  respBadRequest(conn: ClientConnection) {\n    this.sendErr(conn, { errCode: WSErrorCode.BAD_REQUEST });\n  }\n\n  /**\n   * If conn is not admin, responds with PERMISSION_DENIED.\n   * Returns if conn is admin.\n   */\n  checkIsAdmin(conn: ClientConnection): boolean {\n    if (!conn.isAdmin) {\n      this.sendErr(conn, { errCode: WSErrorCode.PERMISSION_DENIED });\n      return false;\n    }\n    return true;\n  }\n\n  async handleMsg(conn: ClientConnection, msg: string) {\n    // If we are stopped, disconnect connections on auth.\n    if (this.isStopped) {\n      conn.client.close();\n      return;\n    }\n\n    this.numRequestsMetrics.record();\n\n    const req = JSON.parse(msg.toString());\n\n    if (typeof req !== \"object\" || typeof req.type !== \"string\")\n      return this.respBadRequest(conn);\n\n    if (this.opts.dumpWsMessages) {\n      console.log(`${conn.connId} > ${JSON.stringify(req, null, 2)}`);\n    }\n\n    if (req.type === WSReqType.AUTH) {\n      const { jwt } = req;\n      if (typeof jwt !== \"string\") return this.respBadRequest(conn);\n\n      this.numAuthsMetrics.record();\n      const payload =\n        this.jwtCache.get(jwt) ?? this.opts.authInterface.verify(jwt);\n      if (payload === null) {\n        this.sendErr(conn, { errCode: WSErrorCode.AUTH_ERROR });\n        return;\n      }\n      const { teamId, isAdmin = false } = payload;\n\n      conn.teamId = teamId;\n      conn.isAdmin = isAdmin;\n\n      const teamConnsForTeam = this.teamConns.get(teamId);\n      if (teamConnsForTeam === undefined) {\n        const conns: Map<string, ClientConnection> = new Map();\n        conns.set(conn.connId, conn);\n        this.teamConns.set(teamId, conns);\n      } else {\n        teamConnsForTeam.set(conn.connId, conn);\n      }\n\n      if (!(this.opts.cursorsMode ?? false)) {\n        const teamController = this.teamControllers.get(teamId);\n        if (teamController === undefined) {\n          // Delay the AUTH_SUCCESS until the team state is initialized.\n          // This needs to be awaited on to ensure that errors are\n          // properly contained.\n          if (this.queuedTeamInits.has(teamId)) return;\n          this.queuedTeamInits.add(teamId);\n          await this.triggerTeamInits();\n          return;\n        }\n        this.teamMetricsTracker.recordAuth(teamId);\n        teamController.numAuthsMetrics.record();\n      }\n\n      this.sendResp(conn, {\n        type: WSRespType.AUTH_SUCCESS,\n      });\n      return;\n    }\n\n    const teamId = conn.teamId;\n    if (teamId === undefined) {\n      // All other requests, including pings, should be rejected\n      // if the client is not yet authenticated.\n      this.sendErr(conn, { errCode: WSErrorCode.PERMISSION_DENIED });\n      conn.client.close();\n      return;\n    }\n\n    // Requests that don't depend on teamController.\n    // This special-casing is necessary since the cursors server\n    // does not set up TeamControllers.\n    //\n    // Make sure that all these cases end with a return instead of\n    // a break!\n    switch (req.type) {\n      case WSReqType.PING: {\n        this.sendResp(conn, {\n          type: WSRespType.PONG,\n        });\n        return;\n      }\n      case WSReqType.SET_CURSOR_GROUP: {\n        const { reqId, cursorGroupName } = req;\n        if (!(cursorGroupName === null || typeof cursorGroupName === \"string\"))\n          return this.respBadRequest(conn);\n        if (cursorGroupName === null)\n          this.cursorsController.removeConnFromGroup(conn);\n        else this.cursorsController.addConnToGroup(conn, cursorGroupName);\n        this.sendResp(conn, {\n          type: WSRespType.SET_CURSOR_GROUP_ACK,\n          reqId,\n        });\n        return;\n      }\n      case WSReqType.CURSOR_EVENT: {\n        const { event } = req;\n        if (typeof event !== \"object\") return this.respBadRequest(conn);\n        const parsedEvent = safeParseCursorEvent(event);\n        if (parsedEvent === null) return this.respBadRequest(conn);\n        this.cursorsController.broadcastEvent(conn, parsedEvent);\n        this.cursorEventsMetrics.record();\n        return;\n      }\n    }\n\n    const teamController = this.teamControllers.get(teamId);\n    if (teamController === undefined) {\n      // Any further requests after AUTH should be rejected until the\n      // team state is initialized. Normally, this is enforced since\n      // we delay AUTH_SUCCESS until the team state is initialized,\n      // but we may still get this from a faulty or modded client.\n      this.sendErr(conn, { errCode: WSErrorCode.PERMISSION_DENIED });\n      conn.client.close();\n      return;\n    }\n    if (teamController.isInactive && !conn.isAdmin) {\n      // If the team is inactive, block all connections\n      // (except admin impersonators).\n      this.sendErr(conn, { errCode: WSErrorCode.TEAM_INACTIVE });\n      conn.client.close();\n      return;\n    }\n    if (teamController.isTempBlocked && !conn.isAdmin) {\n      // If the team is temporarily blocked for maintenance,\n      // block all connections (except admin impersonators).\n      this.sendErr(conn, { errCode: WSErrorCode.TEAM_TEMP_BLOCKED });\n      conn.client.close();\n      return;\n    }\n    if (\n      conn.spectateTeamId !== undefined &&\n      req.type !== WSReqType.ENTER_ROOM &&\n      req.type !== WSReqType.SUBSCRIBE_TO_UPDATES\n    ) {\n      // Spectators aren't allowed to take any actions.\n      this.sendErr(conn, { errCode: WSErrorCode.SPECTATE_ACTION });\n      return;\n    }\n\n    this.teamMetricsTracker.recordRequest(teamId);\n    teamController.numRequestsMetrics.record();\n    const parseResult = this.opts.parseWSReq(req);\n    if (!parseResult) {\n      // req is a malformed WSReq\n      this.sendErr(conn, { errCode: WSErrorCode.BAD_REQUEST });\n      return;\n    }\n    await this.handleZodReq(conn, req, teamController);\n  }\n\n  async handleZodReq(\n    conn: ClientConnection,\n    req: WSReq,\n    teamController: TeamController\n  ) {\n    switch (req.type) {\n      case WSReqType.SET_FACTION: {\n        const { faction } = req;\n        teamController.handleSetFaction(conn, faction);\n        break;\n      }\n      case WSReqType.ENTER_ROOM: {\n        const { reqId, params } = req;\n        // Leave the room the connection is currently joined to, if any\n        if (conn.roomMember !== undefined) this.kickRoomMember(conn.roomMember);\n        if (params === null) {\n          // If we're not part of a room, just return silently\n          // since this might be a holdover from a previous cleanup.\n          break;\n        }\n        const unjoinedMember: UnjoinedRoomMember = {\n          reqId,\n          conn,\n          role: params.role,\n        };\n        if (params.spectateTeamId === undefined) {\n          teamController.handleEnterRoom(unjoinedMember, params);\n          break;\n        }\n        // TODO: turn this on for everyone after hunt end?\n        if (!conn.isAdmin) {\n          this.sendEnterRoomErr(unjoinedMember, {\n            errCode: WSErrorCode.PERMISSION_DENIED,\n          });\n          break;\n        }\n        const spectateTeamController = this.teamControllers.get(\n          params.spectateTeamId ?? \"\"\n        );\n        // Forbid joining with an invalid team id.\n        if (spectateTeamController === undefined) {\n          this.sendEnterRoomErr(unjoinedMember, {\n            errCode: WSErrorCode.SPECTATE_INVALID,\n          });\n          break;\n        }\n        conn.spectateTeamId = params.spectateTeamId;\n        spectateTeamController.handleEnterRoom(unjoinedMember, params);\n        break;\n      }\n      case WSReqType.STEP: {\n        const roomMember = conn.roomMember;\n        if (roomMember === undefined) {\n          this.sendErr(conn, { errCode: WSErrorCode.NO_ROOM });\n          return;\n        }\n        const { room } = roomMember;\n        room.tracker.handleModify();\n\n        this.handleStep(roomMember, room, req.step);\n        this.opts.afterStepBackdoor?.(room);\n        break;\n      }\n      case WSReqType.DECKBUILDING_STEP: {\n        const { slot, deckUpd } = req;\n        teamController.getDeckController(slot).handleDeckbuildingStep(deckUpd);\n        break;\n      }\n      case WSReqType.MASTERY_TREE_STEP: {\n        const { step } = req;\n        teamController.masteryTreeController.handleMasteryTreeStep(step);\n        break;\n      }\n      case WSReqType.NEXT_BATTLE: {\n        const roomMember = conn.roomMember;\n        if (roomMember === undefined) {\n          this.sendErr(conn, { errCode: WSErrorCode.NO_ROOM });\n          return;\n        }\n\n        const { room } = roomMember;\n        for (const destMember of room.members.values()) {\n          // Do not pull spectators along; we don't have a key for them yet\n          if (destMember.conn.spectateTeamId !== undefined) continue;\n          this.sendResp(destMember.conn, {\n            type: WSRespType.NEXT_BATTLE,\n            roomId: room.roomId,\n          });\n        }\n        break;\n      }\n      case WSReqType.SELECT_PUZZLE: {\n        const { hostPuzName, selectedPuzName } = req;\n        if (\n          !teamController.isValidBattle(hostPuzName) ||\n          !teamController.isValidBattle(selectedPuzName)\n        ) {\n          this.sendErr(conn, { errCode: WSErrorCode.INVALID_PUZZLE });\n          return;\n        }\n\n        const err = teamController\n          .getBattleController(hostPuzName)\n          .selectPuzzle(selectedPuzName);\n        if (err !== null) this.sendErr(conn, err);\n        break;\n      }\n      case WSReqType.SELECT_DECK_FOR_BATTLE: {\n        const { puzName, slot } = req;\n        if (!teamController.isValidBattle(puzName)) {\n          this.sendErr(conn, { errCode: WSErrorCode.INVALID_PUZZLE });\n          return;\n        }\n        if (!this.isValidDeckSlot(slot)) {\n          this.sendErr(conn, { errCode: WSErrorCode.DECK_SLOT_OUT_OF_BOUNDS });\n          return;\n        }\n\n        const err = teamController\n          .getBattleController(puzName)\n          .selectDeck(slot);\n        if (err !== null) this.sendErr(conn, err);\n        break;\n      }\n      case WSReqType.START_AI_BATTLE: {\n        const { puzName, slot, restart, reuseDeck, devKnobs } = req;\n        if (!teamController.isValidBattle(puzName)) {\n          this.sendErr(conn, { errCode: WSErrorCode.INVALID_PUZZLE });\n          return;\n        }\n        if (slot !== undefined && !this.isValidDeckSlot(slot)) {\n          this.sendErr(conn, { errCode: WSErrorCode.DECK_SLOT_OUT_OF_BOUNDS });\n          return;\n        }\n        teamController.startAIBattle(\n          conn,\n          puzName,\n          slot,\n          restart,\n          reuseDeck,\n          // A lot of client code has been passing in empty devKnobs\n          // for non-admin connections, rather than omitting it\n          // entirely. To reduce the possiblity of regression, just\n          // silently drop devKnobs if non-admin.\n          conn.isAdmin ? devKnobs : undefined\n        );\n        break;\n      }\n      case WSReqType.RESTORE_CHECKPOINT: {\n        const { puzName, slot } = req;\n        if (!teamController.isValidBattle(puzName)) {\n          this.sendErr(conn, { errCode: WSErrorCode.INVALID_PUZZLE });\n          return;\n        }\n        if (!this.isValidDeckSlot(slot)) {\n          this.sendErr(conn, { errCode: WSErrorCode.DECK_SLOT_OUT_OF_BOUNDS });\n          return;\n        }\n\n        teamController\n          .getBattleController(puzName)\n          .restoreCheckpoint(conn, slot);\n        break;\n      }\n      case WSReqType.RESIGN: {\n        const { player, puzName } = req;\n        if (!teamController.isValidBattle(puzName)) {\n          this.sendErr(conn, { errCode: WSErrorCode.INVALID_PUZZLE });\n          return;\n        }\n\n        const err = teamController.getBattleController(puzName).resign();\n        if (err !== null) this.sendErr(conn, err);\n        break;\n      }\n      case WSReqType.PVP_CLAIM_TIME_VICTORY: {\n        const err = teamController.pvpController.claimTimeVictory();\n        if (err !== null) this.sendErr(conn, err);\n        break;\n      }\n      case WSReqType.PVP_UNLOCK_DECK: {\n        const err = teamController.pvpController.handleUnlockDeck(conn);\n        if (err !== null) this.sendErr(conn, err);\n        break;\n      }\n      case WSReqType.PVP_MAKE_REQUEST: {\n        const { targetTeamId, autoAccept } = req;\n        if (autoAccept !== undefined && !this.checkIsAdmin(conn)) break;\n        const err = teamController.pvpController.handleMakePvPRequest(\n          targetTeamId,\n          autoAccept\n        );\n        if (err !== null) this.sendErr(conn, err);\n        break;\n      }\n      case WSReqType.PVP_CANCEL_REQUEST: {\n        const { targetTeamId } = req;\n        const err = teamController.pvpController.handleCancelPvPRequest(\n          conn,\n          targetTeamId\n        );\n        if (err !== null) this.sendErr(conn, err);\n        break;\n      }\n      case WSReqType.PVP_ACCEPT_REQUEST: {\n        const { targetTeamId, devKnobs } = req;\n        const err = teamController.pvpController.acceptPvPRequest(\n          targetTeamId,\n          // A lot of client code has been passing in empty devKnobs\n          // for non-admin connections, rather than omitting it\n          // entirely. To reduce the possiblity of regression, just\n          // silently drop devKnobs if non-admin.\n          conn.isAdmin ? devKnobs : undefined\n        );\n        if (err !== null) this.sendErr(conn, err);\n        break;\n      }\n      case WSReqType.PVP_SET_IS_BLOCKED: {\n        const { targetTeamId, isBlocked } = req;\n        const err = teamController.pvpController.setIsTeamBlocked(\n          conn,\n          targetTeamId,\n          isBlocked\n        );\n        if (err !== null) this.sendErr(conn, err);\n        break;\n      }\n      case WSReqType.PVP_ENTER_RING: {\n        const err = teamController.pvpController.enterRing();\n        if (err !== null) this.sendErr(conn, err);\n        break;\n      }\n      case WSReqType.PVP_LEAVE_RING: {\n        teamController.pvpController.leaveRing();\n        break;\n      }\n      case WSReqType.VIEW_PUZZLE: {\n        const { puzName } = req;\n        if (!this.isValidPuzzle(teamController, puzName)) {\n          this.sendErr(conn, { errCode: WSErrorCode.INVALID_PUZZLE });\n          return;\n        }\n        teamController.viewPuzzle(conn, puzName);\n        break;\n      }\n      case WSReqType.SUBMIT_ANSWER: {\n        const { teamId, puzName, answer } = req;\n        const teamController = this.getTeamController(teamId);\n        if (teamController.teamId !== teamId && !conn.isAdmin) {\n          this.sendErr(conn, { errCode: WSErrorCode.PERMISSION_DENIED });\n          return;\n        }\n        if (!teamController.isValidFishPuzzle(puzName)) {\n          this.sendErr(conn, { errCode: WSErrorCode.INVALID_PUZZLE });\n          break;\n        }\n        await teamController\n          .getFishPuzzleController(puzName)\n          .handleSubmitAnswerAsync(conn, answer);\n        break;\n      }\n      case WSReqType.MYOSB_REQUEST: {\n        const { teamId, components } = req;\n        const teamController = this.getTeamController(teamId);\n        if (teamController.teamId !== teamId && !conn.isAdmin) {\n          this.sendErr(conn, { errCode: WSErrorCode.PERMISSION_DENIED });\n          return;\n        }\n        if (!teamController.isValidFishPuzzle(PUZ_NAME_MYOSB)) {\n          this.sendErr(conn, { errCode: WSErrorCode.INVALID_PUZZLE });\n          break;\n        }\n\n        await teamController\n          .getFishPuzzleController(PUZ_NAME_MYOSB)\n          .handleMyosbRequest(conn, components);\n        break;\n      }\n      case WSReqType.ADMIN_MODIFY: {\n        if (!this.checkIsAdmin(conn)) break;\n        for (const [teamId, teamUpds] of Object.entries(req.teams ?? {})) {\n          await this.getTeamController(teamId).adminModifyTeamAsync(teamUpds);\n        }\n        if (req.config !== undefined) Object.assign(this.config, req.config);\n        break;\n      }\n      case WSReqType.SUBSCRIBE_TO_UPDATES: {\n        this.subscribeToUpdates(conn, req.scope);\n        break;\n      }\n    }\n  }\n\n  /**\n   * Used to wrap operations that might generate updates, to ensure that\n   * the updates are sent out afterwards.\n   */\n  useUpdatesContext(room: Room, func: () => void) {\n    if (room.multicaster.updates.length !== 0)\n      throw new Error(\"updates leakage from a previous step or async event\");\n    try {\n      func();\n    } catch (err) {\n      const { gameState } = room.engine;\n      console.error(\n        `Error in room ${room.roomId} (team ${\n          gameState[Player.P1].teamData?.teamId ?? \"unknown\"\n        }, puzzle ${gameState.puzName})`\n      );\n      throw err;\n    } finally {\n      this.broadcastUpdates(room);\n    }\n  }\n\n  handleStep(sender: RoomMember, room: Room, step: Step): void {\n    this.useUpdatesContext(room, () => {\n      room.engine.applyStep(sender, step);\n    });\n  }\n\n  sendSystemStep(room: Room, step: SystemStep): void {\n    this.useUpdatesContext(room, () => {\n      room.engine.applySystemStep(step);\n    });\n  }\n\n  handleSystemUpdate(room: Room, upd: Update): void {\n    switch (upd.type) {\n      case UpdateType.SYSTEM_ROOM_COMPLETE: {\n        const { solvedTeamIds, cardUnlocks } = upd;\n        this.gameRoomsController.handleRoomCompleteAsync(\n          room,\n          solvedTeamIds,\n          cardUnlocks\n        );\n        break;\n      }\n    }\n  }\n\n  broadcastUpdates(room: Room): void {\n    const upds = room.multicaster.readOutUpdates();\n    if (upds.length === 0) return;\n    for (const [destMemberId, destMember] of room.members) {\n      const updsToSend = [];\n      for (const updSpec of upds) {\n        const { upd } = updSpec;\n        // Only send updates after a member is enabled.\n        if (upd.type === UpdateType.SYSTEM_ENABLE_MEMBER) {\n          destMember.enabled = true;\n          continue;\n        }\n        const shouldSend =\n          destMember.enabled &&\n          (() => {\n            switch (updSpec.type) {\n              case UpdateBroadcastSpecType.SYSTEM:\n                return false;\n              case UpdateBroadcastSpecType.ROOM_MEMBER_ID:\n                return destMemberId === updSpec.roomMemberId;\n              case UpdateBroadcastSpecType.BROADCAST:\n                return true;\n              case UpdateBroadcastSpecType.ROLE:\n                return destMember.role === updSpec.role;\n              case UpdateBroadcastSpecType.ROLE_FILTER:\n                return updSpec.pred(destMember.role);\n            }\n          })();\n        if (shouldSend) {\n          updsToSend.push(upd);\n        }\n      }\n      if (updsToSend.length > 0) {\n        this.sendResp(destMember.conn, {\n          type: WSRespType.UPDATES,\n          updates: updsToSend,\n        });\n      }\n    }\n\n    // Process system updates.\n    for (const updSpec of upds) {\n      if (updSpec.type !== UpdateBroadcastSpecType.SYSTEM) continue;\n      this.handleSystemUpdate(room, updSpec.upd);\n    }\n  }\n\n  respGlobalUpdate(conn: ClientConnection, upd: GlobalUpdate): void {\n    this.sendResp(conn, {\n      type: WSRespType.GLOBAL_UPDATE,\n      upd,\n    });\n  }\n\n  broadcastGlobalUpdate(scope: GlobalUpdatesScope, upd: GlobalUpdate): void {\n    const subscriptions = this.getSubscriptions(scope);\n    const resp: WSResp = {\n      type: WSRespType.GLOBAL_UPDATE,\n      upd,\n    };\n    this.sendRespMultiple(subscriptions.values(), resp);\n  }\n\n  broadcastAdminGlobalUpdate(upd: GlobalUpdate): void {\n    return this.broadcastGlobalUpdate(\n      {\n        type: GlobalUpdatesScopeType.SERVER,\n      },\n      upd\n    );\n  }\n\n  broadcastServerHealthGlobalUpdate(upd: GlobalUpdate): void {\n    return this.broadcastGlobalUpdate(\n      {\n        type: GlobalUpdatesScopeType.SERVER_HEALTH,\n      },\n      upd\n    );\n  }\n\n  handleTeamSummaryUpdate(teamId: string, upd: TeamSummaryUpdate): void {\n    // Broadcast team list updates even for hidden teams. We will filter\n    // hidden teams downstream.\n    this.teamListStateTracker.updateTeam(teamId, upd);\n  }\n\n  handleTeamListAddTeam(teamId: string) {\n    const teamController = this.getTeamController(teamId);\n    const teamListState = teamController.getTeamSummaryState();\n    this.teamListStateTracker.addTeam(teamId, teamListState);\n    this.broadcastTeamListGlobalUpdate({\n      type: GlobalUpdateType.TEAM_LIST_UPDATE_STATE,\n      addTeams: { [teamId]: teamListState },\n    });\n  }\n\n  handleTeamListRemoveTeam(teamId: string) {\n    this.teamListStateTracker.removeTeam(teamId);\n    this.broadcastTeamListGlobalUpdate({\n      type: GlobalUpdateType.TEAM_LIST_UPDATE_STATE,\n      removeTeams: { [teamId]: true },\n    });\n  }\n\n  private broadcastTeamListGlobalUpdate(upd: GlobalUpdate): void {\n    return this.broadcastGlobalUpdate(\n      {\n        type: GlobalUpdatesScopeType.TEAM_LIST,\n      },\n      upd\n    );\n  }\n\n  private broadcastAndCommitTeamSummaryUpdates() {\n    const { pendingUpds } = this.teamListStateTracker;\n    if (Object.keys(pendingUpds).length <= 0) return;\n    this.broadcastTeamListGlobalUpdate({\n      type: GlobalUpdateType.TEAM_LIST_UPDATE_STATE,\n      updTeams: pendingUpds,\n    });\n    this.statsController.handleTeamSummaryUpdates(pendingUpds);\n    this.teamListStateTracker.commitUpds();\n  }\n\n  broadcastBigBoardGlobalUpdate(upd: GlobalUpdate): void {\n    return this.broadcastGlobalUpdate(\n      {\n        type: GlobalUpdatesScopeType.BIG_BOARD,\n      },\n      upd\n    );\n  }\n\n  broadcastRespToTeam(teamId: string, resp: WSResp): void {\n    const teamConnsForTeam = this.teamConns.get(teamId);\n    if (teamConnsForTeam === undefined) return;\n\n    this.sendRespMultiple(teamConnsForTeam.values(), resp);\n  }\n\n  broadcastNotifToTeam(teamId: string, notif: HuntNotification) {\n    this.broadcastRespToTeam(teamId, {\n      type: WSRespType.NOTIFICATION,\n      notif,\n    });\n  }\n\n  processFastSyncQueue(): void {\n    while (\n      this.syncThrottle.numSyncsInFlight < this.config.syncThrottleParallelism\n    ) {\n      const task = this.syncThrottle.queue.shift();\n      if (task === undefined) break;\n      this.syncThrottle.numSyncsInFlight++;\n      task();\n    }\n  }\n\n  private async waitSyncThrottleAsync() {\n    await new Promise<void>((resolve, reject) => {\n      this.syncThrottle.queue.push(resolve);\n      this.processFastSyncQueue();\n    });\n  }\n\n  private signalSyncThrotleAsync() {\n    this.syncThrottle.numSyncsInFlight--;\n    this.processFastSyncQueue();\n  }\n\n  async runWithSyncThrottleAsync<T>(funcAsync: () => Promise<T>): Promise<T> {\n    let needRelease = false;\n    try {\n      await this.waitSyncThrottleAsync();\n      needRelease = true;\n      return await funcAsync();\n    } finally {\n      // Release the lock, but propagate the error.\n      if (needRelease) this.signalSyncThrotleAsync();\n    }\n  }\n\n  async syncDataThrottledAsync(req: SyncDataBackendReq) {\n    return await this.runWithSyncThrottleAsync(async () => {\n      return await this.backend.syncData(req);\n    });\n  }\n\n  async triggerSlowSyncDownloadAsync(): Promise<void> {\n    if (this.slowSyncTracking.isDownloadInFlight) return;\n    const factionHistorySnapshot = this.statsController.startSync();\n\n    const syncDataReq = {\n      factionHistory: factionHistorySnapshot,\n      // The presence of this field in general indicates that this is\n      // a slow, periodic update, and is used for things like getting\n      // notifications and updating hint counts\n      notifsStartIndex: this.slowSyncTracking.notifsNextIndex,\n    };\n\n    this.slowSyncTracking.isDownloadInFlight = true;\n    const resp = await (async () => {\n      try {\n        return await this.syncDataThrottledAsync(syncDataReq);\n      } catch (err) {\n        // If we encounter an error, just log and try again later.\n        console.error(err);\n      } finally {\n        this.slowSyncTracking.isDownloadInFlight = false;\n      }\n    })();\n\n    if (resp === undefined) return;\n\n    const { notifs, notifsNextIndex } = resp;\n\n    this.statsController.endSync(factionHistorySnapshot);\n\n    if (notifsNextIndex !== undefined)\n      this.slowSyncTracking.notifsNextIndex = notifsNextIndex;\n    for (const data of notifs ?? []) {\n      try {\n        switch (data.type) {\n          case BackendNotificationDataType.HINT_ANSWERED: {\n            // Translate the backend notif into a client notif.\n            const { teamId, puzName } = data;\n            this.broadcastNotifToTeam(teamId, {\n              type: HuntNotificationType.HINT_ANSWERED,\n              puzName,\n            });\n            break;\n          }\n          case BackendNotificationDataType.TEAM_MEMBERS: {\n            const { teamId, members } = data;\n            this.teamControllers.get(teamId)?.handleSetMembers(members);\n            break;\n          }\n          case BackendNotificationDataType.ERRATUM: {\n            const { erratumId, puzzle, published } = data;\n            const newlyPublished =\n              published && !this.errata[erratumId]?.published;\n            this.errata[erratumId] = data;\n            for (const [teamId, team] of this.teamControllers) {\n              // Imperfectly replicate Django logic for when errata are\n              // visible. Hopefully it's close enough.\n              if (newlyPublished && (!puzzle || team.unlockTimes.has(puzzle)))\n                this.broadcastNotifToTeam(teamId, {\n                  type: HuntNotificationType.ERRATUM,\n                });\n              for (const [puzName, battle] of team.battleControllers)\n                battle.broadcastErrataGlobalUpdate({});\n            }\n            break;\n          }\n        }\n      } catch (err) {\n        // Isolate errors to individual notifications.\n        console.error(err);\n      }\n    }\n\n    if (\n      resp.unclaimedHints !== undefined &&\n      resp.unclaimedHints !== this.unclaimedHints\n    ) {\n      this.unclaimedHints = resp.unclaimedHints;\n      this.broadcastAdminGlobalUpdate({\n        type: GlobalUpdateType.SERVER_UNCLAIMED_HINTS,\n        unclaimedHints: resp.unclaimedHints,\n      });\n    }\n\n    // Update hint counts and extra guesses if changed\n    const { teams } = resp;\n    for (const [teamId, teamUpdate] of Object.entries(teams ?? {})) {\n      try {\n        const teamController = this.teamControllers.get(teamId);\n        // If we don't have the team initialized yet, drop the update\n        // as we should get it with the init later.\n        if (teamController === undefined) continue;\n\n        // Check to see if number of hints changed\n        const { hintsTotal, hintsUsed } = teamUpdate;\n        if (\n          teamController.backendOwned.hintsTotal !== hintsTotal ||\n          teamController.backendOwned.hintsUsed.length !== hintsUsed.length\n        ) {\n          teamController.backendOwned = teamUpdate;\n\n          teamController.broadcastTeamGlobalUpdate({\n            type: GlobalUpdateType.TEAM_UPDATE_STATE,\n            hintsInfo: {\n              numHintsTotal: hintsTotal,\n              numHintsUsed: hintsUsed.length,\n            },\n          });\n        }\n        // Note that we shouldn't put this in the above diff since\n        // the hint used allocation may change even if the total\n        // number of hitns used stays the same.\n        const hintsUsedMap = teamController.getHintsUsedMap();\n        this.bigBoardStateTracker.updateTeam(teamId, {\n          numHintsTotal: hintsTotal,\n          unlocks: Object.fromEntries(\n            Object.entries(hintsUsedMap).map(([puzName, numHintsUsed]) => [\n              puzName,\n              { numHintsUsed },\n            ])\n          ),\n        });\n\n        // Check to see if number of guesses per puzzle has changed. This will\n        // not catch cases in which a guess grant for a puzzle has completely\n        // been removed, i.e the number of extra guesses is amended to 0.\n        const { extraGuesses } = teamUpdate;\n        for (const [puzName, numExtraGuesses] of Object.entries(\n          extraGuesses ?? {}\n        )) {\n          const fishPuzzleController =\n            teamController.getFishPuzzleController(puzName);\n          if (fishPuzzleController.numExtraGuesses !== numExtraGuesses) {\n            fishPuzzleController.numExtraGuesses = numExtraGuesses;\n            fishPuzzleController.handleUpdateNumGuessesRemaining();\n          }\n        }\n      } catch (err) {\n        // Isolate errors to the team being synced.\n        console.error(err);\n      }\n    }\n\n    // Check to see if any extra guesses have gone down to 0\n    for (const teamController of this.teamControllers.values()) {\n      try {\n        const teamUpdate = teams ? teams[teamController.teamId] : undefined;\n        const extraGuesses = teamUpdate ? teamUpdate.extraGuesses : {};\n        for (const fishPuzzleController of teamController.fishPuzzleControllers.values()) {\n          const newExtraGuesses =\n            extraGuesses[fishPuzzleController.puzName] ?? 0;\n          if (fishPuzzleController.numExtraGuesses !== newExtraGuesses) {\n            fishPuzzleController.numExtraGuesses = newExtraGuesses;\n            fishPuzzleController.handleUpdateNumGuessesRemaining();\n          }\n        }\n      } catch (err) {\n        console.error(err);\n      }\n    }\n  }\n\n  async triggerSlowSyncUpload(): Promise<void> {\n    await this.gameRoomsController.triggerSlowSyncAsync();\n    await this.slowSyncTracking.decksAndMasteryTreesSyncController.syncLoopController.triggerLoopAsync();\n    await this.slowSyncTracking.checkpointsSyncController.syncLoopController.triggerLoopAsync();\n    await this.slowSyncTracking.miscTeamStateSyncController.syncLoopController.triggerLoopAsync();\n  }\n\n  private async runPeriodicSyncTasks(): Promise<void> {\n    // If a fast sync fails, the periodic task handler is responsible\n    // for kicking it off again after a while.\n    for (const [teamId, teamController] of this.teamControllers) {\n      try {\n        await teamController.fastSyncTracking.syncLoopController.triggerLoopAsync();\n      } catch (err) {\n        // Isolate fast sync problems to within individual teams.\n        console.error(err);\n      }\n    }\n\n    try {\n      await this.triggerSlowSyncUpload();\n    } catch (err) {\n      // Isolate errors for the slow sync upload.\n      console.error(err);\n    }\n\n    try {\n      await this.triggerSlowSyncDownloadAsync();\n    } catch (err) {\n      // Isolate errors for the slow sync download.\n      console.error(err);\n    }\n  }\n\n  runPeriodicTasks(): void {\n    // Allow multiple periodic tasks runners to run at once,\n    // so that if any gets stuck, future ones may pick up where\n    // earlier ones left off.\n    (async () => {\n      if (!this.isReady) {\n        // If init failed, try again.\n        await this.tryInitAsync();\n        return;\n      }\n\n      try {\n        const nowTime = Date.now();\n        const { lastDumpTime, lastUserTime, lastSystemTime } =\n          this.metricsDumpTracking;\n        // default interval of 30s\n        if (\n          nowTime >\n          lastDumpTime + (this.opts.metricsDumpInterval ?? 30 * 1000)\n        ) {\n          const { user: userTime, system: systemTime } =\n            this.opts.getCpuUsage?.() ?? { user: 0, system: 0 };\n          const userTimeUsage =\n            (userTime - lastUserTime) / 1000 / (nowTime - lastDumpTime);\n          const systemTimeUsage =\n            (systemTime - lastSystemTime) / 1000 / (nowTime - lastDumpTime);\n          this.metricsDumpTracking = {\n            lastDumpTime: nowTime,\n            lastUserTime: userTime,\n            lastSystemTime: systemTime,\n            userTimeUsage,\n            systemTimeUsage,\n          };\n          this.opts.logMetrics?.(\n            `[${nowTime}] Metrics: ${JSON.stringify([\n              0, // version\n              this.fastSyncMetrics.getSummary().totNumEvents,\n              this.slowSyncMetrics.getSummary().totNumEvents,\n              this.checkAnswerMetrics.getSummary().totNumEvents,\n              this.numAuthsMetrics.getSummary().totNumEvents,\n              this.numRequestsMetrics.getSummary().totNumEvents,\n              this.syncThrottle.queue.length,\n              this.numActivePeriodicTasksHandlers,\n              this.numPendingSubmissionTasks,\n              this.gameRoomsController.slowSyncTracking\n                .completedRoomsSyncController.roomsToSync.length,\n              this.queuedTeamInits.size,\n              userTime,\n              systemTime,\n            ])}`\n          );\n        }\n      } catch (err) {\n        console.error(err);\n      }\n\n      this.numActivePeriodicTasksHandlers++;\n      try {\n        if (this.cursorEventsMetrics.prevNumEvents > 0) {\n          this.opts.logCursorsMetrics?.(\n            `[${new Date().toLocaleString()}] Cursor events: ${this.cursorEventsMetrics.getSummaryString()}`\n          );\n        }\n      } catch (err) {\n        console.error(err);\n      }\n\n      if (!(this.opts.cursorsMode ?? false)) {\n        try {\n          this.broadcastServerHealthGlobalUpdate({\n            type: GlobalUpdateType.SERVER_HEALTH_UPDATE_STATE,\n            slowSyncMetrics: this.slowSyncMetrics.getSummary(),\n            fastSyncMetrics: this.fastSyncMetrics.getSummary(),\n            checkAnswerMetrics: this.checkAnswerMetrics.getSummary(),\n            numAuthsMetrics: this.numAuthsMetrics.getSummary(),\n            numRequestsMetrics: this.numRequestsMetrics.getSummary(),\n            ...this.teamMetricsTracker.getAndCommitUpds(),\n            fastSyncQueueLength: this.syncThrottle.queue.length,\n            numActivePeriodicTasksHandlers: this.numActivePeriodicTasksHandlers,\n            numPendingSubmissionTasks: this.numPendingSubmissionTasks,\n            numCompletedRoomsToSync:\n              this.gameRoomsController.slowSyncTracking\n                .completedRoomsSyncController.roomsToSync.length,\n            teamInitQueueLength: this.queuedTeamInits.size,\n            numActiveConns: this.numActiveConns,\n            userTimeUsage: this.metricsDumpTracking.userTimeUsage,\n            systemTimeUsage: this.metricsDumpTracking.systemTimeUsage,\n            dirtyStateUpd: this.dirtyStateTracker.pendingDirtyStateUpd,\n          });\n          this.dirtyStateTracker.commitUpds();\n        } catch (err) {\n          // Isolate problems with server health reporting.\n          console.error(err);\n        }\n\n        try {\n          this.broadcastAndCommitTeamSummaryUpdates();\n        } catch (err) {\n          // Isolate problems with team list reporting.\n          console.error(err);\n        }\n\n        try {\n          const { pendingUpds } = this.bigBoardStateTracker;\n          if (Object.keys(pendingUpds).length > 0) {\n            this.broadcastBigBoardGlobalUpdate({\n              type: GlobalUpdateType.BIG_BOARD_UPDATE_STATE,\n              updTeams: pendingUpds,\n            });\n            this.bigBoardStateTracker.commitUpds();\n          }\n        } catch (err) {\n          // Isolate problems with big board reporting.\n          console.error(err);\n        }\n\n        await this.runPeriodicSyncTasks();\n\n        try {\n          // This involves checking all PvP requests for expiry.\n          // While this can theoretically grow as large as quadratic\n          // in the number of teams, realisitically it is very\n          // unlikely for us to reach that since requests are\n          // short-lived.\n          for (const teamController of this.teamControllers.values()) {\n            teamController.pvpController.unlockDeckIfUnneeded();\n          }\n        } catch (err) {\n          // Isolate problems with auto-unlocking decks.\n          console.error(err);\n        }\n      }\n      this.numActivePeriodicTasksHandlers--;\n    })();\n  }\n\n  recordSlowSyncPacket(): void {\n    this.slowSyncMetrics.record();\n  }\n}\n","import { SerializedCheckpointState } from \"engine/types/game-state\";\nimport { Faction, makeInitFactionScores } from \"engine/types/factions\";\nimport {\n  BackendRoom,\n  BackendDeck,\n  BackendAnswerSubmission,\n  BackendUnlock,\n  BackendCardUnlock,\n  BackendNotification,\n  SyncDataBackendReq,\n  CheckAnswerBackendReq,\n  GetInitDataBackendResp,\n  GetInitTeamDataBackendResp,\n  CheckAnswerBackendRespType,\n  CheckAnswerBackendResp,\n  BackendInterface,\n  makeBattleSolveAnswerSubmission,\n} from \"game-server/backend-interface/BackendInterface\";\nimport { MasteryTree } from \"game-server/masteries\";\nimport { CardsDB } from \"engine/cards/CardsDB\";\nimport {\n  PuzzlesDB,\n  PUZ_NAME_INTRO,\n  PUZ_NAME_PVP,\n  BATTLE_GROUP_NAME_INSTANCER,\n} from \"engine/puzzles/puzzle-data\";\nimport { MasteriesDB } from \"engine/puzzles/mastery-data\";\nimport { isCardValidForDeckbuilding } from \"game-server/deckbuilding\";\nimport { COMMON_CARD_EFFECTS_SHARED } from \"engine/cards/card-effects-shared\";\n\n/**\n * Version number of the mock DB schema.\n * The mock database may be saved to persistent storage periodically.\n * Every time the schema (the below type declarations) is modified,\n * the version number must be incremented to invalidate the old mock\n * database. This can also be used to invalidate the entire DB in\n * general during development, such as when new default decks are\n * added.\n */\nconst SCHEMA_VERSION = 72;\n\nexport const BOOTSTRAP_TEAM_ID = \"postsolver\";\nconst BAREBONES_TEAM_ID = \"BAREBONES_TEST_TEAM\";\nconst MAX_GUESSES_PER_PUZZLE = 20;\n\ntype MockDBTeam = {\n  displayName: string;\n  faction: Faction | null;\n  isInactive: boolean;\n  isHidden: boolean;\n  factionScoreContributions: { [faction in Faction]: number };\n  /** puzNames of puzzles viewed by the team. */\n  viewTimes: { [puzName: string]: number };\n  unlocks: { [puzName: string]: BackendUnlock };\n  cardUnlocks: { [cardName: string]: BackendCardUnlock };\n  answerSubmissions: { [puzName: string]: BackendAnswerSubmission[] };\n  /** Decks owned by the team. */\n  decks: BackendDeck[];\n  /** The mastery tree owned by the team, if any. */\n  masteryTree: MasteryTree | null;\n  /** Slot number of the preferred deck for each puzzle. */\n  preferredDecks: { [puzName: string]: number };\n  /** Puzzle selections for instancer rooms. */\n  puzzleSelections: { [puzName: string]: string };\n  /** Checkpoints. */\n  checkpoints: {\n    [puzName: string]: { [slot: number]: SerializedCheckpointState };\n  };\n  /** Teams blocked in PvP. */\n  blockedTeams: { [teamId: string]: boolean };\n  /** Position of the team in the PvP ring, if the team is in the ring. */\n  isInRing: boolean;\n};\n\ntype MockDB = {\n  version: number;\n  nextGameServerId: number;\n  teams: { [teamId: string]: MockDBTeam };\n  /** Rooms by room ID. */\n  rooms: { [roomId: string]: BackendRoom };\n  notifs: BackendNotification[];\n};\n\nconst normalizeAnswer = (answer: string): string => {\n  return [...answer.normalize(\"NFKD\")]\n    .flatMap((c) => {\n      if (!c.match(/[a-z]/i)) return [];\n      return [c.toUpperCase()];\n    })\n    .join(\"\");\n};\n\nconst makeDefaultDeck = (\n  cardsDB: CardsDB,\n  teamId: string,\n  slot: number,\n  displayName: string\n): BackendDeck => {\n  const defaultDeckCards: { [cardName: string]: number } = {};\n  const cardUnlocks = new Set(Object.keys(cardsDB));\n  for (const [cardName, cardData] of Object.entries(cardsDB)) {\n    if (!isCardValidForDeckbuilding(cardName, cardUnlocks, cardsDB)) continue;\n    if (COMMON_CARD_EFFECTS_SHARED[cardName]?.isLegendary ?? false) continue;\n    if (Object.keys(defaultDeckCards).length >= 30) break;\n    defaultDeckCards[cardName] = 1;\n  }\n\n  return {\n    teamId,\n    slot,\n    deck: {\n      displayName,\n      cards: { ...defaultDeckCards },\n    },\n  };\n};\n\nconst makeBootstrapDecks = (cardsDB: CardsDB): BackendDeck[] => {\n  return [\n    makeDefaultDeck(cardsDB, BOOTSTRAP_TEAM_ID, 0, \"Default deck\"),\n    makeDefaultDeck(cardsDB, BOOTSTRAP_TEAM_ID, 1, \"Default opponent deck\"),\n    // A small, initial test deck.\n    {\n      teamId: BOOTSTRAP_TEAM_ID,\n      slot: 2,\n      deck: {\n        displayName: \"Test deck\",\n        cards: { \"two-bees\": 1, \"switch-boar-d\": 2 },\n      },\n    },\n  ];\n};\n\nconst makeBootstrapDB = (\n  puzzlesDB: PuzzlesDB,\n  cardsDB: CardsDB,\n  masteriesDB: MasteriesDB,\n  // Create initial unlocks.\n  initUnlocks: boolean,\n  // The default bootstrap backend state is now the postsolve initial\n  // state. Setting isDev recovers the old dev bootstrap state.\n  isDev: boolean\n): MockDB => {\n  const timeNow = new Date().getTime();\n  const teamAnswerSubmissions: {\n    [puzName: string]: BackendAnswerSubmission[];\n  } =\n    isDev && initUnlocks\n      ? {\n          [PUZ_NAME_INTRO]: [\n            makeBattleSolveAnswerSubmission(\n              BOOTSTRAP_TEAM_ID,\n              PUZ_NAME_INTRO,\n              new Date().getTime()\n            ),\n          ],\n        }\n      : {};\n  const teamDecks = isDev && initUnlocks ? makeBootstrapDecks(cardsDB) : [];\n\n  const makeAllPuzzleUnlocks = (teamId: string) => {\n    if (!initUnlocks) return {};\n\n    // Only unlock the battle groups for the test team, so that\n    // we can test sub-battle unlocks on staging.\n    const teamUnlocks = Object.fromEntries(\n      [...puzzlesDB.battleGroups.keys()]\n        .filter((puzName) => {\n          if (isDev) return true;\n          const puzData = puzzlesDB.puzzles.get(puzName);\n          if (puzData === undefined)\n            throw new Error(\n              `could not find puz data entry for battle group ${puzName}`\n            );\n          const { isFullPuzzle, isCutscene } = puzData;\n          if (isFullPuzzle) return true;\n          if (isCutscene) return true;\n          if ([PUZ_NAME_PVP, BATTLE_GROUP_NAME_INSTANCER].includes(puzName))\n            return true;\n          return false;\n        })\n        .map((puzName) => [\n          puzName,\n          {\n            teamId,\n            puzName,\n            timestamp: timeNow,\n          },\n        ])\n    );\n    return teamUnlocks;\n  };\n\n  const teamCardUnlocks: { [cardName: string]: BackendCardUnlock } = {};\n  for (const [cardName, cardData] of Object.entries(cardsDB)) {\n    if (!initUnlocks) continue;\n    if (cardData.cardUnlockGroupId === null) continue;\n    if (\n      !isDev &&\n      [\n        \"master-bramble\",\n        \"kero--floppy\",\n        \"professor-galactic\",\n        \"stalactica\",\n        \"test-card\",\n      ].includes(cardName)\n    )\n      continue;\n    teamCardUnlocks[cardName] = {\n      teamId: BOOTSTRAP_TEAM_ID,\n      puzName: null,\n      cardName,\n      timestamp: timeNow,\n    };\n  }\n\n  const factionScoreContributions = makeInitFactionScores();\n\n  const teams: { [teamId: string]: MockDBTeam } = {\n    [BOOTSTRAP_TEAM_ID]: {\n      displayName: \"Postsolver\",\n      isInactive: false,\n      isHidden: false,\n      faction: null,\n      factionScoreContributions: { ...factionScoreContributions },\n      answerSubmissions: teamAnswerSubmissions,\n      viewTimes: {},\n      unlocks: makeAllPuzzleUnlocks(BOOTSTRAP_TEAM_ID),\n      cardUnlocks: teamCardUnlocks,\n      decks: teamDecks,\n      masteryTree: {\n        placements: {},\n        connectedAnswers: [],\n        masteriesListOverride:\n          isDev && initUnlocks ? Object.keys(masteriesDB) : undefined,\n      },\n      preferredDecks: {},\n      puzzleSelections: {},\n      checkpoints: {},\n      blockedTeams: {},\n      isInRing: false,\n    },\n  };\n\n  if (isDev) {\n    teams[BAREBONES_TEAM_ID] = {\n      displayName: \"barebones team\",\n      isInactive: false,\n      isHidden: false,\n      faction: null,\n      factionScoreContributions: { ...factionScoreContributions },\n      answerSubmissions: {},\n      viewTimes: {},\n      unlocks: {},\n      cardUnlocks: {},\n      decks: [],\n      masteryTree: null,\n      preferredDecks: {},\n      puzzleSelections: {},\n      checkpoints: {},\n      blockedTeams: {},\n      isInRing: false,\n    };\n\n    for (let i = 0; i < 30; i++) {\n      const teamId = `solver${i}`;\n      teams[teamId] = {\n        displayName: `pvp test team ${i}`,\n        isInactive: false,\n        isHidden: false,\n        faction: null,\n        factionScoreContributions: { ...factionScoreContributions },\n        answerSubmissions: {},\n        viewTimes: {},\n        unlocks: makeAllPuzzleUnlocks(teamId),\n        cardUnlocks: {},\n        decks: [makeDefaultDeck(cardsDB, teamId, 0, \"Default deck\")],\n        masteryTree: {\n          placements: {},\n          connectedAnswers: [],\n          masteriesListOverride: Object.keys(masteriesDB),\n        },\n        preferredDecks: {\n          [PUZ_NAME_PVP]: 0,\n        },\n        puzzleSelections: {},\n        checkpoints: {},\n        blockedTeams: {},\n        isInRing: false,\n      };\n    }\n  }\n\n  return {\n    version: SCHEMA_VERSION,\n    nextGameServerId: 0,\n    teams,\n    rooms: {},\n    notifs: [],\n  };\n};\n\nexport class MockBackendInterface implements BackendInterface {\n  puzzlesDB: PuzzlesDB;\n  saveDbFunc: (db: MockDB) => Promise<void>;\n  nextRoomUid: number;\n  db: MockDB;\n  /** If an update was made to the database, marks it for saving. */\n  isDirty: boolean;\n  /**\n   * Whether there is already a job running to save the mock DB\n   * to persistent storage.\n   */\n  isSaving: boolean;\n\n  constructor(\n    puzzlesDB: PuzzlesDB,\n    cardsDB: CardsDB,\n    masteriesDB: MasteriesDB,\n    savedDB: MockDB | null,\n    saveDbFunc: (db: MockDB) => Promise<void>,\n    initUnlocks?: boolean\n  ) {\n    this.puzzlesDB = puzzlesDB;\n    this.saveDbFunc = saveDbFunc;\n    this.nextRoomUid = 0;\n\n    this.db =\n      savedDB === null || savedDB.version < SCHEMA_VERSION\n        ? makeBootstrapDB(\n            puzzlesDB,\n            cardsDB,\n            masteriesDB,\n            initUnlocks ?? false,\n            false\n          )\n        : savedDB;\n\n    this.isDirty = false;\n    this.isSaving = false;\n  }\n\n  private genGameServerId() {\n    const gameServerId = `gameServer_${this.db.nextGameServerId}`;\n    this.db.nextGameServerId++;\n    this.isDirty = true;\n    return gameServerId;\n  }\n\n  async getInitData(): Promise<GetInitDataBackendResp> {\n    return {\n      gameServerId: this.genGameServerId(),\n      teams: Object.fromEntries(\n        await Promise.all(\n          Object.keys(this.db.teams).map((teamId) =>\n            (async () => [teamId, await this.getInitTeamData(teamId)])()\n          )\n        )\n      ),\n      factionHistory: {},\n      maxGuessesPerPuzzle: MAX_GUESSES_PER_PUZZLE,\n      huntStartTime: new Date(2023, 5, 1).getTime(),\n      huntEndTime: new Date(2023, 12, 1).getTime(),\n      notifsNextIndex: this.db.notifs.length,\n      errata: {},\n      unclaimedHints: 0,\n    };\n  }\n\n  async getInitTeamData(teamId: string): Promise<GetInitTeamDataBackendResp> {\n    const existingTeamData = this.db.teams[teamId];\n    if (existingTeamData === undefined) {\n      // Dev only, to allow solvers to arbitrarily create new teams.\n      // Do not implement this in Django.\n      console.log(`creating new team ${teamId}`);\n      this.db.teams[teamId] = {\n        displayName: teamId,\n        isInactive: false,\n        isHidden: false,\n        faction: null,\n        factionScoreContributions: makeInitFactionScores(),\n        answerSubmissions: {},\n        viewTimes: {},\n        unlocks: {},\n        cardUnlocks: {},\n        decks: [],\n        masteryTree: null,\n        preferredDecks: {},\n        puzzleSelections: {},\n        checkpoints: {},\n        blockedTeams: {},\n        isInRing: false,\n      };\n    }\n\n    const {\n      displayName,\n      isInactive,\n      isHidden,\n      faction,\n      factionScoreContributions,\n      answerSubmissions,\n      viewTimes,\n      unlocks,\n      cardUnlocks,\n      decks,\n      masteryTree,\n      preferredDecks,\n      puzzleSelections,\n      checkpoints,\n      blockedTeams,\n      isInRing,\n    } = this.db.teams[teamId];\n\n    const numWrongGuesses: { [puzName: string]: number } = {};\n    for (const [puzName, submissions] of Object.entries(answerSubmissions)) {\n      const numWrongGuessesForPuzzle = submissions.filter(\n        ({ isCorrect }) => !isCorrect\n      ).length;\n      if (numWrongGuessesForPuzzle > 0)\n        numWrongGuesses[puzName] = numWrongGuessesForPuzzle;\n    }\n\n    const speedrunTimes: { [puzName: string]: number } = {};\n    const rooms: { [puzName: string]: BackendRoom } = {};\n    for (const [roomId, room] of Object.entries(this.db.rooms)) {\n      const { puzName, hostPuzName, gameEndInfo, p1TeamId, p2TeamId } = room;\n      if (\n        !(\n          (p1TeamId !== undefined && room.p1TeamId === teamId) ||\n          (p2TeamId !== undefined && room.p2TeamId === teamId)\n        )\n      )\n        continue;\n      rooms[hostPuzName] = room;\n      if (gameEndInfo === undefined) continue;\n      const { isSolved, totalTime } = gameEndInfo;\n      if (!gameEndInfo.isSolved) continue;\n      if (\n        speedrunTimes[puzName] === undefined ||\n        totalTime < speedrunTimes[puzName]\n      )\n        speedrunTimes[puzName] = totalTime;\n    }\n\n    const solveTimes = Object.fromEntries(\n      Object.entries(answerSubmissions).flatMap(([puzName, puzSubmissions]) => {\n        const correctSubmissions = puzSubmissions.filter(\n          ({ isCorrect }) => isCorrect\n        );\n        if (correctSubmissions.length === 0) return [];\n        return [[puzName, correctSubmissions[0].timestamp]];\n      })\n    );\n\n    return {\n      userId: teamId,\n      displayName,\n      isInactive,\n      isHidden,\n      faction,\n      factionScoreContributions,\n      members: [],\n      rooms,\n      views: Object.keys(viewTimes),\n      cardUnlocks: Object.fromEntries(\n        Object.values(cardUnlocks).map(({ cardName, puzName }) => [\n          cardName,\n          puzName,\n        ])\n      ),\n      unlockTimes: Object.fromEntries(\n        Object.values(unlocks).map(({ puzName, timestamp }) => [\n          puzName,\n          timestamp,\n        ])\n      ),\n      solveTimes,\n      speedrunTimes,\n      numWrongGuesses,\n      decks,\n      masteryTree,\n      preferredDecks,\n      puzzleSelections,\n      checkpoints,\n      blockedTeams,\n      isInRing,\n      backendOwned: {\n        hintsTotal: 0,\n        hintsUsed: [],\n        extraGuesses: {},\n      },\n    };\n  }\n\n  private getTeamData(teamId: string): MockDBTeam {\n    if (this.db.teams[teamId] === undefined)\n      throw new Error(`unknown team ${teamId}`);\n    return this.db.teams[teamId];\n  }\n\n  async syncData(req: SyncDataBackendReq) {\n    const { rooms, teamState } = req;\n    for (const [teamId, teamUpdates] of Object.entries(teamState ?? {})) {\n      const {\n        isInactive,\n        isHidden,\n        displayName,\n        faction,\n        factionScoreContributions,\n        decks,\n        masteryTree,\n        answerSubmissions,\n        unlocks,\n        cardUnlocks,\n        viewTimes,\n        preferredDecks,\n        puzzleSelections,\n        checkpoints,\n        blockedTeams,\n        isInRing,\n      } = teamUpdates;\n      const teamData = this.getTeamData(teamId);\n      if (isInactive !== undefined) {\n        teamData.isInactive = isInactive;\n        this.isDirty = true;\n      }\n      if (isHidden !== undefined) {\n        teamData.isHidden = isHidden;\n        this.isDirty = true;\n      }\n      if (displayName !== undefined) {\n        teamData.displayName = displayName;\n        this.isDirty = true;\n      }\n      if (faction !== undefined) {\n        teamData.faction = faction;\n        this.isDirty = true;\n      }\n      for (const [kFaction, contribution] of Object.entries(\n        factionScoreContributions ?? {}\n      )) {\n        const faction = kFaction as Faction;\n        teamData.factionScoreContributions[faction] = contribution;\n      }\n      for (const deck of Object.values(decks ?? {})) {\n        const { slot } = deck;\n        const teamDecks = teamData.decks;\n        const existingIndex = teamDecks.findIndex(\n          ({ slot: existingSlot }) => existingSlot === slot\n        );\n        if (existingIndex === -1) {\n          teamDecks.push(deck);\n        } else {\n          teamDecks[existingIndex] = deck;\n        }\n        this.isDirty = true;\n      }\n      if (masteryTree !== undefined) {\n        teamData.masteryTree = masteryTree;\n        this.isDirty = true;\n      }\n      for (const [puzName, puzSubmissions] of Object.entries(\n        answerSubmissions ?? {}\n      )) {\n        if (puzSubmissions === null) {\n          // Remove only the correct answer submissions.\n          teamData.answerSubmissions[puzName] = teamData.answerSubmissions[\n            puzName\n          ].filter((submission) => !submission.isCorrect);\n        } else {\n          teamData.answerSubmissions[puzName] ??= [];\n          for (const submission of Object.values(puzSubmissions)) {\n            teamData.answerSubmissions[puzName].push(submission);\n          }\n        }\n        this.isDirty = true;\n      }\n      for (const [puzName, unlock] of Object.entries(unlocks ?? {})) {\n        if (unlock === null) delete teamData.unlocks[puzName];\n        else teamData.unlocks[puzName] = unlock;\n        this.isDirty = true;\n      }\n      for (const [cardName, cardUnlock] of Object.entries(cardUnlocks ?? {})) {\n        if (cardUnlock === null) delete teamData.cardUnlocks[cardName];\n        else teamData.cardUnlocks[cardName] = cardUnlock;\n        this.isDirty = true;\n      }\n      for (const [puzName, viewTime] of Object.entries(viewTimes ?? {})) {\n        teamData.viewTimes[puzName] = viewTime;\n        this.isDirty = true;\n      }\n      for (const [puzName, slot] of Object.entries(preferredDecks ?? {})) {\n        teamData.preferredDecks[puzName] = slot;\n        this.isDirty = true;\n      }\n      for (const [puzName, selection] of Object.entries(\n        puzzleSelections ?? {}\n      )) {\n        if (selection === null) delete teamData.puzzleSelections[puzName];\n        else teamData.puzzleSelections[puzName] = selection;\n        this.isDirty = true;\n      }\n      for (const [puzName, puzCheckpoints] of Object.entries(\n        checkpoints ?? {}\n      )) {\n        teamData.checkpoints[puzName] = puzCheckpoints;\n        this.isDirty = true;\n      }\n      for (const [targetTeamId, isBlocked] of Object.entries(\n        blockedTeams ?? {}\n      )) {\n        if (!isBlocked) delete teamData.blockedTeams[targetTeamId];\n        else teamData.blockedTeams[targetTeamId] = true;\n        this.isDirty = true;\n      }\n      if (isInRing !== undefined) {\n        teamData.isInRing = isInRing;\n        this.isDirty = true;\n      }\n    }\n    for (const [roomId, room] of Object.entries(rooms ?? {})) {\n      const { p1TeamId, p2TeamId, puzName } = room;\n      this.db.rooms[roomId] = {\n        ...(this.db.rooms[roomId] ?? {}),\n        ...room,\n      };\n      this.isDirty = true;\n    }\n\n    if (this.isDirty && !this.isSaving) {\n      this.isDirty = false;\n      this.isSaving = true;\n      await this.saveDbFunc(this.db).finally(() => {\n        this.isSaving = false;\n      });\n    }\n\n    return {};\n  }\n\n  async checkAnswer(\n    req: CheckAnswerBackendReq\n  ): Promise<CheckAnswerBackendResp> {\n    const { teamId, puzName, answer } = req;\n    const puzSpec = this.puzzlesDB.puzzles.get(puzName);\n    if (puzSpec === undefined) throw new Error(`unknown puzName ${puzName}`);\n    if (puzSpec.answer === null)\n      throw new Error(`no answer exists for ${puzName}`);\n    const normalizedAnswer = normalizeAnswer(answer);\n    const isCorrect = normalizedAnswer === normalizeAnswer(puzSpec.answer);\n\n    // post-hunt puzzle messages\n    if (puzName === \"animal_shelter\" && normalizedAnswer === \"RESIDENCE\") {\n      return {\n        type: CheckAnswerBackendRespType.PUZZLE_MESSAGES,\n        messages: [\"Almost! Check your last letter.\"],\n      };\n    }\n    if (puzName === \"mastery_tree\" && normalizedAnswer === \"CAPTAINPI\") {\n      return {\n        type: CheckAnswerBackendRespType.PUZZLE_MESSAGES,\n        messages: [\"Almost!\"],\n      };\n    }\n\n    return {\n      type: CheckAnswerBackendRespType.SUCCESS,\n      submittedAnswer: normalizedAnswer,\n      isCorrect,\n    };\n  }\n}\n","import {\n  HuntJwtPayload,\n  AuthenticationInterface,\n} from \"./AuthenticationInterface\";\n\nexport class MockAuthenticationInterface implements AuthenticationInterface {\n  verify(jwt: string): HuntJwtPayload | null {\n    // In mock authentication, just use the payload directly as the JWT.\n    return JSON.parse(jwt) as HuntJwtPayload;\n  }\n}\n","import localforage from \"localforage\";\nimport ALL_PUZZLES from \"engine/puzzles/all-puzzles-client\";\nimport ALL_CARDS from \"engine/cards/all-cards-client\";\nimport ALL_MASTERIES from \"engine/puzzles/all-masteries-client\";\nimport ALL_KEYFRAMES from \"engine/puzzles/all-keyframes-client\";\nimport { PuzzlesDB } from \"engine/puzzles/puzzle-data\";\nimport { makeCardsDB } from \"engine/cards/CardsDB\";\nimport { makeMasteriesDB } from \"engine/puzzles/mastery-data\";\nimport { GameServer } from \"game-server/GameServer\";\nimport { MockBackendInterface } from \"game-server/backend-interface/MockBackendInterface\";\nimport { MockAuthenticationInterface } from \"game-server/authentication-interface/MockAuthenticationInterface\";\n\nexport type MockServerOpts = {\n  dumpBackendRequests?: boolean;\n};\n\n/** The key that the mock DB is stored into in local storage. */\nconst LOCAL_FORAGE_KEY = \"__game_mockdb\";\n\nlet gameServer: GameServer | undefined = undefined;\nlet isForceResetPending = false;\n\nconst makeMockServer = async (\n  opts: MockServerOpts,\n  forceReset?: boolean\n): Promise<GameServer> => {\n  forceReset ??= false;\n\n  if (gameServer === undefined || (forceReset && !isForceResetPending)) {\n    // No localStorage in worker context, so we use IndexedDB.\n    localforage.config({\n      driver: localforage.INDEXEDDB,\n    });\n\n    if (forceReset) {\n      isForceResetPending = true;\n      await localforage.clear();\n    }\n\n    const prevGameServer = gameServer;\n\n    const puzzlesDB = new PuzzlesDB(ALL_PUZZLES);\n    const cardsDB = makeCardsDB(ALL_CARDS);\n    const masteriesDB = makeMasteriesDB(ALL_MASTERIES);\n    gameServer = new GameServer(\n      puzzlesDB,\n      cardsDB,\n      masteriesDB,\n      ALL_KEYFRAMES,\n      {\n        backend: new MockBackendInterface(\n          puzzlesDB,\n          cardsDB,\n          masteriesDB,\n          await localforage.getItem(LOCAL_FORAGE_KEY),\n          async (db) => {\n            await localforage.setItem(LOCAL_FORAGE_KEY, db);\n          },\n          !forceReset\n        ),\n        // We'll be dumping WS messages from the client side,\n        // so don't dump them from the server side.\n        dumpWsMessages: false,\n        dumpBackendRequests: opts.dumpBackendRequests ?? false,\n        periodicSyncInterval: 200, // 0.2s\n        authInterface: new MockAuthenticationInterface(),\n        // @ts-expect-error: Pretend all WSReqs are valid to skip typia\n        // in offline mode.\n        parseWSReq: (req) => true,\n      }\n    );\n    await gameServer.initAsync();\n\n    if (prevGameServer !== undefined) {\n      prevGameServer.teardown();\n    }\n\n    if (forceReset) isForceResetPending = false;\n  }\n  return gameServer;\n};\nexport default makeMockServer;\n","import {\n  SharedWorkerReq,\n  SharedWorkerReqType,\n  SharedWorkerRespType,\n} from \"game-server/server-interface/SharedWorkerInterface\";\nimport makeMockServer, { MockServerOpts } from \"makeMockServer\";\n\nclass SharedWorkerPortController {\n  port: MessagePort;\n  handleMsg?: (msg: string) => void;\n  removeClient?: () => void;\n\n  constructor(port: MessagePort) {\n    this.port = port;\n  }\n\n  init() {\n    this.port.onmessage = (msg) => {\n      this.handlePortMsg(msg).catch((err) => console.error);\n    };\n    this.port.start();\n  }\n\n  async handleInit(\n    mockServerOpts: MockServerOpts,\n    connUid?: string,\n    resetServer?: boolean\n  ) {\n    if (resetServer ?? false) {\n      // Resetting the server will cause the old one to disconnect us,\n      // resulting in another INIT call. We'll rely on that INIT call\n      // to set up the connection.\n      await makeMockServer(mockServerOpts, true);\n      return;\n    }\n\n    // This creates a mock server singleton, or returns the existing one.\n    const gameServer = await makeMockServer(mockServerOpts);\n\n    const clientInterface = gameServer.addClient(\n      {\n        send: (msg) => {\n          this.port.postMessage({\n            type: SharedWorkerRespType.RESP,\n            msg,\n          });\n        },\n        close: () => {\n          this.port.postMessage({\n            type: SharedWorkerRespType.CLOSE,\n          });\n        },\n      },\n      connUid\n    );\n\n    this.handleMsg = clientInterface.handleMsg;\n    this.removeClient = clientInterface.removeClient;\n\n    this.port.postMessage({\n      type: SharedWorkerRespType.INIT_ACK,\n    });\n  }\n\n  async handlePortMsg({ data }: MessageEvent<SharedWorkerReq>) {\n    switch (data.type) {\n      case SharedWorkerReqType.INIT: {\n        await this.handleInit(\n          data.mockServerOpts,\n          data.connUid,\n          data.resetServer\n        );\n        break;\n      }\n      case SharedWorkerReqType.HANDLE_MSG: {\n        this.handleMsg?.(data.msg);\n        break;\n      }\n      case SharedWorkerReqType.REMOVE_CLIENT: {\n        this.removeClient?.();\n        break;\n      }\n    }\n  }\n}\n\n// @ts-expect-error: global types are hard\nonconnect = (e: MessageEvent) => {\n  const portController = new SharedWorkerPortController(e.ports[0]);\n  portController.init();\n};\n"],"names":["SharedWorkerReqType","SharedWorkerRespType","f","module","e","t","n","r","s","o","u","a","require","i","l","_dereq_","exports","global","Mutation","scheduleDrain","called","observer","nextTick","element","channel","scriptEl","draining","queue","oldQueue","len","immediate","task","INTERNAL","handlers","REJECTED","FULFILLED","PENDING","Promise","resolver","safelyResolveThenable","onRejected","onFulfilled","promise","unwrap","QueueItem","value","func","returnValue","self","result","tryCatch","getThen","thenable","error","obj","then","onError","onSuccess","tryToUnwrap","out","resolve","reject","reason","all","iterable","values","resolved","allResolver","resolveFromAll","outValue","race","response","_typeof","_classCallCheck","instance","Constructor","getIDB","idb","isIndexedDBValid","isSafari","hasFetch","createBlob","parts","properties","Builder","builder","Promise$1","executeCallback","callback","executeTwoCallbacks","errorCallback","normalizeKey","key","getCallback","DETECT_BLOB_SUPPORT_STORE","supportsBlobs","dbContexts","toString","READ_ONLY","READ_WRITE","_binStringToArrayBuffer","bin","length","buf","arr","_checkBlobSupportWithoutCaching","txn","blob","matchedChrome","matchedEdge","_checkBlobSupport","_deferReadiness","dbInfo","dbContext","deferredOperation","_advanceReadiness","_rejectReadiness","err","_getConnection","upgradeNeeded","createDbContext","dbArgs","openreq","db","ex","_getOriginalConnection","_getUpgradedConnection","_isUpgradeNeeded","defaultVersion","isNewStore","isDowngrade","isUpgrade","incVersion","_encodeBlob","reader","base64","_decodeBlob","encodedBlob","arrayBuff","_isEncodedBlob","_fullyReady","_tryReconnect","forages","forage","createTransaction","mode","retries","tx","_initStorage","options","initPromises","ignoreErrors","j","k","getItem","transaction","store","req","iterate","iterator","iterationNumber","cursor","setItem","blobSupport","removeItem","clear","advanced","keys","dropInstance","currentConfig","isCurrentDb","dbPromise","newVersion","dropObjectPromise","_forage2","dropDBPromise","_forage","asyncStorage","isWebSQLValid","BASE_CHARS","BLOB_TYPE_PREFIX","BLOB_TYPE_PREFIX_REGEX","SERIALIZED_MARKER","SERIALIZED_MARKER_LENGTH","TYPE_ARRAYBUFFER","TYPE_BLOB","TYPE_INT8ARRAY","TYPE_UINT8ARRAY","TYPE_UINT8CLAMPEDARRAY","TYPE_INT16ARRAY","TYPE_INT32ARRAY","TYPE_UINT16ARRAY","TYPE_UINT32ARRAY","TYPE_FLOAT32ARRAY","TYPE_FLOAT64ARRAY","TYPE_SERIALIZED_MARKER_LENGTH","toString$1","stringToBuffer","serializedString","bufferLength","p","encoded1","encoded2","encoded3","encoded4","buffer","bytes","bufferToString","base64String","serialize","valueType","marker","fileReader","str","deserialize","type","blobType","matcher","localforageSerializer","createDbTable","_initStorage$1","dbInfoPromise","tryExecuteSql","sqlStatement","args","results","getItem$1","iterate$1","rows","item","_setItem","retriesLeft","originalValue","sqlError","setItem$1","removeItem$1","clear$1","length$1","key$1","keys$1","getAllStoreNames","storeNames","dropInstance$1","operationInfo","dropTable","storeName","operations","webSQLStorage","isLocalStorageValid","_getKeyPrefix","defaultConfig","keyPrefix","checkIfLocalStorageThrows","localStorageTestKey","_isLocalStorageUsable","_initStorage$2","clear$2","getItem$2","iterate$2","keyPrefixLength","key$2","keys$2","itemKey","length$2","removeItem$2","setItem$2","dropInstance$2","localStorageWrapper","sameValue","x","y","includes","array","searchElement","isArray","arg","DefinedDrivers","DriverSupport","DefaultDrivers","DefaultDriverOrder","OptionalDriverMethods","LibraryMethods","DefaultConfig","callWhenReady","localForageInstance","libraryMethod","_args","extend","_key","LocalForage","driverTypeKey","driver","driverName","driverObject","complianceError","driverMethods","driverMethodName","isRequired","configureMissingMethods","methodNotImplementedFactory","methodName","_i","_len","optionalDriverMethod","setDriverSupport","support","getDriverPromise","serializerPromise","drivers","supportedDrivers","setDriverToConfig","extendSelfWithDriver","initDriver","currentDriverIndex","driverPromiseLoop","oldDriverSetDone","libraryMethodsAndProperties","localforage_js","allPuzzlesJson","ALL_PUZZLES","allCardsJson","ALL_CARDS","allMasteriesJson","ALL_MASTERIES","allKeyframesJson","ALL_KEYFRAMES","global$1","lookup","revLookup","Arr","inited","init","code","toByteArray","b64","tmp","placeHolders","L","tripletToBase64","num","encodeChunk","uint8","start","end","output","fromByteArray","extraBytes","maxChunkLength","len2","read","offset","isLE","mLen","nBytes","m","eLen","eMax","eBias","nBits","d","write","c","rt","INSPECT_MAX_BYTES","Buffer","kMaxLength","createBuffer","that","encodingOrOffset","allocUnsafe","from","fromArrayBuffer","fromString","fromObject","assertSize","size","alloc","fill","encoding","checked","string","byteLength","actual","fromArrayLike","byteOffset","internalIsBuffer","isnan","isBuffer","b","list","pos","loweredCase","utf8ToBytes","base64ToBytes","slowToString","hexSlice","utf8Slice","asciiSlice","latin1Slice","base64Slice","utf16leSlice","swap","max","target","thisStart","thisEnd","thisCopy","targetCopy","bidirectionalIndexOf","val","dir","arrayIndexOf","indexSize","arrLength","valLength","foundIndex","found","hexWrite","remaining","strLen","parsed","utf8Write","blitBuffer","asciiWrite","asciiToBytes","latin1Write","base64Write","ucs2Write","utf16leToBytes","res","firstByte","codePoint","bytesPerSequence","secondByte","thirdByte","fourthByte","tempCodePoint","decodeCodePointsArray","MAX_ARGUMENTS_LENGTH","codePoints","ret","toHex","newBuf","sliceLen","checkOffset","ext","noAssert","mul","checkInt","min","maxBytes","objectWriteUInt16","littleEndian","objectWriteUInt32","limit","sub","checkIEEE754","writeFloat","writeDouble","targetStart","INVALID_BASE64_RE","base64clean","stringtrim","units","leadSurrogate","byteArray","hi","lo","src","dst","isFastBuffer","isSlowBuffer","PUZ_NAME_PVP","PUZ_NAME_INTRO","PUZ_NAME_TUTORIAL_1","PUZ_NAME_FINAL_BATTLE","PUZ_NAME_MASTERY_TREE","PUZ_NAME_MASTERY_TREE_PROMPT","PUZ_NAME_MYOSB","PUZ_NAME_FIRST_ANSWER","PUZ_NAME_FIRST_LEGENDARY","PUZ_NAME_PRE_FINAL_BATTLE","PUZ_NAME_POST_FINAL_BATTLE","BATTLE_GROUP_NAME_MASTERY_TREE","BATTLE_GROUP_NAME_INTRA_PVP","BATTLE_GROUP_NAME_INSTANCER","BATTLE_GROUP_NAME_TUTORIAL","BATTLE_GROUP_NAME_MOONICK","PUZ_NAMES_MOONICK_FOR_SPEEDRUN","WEIRD_BATTLE_GROUPS","PVP_TURN_TIME_LIMIT","NUM_LEGENDARIES","getPrimaryPuzName","puzName","isInstanceable","hasAnswer","battleGroupName","groupNumPuzzles","isUsedForSolveCount","isCutscene","isUsedForGlobalSpeedrunTime","PuzzlesDB","allPuzzles","__publicField","puzzles","battleGroups","puzData","battleGroup","puzSpec","answer","numPuzzles","puz1","puz2","MYOSB_DATA","makeCardsDB","allCards","cardsDB","cardData","REPUTATION_BOOST_MASTERY_ID","SCRY_TOP_CARD_MASTERY_ID","PRIORITY_CARD_MASTERY_ID","FACTIONS_MASTERY_ID","DRAW_CARD_MASTERY_ID","PVP_MASTERY_ID","SOLVE_COUNTS_MASTERY_ID","makeMasteriesDB","masteriesData","masteriesDB","mastery","util","assertIs","_arg","assertNever","_x","items","validKeys","filtered","object","checker","joinValues","separator","_","objectUtil","first","second","ZodParsedType","getParsedType","data","ZodIssueCode","quotelessJson","ZodError","issues","subs","actualProto","_mapper","mapper","issue","fieldErrors","processError","curr","el","formErrors","errorMap","_ctx","message","overrideErrorMap","setErrorMap","map","getErrorMap","makeIssue","params","path","errorMaps","issueData","fullPath","fullIssue","errorMessage","maps","EMPTY_PATH","addIssueToContext","ctx","ParseStatus","status","arrayValue","INVALID","pairs","syncPairs","pair","finalObject","DIRTY","OK","isAborted","isDirty","isValid","isAsync","errorUtil","ParseInputLazyPath","parent","handleResult","processCreateParams","invalid_type_error","required_error","description","iss","ZodType","def","input","_a","maybeAsyncResult","check","getIssueProperties","setError","refinementData","refinement","ZodEffects","ZodFirstPartyTypeKind","ZodOptional","ZodNullable","ZodArray","ZodPromise","option","ZodUnion","incoming","ZodIntersection","transform","defaultValueFunc","ZodDefault","ZodBranded","catchValueFunc","ZodCatch","This","ZodPipeline","ZodReadonly","cuidRegex","cuid2Regex","ulidRegex","uuidRegex","emailRegex","_emojiRegex","emojiRegex","ipv4Regex","ipv6Regex","datetimeRegex","isValidIP","ip","version","ZodString","tooBig","tooSmall","regex","validation","minLength","maxLength","ch","floatSafeRemainder","step","valDecCount","stepDecCount","decCount","valInt","stepInt","ZodNumber","kind","inclusive","ZodBigInt","ZodBoolean","ZodDate","minDate","maxDate","ZodSymbol","ZodUndefined","ZodNull","ZodAny","ZodUnknown","ZodNever","ZodVoid","schema","deepPartialify","ZodObject","newShape","fieldSchema","ZodTuple","shape","shapeKeys","extraKeys","keyValidator","unknownKeys","catchall","_b","_c","_d","defaultError","augmentation","merging","index","mask","newField","createZodEnum","handleResults","unionErrors","childCtx","dirty","types","getDiscriminator","ZodLazy","ZodLiteral","ZodEnum","ZodNativeEnum","ZodDiscriminatedUnion","discriminator","discriminatorValue","optionsMap","discriminatorValues","mergeValues","aType","bType","bKeys","sharedKeys","newObj","sharedValue","newArray","itemA","itemB","handleParsed","parsedLeft","parsedRight","merged","left","right","itemIndex","rest","schemas","ZodRecord","keyType","third","ZodMap","finalMap","ZodSet","finalizeSet","elements","parsedSet","minSize","maxSize","ZodFunction","makeArgsIssue","makeReturnsIssue","returns","fn","me","parsedArgs","parsedReturns","returnType","getter","expectedValues","enumValues","opt","nativeEnumValues","promisified","effect","checkCtx","processed","executeRefinement","acc","inner","base","preprocess","newCtx","ZodNaN","BRAND","inResult","custom","fatal","_fatal","p2","late","instanceOfType","cls","stringType","numberType","nanType","bigIntType","booleanType","dateType","symbolType","undefinedType","nullType","anyType","unknownType","neverType","voidType","arrayType","objectType","strictObjectType","unionType","discriminatedUnionType","intersectionType","tupleType","recordType","mapType","setType","functionType","lazyType","literalType","enumType","nativeEnumType","promiseType","effectsType","optionalType","nullableType","preprocessType","pipelineType","z","WSErrorCode","WSReqType","WSRespType","HuntNotificationType","DECK_DISPLAY_NAME_MAX_LENGTH","NUM_DECK_SLOTS","createNewDeck","slot","cloneDeck","deck","getDeckSize","sz","cardName","deckToCardList","cardList","cardCount","applyDeckUpdate","upd","displayName","cards","priorityCard","deletePriorityCard","AnswerOrientation","AnswerOrientationZod","AnswerPlacementZod","PlaceMasteryTreeStepZod","ResetMasteryTreeStepZod","DeleteMasteryTreeStepZod","normalizeAnswer","applyMasteryTreeUpdate","masteryTree","reset","popAnswers","newPlacements","masteriesListOverride","placement","getConnectedPlacements","MASTERY_GRID_WIDTH","MASTERY_GRID_HEIGHT","START_X","START_Y","makeEmptyMasteryGrid","grid","row","isPointInGrid","charAtPointOrNull","getPlacementCharIndexAt","orientation","getPlacementCharAt","isPlacementCharValid","charIndex","char","ox","oy","tryPlaceAnswerOnMasteryGrid","intersectsStart","placementsIntersect","p1","x1","y1","answer1","x2","y2","answer2","placements","used","lastLayer","connectedPlacements","nextLayer","lastLayerPlacement","getMasteriesFromMasteryTree","allConnectedPlacements","masteryId","mastery1","mastery2","makeMasteryTreeGrid","isMasteryTreeStepValid","availableAnswers","masteryTreeStepToUpdate","HEALTH_MONITORING_INTERVAL_MS","CURSOR_EVENTS_MONITORING_INTERVAL_MS","DirtyStateType","mergeServerDirtyStateUpdate","upd1","upd2","teamId","teamUpds2","teamUpds1","deckUpd","roomId","roomUpd","checkpoints","answerUpd","updateServerDirtyState","state","ServerDirtyStateTracker","getIntervalMetricsSummaryString","metrics","lastEventTimeStr","speedrunTimeToString","IntervalMetrics","intervalLength","doRecord","currTime","prevIntervalNum","currIntervalNum","TeamMetricsTracker","server","upds","mergeBigBoardTeamUpdate","puzUpds","isUnlocked","selectedPuzName","isEnabled","updateBigBoardTeamState","numHintsTotal","unlocks","cardUnlocks","selectedPuzzles","enabledMasteries","BigBoardStateTracker","teamState","existingUpd","teamUpds","puzState","solveTime","numHintsUsed","numWrongGuesses","numMembers","teamSummaryUpdateToTeamNameDisplayUpdate","faction","factionScoreContribution","hasReputationBoost","mergeTeamSummaryUpdate","updateTeamSummary","TeamListStateTracker","GlobalUpdateType","hasPvP","isPvPGameActive","numSolves","completionTime","lastSolveTime","SPEEDRUN_LEADERBOARD_SUMMARY_LENGTH","GlobalUpdatesScopeType","ServerGlobalUpdatesScopeZod","ServerHealthGlobalUpdatesScopeZod","BigBoardGlobalUpdatesScopeZod","PvPGlobalUpdatesScopeZod","TeamListGlobalUpdatesScopeZod","TeamMembersGlobalUpdatesScopeZod","FactionHistoryUpdatesScopeZod","TeamGlobalUpdatesScopeZod","TeamFishPuzzleGlobalUpdatesScopeZod","TeamBattleGlobalUpdatesScopeZod","TeamDecksGlobalUpdatesScopeZod","TeamMasteryTreeGlobalUpdatesScopeZod","TeamPvPGlobalUpdatesScopeZod","TeamSpeedrunLeaderboardSummaryUpdatesScopeZod","GlobalStateBattleRoomStatus","speedrunTime","omitMs","hours","minutes","seconds","ms","omitHours","omitMinutes","hoursStr","minutesStr","secondsStr","msStr","RankedLeaderboard","getKeyFunc","compareFunc","sortedList","objKey","oldIndex","listObj","warnOnRegress","removeRes","oldObj","newIndex","Player","PlayerZod","opponentOf","player","SlotZod","areSlotsEqual","slot1","slot2","areSlotsAdjacent","getSlotsEuclideanDistance","getAllSlots","columns","slots","GamePhase","GAME_PHASE_ORDER","MAX_MANUAL_SAVES","isCheckpointSlotValid","makeInitPlayerState","gameSpec","playerState","makeInitGameState","gameState","ColorSymbol","PureColorZod","GemColorZod","getDefaultCreateGemsColors","cardColor","CardType","AbilityType","AbilityTypeZod","EffectOptType","PermanentEffectOptZod","SlotEffectOptZod","OneChoiceEffectOptZod","EffectOptZod","StepType","RemoveStepZod","SummonStepZod","AttackStepZod","CreateGemsStepZod","MoveStepZod","DrawStepZod","ActivateAbilityStepZod","EndTurnStepZod","CreateCheckpointStepZod","AdvanceKeyframeStepZod","stepToPlayer","Role","canRoleControlPlayer","role","UpdateType","BackendInterfaceController","opts","resp","isCorrect","LoseReason","makeBattleSolveAnswerSubmission","timestamp","BackendNotificationDataType","CheckAnswerBackendRespType","BackendSyncReqController","serverConfig","syncType","onDirtyStateChange","SyncTracker","isInactive","isHidden","factionScoreContributions","decks","answerSubmissions","viewTimes","preferredDecks","puzzleSelections","blockedTeams","isInRing","cutsceneChoices","puzSubmissions","kFaction","pendingPuzSubmissions","submissions","unlock","pendingUnlock","cardUnlock","pendingCardUnlock","pendingSlot","selection","pendingSelection","states","pendingStates","pendingState","isBlocked","pendingIsBlocked","snapshot","SyncLoopController","runSyncAsync","numCallbacks","isLoopComplete","SyncObjectType","timeNow","success","TeamBattleController","selectedDeckSlot","dirtyState","puzzle","conn","errata","erratumId","text","published","subscriptions","room","playerCandidates","teamData","membersToKick","roomMember","spectateTeamId","players","reuseDeck","allowInvalidDecks","inspector","deckPlayers","deckSelection","deckSelections","prevMembers","prevRole","roomStatus","turnNumber","engine","checkpoint","serialized","serializedCheckpoint","deckSlot","isSamePuzzle","newRoom","oldRoomId","gainedScore","unjoinedMember","defaultRole","restoring","battleGroupData","failedChecks","roomEntry","hostPuzName","savedRoom","existingRoomTracker","PVP_REQUEST_EXPIRY_TIME_MS","isPvPRequestExpired","pvpReq","expiryTime","TeamPvPController","opponent","startTurnTime","targetTeamId","targetTeamController","battleController","targetController","existingReq","commitDeckSelectionErr","autoAccept","makePvPRequestErr","acceptPvPRequestErr","existingOutgoingReq","existingIncomingReq","ring","indexInRing","devKnobs","forceP1","targetBattleController","selfDeckSelection","oppDeckSelection","isP1","broadcast","fromTeamId","toTeamId","fromController","toController","PvPLobbyController","Check","CounterType","getCounterExplanation","counter","explanation","extractOpt","effectOpts","effectOpt","extractOptPermanent","makePermanentOptForm","validate","userPrompt","makeSlotOptForm","makeOneChoiceOptForm","choices","plainAbilityActivationValidator","permanent","abilityType","plainAttackValidator","validateEffectOpt","form","boarAdjustAttackChecks","attacker","defender","COMMON_CARD_EFFECTS_SHARED","KERO_ENABLE_LAYERS","KERO_LAYERS_ORDER","layers","layer","isCardValidForDeckbuilding","validateDeck","maxNumCards","maxNumLegendaries","deckSize","getDeckUniqueLegendaries","count","isDeckUpdateValid","effectsShared","deckbuildingLimit","disableDeckbuildingLimit","TeamFishPuzzleController","numExtraGuesses","onDone","submittedAnswer","submission","components","ansString","possible","letter","poss","DeckController","deckUpdCards","TeamMasteryTreeController","masteryTreeUpd","teamController","origMasteries","newMasteries","masteriesToEnable","masteriesToDisable","changedMasteries","pvpController","enabledMasteriesDiff","puzzlesDB","TeamController","initTeamData","userId","members","views","unlockTimes","solveTimes","speedrunTimes","backendOwned","numWrongGuessesForPuzzle","numExtraGuessesForPuzzle","rooms","existingController","deckController","isInstancer","controller","unlockTime","order","mapPos","isLegendary","preBattleDialogue","postBattleDialogue","battleGroupState","isTempBlocked","hintsUsedMap","masteryTreeController","restart","teamIds","syncController","packet","didSyncSucceed","submissionSolves","correctSubmission","answers","battleGroupUnlocks","solve","puzzlesToLock","instancers","firstSubpuzzle","instancerPuzName","allUnlocks","effectText","syncLoopController","solvesToDeleteSet","unlocksToDeleteSet","firstPacket","answerSubmission","genPacket","combinedSolves","addBattleSolve","solveTriggersPerBattleGroup","triggersBattleGroupSolve","numSolveTriggers","solveReq","combinedUnlocks","addUnlock","combinedCardUnlocks","progressPerUnlockGroup","cardUnlockGroups","unlockMult","dstUnlockGroupId","cardUnlockGroupId","unlockReq","srcUnlockGroupId","existingUnlock","overrideSolved","overrideUnlocked","overrideCardUnlocked","overrideMasteriesList","overrideDecks","overrideMasteryTree","isSolved","teamConns","changes","change","changedContributions","contribution","teamFaction","prevBestTime","times","time","cur","UIElement","Speaker","StepMaker","playerResolved","roleResolved","playerOpt","arg1","arg2","handCardId","gemColors","query","attackStep","PermanentEventType","HooksEngineAPI","extraState","sharedExtraState","updInfo","card","hand","idx","cardIndex","gems","arg3","owner","rowDiff","colDiff","permanent1","permanent2","damage","ignoreInvulnerability","powerDelta","healthDelta","counterType","counterIndex","expiry","winner","HooksAIAPI","engineOnly","keyframes","keyframe","id","HooksOutOfTurnAIAPI","ai","PUZZLE_51_CARDS","cardEffectsShared","happyBears","sadBears","choice","NUM_CARDS","SharedPuzzle51Spec","thornsHandler","ev","buffPermanent","buff","source","power","health","msgParts","buffAdjacentHandler","condition","adjacentPermanent","COMMON_COUNTER_DATA","event","newVal","extractOptSlot","extractOptChoiceString","onAbilityAttack","COMMON_CARD_EFFECTS","destroyedPermanent","attackTarget","moveTarget","_attacker","maxIgnore","currentIgnored","ignoredDiff","reflectedSlot","color","played","SCRY_N","topN","playedName","destroyTarget","victim","targets","oppPermanent","terrain1","terrain2","targetName","beforePermanents","clone","newPermanents","_permanent","attackerColor","target1","target2","behindTargets","creature","swapTarget","mergeEffectsDB","effectsDB","auxEffectsDB","auxEffects","getEffectsDB","allSpecs","spec","getCountersDB","countersDB","effects","counterData","SharedCommonSpec","PUZ_NAME_COMMON","SharedRobotSpec","SharedTutorial1Spec","SharedTutorial2Spec","SharedTutorial3Spec","SharedTutorial4Spec","SharedTutorial5Spec","SharedTutorial6Spec","SharedPuzzle4Spec","SharedPuzzle8Spec","SharedPuzzle9Spec","attackerFirstLetter","specialThreatened","effectsAdjust","threatenedByKing","threatenedByRook","threatenedByBishop","threatenedByKnight","threatenedByPawn","PUSHER_NAME","ZAP_PUSHER_NAME","WALL_NAME","BOX_NAME","EXPLOSIVES_NAME","FIGHTER_ALLY_NAME","FIGHTER_ENEMY_NAME","ARMORED_FIGHTER_ENEMY_NAME","ARMORED_CAMP_NAME","BEAVER_NAME","ALL_PUSHERS","ALL_AUTO_BATTLERS","nameForLetter","playerForLetter","setPower","delta","setHealth","setStats","LEVEL_1_LAYOUT","LEVEL_2_LAYOUT","LEVEL_2_EXTRA_INIT","perm","LEVEL_3_LAYOUT","LEVEL_4_LAYOUT","LEVEL_4_EXTRA_INIT","backFighter","fighter","myFighter","LEVEL_5_LAYOUT","LEVEL_5_EXTRA_INIT","enemyBots","bot","allCamps","camp","LEVEL_12_LAYOUT","LEVEL_12_EXTRA_INIT","LEVEL_6_LAYOUT","LEVEL_7_LAYOUT","LEVEL_8_LAYOUT","LEVEL_8_EXTRA_INIT","enemyBase","bot1","bot2","bot3","bot4","boarName","boar1","boar2","boar3","myCamp","LEVEL_10_LAYOUT","LEVEL_10_EXTRA_INIT","bomb1","bomb2","bomb3","bomb4","bomb5","bomb6","LEVEL_11_LAYOUT","LEVEL_11_EXTRA_INIT","enemy1","enemy2","ally1","ally2","ally3","ally4","ally5","ally6","LEVEL_9_LAYOUT","LEVEL_9_EXTRA_INIT","enemyCamp1","enemyCamp2","LEVEL_13_LAYOUT","LEVEL_13_EXTRA_INIT","enemyFighter1","enemyFighter2","myBomb","zapBot","ALL_LAYOUT_DATA","ALL_PARSED_LAYOUTS","parseLayout","getNumRows","getNumCols","layoutData","layout","lines","cols","allItems","line","col","name","initFromParsed","LEVEL_INDICES","LEVEL_INITERS","BASE_SHARED_GAME_SPEC","SharedPuzzle22Specs","SharedPuzzle28Spec","SharedPuzzle31Spec","SharedPuzzle44Spec","SharedPuzzle46Spec","blurgle","SharedPuzzle50Spec","specialCounters","_player","_cardName","SharedPuzzle53Spec","targetPermanent","textEffects","doom","SharedPuzzle76Spec","SharedPuzzle80Spec","ASTEROID_1_NAME","ASTEROID_2_NAME","ASTEROID_3_NAME","asteroidAnnounce","SharedPuzzle82Spec","BASE_EFFECT","fail","SharedPuzzle90Spec","N","BOARD_SIZE","MAX_HEALTH","AI_MAX_HEALTH","rowColToIndex","slotToIndex","indexToSlot","OthelloState","locations","newLocations","directions","allToFlip","currentIndex","toFlip","flipIndex","SQUARE_TO_CHECK","getAdjustmentValue","startState","column","pieceHandlers","currentState","swaps","newCardName","swapSlot","swapPerm","Puzzle93Spec","bestMoveScore","bestMove","thisScore","playerUnit","targetUnits","prefix","SharedPuzzle93Spec","pieceSummonChecker","otherPerm","isAdjacentSlot","isEqualSlot","SharedPuzzle98Spec","SharedPuzzle101Spec","BASE1","BASE2","BOAR","SharedPuzzle109Spec","SharedCutsceneSpec","SharedPvPSpec","makeSharedSimpleCutsceneSpec","endCutsceneRedirect","ALL_SHARED_GAME_SPECS","CommonSpec","RadlandsSpec","RobotSpec","Tutorial1Spec","enemyUnit","enemyUnits","solves","Tutorial2Spec","hog","hamlet","Tutorial3Spec","aiCreatures","playerCreatures","Tutorial4Spec","Tutorial5Spec","turnVal","rowPref","colPref","cardPlayed","Tutorial6Spec","aiCamps","reflectSlot","reflectPermanent","areReflectionsEqual","reflection","reflectOpt","permanentId","newPermanent","reflectOptResolved","isDefenderAboutToDie","isAlreadyDead","UNITS_WITH_ATTACK_EFFECTS","Puzzle4Spec","doesPlayerHaveBases","bases","baseColumns","tryStep","sm","spawnCardName","handCard","reflectedPermanent","attackerId","defenderId","reflectAttacker","reflectDefender","isSuccess","firstOpt","reflectedEffectOpts","silentSpawn","permToCopy","reportCopyFailed","newAttacker","newDefender","isDefenderReflectedAttacker","tempAttacker","effectOptsResolved","newEffectOpts","permanents","DAMAGE_MAPS","mintCreatures","Puzzle8Spec","weaknesses","defenderColor","mints","mint","numToSpawn","mintsRandom","spawned","creatureNameRandom","creatures","moved","UNIT_NAME_WHITE_PIECE","UNIT_NAME_B","UNIT_NAME_P","UNIT_NAME_Q","UNIT_NAME_R","unitAI","unit","here","unitAttacked","Puzzle9Spec","unitAIFunc","ourKeep","dr","dc","adjSlot","blocker","foundAttacker","WALLS","SokobanUpdateType","SokobanUpdateType2","SokobanState","actors","maxPower","nextSlot","startSlot","currSlot","allSlots","currWeight","canMove","thingToAttemptToPush","newWeight","allUpdates","newSlot","CARD_EFFECTS_BASE","initWallCounters","initFriendlyUnitCounters","pusherName","initPusherCounters","GAME_SPEC_BASE","playerUnitsInOrder","potentialTarget","pusher","oldSlot","updates","update","Puzzle22Specs","GAMES","BLACK_NAME","WHITE_NAME","COW_NAME","cowQuery","isCow","transformCows","cows","cow","getAttacks","level","game","getKillableSlot","move","shovePermanent","emptySlots","attacks","spawnCows","blockingPermanent","cowName","moveCows","moves","cowsToMove","to","tries","cowToMove","Puzzle28Spec","killableSlot","killableCow","barn","gamesArr","gameIndex","Puzzle31Spec","aiBase","healed","mirrorSpawns","slimeSpawnOrder","dotSlimes","dashSlimes","slimeAttackAI","dotSlimeAI","dashSlimeAI","slimeHandler","child","spawnSlot","emptySlot","slime","namePrefix","Puzzle44Spec","poison","unitName","slimeKilledOrder","correctOrder","BASE_SPEC","isBargle","isSwargle","morgles","morgle","spawnAt","Puzzle46Spec_1","Puzzle46Spec_2","Puzzle46Spec_3","Puzzle46Spec_4","Puzzle46Spec_5","Puzzle50CommonSpec","failed","timer","globalConstraints","clues","showSolution","turn","playerBase","failedPermanents","convertToGrid","splitComponents","getCheckerMakerId","ok","globalCheckerMakers","permanentToColor","localCheckerMakers","correct","isInBounds","cell","isCellEqual","hasEqualCell","splitComponentsMaker","neighborsOf","colorOf","unseenCells","cells","add","unseen","neighbor","connected","up","down","numOnes","CanalView","Cave","Kurodoko","Kurotto","LightAndShadow","Minesweeper","Mochikoro","Nurikabe","Slitherlink","Snake","Tasquare","YinYang","Neighbors","RowColumn","Visions","Areas","Single","Ones","Rectangles","Squares","TwoSnakes","TouchingPaths","ConnectedVision","RectangleAreas","Final","shuffle","makePuzzle50Spec","INFO","isInvulnerable","puzzleId","makePuzzle50FinalSpec","Puzzle50_1Spec","Puzzle50_2Spec","Puzzle50_3Spec","Puzzle50_4Spec","Puzzle50_5Spec","Puzzle50_6Spec","Puzzle50_7Spec","Puzzle50_8Spec","Puzzle50_9Spec","Puzzle50_10Spec","Puzzle50_11Spec","Puzzle50_12Spec","Puzzle50_13Spec","Puzzle50_14Spec","Puzzle50_15Spec","Puzzle50_16Spec","Puzzle50_17Spec","Puzzle50_18Spec","Puzzle50_19Spec","Puzzle50_20Spec","Puzzle50_21Spec","Puzzle50_22Spec","Puzzle50_23Spec","Puzzle50_24Spec","Puzzle50_FinalSpec","OLYMPIC_WINTER_SPORTS","FIRST_151_POKEMON","COLORS","FRUITS","DAY_OF_WEEK_ABBREVIATIONS","IATA_AIRPORT_CODES_FLORIDA","NFL_TEAM_NAMES","CURRENCY_CODES","SYNONYMS_FOR_TRICKED","ONES_DIGITS","TENS_DIGITS","STANDALONE_NUMBERS","WEAPONS","OPTICAL_COMPONENTS","KENTUCKY_DERBY_WINNERS","SUMMER_OLYMPIC_SPORTS","LEAGUE_OF_LEGENDS_CHAMPIONS","US_STATES","MONTHS","TREES","AI_BASE_ID","BEEHIVE_ID","LARVA_ID","NUM_STARTING_GEMS","AI_CARD_IDS","NUMBERS","getAllStrings","containsOneOf","shouldContain","allStringsBeforeAnyDespawns","substring","beeOrLarvaHandlers","cardEffects","newPermanentId","Puzzle51Spec","amt","aiTurnNumber","bearhive","bearResults","completeBear","isHappy","bearName","despawnAndUpdateCounters","cardId","category","cardToDespawn","allStrings","minimumValue","number","isSatisfied","allStrings2","maximumValue","generatedNumbers","tensDigit","tensValue","onesDigit","onesValue","showHint","hintDialogue","noSadBears","DINOSAUR_TAIL_TURNS","BOAR_TUSKS_TURNS","DRYAD_HORNS_TURNS","COW_UDDER_TURNS","BEE_WINGS_TURNS","KERO_TURNS","announceDoom","dialogue","turnsLeft","summonDoomHandler","turns","endTurnDoomHandler","doomValue","cowLegEffects","Puzzle76Spec","sharedExt","udder","doomUnit","turnsToDoom","manhattanDistance","puzzleLength","a1color","damageFuncs","_me","makeGostakHandler","gostakName","Puzzle80Specs","damages","announceAsteroidLand","plural","announceAsteroidTime","Puzzle82_1Spec","loseCheck","makeDecrementer","asteroidExplanation","perms","asteroidWithDoom","asteroid","Puzzle82_2Spec","Puzzle82_3Spec","startingHealth","adjustment","currentHealth","healthToRemove","NUM_UNITS","OUR_DESTINATION","ENEMY_DESTINATION","toSlot","Puzzle90Spec","stillAlive","dest","destination","Puzzle98RampSpec","maxHealth","Puzzle98ShadowSpec","totalPower","Puzzle98SplitterSpec","spawnedPermanent","toSpawn","Puzzle98YinYangSpec","Puzzle98VultureSpec","Puzzle53Spec","yurt","Puzzle101Specs","spawnHogsAndLogs","performAttacksOrHogMoves","getAIBases","spawnStacks","aiUnitsInOrder","unitToSpawn","getFactoryOutput","slotToSpawn","emptyAiSlotsInOrder","stacktory","hogAttackAI","attackableUnits","colDelta","logAttackAI","attackAI","BASES","slotsInPreferenceOrder","baseCols","mustPlayHog","mustPlayLog","Puzzle109Spec","otherP","boar","boarAtk","hasTrain","farms","farm","tryFreeMove","attackableWithoutMovingUnit","TestBattleSpec","makeSimpleCutsceneSpec","firstKeyframe","ALL_SERVER_ONLY_GAME_SPECS","getGameSpec","sharedGameSpec","Faction","makeInitFactionScores","doesCardColorBelongToFaction","FactionScoreConstants","calcFactionScore","stats","isPvP","isWinner","evalSortCriterion","sortCriterion","weights","weightSpec","criterion","weight","queryPermanents","v","sortResult","StaticInspector","deckOverride","Inspector","numBases","baseColumnOverride","width","endCutsceneRedirectDjango","p1State","p2State","drawPile","drawPileSize","row1","row2","terrainOwner","defenderSlot","attackerSlot","defenderPlayer","attackerPlayer","defenderTerrain","attackerTerrain","defenderPermanents","costs","available","availableMap","costMap","payment","pay","gemColor","costColor","leftover","leftoverCost","payMax","costColorToGemColor","cost","numUses","incNumUses","costTiebreakOrder","colorFreqPairs","difference","whiteIndex","blackIndex","freq","remainingGems","paymentGem","gem","computeTextFn","totVal","powerOverride","maxHealthOverride","shell","shellDamage","allCardNames","cardType","colors","effectOptResolved","forms","validationCtx","resolvedCardName","attackColor","readyPermanent","cannotPay","stepNumber","keyframeId","dialogOptionIndex","dialogOptions","Reducer","handIndex","spliceIndex","discardPile","phase","loseReason","endTime","endTurnTime","newGems","permanent1Id","permanent2Id","nextTopCard","shouldPopDrawPile","drawPileIndex","discard","counterVal","modifySharedExtraState","diffSummons","diffDestroys","diffDamageDealt","diffFactionSummons","Controller","multicaster","roomMemberId","fullUpd","fullState","updHidden","STARTING_HAND_SIZE","Engine","getCardUnlocks","checkpointHandler","cutsceneChoiceHandler","gameStateOpt","kPlayer","playerTeamData","reducer","isLoser","topCard","noShuffle","shuffleDeck","deckCardList","deckPriorityCard","priorityCardIndex","solvedTeamIds","cardUnlocksData","otherPermanent","insteadOfDamaged","undamagedShell","maxDamageReceivable","netDamageReceived","healthDamage","isIndestructable","realDamage","handler","shouldExpire","devExtraGemsPerTurn","extraGems","otherPlayer","isFactionCard","defenderData","onAbility","activateKeyframeEndGame","nextIds","getKeyframeById","getKeyframeIndexById","nextKeyframe","nextId","stepResolved","shouldSkipExecute","playerCardUnlocks","prevTurnsTime","clientGameState","sender","UpdateBroadcastSpecType","UpdatesMulticaster","applyUpdateFunc","MiscTeamStateSyncController","syncPacket","DecksAndMasteryTreesSyncController","deckControllers","teamSyncPacket","tracker","masteryTreeTracker","CheckpointsSyncController","numCheckpointsInPacket","battleControllers","ActiveRoomsSyncController","syncTrackers","isPartialTeamSync","createTime","p1TeamData","p2TeamData","p1TeamId","p2TeamId","lockedRoomIds","CompletedRoomsSyncController","GameRoomsController","existingPuzData","specName","dirtyStateUpd","activeRoom","teamRooms","roomTracker","existingTeamRooms","newTeamRooms","prevRoomId","prevRoomTracker","otherMember","fullPuzName","teamControllers","totalTime","speedrunPlayers","playerScores","factionScore","roomToSync","teamDirtyStateUpd","score","StatsController","record","record1","record2","unlockCount","solveCount","rank","factionScoreChanges","updateFactionHistory","solvesToDelete","unlocksToDelete","solvesToAdd","unlocksToAdd","forceIfHidden","timeBucket","factionHistoryToBroadcast","diffFactionScore","factionScoresToUpdate","updatedPuzzles","puzStats","leaderboard","newLast","contrib","rankStart","rankEnd","needUpdateTopRankings","updateStart","updateEnd","updateIndex","updateTeamId","teamNameDisplayUpds","teamUpd","teamNameDisplayUpd","CursorEventType","CursorEventMoveZod","CursorEventRemoveZod","CursorEventClickZod","CursorsController","teamCursorGroups","newTeamCursorGroups","cursorGroupName","cursorGroup","newCursorGroup","CursorGroup","srcConn","queuedEvents","dstConn","events","connId","safeParseCursorEvent","rX","rY","GameServer","teamConnsForTeam","memberId","gameServerId","teams","factionHistory","maxGuessesPerPuzzle","huntStartTime","huntEndTime","notifsNextIndex","unclaimedHints","client","msg","scopeType","bigBoardState","reqId","reqRole","scope","puzzlesDict","battleGroupsDict","masteriesDict","masteryData","hintsTotal","hintsUsed","fishPuzzleController","conns","serializedResp","jwt","payload","isAdmin","parsedEvent","spectateTeamController","destMember","destMemberId","updsToSend","updSpec","teamListState","pendingUpds","notif","funcAsync","needRelease","factionHistorySnapshot","syncDataReq","notifs","newlyPublished","team","battle","teamUpdate","extraGuesses","newExtraGuesses","nowTime","lastDumpTime","lastUserTime","lastSystemTime","userTime","systemTime","userTimeUsage","systemTimeUsage","_f","_e","SCHEMA_VERSION","BOOTSTRAP_TEAM_ID","BAREBONES_TEAM_ID","MAX_GUESSES_PER_PUZZLE","makeDefaultDeck","defaultDeckCards","makeBootstrapDecks","makeBootstrapDB","initUnlocks","isDev","teamAnswerSubmissions","teamDecks","makeAllPuzzleUnlocks","isFullPuzzle","teamCardUnlocks","MockBackendInterface","savedDB","saveDbFunc","gameEndInfo","correctSubmissions","teamUpdates","existingIndex","existingSlot","viewTime","puzCheckpoints","normalizedAnswer","MockAuthenticationInterface","LOCAL_FORAGE_KEY","gameServer","isForceResetPending","makeMockServer","forceReset","localforage","prevGameServer","SharedWorkerPortController","port","mockServerOpts","connUid","resetServer","clientInterface"],"mappings":"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AW,kBAEX,SAAU,CACR,CAAE,CAAC,EAAG,CAAC,EAAG,CAAC,EAAG,CAAC,EAAG,CAAC,EAAG,CAAC,EAAG,CAAC,EAAG,CAAC,EAAG,CAAC,EAAG,CAAC,CAAE,EACzC,CAAE,CAAC,EAAG,CAAC,EAAG,CAAC,EAAG,CAAC,EAAG,CAAC,EAAG,CAAC,EAAG,CAAC,EAAG,CAAC,EAAG,CAAC,EAAG,CAAC,CAAE,EACzC,CAAE,CAAC,EAAG,CAAC,EAAG,CAAC,EAAG,CAAC,EAAG,CAAC,EAAG,CAAC,EAAG,CAAC,EAAG,CAAC,EAAG,CAAC,EAAG,CAAC,CAAE,EACzC,CAAE,CAAC,EAAG,CAAC,EAAG,CAAC,EAAG,CAAC,EAAG,CAAC,EAAG,CAAC,EAAG,CAAC,EAAG,CAAC,EAAG,CAAC,EAAG,CAAC,CAAE,EACzC,CAAE,CAAC,EAAG,CAAC,EAAG,CAAC,EAAG,CAAC,EAAG,CAAC,EAAG,CAAC,EAAG,CAAC,EAAG,CAAC,EAAG,CAAC,EAAG,CAAC,CAAE,EACzC,CAAE,CAAC,EAAG,CAAC,EAAG,CAAC,EAAG,CAAC,EAAG,CAAC,EAAG,CAAC,EAAG,CAAC,EAAG,CAAC,EAAG,CAAC,EAAG,CAAC,CAAE,EACzC,CAAE,CAAC,EAAG,CAAC,EAAG,CAAC,EAAG,CAAC,EAAG,CAAC,EAAG,CAAC,EAAG,CAAC,EAAG,CAAC,EAAG,CAAC,EAAG,CAAC,CAAE,EACzC,CAAE,CAAC,EAAG,CAAC,EAAG,CAAC,EAAG,CAAC,EAAG,CAAC,EAAG,CAAC,EAAG,CAAC,EAAG,CAAC,EAAG,CAAC,EAAG,CAAC,CAAE,EACzC,CAAE,CAAC,EAAG,CAAC,EAAG,CAAC,EAAG,CAAC,EAAG,CAAC,EAAG,CAAC,EAAG,CAAC,EAAG,CAAC,EAAG,CAAC,EAAG,CAAC,CAAE,EACzC,CAAE,CAAC,EAAG,CAAC,EAAG,CAAC,EAAG,CAAC,EAAG,CAAC,EAAG,CAAC,EAAG,CAAC,EAAG,CAAC,EAAG,CAAC,EAAG,CAAC,CAAE,EACzC,CAAE,CAAC,EAAG,CAAC,EAAG,CAAC,EAAG,CAAC,EAAG,CAAC,EAAG,CAAC,EAAG,CAAC,E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T,QAAS,iCACT,QAAS,iCACT,QAAS,iCACT,QAAS,iCACT,QAAS,gCACX,EACA,EAAK,CACH,QAAS,iCACT,QAAS,iCACT,QAAS,iCACT,QAAS,iCACT,QAAS,iCACT,QAAS,gCACX,EACA,EAAK,CACH,QAAS,iCACT,QAAS,iCACT,QAAS,iCACT,QAAS,iCACT,QAAS,iCACT,QAAS,gCACX,EACA,GAAM,CACJ,QAAS,iCACT,QAAS,iCACT,QAAS,iCACT,QAAS,iCACT,QAAS,iCACT,QAAS,gCACX,EACA,GAAM,CACJ,QAAS,iCACT,QAAS,iCACT,QAAS,iCACT,QAAS,iCACT,QAAS,iCACT,QAAS,gCACX,EACA,GAAM,CACJ,QAAS,iCACT,QAAS,iCACT,QAAS,iCACT,QAAS,iCACT,QAAS,iCACT,QAAS,gCACX,EACA,GAAM,CACJ,QAAS,iCACT,QAAS,iCACT,QAAS,iCACT,QAAS,iCACT,QAAS,iCACT,QAAS,gCACX,EACA,GAAM,CACJ,QAAS,iCACT,QAAS,iCACT,QAAS,iCACT,QAAS,iCACT,QAAS,iCACT,QAAS,gCACX,EACA,GAAM,CACJ,QAAS,iCACT,QAAS,iCACT,QAAS,iCACT,QAAS,iCACT,QAAS,iCACT,QAAS,gCACX,EACA,GAAM,CACJ,QAAS,iCACT,QAAS,iCACT,QAAS,iCACT,QAAS,iCACT,QAAS,iCACT,QAAS,gCACX,EACA,GAAM,CACJ,QAAS,iCACT,QAAS,iCACT,QAAS,iCACT,QAAS,iCACT,QAAS,iCACT,QAAS,gCACX,EACA,GAAM,CACJ,QAAS,iCACT,QAAS,iCACT,QAAS,iCACT,QAAS,iCACT,QAAS,iCACT,QAAS,gCACX,EACA,GAAM,CACJ,QAAS,iCACT,QAAS,iCACT,QAAS,iCACT,QAAS,iCACT,QAAS,iCACT,QAAS,gCACX,EACA,GAAM,CACJ,QAAS,iCACT,QAAS,iCACT,QAAS,iCACT,QAAS,iCACT,QAAS,iCACT,QAAS,gCACX,EACA,GAAM,CACJ,QAAS,iCACT,QAAS,iCACT,QAAS,iCACT,QAAS,iCACT,QAAS,iCACT,QAAS,gCACX,EACA,GAAM,CACJ,QAAS,iCACT,QAAS,iCACT,QAAS,iCACT,QAAS,iCACT,QAAS,iCACT,QAAS,gCACX,EACA,GAAM,CACJ,QAAS,iCACT,QAAS,iCACT,QAAS,iCACT,QAAS,iCACT,QAAS,iCACT,QAAS,gCACX,EACA,GAAM,CACJ,QAAS,iCACT,QAAS,iCACT,QAAS,iCACT,QAAS,iCACT,QAAS,iCACT,QAAS,gCACX,EACA,GAAM,CACJ,QAAS,iCACT,QAAS,iCACT,QAAS,iCACT,QAAS,iCACT,QAAS,iCACT,QAAS,gCACX,EACA,GAAM,CACJ,QAAS,iCACT,QAAS,iCACT,QAAS,iCACT,QAAS,iCACT,QAAS,iCACT,QAAS,gCACX,EACA,GAAM,CACJ,QAAS,iCACT,QAAS,iCACT,QAAS,iCACT,QAAS,iCACT,QAAS,iCACT,QAAS,gCACX,EACA,GAAM,CACJ,QAAS,iCACT,QAAS,iCACT,QAAS,iCACT,QAAS,iCACT,QAAS,iCACT,QAAS,gCACX,EACA,GAAM,CACJ,QAAS,iCACT,QAAS,iCACT,QAAS,iCACT,QAAS,iCACT,QAAS,iCACT,QAAS,gCACX,EACA,GAAM,CACJ,QAAS,iCACT,QAAS,iCACT,QAAS,iCACT,QAAS,iCACT,QAAS,iCACT,QAAS,gCACX,EACA,GAAM,CACJ,QAAS,iCACT,QAAS,iCACT,QAAS,iCACT,QAAS,iCACT,QAAS,iCACT,QAAS,gCACX,EACA,GAAM,CACJ,QAAS,iCACT,QAAS,iCACT,QAAS,iCACT,QAAS,iCACT,QAAS,iCACT,QAAS,gCACX,EACA,GAAM,CACJ,QAAS,iCACT,QAAS,iCACT,QAAS,iCACT,QAAS,iCACT,QAAS,iCACT,QAAS,gCACX,EACA,GAAM,CACJ,QAAS,iCACT,QAAS,iCACT,QAAS,iCACT,QAAS,iCACT,QAAS,iCACT,QAAS,gCACX,EACA,GAAM,CACJ,QAAS,iCACT,QAAS,iCACT,QAAS,iCACT,QAAS,iCACT,QAAS,iCACT,QAAS,gCACX,EACA,GAAM,CACJ,QAAS,iCACT,QAAS,iCACT,QAAS,iCACT,QAAS,iCACT,QAAS,iCACT,QAAS,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ACA,UACA,UACA,UACA,UACA,SACA,UACA,UACA,SACA,SACA,UACA,UACA,SACA,UACA,SACA,UACA,OACA,SACA,SACA,SACA,WACA,WACA,SACA,QACA,QACA,WACA,UACA,UACA,UACA,UACA,UACA,SACA,WACA,UACA,WACA,SACA,UACA,UACA,SACA,KACF,CAAC,EAEYC,OAAa,IAAI,CAC5B,OACA,WACA,SACA,SACA,QACA,WACA,UACA,OACA,WACA,QACA,SACA,QACA,SACA,SACA,QACA,OACA,QACA,OACA,OACA,SACA,QACA,OACA,WACA,UACA,QACA,SACA,WACA,UACA,UACA,UACA,UACA,SACA,WACA,WACA,WACA,WACA,UACA,SACA,SACA,SACA,WACA,SACA,QACA,WACA,OACA,QACA,UACA,OACA,WACA,QACA,SACA,QACA,OACA,WACA,WACA,UACA,WACA,OACA,SACA,WACA,OACA,OACA,QACA,OACA,QACA,UACA,UACA,UACA,WACA,OACA,OACA,QACA,WACA,WACA,UACA,WACA,SACA,QACA,UACA,MACA,UACA,UACA,SACA,QACA,OACA,OACA,OACA,WACA,QACA,UACA,QACA,OACA,QACA,OACA,QACA,QACA,UACA,WACA,WACA,QACA,UACA,WACA,QACA,SACA,SACA,QACA,QACA,WACA,UACA,OACA,OACA,WACA,WACA,UACA,SACA,SACA,SACA,SACA,QACA,UACA,QACA,UACA,OACA,OACA,SACA,SACA,UACA,OACA,QACA,OACA,QACA,WACA,OACA,WACA,OACA,UACA,QACA,OACA,UACA,SACA,QACA,MACA,SACA,SACA,OACA,QACA,OACA,SACA,SACA,OACA,UACA,OACA,SACA,OACA,WACA,UACA,SACA,WACA,SACA,QACA,SACA,SACA,SACA,UACA,UACA,OACA,QACA,UACA,SACA,SACA,MACA,QACA,QACA,OACA,QACA,UACA,SACA,SACA,QACA,UACA,WACA,SACA,WACA,OACA,QACA,QACA,OACA,WACA,SACA,UACA,WACA,SACA,SACA,MACF,CAAC,EAEYC,OAAa,IAAI,CAC5B,OACA,OACA,UACA,QACA,QACA,QACA,UACA,WACA,QACA,OACA,UACA,SACA,WACA,UACA,QACA,WACA,SACA,WACA,SACA,UACA,WACA,UACA,SACA,OACA,SACA,WACA,WACA,SACA,MACA,WACA,QACA,QACA,WACA,WACA,WACA,SACA,SACA,SACA,UACA,WACA,QACA,OACA,SACA,SACA,OACA,SACA,SACA,QACA,SACA,QACA,WACA,QACA,QACA,SACA,SACA,SACA,MACA,SACA,WACA,SACA,OACA,QACA,SACA,QACA,UACA,SACA,SACA,WACA,QACA,WACA,SACA,SACA,UACA,UACA,SACA,WACA,SACA,UACA,WACA,SACA,UACA,OACA,UACF,CAAC,EAEYC,OAAgC,IAAI,CAC/C,MACA,MACA,MACA,MACA,MACA,MACA,KACF,CAAC,EAEYC,OAAiC,IAAI,CAChD,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,KACF,CAAC,EAEYC,OAAqB,IAAI,CACpC,QACA,WACA,WACA,OACA,SACA,UACA,SACA,WACA,SACA,QACA,UACA,SACA,UACA,SACA,UACA,WACA,UACA,SACA,SACA,QACA,QACA,UACA,UACA,UACA,WACA,SACA,OACA,UACF,CAAC,EAEYC,OAAqB,IAAI,CACpkC,CAC7C,CAAC,MAAO,CAAC,EACT,CAAC,MAAO,CAAC,EACT,CAAC,QAAS,CAAC,EACX,CAAC,OAAQ,CAAC,EACV,CAAC,OAAQ,CAAC,EACV,CAAC,MAAO,CAAC,EACT,CAAC,QAAS,CAAC,EACX,CAAC,QAAS,CAAC,EACX,CAAC,OAAQ,CAAC,CACZ,EAEaC,GAAkC,CAC7C,CAAC,SAAU,EAAE,EACb,CAAC,SAAU,EAAE,EACb,CAAC,QAAS,EAAE,EACZ,CAAC,QAAS,EAAE,EACZ,CAAC,QAAS,EAAE,EACZ,CAAC,UAAW,EAAE,EACd,CAAC,SAAU,EAAE,EACb,CAAC,SAAU,EAAE,CACf,EAEaC,GAAyC,CACpD,CAAC,OAAQ,CAAC,EACV,CAAC,MAAO,EAAE,EACV,CAAC,SAAU,EAAE,EACb,CAAC,SAAU,EAAE,EACb,CAAC,WAAY,EAAE,EACf,CAAC,WAAY,EAAE,EACf,CAAC,UAAW,EAAE,EACd,CAAC,UAAW,EAAE,EACd,CAAC,YAAa,EAAE,EAChB,CAAC,WAAY,EAAE,EACf,CAAC,WAAY,EAAE,EAEf,CAAC,UAAW,GAAG,EACf,CAAC,WAAY,GAAI,EACjB,CAAC,UAAW,GAAO,EACnB,CAAC,UAAW,GAAU,EACtB,CAAC,WAAY,IAAa,CAC5B,EAEaC,OAAc,IAAI,CAC7B,OACA,WACA,OACA,UACA,UACA,QACA,WACA,SACA,UACA,QACA,QACA,WACA,QACA,UACA,OACA,WACA,SACA,MACA,UACA,SACA,SACA,SACA,MACA,QACA,QACA,WACA,UACA,UACA,WACA,WACA,UACA,WACA,SACA,WACA,SACA,WACA,WACA,WACA,WACA,QACA,UACA,OACA,UACA,SACA,OACA,UACA,QACA,SACA,WACA,WACA,WACA,KACA,UACA,UACA,SACA,OACA,SACA,UACA,WACA,UACA,UACA,SACA,UACA,QACA,QACA,QACA,WACA,UACA,OACA,UACA,UACA,WACA,OACA,QACA,OACA,SACA,WACA,UACA,SACA,MACA,OACA,MACA,OACA,UACA,UACA,OACA,WACA,SACA,UACA,SACA,UACA,SACA,MACA,SACA,OACA,UACA,QACA,QACA,WACA,UACA,WACA,WACA,OACA,MACA,UACA,WACA,UACA,UACA,WACA,UACA,QACA,SACA,OACA,OACA,KACA,SACA,MACA,WACA,SACA,QACA,MACA,SACA,QACA,UACA,SACA,QACA,UACA,WACA,MACA,UACA,UACA,UACA,SACA,SACA,QACA,QACA,UACA,QACA,UACA,WACA,WACA,SACA,WACA,UACA,OACA,SACA,MACA,QACA,OACA,SACA,OACA,SACA,UACA,SACA,SACA,UACA,SACA,KACA,KACA,QACA,UACA,SACA,QACA,OACA,WACA,WACA,OACA,UACA,UACA,SACA,SACA,QACA,SACA,UACA,WACA,SACA,WACA,UACA,SACA,OACA,QACA,UACA,SACA,SACA,UACA,QACA,QACA,QACA,UACA,QACA,OACA,OACA,SACA,QACA,QACA,UACA,SACA,QACA,UACA,SACA,QACA,QACA,OACA,SACA,SACA,OACA,QACA,SACA,OACA,UACA,SACA,SACA,SACA,UACA,WACA,SACA,OACA,UACA,OACA,SACA,OACA,UACA,UACA,UACA,SACA,SACA,WACA,SACA,SACA,SACA,UACA,WACA,WACA,SACA,OACA,UACA,UACA,SACA,QACA,OACA,UACA,SACA,UACA,UACA,QACA,WACA,SACA,SACA,MACA,QACA,UACA,OACA,WACA,UACA,UACA,SACA,SACA,SACA,UACA,WACA,OACA,OACA,UACA,UACA,WACA,WACA,SACA,OACA,OACA,QACA,SACA,QACA,UACA,UACA,SACA,WACA,UACA,UACA,WACA,SACA,SACA,SACA,SACA,SACA,QACA,SACA,QACA,SACA,SACA,OACA,QACA,QACA,UACA,MACA,UACA,SACA,SACA,UACA,WACA,UACA,UACA,QACA,SACA,SACA,UACA,OACA,QACA,QACA,QACA,QACA,QACA,MACA,QACA,UACA,UACA,WACA,SACA,OACA,OACA,UACA,QACA,WACA,OACA,SACA,QACA,UACA,WACA,QACA,OACA,SACA,UACA,WACA,QACA,SACA,QACA,UACA,WACA,SACA,QACA,SACA,QACA,QACA,WACA,WACA,WACA,QACA,UACA,QACA,SACA,WACA,QACA,SACA,SACA,SACA,QACA,QACA,SACA,QACA,QACA,QACA,WACA,QACA,QACA,UACA,UACA,UACA,UACA,WACA,UACA,OACA,OACA,UACA,WACA,MACA,QACA,QACA,MACA,UACA,WACA,SACA,QACA,SACA,OACA,QACA,UACA,SACA,QACA,SACA,QACA,OACA,UACA,SACA,UACA,UACF,CAAC,EAEYC,OAAyB,IAAI,CACxC,UACA,SACA,WACA,SACA,SACA,QACA,QACA,UACA,QACA,WACA,OACA,SACA,SACA,UACA,QACA,SACA,UACA,WACA,QACF,CAAC,EAEYC,OAA6B,IAAI,CAC5C,OACA,UACA,UACA,MACA,WACA,UACA,UACA,WACA,UACA,UACA,WACA,QACA,WACA,UACA,SACA,UACA,QACA,WACA,WACA,SACA,WACA,WACA,UACA,SACA,UACA,UACA,SACA,QACA,WACA,MACA,UACA,SACA,WACA,QACA,WACA,QACA,WACA,UACA,QACA,SACA,UACF,CAAC,EAEYC,OAA4B,IAAI,CAC3C,UACA,WACA,WACA,SACA,WACA,QACA,WACA,UACA,SACA,UACA,WACA,OACA,WACA,SACA,OACA,SACA,SACA,QACA,UACA,WACA,UACA,WACA,QACF,CAAC,EAEYC,OAAkC,IAAI,CACjD,SACA,OACA,QACA,SACA,UACA,QACA,QACA,WACA,OACA,OACA,OACA,UACA,QACA,QACA,UACA,UACA,UACA,QACA,SACA,QACA,SACA,OACA,QACA,UACA,SACA,QACA,OACA,QACA,QACA,OACA,SACA,SACA,OACA,UACA,SACA,SACA,QACA,QACA,MACA,QACA,OACA,OACA,QACA,UACA,QACA,UACA,WACA,WACA,QACA,OACA,SACA,SACA,UACA,OACA,SACA,SACA,UACA,SACA,QACA,SACA,SACA,OACA,MACA,WACA,WACA,SACA,QACA,UACA,UACA,OACA,QACA,WACA,QACA,UACA,QACA,WACA,OACA,UACA,OACA,WACA,QACA,OACA,SACA,QACA,QACA,SACA,SACA,OACA,WACA,SACA,QACA,SACA,OACA,SACA,UACA,QACA,OACA,QACA,OACA,UACA,SACA,OACA,UACA,OACA,SACA,QACA,QACA,SACA,UACA,QACA,QACA,QACA,SACA,WACA,UACA,SACA,OACA,QACA,QACA,QACA,SACA,SACA,MACA,KACA,WACA,WACA,UACA,SACA,QACA,SACA,UACA,QACA,OACA,SACA,QACA,MACA,MACA,OACA,QACA,SACA,MACA,MACF,CAAC,EAEYC,OAAgB,IAAI,CAC/B,UACA,SACA,UACA,WACA,aACA,WACA,cACA,WACA,UACA,UACA,SACA,QACA,WACA,UACA,OACA,SACA,WACA,YACA,QACA,WACA,gBACA,WACA,YACA,cACA,WACA,UACA,WACA,SACA,eACA,YACA,YACA,UACA,gBACA,cACA,OACA,WACA,SACA,eACA,cACA,gBACA,cACA,YACA,QACA,OACA,UACA,WACA,aACA,eACA,YACA,SACF,CAAC,EAEYC,OAAa,IAAI,CAC5B,UACA,WACA,QACA,QACA,MACA,OACA,OACA,SACA,YACA,UACA,WACA,UACF,CAAC,EAEYC,OAAY,IAAI,CAC3B,SACA,QACA,SACA,QACA,UACA,UACA,QACA,QACA,MACA,QACA,UACA,QACA,SACA,SACA,SACA,WACA,MACA,WACA,QACA,QACA,SACA,UACA,QACA,UACA,UACA,QACA,QACA,SACA,WACA,WACA,WACA,SACA,UACA,SACA,QACA,UACA,OACA,UACA,SACA,QACA,MACA,WACA,WACA,MACA,MACA,WACA,SACA,QACA,SACA,YACA,WACA,QACA,UACA,UACA,QACA,WACA,MACA,WACA,YACA,SACA,SACA,SACA,QACA,QACA,UACA,UACA,QACA,SACA,QACA,OACA,SACA,SACA,WACA,QACA,WACA,QACA,WACA,QACA,OACA,UACA,WACA,QACA,SACA,QACA,OACA,SACA,MACA,QACA,SACA,SACA,OACA,SACA,SACA,QACA,OACA,QACA,UACA,YACA,OACA,YACA,QACA,OACA,SACA,UACA,OACA,QACA,SACA,SACA,MACA,QACA,YACA,UACA,QACA,UACA,SACA,UACA,OACA,QACA,WACA,WACA,WACA,MACA,QACA,SACA,QACA,SACA,SACA,SACA,SACA,UACA,MACA,OACF,CAAC,ECpoDKC,GAAa,WACbC,GAAa,UACbC,GAAW,QACXC,GAAoB,GACpBC,GAAc,CAClB,YACA,eACA,aACA,cACA,WACA,WACA,aACA,gBACA,WACA,aACA,gBACA,YACA,aACA,eACA,eACA,WACA,gBACA,eACA,aACF,EACMC,GAAUhB,GAAY,OAAOC,EAAW,EAAE,OAAOC,EAAkB,EAezE,SAASe,GAAc3xB,EAAmC,SAClD,MAAAr3B,EAAOq3B,EAAU,aACjBka,EAAOla,EAAU,gBACjB4iB,EAAa5iB,EAAU,mBACvBnQ,EAAoC,CAAA,EAC1C,QAAS/0B,EAAI,EAAGA,EAAI6N,EAAM7N,IAAK,CAC7B,MAAMg1B,EAAiC,CAAA,EACvC,QAAS,EAAI,EAAG,EAAIoqB,EAAM,IACxBpqB,EAAI,KAAK,MAAS,EAEpBD,EAAK,KAAKC,CAAG,CACf,CACA,UAAW/oB,KAAK67C,EACd/yB,EAAK9oB,EAAE,KAAK,GAAG,EAAEA,EAAE,KAAK,MAAM,EAAIA,EAG9B,MAAAqO,MAAU,IAChB,QAASta,EAAI,EAAGA,EAAI6N,EAAM7N,IAAK,CAC7B,IAAIqX,EAAS,GACb,QAAS,EAAI,EAAG,EAAI+nC,EAAM,IAAK,CAC7B,MAAMnzC,EAAI8oB,EAAK/0B,CAAC,EAAE,CAAC,EACfiM,IAAM,QAAaA,EAAE,KAAK,OAASwqD,IACrCn8C,EAAI,IAAIjD,CAAM,EACLA,EAAA,IAETA,IAAUmO,EAAAvZ,EAAE,KAAK,OAAP,YAAAuZ,EAAa,OAAO,GAAG,aAErC,CAEAlL,EAAI,IAAIjD,CAAM,CAChB,CAEA,QAASnB,EAAI,EAAGA,EAAIkpC,EAAMlpC,IAAK,CAC7B,IAAImB,EAAS,GACb,QAASrX,EAAI,EAAGA,EAAI6N,EAAM7N,IAAK,CAC7B,MAAMiM,EAAI8oB,EAAK/0B,CAAC,EAAEkW,CAAC,EACfjK,IAAM,QAAaA,EAAE,KAAK,OAASwqD,IACrCn8C,EAAI,IAAIjD,CAAM,EACLA,EAAA,IAETA,IAAUoT,EAAAxe,EAAE,KAAK,OAAP,YAAAwe,EAAa,OAAO,GAAG,aAErC,CAEAnQ,EAAI,IAAIjD,CAAM,CAChB,CACO,OAAAiD,CACT,CASA,SAASw8C,GACPC,EACAC,EACS,CACT,UAAW3/C,KAAU2/C,EACnB,UAAWC,KAAaF,EAClB,GAAA1/C,EAAO,SAAS4/C,CAAS,EACpB,MAAA,GAIN,MAAA,EACT,CAEA,MAAMC,GAA6C,CACjD,CAACzkB,EAAmB,OAAO,EAAIuC,GAAO,CAC9B,KAAA,CAAE,IAAAnxB,EAAK,UAAA+lB,CAAc,EAAAoL,EAC3BnxB,EAAI,OAAO,WAAW+lB,EAAW,CAAE,KAAMf,EAAY,cAAe,EACpEhlB,EAAI,OAAO,WAAW+lB,EAAW,CAAE,KAAMf,EAAY,cAAe,EACpEhlB,EAAI,OAAO,WAAW+lB,EAAW,CAAE,KAAMf,EAAY,YAAa,CACpE,CACF,EACMsuB,GAAyB,CAC7B,MAAO,CACL,UAAW,CAAC3uC,EAAM3E,IAAQ,CAClB,KAAA,CAAE,OAAA6hB,CAAW,EAAA7hB,EACb,CAAE,UAAA+lB,CAAc,EAAAphB,EAEhB4uC,EADmBthB,GAAuBttB,EAAM,CAAC,EACf,YAAA,EAAc,QAAQ,KAAM,GAAG,EACjEoK,EAAOgX,EAAU,KACjBwJ,EAAQxJ,EAAU,MAExBlE,EAAO,QAAQkE,CAAS,EACjBlE,EAAA,MAAM0xB,EAAgBxkC,EAAMwgB,CAAK,CAC1C,EACA,SAAU8jB,EACZ,CACF,EAEA,UAAWjkC,KAAYuhB,GACrB2iB,GAAYlkC,EAAS,kBAAkB,EAAE,QAAQ,KAAM,GAAG,CAAC,EAAI,CAC7D,aAAc,CAACzK,EAAM3E,IAAQ,CACrB,KAAA,CAAE,OAAA6hB,CAAW,EAAA7hB,EACZ6hB,EAAA,QAAQld,EAAK,SAAS,CAC/B,EACA,SAAU0uC,EAAA,EAIP,MAAMG,GAAuC,CAClD,gBAAkBxzC,GAAQ,CAClB,KAAA,CAAE,OAAA6hB,CAAW,EAAA7hB,EACnB6hB,EAAO,eAAe,CACpB,YAAa,OACb,SAAU,GACV,YAAa,EAAA,CACQ,CACzB,EACA,aAAc,CAAC5H,EAAQja,IAAQ,CACvB,KAAA,CAAE,UAAAqhB,EAAW,OAAAQ,CAAW,EAAA7hB,EAC1B,GAAAia,IAAWH,EAAO,GAAI,CACxB,MAAM25B,EAAMpyB,EACT,gBAAgBvH,EAAO,EAAE,EACzB,OAAQ1xB,GAAMA,EAAE,KAAK,OAASuqD,EAAU,EAAE,OACtC9wB,EAAA,QAAQ/H,EAAO,GAAI,IAAI,MAAM25B,CAAG,EAAE,KAAKr4B,EAAY,MAAM,CAAC,CACnE,CAIF,EACA,cAAgBpb,GAAQ,CAChB,KAAA,CAAE,GAAA0wB,EAAI,OAAA7O,CAAW,EAAA7hB,EAChB6hB,EAAA,QACL/H,EAAO,GACP,IAAI,MAAM+4B,EAAiB,EAAE,KAAKz3B,EAAY,MAAM,CAAA,EAEnDsV,EAAA,MACD;AAAA,6EAAA,CAEJ,EACA,YAAA4iB,GACA,OAAStzC,GAAQ,CACf,KAAM,CAAE,GAAA0wB,EAAI,OAAA7O,EAAQ,UAAAR,CAAA,EAAcrhB,EAC5B8uB,EAAajN,EAAO,gBACpB6xB,EAAeryB,EAAU,cAAA,EAAkB,EAC3C8xB,EAA8BH,GAAc3xB,CAAS,EAErDsyB,EAAWtyB,EACd,gBAAgBvH,EAAO,EAAE,EACzB,KAAM1xB,GAAMA,EAAE,KAAK,OAASsqD,EAAU,EAGzC,GAAIgB,IAAiB,EAAG,CACtB,GAAIC,IAAa,OAAW,OACrB9xB,EAAA,WAAW8xB,EAAU,CAAE,KAAM3uB,EAAY,YAAa,IAAK,EAAG,EAC9DnD,EAAA,WAAW8xB,EAAU,CAAE,KAAM3uB,EAAY,UAAW,IAAK,EAAG,CACrE,CAEA,MAAM4uB,EAAwB,CAAA,EACxBC,EAAe,CAACC,EAAkB/tB,IAA0B,CAChE,GAAI4tB,IAAa,OAAW,OAC5B,MAAMI,EACJhuB,IAAc,OACV,OACA1E,EAAU,mBAAmB0E,CAAS,EACrClE,EAAA,kBACL8xB,EACAG,EAAU9uB,EAAY,YAAcA,EAAY,UAChD,CAAA,EAEU4uB,EAAA,KACV,GAAGG,CAAQ,OAAOD,EAAU,iBAAmB,YAAY,EAAA,CAC7D,EAEO,SAAAE,EAAyBC,EAAgBC,EAAuB,CACvE,MAAMC,EAAgB9yB,EACnB,gBAAgBvH,EAAO,EAAE,EACzB,KAAM1xB,GAAMA,EAAE,KAAK,OAAS6rD,CAAM,EAEnCE,IAAkB,QAEd9yB,EAAU,mBAAmB8yB,CAAa,EAEhDN,EACEZ,GAAciB,EAAUf,CAA2B,EACnDgB,CAAA,EAGEA,IAAkB,QACpBtyB,EAAO,QAAQsyB,CAAa,CAEhC,CAGA,OAAQT,EAAc,CACpB,IAAK,GACsBM,EAAAlB,GAAY,CAAC,EAAGxB,EAAqB,EAC9D,MACF,IAAK,GACsB0C,EAAAlB,GAAY,CAAC,EAAGvB,EAAiB,EAC1D,MACF,IAAK,GACsByC,EAAAlB,GAAY,CAAC,EAAGtB,EAAM,EAC/C,MACF,IAAK,GACsBwC,EAAAlB,GAAY,CAAC,EAAGrB,EAAM,EAC/C,MACF,IAAK,GACsBuC,EAAAlB,GAAY,CAAC,EAAGpB,EAAyB,EACzCsC,EAAAlB,GAAY,CAAC,EAAGnB,EAA0B,EACnE,MACF,IAAK,GACsBqC,EAAAlB,GAAY,CAAC,EAAGlB,EAAc,EACvD,MACF,IAAK,IACsBoC,EAAAlB,GAAY,CAAC,EAAGhB,EAAoB,EACpCkC,EAAAlB,GAAY,CAAC,EAAGjB,EAAc,EACvD,MACF,IAAK,IAAI,CAED,MAAAuC,EAAapB,GAAc3xB,CAAS,EAC1C,IAAIgzB,EACJ,SAAW,CAACC,EAAQ71D,CAAK,IAAKs0D,GAC5B,UAAWv/C,KAAU4gD,EAEjB5gD,EAAO,SAAS8gD,CAAM,IACrBD,IAAiB,QAAaA,EAAe51D,KAE/B41D,EAAA51D,GAKrB,MAAM01D,EAAgB9yB,EACnB,gBAAgBvH,EAAO,EAAE,EACzB,KAAM1xB,GAAMA,EAAE,KAAK,OAAS0qD,GAAY,CAAC,CAAC,EAEvCyB,EAAcF,IAAiB,OACjCE,IAAazlB,EAAW,YAAculB,GAC1CR,EAAaU,EAAaJ,CAAa,EAEnCA,IAAkB,QAAWtyB,EAAO,QAAQsyB,CAAa,EAEpCH,EAAAlB,GAAY,EAAE,EAAGZ,EAAO,EACjD,KACF,CACA,IAAK,IAAI,CAED,MAAAsC,EAAcxB,GAAc3xB,CAAS,EAC3C,IAAIozB,EACJ,MAAMC,EAAuC,CAAA,EAC7C,SAAW,CAACC,EAAWC,CAAS,IAAK5C,GACnC,SAAW,CAAC6C,EAAWC,CAAS,IAAK/C,GACnC2C,EAAiB,KAAK,CACpBC,EAAYE,EACZD,EAAYE,CAAA,CACb,EAGL,SAAW,CAACR,EAAQ71D,CAAK,IAAKs0D,GAAQ,OAAO2B,CAAgB,EAC3D,UAAWlhD,KAAUghD,EAEjBhhD,EAAO,SAAS8gD,CAAM,IACrBG,IAAiB,QAAaA,EAAeh2D,KAE/Bg2D,EAAAh2D,GAKrB,MAAM01D,EAAgB9yB,EACnB,gBAAgBvH,EAAO,EAAE,EACzB,KAAM1xB,GAAMA,EAAE,KAAK,OAAS0qD,GAAY,EAAE,CAAC,EAExCyB,EACJE,IAAiB,QACjB3lB,EAAW,cAAgB,QAC3B2lB,EAAe3lB,EAAW,YAC5B+kB,EAAaU,EAAaJ,CAAa,EAEnCA,IAAkB,QAAWtyB,EAAO,QAAQsyB,CAAa,EAGpCH,EAAAlB,GAAY,EAAE,EAAGX,EAAkB,EACnC6B,EAAAlB,GAAY,EAAE,EAAGV,EAAsB,EAChE,KACF,CACA,IAAK,IACsB4B,EAAAlB,GAAY,EAAE,EAAGT,EAAqB,EACtC2B,EAAAlB,GAAY,EAAE,EAAGL,EAAK,EACtBuB,EAAAlB,GAAY,EAAE,EAAGN,EAAM,EACvBwB,EAAAlB,GAAY,EAAE,EAAGP,EAAS,EAC1ByB,EAAAlB,GAAY,EAAE,EAAGR,EAA2B,EACrE,KACJ,CAEA,MAAMyC,EACJrB,IAAiB,GACjB,CAAE7xB,EAAO,cAAuC,EAAA,SAE5CmzB,EACJ,kFACEpB,EAAY,OAAS,GAAKmB,IACzBrkB,EAAA,MACD,CACE,GAAIkjB,EAAY,OAAS,EACrB,CACEA,EAAY,KACVmB,GAAYnB,EAAY,OAAS,EAAI,IAAM;AAAA,CAC7C,CAAA,EAEF,CAAC,EACL,GAAImB,EAAW,CAACC,CAAY,EAAI,CAAC,CAAA,EACjC,KAAK;AAAA,CAAI,CAAA,EAIN,SAAA/uD,EAAMkrB,EAAauqB,EAAa,CAEpCra,EAAA,mBACA,OAAQj5B,GAAMA,EAAE,KAAK,SAAWszC,GAAOtzC,EAAE,KAAK,MAAQ+oB,CAAG,EACzD,QAAS/oB,GAAMy5B,EAAO,QAAQz5B,CAAC,CAAC,CACrC,CAGA,OAAQsrD,EAAc,CACpB,IAAK,GACHztD,EAAM,EAAG,CAAC,EACVyqC,EAAG,SAASoiB,GAAY,CAAC,EAAG,EAAG,CAAC,EAChC,MACF,IAAK,GACH7sD,EAAM,EAAG,CAAC,EACVyqC,EAAG,SAASoiB,GAAY,CAAC,EAAG,EAAG,CAAC,EAChC,MACF,IAAK,GACH7sD,EAAM,EAAG,CAAC,EACVyqC,EAAG,SAASoiB,GAAY,CAAC,EAAG,EAAG,CAAC,EAChC,MACF,IAAK,GACH7sD,EAAM,EAAG,CAAC,EACVyqC,EAAG,SAASoiB,GAAY,CAAC,EAAG,EAAG,CAAC,EAChC,MACF,IAAK,GACH7sD,EAAM,EAAG,CAAC,EACVA,EAAM,EAAG,CAAC,EACVyqC,EAAG,SAASoiB,GAAY,CAAC,EAAG,EAAG,CAAC,EAChCpiB,EAAG,SAASoiB,GAAY,CAAC,EAAG,EAAG,CAAC,EAChC,MACF,IAAK,GACH7sD,EAAM,EAAG,CAAC,EACVyqC,EAAG,SAASoiB,GAAY,CAAC,EAAG,EAAG,CAAC,EAChC,MACF,IAAK,GACH7sD,EAAM,EAAG,CAAC,EACVA,EAAM,EAAG,CAAC,EACVyqC,EAAG,SAASoiB,GAAY,CAAC,EAAG,EAAG,CAAC,EAChCpiB,EAAG,SAASoiB,GAAY,CAAC,EAAG,EAAG,CAAC,EAChC,MACF,IAAK,IACH7sD,EAAM,EAAG,CAAC,EACVA,EAAM,EAAG,CAAC,EACVyqC,EAAG,SAASoiB,GAAY,CAAC,EAAG,EAAG,CAAC,EAChCpiB,EAAG,SAASoiB,GAAY,EAAE,EAAG,EAAG,CAAC,EACjC,MACF,IAAK,IACH7sD,EAAM,EAAG,CAAC,EACVA,EAAM,EAAG,CAAC,EACVA,EAAM,EAAG,CAAC,EACVyqC,EAAG,SAASoiB,GAAY,EAAE,EAAG,EAAG,CAAC,EACjCpiB,EAAG,SAASoiB,GAAY,EAAE,EAAG,EAAG,CAAC,EACjCpiB,EAAG,SAASoiB,GAAY,EAAE,EAAG,EAAG,CAAC,EACjC,MACF,IAAK,IACH7sD,EAAM,EAAG,CAAC,EACVA,EAAM,EAAG,CAAC,EACVA,EAAM,EAAG,CAAC,EACVA,EAAM,EAAG,CAAC,EACVA,EAAM,EAAG,CAAC,EAEVyqC,EAAG,SAASoiB,GAAY,EAAE,EAAG,EAAG,CAAC,EACjCpiB,EAAG,SAASoiB,GAAY,EAAE,EAAG,EAAG,CAAC,EACjCpiB,EAAG,SAASoiB,GAAY,EAAE,EAAG,EAAG,CAAC,EACjCpiB,EAAG,SAASoiB,GAAY,EAAE,EAAG,EAAG,CAAC,EACjCpiB,EAAG,SAASoiB,GAAY,EAAE,EAAG,EAAG,CAAC,EACjC,KACJ,CACF,EACA,gBAAiB,CAAC74B,EAAQja,IAAQ,OAC1B,KAAA,CAAE,UAAAqhB,CAAc,EAAArhB,EAChB2zC,EAAWtyB,EACd,gBAAgBvH,EAAO,EAAE,EACzB,KAAM1xB,GAAMA,EAAE,KAAK,OAASsqD,EAAU,EACnCuC,KACHtzC,EAAAgyC,GAAA,YAAAA,EAAU,SAAS,KAAMthD,GAAMA,EAAE,OAAS2yB,EAAY,aAAtD,YAAArjB,EAAkE,MACjE,KAAO,EAET,OAAA0f,EAAU,iBAAmB,IAG7B4zB,KAAgBh7B,IAAWH,EAAO,GAEtC,EACA,UAAW,CAACnV,EAAM3E,IAAQ,CACpB,GAAA2E,EAAK,OAASsX,EAAS,KAAM,CAC9Bjc,EAAI,OAAO,gBAAuC,SAAW,GAC9D,MACF,CACM,KAAA,CAAE,GAAA0wB,EAAI,OAAA7O,CAAW,EAAA7hB,EACjB8uB,EAAajN,EAAO,gBACtBiN,EAAW,aACXnqB,EAAK,OAASsX,EAAS,kBACvBtX,EAAK,cAAgB+W,GAAY,UACrCoT,EAAW,YAAc,GACtB4B,EAAA,MACD,oKAAA,EAEJ,CACF,ECzdMwkB,GAAsB,EACtBC,GAAmB,EACnBC,GAAoB,GACpBC,GAAkB,EAClBC,GAAkB,EAClBC,GAAa,EAEbC,GAAe,CAACx1C,EAAgBy1C,EAAkBC,IAAsB,CACtE,KAAA,CAAE,GAAAhlB,CAAO,EAAA1wB,EACZ0wB,EAAA,MAAM,GAAG+kB,CAAQ;AAAA,EAAK,MAAMC,CAAS,EAAE,KAAK,GAAG,EAAE,KAAK,GAAG,CAAC,EAAE,CACjE,EAEMC,GAAqBC,GAAmB9jB,GAAiC,CACvE,KAAA,CAAE,UAAA/L,EAAW,IAAA/lB,CAAQ,EAAA8xB,EACrB,CAAE,OAAAjQ,CAAW,EAAA7hB,EAEnB6hB,EAAO,WAAWkE,EAAW,CAC3B,KAAMf,EAAY,KAClB,IAAK4wB,CAAA,CACN,CACH,EAEMC,GACHD,GAAmB9jB,GAAiC,CAG7C,KAAA,CAAE,UAAA/L,EAAW,IAAA/lB,CAAQ,EAAA8xB,EACrB,CAAE,UAAAzQ,EAAW,OAAAQ,EAAQ,GAAA6O,CAAA,EAAO1wB,EAIlC,GAFEqhB,EAAU,oBAAoB,EAE5BA,EAAU,6BAA6B0E,EAAWf,EAAY,IAAI,EAAG,CACvE,MAAM8wB,EAAYz0B,EAAU,iBAAiB0E,EAAWf,EAAY,IAAI,EAG3B,GAAA3D,EAAU,mBACrD0E,CACD,IAEG+vB,IAAcF,GAIPE,EAAY,GAEZA,IAAc,GAEdA,IAAc,IAEJz0B,EAAU,cAAc,CACzC,kBAAmB0E,EAAU,KAAA,CAC9B,EAEU,QAASsf,GAAS,CACpBxjB,EAAA,QAAQkE,EAAWsf,CAAI,CAAA,CAC/B,EAGMxjB,EAAA,kBAAkBkE,EAAWf,EAAY,IAAI,EAC7CnD,EAAA,SACL,GAAGR,EAAU,mBAAmB0E,CAAS,CAAC,2BAAA,EAGhD,CACF,EAEIgwB,GAA6B,CAEjC,SAAU,CACR,CAACnnB,EAAmB,aAAa,EAAIkD,GAAU,CAC7C,KAAM,CAAE,UAAA/L,EAAW,SAAAM,EAAU,IAAArmB,CAAA,EAAQ8xB,EAC/B,CAAE,UAAAzQ,EAAW,OAAAQ,CAAW,EAAA7hB,EAE1BqmB,IACKxE,EAAA,SACL,GAAGR,EAAU,mBACX0E,CACD,CAAA,6BAAA,EAGIlE,EAAA,mBAAmBwE,EAAU,CAAC,EAEzC,EACA,CAACuI,EAAmB,oBAAoB,EAAIkD,GAAU,CACpD,KAAM,CAAE,UAAA/L,EAAW,mBAAAqM,EAAoB,IAAApyB,CAAA,EAAQ8xB,EACzC,CAAE,UAAAzQ,EAAW,OAAAQ,CAAW,EAAA7hB,EAE1B+lB,EAAU,QAAUqM,EAAmB,OAClCvQ,EAAA,qBAAqBkE,EAAW,EAAG,CAAC,EAEtClE,EAAA,SACL,GAAGR,EAAU,mBAAmB0E,CAAS,CAAC,sBAAA,CAE9C,CACF,CACF,EAEaiwB,GAAuC,CAElD,YAAa,CACX,WAAY,CACV,SAAU,CACR,CAACpnB,EAAmB,OAAO,EAAIuC,GAAO,CAC9B,KAAA,CAAE,UAAApL,EAAW,IAAA/lB,CAAQ,EAAAmxB,EACrB,CAAE,OAAAtP,CAAW,EAAA7hB,EACnB6hB,EAAO,WAAWkE,EAAW,CAAE,KAAMf,EAAY,aAAc,CACjE,CACF,CACF,EAEA,gBAAiB,CAEf,qBAAsB,CAACe,EAAW6J,EAAQvJ,EAAUrmB,IAC9C4vB,GAAU,EAAU,EACjBA,EAGT,SAAU,CACR,CAAChB,EAAmB,OAAO,EAAG+mB,GAAkBT,EAAmB,EACnE,CAACtmB,EAAmB,QAAQ,EAAGinB,GAAmBX,EAAmB,CACvE,CACF,EAEA,aAAc,CAGZ,SAAU,CACR,CAACtmB,EAAmB,aAAa,EAAIkD,GAAU,CAC7C,KAAM,CAAE,UAAA/L,EAAW,SAAAM,EAAU,IAAArmB,CAAA,EAAQ8xB,EAC/B,CAAE,UAAAzQ,EAAW,OAAAQ,CAAW,EAAA7hB,EAE1BqmB,IACKxE,EAAA,SACL,GAAGR,EAAU,mBACX0E,CACD,CAAA,6BAAA,EAGIlE,EAAA,mBAAmBwE,EAAU,CAAC,EAEzC,EACA,CAACuI,EAAmB,OAAO,EAAG+mB,GAAkBR,EAAgB,EAChE,CAACvmB,EAAmB,QAAQ,EAAGinB,GAAmBV,EAAgB,CACpE,CACF,EAEA,cAAe,CACb,SAAU,CACR,CAACvmB,EAAmB,OAAO,EAAG+mB,GAAkBP,EAAiB,EACjE,CAACxmB,EAAmB,QAAQ,EAAGinB,GAAmBT,EAAiB,CACrE,CACF,EAEA,gBAAiBW,GACjB,gBAAiBA,GACjB,YAAa,CACX,SAAU,CACR,CAACnnB,EAAmB,OAAO,EAAG+mB,GAAkBN,EAAe,EAC/D,CAACzmB,EAAmB,QAAQ,EAAGinB,GAAmBR,EAAe,EAEjE,CAACzmB,EAAmB,aAAa,EAAIkD,GAAU,CAC7C,KAAM,CAAE,UAAA/L,EAAW,SAAAM,EAAU,IAAArmB,CAAA,EAAQ8xB,EAC/B,CAAE,UAAAzQ,EAAW,OAAAQ,CAAW,EAAA7hB,EAE1BqmB,IACKxE,EAAA,SACL,GAAGR,EAAU,mBACX0E,CACD,CAAA,6BAAA,EAGIlE,EAAA,mBAAmBwE,EAAU,CAAC,EAEzC,EACA,CAACuI,EAAmB,oBAAoB,EAAIkD,GAAU,CACpD,KAAM,CAAE,UAAA/L,EAAW,mBAAAqM,EAAoB,IAAApyB,CAAA,EAAQ8xB,EACzC,CAAE,UAAAzQ,EAAW,OAAAQ,CAAW,EAAA7hB,EAE1B+lB,EAAU,QAAUqM,EAAmB,OAClCvQ,EAAA,qBAAqBkE,EAAW,EAAG,CAAC,EAEtClE,EAAA,SACL,GAAGR,EAAU,mBAAmB0E,CAAS,CAAC,sBAAA,CAE9C,CACF,CACF,EAEA,YAAa,CACX,SAAU,CACR,CAAC6I,EAAmB,OAAO,EAAG+mB,GAAkBL,EAAe,EAC/D,CAAC1mB,EAAmB,QAAQ,EAAGinB,GAAmBP,EAAe,CACnE,EAEA,iBAAkB,CAACvvB,EAAW6J,EAAQvJ,EAAUrmB,IAAQ,CAChD,KAAA,CAAE,UAAAqhB,CAAc,EAAArhB,EACtB,MACE,EAAAqmB,GACAN,EAAU,QAAU1E,EAAU,cAAcgF,EAAS,KAAK,EAI9D,CACF,EAEA,KAAM,CAEJ,SAAU,CACR,CAACuI,EAAmB,OAAO,EAAG+mB,GAAkBJ,EAAU,EAC1D,CAAC3mB,EAAmB,QAAQ,EAAGinB,GAAmBN,EAAU,EAC5D,CAAC3mB,EAAmB,aAAa,EAAIkD,GAAU,CACvC,KAAA,CAAE,UAAA/L,EAAW,IAAA/lB,CAAQ,EAAA8xB,EACrB,CAAE,UAAAzQ,EAAW,OAAAQ,CAAW,EAAA7hB,EACxBwK,EAAK6W,EAAU,cAAc,CACjC,KAAM,OACN,MAAOvH,EAAO,EAAA,CACf,EAAE,CAAC,EACJ,GAAI,CAACtP,EACH,OAEI,MAAAgnB,EAASnQ,EAAU,UAAU7W,CAAE,EAC9BqX,EAAA,qBAAqBrX,EAAI,EAAGgnB,CAAM,EAClC3P,EAAA,SAAS,gCAAgC2P,CAAM,EAAE,CAC1D,CACF,CACF,CACF,EACA,gBAAkBxxB,GAAQ,CAClB,KAAA,CAAE,UAAAqhB,EAAW,OAAAQ,CAAW,EAAA7hB,EAC9B6hB,EAAO,qBAAqB,CAC1B,UAAW,CAAA,CACgB,CAC/B,EACA,UAAW,CAACld,EAAM3E,IAAQ,CAClB,KAAA,CAAE,UAAAqhB,EAAW,OAAAQ,CAAW,EAAA7hB,EACxBi2C,EACJ50B,EAAU,sBACR,GAAA40B,EAAU,YAAc,EAAG,CAEvB,MAAAC,EAAQ70B,EAAU,cAAc,CACpC,MAAOvH,EAAO,GACd,KAAM,WAAA,CACP,EAAE,CAAC,EACJ,GAAI,CAACo8B,EACH,OAGA70B,EAAU,cAAc,CACtB,MAAOvH,EAAO,GACd,KAAM,eAAA,CACP,EAAE,OACHuH,EAAU,cAAc,CACtB,MAAOvH,EAAO,GACd,KAAM,eACP,CAAA,EAAE,SACW,GACP+H,EAAA,kBAAkBq0B,EAAOlxB,EAAY,YAAY,CAE5D,CAGmB3D,EAAU,gBAAgBvH,EAAO,EAAE,EACvC,SAAW,IACxB+H,EAAO,uBAAuB,CAC5B,UAAWo0B,EAAU,UAAY,CAAA,CACN,EACtBp0B,EAAA,wBAAwB,kBAAkB,CAC/C,KAAM7E,EAAW,aACjB,SAAU,GAAA,CACX,EAEL,EACA,OAAShd,GAAQ,CACf,KAAM,CAAE,UAAAqhB,EAAW,OAAAQ,EAAQ,GAAA6O,CAAA,EAAO1wB,EAC5BrH,EAAQ0oB,EAAU,gBAAgBvH,EAAO,EAAE,EAC3Cm8B,EACJ50B,EAAU,sBAOZ,GAAI,CALiB1oB,EAAM,KACxB0sC,GAAShkB,EAAU,YAAYgkB,CAAI,IAAM5pB,GAAS,QAAA,EAIlC,CACjBoG,EAAO,uBAAuB,CAC5B,UAAWo0B,EAAU,UAAY,CAAA,CACN,EAGvB,MAAAzqC,EAAO7S,EAAM,CAAC,EAmBpB,OAjBIs9C,EAAU,UAAY,GAEjBp0B,EAAA,mBACLrW,EACA,KAAK,MAAM6V,EAAU,aAAa7V,CAAI,EAAI,CAAC,EAC3C,EAAA,EAMJ6V,EAAU,gBAAgBvH,EAAO,EAAE,EAAE,QAASiM,GAAc,CACtD1E,EAAU,YAAY0E,CAAS,IAAMtK,GAAS,UAChDoG,EAAO,QAAQkE,CAAS,CAC1B,CACD,EAEOkwB,EAAU,UAAW,CAC3B,IAAK,GAIAvlB,EAAA,SAAS,gBAAiB,EAAG,CAAC,EACjC,MACF,IAAK,GACAA,EAAA,SAAS,aAAc,EAAG,CAAC,EAC9B,MACF,IAAK,GACAA,EAAA,SAAS,cAAe,EAAG,CAAC,EAC/B,MACF,IAAK,GAAG,CACHA,EAAA,SAAS,YAAa,EAAG,CAAC,EAC7B,QAASvf,EAAM,EAAGA,EAAM,EAAGA,IACzB,QAASuqB,EAAM,EAAGA,EAAM,EAAGA,IACtBhL,EAAA,UACAvf,EAAMuqB,GAAO,IAAM,EAAI,gBAAkB,gBAC1CvqB,EACAuqB,CAAA,EAIA,MAAAwa,EAAQ70B,EAAU,cAAc,CACpC,MAAOvH,EAAO,GACd,KAAM,WAAA,CACP,EAAE,CAAC,EACAo8B,GACFr0B,EAAO,WAAWq0B,EAAO,CAAE,KAAMlxB,EAAY,aAAc,EAE7D,KACF,CACA,IAAK,GACA0L,EAAA,SAAS,YAAa,EAAG,CAAC,EAC7B,MACF,IAAK,GAAG,CACN7O,EAAO,QAAQrW,CAAI,EACnBqW,EAAO,MAAM,OAAQ,EAAG,EAAG/H,EAAO,EAAE,EACpC,KACF,CACF,CACF,CAEM,MAAAq8B,EAAW90B,EAAU,cAAc,CACvC,WAAY2D,EAAY,IAAA,CACzB,EAAE,CAAC,EACEoxB,EACJD,IAAa,OACT,EACA90B,EAAU,iBAAiB80B,EAAUnxB,EAAY,IAAI,EAC3D,OAAQixB,EAAU,UAAW,CAC3B,IAAK,GAAG,CACNT,GACEx1C,EACA;AAAA;AAAA;AAAA,wDACAo2C,CAAA,EAEF,KACF,CACA,IAAK,GAAG,CACNZ,GACEx1C,EACA;AAAA;AAAA;AAAA,4CACAo2C,CAAA,EAEF,KACF,CACA,IAAK,GAAG,CACNZ,GACEx1C,EACA;AAAA;AAAA;AAAA,0DACAo2C,CAAA,EAEF,KACF,CACA,IAAK,GAAG,CACNZ,GACEx1C,EACA;AAAA;AAAA;AAAA,yDACAo2C,CAAA,EAEF,KACF,CACA,IAAK,GAAG,CACNZ,GACEx1C,EACA;AAAA;AAAA;AAAA,oCACAo2C,CAAA,EAEF,KACF,CACA,IAAK,GAAG,CACNZ,GACEx1C,EACA;AAAA;AAAA;AAAA,qDACAo2C,CAAA,EAEF,KACF,CACF,CAOF,EACA,8BAA+B,GAC/B,gBAAiB,CAACn8B,EAAQja,IAAQ,CAC1B,KAAA,CAAE,UAAAqhB,EAAW,OAAAQ,CAAW,EAAA7hB,EACxBi2C,EACJ50B,EAAU,sBACZ,OAAOpH,IAAWH,EAAO,IAAMm8B,EAAU,YAAc,CACzD,CACF,ECnaA,SAASI,GAAkB95D,EAAcyX,EAAc,CACrD,OACE,KAAK,IAAIzX,EAAE,KAAK,IAAMyX,EAAE,KAAK,GAAG,EAAI,KAAK,IAAIzX,EAAE,KAAK,OAASyX,EAAE,KAAK,MAAM,CAE9E,CAEA,SAASsiD,GAAal6D,EAAW,CAC/B,IAAI8qC,EAAQ,EACZ,UAAW70B,KAAKjW,EACV,cAAc,KAAKiW,CAAC,IACb60B,GAAA,GAGN,OAAAA,CACT,CAEA,SAASqvB,GAAQ3jB,EAAyB,CACxC,OAAIA,IAAU,KAAa,EAEvBA,IAAUxX,EAAY,WAAmB,EACxC,SAAS,KAAKwX,CAAK,EACjBA,EAAM,WAAW,CAAC,EAAI,IAAI,WAAW,CAAC,EAAI,EADf,CAEpC,CAEA,MAAM4jB,GAAc,CAClB,CACE,SAAUn1B,EAAsBo1B,EAAgB1hD,EAAmB,CAC1D,OAAAssB,EAAU,SAAStsB,CAAM,CAClC,CACF,EACA,CACE,SAAUssB,EAAsBo1B,EAAgB1hD,EAAmB,CAC1D,OAAAssB,EAAU,aAAatsB,CAAM,CACtC,CACF,EACA,CACE,SAAUssB,EAAsBo1B,EAAgB1hD,EAAmB,CACjE,OAAO,KAAK,IACVssB,EAAU,SAAStsB,CAAM,EAAIssB,EAAU,aAAatsB,CAAM,CAAA,CAE9D,CACF,EACA,CACE,SAAUssB,EAAsBo1B,EAAgB1hD,EAAmB,CACjE,OAAO,KAAK,IACVssB,EAAU,SAAStsB,CAAM,EACvBuhD,GAAaj1B,EAAU,mBAAmBtsB,CAAM,CAAC,CAAA,CAEvD,CACF,EACA,CACE,SAAUssB,EAAsB7W,EAAezV,EAAmB,CAChE,OAAO,KAAK,IACVshD,GAAkB7rC,EAAIzV,CAAM,EAAIwhD,GAAQl1B,EAAU,aAAatsB,CAAM,CAAC,CAAA,CAE1E,CACF,EACA,CACE,SAAUssB,EAAsB7W,EAAezV,EAAmB,CAChE,OAAO,KAAK,IACVuhD,GAAaj1B,EAAU,mBAAmBtsB,CAAM,CAAC,EAC/CshD,GAAkB7rC,EAAIzV,CAAM,EAC1BwhD,GAAQl1B,EAAU,aAAatsB,CAAM,CAAC,CAAA,CAE9C,CACF,EACA,CACE,SAAUssB,EAAsB7W,EAAezV,EAAmB,CAChE,OAAO,KAAK,IACVssB,EAAU,aAAatsB,CAAM,EAC3BuhD,GAAaj1B,EAAU,mBAAmBtsB,CAAM,CAAC,EACjDshD,GAAkB7rC,EAAIzV,CAAM,CAAA,CAElC,EACA,SAAUssB,EAAsBo1B,EAAgB1hD,EAAmB,CACjE,OACE,KAAK,MAAMssB,EAAU,gBAAkB,CAAC,EACxC,KAAK,IACHA,EAAU,aAAatsB,CAAM,EAC3BuhD,GAAaj1B,EAAU,mBAAmBtsB,CAAM,CAAC,CAAA,CAGzD,CACF,CACF,EAEA,SAAS2hD,GACPF,EAKwB,CACjB,MAAA,CACL,CAAC5nB,EAAmB,UAAU,EAAIkD,GAAU,OAC1C,MAAMtnB,EAAKsnB,EAAM,UACX,CAAE,UAAAzQ,EAAW,OAAAQ,GAAWiQ,EAAM,IAC9Br6B,EAAMoqB,EAAO,gBACb80B,EAAat1B,EAAU,mBAAmB7W,CAAE,EAClD,UAAW9rB,KAAQ83D,EAAa,CAC9B,MAAMrjB,EAAU9R,EACb,gBAAgBA,EAAU,cAAc7W,EAAG,KAAK,CAAC,EACjD,OAAQ8sB,GAAS,CAACjW,EAAU,gBAAgBiW,EAAM9sB,CAAE,CAAC,EACxD,UAAW8sB,KAAQnE,EAAS,CAC1B,MAAMvD,EAASlxC,EAAK2iC,EAAW7W,EAAI8sB,CAAI,EACjC/D,EAAalS,EAAU,mBAAmBiW,CAAI,EACpDzV,EAAO,SAAS,sBAAsB0R,CAAU,QAAQ3D,CAAM,KAAK,GAC/DjuB,EAAAlK,EAAA,gBAAAk/C,KAAAh1C,EAAAg1C,GAA+B,IAC/Bl/C,EAAA,eAAek/C,CAAU,EAAE,KAAK,CAClC,WAAApjB,EACA,OAAA3D,CAAA,CACD,EACM/N,EAAA,OAAOrX,EAAI8sB,EAAM1H,CAAM,CAChC,CACF,CACF,CAAA,CAEJ,CAEO,MAAMgnB,GAA0CJ,GAAY,IACjE,CAAC16D,EAAGW,IAAM,CACF,MAAAk6D,EAAa,SAASl6D,EAAI,CAAC,GAC1B,MAAA,CACL,8BAA+B,GAC/B,YAAa,CAAC,EACd,YAAa,CACX,CAACk6D,CAAU,EAAG,CACZ,SAAUD,GAAkB56D,CAAC,CAC/B,CACF,EACA,gBAAkBkkB,GAAQ,CACxBA,EAAI,OAAO,eAAe,CACxB,eAAgB,CAAC,CAAA,CACI,CACzB,EACA,OAASA,GAAQ,CACf,KAAM,CAAE,UAAAqhB,EAAW,OAAAQ,EAAQ,GAAA6O,CAAA,EAAO1wB,EAC5BvI,EAAMoqB,EAAO,gBACfR,EAAU,cAAc,IAAM,GAC7BqP,EAAA,SAASimB,EAAY,EAAG,CAAC,EAE1B,OAAO,KAAKl/C,EAAI,cAAc,EAAE,OAAS,GACxCi5B,EAAA,MACD;AAAA,EAAsC,OAAO,QAC3Cj5B,EAAI,cAAA,EAEH,IAAI,CAAC,CAACk/C,EAAYE,CAAO,IACxBA,EACG,IAAI,CAAC,CAAE,WAAAtjB,EAAY,OAAA3D,CAAO,IAAM,GAAG2D,CAAU,KAAK3D,CAAM,GAAG,EAC3D,KAAK,GAAG,CAAA,EAEZ,KAAK;AAAA,CAAI,CAAC,EAAA,EAEfn4B,EAAI,eAAiB,IAErBoqB,EAAO,cAAc,CAEzB,EACA,gBAAiB,CAAC5H,EAAQja,IAAQ,CAC1B,KAAA,CAAE,UAAAqhB,CAAc,EAAArhB,EAElB,OAAAia,IAAWH,EAAO,GAEbuH,EAAU,gBAAgBvH,EAAO,EAAE,EAAE,SAAW,EAElD,EACT,CAAA,CAEJ,CACF,EC3KMg9B,GAAuB,CAAC92C,EAAgB+2C,IAAoB,CAC1D,KAAA,CAAE,GAAArmB,CAAO,EAAA1wB,EACZ0wB,EAAA,MACD,qBACEqmB,EAAS,gBAAkB,aAC7B,+BACA,CAAE,YAAa,GAAM,QAAS9oB,GAAQ,IAAK,CAAA,CAE/C,EAEM+oB,GAAuB,CAACh3C,EAAgB3K,IAAgB,CACtD,KAAA,CAAE,GAAAq7B,CAAO,EAAA1wB,EACZ0wB,EAAA,MACD,2BAA2Br7B,CAAG,IAC5BA,IAAQ,EAAI,eAAiB,cAC/B;AAAA,EAAM,MAAMA,CAAG,EAAE,KAAK,GAAG,EAAE,KAAK,GAAG,CAAC,GACpC,CAAE,QAAS44B,GAAQ,IAAK,CAAA,CAE5B,EAGagpB,GAAyC,CACpD,8BAA+B,GAC/B,gBAAiBC,GACjB,cAAcl3C,EAAK,CACX,KAAA,CAAE,OAAA6hB,CAAW,EAAA7hB,EACZ6hB,EAAA,MAAMmb,GAAiB,CAAE,IAAK,EAAG,OAAQ,CAAK,EAAAljB,EAAO,EAAE,CAChE,EACA,YAAa,CACX,CAACkL,EAAY,IAAI,EAAG,CAClB,SAAU,CACR,CAAC4J,EAAmB,UAAU,EAAGuoB,GAAgBC,EAAmB,CACtE,CACF,CACF,EACA,YAAa,CACX,CAACpa,EAAe,EAAG,CACjB,SAAU,CACR,CAACpO,EAAmB,OAAO,EAAIkD,GAAU,CACvCA,EAAM,IAAI,OAAO,WAAWA,EAAM,UAAW,CAC3C,KAAM9M,EAAY,KAClB,IAAK,EAAA,CACN,CACH,CACF,CACF,CACF,EACA,OAAShlB,GAAQ,CACf,KAAM,CAAE,UAAAqhB,EAAW,OAAAQ,EAAQ,GAAA6O,CAAA,EAAO1wB,EAC5Bq3C,EAAQh2B,EAAU,gBAAgBvH,EAAO,EAAE,EAC3Cw9B,EAAmBD,EAAM,KAAMjvD,GACnCi5B,EAAU,6BAA6Bj5B,EAAG48B,EAAY,IAAI,CAAA,EAE5D,GAAIsyB,EAAkB,CACpBN,GACEh3C,EACAqhB,EAAU,iBAAiBi2B,EAAkBtyB,EAAY,IAAI,CAAA,EAE/D,MACF,CACM,MAAAuyB,EAAWF,EAAM,KAAMjvD,GAAMA,EAAE,KAAK,OAAS40C,EAAe,EAClE,UAAW1F,KAAQjW,EAAU,gBAAgBvH,EAAO,EAAE,EAChDy9B,EACK11B,EAAA,QAAQ01B,EAAUjgB,CAAI,EAE7BzV,EAAO,QAAQyV,CAAI,EAGvBwf,GAAqB92C,EAAK,EAAK,CACjC,CACF,EAEaw3C,GAAyC,CACpD,8BAA+B,GAC/B,gBAAiBN,GACjB,cAAcl3C,EAAK,CACX,KAAA,CAAE,OAAA6hB,CAAW,EAAA7hB,EACZ6hB,EAAA,MAAMob,GAAiB,CAAE,IAAK,EAAG,OAAQ,CAAK,EAAAnjB,EAAO,EAAE,EACvD+H,EAAA,MAAMob,GAAiB,CAAE,IAAK,EAAG,OAAQ,CAAK,EAAAnjB,EAAO,EAAE,EACvD+H,EAAA,MAAMob,GAAiB,CAAE,IAAK,EAAG,OAAQ,CAAK,EAAAnjB,EAAO,EAAE,EACvD+H,EAAA,MAAMob,GAAiB,CAAE,IAAK,EAAG,OAAQ,CAAK,EAAAnjB,EAAO,EAAE,EACvD+H,EAAA,MAAMob,GAAiB,CAAE,IAAK,EAAG,OAAQ,CAAK,EAAAnjB,EAAO,EAAE,CAChE,EACA,YAAa,CACX,CAACkL,EAAY,IAAI,EAAG,CAClB,SAAU,CACR,CAAC4J,EAAmB,UAAU,EAAGuoB,GAAgBC,EAAmB,CACtE,CACF,CACF,EACA,YAAa,CACX,CAACna,EAAe,EAAG,CACjB,SAAU,CACR,CAACrO,EAAmB,OAAO,EAAIkD,GAAU,CACvCA,EAAM,IAAI,OAAO,WAAWA,EAAM,UAAW,CAC3C,KAAM9M,EAAY,KAClB,IAAK,EAAA,CACN,CACH,CACF,CACF,CACF,EACA,OAAShlB,GAAQ,CACT,KAAA,CAAE,UAAAqhB,EAAW,OAAAQ,CAAW,EAAA7hB,EACxBq3C,EAAQh2B,EAAU,gBAAgBvH,EAAO,EAAE,EAC3Cw9B,EAAmBD,EAAM,KAAMjvD,GACnCi5B,EAAU,6BAA6Bj5B,EAAG48B,EAAY,IAAI,CAAA,EAE5D,GAAIsyB,EAAkB,CACpBN,GACEh3C,EACAqhB,EAAU,iBAAiBi2B,EAAkBtyB,EAAY,IAAI,CAAA,EAE/D,MACF,CACM,MAAAuyB,EAAWF,EAAM,KAAMjvD,GAAMA,EAAE,KAAK,OAAS60C,EAAe,EAClE,UAAW3F,KAAQjW,EAAU,gBAAgBvH,EAAO,EAAE,EAChDy9B,EACK11B,EAAA,QAAQ01B,EAAUjgB,CAAI,EAE7BzV,EAAO,QAAQyV,CAAI,EAGvBwf,GAAqB92C,EAAK,EAAI,CAChC,CACF,EAEay3C,GAAyC,CACpD,8BAA+B,GAC/B,gBAAiBP,GACjB,cAAcl3C,EAAK,CACX,KAAA,CAAE,OAAA6hB,CAAW,EAAA7hB,EACZ6hB,EAAA,MAAMqb,GAAiB,CAAE,IAAK,EAAG,OAAQ,CAAK,EAAApjB,EAAO,EAAE,CAChE,EACA,YAAa,CACX,CAACkL,EAAY,IAAI,EAAG,CAClB,SAAU,CACR,CAAC4J,EAAmB,UAAU,EAAGuoB,GAAgBC,EAAmB,CACtE,CACF,CACF,EACA,YAAa,CACX,CAACla,EAAe,EAAG,CACjB,SAAU,CACR,CAACtO,EAAmB,OAAO,EAAIkD,GAAU,CACvCA,EAAM,IAAI,OAAO,WAAWA,EAAM,UAAW,CAC3C,KAAM9M,EAAY,KAClB,IAAK,EAAA,CACN,CACH,CACF,CACF,CACF,EACA,OAAShlB,GAAQ,CACT,KAAA,CAAE,UAAAqhB,EAAW,OAAAQ,CAAW,EAAA7hB,EACxBq3C,EAAQh2B,EAAU,gBAAgBvH,EAAO,EAAE,EAC3Cw9B,EAAmBD,EAAM,KAAMjvD,GACnCi5B,EAAU,6BAA6Bj5B,EAAG48B,EAAY,IAAI,CAAA,EAE5D,GAAIsyB,EAAkB,CACpBN,GACEh3C,EACAqhB,EAAU,iBAAiBi2B,EAAkBtyB,EAAY,IAAI,CAAA,EAE/D,MACF,CACM,MAAAuyB,EAAWF,EAAM,KAAMjvD,GAAMA,EAAE,KAAK,OAAS80C,EAAe,EAClE,GAAI,CAACqa,EACH,OAEI,MAAAhmB,EAAQlQ,EAAU,SAASk2B,CAAQ,EACzC11B,EAAO,aAAa01B,EAAUl2B,EAAU,cAAck2B,CAAQ,CAAC,EACzD,MAAAG,EAAiBr2B,EAAU,UAAUk2B,CAAQ,EAC7CI,EAAapmB,EAAQmmB,EACvBC,IAAe,GACV91B,EAAA,qBAAqB01B,EAAU,EAAGI,CAAU,EAErD,IAAIC,EAAgBrmB,EACT,UAAA+F,KAAQjW,EAAU,cAAc,CACzC,MAAOvH,EAAO,GACd,KAAM,CAAC,iBAAkB,CAAE,KAAM,cAAe,YAAaA,EAAO,GAAI,CAAA,CACzE,EAAG,CACI,MAAA+9B,EAAiBx2B,EAAU,UAAUiW,CAAI,EAC/C,GAAIugB,EAAiBD,EAAe,CAClC/1B,EAAO,SAAS,GAAGyV,EAAK,KAAK,IAAI,yBAAyB,EACnDzV,EAAA,OAAOyV,EAAMigB,EAAUM,CAAc,EAC5C,KACF,CACOh2B,EAAA,OAAOyV,EAAMigB,EAAUM,CAAc,EAC5Ch2B,EAAO,qBAAqB01B,EAAU,CAACM,EAAgB,CAAC,EACjDh2B,EAAA,QAAQ01B,EAAUjgB,CAAI,EACZsgB,GAAAC,CACnB,CACIx2B,EAAU,cAAc,CAAE,KAAM6b,EAAiB,CAAA,EAAE,SAAW,GAChE4Z,GAAqB92C,EAAK,EAAK,CACnC,CACF,EAEA,SAASk3C,GAAUj9B,EAAgBja,EAA6B,CACxD,KAAA,CAAE,UAAAqhB,CAAc,EAAArhB,EAGtB,OAAOia,IAAWH,EAAO,IAAMuH,EAAU,gBAAgBpH,CAAM,EAAE,SAAW,CAC9E,CAEA,SAASk9B,GAAgBhyB,EAAsC,CAC7D,OAAQ2M,GAAmC,CACzC,KAAM,CAAE,UAAA/L,EAAW,QAAAb,EAAS,aAAA+K,EAAc,IAAAjwB,GAAQ8xB,EAC5C,CAAE,OAAAjQ,EAAQ,UAAAR,CAAc,EAAArhB,EAC9B,GAAI,CAACqhB,EAAU,cAAc0E,EAAU,KAAK,EAE1C,OAEE,GAAAb,GAAW,MAAQ+K,GAAgB,KAC/B,MAAA,IAAI,MAAM,6CAA6C,EAEzD,MAAA8B,GAAU7M,EAAQ,KAAO,GAAK,EACpC,GAAI6M,GAAU,EACL,MAAA,CAAE,OAAQ,IAEjBlQ,EAAO,iBAAiBkE,EAAWkK,EAAc8B,EAAQ5M,CAAW,CACtE,CAEJ,CAEA,SAASiyB,GAAoB/hD,EAAa,CACxC,OAAQA,EAAK,CACX,IAAK,GACI,MAAA,cACT,IAAK,GACI,MAAA,iCACT,QACE,MAAO,0BAA0BA,CAAG,SACxC,CACF,CCnPA,MAAMxF,GAAY,CAChB,SACA,aACA,aACA,SACA,YACA,cACA,kBACA,aACF,EACMioD,GAAY,EAEZC,GAAsD,CAC1D,OAAQ,CAAC,EAAG,CAAC,EACb,OAAQ,CAAC,EAAG,CAAC,EACb,WAAY,CAAC,EAAG,CAAC,EACjB,WAAY,CAAC,EAAG,CAAC,EACjB,YAAa,CAAC,EAAG,CAAC,EAClB,cAAe,CAAC,EAAG,CAAC,EACpB,kBAAmB,CAAC,EAAG,CAAC,EACxB,cAAe,CAAC,EAAG,CAAC,CACtB,EAEMC,GAAwD,CAC5D,OAAQ,CAAC,EAAG,CAAC,EACb,OAAQ,CAAC,EAAG,CAAC,EACb,WAAY,CAAC,EAAG,CAAC,EACjB,WAAY,CAAC,EAAG,CAAC,EACjB,YAAa,CAAC,EAAG,CAAC,EAClB,cAAe,CAAC,EAAG,CAAC,EACpB,kBAAmB,CAAC,EAAG,CAAC,EACxB,cAAe,CAAC,EAAG,CAAC,CACtB,EAEMC,GAAU17D,IAA+B,CAAE,IAAKA,EAAE,CAAC,EAAG,OAAQA,EAAE,CAAC,CAAE,GAEnE8gD,GAA2B,CAC/B,SAAU,CACR,CAACzO,EAAmB,OAAO,EAAIkD,GAAU,CACvCA,EAAM,IAAI,OAAO,WAAWA,EAAM,UAAW,CAC3C,KAAM9M,EAAY,UAClB,IAAK,CAAA,CACN,CACH,CACF,CACF,EAMakzB,GAAuC,CAClD,YAAa,CACX,OAAQ7a,GACR,WAAYA,GACZ,WAAYA,EACd,EACA,4BAA6B,GAC7B,gBAAkBr9B,GAAQ,CACxBA,EAAI,OAAO,eAAe,CACxB,QAAS,EAAA,CACV,CACH,EACA,cAAgBA,GAAQ,CACtB,UAAW27B,KAAQ9rC,GACjBmQ,EAAI,OAAO,cAAc8Z,EAAO,GAAI,CAAE,KAAA6hB,EAAM,EACxC37B,EAAA,OAAO,MAAM27B,EAAMsc,GAAOD,GAAkBrc,CAAI,CAAC,EAAG7hB,EAAO,EAAE,CAErE,EACA,gBAAiB,CAACG,EAAQja,IAAQ,CAC1B,KAAA,CAAE,UAAAqhB,CAAc,EAAArhB,EAClB,GAAAia,IAAWH,EAAO,GAAI,CAClB,MAAAq+B,EACJ92B,EAAU,gBAAgBpH,CAAM,EAAE,OAChCoH,EAAU,UAAUpH,CAAM,EAAE,KAAK,SACnC69B,GACF,OAAKK,GACCn4C,EAAA,GAAG,MAAM,uCAAuC,EAE/C,CAACm4C,CACV,CAEA,MAAMxoC,EAAQ0R,EAAU,gBAAgBvH,EAAO,EAAE,EAa7C,OAZsBs+B,GAEtBzoC,EAAM,QAAUmoC,IAEhBnoC,EAAM,MAAOsf,GAAS,CAChB,GAAA,CAACA,EAAK,KAAK,KAAY,MAAA,IAAI,MAAM,MAAM,EAC3C,MAAMopB,EAAcD,EAAKnpB,EAAK,KAAK,IAAI,EAEvC,OAAOopB,GAAel+B,GAAc8U,EAAK,KAAMgpB,GAAOI,CAAW,CAAC,CAAA,CACnE,GAGgBN,EAAe,GAC9B/3C,EAAA,GAAG,MAAM,EAAE,EACR,IAEF,EACT,EACA,UAAW,CAAC2E,EAAM3E,IAAQ,CAElB,MAAA8uB,EAAa9uB,EAAI,OAAO,cAAc,EACvC8uB,EAAW,SACV9uB,EAAI,UAAU,gBAAgB8Z,EAAO,EAAE,EAAE,SAAWg+B,KACtD93C,EAAI,GAAG,MACL,8EAAA,EAEF8uB,EAAW,QAAU,IAIrBnqB,EAAK,OAASsX,EAAS,QAGvBjc,EAAI,UAAU,gBAAgB8Z,EAAO,EAAE,EAAE,SAAW,GACtD9Z,EAAI,GAAG,MACL,qFAAA,CAGN,EACA,OAASA,GAAQ,CACT,KAAA,CAAE,UAAAqhB,EAAW,GAAAqP,CAAO,EAAA1wB,EAC1B,GAAMA,EAAI,OAAO,cAAA,EAA+B,QAOhD,UAAWqlC,KAAQhkB,EAAU,gBAAgBvH,EAAO,EAAE,EAChD,CAACurB,EAAK,OAGIhkB,EAAU,SAASgkB,CAAI,GACxB,GAITrlC,EAAA,GAAG,eAAeqlC,EAAM,CAC1B,KAAM,CAAC,QAAQ,CAAA,CAChB,CAOL,CACF,EC3JaiT,GAA2C,CACtD,8BAA+B,GAC/B,YAAa,CACX,iBAAkB,CAChB,SAAU,CACR,CAAC1pB,EAAmB,gBAAgB,EAAIkD,GAAU,CAChD,MAAMtnB,EAAKsnB,EAAM,UACX,CAAE,UAAAzQ,EAAW,OAAAQ,GAAWiQ,EAAM,IAC9BP,EAAQlQ,EAAU,SAAS7W,CAAE,EAC/B+mB,EAAQ,GACH1P,EAAA,qBAAqBrX,EAAI+mB,EAAO,CAAC,EAEpC,MAAAgnB,EAAYl3B,EAAU,aAAa7W,CAAE,EACrCgnB,EAASnQ,EAAU,UAAU7W,CAAE,EAC9BqX,EAAA,qBAAqBrX,EAAI,EAAG+tC,CAAS,EACxCA,EAAY/mB,GACP3P,EAAA,mBAAmBrX,EAAI+tC,EAAY/mB,CAAM,CAEpD,CACF,CACF,CACF,EACA,OAASxxB,GAAQ,CACT,KAAA,CAAE,UAAAqhB,EAAW,GAAAqP,CAAO,EAAA1wB,EACtBqhB,EAAU,cAAc,IAAM,GAC7BqP,EAAA,SAAS,iBAAkB,EAAG,CAAC,EAG1BrP,EAAA,gBAAgBvH,EAAO,EAAE,EAAE,QAASiM,GAC5C2K,EAAG,eAAe3K,EAAW,CAC3B,KAAM,CACJ,CACE,KAAM,WACN,QAAS,CAEP,CAAE,UAAW,SAAU,OAAQ,CAAE,EAEjC,CAAE,UAAW,SAAU,OAAQ,CAAE,CACnC,CACF,EAEA,CAAE,KAAM,oBAAqB,KAAMA,EAAU,IAAK,CACpD,CAAA,CACD,CAAA,CAEL,EACA,gBAAiB,CAAC9L,EAAQja,IAAQ,CAC1B,KAAA,CAAE,UAAAqhB,CAAc,EAAArhB,EAGtB,OACEia,IAAWH,EAAO,IAAMuH,EAAU,gBAAgBpH,CAAM,EAAE,SAAW,CAEzE,CACF,ECrDau+B,GAA6C,CACxD,8BAA+B,GAC/B,YAAa,CACX,aAAc,CACZ,SAAU,CACR,CAAC5pB,EAAmB,UAAU,EAAIkD,GAAU,CAC1C,MAAMtnB,EAAKsnB,EAAM,UACX,CAAE,UAAAzQ,EAAW,OAAAQ,GAAWiQ,EAAM,IAC9B2mB,EAAap3B,EAChB,cAAc,CAAE,KAAM5F,GAAS,QAAU,CAAA,EACzC,IAAKsK,GAAc1E,EAAU,SAAS0E,CAAS,CAAC,EAChD,OAAO,CAACxpC,EAAGyX,IAAMzX,EAAIyX,EAAG,CAAC,EACxBykD,EAAa,GACR52B,EAAA,qBAAqBrX,EAAI,EAAGiuC,CAAU,CAEjD,CACF,CACF,CACF,EACA,OAASz4C,GAAQ,CACT,KAAA,CAAE,UAAAqhB,EAAW,GAAAqP,CAAO,EAAA1wB,EACtBqhB,EAAU,cAAc,IAAM,GAC7BqP,EAAA,SAAS,aAAc,EAAG,CAAC,EAI7BrP,EAAA,gBAAgBvH,EAAO,EAAE,EACzB,QAASiM,GAAc2K,EAAG,eAAe3K,CAAS,CAAC,CACxD,EACA,gBAAiB,CAAC9L,EAAQja,IAAQ,CAC1B,KAAA,CAAE,UAAAqhB,CAAc,EAAArhB,EAGtB,OACEia,IAAWH,EAAO,IAAMuH,EAAU,gBAAgBpH,CAAM,EAAE,SAAW,CAEzE,CACF,ECtCay+B,GAA+C,CAC1D,8BAA+B,GAC/B,YAAa,CACX,YAAa,CACX,SAAU,CACR,CAAC9pB,EAAmB,gBAAgB,EAAIkD,GAAU,CAChD,KAAM,CAAE,UAAWtnB,EAAI,iBAAAmuC,CAAA,EAAqB7mB,EACxC,GAAAtnB,EAAG,QAAUmuC,EAAiB,MAAO,CACvC,KAAM,CAAE,OAAA92B,EAAQ,UAAAR,GAAcyQ,EAAM,IAChC,IAAA8mB,EAAUv3B,EAAU,SAASs3B,CAAgB,EACjD,GAAI,CAACC,EAAS,OACd,MAAMhQ,EAAavnB,EAAU,4BAC3BvH,EAAO,GACPtP,EAAG,IAAA,EAEL,UAAWkgC,KAAa9B,EACtB,GAAI/mB,EAAO,MAAM,YAAa6oB,EAAW5wB,EAAO,EAAE,IAChD8+B,IACIA,IAAY,GAAG,KAGzB,CACF,CACF,CACF,CACF,EACA,OAAS54C,GAAQ,CACT,KAAA,CAAE,UAAAqhB,EAAW,GAAAqP,CAAO,EAAA1wB,EACtBqhB,EAAU,cAAc,IAAM,GAC7BqP,EAAA,SAAS,YAAa,EAAG,CAAC,EAGrBrP,EAAA,gBAAgBvH,EAAO,EAAE,EAAE,QAASiM,GAC5C2K,EAAG,eAAe3K,EAAW,CAC3B,KAAM,CACJ,CACE,KAAM,WACN,QAAS,CAEP,CAAE,UAAW,SAAU,OAAQ,CAAE,EAEjC,CAAE,UAAW,SAAU,OAAQ,CAAE,CACnC,CACF,EAEA,CAAE,KAAM,oBAAqB,KAAMA,EAAU,IAAK,CACpD,CAAA,CACD,CAAA,CAEL,EACA,gBAAiB,CAAC9L,EAAQja,IAAQ,CAC1B,KAAA,CAAE,UAAAqhB,CAAc,EAAArhB,EAGtB,OACEia,IAAWH,EAAO,IAAMuH,EAAU,gBAAgBpH,CAAM,EAAE,SAAW,CAEzE,CACF,ECzDa4+B,GAA8C,CACzD,8BAA+B,GAC/B,YAAa,CACX,sBAAuB,CACrB,SAAU,CACR,CAACjqB,EAAmB,UAAU,EAAIkD,GAAU,CACpC,KAAA,CAAE,UAAA/L,CAAc,EAAA+L,EAChB,CAAE,OAAAjQ,CAAO,EAAIiQ,EAAM,IAClBjQ,EAAA,qBAAqBkE,EAAW,EAAG,CAAC,CAC7C,EACA,CAAC6I,EAAmB,oBAAoB,EAAIkD,GAAU,CACpD,KAAM,CAAE,UAAWtnB,EAAI,mBAAA4nB,CAAA,EAAuBN,EACxC,CAAE,OAAAjQ,CAAO,EAAIiQ,EAAM,IACrBM,EAAmB,QAAU5nB,EAAG,OAC3BqX,EAAA,qBAAqBrX,EAAI,IAAO,GAAK,CAEhD,CACF,CACF,EACA,kBAAmB,CACjB,SAAU,CACR,CAACokB,EAAmB,gBAAgB,EAAIkD,GAAU,CAC1C,KAAA,CAAE,iBAAA6mB,CAAqB,EAAA7mB,EACvB,CAAE,OAAAjQ,CAAO,EAAIiQ,EAAM,IACzBjQ,EAAO,WAAW82B,EAAkB,CAClC,KAAM3zB,EAAY,YAClB,YAAa,WAAA,CACd,CACH,CACF,CACF,CACF,EACA,OAAShlB,GAAQ,CACT,KAAA,CAAE,UAAAqhB,EAAW,GAAAqP,CAAO,EAAA1wB,EACtBqhB,EAAU,cAAc,IAAM,IAC7BqP,EAAA,SAAS,sBAAuB,EAAG,CAAC,EACpCA,EAAA,SAAS,kBAAmB,EAAG,CAAC,GAIlCrP,EAAA,gBAAgBvH,EAAO,EAAE,EACzB,QAASiM,GAAc2K,EAAG,eAAe3K,CAAS,CAAC,CACxD,EACA,gBAAiB,CAAC9L,EAAQja,IAAQ,CAC1B,KAAA,CAAE,UAAAqhB,CAAc,EAAArhB,EAGtB,OACEia,IAAWH,EAAO,IAAMuH,EAAU,gBAAgBpH,CAAM,EAAE,SAAW,CAEzE,CACF,ECpDa6+B,GAA8C,CACzD,8BAA+B,GAC/B,YAAa,CACX,iBAAkB,CAChB,SAAU,CACR,CAAClqB,EAAmB,UAAU,EAAIkD,GAAU,CACpC,KAAA,CAAE,UAAA/L,CAAc,EAAA+L,EAChB,CAAE,OAAAjQ,CAAO,EAAIiQ,EAAM,IAClBjQ,EAAA,qBAAqBkE,EAAW,EAAG,CAAC,CAC7C,EACA,CAAC6I,EAAmB,oBAAoB,EAAIkD,GAAU,CAC9C,KAAA,CAAE,UAAWtnB,CAAO,EAAAsnB,EACpB,CAAE,OAAAjQ,CAAO,EAAIiQ,EAAM,IAClBjQ,EAAA,qBAAqBrX,EAAI,IAAO,GAAK,CAC9C,CACF,CACF,CACF,EACA,OAASxK,GAAQ,CACT,KAAA,CAAE,UAAAqhB,EAAW,GAAAqP,CAAO,EAAA1wB,EACtBqhB,EAAU,cAAc,IAAM,GAC7BqP,EAAA,SAAS,iBAAkB,EAAG,CAAC,EAG1BrP,EAAA,gBAAgBvH,EAAO,EAAE,EAAE,QAASiM,GAC5C2K,EAAG,eAAe3K,EAAW,CAC3B,KAAM,CACJ,iBAEA,SAEA,CAAE,KAAM,oBAAqB,KAAMA,EAAU,IAAK,CACpD,CAAA,CACD,CAAA,CAEL,EACA,gBAAiB,CAAC9L,EAAQja,IAAQ,CAC1B,KAAA,CAAE,UAAAqhB,CAAc,EAAArhB,EAGtB,OACEia,IAAWH,EAAO,IAAMuH,EAAU,gBAAgBpH,CAAM,EAAE,SAAW,CAEzE,CACF,EC1Ca8+B,GAAuC,CAClD,YAAa,CACX,KAAM,CACJ,SAAU,CACR,CAACnqB,EAAmB,UAAU,EAAIkD,GAAU,CACpC,KAAA,CAAE,UAAA/L,EAAW,IAAA/lB,CAAQ,EAAA8xB,EACrB,CAAE,UAAAzQ,EAAW,OAAAQ,CAAW,EAAA7hB,EAC1BqhB,EAAU,cAAc0E,EAAU,KAAK,GACzClE,EAAO,QAAQkE,EAAU,MAAO,CAAC3K,EAAY,MAAM,CAAC,CAExD,CACF,CACF,CACF,EACA,qBAAsB,CAAC2K,EAAW6J,EAAQvJ,EAAUrmB,IAAQ,CAC1D,KAAM,CAAE,UAAAqhB,EAAW,OAAAQ,EAAQ,GAAA6O,CAAA,EAAO1wB,EAClC,OAAKqmB,GAGD,KAAK,IAAIA,EAAS,KAAK,IAAMN,EAAU,KAAK,GAAG,EAAI,GAC9ClE,EAAA,SACL,GAAGR,EAAU,mBACXgF,CAAA,CACD,qBAAqBhF,EAAU,mBAC9B0E,CACD,CAAA,0BAAA,EAEI,GAVA6J,CAaX,EACA,8BAA+B,GAC/B,gBAAiB,CAAC3V,EAAQja,IAAQ,CAC1B,KAAA,CAAE,UAAAqhB,CAAc,EAAArhB,EAEtB,OACEia,IAAWH,EAAO,IAAMuH,EAAU,gBAAgBpH,CAAM,EAAE,SAAW,CAEzE,EACA,OAASja,GAAQ,CACT,KAAA,CAAE,UAAAqhB,EAAW,GAAAqP,CAAO,EAAA1wB,EAGtB,GAAAqhB,EAAU,cAAc,IAAM,EAAG,CACnC,QAASlQ,EAAM,EAAGA,GAAO,EAAGA,IAC1B,QAASutB,EAAS,EAAGA,GAAU,EAAGA,IAChChO,EAAG,SAAS,YAAa,CAAE,IAAAvf,EAAK,OAAAutB,CAAQ,CAAA,EAG5C,MACF,CAGArd,EACG,gBAAgBvH,EAAO,EAAE,EACzB,OAAQiM,GAAc1E,EAAU,iBAAiB0E,CAAS,EAAE,MAAM,EAClE,QAASizB,GAAS,CACjB,KAAM,CAAE,IAAA7nC,EAAK,OAAAutB,GAAWsa,EAAK,KAC7B,QAASrT,EAAK,GAAIA,GAAM,EAAGA,IACzB,QAASC,EAAK,GAAIA,GAAM,EAAGA,IACtBlV,EAAA,SAAS,YAAa,CAAE,IAAKvf,EAAMw0B,EAAI,OAAQjH,EAASkH,CAAA,CAAI,CAEnE,CACD,EAGHvkB,EACG,cAAc,CACb,MAAOvH,EAAO,GACd,KAAM2B,GAAS,SACf,KAAM,CAAEsK,GAAc,CAACA,EAAU,KAAK,GAAG,CAAA,CAC1C,EACA,QAASA,GAAc,CACtB,KAAM,CAAE,IAAA5U,EAAK,OAAAutB,GAAW3Y,EAAU,KAE/B2K,EAAA,mBAAmB3K,EAAWrK,GAAY,KAAM,CACjD,CACE,KAAME,GAAc,KACpB,KAAM,CAAE,IAAKzK,EAAM,EAAG,OAAAutB,CAAO,CAC/B,CAAA,CACD,EAEEhO,EAAA,WAAW3K,EAAW,EAAG,CAAC,EAE7B2K,EAAG,eAAe3K,EAAW,CAC3B,MAAOjM,EAAO,GACd,iBAAkBiM,EAClB,OAAShxB,GACPwlB,GAA0BwL,EAAU,KAAMhxB,EAAO,IAAI,EAAI,CAAA,CAC5D,CAAA,CACF,CACL,CACF,ECKakkD,GAA2C,CApGZ,CAC1C,cAAgBj5C,GAAQ,CAChB,KAAA,CAAE,OAAA6hB,CAAW,EAAA7hB,EACZ6hB,EAAA,MAAM,cAAe,CAAE,IAAK,EAAG,OAAQ,CAAK,EAAA/H,EAAO,EAAE,EACrD+H,EAAA,MAAM,cAAe,CAAE,IAAK,EAAG,OAAQ,CAAK,EAAA/H,EAAO,EAAE,CAC9D,EACA,OAAS9Z,GAAQ,CACXA,EAAI,UAAU,cAAc,IAAM,IAGtCk5C,GAAiBl5C,CAAG,EACpBm5C,GAAyBn5C,CAAG,EAC9B,CACF,EAC4C,CAC1C,cAAgBA,GAAQ,CAChB,KAAA,CAAE,OAAA6hB,CAAW,EAAA7hB,EACZ6hB,EAAA,MAAM,cAAe,CAAE,IAAK,EAAG,OAAQ,CAAK,EAAA/H,EAAO,EAAE,EACrD+H,EAAA,MAAM,cAAe,CAAE,IAAK,EAAG,OAAQ,CAAK,EAAA/H,EAAO,EAAE,EACrD+H,EAAA,MAAM,YAAa,CAAE,IAAK,EAAG,OAAQ,CAAK,EAAA/H,EAAO,EAAE,CAC5D,EACA,OAAS9Z,GAAQ,CACDo5C,GAAWp5C,CAAG,EAElB,QAAU,EAClBq5C,GAAYr5C,CAAG,EAEfk5C,GAAiBl5C,CAAG,EAGlBA,EAAI,UAAU,cAAc,IAAM,GAGtCm5C,GAAyBn5C,CAAG,CAC9B,CACF,EA6B4C,CAC1C,cAAgBA,GAAQ,CAChB,KAAA,CAAE,OAAA6hB,CAAW,EAAA7hB,EACZ6hB,EAAA,MAAM,sBAAuB,CAAE,IAAK,EAAG,OAAQ,CAAK,EAAA/H,EAAO,EAAE,EAC7D+H,EAAA,MAAM,sBAAuB,CAAE,IAAK,EAAG,OAAQ,CAAK,EAAA/H,EAAO,EAAE,CACtE,EACA,OAAS9Z,GAAQ,CACT,KAAA,CAAE,UAAAqhB,EAAW,GAAAqP,CAAO,EAAA1wB,EACtB,GAAAqhB,EAAU,cAAc,IAAM,EAChC,OAEI,MAAAi4B,EAAiBj4B,EAAU,cAAc,CAC7C,MAAOvH,EAAO,GACd,KAAM,CAAEwd,GAAoB,IAAMA,EAAK,KAAK,IAAMA,EAAK,KAAK,MAAM,CAAA,CACnE,EAED,UAAW+N,KAAQiU,EAAgB,CACjC,MAAMC,EAAcC,GAAiBnU,EAAK,KAAK,IAAI,EACnD,GAAIkU,EAAa,CACf,IAAI5U,EAAU,GACH,UAAA8U,KAAeC,GAAoB15C,CAAG,EAE/C,GADuB0wB,EAAG,SAAS6oB,EAAaE,CAAW,EACvC,CACR9U,EAAA,GACV,KACF,CAEF,GAAI,CAACA,EAEH,KAEJ,CACF,CACAwU,GAAyBn5C,CAAG,CAC9B,CACF,EA/D4C,CAC1C,cAAgBA,GAAQ,CAChB,KAAA,CAAE,OAAA6hB,CAAW,EAAA7hB,EACZ6hB,EAAA,MAAM,kBAAmB,CAAE,IAAK,EAAG,OAAQ,CAAK,EAAA/H,EAAO,EAAE,CAClE,EACA,OAAS9Z,GAAQ,CACT,KAAA,CAAE,UAAAqhB,EAAW,GAAAqP,CAAO,EAAA1wB,EACtB,GAAAqhB,EAAU,cAAc,IAAM,EAChC,OAGI,MAAAs4B,EAAYt4B,EAAU,cAAc,CACxC,MAAOvH,EAAO,GACd,KAAM,iBAAA,CACP,EAAE,CAAC,EAEJ,GAAI6/B,EAAW,CACP,MAAAje,EAAMie,EAAU,KAAK,OAC3B,UAAWxoC,IAAO,CAAC,EAAG,EAAG,CAAC,EAExB,GADgBuf,EAAG,SAAS,oBAAqBvf,EAAKuqB,CAAG,EAEvD,KAGN,CACAyd,GAAyBn5C,CAAG,CAC9B,CACF,CA0CA,EAEA,SAAS45C,GAAYvU,EAAiBrlC,EAAgB,CAMpD,GAJgBA,EAAI,GAAG,eAAeqlC,EAAM,CAC1C,OAAQA,EAAK,KAAK,OAClB,KAAM,CAAC,CAAE,KAAM,cAAe,YAAavrB,EAAO,GAAI,CAAA,CACvD,EAEQ,MAAA,GAGH,MAAA+/B,EAAkB75C,EAAI,UAAU,cAAc,CAClD,MAAO8Z,EAAO,GACd,iBAAkBurB,EAClB,KAAM,CAAEj9C,GAAiB,KAAK,IAAIA,EAAE,KAAK,OAASi9C,EAAK,KAAK,MAAM,CAAC,CAAA,CACpE,EAEG,GAAAwU,EAAgB,CAAC,EAAG,CAChB,MAAAC,EAAWD,EAAgB,CAAC,EAAE,KAAK,OAASxU,EAAK,KAAK,OAAS,EAAI,GACzErlC,EAAI,GAAG,WAAWqlC,EAAM,EAAGyU,CAAQ,CACrC,CAEO,MAAA,EACT,CAEA,SAASC,GAAY1U,EAAiBrlC,EAAgB,CAC7C,OAAAA,EAAI,GAAG,eAAeqlC,CAAI,CACnC,CAEA,SAAS2U,GAAS3U,EAAiBrlC,EAAgB,CACjD,OAAKqlC,EAAK,KAAK,MAAQ,IAAI,WAAW,KAAK,EAClCuU,GAAYvU,EAAMrlC,CAAG,EAEvB+5C,GAAY1U,EAAMrlC,CAAG,CAC9B,CAEA,SAASm5C,GAAyBn5C,EAAgB,CAC1C,KAAA,CAAE,UAAAqhB,CAAc,EAAArhB,EAEhBrH,EAAQ0oB,EAAU,cAAc,CACpC,MAAOvH,EAAO,GACd,KAAM,CACH1xB,IAAQA,EAAE,KAAK,MAAQ,IAAI,WAAW,GAAG,EAAI,EAAI,EACjDA,GAAM,IAAMA,EAAE,KAAK,IAAMA,EAAE,KAAK,MACnC,CAAA,CACD,EACD,UAAWi9C,KAAQ1sC,EACb0oB,EAAU,SAASgkB,CAAI,GAAK,GAG3BA,EAAK,OAGV2U,GAAS3U,EAAMrlC,CAAG,CAEtB,CAEA,MAAMi6C,OAAY,IAAI,CACpB,cACA,cACA,YACA,iBACF,CAAC,EAED,SAASb,GAAWp5C,EAAgB,CAC5B,KAAA,CAAE,UAAAqhB,CAAc,EAAArhB,EACtB,OAAOqhB,EACJ,gBAAgBvH,EAAO,EAAE,EACzB,OAAQ1xB,GAAM6xD,GAAM,IAAI7xD,EAAE,KAAK,MAAQ,EAAE,CAAC,CAC/C,CAEA,SAAU8xD,GAAuBl6C,EAAgB,CACzC,MAAA0iC,EAAQ0W,GAAWp5C,CAAG,EACtBm6C,EAAW,IAAI,IAAIzX,EAAM,IAAKt6C,GAAMA,EAAE,KAAK,MAAM,CAAC,EAExD,UAAW+oB,IAAO,CAAC,EAAG,EAAG,CAAC,EACxB,QAASutB,EAAS,EAAGA,GAAU,EAAGA,IAC5Byb,EAAS,IAAIzb,CAAM,IACf,KAAA,CAAE,IAAAvtB,EAAK,OAAAutB,IAInB,UAAWvtB,IAAO,CAAC,EAAG,EAAG,CAAC,EACxB,QAASutB,EAAS,EAAGA,GAAU,EAAGA,IAC3Byb,EAAS,IAAIzb,CAAM,IAChB,KAAA,CAAE,IAAAvtB,EAAK,OAAAutB,GAIrB,CAEA,SAAUgb,GAAoB15C,EAAgB,CAC5C,QAASmR,EAAM,EAAGA,EAAM,EAAGA,IACzB,QAASutB,EAAS,EAAGA,EAAS,EAAGA,IAC1B1+B,EAAI,UAAU,eAAe,CAAE,IAAAmR,EAAK,OAAAutB,CAAA,CAAQ,IACzC,KAAA,CAAE,IAAAvtB,EAAK,OAAAutB,GAIrB,CAEA,SAAS8a,GAAiB7d,EAA0B,CAClD,OAAQA,EAAM,CACZ,IAAK,cACI,MAAA,MACT,IAAK,kBACI,MAAA,cACT,IAAK,sBACI,MAAA,kBACT,IAAK,cACI,MAAA,MACT,IAAK,kBACI,MAAA,cACT,IAAK,sBACI,MAAA,kBACT,QACS,OAAA,IACX,CACF,CAEA,SAASud,GAAiBl5C,EAAgB,CAClC,KAAA,CAAE,UAAAqhB,EAAW,GAAAqP,CAAO,EAAA1wB,EACpBrH,EAAQ0oB,EAAU,gBAAgBvH,EAAO,EAAE,EAC7C,IAAAsgC,EAAc,CAAC,CAACzhD,EAAM,KAAM0sC,GAASA,EAAK,KAAK,OAAS,aAAa,EACrEgV,EAAc,CAAC,CAAC1hD,EAAM,KAAM0sC,GAASA,EAAK,KAAK,OAAS,aAAa,EAE9D,UAAAt2B,KAAQmrC,GAAuBl6C,CAAG,EAAG,CAC1C,GAAA,CAACo6C,GAAe,CAACC,EACnB,MAEqB3pB,EAAG,SAAS0pB,EAAc,MAAQ,MAAOrrC,CAAI,IAE9DqrC,EACYA,EAAA,GAEAC,EAAA,GAGpB,CACF,CAEA,SAAShB,GAAYr5C,EAAgB,CAC7B,KAAA,CAAE,UAAAqhB,EAAW,GAAAqP,CAAO,EAAA1wB,EAGpBoP,EADaiS,EAAU,gBACE,EAAK,IAAM,EAAI,eAAiB,eAEpD,UAAAtS,KAAQmrC,GAAuBl6C,CAAG,EAG3C,GAFuB0wB,EAAG,SAASthB,EAAUL,CAAI,EAG/C,KAGN,CCjQO,MAAMurC,GAAwC,CACnD,YAAa,CACX,CAACva,EAAK,EAAG,CACP,SAAU,CACR,CAACnR,EAAmB,QAAQ,EAAIuC,GAAO,CACrC,KAAM,CAAE,OAAAtP,EAAQ,UAAAR,GAAc8P,EAAG,IAC3B,CAAE,UAAApL,CAAc,EAAAoL,EACX,UAAAopB,KAAUl5B,EAAU,cAAc,CAC3C,OAAQ0E,EAAU,KAAK,OACvB,KAAMtK,GAAS,QAAA,CAChB,EACQoG,EAAA,qBAAqB04B,EAAQ,EAAG,CAAC,CAE5C,CACF,CACF,EACA,CAACta,EAAI,EAAG,CACN,SAAU,CACR,CAACrR,EAAmB,QAAQ,EAAIuC,GAAO,CAC/B,KAAA,CAAE,OAAAtP,CAAO,EAAIsP,EAAG,IAChB,CAAE,UAAApL,CAAc,EAAAoL,EACftP,EAAA,qBAAqBkE,EAAW,EAAG,CAAC,CAC7C,CACF,CACF,CACF,EACA,OAAS/lB,GAAQ,CACf,KAAM,CAAE,GAAA0wB,EAAI,OAAA7O,EAAQ,UAAAR,CAAA,EAAcrhB,EAC9B,GAAAqhB,EAAU,cAAc,IAAM,EAAG,CAChCqP,EAAA,MACD;AAAA,kEAAA,EAEFA,EAAG,SAASuP,GAAM,CAAE,IAAK,EAAG,OAAQ,EAAG,EACvC,MACF,CAEM,MAAAua,EAAOn5B,EAAU,cAAc,CAAE,KAAM4e,GAAM,MAAOnmB,EAAO,GAAI,EAAE,CAAC,EAGxE,GAAI,CAAC0gC,EACH,OAEI,MAAAC,EAAUp5B,EAAU,SAASm5B,CAAI,EAMjCE,EAAW,CAAC,CAJJr5B,EAAU,cAAc,CACpC,MAAOvH,EAAO,GACd,KAAM2B,GAAS,SAAA,CAChB,EACwB,KAAMrzB,GAAMA,EAAE,KAAK,OAAS43C,EAAK,EAQpD6Z,EAAkBx4B,EAAU,cAAc,CAC9C,MAAOvH,EAAO,GACd,iBAAkB0gC,EAClB,KAAM,CACJ,iBACCpyD,GACCi5B,EAAU,aAAaj5B,EAAE,IAAI,IAAM0xB,EAAO,GAAK,EAAI,EACpD1xB,GAAkBi5B,EAAU,UAAUj5B,CAAC,GAAKqyD,EAAU,EAAI,EAC3D,SACCryD,GAAiB,KAAK,IAAIA,EAAE,KAAK,OAASoyD,EAAK,KAAK,MAAM,CAC7D,CAAA,CACD,EAED,GAAIE,EAAU,CACN,MAAAxnB,EAAS2mB,EAAgB,CAAC,EAChC,GAAI,CAAC3mB,EAEH,OAEF,GAAI7R,EAAU,aAAa6R,EAAO,IAAI,IAAMpZ,EAAO,GAAI,CAE/C,MAAA6gC,EAAQt5B,EAAU,cAAc,CACpC,MAAOvH,EAAO,GACd,KAAMimB,GACN,KAAM,CAAC,QAAQ,CAAA,CAChB,EACD,IAAI9f,EAAU,GACd,UAAW26B,KAAQD,EAAO,CACxB,UAAWxpC,IAAO,CAAC,EAAG,EAAG,CAAC,EAExB,GADU8O,EAAA46B,GAAY76C,EAAKw6C,EAAM,CAAE,OAAQI,EAAK,KAAK,OAAQ,IAAAzpC,CAAA,CAAK,EAC9D8O,EACF,MAGJ,GAAIA,EACF,KAEJ,CACGyQ,EAAA,UAAU8pB,EAAMtnB,CAAM,EACzB,MACF,CAEA,GAAIA,EAAO,KAAK,SAAWsnB,EAAK,KAAK,OAAQ,CAC3C,IAAIv6B,EAAU,GACd,UAAW9O,IAAO,CAAC,EAAG,EAAG,CAAC,EAExB,GADU8O,EAAA46B,GAAY76C,EAAKw6C,EAAM,CAAE,OAAQtnB,EAAO,KAAK,OAAQ,IAAA/hB,CAAA,CAAK,EAChE8O,EACF,KAGN,CACGyQ,EAAA,UAAU8pB,EAAMtnB,CAAM,CAAA,KACpB,CAGL,MAAM4nB,EAA8BjB,EAAgB,KACjDzxD,GACCA,EAAE,KAAK,SAAWoyD,EAAK,KAAK,QAC5Bn5B,EAAU,aAAaj5B,EAAE,IAAI,IAAM0xB,EAAO,EAAA,EAE9C,GAAIghC,EAA6B,CAC5BpqB,EAAA,UAAU8pB,EAAMM,CAA2B,EAC9C,MACF,CAEM,MAAA5nB,EAAS2mB,EAAgB,CAAC,EAChC,GAAI,CAAC3mB,EAEH,OAEF,MAAM4mB,EAAW5mB,EAAO,KAAK,OAASsnB,EAAK,KAAK,OAAS,EAAI,GAC1D9pB,EAAA,WAAW8pB,EAAM,EAAGV,CAAQ,CACjC,CACF,CACF,EAEA,SAASe,GAAY76C,EAAgBw6C,EAAiBzrC,EAAqB,CACzE,MAAMkR,EAAUjgB,EAAI,GAAG,QAAQw6C,EAAMzrC,CAAI,EACzC,OAAIkR,GACEjgB,EAAA,OAAO,MAAMw6C,CAAI,EAEhBv6B,CACT,CC7IO,MAAM86B,GAAyC,CACpD,gBAAiB,CAAC9gC,EAAQja,IACjBia,IAAWH,EAAO,IAAM9Z,EAAI,UAAU,cAAA,GAAmB,EAAI,CAExE,ECkEMg7C,GACJC,IAC4B,CAC5B,cAAgBj7C,GAAQ,CAClBA,EAAA,GAAG,YAAYi7C,CAAa,CAClC,CACF,GAMMC,GAAsD,CAC1D,CAACpmB,EAAe,EAAG0L,GACnB,QAASC,GACT,IAAKA,GACL,YAAaA,GACb,YAAaA,GACb,MAAOC,GACP,UAAWC,GACX,UAAWI,GACX,UAAWG,GACX,UAAWG,GACX,UAAWC,GACX,UAAWK,GACX,aAAca,GACd,aAAc4B,GACd,WAAYoB,GACZ,4BAA6BoC,GAAc,CAAC,EAC5C,4BAA6BA,GAAc,CAAC,EAC5C,4BAA6BA,GAAc,CAAC,EAC5C,4BAA6BA,GAAc,CAAC,EAC5C,4BAA6BA,GAAc,CAAC,EAC5C,4BAA6BA,GAAc,CAAC,EAC5C,4BAA6BA,GAAc,CAAC,EAC5C,4BAA6BA,GAAc,CAAC,EAC5C,4BAA6BA,GAAc,CAAC,EAC5C,6BAA8BA,GAAc,CAAC,EAC7C,6BAA8BA,GAAc,EAAE,EAC9C,6BAA8BA,GAAc,EAAE,EAC9C,6BAA8BA,GAAc,EAAE,EAC9C,QAAS2B,GACT,KAAMM,GACN,MAAOgB,GACP,SAAUW,GACV,SAAUC,GACV,SAAUC,GACV,SAAUC,GACV,SAAUC,GACV,UAAWiE,GACX,UAAWC,GACX,UAAWC,GACX,UAAWC,GACX,UAAWC,GACX,UAAWC,GACX,UAAWC,GACX,UAAWC,GACX,UAAWC,GACX,WAAYC,GACZ,WAAYC,GACZ,WAAYC,GACZ,WAAYC,GACZ,WAAYC,GACZ,WAAYC,GACZ,WAAYC,GACZ,WAAYC,GACZ,WAAYC,GACZ,WAAYC,GACZ,WAAYC,GACZ,WAAYC,GACZ,WAAYC,GACZ,WAAYC,GACZ,WAAYC,GACZ,cAAeC,GACf,aAAcmC,GACd,UAAWuF,GACX,KAAM/C,GACN,aAAcY,GAAc,CAAC,EAC7B,aAAcA,GAAc,CAAC,EAC7B,aAAcA,GAAc,CAAC,EAC7B,aAAcA,GAAc,CAAC,EAC7B,aAAcA,GAAc,CAAC,EAC7B,aAAcA,GAAc,CAAC,EAC7B,aAAcA,GAAc,CAAC,EAC7B,WAAYK,GACZ,WAAYO,GACZ,WAAYC,GACZ,SAAUS,GACV,QAASjZ,GACT,sBAAuBqZ,GACvB,sBAAuBE,GACvB,sBAAuBE,GACvB,sBAAuBI,GACvB,sBAAuBD,GACvB,gCAAiCI,GAAe,CAAC,EACjD,gCAAiCA,GAAe,CAAC,EACjD,gCAAiCA,GAAe,CAAC,EACjD,gCAAiCA,GAAe,CAAC,EACjD,oBAAqBqB,GACrB,YAAaS,GACb,eAAgBC,GAAuB,aAAa,EACpD,aAAcA,GAAuB,iBAAiB,EACtD,gBAAiBA,GAAuB,iBAAiB,EACzD,mBAAoBA,GAAuB,wBAAwB,EACnE,QAASA,GAAuB,yBAAyB,CAC3D,EAEaG,GAAe1gD,GAA8B,CAClD,MAAA2gD,EAAiB7a,GAAsB9lC,CAAO,EAC9CugB,EAAWkgC,GAA2BzgD,CAAO,EAE/C,GAAA2gD,IAAmB,QAAapgC,IAAa,OAC/C,MAAM,IAAI,MAAM,uBAAuBvgB,CAAO,YAAY,EAGrD,MAAA,CACL,GAAI2gD,GAAkB,CAAC,EACvB,GAAIpgC,GAAY,CAAC,CAAA,CAErB,EC3LY,IAAAqgC,IAAAA,IACVA,EAAA,MAAQ,QACRA,EAAA,KAAO,OACPA,EAAA,KAAO,OACPA,EAAA,UAAY,YACZA,EAAA,OAAS,SALCA,IAAAA,IAAA,CAAA,CAAA,EAOc9sC,EAAE,WAAW8sC,EAAO,EAEvC,MAAMC,GAAwB,KAC5B,CACJ,MAAgB,EAChB,KAAe,EACf,KAAe,EACf,UAAoB,EACpB,OAAiB,CAAA,GAgCTC,GAA+B,CAC1C3oB,EACAlc,IACY,CACR,GAAAA,IAAY,MAAQkc,IAAU,KAAa,MAAA,GAC/C,OAAQlc,EAAS,CACf,IAAK,QACH,OAAOkc,IAAUxX,EAAY,IAC/B,IAAK,OACI,MAAA,CACLA,EAAY,MACZA,EAAY,MACZA,EAAY,UAAA,EACZ,SAASwX,CAAK,EAClB,IAAK,OACH,OAAOA,IAAUxX,EAAY,OAC/B,IAAK,YACH,OAAOwX,IAAUxX,EAAY,MAC/B,IAAK,SACH,OAAOwX,IAAUxX,EAAY,MACjC,CACF,EAGaogC,GAAwB,CACnC,YAAa,IACb,mBAAoB,GACpB,2BAA4B,GAC5B,oBAAqB,GACrB,wBAAyB,EACzB,iBAAkB,IAClB,eAAgB,CAClB,EAEaC,GAAmB,CAC9BC,EACAC,EACAC,IAIID,GAAS,CAACC,EAAiB,GAE7BJ,GAAsB,YACtBE,EAAM,QAAUF,GAAsB,mBACtCE,EAAM,eAAiBF,GAAsB,2BAC7CE,EAAM,SAAWF,GAAsB,oBACvC,KAAK,IAAIE,EAAM,YAAaF,GAAsB,gBAAgB,EAChEA,GAAsB,0BACNG,EAAQH,GAAsB,eAAiB,GCpD/DK,GAAoB,CACxB91B,EACA+1B,EACAz6B,IACW,CACP,GAAA,OAAOy6B,GAAkB,WAC3B,OAAOA,EAAc/1B,CAAS,EAE5B,GAAA,OAAO+1B,GAAkB,SAC3B,OAAQA,EAAe,CACrB,IAAK,SACI,OAAAz6B,EAAU,UAAU0E,CAAS,EACtC,IAAK,UACI,MAAA,CAAC1E,EAAU,UAAU0E,CAAS,EACvC,IAAK,QACI,OAAA1E,EAAU,SAAS0E,CAAS,EACrC,IAAK,SACI,MAAA,CAAC1E,EAAU,SAAS0E,CAAS,EACtC,IAAK,QACI,OAAA1E,EAAU,SAAS0E,CAAS,EACrC,IAAK,SACI,MAAA,CAAC1E,EAAU,SAAS0E,CAAS,EACtC,IAAK,iBACH,OAAO1E,EAAU,YAAY0E,CAAS,IAAMtK,GAAS,SAAW,GAAK,EACvE,IAAK,kBACH,OAAO4F,EAAU,YAAY0E,CAAS,IAAMtK,GAAS,UAAY,GAAK,CAC1E,CAEF,OAAQqgC,EAAc,KAAM,CAC1B,IAAK,cACH,MAAO,CAACz6B,EAAU,iBAChB0E,EAAU,KAAK,IACf+1B,EAAc,WAAA,EAElB,IAAK,aACI,OAAAA,EAAc,UAAU,SAASz6B,EAAU,YAAY0E,CAAS,CAAC,EACpE,GACA,EACN,IAAK,eACI,OAAA+1B,EAAc,UAAU,SAASz6B,EAAU,YAAY0E,CAAS,CAAC,EACpE,EACA,EACN,IAAK,oBACH,OAAOxL,GAA0BwL,EAAU,KAAM+1B,EAAc,IAAI,EACrE,IAAK,qBACH,MAAO,CAACvhC,GAA0BwL,EAAU,KAAM+1B,EAAc,IAAI,EACtE,IAAK,WAAY,CACT,KAAA,CAAE,QAAAC,CAAY,EAAAD,EACpB,IAAIzmD,EAAM,EACV,UAAW2mD,KAAcD,EAAS,CAC1B,KAAA,CAAE,UAAAE,EAAW,OAAAC,CAAW,EAAAF,EAC9B3mD,GAAO6mD,EAASL,GAAkB91B,EAAWk2B,EAAW56B,CAAS,CACnE,CACO,OAAAhsB,CACT,CACF,CAEF,EAsCa8mD,GAAkB,CAC7B96B,EACAqN,IACgB,CAChB,MAAMuV,EAAa5iB,EAAU,iBAAmB,EAAA,OAAQ0E,GAAc,CACpE,SAAW,CAAC1gC,EAAG+2D,CAAC,IAAK,OAAO,QAAQ1tB,CAAK,EAiFvC,GAAI,EAhFa,IAAe,CAC9B,OAAQrpC,EAAG,CACT,IAAK,OACH,OAAOg8B,EAAU,YAAY0E,CAAS,IAAM2I,EAAM,KACpD,IAAK,QACI,OAAA3I,EAAU,QAAU2I,EAAM,MACnC,IAAK,UACH,OAAOrN,EAAU,aAAa0E,EAAU,IAAI,IAAM2I,EAAM,QAC1D,IAAK,QACI,OAAA3I,EAAU,QAAU2I,EAAM,MACnC,IAAK,oBACI,OAAA3I,EAAU,QAAU2I,EAAM,kBACnC,IAAK,OACH,OAAOrN,EAAU,YAAY0E,CAAS,IAAM2I,EAAM,KACpD,IAAK,SACH,OACGrN,EAAU,iBAAiB0E,CAAS,EAAE,QAAU,MACjD2I,EAAM,OAEV,IAAK,MACI,OAAA3I,EAAU,KAAK,MAAQ2I,EAAM,IACtC,IAAK,SACI,OAAA3I,EAAU,KAAK,SAAW2I,EAAM,OACzC,IAAK,OACH,GAAIA,EAAM,OAAS,OAAW,MAAM,IAAI,MACxC,OAAOvU,GAAc4L,EAAU,KAAM2I,EAAM,IAAI,EACjD,IAAK,eACH,GAAIA,EAAM,eAAiB,OAAW,MAAM,IAAI,MAChD,OAAOrN,EAAU,eACf0E,EAAU,KAAK,IACf2I,EAAM,aAAa,IACnBA,EAAM,aAAa,WAAA,EAEvB,IAAK,YACH,GAAIA,EAAM,YAAc,OAAW,MAAM,IAAI,MAC7C,OAAOrN,EAAU,eACfqN,EAAM,UAAU,IAChB3I,EAAU,KAAK,IACf2I,EAAM,UAAU,WAAA,EAEpB,IAAK,aACH,GAAIA,EAAM,aAAe,OAAW,MAAM,IAAI,MAC9C,OAAOpU,GAAiByL,EAAU,KAAM2I,EAAM,UAAU,EAC1D,IAAK,WACH,GAAIA,EAAM,WAAa,OAAW,MAAM,IAAI,MAC5C,OACEnU,GAA0BwL,EAAU,KAAM2I,EAAM,QAAQ,EAAI,EAEhE,IAAK,mBACH,GAAIA,EAAM,mBAAqB,OAAW,MAAM,IAAI,MACpD,OACE,KAAK,IAAI3I,EAAU,KAAK,OAAS2I,EAAM,gBAAgB,IAAM,EAEjE,IAAK,gBACH,GAAIA,EAAM,gBAAkB,OAAW,MAAM,IAAI,MACjD,OAAOrN,EAAU,gBAAgB0E,EAAW2I,EAAM,aAAa,EACjE,IAAK,mBACH,GAAIA,EAAM,mBAAqB,OAAW,MAAM,IAAI,MACpD,MAAO,CAACrN,EAAU,gBAChB0E,EACA2I,EAAM,gBAAA,EAEV,IAAK,SACH,GAAIA,EAAM,SAAW,OAAW,MAAM,IAAI,MACnC,OAAA3I,EAAU,KAAO2I,EAAM,OAAO,GACvC,IAAK,SACH,GAAIA,EAAM,SAAW,OAAW,MAAM,IAAI,MACnC,OAAAA,EAAM,OAAO3I,CAAS,EAC/B,IAAK,aACH,GAAI2I,EAAM,aAAe,OAAW,MAAM,IAAI,MAC9C,OAAOrN,EAAU,6BACf0E,EACA2I,EAAM,UAAA,EAEV,IAAK,OAEI,MAAA,EACX,CACA,MAAM,IAAI,MAAM,qCAAqCrpC,CAAC,EAAE,CAAA,KAErC,MAAA,GAEhB,MAAA,EAAA,CACR,EACD,OAAIqpC,EAAM,MACGuV,EAAA,KAAK,CAAChyB,EAAIhG,IAAO,CAC1B,GAAIyiB,EAAM,OAAS,OAAW,MAAM,IAAI,MAC7B,UAAAotB,KAAiBptB,EAAM,KAAM,CAChC,MAAA2tB,EACJR,GAAkB5pC,EAAI6pC,EAAez6B,CAAS,EAC9Cw6B,GAAkB5vC,EAAI6vC,EAAez6B,CAAS,EAChD,GAAIg7B,IAAe,EACV,OAAAA,CAEX,CACO,MAAA,EAAA,CACR,EAEIpY,CACT,EC3LO,MAAMqY,EAAgB,CAK3B,YACE/nB,EACAv4B,EACAm4B,EACA,CARFh5B,EAAA,gBACAA,EAAA,kBACAA,EAAA,iBAOE,KAAK,SAAWo5B,EAChB,KAAK,QAAUv4B,EACf,KAAK,UAAYm4B,CACnB,CAGA,aAAsC,CAC7B,MAAA,CACL,UAAW,IAAA,CAEf,CAGA,OAAiB,CACf,OAAO,KAAK,SAAS,KAAMK,GAASA,EAAK,OAAS,EAAK,CACzD,CAEA,gBAAuB,CACrB,OAAI,KAAK,MAAM,EAAU3X,GAAK,GACvBA,GAAK,GACd,CAEA,iBAA2B,CACzB,UAAW2X,KAAQ,KAAK,SAAS,MAAM,EAAE,UACvC,GAAIA,EAAK,aAAe,GAAc,MAAA,GAEjC,MAAA,EACT,CAEA,uBAAiC,CAC/B,OAAO,KAAK,SAAS,KAAMA,GAASA,EAAK,kBAAoB,EAAK,CACpE,CAEA,gBAAgBva,EAA8C,OAC5D,UAAWua,KAAQ,KAAK,SAAS,MAAM,EAAE,UAAW,CAClD,MAAM+nB,IAAe56C,EAAA6yB,EAAK,gBAAL,YAAA7yB,EAAqBsY,KAAW,KACrD,GAAIsiC,IAAiB,KAAa,OAAAA,CACpC,CAIA,OAAI,KAAK,MAAA,GAAWtiC,IAAWH,EAAO,GAAW,GAE1C,IACT,CAEA,gBAAyB,CAChB,MAAA,GACT,CAEA,sBAA+B,CAC7B,SAAW,CAAE,kBAAAiN,KAAuB,KAAK,SACvC,GAAIA,IAAsB,OAAkB,OAAAA,EAEvC,MAAA,EACT,CAEA,aAAarE,EAA4BzI,EAAgBhL,EAAY,CAC7D,MAAA6X,EAAc,KAAK,iBACnBC,EAAoB,KAAK,uBAC3B9X,IAAS,QACE4X,GAAAnE,EAAczT,EAAM6X,EAAaC,CAAiB,EAEtD,UAAAyN,KAAQ,KAAK,SAClBA,EAAK,kBACFA,EAAA,iBACH9R,EACAzI,EACAhL,GAAQ,KACR,KAAK,YAAY,CAAA,CAIzB,CAEA,YAAYliB,EAAuB,CACjC,GAAI,OAAOA,GAAQ,SAAiB,OAAAA,EAEpC,GAAIA,EAAI,OAAS,OAAkB,OAAA,KAAK,YAAYA,EAAI,IAAI,EAE5D,GAAIA,EAAI,cAAgB,OAAW,OAAOA,EAAI,KAE1C,GAAAA,EAAI,OAAS,OACT,MAAA,IAAI,MAAM,gBAAgB,EAElC,OAAOA,EAAI,IACb,CAEA,YAAYA,EAAyB,CACnC,MAAM4uC,EAAO,OAAO5uC,GAAQ,SAAWA,EAAM,KAAK,YAAYA,CAAG,EAC1D,OAAA,KAAK,QAAQ4uC,CAAI,CAC1B,CAEA,iBAAiB5uC,EAAkC,CACjD,MAAM4nC,EAAU,KAAK,UAAU,KAAK,YAAY5nC,CAAG,CAAC,EAC7C,OAAA4nC,GAAoB,EAC7B,CAEA,YAAY5nC,EAAwB,CAClC,OAAO,KAAK,iBAAiBA,CAAG,EAAE,aAAe,EACnD,CACF,CAGO,MAAMyvD,EAAU,CAQrB,YACExhC,EACAuZ,EACAv4B,EACAm4B,EACAhZ,EACA,CAbFhgB,EAAA,gBACAA,EAAA,kBACAA,EAAA,iBACAA,EAAA,iBACAA,EAAA,kBACAA,EAAA,wBASE,KAAK,SAAW6f,EAChB,KAAK,SAAWuZ,EAEhB,KAAK,QAAUv4B,EACf,KAAK,UAAYm4B,EACjB,KAAK,UAAYhZ,EACjB,KAAK,gBAAkB,IAAImhC,GACzB,KAAK,SACL,KAAK,QACL,KAAK,SAAA,CAET,CAGA,aAAgC,CACvB,MAAA,CACL,UAAW,IAAA,CAEf,CAGA,sBAAsBriC,EAAgBjH,EAA4B,OAChE,QACErR,EAAA,KAAK,UAAUsY,CAAM,EAAE,WAAvB,YAAAtY,EAAiC,iBAAiBqR,KAAc,EAEpE,CAGA,YAAqB,CACnB,UAAWwhB,KAAQ,KAAK,SAAS,MAAM,EAAE,UACvC,GAAIA,EAAK,UAAY,OAAW,OAAOA,EAAK,QAExC,MAAA,IAAI,MAAM,4BAA4B,CAC9C,CAGA,eAAwB,CACtB,UAAWA,KAAQ,KAAK,SAAS,MAAM,EAAE,UACvC,GAAIA,EAAK,aAAe,OAAW,OAAOA,EAAK,WAE3C,MAAA,IAAI,MAAM,+BAA+B,CACjD,CAEA,kBAAkBzlB,EAAoB,CAChC,OAAA,KAAK,SAAS,kBACT,KAAK,SAAS,kBAAkBA,EAAM,KAAK,aAAa,EAE1D,EACT,CAEA,iBAA2B,CAClB,OAAA,KAAK,gBAAgB,iBAC9B,CAEA,gBAAgBkL,EAA8C,CACrD,OAAA,KAAK,gBAAgB,gBAAgBA,CAAM,CACpD,CAEA,iBAAiBA,EAA8C,OAC7D,QAAOtY,EAAA,KAAK,SAAS,iBAAd,YAAAA,EAA+BsY,KAAW,IACnD,CAEA,gBAAgBA,EAAuC,CACrD,OAAO,KAAK,iBAAiBA,CAAM,GAAK,CAAC,OAAQ,OAAQ,MAAM,CACjE,CAEA,iBAAiBA,EAAgBwiC,EAAyC,OACxE,MAAMC,GAAqB/6C,EAAA,KAAK,SAAS,sBAAd,YAAAA,EAAoCsY,GAC/D,GAAIyiC,IAAuB,OAAW,CACpC,GAAIA,EAAmB,SAAWD,EAC1B,MAAA,IAAI,MAAM,kDAAkD,EAC7D,OAAAC,CACT,CAEM,MAAAC,EAAQ,KAAK,gBACnB,GAAIF,EAAWE,EAAa,MAAA,IAAI,MAAM,gBAAgB,EACtD,GAAIF,GAAY,EAAG,MAAO,CAAC,KAAK,OAAOE,EAAQ,GAAK,CAAC,CAAC,EAGtD,MAAMha,EAAwB,CAAA,EAC9B,QAASlmD,EAAI,EAAGA,EAAIggE,EAAUhgE,IAChBkmD,EAAA,KAAK,KAAK,MAAOlmD,GAAKkgE,EAAQ,IAAOF,EAAW,EAAE,CAAC,EAE1D,OAAA9Z,CACT,CAEA,wBAAwC,CACtC,SAAW,CAAE,oBAAArC,KAAyB,KAAK,SACzC,GAAIA,IAAwB,OAAkB,OAAAA,EAEzC,OAAA,IACT,CAEA,8BAA8C,CAC5C,SAAW,CAAE,0BAAAsc,KAA+B,KAAK,SAC/C,GAAIA,IAA8B,OACzB,OAAAA,EAEJ,OAAA,IACT,CAMA,gBAA0B,CACxB,OACEhiC,GAAiB,KAAK,UAAU,KAAK,GACrCA,GAAiBD,GAAU,MAAM,CAErC,CAMA,cAAwB,CACf,OAAA,KAAK,UAAU,QAAUA,GAAU,MAC5C,CAMA,cAAwB,CACtB,OACEC,GAAiB,KAAK,UAAU,KAAK,GACrCA,GAAiBD,GAAU,KAAK,CAEpC,CAEA,iBAA0B,CACpB,GAAA,CAAC,KAAK,aAAa,EACrB,MAAM,IAAI,MACR,+DAAA,EAEJ,MAAMkiC,EAAU,KAAK,UAAU/iC,EAAO,EAAE,EAClCgjC,EAAU,KAAK,UAAUhjC,EAAO,EAAE,EACxC,GAAI+iC,EAAQ,gBAAkB,MAAQC,EAAQ,gBAAkB,KAC9D,MAAM,IAAI,MACR,yDAAA,EAKG,OAAAD,EAAQ,cAAgBC,EAAQ,aACzC,CAEA,iBAAiB7iC,EAAgB0hC,EAAgBtuB,EAA2B,CAC1E,GAAI,CAACsuB,IAAU,CAACtuB,GAAYpT,IAAWH,EAAO,IAAY,MAAA,GACpD,MAAAmB,EAAc,KAAK,UAAUhB,CAAM,EACnCkW,EAAS,KAAK,UAAU,OACxB,CAAE,MAAAurB,CAAU,EAAAzgC,EAClB,OAAOwgC,GAAiBC,EAAOC,EAAOxrB,IAAWlW,CAAM,CACzD,CAMA,eAAwB,CACtB,OAAO,KAAK,UAAU,UACxB,CAGA,cAAcA,EAAwB,CACpC,OAAOA,IAAWH,EAAO,GAAKA,EAAO,GAAKA,EAAO,EACnD,CAkBA,YAAY/sB,EAAuB,CAC1B,OAAA,KAAK,gBAAgB,YAAYA,CAAG,CAC7C,CAMA,YAAYA,EAAyB,CAC5B,OAAA,KAAK,gBAAgB,YAAYA,CAAG,CAC7C,CAQA,mBAAmBA,EAAuB,CACjC,OAAA,KAAK,YAAYA,CAAG,EAAE,WAC/B,CAMA,aAAaA,EAAiC,CACrC,OAAA,KAAK,YAAYA,CAAG,EAAE,KAC/B,CAMA,YAAYktB,EAAqC,CAC/C,MAAM8iC,EAAW,KAAK,UAAU9iC,CAAM,EAAE,SACxC,GAAI8iC,IAAa,OACT,MAAA,IAAI,MAAM,uBAAuB,EAElC,OAAAA,CACT,CAKA,oBAAoBhwD,EAA6B,CACzC,MAAA4nC,EAAU,KAAK,iBAAiB5nC,CAAG,EACzC,GAAI4nC,EAAQ,gBACV,OAAOA,EAAQ,gBAGX,MAAAnZ,EAAY,KAAK,aAAazuB,CAAG,EACvC,OAAIyuB,IAAc,KACTD,GAA2BC,CAAS,EAEtC,EACT,CAMA,sBAAsBvB,EAGpB,CACA,MAAM8iC,EAAW,KAAK,UAAU9iC,CAAM,EAAE,SACxC,GAAI8iC,IAAa,OACT,MAAA,IAAI,MAAM,uBAAuB,EAEzC,MAAMC,EAAeD,EAAS,OACvB,MAAA,CACL,QAASC,EAAe,EAAID,EAASC,EAAe,CAAC,EAAI,KACzD,YAAaA,EAAe,EAAID,EAASC,EAAe,CAAC,EAAI,IAAA,CAEjE,CAKA,sBAAsB/iC,EAAgBuU,EAAqC,CACnE,MAAAuU,EAAW,KAAK,UAAU9oB,CAAM,EAAE,KAAK,KAAM8oB,GAC1CA,EAAS,KAAOvU,CACxB,EACD,OAAIuU,IAAa,OACR,KAEFA,CACT,CAMA,cAAc9oB,EAAgBuU,EAA8B,CAC1D,MAAMS,EAAO,KAAK,sBAAsBhV,EAAQuU,CAAU,EAC1D,GAAIS,IAAS,KACL,MAAA,IAAI,MAAM,6BAA6B,EAExC,OAAAA,CACT,CAKA,gBAAgB9d,EAAa8I,EAAwB,CACnD,OAAIA,IAAWH,EAAO,GAAW,KAAK,aAAe3I,EAAM,EAC/CA,CACd,CAGA,aAAsB,CACpB,OAAOqJ,GAAY,KAAK,WAAc,EAAA,KAAK,eAAe,CAC5D,CAKA,mBAAmBP,EAAwB,CAClC,OAAA,KAAK,cAAc,OACvBlL,GAAS,KAAK,aAAaA,CAAI,IAAMkL,GAAU,CAAC,KAAK,eAAelL,CAAI,CAAA,CAE7E,CAYA,4BAA4BkL,EAAgBlL,EAAoB,CACvD,OAAA,KAAK,mBAAmBkL,CAAM,EAAE,KACrC,CAAC19B,EAAGyX,IACFumB,GAA0Bh+B,EAAGwyB,CAAI,EAAIwL,GAA0BvmB,EAAG+a,CAAI,CAAA,CAE5E,CAKA,iBAAiBA,EAAkB,CAC1B,MAAA,CACL,IAAK,KAAK,WAAW,EAAIA,EAAK,IAAM,EACpC,OAAQA,EAAK,MAAA,CAEjB,CAGA,8BAA8BgX,EAAmC,CAC/D,OAAO,KAAK,cAAc,CACxB,MAAOA,EAAU,MACjB,WAAYA,EAAU,IAAA,CACvB,CACH,CAGA,4BAA4BA,EAAmC,CAC7D,MAAM9L,EAAS8L,EAAU,MACzB,OAAO,KAAK,cAAc,CACxB,MAAO9L,EACP,OAAQ8L,EAAU,KAAK,OACvB,UAAW,CAAE,IAAKA,EAAU,KAAK,IAAK,YAAa9L,CAAO,EAC1D,KAAM,CAEJ,CAAE,KAAM,cAAe,YAAaA,CAAO,CAC7C,CAAA,CACD,CACH,CAEA,SAASA,EAA6B,CACpC,OAAO,KAAK,cAAc,CACxB,MAAOA,EACP,OAAQ,EAAA,CACT,CACH,CAGA,iBAAiBykB,EAAyB,CACxC,MAAI,EAAAA,EAAS,GAAKA,GAAU,KAAK,cAAc,EAEjD,CAMA,kBAAkBvtB,EAAa8I,EAAwB,CACrD,OAAQA,EAAQ,CACd,KAAKH,EAAO,GACH,OAAA,KAAK,aAAe3I,EAAM,EACnC,KAAK2I,EAAO,GACH,OAAA3I,CACX,CACF,CAMA,iBAAiBA,EAAa8I,EAAwB,CACpD,OAAQA,EAAQ,CACd,KAAKH,EAAO,GACH,OAAA,KAAK,aAAe3I,EAAM,EACnC,KAAK2I,EAAO,GACH,OAAA3I,CACX,CACF,CAGA,eAAe8rC,EAAcC,EAAcjjC,EAAyB,CAEhE,OAAA,KAAK,kBAAkBgjC,EAAMhjC,CAAM,EACnC,KAAK,kBAAkBijC,EAAMjjC,CAAM,CAEvC,CAMA,SAAS8L,EAA+B,CACtC,MAAMo3B,EAAe,KAAK,aAAap3B,EAAU,IAAI,EACrD,OAAOA,EAAU,QAAUo3B,CAC7B,CAMA,gBAAgB72B,EAAqBD,EAA8B,CACjE,MAAM+2B,EAAe92B,EAAS,KACxB+2B,EAAeh3B,EAAS,KACxBi3B,EAAiBh3B,EAAS,MAC1Bi3B,EAAiBl3B,EAAS,MAC1Bm3B,EAAkB,KAAK,aAAaJ,CAAY,EAChDK,EAAkB,KAAK,aAAaJ,CAAY,EAEtD,GAAIE,IAAmBC,EAGd,MAAA,GAGH,MAAAE,EAAqB,KAAK,gBAAgBJ,CAAc,EAG9D,GAAIA,IAAmBG,EAAwB,MAAA,GAI/C,GACEC,EAAmB,KAChB33B,GACC,KAAK,aAAaA,EAAU,IAAI,IAAMy3B,GACtCz3B,EAAU,KAAK,SAAWq3B,EAAa,QACvC,KAAK,eACHr3B,EAAU,KAAK,IACfq3B,EAAa,IACbE,CAAA,GAEF,CAAC,KAAK,6BACJv3B,EACAf,EAAY,gBACd,CACJ,EAEO,MAAA,GAEE,UAAAwP,KAAQ,KAAK,SAEpB,GAAAA,EAAK,sBACLA,EAAK,qBAAqBlO,EAAUD,EAAU,KAAK,aAAa,EAEzD,MAAA,GAGJ,MAAA,EACT,CAGA,eAAetX,EAAqB,CAC5B,KAAA,CAAE,IAAAoC,EAAK,OAAAutB,CAAW,EAAA3vB,EAEpB,MADA,EAAAoC,EAAM,GAAKA,GAAO,KAAK,WAAW,GAClC,CAAC,KAAK,iBAAiButB,CAAM,EAEnC,CAGA,aAAa3vB,EAAoB,CAC/B,OAAIA,EAAK,IAAM,KAAK,WAAe,EAAA,EAAU+K,EAAO,GAC7CA,EAAO,EAChB,CAGA,uBAAuB/K,EAA8B,CAC7C,MAAAk1B,EAAa,KAAK,gBAAgBl1B,CAAI,EACxC,GAAAk1B,EAAW,OAAS,EAChB,MAAA,IAAI,MAAM,4CAA4C,EAEvD,OAAAA,EAAW,CAAC,GAAK,IAC1B,CAGA,gBAAgBl1B,EAAyB,CACvC,OAAO,KAAK,cAAc,CAAE,KAAAA,CAAM,CAAA,CACpC,CAGA,eAAeA,EAAqB,CAClC,OAAO,KAAK,gBAAgBA,CAAI,EAAE,OAAS,CAC7C,CAGA,kBAAgC,CAC9B,OAAO,OAAO,OAAO,KAAK,UAAU,UAAU,CAChD,CAMA,cAAc2f,EAAoC,CACzC,OAAAytB,GAAgB,KAAMztB,CAAK,CACpC,CAGA,gBAAgBzU,EAA6B,CAC3C,OAAO,KAAK,cAAc,CAAE,MAAOA,CAAQ,CAAA,CAC7C,CAGA,qBAAqBuW,EAA8B,CACjD,OAAO,KAAK,UAAU,WAAWA,CAAE,GAAK,IAC1C,CAGA,aAAaA,EAAuB,CAC5B,MAAAzK,EAAY,KAAK,qBAAqByK,CAAE,EAC9C,GAAIzK,IAAc,KAChB,MAAM,IAAI,MAAM,aAAayK,CAAE,iBAAiB,EAE3C,OAAAzK,CACT,CAGA,mBAAmBA,EAA+B,CAChD,OAAO,KAAK,qBAAqBA,EAAU,EAAE,IAAM,IACrD,CAGA,cAAc9L,EAAyC,CAC9C,OAAA,KAAK,UAAUA,CAAM,EAAE,IAChC,CAGA,iBAA+B,CAC7B,MAAO,CAACmB,EAAY,KAAMA,EAAY,IAAI,CAC5C,CAQA,eACEnB,EACA0jC,EACmB,CACnB,GAAI1jC,IAAWH,EAAO,IAAM,KAAK,SAAS,uBAAwB,MAAO,GACnE,MAAA8jC,EAAY,KAAK,cAAc3jC,CAAM,EAGrC4jC,MAAmB,IACzB,UAAWjrB,KAASgrB,EAClBC,EAAa,IAAIjrB,GAAQirB,EAAa,IAAIjrB,CAAK,GAAK,GAAK,CAAC,EAEtD,MAAAkrB,MAAc,IACpB,UAAWlrB,KAAS+qB,EAClBG,EAAQ,IAAIlrB,GAAQkrB,EAAQ,IAAIlrB,CAAK,GAAK,GAAK,CAAC,EAElD,MAAMmrB,EAAsB,CAAA,EAEtBC,EAAM,CAACC,EAAoBC,EAAsBntD,IAAgB,CACrE,GAAIA,IAAQ,EAAG,OACf,GAAIA,EAAM,EAAS,MAAA,IAAI,MAAM,kBAAkB,EAC/C,MAAMotD,GAAYN,EAAa,IAAII,CAAQ,GAAK,GAAKltD,EAC/CqtD,GAAgBN,EAAQ,IAAII,CAAS,GAAK,GAAKntD,EACrD,GAAIqtD,EAAe,EAAS,MAAA,IAAI,MAAM,UAAU,EAChD,GAAID,EAAW,EAAS,MAAA,IAAI,MAAM,WAAW,EAChCN,EAAA,IAAII,EAAUE,CAAQ,EAC3BL,EAAA,IAAII,EAAWE,CAAY,EACnC,QAAS3hE,EAAI,EAAGA,EAAIsU,EAAKtU,IACvBshE,EAAQ,KAAKE,CAAQ,CACvB,EAIII,EAAS,CAACJ,EAAoBC,IAAyB,CAC3DF,EACEC,EACAC,EACA,KAAK,IAAIL,EAAa,IAAII,CAAQ,GAAK,EAAGH,EAAQ,IAAII,CAAS,GAAK,CAAC,CAAA,CACvE,EAGII,EAAuB1rB,GAAsC,CACjE,OAAQA,EAAO,CACb,KAAKxX,EAAY,IACjB,KAAKA,EAAY,OACjB,KAAKA,EAAY,MACjB,KAAKA,EAAY,OACjB,KAAKA,EAAY,MACjB,KAAKA,EAAY,MACR,OAAAwX,EACT,QACS,OAAA,IACX,CAAA,EAIF,SAAW,CAACsrB,EAAWK,CAAI,IAAKT,EAAS,CACjC,MAAAG,EAAWK,EAAoBJ,CAAS,EAC1CD,IAAa,OAEjBI,EAAOJ,EAAUC,CAAS,EAGnBG,EAAAjjC,EAAY,QAAS8iC,CAAS,EACvC,CAMM,MAAAM,MAAc,IACdC,EAAc7rB,GAAqB,CACvC4rB,EAAQ,IAAI5rB,GAAQ4rB,EAAQ,IAAI5rB,CAAK,GAAK,GAAK,CAAC,CAAA,EAElD,GAAI3Y,EAAQ,CACV,UAAWgV,KAAQ,KAAK,UAAUhV,CAAM,EAAE,KAGpC,GAAAgV,EAAK,KAAK,OAAS,OAEvB,UAAW2D,KAAS,KAAK,YAAY3D,CAAI,EAAE,KACrC2D,IAAUxX,EAAY,MACxBqjC,EAAW7rB,CAAK,EAKX,UAAA7M,KAAa,KAAK,cAAc,CACzC,MAAO9L,EACP,MAAO,EAAA,CACR,EAAG,CAGE,GAAA8L,EAAU,KAAK,OAAS,OAAW,SAEjC,MAAA6M,EAAQ,KAAK,aAAa7M,CAAS,EACrC6M,IAAU,MAAM6rB,EAAW7rB,CAAK,CACtC,CACF,CAEA,MAAM8rB,EAAsD,CAC1D,CAACtjC,EAAY,GAAG,EAAG,EACnB,CAACA,EAAY,MAAM,EAAG,EACtB,CAACA,EAAY,KAAK,EAAG,EACrB,CAACA,EAAY,MAAM,EAAG,EACtB,CAACA,EAAY,KAAK,EAAG,EACrB,CAACA,EAAY,KAAK,EAAG,EACrB,CAACA,EAAY,UAAU,EAAG,EAC1B,CAACA,EAAY,IAAI,EAAG,CAAA,EAKX,UAAA6iC,KAAYJ,EAAa,OAC9BI,IAAa7iC,EAAY,UACzBojC,EAAQ,IAAIP,CAAQ,GAChBO,EAAA,IAAIP,EAAU,CAAC,GAInB,MAAAU,EAAiB,MAAM,KAAKH,CAAO,EAAE,KAAK,CAACjiE,EAAGyX,IAAM,CACxD,MAAM4qD,EAAariE,EAAE,CAAC,EAAIyX,EAAE,CAAC,EACtB,OAAA4qD,GAAc,EACjBF,EAAkBniE,EAAE,CAAC,CAAC,EAAImiE,EAAkB1qD,EAAE,CAAC,CAAC,EAChD4qD,CAAA,CACL,EAGKC,EAAaF,EAAe,KAChC,CAAC,CAAC/rB,EAAOn1B,CAAC,IAAMm1B,IAAUxX,EAAY,KAAA,EAElC0jC,EAAaH,EAAe,KAChC,CAAC,CAAC/rB,EAAOn1B,CAAC,IAAMm1B,IAAUxX,EAAY,KAAA,GAGrCyjC,GAAcF,EAAe,UAC7BG,GAAcH,EAAe,SAGvBN,EAAAjjC,EAAY,MAAOA,EAAY,UAAU,EAEzCijC,EAAAjjC,EAAY,MAAOA,EAAY,UAAU,IAGzCijC,EAAAjjC,EAAY,MAAOA,EAAY,UAAU,EAEzCijC,EAAAjjC,EAAY,MAAOA,EAAY,UAAU,GAG3CijC,EAAAjjC,EAAY,QAASA,EAAY,UAAU,EAIlD,SAAW,CAAC8iC,EAAWa,CAAI,IAAKJ,EAAgB,CACxC,MAAAV,EAAWK,EAAoBJ,CAAS,EAC1CD,IAAa,MACVI,EAAAJ,EAAU7iC,EAAY,IAAI,CACnC,CAMI,OAHGijC,EAAAjjC,EAAY,QAASA,EAAY,IAAI,EAGxC2iC,EAAQ,OAASJ,EAAM,OAAe,KAEnCI,CACT,CAMA,aACE1uB,EACA0uB,EACY,CACN,MAAAiB,EAAgB3vB,EAAK,QAC3B,UAAW4vB,KAAclB,EAAS,CAChC,MAAM72C,EAAQ83C,EAAc,UAAWE,GAAQA,IAAQD,CAAU,EACjE,GAAI/3C,IAAU,GAAU,MAAA,IAAI,MAAM,8BAA8B,EAClD83C,EAAA,OAAO93C,EAAO,CAAC,CAC/B,CACO,OAAA83C,CACT,CAGA,cAAc/kC,EAAyB,CACrC,OAAI,KAAK,cAAc,EAAU,GAC5B,KAAK,aAAa,EAChB,KAAK,UAAU,oBAAsBA,EADX,EAEnC,CAMA,YAAYltB,EAAuB,CACjC,GAAI,EAAE,OAAOA,GAAQ,UAAYA,EAAI,WAAa,QACzC,OAAA,KAAK,YAAYA,CAAG,EAAE,KAE/B,MAAMg5B,EAAYh5B,EACZoyD,EAAgB,KAAK,iBAAiBp5B,CAAS,EAAE,YAChD,OAAAo5B,IAAkB,OACrBA,EAAcp5B,EAAW,KAAK,YAAa,CAAA,EAC3C,KAAK,YAAYA,CAAS,EAAE,IAClC,CAGA,iBAAiBA,EAAsB58B,EAAgC,CACrE,IAAIi2D,EAAS,EACF,UAAAl6B,KAAWa,EAAU,SAC1Bb,EAAQ,OAAS/7B,IACnBi2D,GAAUl6B,EAAQ,KAGf,OAAAk6B,CACT,CAGA,6BACEr5B,EACAiK,EACS,CACT,OAAOjK,EAAU,SAAS,KAAMb,GAAYA,EAAQ,OAAS8K,CAAW,CAC1E,CAMA,iBAAiBjjC,EAAkC,CAC1C,OAAA,KAAK,gBAAgB,iBAAiBA,CAAG,CAClD,CAGA,YAAYA,EAAwB,CAC3B,OAAA,KAAK,gBAAgB,YAAYA,CAAG,CAC7C,CAOA,uBACEA,EACAi5B,EACoB,CACd,MAAA2O,EAAU,KAAK,iBAAiB5nC,CAAG,EACzC,OAAQi5B,EAAa,CACnB,KAAKtK,GAAY,KACf,OAAOiZ,EAAQ,UAAY,KAE7B,KAAKjZ,GAAY,QACf,OAAOiZ,EAAQ,aAAe,IAElC,CACF,CAOA,YAAY5nC,EAAyB,CAE5B,OADa,KAAK,iBAAiBA,CAAG,EAAE,aAAe,GACzC0uB,GAAS,UAAYA,GAAS,QACrD,CAMA,aAAa1uB,EAAuB,CAClC,MAAMsyD,EAAgB,KAAK,iBAAiBtyD,CAAG,EAAE,MACjD,OAAIsyD,IAAkB,OAAkBA,EACjC,KAAK,YAAYtyD,CAAG,EAAE,KAC/B,CAaA,SAASA,EAAuB,CAE9B,GAAI,EAAE,OAAOA,GAAQ,UAAYA,EAAI,WAAa,QACzC,OAAA,KAAK,aAAaA,CAAG,EAE9B,MAAMg5B,EAAYh5B,EACZ4qD,EAAa,KAAK,iBACtB5xB,EACAf,EAAY,gBAAA,EAEd,OAAO,KAAK,IAAI,KAAK,aAAae,CAAS,EAAI4xB,EAAY,CAAC,CAC9D,CAMA,cAAc5qD,EAAuB,CACnC,MAAMuyD,EAAoB,KAAK,iBAAiBvyD,CAAG,EAAE,UACrD,OAAIuyD,IAAsB,OAAkBA,EACrC,KAAK,YAAYvyD,CAAG,EAAE,SAC/B,CAGA,aAAag5B,EAA8B,CACzC,MAAM4xB,EAAa,KAAK,iBACtB5xB,EACAf,EAAY,qBAAA,EAEd,OAAO,KAAK,IAAI,KAAK,cAAce,CAAS,EAAI4xB,EAAY,CAAC,CAC/D,CAaA,UAAU5qD,EAAuB,CAE/B,GAAI,EAAE,OAAOA,GAAQ,UAAYA,EAAI,WAAa,QACzC,OAAA,KAAK,cAAcA,CAAG,EAE/B,MAAMg5B,EAAYh5B,EACZykC,EAAS,KAAK,aAAazL,CAAS,EAAIA,EAAU,OACxD,GAAIyL,EAAS,EAEL,MAAA,IAAI,MAAM,+BAA+B,EAE1C,OAAAA,CACT,CAMA,aAAazkC,EAAuB,CAC3B,OAAA,KAAK,YAAYA,CAAG,EAAE,KAC/B,CAaA,SAASA,EAAuB,CAE9B,GAAI,EAAE,OAAOA,GAAQ,UAAYA,EAAI,WAAa,QACzC,OAAA,KAAK,aAAaA,CAAG,EAE9B,MAAMg5B,EAAYh5B,EACZ4qD,EAAa,KAAK,iBACtB5xB,EACAf,EAAY,gBAAA,EAEd,OAAO,KAAK,IAAI,KAAK,aAAae,CAAS,EAAI4xB,EAAY,CAAC,CAC9D,CAKA,kBAAkB5xB,EAA8B,CACxC,MAAAw5B,EAAQ,KAAK,SAASx5B,CAAS,EAC/By5B,EAAc,KAAK,iBACvBz5B,EACAf,EAAY,kBAAA,EAEd,OAAO,KAAK,IAAIu6B,EAAQC,EAAa,CAAC,CACxC,CAGA,OAAiB,CACR,OAAA,KAAK,gBAAgB,OAC9B,CAGA,WAAWvlC,EAAyB,CAClC,OAAO,KAAK,MAAA,GAAWA,IAAWH,EAAO,EAC3C,CAEA,uBAAiC,CACxB,OAAA,KAAK,gBAAgB,uBAC9B,CAGA,uBAAiC,CACxB,OAAA,KAAK,SAAS,kBAAoB,EAC3C,CAKA,qBAA8B,CACtB,MAAAiV,EAAmB,KAAK,UAAU,iBACxC,GAAIA,IAAqB,OACjB,MAAA,IAAI,MAAM,kCAAkC,EAE7C,OAAAA,CACT,CAMA,aAAwB,CACf,OAAA,KAAK,UAAU,UAAY,EACpC,CAGA,qBAA+B,CACtB,OAAA,KAAK,cAAc,mBAAqB,EACjD,CAOA,aAAa9U,EAAyC,CAChD,GAAA,KAAK,sBAAuB,CAC9B,MAAMwlC,EAAe,OAAO,KAAK,KAAK,OAAO,EAC7C,OAAAA,EAAa,KAAK,EACXA,EAAa,IAAI,CAAC9jB,EAAMl/C,KAAO,CACpC,KAAM,CAAE,KAAAk/C,CAAK,EACb,GAAI,GAAGl/C,CAAC,EACR,EAAA,CACJ,CACO,OAAA,KAAK,UAAUw9B,CAAM,EAAE,IAChC,CAGA,eAAyB,CAChB,OAAA,KAAK,cAAc,aAAe,EAC3C,CAGA,eAAyB,CAChB,OAAA,KAAK,cAAc,aAAe,EAC3C,CAOA,mBACEyI,EACAqD,EACA0I,EACM,CACA,MAAAixB,EAAW,KAAK,YAAY35B,CAAS,EAGvC,KAAK,6BAA6BA,EAAWf,EAAY,aAAa,GAC3DtC,EAAA,IAAIqC,EAAM,aAAa,EAGlC26B,IAAajkC,GAAS,UAAuBiH,EAAA,IAAIqC,EAAM,SAAS,EAIjE,KAAK,oBAAoBgB,CAAS,EAAE,KAClC45B,GACCA,EAAO,SAAWlxB,EAAU,QAC5BkxB,EAAO,MAAM,CAACttD,EAAG5V,IAAM4V,IAAMo8B,EAAUhyC,CAAC,CAAC,CAC7C,GAEaimC,EAAA,IAAIqC,EAAM,KAAK,CAChC,CAGA,eACErC,EACAzI,EACA7K,EACAL,EACM,CACA,MAAA4lB,EAAU,KAAK,iBAAiBvlB,CAAQ,EACxCumB,EAAgB,KAAK,SAAS,qCAChC,OACAhB,EAAQ,mBAEN14B,EAAW,KAAK,QAAQmT,CAAQ,EAGtC,GAFiB,KAAK,YAAYnT,CAAQ,EAEtC,CAAC,KAAK,eAAe8S,CAAI,EAAG,CACjB2T,EAAA,IAAIqC,EAAM,MAAM,EAE7B,MACF,CAGI,KAAK,eAAehW,CAAI,GAAgB2T,EAAA,IAAIqC,EAAM,QAAQ,EAC1D,KAAK,aAAahW,CAAI,IAAMkL,GAAqByI,EAAA,IAAIqC,EAAM,OAAO,EAElE4Q,GACFA,EAAcjT,EAAczI,EAAQ7K,EAAUL,EAAM,KAAK,aAAa,EAE7D,UAAAylB,KAAQ,KAAK,SAClBA,EAAK,oBACFA,EAAA,mBACH9R,EACAzI,EACA7K,EACAL,EACA,KAAK,YAAY,CAAA,CAIzB,CAMA,aACE2T,EACAqD,EACAhX,EACM,CACA,MAAA4lB,EAAU,KAAK,iBAAiB5O,CAAS,EACzC4P,EAAgB,KAAK,SAAS,mCAChC,OACAhB,EAAQ,iBAEN+qB,EAAW,KAAK,YAAY35B,CAAS,EAE3C,GAAI,CAAC,KAAK,eAAehX,CAAI,EAAG,CACjB2T,EAAA,IAAIqC,EAAM,MAAM,EAE7B,MACF,CAGI26B,IAAajkC,GAAS,UAAuBiH,EAAA,IAAIqC,EAAM,SAAS,EAGhE,KAAK,6BAA6BgB,EAAWf,EAAY,WAAW,GACzDtC,EAAA,IAAIqC,EAAM,WAAW,EAGhC,KAAK,eAAehW,CAAI,GAAgB2T,EAAA,IAAIqC,EAAM,QAAQ,EAGzDzK,GAAiByL,EAAU,KAAMhX,CAAI,GAC3B2T,EAAA,IAAIqC,EAAM,QAAQ,EAE7B4Q,GACFA,EAAcjT,EAAcqD,EAAWhX,EAAM,KAAK,aAAa,EAEtD,UAAAylB,KAAQ,KAAK,SAClBA,EAAK,kBACFA,EAAA,iBACH9R,EACAqD,EACAhX,EACA,KAAK,YAAY,CAAA,CAIzB,CAGA,eACE2T,EACA2D,EACAC,EACM,CACA,MAAAqO,EAAU,KAAK,iBAAiBtO,CAAQ,EACxCsP,EAAgB,KAAK,SAAS,qCAChC,OACAhB,EAAQ,mBAGR,KAAK,6BAA6BtO,EAAUrB,EAAY,aAAa,GAC1DtC,EAAA,IAAIqC,EAAM,aAAa,EAGlC,KAAK,YAAYsB,CAAQ,IAAM5K,GAAS,UAC7BiH,EAAA,IAAIqC,EAAM,SAAS,EAG9BsB,EAAS,QAAUC,EAAS,OAAoB5D,EAAA,IAAIqC,EAAM,MAAM,EAGhE,KAAK,6BAA6BuB,EAAUtB,EAAY,YAAY,GACzDtC,EAAA,IAAIqC,EAAM,YAAY,EAGjC,KAAK,gBAAgBuB,EAAUD,CAAQ,GAC5B3D,EAAA,IAAIqC,EAAM,SAAS,EAE9B4Q,GACFA,EAAcjT,EAAc2D,EAAUC,EAAU,KAAK,aAAa,EAEzD,UAAAkO,KAAQ,KAAK,SAClBA,EAAK,oBACFA,EAAA,mBACH9R,EACA2D,EACAC,EACA,KAAK,YAAY,CAAA,CAIzB,CAGA,cAAcv5B,EAA4C,CAEpD,OADiB,KAAK,YAAY,EAAE,YAAc,GAC7B,GAClB,KAAK,YAAYA,CAAG,EAAE,IAC/B,CAGA,yBAAyBu4B,EAAgD,CACvE,OAAQA,EAAU,KAAM,CACtB,KAAK1J,GAAc,UAAW,CAC5B,MAAMmK,EAAY,KAAK,qBAAqBT,EAAU,WAAW,EACjE,OAAIS,IAAc,KAAa,KACxB,CAAE,GAAGT,EAAW,UAAAS,EAEzB,CACA,QACS,OAAAT,CAEX,CACF,CAGA,yBACED,EAC4B,CAC5B,MAAM0e,EAAqB,CAAA,EAC3B,UAAWze,KAAaD,EAAY,CAC5B,MAAAu6B,EAAoB,KAAK,yBAAyBt6B,CAAS,EACjE,GAAIs6B,IAAsB,KAAa,OAAA,KACvC7b,EAAmB,KAAK6b,CAAiB,CAC3C,CACO,OAAA7b,CACT,CAEA,kBACErhB,EACA4C,EACAa,EACAnmB,EACM,CACYkmB,GAAAxD,EAAc4C,EAAWa,EAAMnmB,CAAG,EACzC,UAAAw0B,KAAQ,KAAK,SAClBA,EAAK,uBACPA,EAAK,sBAAsB9R,EAAc4C,EAAWa,EAAMnmB,CAAG,CAGnE,CAGA,wBACE0iB,EACAqD,EACAC,EACAX,EACM,CACA,MAAAsP,EAAU,KAAK,iBAAiB5O,CAAS,EAM/C,GAAI,EAFFC,IAAgBtK,GAAY,KAAOiZ,EAAQ,SAAWA,EAAQ,aAErD,CACIjS,EAAA,IAAIqC,EAAM,cAAc,EACrC,MACF,CAGM,MAAA86B,GACH75B,IAAgBtK,GAAY,KACzBiZ,EAAQ,UACRA,EAAQ,eAAiB,GAE3BtP,EAAW,SAAWw6B,EAAM,QACjBn9B,EAAA,IAAIqC,EAAM,QAAQ,EAMjC,MAAM+6B,EAAgB,CACpB,UAAA/5B,EACA,WAAAV,EACA,UAAW,IAAA,EAEb,SAAW,CAAC5oC,EAAG0pC,CAAI,IAAK05B,EAAM,UAAW,CACjC,MAAAv6B,EAAYD,EAAW5oC,CAAC,EAC9B,GAAI,CAAC6oC,EAAW,MAChB,KAAK,kBAAkB5C,EAAc4C,EAAWa,EAAM25B,CAAa,CACrE,CACF,CAGA,YAAYn7C,EAAiC,CAC3C,OAAQA,EAAK,KAAM,CACjB,KAAKsX,EAAS,OAAQ,CACpB,KAAM,CAAE,OAAAhC,EAAQ,WAAAuU,EAAY,SAAApf,CAAA,EAAazK,EACnCo7C,GAAoB,IAAM,CAC9B,GAAIvxB,IAAe,OAAW,CAC5B,MAAMuU,EAAW,KAAK,sBAAsB9oB,EAAQuU,CAAU,EAC9D,OAAKuU,EACE,KAAK,YAAYA,CAAQ,EADV,IAExB,CAEG,OAAA,KAAK,uBAAyB,KAAK,WAAW9oB,CAAM,IACrD7K,IAAa,OAENA,EAEF,IAAA,KAET,GAAI,CAAC2wC,EAAyB,OAAA,KAE9B,MAAMhC,EAAU,KAAK,eACnB9jC,EACA,KAAK,cAAc8lC,CAAgB,CAAA,EAG9B,MAAA,CACL,GAAGp7C,EACH,SAAUo7C,EACV,UAAWhC,IAAY,KACvB,QAASA,GAAW,CAAC,CAAA,CAEzB,CACA,KAAK9hC,EAAS,OAAQ,CACd,KAAA,CAAE,WAAAgnB,EAAY,WAAAC,CAAe,EAAAv+B,EAC7B0hB,EAAW,KAAK,qBAAqB4c,CAAU,EAC/C3c,EAAW,KAAK,qBAAqB4c,CAAU,EAErD,GADI,CAAC7c,GACD,CAACC,EAAiB,OAAA,KAMtB,MAAM05B,EAJe,KAAK,6BACxB35B,EACArB,EAAY,gBAAA,EAEqB,KAAO,KAAK,aAAaqB,CAAQ,EAC9D03B,EACJiC,IAAgB,KACZ,GACA,KAAK,eAAe35B,EAAS,MAAO,CAAC25B,CAAW,CAAC,EAChD,MAAA,CACL,GAAGr7C,EACH,SAAA0hB,EACA,SAAAC,EACA,UAAWy3B,IAAY,KACvB,QAASA,GAAW,CAAC,CAAA,CAEzB,CACA,KAAK9hC,EAAS,YACd,KAAKA,EAAS,KACd,KAAKA,EAAS,OAAQ,CACd,KAAA,CAAE,YAAAimB,CAAgB,EAAAv9B,EAClBohB,EAAY,KAAK,qBAAqBmc,CAAW,EACvD,OAAKnc,EACE,CAAE,GAAGphB,EAAM,UAAAohB,GADK,IAEzB,CACA,KAAK9J,EAAS,KAAM,CACZ,KAAA,CAAE,OAAAhC,CAAW,EAAAtV,EACbo5C,EAAU,KAAK,eAAe9jC,EAAQ,KAAK,iBAAiB,EAC3D,MAAA,CAAE,GAAGtV,EAAM,UAAWo5C,IAAY,KAAM,QAASA,GAAW,CAAA,EACrE,CACA,KAAK9hC,EAAS,iBAAkB,CAC9B,KAAM,CAAE,YAAAimB,EAAa,YAAAlc,EAAa,WAAAX,CAAA,EAAe1gB,EAE3CohB,EAAY,KAAK,qBAAqBmc,CAAW,EACvD,GAAI,CAACnc,EAAkB,OAAA,KAEvB,MAAMw4B,EAAO,KAAK,uBAAuBx4B,EAAWC,CAAW,EAC/D,GAAIu4B,IAAS,KAAa,OAAA,KAC1B,MAAMR,EAAU,KAAK,eAAeh4B,EAAU,MAAOw4B,CAAI,EAEnDxa,EAAqB,KAAK,yBAAyB1e,CAAU,EACnE,OAAI0e,IAAuB,KAAa,KAEjC,CACL,GAAGp/B,EACH,UAAAohB,EACA,mBAAAge,EACA,UAAWga,IAAY,KACvB,QAASA,GAAW,CAAC,CAAA,CAEzB,CACA,KAAK9hC,EAAS,iBAAkB,CACxB,KAAA,CAAE,SAAAsU,CAAS,EAAI,KAAK,UAC1B,OAAIA,IAAa,OAAkB,KAC5B,CACL,GAAG5rB,EACH,SAAA4rB,CAAA,CAEJ,CACA,QACS,OAAA5rB,CAEX,CACF,CAGA,qBACE+d,EACA/d,EACAoY,EACM,CACA,MAAA9C,EAAS2C,GAAajY,CAAI,EAE1Bs7C,GAAkB,IAAM,CAC5B,OAAQt7C,EAAK,KAAM,CACjB,KAAKsX,EAAS,OACZ,OAAOtX,EAAK,SACd,KAAKsX,EAAS,YACd,KAAKA,EAAS,KACZ,OAAOtX,EAAK,UACd,KAAKsX,EAAS,iBACZ,OAAOtX,EAAK,cAAgB+W,GAAY,QACpC/W,EAAK,UACL,KACN,QACS,OAAA,IACX,CAAA,KAGIu7C,GAAa,IAAM,CACvB,OAAQv7C,EAAK,KAAM,CACjB,KAAKsX,EAAS,KACd,KAAKA,EAAS,OACd,KAAKA,EAAS,OACd,KAAKA,EAAS,iBACZ,OAAOtX,EAAK,UACd,QACS,MAAA,EACX,CAAA,KAEIw7C,GAAc,IAAqB,CACvC,OAAQx7C,EAAK,KAAM,CACjB,KAAKsX,EAAS,OACd,KAAKA,EAAS,OACd,KAAKA,EAAS,YACd,KAAKA,EAAS,KACd,KAAKA,EAAS,KACd,KAAKA,EAAS,iBACd,KAAKA,EAAS,SACZ,OAAOtX,EAAK,WACd,QACS,OAAA,IACX,CAAA,KA4BF,GAzBK,KAAK,aAAa,GAAgB+d,EAAA,IAAIqC,EAAM,UAAU,EAEvD9K,IAAW,MAAQ,CAAC6C,GAAqBC,EAAM9C,CAAM,GAC1CyI,EAAA,IAAIqC,EAAM,IAAI,EAEzB9K,IAAW,MAAQimC,GAAwBx9B,EAAA,IAAIqC,EAAM,IAAI,EAEzD9K,IAAW,MAAQ,CAAC,KAAK,cAAcA,CAAM,IAEzC,KAAK,WAAWA,CAAM,GAAK,KAAK,SAAS,oBAChCyI,EAAA,IAAIqC,EAAM,IAAI,GAG3Bk7B,IAAmB,MAAQ,CAACA,EAAe,OAChCv9B,EAAA,IAAIqC,EAAM,KAAK,EAG5B,KAAK,UAAU,WAAa,SAC3B,KAAK,UAAU,SAAS,UAAY,KACrC,CAAC,CAAC9I,EAAS,iBAAkBA,EAAS,iBAAiB,EAAE,SACvDtX,EAAK,IACP,GAEa+d,EAAA,IAAIqC,EAAM,QAAQ,EAE7Bo7B,IAAe,KAAM,CACvB,GAAIlmC,IAAW,KACP,MAAA,IAAI,MAAM,wCAAwC,EACtDkmC,IAAe,KAAK,UAAUlmC,CAAM,EAAE,YAC3ByI,EAAA,IAAIqC,EAAM,KAAK,CAChC,CAEA,OAAQpgB,EAAK,KAAM,CACjB,KAAKsX,EAAS,YAAa,CACnB,KAAA,CAAE,UAAA8J,EAAW,UAAA0I,CAAc,EAAA9pB,EAC5B,KAAA,mBAAmB+d,EAAcqD,EAAW0I,CAAS,EAC1D,KACF,CACA,KAAKxS,EAAS,OAAQ,CACpB,KAAM,CAAE,OAAAhC,EAAQ,SAAA7K,EAAU,KAAAL,GAASpK,EACnC,KAAK,eAAe+d,EAAczI,EAAQ7K,EAAUL,CAAI,EACxD,KACF,CACA,KAAKkN,EAAS,KAAM,CACZ,KAAA,CAAE,UAAA8J,EAAW,KAAAhX,CAAS,EAAApK,EACvB,KAAA,aAAa+d,EAAcqD,EAAWhX,CAAI,EAC/C,KACF,CACA,KAAKkN,EAAS,OAAQ,CACd,KAAA,CAAE,SAAAoK,EAAU,SAAAC,CAAa,EAAA3hB,EAC1B,KAAA,eAAe+d,EAAc2D,EAAUC,CAAQ,EACpD,KACF,CACA,KAAKrK,EAAS,iBAAkB,CAC9B,KAAM,CAAE,UAAA8J,EAAW,YAAAC,EAAa,mBAAA+d,CAAA,EAAuBp/B,EAClD,KAAA,wBACH+d,EACAqD,EACAC,EACA+d,CAAA,EAEF,KACF,CACA,KAAK9nB,EAAS,KAAM,CACZ,KAAA,CAAE,OAAAhC,CAAW,EAAAtV,EACbsW,EAAc,KAAK,UAAUhB,CAAM,EACpC,KAAK,sBAAsBA,EAAQ3d,EAAoB,GAC7ComB,EAAA,IAAIqC,EAAM,OAAO,EAChC,MAAMi4B,GAAgB,IAChB/hC,EAAY,eAAiB,OACxBA,EAAY,aACjBA,EAAY,WAAa,OACpBA,EAAY,SAAS,OACvB,QAET,GAAI+hC,IAAiB,KAAM,CAGZt6B,EAAA,IAAIqC,EAAM,IAAI,EAC3B,KACF,CACIi4B,GAAgB,GAAgBt6B,EAAA,IAAIqC,EAAM,UAAU,EACxD,KACF,CACA,KAAK9I,EAAS,SAAU,CAChB,KAAA,CAAE,OAAAhC,CAAW,EAAAtV,EACR,UAAA6vB,KAAQ,KAAK,SAClBA,EAAK,qBACPA,EAAK,oBAAoB9R,EAAczI,EAAQ,KAAK,aAAa,EAGrE,KACF,CACA,KAAKgC,EAAS,iBAAkB,CAC9B,KAAM,CAAE,WAAAmkC,EAAY,SAAA7vB,EAAU,kBAAA8vB,CAAA,EAAsB17C,EAC9C,CAAE,cAAA27C,CAAkB,EAAA/vB,EAExB8vB,IAAsB,QACtBC,IAAkB,SACjB,CAAC,OAAO,UAAUD,CAAiB,GAClCA,EAAoB,GACpBA,GAAqBC,EAAc,SAExB59B,EAAA,IAAIqC,EAAM,qBAAqB,EAC1CwL,EAAS,KAAO6vB,GAAyB19B,EAAA,IAAIqC,EAAM,KAAK,EAC5D,KACF,CACA,KAAK9I,EAAS,kBAAmB,CACzB,KAAA,CAAE,KAAAlN,CAAS,EAAApK,EACZ,KAAK,sBAAsB,GAAgB+d,EAAA,IAAIqC,EAAM,OAAO,GAC7D,CAACjK,GAAsB/L,CAAI,GAAKA,IAAS,IAC9B2T,EAAA,IAAIqC,EAAM,uBAAuB,EAChD,KACF,CACA,KAAK9I,EAAS,OAAQ,CAChBc,IAASF,GAAK,KAAkB6F,EAAA,IAAIqC,EAAM,IAAI,EAClD,KACF,CACF,CACF,CAOA,mBACEpgB,EACAoY,EAKA,CACM,MAAA2F,MAAiC,IACjC5iC,EAAW,KAAK,YAAY6kB,CAAI,EACtC,OAAI7kB,EACG,KAAA,qBAAqB4iC,EAAc5iC,EAAUi9B,CAAI,EAEzC2F,EAAA,IAAIqC,EAAM,OAAO,EAEzB,CACL,SAAAjlC,EACA,aAAA4iC,EACA,QAASA,EAAa,OAAS,CAAA,CAEnC,CAKA,QAAQ/d,EAAYoY,EAAqB,CACvC,OAAO,KAAK,mBAAmBpY,EAAMoY,CAAI,EAAE,OAC7C,CAMA,WAAWgJ,EAA+B,SACpBA,EAAU,GAC9B,MAAM9L,EAAS8L,EAAU,MACnBhJ,EAAO9C,IAAWH,EAAO,GAAK+C,GAAK,GAAKA,GAAK,GAC7C8X,EAAU,KAAK,iBAAiB5O,CAAS,EACzC8c,EAAK,IAAI3U,GAAU,KAAMnI,EAAU,MAAOhJ,CAAI,EAGpD,OAAK,KAAK,cAAc9C,CAAM,EAK1B0a,EAAQ,UAAY,KAAK,eAAe1a,EAAQ0a,EAAQ,QAAQ,IAE9DhzB,EAAAgzB,EAAQ,YAAR,YAAAhzB,EAAmB,UAAW,EACzB,KAAK,QACVkhC,EAAG,gBAAgB9c,EAAWrK,GAAY,KAAM,CAAA,CAAE,EAClDqB,CAAA,EAIG,GAIJgJ,EAAU,MAMb,KAAK,oBAAoBA,CAAS,EAAE,KAAM0I,GACxC,KAAK,QAAQoU,EAAG,OAAO9c,EAAW0I,CAAS,EAAG1R,CAAI,CAAA,GAQpD,KAAK,cAEF,KAAMhO,GAAUuL,GAAiBvL,EAAMgX,EAAU,IAAI,EAAI,EAAI,CAAE,EAC/D,KAAMhX,GAAS,KAAK,QAAQ8zB,EAAG,KAAK9c,EAAWhX,CAAI,EAAGgO,CAAI,CAAC,GAO9D,KAAK,cAAc,CAEjB,KAAM,CAAEuJ,GAAcA,EAAS,QAAUrM,EAAS,EAAI,CAAE,CACzD,CAAA,EAAE,KAAMqM,GAAa,KAAK,QAAQuc,EAAG,OAAO9c,EAAWO,CAAQ,EAAGvJ,CAAI,CAAC,EAEjE,GAKP4X,EAAQ,aACR,KAAK,eAAe1a,EAAQ0a,EAAQ,WAAW,IAE3C/tB,EAAA+tB,EAAQ,eAAR,YAAA/tB,EAAsB,UAAW,EAC5B,KAAK,QACVi8B,EAAG,gBAAgB9c,EAAWrK,GAAY,QAAS,CAAA,CAAE,EACrDqB,CAAA,EAIG,GAGF,GA/CE,GAlBA,EAkEX,CAEA,cAAc9C,EAAgB,CACrB,OAAA,KAAK,UAAUA,CAAM,EAAE,UAChC,CACF,CCvyDO,MAAMsmC,EAAQ,CAMnB,YACEvlC,EACAuZ,EACApZ,EACA,CATFhgB,EAAA,iBACAA,EAAA,iBACAA,EAAA,kBACAA,EAAA,kBAOE,KAAK,SAAW6f,EAChB,KAAK,SAAWuZ,EAChB,KAAK,UAAYpZ,EAKjB,KAAK,UAAY,IAAIqhC,GACnB,KAAK,SACL,KAAK,SACL,CAAC,EACD,CAAC,EACD,KAAK,SAAA,CAET,CAGA,aAA8B,CACrB,MAAA,CACL,UAAW,KAAK,UAChB,QAAS,IAAA,CAEb,CAQA,aAAahsB,EAA8B,CACzC,MAAMzK,EAAY,KAAK,UAAU,WAAWyK,CAAE,EAC9C,GAAIzK,IAAc,OAChB,MAAM,IAAI,MAAM,aAAayK,CAAE,iBAAiB,EAE3C,OAAAzK,CACT,CAGA,iBAAiB9L,EAAgBuU,EAA8B,CAC7D,MAAMU,EAAO,KAAK,UAAUjV,CAAM,EAAE,KAC9BumC,EAAYtxB,EAAK,UAAW6T,GAAaA,EAAS,KAAOvU,CAAU,EACzE,GAAIgyB,IAAc,GAChB,MAAM,IAAI,MAAM,GAAGvmC,CAAM,6BAA6BuU,CAAU,EAAE,EACpE,KAAM,CAACS,CAAI,EAAIC,EAAK,OAAOsxB,EAAW,CAAC,EAChC,OAAAvxB,CACT,CASA,mBAAmBhV,EAAgBwmC,EAAmC,CAC9D,MAAAxlC,EAAc,KAAK,UAAUhB,CAAM,EACnC,CAAE,SAAA8iC,CAAa,EAAA9hC,EAMrB,OAHIA,EAAY,eAAiB,QAAuBA,EAAA,eAGnD8hC,GACS,IACR0D,IAAgB,OAAkB1D,EAAS,MACxCA,EAAS,OAAO0D,EAAa,CAAC,EAAE,CAAC,MAE3B,KALO,IAMxB,CAGA,iBAAiBxmC,EAAgBgV,EAAY,CAE3C,MAAMyxB,EAAc,KAAK,UAAUzmC,CAAM,EAAE,YACvCymC,IAAgB,QAClBA,EAAY,KAAKzxB,CAAI,CAEzB,CAEA,YAAYxf,EAAmB,CAC7B,OAAQA,EAAI,KAAM,CAChB,KAAKuN,EAAW,eAAgB,CACxB,KAAA,CAAE,MAAA1I,CAAU,EAAA7E,EAClB,OAAO,KAAK,KAAK,SAAS,EAAE,QAASjuB,GAAQ,CAKpC,OAAA,KAAK,UAAUA,CAAG,CAAA,CAC1B,EACM,OAAA,OAAO,KAAK,UAAW8yB,CAAK,EACnC,KACF,CACA,KAAK0I,EAAW,cAAe,CACvB,KAAA,CAAE,MAAA2jC,CAAU,EAAAlxC,EAElB,GAAImL,GAAiB+lC,CAAK,GAAK/lC,GAAiB,KAAK,UAAU,KAAK,EAC5D,MAAA,IAAI,MAAM,8BAA8B,EAEhD,KAAK,UAAU,MAAQ+lC,EACvB,KACF,CACA,KAAK3jC,EAAW,gBAAiB,CAC/B,KAAM,CAAE,OAAAmT,EAAQ,WAAAywB,EAAY,OAAA9f,EAAQ,YAAAjrB,EAAa,QAAAgrC,CAAY,EAAApxC,EAC7D,KAAK,UAAU,OAAS0gB,EACxB,KAAK,UAAU,WAAaywB,EAC5B,UAAW3mC,IAAU,CAACH,EAAO,GAAIA,EAAO,EAAE,EAAG,CACrC,MAAAmB,EAAc,KAAK,UAAUhB,CAAM,EAGnC,CAAE,cAAAoJ,CAAkB,EAAApI,EACtBoI,IAAkB,OACpBpI,EAAY,eAAiB4lC,EAAUx9B,EACvCpI,EAAY,cAAgB,OAG1B6lB,EAAO7mB,CAAM,GAAK,MAAOgB,EAAY,SAAW,IAChDpF,EAAYoE,CAAM,IAAM,SACdgB,EAAA,YAAcpF,EAAYoE,CAAM,EAChD,CACA,KACF,CACA,KAAK+C,EAAW,WAAY,CACpB,KAAA,CAAE,OAAA/C,EAAQ,cAAAoJ,CAAkB,EAAA5T,EAC5BwL,EAAc,KAAK,UAAUhB,CAAM,EACzCgB,EAAY,cAAgBoI,EAC5B,KACF,CACA,KAAKrG,EAAW,SAAU,CAClB,KAAA,CAAE,OAAA/C,EAAQ,YAAA6mC,CAAgB,EAAArxC,EAChC,KAAK,UAAU,kBAAoB,KAAK,UAAU,cAAcwK,CAAM,EACtE,KAAK,UAAU,aAET,MAAAgB,EAAc,KAAK,UAAUhB,CAAM,EACnC,CAAE,cAAAoJ,CAAkB,EAAApI,EAC1B,GAAIoI,IAAkB,KACd,MAAA,IAAI,MAAM,+BAA+B,EACjDpI,EAAY,eAAiB6lC,EAAcz9B,EAC3CpI,EAAY,cAAgB,KAC5B,KACF,CACA,KAAK+B,EAAW,aAAc,CACtB,KAAA,CAAE,SAAAuT,CAAa,EAAA9gB,EACjB8gB,IAAa,KACf,OAAO,KAAK,UAAU,SAEtB,KAAK,UAAU,SAAWA,EAE5B,KACF,CACA,KAAKvT,EAAW,SAAU,CAClB,KAAA,CAAE,OAAA/C,EAAQ,KAAAoV,CAAS,EAAA5f,EAEzB,GAAI,KAAK,SAAS,wBAA0BwK,IAAWH,EAAO,GAAI,MAElE,KAAK,UAAUG,CAAM,EAAE,KAAK,KAAK,GAAGoV,CAAI,EACxC,KACF,CACA,KAAKrS,EAAW,YAAa,CACrB,KAAA,CAAE,OAAA/C,EAAQ,KAAAoV,CAAS,EAAA5f,EAEzB,GAAI,KAAK,SAAS,wBAA0BwK,IAAWH,EAAO,GAAI,MAE5D,MAAAinC,EAAU,KAAK,UAAU,aAC7B,KAAK,UAAU,cAAc9mC,CAAM,EACnCoV,CAAA,EAEF,GAAI0xB,IAAY,KACR,MAAA,IAAI,MAAM,WAAW,EAExB,KAAA,UAAU9mC,CAAM,EAAE,KAAO8mC,EAC9B,KACF,CACA,KAAK/jC,EAAW,WAAY,CACpB,KAAA,CAAE,OAAA/C,CAAW,EAAAxK,EACnB,KAAK,UAAUwK,CAAM,EAAE,KAAO,CAAA,EAC9B,KACF,CACA,KAAK+C,EAAW,iBAAkB,CAC1B,KAAA,CAAE,WAAAwR,EAAY,UAAAzI,CAAc,EAAAtW,EAC9B+e,GAAc,MACX,KAAA,iBAAiBzI,EAAU,MAAOyI,CAAU,EAGnD,KAAK,UAAU,WAAWzI,EAAU,EAAE,EAAI,KAAK,MAC7C,KAAK,UAAUA,CAAS,CAAA,EAE1B,KACF,CACA,KAAK/I,EAAW,gBAAiB,CACzB,KAAA,CAAE,YAAAklB,CAAgB,EAAAzyB,EAClBsW,EAAY,KAAK,aAAamc,CAAW,EAC/Cnc,EAAU,MAAQ,GAClB,KACF,CACA,KAAK/I,EAAW,kBAAmB,CAC3B,KAAA,CAAE,YAAAklB,CAAgB,EAAAzyB,EAClBsW,EAAY,KAAK,aAAamc,CAAW,EAC/Cnc,EAAU,MAAQ,GAClB,KACF,CACA,KAAK/I,EAAW,uBAAwB,CAChC,KAAA,CAAE,YAAAklB,EAAa,MAAA3S,CAAU,EAAA9f,EACzBsW,EAAY,KAAK,aAAamc,CAAW,EAC/Cnc,EAAU,MAAQwJ,EAClB,KACF,CACA,KAAKvS,EAAW,KAAM,CACd,KAAA,CAAE,YAAAklB,EAAa,KAAAnzB,CAAS,EAAAU,EACxBsW,EAAY,KAAK,aAAamc,CAAW,EAC/Cnc,EAAU,KAAOhX,EACjB,KACF,CACA,KAAKiO,EAAW,KAAM,CACd,KAAA,CAAE,aAAAgkC,EAAc,aAAAC,CAAiB,EAAAxxC,EACjCigB,EAAa,KAAK,aAAasxB,CAAY,EAC3CrxB,EAAa,KAAK,aAAasxB,CAAY,EAC3C7mC,EAAQsV,EAAW,KACnBrV,EAAQsV,EAAW,KACzBD,EAAW,KAAOrV,EAClBsV,EAAW,KAAOvV,EAClB,KACF,CACA,KAAK4C,EAAW,UAAW,CACzB,KAAM,CAAE,OAAA/C,EAAQ,KAAAgV,EAAM,WAAAT,EAAY,YAAA0yB,EAAa,kBAAAC,CAC7C,EAAA1xC,EACE0xC,GACF,KAAK,mBAAmBlnC,CAAM,EAE1B,MAAAgB,EAAc,KAAK,UAAUhB,CAAM,EAErCgB,EAAY,UAAY,SAIxBA,EAAY,eAAiB,QAC7BA,EAAY,eAAiB,EAE7BA,EAAY,QAAU,KACfimC,IAAgB,SAAWjmC,EAAY,QAAUimC,IAE5DjmC,EAAY,KAAK,KAAK,CAAE,KAAAgU,EAAM,GAAIT,EAAY,EAC9C,KACF,CACA,KAAKxR,EAAW,sBAAuB,CACrC,KAAM,CAAE,OAAA/C,EAAQ,cAAAmnC,EAAe,YAAAF,CAAA,EAAgBzxC,EACzCwL,EAAc,KAAK,UAAUhB,CAAM,EACpC,KAAA,mBAAmBA,EAAQmnC,CAAa,EAEzCnmC,EAAY,UAAY,QAAaimC,IAAgB,SACvDjmC,EAAY,QAAUimC,GACxB,KACF,CACA,KAAKlkC,EAAW,aAAc,CACtB,KAAA,CAAE,OAAA/C,EAAQ,WAAAuU,CAAe,EAAA/e,EAC1B,KAAA,iBAAiBwK,EAAQuU,CAAU,EACxC,KACF,CACA,KAAKxR,EAAW,iBAAkB,CAC1B,KAAA,CAAE,YAAAklB,EAAa,OAAAtS,CAAW,EAAAngB,EAC1BsW,EAAY,KAAK,aAAamc,CAAW,EAC/Cnc,EAAU,OAAS,KAAK,IAAIA,EAAU,OAAS6J,EAAQ,CAAC,EACxD,KACF,CACA,KAAK5S,EAAW,iBAAkB,CAC1B,KAAA,CAAE,YAAAklB,EAAa,QAAAmf,CAAY,EAAA5xC,EAC3BsW,EAAY,KAAK,aAAamc,CAAW,EACxC,OAAA,KAAK,UAAU,WAAWA,CAAW,EACxCmf,GACF,KAAK,iBAAiBt7B,EAAU,MAAOA,EAAU,IAAI,EAEvD,KACF,CACA,KAAK/I,EAAW,oBAAqB,CAC7B,KAAA,CAAE,YAAAklB,EAAa,YAAApD,CAAgB,EAAArvB,EAC/BsW,EAAY,KAAK,aAAamc,CAAW,EAC/Cnc,EAAU,KAAK,KAAO+Y,EAGtB,KACF,CACA,KAAK9hB,EAAW,YAAa,CACrB,KAAA,CAAE,YAAAklB,EAAa,QAAAhd,CAAY,EAAAzV,EACf,KAAK,aAAayyB,CAAW,EACrC,SAAS,KAAKhd,CAAO,EAC/B,KACF,CACA,KAAKlI,EAAW,eAAgB,CACxB,KAAA,CAAE,YAAAklB,EAAa,aAAAjS,CAAiB,EAAAxgB,EACpB,KAAK,aAAayyB,CAAW,EACrC,SAAS,OAAOjS,EAAc,CAAC,EACzC,KACF,CACA,KAAKjT,EAAW,YAAa,CAC3B,KAAM,CAAE,YAAAklB,EAAa,aAAAjS,EAAc,WAAAqxB,CAAA,EAAe7xC,EAC5CsW,EAAY,KAAK,aAAamc,CAAW,EACrCnc,EAAA,SAASkK,CAAY,EAAE,IAAMqxB,EACnC7xC,EAAI,cACNsW,EAAU,SAASkK,CAAY,EAAE,YAAcxgB,EAAI,aAErD,KACF,CACA,KAAKuN,EAAW,cAAe,CACvB,KAAA,CAAE,OAAA/C,EAAQ,SAAA8iC,CAAa,EAAAttC,EACvBwL,EAAc,KAAK,UAAUhB,CAAM,EACrC,GAAAgB,EAAY,WAAa,OACrB,MAAA,IAAI,MAAM,2CAA2C,EAEjDA,EAAA,SAAW,CAAC,GAAG8hC,CAAQ,EACnC,KACF,CACA,KAAK//B,EAAW,cAAe,CACxB,KAAA,UAAU,SAAWvN,EAAI,SAC9B,KACF,CACA,KAAKuN,EAAW,wBAAyB,CAClC,KAAA,UAAU,iBAAmBvN,EAAI,iBACtC,KACF,CACA,KAAKuN,EAAW,0BAA2B,CACnC,KAAA,CAAE,QAAAgS,CAAY,EAAAvf,EACd8xC,EAAyB,KAAK,SAAS,uBAC7C,GAAIA,IAA2B,OAC7B,MAAM,IAAI,MACR,yDAAA,EAEA,GAAA,KAAK,UAAU,mBAAqB,OAChC,MAAA,IAAI,MAAM,oCAAoC,EAC/BA,EAAAvyB,EAAS,KAAK,UAAU,gBAAgB,EAC/D,KACF,CACA,KAAKhS,EAAW,aAAc,CACtB,KAAA,CACJ,OAAA/C,EACA,YAAAunC,EACA,aAAAC,EACA,gBAAAC,EACA,mBAAAC,CACE,EAAAlyC,EACE,CAAE,MAAAisC,CAAU,EAAA,KAAK,UAAUzhC,CAAM,EACvCyhC,EAAM,SAAW8F,GAAe,EAChC9F,EAAM,UAAY+F,GAAgB,EAClC/F,EAAM,aAAegG,GAAmB,EACxChG,EAAM,gBAAkBiG,GAAsB,EAC9C,KACF,CACA,KAAK3kC,EAAW,gBAAiB,CACzB,KAAA,CAAE,OAAA/C,EAAQ,WAAAkmC,CAAe,EAAA1wC,EAC1B,KAAA,UAAUwK,CAAM,EAAE,WAAakmC,EACpC,KACF,CAKF,CACF,CACF,CChXO,MAAMyB,EAAW,CAGtB,YAAYC,EAAiC,CAF7C1mD,EAAA,oBAGE,KAAK,YAAc0mD,CACrB,CAEA,QAAQC,EAAsB7+D,EAAe,CACtC,KAAA,YAAY,KAAK6+D,EAAc,CAClC,KAAM9kC,EAAW,SACjB,IAAA/5B,CAAA,CACD,CACH,CAEA,YAAY6+D,EAAsB,CAChC,KAAK,QAAQA,CAAY,CAC3B,CAEA,gBAAgBA,EAAsB,CACpC,KAAK,QAAQA,EAAc,CAAE,QAAStzC,EAAY,aAAc,CAClE,CAEA,aAAamyC,EAAkB,CAC7B,KAAK,kBAAkB,CACrB,KAAM3jC,EAAW,cACjB,MAAA2jC,CAAA,CACD,CACH,CAEA,UAAU1mC,EAAgB,CACxB,KAAK,kBAAkB,CACrB,KAAM+C,EAAW,WACjB,OAAA/C,EACA,cAAe,IAAI,KAAK,EAAE,QAAQ,CAAA,CACnC,CACH,CAEA,QAAQA,EAAgB,CACtB,KAAK,kBAAkB,CACrB,KAAM+C,EAAW,SACjB,OAAA/C,EACA,YAAa,IAAI,KAAK,EAAE,QAAQ,CAAA,CACjC,CACH,CAEA,YAAYA,EAAgB8iC,EAA+B,CAOzD,KAAK,kBAAkB,CACrB,KAAM//B,EAAW,cACjB,OAAA/C,EACA,SAAA8iC,CAAA,CACD,CACH,CAEA,YAAY54B,EAAoB,CAC9B,KAAK,kBAAkB,CACrB,KAAMnH,EAAW,cACjB,SAAAmH,CAAA,CACD,CACH,CAEA,QAAQlK,EAAgBoV,EAAkB,CACxC,KAAK,kBAAkB,CACrB,KAAMrS,EAAW,SACjB,OAAA/C,EACA,KAAAoV,CAAA,CACD,CACH,CAEA,WAAWpV,EAAgBoV,EAAkB,CAC3C,KAAK,kBAAkB,CACrB,KAAMrS,EAAW,YACjB,OAAA/C,EACA,KAAAoV,CAAA,CACD,CACH,CAEA,UAAUpV,EAAgB,CACxB,KAAK,kBAAkB,CACrB,KAAM+C,EAAW,WACjB,OAAA/C,CAAA,CACD,CACH,CAMA,gBAAgB8L,EAAsByI,EAAqB,CAIzD,KAAK,kBAAkB,CACrB,KAAMxR,EAAW,iBACjB,WAAAwR,EACA,UAAW,KAAK,MAAM,KAAK,UAAUzI,CAAS,CAAC,CAAA,CAChD,CACH,CAEA,eAAemc,EAAqB,CAClC,KAAK,kBAAkB,CACrB,KAAMllB,EAAW,gBACjB,YAAAklB,CAAA,CACD,CACH,CAEA,iBAAiBA,EAAqB,CACpC,KAAK,kBAAkB,CACrB,KAAMllB,EAAW,kBACjB,YAAAklB,CAAA,CACD,CACH,CAEA,qBAAqBA,EAAqB3S,EAAe,CACvD,KAAK,kBAAkB,CACrB,KAAMvS,EAAW,uBACjB,YAAAklB,EACA,MAAA3S,CAAA,CACD,CACH,CAEA,mBAAmB2S,EAAqBpD,EAAqB,CAC3D,KAAK,kBAAkB,CACrB,KAAM9hB,EAAW,oBACjB,YAAAklB,EACA,YAAApD,CAAA,CACD,CACH,CAEA,KAAKoD,EAAqBnzB,EAAY,CACpC,KAAK,kBAAkB,CACrB,KAAMiO,EAAW,KACjB,YAAAklB,EACA,KAAAnzB,CAAA,CACD,CACH,CAEA,KAAKiyC,EAAsBC,EAAsB,CAC/C,KAAK,kBAAkB,CACrB,KAAMjkC,EAAW,KACjB,aAAAgkC,EACA,aAAAC,CAAA,CACD,CACH,CAEA,SACEhnC,EACAgV,EACAT,EACA0yB,EACAC,EACA,CACA,MAAMY,EAA0B,CAC9B,KAAM/kC,EAAW,UACjB,OAAA/C,EACA,KAAAgV,EACA,WAAAT,EACA,YAAA0yB,EACA,kBAAmBC,GAAqB,EAAA,EAErC,KAAA,4BAA4BlnC,EAAQ8nC,EAAS,CAChD,GAAGA,EACH,YAAa,OACb,KAAM,CAAC,CAAA,CACR,CACH,CAEA,mBACE9nC,EACAmnC,EACAF,EACA,CACA,MAAMa,EAAoC,CACxC,KAAM/kC,EAAW,sBACjB,OAAA/C,EACA,cAAAmnC,EACA,YAAAF,CAAA,EAEG,KAAA,4BAA4BjnC,EAAQ8nC,EAAS,CAChD,GAAGA,EACH,YAAa,MAAA,CACd,CACH,CAEA,YAAY9nC,EAAgBuU,EAAoB,CAC9C,KAAK,kBAAkB,CACrB,KAAMxR,EAAW,aACjB,OAAA/C,EACA,WAAAuU,CAAA,CACD,CACH,CAEA,gBAAgB0T,EAAqBtS,EAAgBqT,EAAqB,CACxE,KAAK,kBAAkB,CACrB,KAAMjmB,EAAW,iBACjB,YAAAklB,EACA,OAAAtS,EACA,WAAAqT,CAAA,CACD,CACH,CAEA,gBAAgBf,EAAqBmf,EAAmB,CACtD,KAAK,kBAAkB,CACrB,KAAMrkC,EAAW,iBACjB,YAAAklB,EACA,QAAAmf,CAAA,CACD,CACH,CAEA,WAAWnf,EAAqBhd,EAAkB,CAChD,KAAK,kBAAkB,CACrB,KAAMlI,EAAW,YACjB,YAAAklB,EACA,QAAAhd,CAAA,CACD,CACH,CAEA,cAAcgd,EAAqBjS,EAAsB,CACvD,KAAK,kBAAkB,CACrB,KAAMjT,EAAW,eACjB,YAAAklB,EACA,aAAAjS,CAAA,CACD,CACH,CAEA,WACEiS,EACAjS,EACAqxB,EACAn8B,EACA,CACA,KAAK,kBAAkB,CACrB,KAAMnI,EAAW,YACjB,YAAAklB,EACA,aAAAjS,EACA,WAAAqxB,EACA,YAAAn8B,CAAA,CACD,CACH,CAEA,YAAYoL,EAAoB,CAC9B,KAAK,kBAAkB,CACrB,KAAMvT,EAAW,aACjB,SAAAuT,CAAA,CACD,CACH,CAEA,eAAgB,CACd,KAAK,kBAAkB,CACrB,KAAMvT,EAAW,aACjB,SAAU,IAAA,CACX,CACH,CAEA,SAAShe,EAAiB,CACxB,KAAK,kBAAkB,CACrB,KAAMge,EAAW,SACjB,QAAAhe,CAAA,CACD,CACH,CAEA,wBAAwBib,EAAgB7K,EAAkB,CACxD,KAAK,kBAAkB,CACrB,KAAM4N,EAAW,0BACjB,OAAA/C,EACA,SAAA7K,CAAA,CACD,CACH,CAEA,aAAa6K,EAAgB7K,EAAkB,CAC7C,KAAK,kBAAkB,CACrB,KAAM4N,EAAW,cACjB,OAAA/C,EACA,SAAA7K,CAAA,CACD,CACH,CAEA,mBAAmBA,EAAkBwgB,EAAgB2D,EAAoB,CACvE,KAAK,kBAAkB,CACrB,KAAMvW,EAAW,qBACjB,SAAA5N,EACA,OAAQmkB,EACR,OAAA3D,CAAA,CACD,CACH,CAEA,cACE3b,EACA+tC,EACAnF,EACAC,EACA,CACA,KAAK,YAAY,yBAAyB,CACxC,CAACjgC,GAAK,GAAG,EAAG,CACV,KAAMG,EAAW,eACjB,OAAA/I,EACA,MAAO+tC,CACT,EACA,CAACnlC,GAAK,EAAE,EAAG,CACT,KAAMG,EAAW,eACjB,OAAA/I,EACA,MAAO4oC,CACT,EACA,CAAChgC,GAAK,EAAE,EAAG,CACT,KAAMG,EAAW,eACjB,OAAA/I,EACA,MAAO6oC,CACT,CAAA,CACD,CACH,CAEA,kBAAkBgF,EAAsB7tC,EAAgBK,EAAkB,CACnE,KAAA,YAAY,KAAKwtC,EAAc,CAClC,KAAM9kC,EAAW,eACjB,OAAA/I,EACA,MAAAK,CAAA,CACD,CACH,CAIA,aAAa7E,EAAmB,CACzB,KAAA,YAAY,aAAaA,CAAG,CACnC,CAEA,kBAAkBA,EAAmB,CAC9B,KAAA,YAAY,kBAAkBA,CAAG,CACxC,CAOA,4BACEwK,EACAxK,EACAwyC,EACM,CACN,KAAK,YAAY,4BAA4BhoC,EAAQxK,EAAKwyC,CAAS,CACrE,CACF,CChTA,MAAMC,GAAqB,EASpB,MAAMC,EAAO,CAqClB,YACEN,EACApnD,EACAwZ,EACAsgB,EACA6tB,EACApmD,EACAm4B,EACAO,EACApE,EACAxP,EACAU,EACA6gC,EACAC,EACAn+B,EACAo+B,EACA,CApDFpnD,EAAA,oBACAA,EAAA,gBACAA,EAAA,eAGAA,EAAA,iBAEAA,EAAA,iBAEAA,EAAA,uBACAA,EAAA,gBACAA,EAAA,kBACAA,EAAA,mBACAA,EAAA,kBAIAA,EAAA,kBAEAA,EAAA,kBACAA,EAAA,mBAEAA,EAAA,iBACAA,EAAA,mBACAA,EAAA,4BAOAA,EAAA,uBACAA,EAAA,0BAEAA,EAAA,8BAmBE,KAAK,YAAc0mD,EACnB,KAAK,QAAUpnD,EACf,KAAK,OAASwZ,EACd,KAAK,SAAWsgB,EACX,KAAA,SAAW,KAAK,SAAS,CAAC,EAC/B,KAAK,eAAiB6tB,EAEtB,KAAK,QAAUpmD,EACf,KAAK,UAAYm4B,EACjB,KAAK,WAAaO,EAClB,KAAK,UAAYpE,EAIjB,UAAWlhB,KAAY,OAAO,KAAK,KAAK,SAAS,EAC/C,GAAI,KAAK,QAAQA,CAAQ,IAAM,OAC7B,MAAM,IAAI,MACR,QAAQA,CAAQ,mIAAA,EAKhB,MAAA+L,EACJonC,IACC,IAAM,CACL,MAAMpnC,EAAYD,GAAkB,KAAK,QAAS,KAAK,QAAQ,EAC/D,SAAW,CAACsnC,EAASC,CAAc,IAAK,OAAO,QAAQ3hC,CAAQ,EAAG,CAChE,MAAM7G,EAASuoC,EACfrnC,EAAUlB,CAAM,EAAE,SAAWwoC,CAC/B,CACAtnC,OAAAA,EAAU,SAAWgJ,EACrBhJ,EAAU,WAAW,eAAiBqG,EAC/BrG,CAAA,KAEX,KAAK,UAAYA,EAIjB,KAAK,UAAY,IAAIqhC,GACnB,KAAK,SACL,KAAK,SACL,KAAK,QACL,KAAK,UACL,KAAK,SAAA,EAGP,MAAMkG,EAAU,IAAInC,GAAQ,KAAK,SAAU,KAAK,SAAUplC,CAAS,EAC9D,KAAA,YAAY,mBAAoB1L,GAAQ,CAC3CizC,EAAQ,YAAYjzC,CAAG,CAAA,CACxB,EACD,KAAK,WAAa,IAAImyC,GAAW,KAAK,WAAW,EAE5C,KAAA,SAAW,IAAI/yB,GAAe,IAAI,EAClC,KAAA,WAAa,IAAIuB,GAAW,IAAI,EACrC,KAAK,oBAAsB,IAAIK,GAAoB,KAAK,UAAU,EAElE,KAAK,eAAiB,GACtB,KAAK,kBAAoB4xB,EACzB,KAAK,sBAAwBC,CAC/B,CAMA,MAAO,CACM,UAAA9tB,KAAQ,KAAK,SAClBA,EAAK,iBACFA,EAAA,gBAAgB,KAAK,YAAa,CAAA,EAMvC,GAFJ,KAAK,aAAa,EAEd,CAAC,KAAK,UAAU,aAAa,EACzB,MAAA,IAAI,MAAM,+CAA+C,CACnE,CAUA,aAA6B,CACpB,MAAA,CACL,UAAW,KAAK,UAChB,OAAQ,KAAK,SACb,GAAI,KAAK,mBAAA,CAEb,CAEA,eAA2B,CAClB,MAAA,CACL,GAAG,KAAK,YAAY,EACpB,GAAI,KAAK,UAAA,CAEb,CAEA,WAAWznC,EAA4B,CACrC,MAAM4nC,EAAU,KAAK,UAAU,KAAK,UAAU,YAAY5nC,CAAG,CAAC,EACvD,OAAA4nC,GAAoB,EAC7B,CAOA,eAA4C,CACpC,MAAAtE,EAAa,KAAK,UAAU,WAClC,GAAIA,IAAe,OACX,MAAA,IAAI,MAAM,gDAAgD,EAE3D,OAAAA,CACT,CAMA,WAA2B,CACnB,MAAAsyB,EAAW1oC,GAEb,KAAE,KAAK,SAAS,6BAA+B,KAC/C,EACEA,IAAWH,EAAO,KACjB,KAAK,SAAS,+BAAiC,MAElD,EACEG,IAAWH,EAAO,KACjB,KAAK,SAAS,+BAAiC,MAElD,KAAK,UAAU,SAASG,CAAM,EAAE,SAAW,GAI3C,KAAK,SAAS,iBACd,KAAK,SAAS,gBAAgBA,EAAQ,KAAK,YAAY,CAAC,GAOxD,OAAA0oC,EAAQ7oC,EAAO,EAAE,EAAUA,EAAO,GAClC6oC,EAAQ7oC,EAAO,EAAE,EAAUA,EAAO,GAC/B,IACT,CAKA,YAAYG,EAAgBkW,EAAyB,CAOnD,MALI,GAAC,KAAK,UAAU,MAAM,GACtBlW,IAAWH,EAAO,IAClB,CAAC,KAAK,SAAS,iCAAmCqW,IAAWlW,GAI/D,KAAK,SAAS,kBACd,CAAC,KAAK,SAAS,iBAAiBA,EAAQkW,EAAQ,KAAK,YAAa,CAAA,EAKtE,CAMA,gBAAgBlB,EAAYM,EAAexgB,EAAuB,CACzD,MAAA,CACL,IAAK,KAAK,cAAc,EAAE,mBAAmB,SAAS,EACtD,KAAAkgB,EACA,OAAQ,EACR,SAAU,CAAC,EAGX,MAAO,KAAK,UAAU,cAAc,EACpC,MAAAM,EACA,KAAAxgB,CAAA,CAEJ,CAGA,SAASkL,EAAsB,CAC7B,KAAM,CAAE,QAAA2oC,EAAS,YAAA1B,GACf,KAAK,UAAU,sBAAsBjnC,CAAM,EACzC2oC,IAAY,MACd,KAAK,WAAW,SACd3oC,EACA2oC,EACA,GAAG,KAAK,gBAAgB,gBAAgB,GACxC1B,IAAgB,KAAO,OAAYA,CAAA,CAGzC,CAMA,cAAcjnC,EAAgBgV,EAAkB,CAC9C,KAAK,WAAW,SACdhV,EACAgV,EACA,GAAG,KAAK,gBAAgB,gBAAgB,GACxC,OACA,EAAA,CAEJ,CAGA,gBAAgBhV,EAAgBmnC,EAA6B,CAC3D,MAAMrE,EAAW,KAAK,UAAU,YAAY9iC,CAAM,EAClD,KAAK,WAAW,mBACdA,EACAmnC,EACAA,IAAkBrE,EAAS,OAAS,GAClCA,EAAS,OAAS,GAClB,KAAK,UAAU,sBAAsB9iC,EAAQ9d,EAAwB,EACnE4gD,EAASA,EAAS,OAAS,CAAC,EAC5B,MAAA,CAER,CAGA,cAAqB,CAInB,KAAK,WAAW,kBAAkB,CAChC,KAAM//B,EAAW,KAAA,CAClB,EAEK,MAAAmH,EAAW,KAAK,UAAU,YAAY,EACtC0+B,EAAY1+B,EAAS,YAAc,QAAaA,EAAS,UACzD2+B,EAAe7zC,GAAyB,CAE5C,QAASxyB,EAAIwyB,EAAK,OAAS,EAAGxyB,GAAK,EAAGA,IAAK,CACzC,MAAM2I,EAAI,KAAK,MAAM,KAAK,UAAY3I,EAAI,EAAE,EAC5C,CAACwyB,EAAK7pB,CAAC,EAAG6pB,EAAKxyB,CAAC,CAAC,EAAI,CAACwyB,EAAKxyB,CAAC,EAAGwyB,EAAK7pB,CAAC,CAAC,CACxC,CAAA,EAIF,UAAW60B,IAAU,CAACH,EAAO,GAAIA,EAAO,EAAE,EAAG,CACrC,KAAA,CACJ,aAAAipC,EACA,aAAcC,IAIX,IAAM,CACT,MAAMzG,EAAe,KAAK,UAAU,gBAAgBtiC,CAAM,EAC1D,GAAIsiC,IAAiB,KAAM,MAAO,CAAE,aAAc,CAAC,GAAGA,CAAY,CAAE,EAEhE,GAAA,KAAK,UAAU,oBAAoB,EAAU,MAAA,CAAE,aAAc,CAAA,GACjE,MAAMh7B,EAAgB,KAAK,cAAc,EAAE,eAAetH,CAAM,EAChE,GAAIsH,IAAkB,OAAW,CAC3B,GAAA,KAAK,UAAU,gBAAgB,EAAU,MAAA,CAAE,aAAc,CAAA,GAC7D,MAAM,IAAI,MAAM,iCAAiCtH,CAAM,EAAE,CAC3D,CACM,KAAA,CAAE,KAAAhL,CAAS,EAAAsS,EACV,MAAA,CACL,aAAclS,GAAeJ,CAAI,EACjC,aAAcA,EAAK,YAAA,CACrB,KAOIW,EAJyB,KAAK,UAAU,sBAC5CqK,EACA7d,EAAA,EAGE4mD,EACA,OACEC,EACJrzC,IAAiB,OAAY,GAAKmzC,EAAa,QAAQnzC,CAAY,EAKrE,GAJIqzC,IAAsB,IAAiBF,EAAA,OAAOE,EAAmB,CAAC,EAEjEJ,GAAWC,EAAYC,CAAY,EAEpCE,IAAsB,GAAI,CAC5B,GAAIrzC,IAAiB,OACnB,MAAM,IAAI,MACR,sDAAA,EAEJmzC,EAAa,KAAKnzC,CAAY,CAChC,CAEA,KAAK,WAAW,YACdqK,EACA8oC,EAAa,IAAKpnB,IAAU,CAC1B,KAAAA,CAAA,EACA,CAAA,CAEN,CAEW,UAAAnH,KAAQ,KAAK,SAClBA,EAAK,eACFA,EAAA,cAAc,KAAK,YAAa,CAAA,EAKnC,MAAAmoB,EAAQ,KAAK,UAAU,cAAc,EAC5B,KAAK,UAAU,WAAW,EACzC,UAAW1iC,IAAU,CAACH,EAAO,GAAIA,EAAO,EAAE,EAAG,CAC3C,MAAM4oB,EAAQ,KAAK,UAAU,gBAAgBzoB,CAAM,EAC/C,GAAAyoB,EAAM,OAASia,EACjB,MAAM,IAAI,MACR,uDAAA,EAGJ,MAAMha,EAAc,KAAK,UAAU,iBAAiB1oB,EAAQyoB,EAAM,MAAM,EACpE,GAAAC,EAAY,SAAWD,EAAM,OAC/B,MAAM,IAAI,MACR,2EAAA,EAGJ,QAAS,EAAI,EAAG,EAAIA,EAAM,OAAQ,IAAK,CACrC,MAAM3zB,EAAO,CACX,IAAK,KAAK,UAAU,kBAAkB,EAAGkL,CAAM,EAC/C,OAAQ0oB,EAAY,CAAC,CAAA,EAEvB,KAAK,eAAeD,EAAM,CAAC,EAAGzoB,EAAQlL,CAAI,CAC5C,CACF,CAGA,UAAWkL,IAAU,CAACH,EAAO,GAAIA,EAAO,EAAE,EACxC,QAASr9B,EAAI,EAAGA,EAAIylE,GAAoBzlE,IACtC,KAAK,SAASw9B,CAAM,EAInB,KAAA,cAAA,EAAgB,eAAiB,GAGjC,KAAA,UAAUH,EAAO,EAAE,CAC1B,CAEA,QACEqW,EACAywB,EACA9f,EACAjrB,EACM,SACN,KAAK,WAAW,kBAAkB,CAChC,KAAMmH,EAAW,gBACjB,OAAAmT,EACA,WAAAywB,EACA,OAAA9f,EACA,YAAAjrB,EACA,QAAS,IAAI,KAAK,EAAE,QAAQ,CAAA,CAC7B,EACI,KAAA,WAAW,aAAa8E,GAAU,KAAK,EACxC,KAAK,SAAS,cAChB,KAAK,SAAS,aAAawV,EAAQ2Q,EAAQ,KAAK,aAAa,EAE/D,MAAMoiB,EAA0B,CAAA,EAC1BC,EAA8B,CAAA,EACpC,UAAWlpC,IAAU,CAACH,EAAO,GAAIA,EAAO,EAAE,EAAG,CACvC,GAAAgnB,EAAO7mB,CAAM,GAAK,GAAO,CAC3B,MAAMpG,GAASlS,EAAA,KAAK,UAAUsY,CAAM,EAAE,WAAvB,YAAAtY,EAAiC,OAChD,GAAIkS,IAAW,OACP,MAAA,IAAI,MAAM,6CAA6C,EAC/DqvC,EAAc,KAAKrvC,CAAM,CAC3B,CACA,UAAWzE,KAAYyG,EAAYoE,CAAM,GAAK,CAAA,EAAI,CAChD,MAAMpG,GAASjN,EAAA,KAAK,UAAUqT,CAAM,EAAE,WAAvB,YAAArT,EAAiC,OAChD,GAAIiN,IAAW,OACb,MAAM,IAAI,MACR,qDAAA,EAEJsvC,EAAgB,KAAK,CACnB,OAAAtvC,EACA,SAAAzE,CAAA,CACD,CACH,CACF,CACA,KAAK,WAAW,aAAa,CAC3B,KAAM4N,EAAW,qBACjB,cAAAkmC,EACA,YAAaC,CAAA,CACd,CACH,CAEA,iBAAiBp9B,EAAsBM,EAA4B,CAG/D,GAAA,EAAAN,IAAcM,GACd,KAAK,UAAU,6BACbN,EACAf,EAAY,YACd,GAIF,MAAK,qBAAqB,CACxB,KAAM4J,EAAmB,iBACzB,UAAA7I,EACA,SAAAM,EACA,IAAK,KAAK,YAAY,CAAA,CACvB,EACGA,GACF,KAAK,qBAAqB,CACxB,KAAMuI,EAAmB,oBACzB,UAAWvI,EACX,SAAUN,EACV,IAAK,KAAK,YAAY,CAAA,CACvB,EAEE,KAAA,WAAW,gBAAgBA,EAAU,EAAE,EACxCM,IACF,KAAK,WAAW,kBAAkB,CAChC,KAAMrJ,EAAW,aACjB,OAAQqJ,EAAS,MACjB,aAAc,CAAA,CACf,EACD,KAAK,qBAAqB,CACxB,KAAMuI,EAAmB,mBACzB,UAAWvI,EACX,SAAUN,EACV,IAAK,KAAK,YAAY,CAAA,CACvB,GAEH,KAAK,qBAAqB,CACxB,KAAM6I,EAAmB,gBACzB,UAAA7I,EACA,SAAAM,EACA,IAAK,KAAK,YAAY,CAAA,CACvB,EAED,UAAW+8B,KAAkB,KAAK,UAAU,iBAAA,EACtCA,EAAe,KAAOr9B,EAAU,IACpC,KAAK,qBAAqB,CACxB,KAAM6I,EAAmB,qBACzB,UAAWw0B,EACX,mBAAoBr9B,EACpB,SAAAM,EACA,IAAK,KAAK,YAAY,CAAA,CACvB,EAEL,CAMA,gBACEN,EACA6J,EACAvJ,EAEAwJ,EACM,CACA,MAAA8E,EAAU,KAAK,WAAW5O,CAAS,EACnC4P,EAAgBhB,EAAQ,qBACxB0uB,EAAmB1uB,EAAQ,iBAE7BgB,IACF/F,EAAS+F,EAAc5P,EAAW6J,EAAQvJ,EAAU,KAAK,aAAa,GAG7D,UAAAmO,KAAQ,KAAK,SAClBA,EAAK,uBACP5E,EAAS4E,EAAK,qBACZzO,EACA6J,EACAvJ,EACA,KAAK,YAAY,CAAA,GAuBvB,GAlBIuJ,GAAU,GAQZ,EAAEC,GAAyB,KAC3B,KAAK,UAAU,6BACb9J,EACAf,EAAY,YACd,GAMEq+B,GAOE,CANuBA,EACzBt9B,EACA6J,EACAvJ,EACA,KAAK,YAAY,CAAA,EAEM,OAK3B,GACE,KAAK,UAAU,6BACbN,EACAf,EAAY,aAAA,EAEd,CACK,KAAA,kBAAkBe,EAAWf,EAAY,aAAa,EAC3D,MACF,CAEA,MAAMs+B,EAAiB,KAAK,UAAU,kBAAkBv9B,CAAS,EAC3Dw9B,EACJ,KAAK,UAAU,UAAUx9B,CAAS,EAAIu9B,EAIlCE,EAAoB,KAAK,IAAI5zB,EAAQ2zB,CAAmB,EACxD/D,EAAc,KAAK,IAAIgE,EAAmBF,CAAc,EAC1D9D,EAAc,GACX,KAAA,WAAW,WAAWz5B,EAAU,GAAI,CACvC,KAAMf,EAAY,mBAClB,IAAKw6B,EACL,YAAa,kBAAkBA,CAAW,UAC1C,OAAQ5wB,EAAmB,UAAA,CAC5B,EAEH,MAAM60B,EAAeD,EAAoBhE,EACzC,GAAIiE,EAAe,EAAG,CACd,MAAAC,EAAmB,KAAK,UAAU,6BACtC39B,EACAf,EAAY,mBAAA,EAERwM,EAAS,KAAK,UAAU,UAAUzL,CAAS,EACjD,KAAK,WAAW,gBACdA,EAAU,GACV29B,EAAmB,KAAK,IAAID,EAAcjyB,EAAS,CAAC,EAAIiyB,EACxDp9B,GAAA,YAAAA,EAAU,EAAA,CAEd,CAwBA,GAtBIA,IACF,KAAK,WAAW,kBAAkB,CAChC,KAAMrJ,EAAW,aACjB,OAAQqJ,EAAS,MACjB,gBAAiBm9B,CAAA,CAClB,EACD,KAAK,qBAAqB,CACxB,KAAM50B,EAAmB,kBACzB,UAAWvI,EACX,OAAQm9B,EACR,SAAUz9B,EACV,IAAK,KAAK,YAAY,CAAA,CACvB,GAEH,KAAK,qBAAqB,CACxB,KAAM6I,EAAmB,cACzB,UAAA7I,EACA,OAAQy9B,EACR,SAAAn9B,EACA,IAAK,KAAK,YAAY,CAAA,CACvB,EAEG,EAAC,KAAK,UAAU,mBAAmBN,CAAS,EAEhD,IAAI,KAAK,UAAU,UAAUA,CAAS,GAAK,EAAG,CACvC,KAAA,iBAAiBA,EAAWM,CAAQ,EACzC,MACF,CAEK,KAAA,WAAW,WAAWN,EAAU,GAAI,CACvC,KAAMf,EAAY,aAClB,IAAKw+B,EACL,OAAQ50B,EAAmB,UAAA,CAC5B,EACH,CAQA,0BAA0B7I,EAAsB6J,EAAsB,CAIpE,MAAM+zB,EAAa,KAAK,IAAI59B,EAAU,OAAQ6J,CAAM,EACpD,KAAK,WAAW,gBAAgB7J,EAAU,GAAI,CAAC49B,CAAU,EAEzD,KAAK,qBAAqB,CACxB,KAAM/0B,EAAmB,qBACzB,UAAA7I,EACA,OAAQ49B,EACR,IAAK,KAAK,YAAY,CAAA,CACvB,CACH,CAMA,kBACE59B,EACAiK,EACA36B,EACA8vB,EACA+K,EACM,CACN,GAAK,KAAK,UAAU,mBAAmBnK,CAAS,EAEhD,UAAW,CAACoJ,EAAKjK,CAAO,IAAKa,EAAU,SAAS,UAC9C,GAAIb,EAAQ,OAAS8K,GAAe9K,EAAQ,SAAWgL,EAAQ,CAC7D,KAAK,WAAW,WACdnK,EAAU,GACVoJ,EACAjK,EAAQ,IAAM7vB,EACd8vB,GAAeA,EAAYD,EAAQ,IAAM7vB,CAAG,CAAA,EAE9C,MACF,CAGG,KAAA,WAAW,WAAW0wB,EAAU,GAAI,CACvC,KAAMiK,EACN,IAAA36B,EACA,YAAa8vB,GAAeA,EAAY9vB,CAAG,EAC3C,OAAA66B,CAAA,CACD,EACH,CAEA,qBACEnK,EACA+J,EACAC,EACM,CACFD,IAAe,GACZ,KAAA,kBACH/J,EACAf,EAAY,iBACZ8K,CAAA,EAGAC,IAAgB,GACb,KAAA,kBACHhK,EACAf,EAAY,sBACZ+K,CAAA,EAGJ,KAAK,qBAAqB,CACxB,KAAMnB,EAAmB,oBACzB,UAAA7I,EACA,WAAA+J,EACA,YAAAC,EACA,IAAK,KAAK,YAAY,CAAA,CACvB,CACH,CAMA,kBAAkBhK,EAAsBiK,EAAmC,CACzE,SAAW,CAACb,EAAKjK,CAAO,IAAKa,EAAU,SAAS,UAC1C,GAAAb,EAAQ,OAAS8K,EACnB,YAAK,WAAW,cAAcjK,EAAU,GAAIoJ,CAAG,EACxC,GAGJ,MAAA,EACT,CAGA,OAAO9I,EAAqBC,EAA2B,CACrD,MAAMiL,EAAQ,KAAK,UAAU,SAASlL,CAAQ,EACzC,KAAA,gBAAgBC,EAAUiL,EAAOlL,CAAQ,CAChD,CAGA,0BAA0BN,EAA4B,CAEhD,KAAK,UAAU,cAAc,GAC5B,KAAA,WAAW,iBAAiBA,EAAU,EAAE,CAC/C,CAEA,mBAAmBA,EAAsB+Y,EAAqB,CAC5D,KAAK,WAAW,mBAAmB/Y,EAAU,GAAI+Y,CAAW,CAC9D,CAKA,iCACE3N,EACAtzC,EAC6B,CAC7B,OAAQszC,EAAG,KAAM,CACf,KAAKvC,EAAmB,QAAS,CACzB,MAAAg1B,EAAU/lE,EAAS+wC,EAAmB,OAAO,EAC/C,GAAAg1B,EAAS,OAAOA,EAAQzyB,CAAE,EAC9B,KACF,CACA,KAAKvC,EAAmB,iBAAkB,CAClC,MAAAg1B,EAAU/lE,EAAS+wC,EAAmB,gBAAgB,EACxD,GAAAg1B,EAAS,OAAOA,EAAQzyB,CAAE,EAC9B,KACF,CACA,KAAKvC,EAAmB,gBAAiB,CACjC,MAAAg1B,EAAU/lE,EAAS+wC,EAAmB,eAAe,EACvD,GAAAg1B,EAAS,OAAOA,EAAQzyB,CAAE,EAC9B,KACF,CACA,KAAKvC,EAAmB,WAAY,CAC5B,MAAAg1B,EAAU/lE,EAAS+wC,EAAmB,UAAU,EAClD,GAAAg1B,EAAS,OAAOA,EAAQzyB,CAAE,EAC9B,KACF,CACA,KAAKvC,EAAmB,SAAU,CAC1B,MAAAg1B,EAAU/lE,EAAS+wC,EAAmB,QAAQ,EAChD,GAAAg1B,EAAS,OAAOA,EAAQzyB,CAAE,EAC9B,KACF,CACA,KAAKvC,EAAmB,oBAAqB,CACrC,MAAAg1B,EAAU/lE,EAAS+wC,EAAmB,mBAAmB,EAC3D,GAAAg1B,EAAS,OAAOA,EAAQzyB,CAAE,EAC9B,KACF,CACA,KAAKvC,EAAmB,mBAAoB,CACpC,MAAAg1B,EAAU/lE,EAAS+wC,EAAmB,kBAAkB,EAC1D,GAAAg1B,EAAS,OAAOA,EAAQzyB,CAAE,EAC9B,KACF,CACA,KAAKvC,EAAmB,cAAe,CAC/B,MAAAg1B,EAAU/lE,EAAS+wC,EAAmB,aAAa,EACrD,GAAAg1B,EAAS,OAAOA,EAAQzyB,CAAE,EAC9B,KACF,CACA,KAAKvC,EAAmB,qBAAsB,CACtC,MAAAg1B,EAAU/lE,EAAS+wC,EAAmB,oBAAoB,EAC5D,GAAAg1B,EAAS,OAAOA,EAAQzyB,CAAE,EAC9B,KACF,CACA,KAAKvC,EAAmB,oBAAqB,CACrC,MAAAg1B,EAAU/lE,EAAS+wC,EAAmB,mBAAmB,EAC3D,GAAAg1B,EAAS,OAAOA,EAAQzyB,CAAE,EAC9B,KACF,CACA,KAAKvC,EAAmB,kBAAmB,CACnC,MAAAg1B,EAAU/lE,EAAS+wC,EAAmB,iBAAiB,EACzD,GAAAg1B,EAAS,OAAOA,EAAQzyB,CAAE,EAC9B,KACF,CACA,KAAKvC,EAAmB,qBAAsB,CACtC,MAAAg1B,EAAU/lE,EAAS+wC,EAAmB,oBAAoB,EAC5D,GAAAg1B,EAAS,OAAOA,EAAQzyB,CAAE,EAC9B,KACF,CACA,KAAKvC,EAAmB,iBAAkB,CAClC,MAAAg1B,EAAU/lE,EAAS+wC,EAAmB,gBAAgB,EACxD,GAAAg1B,EAAS,OAAOA,EAAQzyB,CAAE,EAC9B,KACF,CACA,QACQ,MAAA,IAAI,MAAM,8BAA8B,CAElD,CACF,CAKA,qBAAqBA,EAA0B,CACvC,KAAA,CAAE,UAAApL,CAAc,EAAAoL,EAGhBtzC,EAAW,KAAK,WAAWkoC,CAAS,EAAE,SACxCloC,IAAa,QACV,KAAA,iCAAiCszC,EAAItzC,CAAQ,EAKpD,IAAIoyC,EAAe,EACnB,KAAO,KAAK,UAAU,mBAAmBlK,CAAS,GAAG,CAC7C,MAAAb,EAAUa,EAAU,SAASkK,CAAY,EAC/C,GAAI/K,IAAY,OACd,MAEF,MAAM0P,EAAc,KAAK,WAAW1P,EAAQ,IAAI,EAChD,IAAI2+B,EAAe,GACnB,GAAIjvB,IAAgB,QACdA,EAAY,WAAa,OAAW,CACtC,MAAMn+B,EAAM,KAAK,iCACf,CACE,GAAG06B,EACH,QAAAjM,EACA,aAAA+K,CACF,EACA2E,EAAY,QAAA,EAEVn+B,GAAOA,EAAI,SAAW,QAAaA,EAAI,SAC1BotD,EAAA,GAEnB,CAKF,GAHI3+B,EAAQ,QAAUA,EAAQ,SAAWiM,EAAG,OAC3B0yB,EAAA,IAEbA,GAAgB,KAAK,UAAU,mBAAmB99B,CAAS,EAAG,CAChE,KAAK,WAAW,cAAcA,EAAU,GAAIkK,CAAY,EAExD,QACF,CACAA,GACF,CACF,CAEA,UAAUhW,EAAsB,CAE9B,KAAK,UAAU,gBAAgBA,CAAM,EAAE,QAAS8L,GAAc,CAG1D,KAAK,UAAU,6BACbA,EACAf,EAAY,MACd,GAGEe,EAAU,OACT,KAAA,WAAW,eAAeA,EAAU,EAAE,CAAA,CAC5C,EAGD,MAAM+9B,EAAsB,KAAK,UAAU,YAAA,EAAc,iBACzD,GAAIA,IAAwB,OAAW,CACrC,MAAMC,EAAY,IAAI,MAAMD,CAAmB,EAAE,KAC/C1oC,EAAY,OAAA,EAET,KAAA,WAAW,QAAQnB,EAAQ8pC,CAAS,EACzC,KAAK,WAAW,QAAQ,KAAK,UAAU,cAAc9pC,CAAM,EAAG8pC,CAAS,CACzE,CAGA,KAAK,SAAS9pC,CAAM,EAEpB,UAAW8L,KAAa,KAAK,UAAU,gBAAgB9L,CAAM,EAC3D,KAAK,qBAAqB,CACxB,KAAM2U,EAAmB,WACzB,UAAA7I,EACA,IAAK,KAAK,YAAY,CAAA,CACvB,EAIC,GAAA,KAAK,UAAU,aAAe,EAAG,CAGnC,MAAMg4B,EAAU,KAAK,UAAU,eAAe9jC,EAAQ,CACpDmB,EAAY,KACZA,EAAY,IAAA,CACb,EACD,GAAI2iC,IAAY,KACT,KAAA,WAAW,WAAW9jC,EAAQ8jC,CAAO,UACjC,CAAC,KAAK,UAAU,QACnB,MAAA,IAAI,MAAM,gDAAgD,CAEpE,CAMA,GAHK,KAAA,WAAW,UAAU9jC,CAAM,EAG5B,KAAK,SAAS,OAASA,IAAWH,EAAO,GAAI,CACpC,UAAA0a,KAAQ,KAAK,SAClBA,EAAK,QACFA,EAAA,OAAO,KAAK,cAAe,CAAA,EAKhC,KAAK,UAAU,aAAa,GAAQ,KAAA,QAAQ1a,EAAO,EAAE,EAErD,KAAK,UAAU,aAAa,GAAQ,KAAA,UAAUA,EAAO,EAAE,CAC7D,CACF,CAEA,QAAQG,EAAsB,CAC5B,UAAW8L,KAAa,KAAK,UAAU,gBAAgB9L,CAAM,EAC3D,KAAK,qBAAqB,CACxB,KAAM2U,EAAmB,SACzB,UAAA7I,EACA,IAAK,KAAK,YAAY,CAAA,CACvB,EAWC,GARJ,KAAK,UAAU,gBAAgB9L,CAAM,EAAE,QAAS8L,GAAc,CACvDA,EAAU,OACV,KAAA,WAAW,iBAAiBA,EAAU,EAAE,CAAA,CAC9C,EAEI,KAAK,UAAU,yBACb,KAAA,WAAW,UAAU9L,CAAM,EAE9B,KAAK,UAAU,gBAAiB,CAClC,MAAM+pC,EAAc,KAAK,UAAU,cAAc/pC,CAAM,EAClD,KAAA,WAAW,UAAU+pC,CAAW,CACvC,CAGK,KAAA,WAAW,QAAQ/pC,CAAM,EAE1B,KAAK,SAAS,cAChB,KAAK,SAAS,aAAaA,EAAQ,KAAK,aAAa,CAEzD,CAUA,YAAYtV,EAAgC,OAC1C,KAAM,CAAE,OAAAsV,EAAQ,WAAAuU,EAAY,KAAAzf,EAAM,SAAAK,EAAU,QAAA2uC,CAAY,EAAAp5C,EAGxD,KAAK,WAAW,wBACdsV,EACA,KAAK,UAAU,mBAAmB7K,CAAQ,CAAA,EAIvC,KAAA,WAAW,WAAW6K,EAAQ8jC,CAAO,EAE1C,MAAMrnC,IAAU/U,EAAA,KAAK,UAAUsY,CAAM,EAAE,WAAvB,YAAAtY,EAAiC,UAAW,KACtDsiD,EAAgB1I,GACpB,KAAK,UAAU,aAAansC,CAAQ,EACpCsH,CAAA,EAEF,KAAK,WAAW,kBAAkB,CAChC,KAAMsG,EAAW,aACjB,OAAA/C,EACA,YAAa,EACb,mBAAoBgqC,EAAgB,EAAI,MAAA,CACzC,EAGD,KAAK,eAAe70C,EAAU6K,EAAQlL,EAAMyf,CAAU,CACxD,CAEA,eACEpf,EACAmgB,EACAxgB,EACAyf,EACM,CAEA,MAAAzI,EAAY,KAAK,gBAAgB,CAAE,KAAM3W,CAAS,EAAGmgB,EAAOxgB,CAAI,EAEjE,KAAA,WAAW,gBAAgBgX,EAAWyI,CAAU,EAErD,KAAK,qBAAqB,CACxB,KAAMI,EAAmB,QACzB,UAAA7I,EACA,IAAK,KAAK,YAAY,CAAA,CACvB,EAGD,UAAWq9B,KAAkB,KAAK,UAAU,iBAAA,EACtCA,EAAe,KAAOr9B,EAAU,IACpC,KAAK,qBAAqB,CACxB,KAAM6I,EAAmB,iBACzB,UAAWw0B,EACX,iBAAkBr9B,EAClB,IAAK,KAAK,YAAY,CAAA,CACvB,EAGQ,UAAAyO,KAAQ,KAAK,SAClBA,EAAK,aACPA,EAAK,YAAYzO,EAAW,KAAK,YAAa,CAAA,CAGpD,CAEA,YAAYphB,EAAgC,CACpC,KAAA,CAAE,UAAAohB,CAAc,EAAAphB,EACjB,KAAA,WAAW,gBAAgBohB,EAAU,EAAE,CAC9C,CAEA,UAAUphB,EAA8B,CAChC,KAAA,CAAE,UAAAohB,EAAW,KAAAhX,CAAS,EAAApK,EACtB1I,EAAW,KAAK,UAAU,YAAY8pB,CAAS,EAGrD,KAAK,WAAW,aAAaA,EAAU,MAAO9pB,EAAS,WAAW,EAElE,KAAK,0BAA0B8pB,CAAS,EACxC,KAAK,WAAW,KAAKA,EAAU,GAAIhX,CAAI,CACzC,CAEA,YAAYpK,EAAgC,CAC1C,KAAM,CAAE,SAAA0hB,EAAU,SAAAC,EAAU,QAAAy3B,CAAA,EAAYp5C,EAClC1I,EAAW,KAAK,UAAU,YAAYoqB,CAAQ,EAC9C69B,EAAe,KAAK,UAAU,YAAY59B,CAAQ,EAIxD,KAAK,WAAW,mBACdrqB,EAAS,YACT,KAAK,UAAU,SAASoqB,CAAQ,EAChC69B,EAAa,WAAA,EAGf,KAAK,0BAA0B79B,CAAQ,EACvC,KAAK,WAAW,WAAWA,EAAS,MAAO03B,CAAO,EAC7C,KAAA,OAAO13B,EAAUC,CAAQ,CAChC,CAEA,gBAAgB3hB,EAAoC,CAC5C,KAAA,CAAE,UAAAohB,EAAW,UAAA0I,CAAc,EAAA9pB,EAEjC,KAAK,0BAA0BohB,CAAS,EACxC,KAAK,WAAW,QAAQA,EAAU,MAAO0I,CAAS,CACpD,CAEA,UAAU9pB,EAA8B,CAChC,KAAA,CAAE,OAAAsV,EAAQ,QAAA8jC,CAAY,EAAAp5C,EAEvB,KAAA,WAAW,WAAWsV,EAAQ8jC,CAAO,EAC1C,KAAK,SAAS9jC,CAAM,CACtB,CAEA,qBAAqBtV,EAAyC,CAC5D,KAAM,CAAE,UAAAohB,EAAW,YAAAC,EAAa,QAAA+3B,CAAA,EAAYp5C,EAE5C,OAAQqhB,EAAa,CACnB,KAAKtK,GAAY,QAAS,CACxB,KAAK,0BAA0BqK,CAAS,EACxC,KACF,CAGF,CAEA,KAAK,WAAW,WAAWA,EAAU,MAAOg4B,CAAO,EAE7C,MAAAppB,EAAU,KAAK,WAAW5O,CAAS,EACnCo+B,GAAa,IAAM,CACvB,OAAQn+B,EAAa,CACnB,KAAKtK,GAAY,KACf,OAAOiZ,EAAQ,aAEjB,KAAKjZ,GAAY,QACf,OAAOiZ,EAAQ,SAEnB,CAAA,KAGEwvB,GACQA,EAAAx/C,EAAM,KAAK,YAAa,CAAA,CAEtC,CAEA,aAAaA,EAAyB,CAC9B,KAAA,CAAE,OAAAsV,CAAW,EAAAtV,EAEnB,GAAI,KAAK,SAAS,OAASsV,IAAWH,EAAO,GACrC,MAAA,IAAI,MAAM,qDAAqD,EAGvE,KAAK,QAAQG,CAAM,EAEnB,KAAK,UAAU,KAAK,UAAU,cAAcA,CAAM,CAAC,CACrD,CAEA,qBAAqBtV,EAAyC,CACtD,KAAA,CAAE,SAAA4rB,EAAU,kBAAA8vB,CAAsB,EAAA17C,EAClC,CAAE,cAAA27C,CAAkB,EAAA/vB,EAEtB+vB,IAAkB,QAAaA,EAAc,OAAS,GACxD,KAAK,sBAAsB,KAAM/vB,EAAS,GAAI8vB,GAAqB,CAAC,EAGhE,MAAA+D,EAA2B7zB,GAC3BA,EAAS,SAAW,IACtB,KAAK,QAAQzW,EAAO,GAAIuD,GAAW,OAAQ,CAAE,CAACvD,EAAO,EAAE,EAAG,EAAK,EAAG,CAAE,CAAA,EAC7D,IAELyW,EAAS,iBAAmB,IACzB,KAAA,QAAQzW,EAAO,GAAIuD,GAAW,OAAQ,CAAA,EAAI,CAAA,CAAE,EAC1C,IAEF,GAGT,GAAI,CAAA+mC,EAAwB7zB,CAAQ,EAGhC,IAAA,CAACA,EAAS,YAAa,CACzB,KAAM,CAAE,QAAA8zB,EAAS,cAAA/D,CAAAA,EAAkB/vB,EAC7BD,EAAY,KAAK,UAEjBg0B,EAAmBlE,GAChB9vB,EAAU,KAAK,CAAC,CAAE,GAAAE,CAAG,IAAMA,IAAO4vB,CAAU,EAE/CmE,EAAwBnE,GACrB9vB,EAAU,UAAU,CAAC,CAAE,GAAAE,CAAG,IAAMA,IAAO4vB,CAAU,EAGpDoE,GAAgB,IAAuB,CAC3C,GAAIH,IAAY,OAAW,CACnB,MAAAn9C,EAAQq9C,EAAqBh0B,EAAS,EAAE,EAC9C,GAAIrpB,IAAU,GACZ,MAAM,IAAI,MACR,4CAA4CqpB,EAAS,EAAE,EAAA,EAEpD,OAAAD,EAAUppB,EAAQ,CAAC,CAC5B,CAEA,MAAMu9C,GAAU,IAAqB,CACnC,GAAIJ,EAAQ,SAAW,EAAG,OAAOA,EAAQ,CAAC,EAI1C,GAAIhE,IAAsB,OAAkB,OAAA,KAItCoE,MAAAA,EAASJ,EAAQhE,CAAiB,EACxC,OAAIoE,IAAW,OAAkB,KAE1BA,CAAA,KAGT,GAAIA,IAAW,KAAa,OAAA,KAEtBD,MAAAA,EAAeF,EAAgBG,CAAM,EAC3C,GAAID,IAAiB,OACnB,MAAM,IAAI,MAAM,gCAAgCC,CAAM,EAAE,EACnDD,OAAAA,CAAA,KAGT,GAAIA,IAAiB,KAEnB,OADK,KAAA,WAAW,YAAYA,CAAY,EAEtC,EAAEA,EAAa,UAAY,KAC3BJ,EAAwBI,CAAY,EAEpC,MAGN,CAGA,KAAK,WAAW,gBAClB,CAKA,QAAQ7/C,EAAYoY,EAAiC,CAC7C,KAAA,CAAE,SAAAj9B,EAAU,QAAA+gB,GAAY,KAAK,UAAU,mBAAmB8D,EAAMoY,CAAI,EAC1E,OAAKlc,EAGE/gB,EAFE,IAGX,CAGA,QAAQ6kB,EAA0B,CACrB,UAAA6vB,KAAQ,KAAK,SACtB,GAAIA,EAAK,cACHA,EAAK,aAAa7vB,EAAM,KAAK,YAAa,CAAA,EAC5C,OAKN,OAAQA,EAAK,KAAM,CAEjB,KAAKsX,EAAS,OAAQ,CACpB,KAAK,YAAYtX,CAAI,EACrB,KACF,CACA,KAAKsX,EAAS,OAAQ,CACpB,KAAK,YAAYtX,CAAI,EACrB,KACF,CACA,KAAKsX,EAAS,YAAa,CACzB,KAAK,gBAAgBtX,CAAI,EACzB,KACF,CACA,KAAKsX,EAAS,KAAM,CAClB,KAAK,UAAUtX,CAAI,EACnB,KACF,CACA,KAAKsX,EAAS,KAAM,CAClB,KAAK,UAAUtX,CAAI,EACnB,KACF,CACA,KAAKsX,EAAS,iBAAkB,CAC9B,KAAK,qBAAqBtX,CAAI,EAC9B,KACF,CACA,KAAKsX,EAAS,SAAU,CACtB,KAAK,aAAatX,CAAI,EACtB,KACF,CACA,KAAKsX,EAAS,iBAAkB,CAC9B,KAAK,qBAAqBtX,CAAI,EAC9B,KACF,CAGA,KAAKsX,EAAS,OAAQ,CACpB,KAAK,YAAYtX,CAAI,EACrB,KACF,CACA,KAAKsX,EAAS,kBAAmB,CAC1B,KAAA,eAAe,KAAKtX,EAAK,IAAI,EAClC,KACF,CACA,QACM,KAAK,SAAS,WAChB,KAAK,SAAS,UAAUA,EAAM,KAAK,aAAa,CAGtD,CACF,CAOA,QAAQA,EAAYoY,EAAqB,CAQvC,GAAI,CAAC,KAAK,UAAU,eACX,MAAA,GAIP,GAAA,KAAK,UAAU,cAAcjD,EAAO,EAAE,IACrC,KAAK,UAAU,YAAA,EAAc,YAAc,IAE5C,YAAK,QAAQA,EAAO,GAAIuD,GAAW,OAAQ,CAAE,CAACvD,EAAO,EAAE,EAAG,EAAK,EAAG,CAAE,CAAA,EAC7D,GAGT,MAAM4qC,EAAe,KAAK,QAAQ//C,EAAMoY,CAAI,EAC5C,GAAI2nC,IAAiB,KACZ,MAAA,GAGT,IAAIC,EAAoB,GACb,UAAAnwB,KAAQ,KAAK,SAClBA,EAAK,aACFA,EAAK,WAAW7vB,EAAM,KAAK,aAAa,IACvBggD,EAAA,KAIrBA,GAAmB,KAAK,QAAQD,CAAY,EAEtC,UAAAlwB,KAAQ,KAAK,SAClBA,EAAK,WACPA,EAAK,UAAUkwB,EAAc,KAAK,YAAa,CAAA,EAI7C,MAAAzqC,EAAS2C,GAAa8nC,CAAY,EAiBpC,GAfFzqC,IAAW,MAGX,EAAE,KAAK,UAAU,SAAWA,IAAWH,EAAO,KAE9C,KAAK,WAAW,kBAAkB,CAChC,KAAMkD,EAAW,gBACjB,OAAA/C,EACA,WAAY,KAAK,UAAUA,CAAM,EAAE,WAAa,CAAA,CACjD,EAMC,CAAC,KAAK,UAAU,aAAa,EAAU,MAAA,GAErC,MAAAkW,EAAS,KAAK,YACpB,GAAIA,EAAQ,CACV,MAAM2Q,EAA2C,CAAA,EAC3CjrB,EAAiD,CAAA,EACvD,UAAWoE,IAAU,CAACH,EAAO,GAAIA,EAAO,EAAE,EAAG,CAC3C,GAAI,CAAC,KAAK,YAAYG,EAAQkW,CAAM,EAAG,SACvC2Q,EAAO7mB,CAAM,EAAI,GACX,MAAA2qC,EAAoB,KAAK,eAAe3qC,CAAM,EAChD2qC,EAAkB,OAAS,IAC7B/uC,EAAYoE,CAAM,EAAI2qC,EAC1B,CACA,YAAK,QAAQz0B,EAAQ9S,GAAW,OAAQyjB,EAAQjrB,CAAW,EACpD,EACT,CAGE,OAAA,KAAK,UAAU,YAAA,EAAc,0BAC5B,KAAK,UAAU,sBAAsB,GACpC6uC,EAAa,MAAQzoC,EAAS,WAE3B,KAAA,eAAe,KAAK,CAAC,EACxB,KAAK,eAAe,SACjB,KAAA,kBAAkB,KAAM,KAAK,cAAc,EAChD,KAAK,eAAe,OAAS,GAGxB,EACT,CAGA,qBAAqBhC,EAAgBkB,EAAuC,CACpE,MAAAF,EAAcE,EAAUlB,CAAM,EAC9B,CACJ,SAAA6G,EACA,WAAAq/B,EACA,SAAApD,EACA,cAAA8H,EACA,cAAAxhC,EACA,MAAAq4B,CACE,EAAAzgC,EACG,MAAA,CACL,SAAA6F,EACA,WAAAq/B,EAEA,KAAMllC,EAAY,KAAK,IAAK8nB,IAAc,CACxC,GAAGA,EACH,KAAM,CAAE,GAAGA,EAAS,KAAM,KAAM,MAAU,CAAA,EAC1C,EACF,KAAM9nB,EAAY,KAClB,aAAc8hC,EAAS,OACvB,cAAA8H,EACA,cAAAxhC,EACA,MAAAq4B,CAAA,CAEJ,CAGA,qBAAqBzhC,EAAgBkB,EAAuC,CACpE,MAAAF,EAAcE,EAAUlB,CAAM,EAC9B,CAAE,SAAA8iC,CAAa,EAAA9hC,EACf,CAAE,QAAA2nC,CAAQ,EAAI,KAAK,UAAU,sBAAsB3oC,CAAM,EACxD,MAAA,CACL,GAAGgB,EACH,SAAU,OACV,YAAa,OACb,aAAc8hC,EAAS,OACvB,QAAS,KAAK,UAAU,sBACtB9iC,EACA9d,EAAA,EAEEymD,EACA,MAAA,CAER,CAOA,0BAA0B7lC,EAAY5B,EAAqC,CACzE,OAAQ4B,EAAM,CACZ,KAAKF,GAAK,IACD,MAAA,CACL,GAAG1B,CAAA,EAGP,KAAK0B,GAAK,GAAI,CACZ,KAAM,CAAE,WAAAwT,EAAY,GAAGy0B,GAAoB,CACzC,GAAG3pC,EACH,CAACrB,EAAO,EAAE,EAAG,KAAK,qBAAqBA,EAAO,GAAIqB,CAAS,EAC3D,CAACrB,EAAO,EAAE,EAAG,KAAK,qBAAqBA,EAAO,GAAIqB,CAAS,CAAA,EAEtD,OAAA2pC,CACT,CACA,KAAKjoC,GAAK,GAAI,CACZ,KAAM,CAAE,WAAAwT,EAAY,GAAGy0B,GAAoB,CACzC,GAAG3pC,EACH,CAACrB,EAAO,EAAE,EAAG,KAAK,qBAAqBA,EAAO,GAAIqB,CAAS,EAC3D,CAACrB,EAAO,EAAE,EAAG,KAAK,qBAAqBA,EAAO,GAAIqB,CAAS,CAAA,EAEtD,OAAA2pC,CACT,CACF,CACF,CAIA,kBAAkB9jC,EAA8B,CAC9C,KAAK,WAAW,kBACdA,EAAW,GACX,KAAK,OACL,KAAK,0BAA0BA,EAAW,KAAM,KAAK,SAAS,CAAA,CAElE,CAGA,uBAAuB7F,EAAgC,CACrD,KAAK,WAAW,cACd,KAAK,OACLA,EACA,KAAK,0BAA0B0B,GAAK,GAAI1B,CAAS,EACjD,KAAK,0BAA0B0B,GAAK,GAAI1B,CAAS,CAAA,CAErD,CAYA,aAAa6F,EAA8B,CACpC,KAAA,YAAY,aAAaA,CAAU,EACxC,KAAK,kBAAkBA,CAAU,CACnC,CAEA,gBAAgBrc,EAAwB,CACtC,OAAQA,EAAK,KAAM,CACjB,KAAKsX,EAAS,YAAa,CACzB,KAAM,CAAE,OAAApI,EAAQ,WAAAmN,EAAY,KAAAjE,CAAA,EAASpY,EAErC,KAAK,aAAaqc,CAAU,EAE5B,KACF,CACA,KAAK/E,EAAS,cAAe,CACvB,GAAA,CAAC,KAAK,UAAU,aAAa,EAAG,MAE/B,KAAA,QACH,KAAK,UAAU,cAActX,EAAK,MAAM,EACxC0Y,GAAW,OACX,CAAC,EACD,CAAC,CAAA,EAEH,KACF,CACA,KAAKpB,EAAS,gBAAiB,CACzB,GAAA,CAAC,KAAK,UAAU,aAAa,EAAG,MAE/B,KAAA,QACH,KAAK,UAAU,cAActX,EAAK,MAAM,EACxC0Y,GAAW,KACX,CAAC,EACD,CAAC,CAAA,EAEH,KACF,CACA,QACQ,MAAA,IAAI,MAAM,2BAA2B,CAE/C,CACF,CAEA,UAAU0nC,EAAoBpgD,EAAkB,CAC9C,GAAI,KAAK,eAAe,OACtB,MAAM,IAAI,MACR,wGAAA,EAGA,KAAK,QAAQA,EAAMogD,EAAO,IAAI,EAC3B,KAAA,WAAW,YAAYA,EAAO,EAAE,EAEhC,KAAA,WAAW,gBAAgBA,EAAO,EAAE,CAE7C,CAQA,UAAUpgD,EAAqB,CAC7B,OAAO,KAAK,QAAQA,EAAMkY,GAAK,GAAG,CACpC,CACF,CC5lDY,IAAAmoC,IAAAA,IAEVA,EAAA,OAAS,SAETA,EAAA,eAAiB,iBAEjBA,EAAA,UAAY,YAEZA,EAAA,KAAO,OAEPA,EAAA,YAAc,cAVJA,IAAAA,IAAA,CAAA,CAAA,EAgDL,MAAMC,EAAmB,CAY9B,aAAc,CANd9pD,EAAA,gBAIAA,EAAA,wBAGE,KAAK,QAAU,EACjB,CAEA,mBAAmB+pD,EAA8C,CAC/D,KAAK,gBAAkBA,CACzB,CAEA,YAAYz1C,EAAmB,CACzB,GAAA,KAAK,kBAAoB,OACrB,MAAA,IAAI,MAAM,mCAAmC,EAErD,KAAK,gBAAgBA,CAAG,CAC1B,CAGA,aAAaA,EAAmB,CAC9B,KAAK,QAAQ,KAAK,CAChB,KAAM,SACN,IAAAA,CAAA,CACD,CACH,CAMA,KAAKqyC,EAAsBryC,EAAmB,CAC5C,KAAK,QAAQ,KAAK,CAChB,KAAM,iBACN,IAAAA,EACA,aAAAqyC,CAAA,CACD,CACH,CAEA,kBAAkBryC,EAAmB,CAInC,KAAK,QAAQ,KAAK,CAChB,KAAM,YACN,IAAAA,CAAA,CACD,EACD,KAAK,YAAYA,CAAG,CACtB,CASA,4BACEwK,EACAxK,EACAwyC,EACM,CACN,KAAK,YAAYxyC,CAAG,EACpB,KAAK,QAAQ,KAAK,CAChB,KAAM,cACN,IAAAA,EACA,KAAOsN,GAASD,GAAqBC,EAAM9C,CAAM,CAAA,CAClD,EACGgoC,GAAa,MACf,KAAK,QAAQ,KAAK,CAChB,KAAM,cACN,IAAKA,EACL,KAAOllC,GAAS,CAACD,GAAqBC,EAAM9C,CAAM,CAAA,CACnD,CAEL,CAMA,yBAAyB7E,EAAyC,CAC1D,MAAA2sC,EAAU3sC,EAAKyH,GAAK,GAAG,EAC7B,GAAIklC,IAAY,OAAiB,MAAA,IAAI,MAAM,0BAA0B,EACrE,KAAK,YAAYA,CAAO,EACxB,SAAW,CAAChlC,EAAMtN,CAAG,IAAK,OAAO,QAAQ2F,CAAI,EAC3C,KAAK,QAAQ,KAAK,CAChB,KAAM,OACN,IAAA3F,EACA,KAAAsN,CAAA,CACD,CAEL,CAEA,gBAAwC,CACtC,MAAM2qB,EAAU,KAAK,QAErB,YAAK,QAAU,GAERA,CACT,CAEA,aAAa1mB,EAA8B,CACzC,KAAK,aAAa,CAChB,KAAMhE,EAAW,qBACjB,WAAAgE,CAAA,CACD,CACH,CACF,CC1KO,MAAMmkC,EAA4B,CASvC,YAAYhwC,EAAoB,CARhCha,EAAA,eAKAA,EAAA,oBACAA,EAAA,2BAGE,KAAK,OAASga,EACT,KAAA,gBAAkB,IAClB,KAAA,mBAAqB,IAAIwK,GAAmB,SACxC,MAAM,KAAK,cACnB,CACH,CAOA,MAAc,cAAiC,CAC7C,MAAMylC,EAAyD,CAAA,EAC/D,UAAW/8B,KAAkB,KAAK,OAAO,gBAAgB,SAAU,CACjE,GAAI,KAAK,YAAY,IAAIA,EAAe,MAAM,EAAG,SACjD,GACE,OAAO,KAAK+8B,CAAU,EAAE,QACxB,KAAK,OAAO,OAAO,4BAEnB,MAEI,KAAA,CACJ,OAAAvxC,EACA,iBAAkB,CAAE,eAAA6W,CAAe,CACjC,EAAArC,EACE3I,EAAWgL,EAAe,YAC5BhL,IAAa,OACZ,KAAA,YAAY,IAAI7L,CAAM,EAC3BuxC,EAAWvxC,CAAM,EAAI6L,EACvB,CACA,GAAI,OAAO,KAAK0lC,CAAU,EAAE,SAAW,EAErC,YAAK,YAAY,QACV,GAGT,KAAK,OAAO,uBACN,MAAAx6B,EAAiB,MAAO,SAAY,CACpC,GAAA,CACI,aAAA,KAAK,OAAO,uBAAuB,CACvC,UAAWw6B,CAAA,CACZ,EACM,SACAniE,EAAK,CACZ,eAAQ,MAAMA,CAAG,EACV,EACT,CAAA,KAGF,SAAW,CAAC4wB,EAAQ6L,CAAQ,IAAK,OAAO,QAAQ0lC,CAAU,EAAG,CAC3D,MAAM/8B,EAAiB,KAAK,OAAO,kBAAkBxU,CAAM,EACrD,CAAE,eAAA6W,CAAe,EAAIrC,EAAe,iBAC3BqC,EAAA,QAAQE,EAAiBlL,EAAW,IAAI,CACzD,CACO,MAAA,EACT,CACF,CAEO,MAAM2lC,EAAmC,CAS9C,YAAYlwC,EAAoB,CARhCha,EAAA,eAKAA,EAAA,oBACAA,EAAA,2BAGE,KAAK,OAASga,EACT,KAAA,gBAAkB,IAClB,KAAA,mBAAqB,IAAIwK,GAAmB,SACxC,MAAM,KAAK,cACnB,CACH,CAOA,MAAc,cAAiC,CAC7C,MAAMylC,EAAyD,CAAA,EAC/D,UAAW/8B,KAAkB,KAAK,OAAO,gBAAgB,SAAU,CACjE,GAAI,KAAK,YAAY,IAAIA,EAAe,MAAM,EAAG,SACjD,GACE,OAAO,KAAK+8B,CAAU,EAAE,QACxB,KAAK,OAAO,OAAO,mCAEnB,MAEF,KAAM,CAAE,OAAAvxC,EAAQ,gBAAAyxC,EAAiB,sBAAA/6B,CAAA,EAA0BlC,EACrDk9B,EAAuC,CAAA,EAC7C,SAAW,CAACx2C,EAAM4a,CAAc,IAAK27B,EAAgB,UAAW,CAC9D,GAAI37B,IAAmB,KAAM,SACvB,KAAA,CACJ,KAAA1a,EACA,iBAAkB,CAAE,QAAAu2C,CAAQ,CAC1B,EAAA77B,EACA67B,EAAQ,aACVD,EAAe,QAAfA,EAAe,MAAU,IACzBA,EAAe,MAAMx2C,CAAI,EAAI,CAAE,OAAA8E,EAAQ,KAAA9E,EAAM,KAAAE,GAEjD,CAEM,KAAA,CACJ,YAAAqB,EACA,iBAAkB,CAAE,QAASm1C,CAAmB,CAC9C,EAAAl7B,EACAk7B,EAAmB,aACrBF,EAAe,YAAcj1C,GAG1B,KAAA,YAAY,IAAIuD,CAAM,EACvB,OAAO,KAAK0xC,CAAc,EAAE,SAAW,IAC3CH,EAAWvxC,CAAM,EAAI0xC,EACvB,CACA,GAAI,OAAO,KAAKH,CAAU,EAAE,SAAW,EAErC,YAAK,YAAY,QACV,GAGT,KAAK,OAAO,uBACN,MAAAx6B,EAAiB,MAAO,SAAY,CACpC,GAAA,CACI,aAAA,KAAK,OAAO,uBAAuB,CACvC,UAAWw6B,CAAA,CACZ,EACM,SACAniE,EAAK,CACZ,eAAQ,MAAMA,CAAG,EACV,EACT,CAAA,KAGF,SAAW,CAAC4wB,EAAQ6L,CAAQ,IAAK,OAAO,QAAQ0lC,CAAU,EAAG,CAC3D,MAAM/8B,EAAiB,KAAK,OAAO,kBAAkBxU,CAAM,EAChD,SAAA,CAAE,KAAA9E,EAAM,KAAAE,KAAU,OAAO,OAAOyQ,EAAS,OAAS,CAAA,CAAE,EAAG,CAChE,KAAM,CAAE,QAAA8lC,CAAQ,EACdn9B,EAAe,kBAAkBtZ,CAAI,EAAE,iBACzCy2C,EAAQ,iBAAiB56B,CAAc,CACzC,CACI,GAAAlL,EAAS,cAAgB,OAAW,CACtC,KAAM,CAAE,QAAA8lC,CACN,EAAAn9B,EAAe,sBAAsB,iBACvCm9B,EAAQ,iBAAiB56B,CAAc,CACzC,CACF,CACO,MAAA,EACT,CACF,CAEO,MAAM86B,EAA0B,CASrC,YAAYvwC,EAAoB,CARhCha,EAAA,eAKAA,EAAA,oBACAA,EAAA,2BAGE,KAAK,OAASga,EACT,KAAA,gBAAkB,IAClB,KAAA,mBAAqB,IAAIwK,GAAmB,SACxC,MAAM,KAAK,cACnB,CACH,CAOA,MAAc,cAAiC,CAC7C,MAAMylC,EAAyD,CAAA,EAC/D,IAAIO,EAAyB,EAC7B,UAAWt9B,KAAkB,KAAK,OAAO,gBAAgB,SAAU,CACjE,GAAI,KAAK,YAAY,IAAIA,EAAe,MAAM,EAAG,SAC7C,GAAAs9B,GAA0B,KAAK,OAAO,OAAO,qBAC/C,MAEI,KAAA,CAAE,OAAA9xC,EAAQ,kBAAA+xC,CAAsB,EAAAv9B,EAChCk9B,EAAuC,CAAA,EAC7C,SAAW,CAAC9qD,EAAS+oB,CAAgB,IAAKoiC,EAAkB,UAAW,CACrE,KAAM,CAAE,YAAAzxC,EAAa,uBAAwBqxC,CAAA,EAC3ChiC,EACEgiC,EAAQ,aACVD,EAAe,cAAfA,EAAe,YAAgB,IAChBA,EAAA,YAAY9qD,CAAO,EAAI0Z,EACZwxC,GAAA,OAAO,KAAKxxC,CAAW,EAAE,OAEvD,CAEK,KAAA,YAAY,IAAIN,CAAM,EACvB,OAAO,KAAK0xC,CAAc,EAAE,SAAW,IAC3CH,EAAWvxC,CAAM,EAAI0xC,EACvB,CACA,GAAI,OAAO,KAAKH,CAAU,EAAE,SAAW,EAErC,YAAK,YAAY,QACV,GAGT,KAAK,OAAO,uBACN,MAAAx6B,EAAiB,MAAO,SAAY,CACpC,GAAA,CACI,aAAA,KAAK,OAAO,uBAAuB,CACvC,UAAWw6B,CAAA,CACZ,EACM,SACAniE,EAAK,CACZ,eAAQ,MAAMA,CAAG,EACV,EACT,CAAA,KAGF,SAAW,CAAC4wB,EAAQ6L,CAAQ,IAAK,OAAO,QAAQ0lC,CAAU,EAAG,CAC3D,MAAM/8B,EAAiB,KAAK,OAAO,kBAAkBxU,CAAM,EAC3D,SAAW,CAACpZ,EAAS0Z,CAAW,IAAK,OAAO,QAC1CuL,EAAS,aAAe,CAAC,CAAA,EACxB,CACD,KAAM,CAAE,uBAAwB8lC,CAAA,EAC9Bn9B,EAAe,oBAAoB5tB,CAAO,EAC5C+qD,EAAQ,iBAAiB56B,CAAc,CACzC,CACF,CACO,MAAA,EACT,CACF,CAEO,MAAMi7B,EAA0B,CAcrC,YAAY1wC,EAAoB,CAbhCha,EAAA,eAKAA,EAAA,oBAKAA,EAAA,oBACAA,EAAA,2BAGE,KAAK,OAASga,EACT,KAAA,gBAAkB,IAClB,KAAA,gBAAkB,IAClB,KAAA,mBAAqB,IAAIwK,GAAmB,SACxC,MAAM,KAAK,cACnB,CACH,CAOA,MAAc,cAAiC,CAC7C,MAAMylC,EAAgD,CAAA,EAChDU,EAA8B,CAAA,EACpC,UAAWz9B,KAAkB,KAAK,OAAO,gBAAgB,SAAU,CAC3D,KAAA,CAAE,OAAAxU,EAAQ,kBAAA+xC,CAAsB,EAAAv9B,EAClC,GAAA,KAAK,YAAY,IAAIxU,CAAM,EAAG,SAClC,GACE,OAAO,KAAKuxC,CAAU,EAAE,QACxB,KAAK,OAAO,OAAO,qBAEnB,MAEF,IAAIW,EAAoB,GACxB,SAAW,CAACtrD,EAAS+oB,CAAgB,IAAKoiC,EAAmB,CAEzD,GAAA,OAAO,KAAKR,CAAU,EAAE,QACxB,KAAK,OAAO,OAAO,qBACnB,CACoBW,EAAA,GACpB,KACF,CACM,MAAAnlC,EAAO4C,EAAiB,gBAQ1B,GAPA5C,IAAS,MAGT,CAAC4C,EAAiB,aAAa,GAI/BA,EAAiB,cAAgB1J,EAAO,GAAI,SAChD,KAAM,CAAE,OAAA+H,EAAQ,OAAA5N,EAAQ,YAAA2O,EAAa,WAAAojC,EAAY,QAAAR,CAAY,EAAA5kC,EACzD,GAAA,MAAK,YAAY,IAAI3M,CAAM,GAC3BuxC,EAAQ,WAAY,CACtB,KAAM,CAAE,QAAA/qD,EAAS,UAAA0gB,CAAA,EAAc0G,EACzBokC,EAAa9qC,EAAUrB,EAAO,EAAE,EAAE,SAClCosC,EAAa/qC,EAAUrB,EAAO,EAAE,EAAE,SAClCqsC,EAAWF,GAAA,YAAAA,EAAY,OACvBG,EAAWF,GAAA,YAAAA,EAAY,OACxB,KAAA,YAAY,IAAIjyC,CAAM,EAC3BmxC,EAAWnxC,CAAM,EAAI,CACnB,OAAAA,EACA,QAAAxZ,EACA,YAAAmoB,EACA,WAAAojC,EACA,SAAAG,EACA,SAAAC,EACA,WAAWH,GAAA,YAAAA,EAAY,UAAW,OAClC,WAAWC,GAAA,YAAAA,EAAY,UAAW,OAClC,UAAW,CAAE,UAAA/qC,CAAU,CAAA,EAEzB2qC,EAAa,KAAKN,CAAO,CAC3B,CACF,CACKO,GAAwB,KAAA,YAAY,IAAIlyC,CAAM,CACrD,CACA,GAAI,OAAO,KAAKuxC,CAAU,EAAE,SAAW,EAErC,YAAK,YAAY,QACjB,KAAK,YAAY,QACV,GAGT,KAAM,CAAE,cAAAiB,CAAc,EACpB,KAAK,OAAO,oBAAoB,iBAC7B,6BACL,UAAWpyC,KAAU,OAAO,KAAKmxC,CAAU,EACzCiB,EAAc,IAAIpyC,CAAM,EAE1B,KAAK,OAAO,uBACN,MAAA2W,EAAiB,MAAO,SAAY,CACpC,GAAA,CACI,aAAA,KAAK,OAAO,uBAAuB,CACvC,MAAOw6B,CAAA,CACR,EACM,SACAniE,EAAK,CACZ,eAAQ,MAAMA,CAAG,EACV,EACT,CAAA,KAEF,UAAWgxB,KAAU,OAAO,KAAKmxC,CAAU,EACzCiB,EAAc,OAAOpyC,CAAM,EAGzBoyC,EAAc,OAAS,GAIjB,QAAA,MACN,wEAAA,EAIJ,UAAWb,KAAWM,EACpBN,EAAQ,iBAAiB56B,CAAc,EAElC,MAAA,EACT,CACF,CAEO,MAAM07B,EAA6B,CAgBxC,YAAYnxC,EAAoB,CAfhCha,EAAA,eACAA,EAAA,oBAKAA,EAAA,sBAMAA,EAAA,oBACAA,EAAA,2BAGE,KAAK,OAASga,EACd,KAAK,YAAc,GACd,KAAA,kBAAoB,IACpB,KAAA,gBAAkB,IAClB,KAAA,mBAAqB,IAAIwK,GAAmB,SACxC,MAAM,KAAK,cACnB,CACH,CAEA,QAAQiB,EAAmB,CACpB,KAAA,YAAY,KAAKA,CAAI,CAC5B,CAOA,MAAc,cAAiC,CAC7C,MAAMwkC,EAAgD,CAAA,EAC3C,UAAAxkC,KAAQ,KAAK,YAAa,CAC7B,KAAA,CAAE,OAAA3M,CAAW,EAAA2M,EACnB,GACE,OAAO,KAAKwkC,CAAU,EAAE,QACxB,KAAK,OAAO,OAAO,wBAEnB,MAGE,KAAK,cAAc,IAAInxC,CAAM,GAC7B,KAAK,YAAY,IAAIA,CAAM,IAC1B,KAAA,YAAY,IAAIA,CAAM,EAC3BmxC,EAAWnxC,CAAM,EAAI2M,EACvB,CACA,OAAI,OAAO,KAAKwkC,CAAU,EAAE,SAAW,GAErC,KAAK,YAAY,QACV,KAET,KAAK,OAAO,uBACW,MAAO,SAAY,CACpC,GAAA,CACI,aAAA,KAAK,OAAO,uBAAuB,CACvC,MAAOA,CAAA,CACR,EACM,SACAniE,EAAK,CACZ,eAAQ,MAAMA,CAAG,EACV,EACT,CAAA,OAIG,KAAA,YAAc,KAAK,YAAY,OACjC29B,GAASwkC,EAAWxkC,EAAK,MAAM,IAAM,MAAA,GAEjC,GACT,CACF,CCjaO,MAAM2lC,EAAoB,CAgC/B,YAAYpxC,EAAoB,CA/BhCha,EAAA,eAOAA,EAAA,cAQAA,EAAA,sBAEAA,EAAA,yBAKAA,EAAA,qBAUE,KAAK,OAASga,EACT,KAAA,UAAY,IACZ,KAAA,kBAAoB,IACzB,KAAK,iBAAmB,CACtB,0BAA2B,IAAI0wC,GAA0B,KAAK,MAAM,EACpE,6BAA8B,IAAIS,GAChC,KAAK,MACP,CAAA,EAEF,KAAK,aAAe,EACtB,CAEA,WAAW7rD,EAAiB,CACpB,MAAA+rD,EAAkB,KAAK,aAAa/rD,CAAO,EACjD,GAAI+rD,IAAoB,OAAkB,OAAAA,EAEpC,MAAAjyB,EAAW,CAACO,GAAiB,GAAGr6B,EAAQ,MAAM,GAAG,CAAC,EAAE,IAAKgsD,GAC7DtL,GAAYsL,CAAQ,CAAA,EAEhBtyB,EAAYG,GAAaC,EAAU,KAAK,OAAO,OAAO,EACtDG,EAAaD,GAAcF,EAAUJ,CAAS,EAC9C9S,EAAY,IAAIi7B,GACpB/nB,EACA,KAAK,OAAO,QACZJ,CAAA,EAGI74B,EAAU,CACd,SAAAi5B,EACA,UAAAJ,EACA,WAAAO,EACA,UAAArT,CAAA,EAEG,YAAA,aAAa5mB,CAAO,EAAIa,EACtBA,CACT,CAEA,aAAab,EAAkC,CACtC,OAAA,KAAK,WAAWA,CAAO,EAAE,SAClC,CAEA,uBACEA,EACAmoB,EACA9B,EACAU,EACA2C,EACAhJ,EACAlH,EACU,CACCA,MAAA,KAAK,OAAO,iBACjB,MAAA4tC,EAAc,IAAIoD,GAClB,CAAE,SAAA1wB,EAAU,UAAAJ,EAAW,WAAAO,CAAe,EAAA,KAAK,WAAWj6B,CAAO,EAC7DonB,EAAS,IAAIsgC,GACjBN,EACApnD,EACAwZ,EACAsgB,EACCta,GAAW,CAAC,EACb,KAAK,OAAO,QACZka,EACAO,EACA,KAAK,OAAO,UACZ5T,EACAU,EACA,CAACK,EAAQnH,IAAU,CAEjB,SAAW,CAAE,OAAA7G,CAAA,IAAY,OAAO,OAAOiN,CAAQ,EAC7C,KAAK,OACF,oBAAoBjN,EAAQ+O,CAAW,EACvC,eAAef,EAAQnH,CAAK,CACnC,EACA,CAACmH,EAAQu+B,EAAYC,IAAsB,CACzC,SAAW,CAAE,OAAAxsC,CAAO,IAAK,OAAO,OAAOiN,CAAQ,EAQ7C,KAAK,OAAO,kBAAkBjN,CAAM,EAAE,oBAAoB,CACxD,gBAAiB,CACf,CACE,WAAAusC,EACA,kBAAAC,CACF,CACF,CAAA,CACD,CAEL,EACAl8B,EACAhJ,CAAA,EAEEA,IAAc,QAAW0G,EAAO,KAAK,EACzC,MAAMjB,EAAiB,CACrB,OAAAiB,EACA,OAAA5N,EACA,YAAA2O,EACA,WAAY,IAAI,KAAK,EAAE,QAAQ,EAC/B,YAAa,IACb,YAAAi/B,EACA,QAAS,IAAI/jC,GACX,KAAK,OAAO,OACZiC,GAAe,KACdK,GAAe,CACd,MAAMsmC,EAAwC,CAAE,MAAO,CAAA,GAKvD,SAAW,CAAE,OAAA7yC,CAAO,IAAK,OAAO,OAAOiN,CAAQ,EAAG,CAChD,MAAM6lC,EAAa,KAAK,cAAc9yC,EAAQ+O,CAAW,EACrD+jC,IAAe,MAAQA,EAAW,SAAW1yC,GAK7C,CAJqB,KAAK,OAAO,oBACnCJ,EACA+O,CAAA,EAEoB,aAAa,IACrB8jC,EAAA,MAAM7yC,CAAM,EAAI,CAC5B,MAAO,CAAE,CAAC+O,CAAW,EAAGxC,CAAW,CAAA,EAEvC,CACK,KAAA,OAAO,kBAAkB,OAAOsmC,CAAa,CACpD,CACF,CAAA,EAEG,YAAA,OAAO,YAAY9lC,CAAI,EACvB,KAAA,MAAM,IAAI3M,EAAQ,CACrB,KAAA2M,EACA,SAAU,CAAA,CACX,EACMA,CACT,CAEA,wBACEnmB,EACAmoB,EACAzH,EACAlH,EACU,CACV,MAAM6M,EAAW,OAAO,YACtB,CAAChH,EAAO,GAAIA,EAAO,EAAE,EAAE,QAASG,GAAW,CACnC,MAAAwoC,EAAiBtnC,EAAUlB,CAAM,EAAE,SACzC,OAAIwoC,IAAmB,OAAkB,GAClC,CAAC,CAACxoC,EAAQwoC,CAAc,CAAC,CAAA,CACjC,CAAA,EAGI,OAAA,KAAK,OAAO,oBAAoB,uBACrChoD,EACAmoB,EACA9B,EACA3F,EAAU,WAAW,eACrBA,EAAU,SACVA,EACAlH,CAAA,CAEJ,CAEA,WACExZ,EACAmoB,EACA6H,EACAjJ,EACA2C,EACU,CACV,MAAMrD,EAAW,OAAO,YACtB,OAAO,QAAQ2J,CAAO,EAAE,IAAI,CAAC,CAACxQ,EAAQpG,CAAM,IAAM,CAChD,MAAMwU,EAAiB,KAAK,OAAO,kBAAkBxU,CAAM,EAC3D,MAAO,CAACoG,EAAQoO,EAAe,sBAAsB5tB,CAAO,CAAC,CAAA,CAC9D,CAAA,EAEH,OAAO,KAAK,uBACVA,EACAmoB,EACA9B,EACAU,EACA2C,CAAA,CAEJ,CAEA,cAActQ,EAAgBpZ,EAAkC,CAC9D,MAAMmsD,EAAY,KAAK,cAAc,IAAI/yC,CAAM,EAC/C,GAAI+yC,IAAc,OAAkB,OAAA,KAC9B,MAAA3yC,EAAS2yC,EAAU,IAAInsD,CAAO,EACpC,GAAIwZ,IAAW,OAAkB,OAAA,KACjC,MAAM4yC,EAAc,KAAK,MAAM,IAAI5yC,CAAM,EACzC,GAAI4yC,IAAgB,OACZ,MAAA,IAAI,MAAM,oCAAoC,EACtD,OAAOA,EAAY,IACrB,CAEA,cAAchzC,EAAgBpZ,EAAiBwZ,EAAgB,CAC7D,MAAM4yC,EAAc,KAAK,MAAM,IAAI5yC,CAAM,EACzC,GAAI4yC,IAAgB,OACZ,MAAA,IAAI,MAAM,wCAAwC,EAC9CA,EAAA,WACZ,MAAMD,GAAa,IAAM,CACvB,MAAME,EAAoB,KAAK,cAAc,IAAIjzC,CAAM,EACvD,GAAIizC,IAAsB,OAAkB,OAAAA,EACtC,MAAAC,MAAmB,IACpB,YAAA,cAAc,IAAIlzC,EAAQkzC,CAAY,EACpCA,CAAA,KAEHC,EAAaJ,EAAU,IAAInsD,CAAO,EACxC,GAAIusD,IAAe,OAAW,CAC5B,MAAMC,EAAkB,KAAK,MAAM,IAAID,CAAU,EACjD,GAAIC,IAAoB,OAChB,MAAA,IAAI,MAAM,wCAAwC,EAC1CA,EAAA,WACZA,EAAgB,UAAY,GAAQ,KAAA,MAAM,OAAOD,CAAU,CACjE,CACUJ,EAAA,IAAInsD,EAASwZ,CAAM,CAC/B,CAEA,kBAAkBJ,EAAgBpZ,EAAiB,CACjD,MAAMmmB,EAAO,KAAK,cAAc/M,EAAQpZ,CAAO,EAC/C,OAAImmB,IAAS,KAAa,EACnB,CAAC,GAAGA,EAAK,QAAQ,OAAA,CAAQ,EAAE,OAC/BsmC,GAAgBA,EAAY,KAAK,SAAWrzC,CAC7C,EAAA,MACJ,CAEA,wBAAwBA,EAAgBpZ,EAAiB,CAClD,KAAA,OAAO,qBAAqB,WAAWoZ,EAAQ,CAClD,QAAS,CACP,CAACpZ,CAAO,EAAG,CACT,WAAY,KAAK,kBAAkBoZ,EAAQpZ,CAAO,CACpD,CACF,CAAA,CACD,CACH,CAEA,MAAM,wBACJmmB,EACAsiC,EACArtC,EACe,CACf,KAAM,CAAE,OAAA5B,EAAQ,YAAA2O,EAAa,OAAAf,EAAQ,WAAAmkC,GAAeplC,EAC9C,CAAE,UAAAS,CAAc,EAAAQ,EAChB,CAAE,QAASslC,EAAa,UAAAhsC,CAAA,EAAcyF,EAAK,OAC3CnmB,EAAUD,GAAkB2sD,CAAW,EACvCxL,EAAQlhD,IAAYrB,GACpB4mB,EAAU,IAAI,KAAK,EAAE,QAAQ,EAG7BimC,EAAa9qC,EAAUrB,EAAO,EAAE,EAAE,SAClCosC,EAAa/qC,EAAUrB,EAAO,EAAE,EAAE,SAClCqsC,EAAWF,GAAA,YAAAA,EAAY,OACvBG,EAAWF,GAAA,YAAAA,EAAY,OACvBz7B,MAAc,IAAI,CACtB,GAAI07B,IAAa,OAAY,CAAC,EAAI,CAACA,CAAQ,EAC3C,GAAIC,IAAa,OAAY,CAAC,EAAI,CAACA,CAAQ,CAAA,CAC5C,EACKgB,EAAkB,MAAM,KAAK38B,EAAU5W,IAC3C,KAAK,OAAO,kBAAkBA,EAAM,CAAA,EAMhCwZ,EAAW61B,EAAc,OAAS,EAClCmE,EAAYhmC,EAAU,kBACtBimC,EAAkBj6B,EAAW,CAACvT,EAAO,EAAE,EAAI,CAAA,EAE3CytC,EAAgD,CAAA,EACtD,UAAWttC,KAAU,CAACH,EAAO,GAAIA,EAAO,EAAE,EAAG,CAC3C,IAAI0tC,GAAenmC,EAAU,iBAAiBpH,GAAQ0hC,EAAOtuB,CAAQ,EAChEsuB,IACC6L,GAAersC,EAAU,WAAW,aACtCqsC,IAAgBrsC,EAAU,WAAW,YACrCA,EAAU,WAAW,aAAeqsC,IAChBA,GAAA,GAEpBA,KAAiB,IAAGD,EAAattC,EAAM,EAAIutC,GACjD,CAEM,KAAA,CAAE,OAAAr3B,EAAQ,WAAAywB,CAAe,EAAAzlC,EAC3B,GAAAgV,IAAW,QAAaywB,IAAe,OACnC,MAAA,IAAI,MAAM,iDAAiD,EAEnE,MAAM6G,GAAa,CACjB,OAAAxzC,EACA,QAAAxZ,EACA,YAAAmoB,EACA,WAAAojC,EACA,SAAAG,EACA,SAAAC,EACA,WAAWH,GAAA,YAAAA,EAAY,UAAW,OAClC,WAAWC,GAAA,YAAAA,EAAY,UAAW,OAClC,UAAW,CAAE,UAAA/qC,CAAU,EACvB,YAAa,CACX,UAAAksC,EACA,SAAAh6B,EACA,OAAA8C,EACA,WAAAywB,EACA,2BAA4B2G,EAAaztC,EAAO,EAAE,EAClD,2BAA4BytC,EAAaztC,EAAO,EAAE,CACpD,CAAA,EAOF,GAAI8G,EAAK,QAAQ,UAAY,GAAK,CAACS,EAAU,QAAS,CAGpD,MAAMqmC,GAAoB,CACxB,MAAO,CACL,CAAC9kC,CAAW,EAAG,CACb,KAAMnP,GAAe,OACrB,aAAc,KAAK,IAAI,CACzB,CACF,CAAA,EAEG,KAAA,OAAO,kBAAkB,OAAO,CACnC,MAAO,OAAO,YACZ,CAAC,GAAGgX,CAAO,EAAE,IAAK5W,IAAW,CAACA,GAAQ6zC,EAAiB,CAAC,CAC1D,CAAA,CACD,EAEwC,KAAK,iBACzC,KAAA,iBAAiB,6BAA6B,QAAQD,EAAU,CACvE,CAEA,MAAM,QAAQ,IACZ,MAAM,KAAKL,EAAkB/+B,IAC3BA,GAAe,uBAAuB,CACpC,uBAAwB66B,EACrB,OAAQrvC,IAAWA,KAAWwU,GAAe,MAAM,EACnD,IAAKxU,IACJyJ,GAAgCzJ,GAAQpZ,EAASulB,CAAO,CAC1D,EACF,iBAAkBnK,EACf,OAAO,CAAC,CAAE,OAAAhC,EAAa,IAAAA,KAAWwU,GAAe,MAAM,EACvD,IAAI,CAAC,CAAE,OAAAxU,GAAQ,SAAAzE,OAAgB,CAC9B,OAAAyE,GACA,QAAApZ,EACA,SAAA2U,GACA,UAAW4Q,CAAA,EACX,CAAA,CACL,CACH,CAAA,EAGF,UAAW/F,MAAUqtC,EAAiB,CACpC,KAAM,CAAE,SAAAxmC,EAAA,EAAa3F,EAAUlB,EAAM,EACrC,GAAI6G,KAAa,OACT,MAAA,IAAI,MAAM,iDAAiD,EAC7D,KAAA,CAAE,OAAAjN,GAAQ,iBAAAkC,EAAqB,EAAA+K,GACrC,KAAK,OACF,kBAAkBjN,EAAM,EACxB,sBAAsBpZ,EAAS4sD,CAAS,CAC7C,CAEA,SAAW,CAAC7E,GAASmF,EAAK,IAAK,OAAO,QAAQJ,CAAY,EAAG,CAC3D,MAAMttC,GAASuoC,GACT,CAAE,SAAA1hC,EAAA,EAAa3F,EAAUlB,EAAM,EACrC,GAAI6G,KAAa,OACT,MAAA,IAAI,MAAM,0CAA0C,EAC5D,KAAM,CAAE,OAAAjN,GAAQ,QAAA6C,GAAS,iBAAAX,EAAA,EAAqB+K,GACxCuH,GAAiB,KAAK,OAAO,kBAAkBxU,EAAM,GACrDkC,GAAiB1Z,EAAmB,GAAK,KAC3Cqa,KAAY,MAChB2R,GAAe,sCAAsC,CACnD,CAAC3R,EAAO,EAAGixC,EAAA,CACZ,CACH,CAEA,UAAWt/B,MAAkB++B,EAC3B/+B,GACG,oBAAoBzF,CAAW,EAC/B,mBAAmB3O,EAAQkH,EAAU,WAAW,WAAW,CAElE,CAEA,MAAM,sBAAsC,CAC1C,MAAM,KAAK,iBAAiB,6BAA6B,mBAAmB,iBAAiB,EAC7F,MAAM,KAAK,iBAAiB,0BAA0B,mBAAmB,iBAAiB,CAC5F,CACF,CC1aO,MAAMysC,EAAgB,CAmB3B,YAAYzyC,EAAoB,CAlBhCha,EAAA,eAGAA,EAAA,qBAEAA,EAAA,oBAEAA,EAAA,sBACAA,EAAA,uBACAA,EAAA,+BAEAA,EAAA,6BAGAA,EAAA,8BAKE,KAAK,OAASga,EAEd,KAAK,aAAe,IAAI,IACtB,MAAM,KAAK,KAAK,OAAO,UAAU,aAAa,OAAS1a,GAAY,CACjEA,EACA,CAAA,CACD,CAAA,EAEH,KAAK,YAAc,IAAI,IACrB,MAAM,KAAK,KAAK,OAAO,UAAU,aAAa,OAASA,GAAY,CACjEA,EACA,CAAA,CACD,CAAA,EAEH,KAAK,cAAgB6gD,KACrB,KAAK,eAAiB,GACtB,KAAK,uBAAyB,GAEV,KAAK,OAAO,UAGhC,KAAK,qBAAuB,GAC5B,KAAK,sBAAwB,EAC/B,CAEA,uBACE7gD,EACuC,OAClC,OAAAkH,EAAA,KAAA,sBAAAlH,KAAAkH,EAAAlH,GAAkC,IAAI0e,GACxC0uC,GAAWA,EAAO,OACnB,CAACC,EAASC,IAAYD,EAAQ,aAAeC,EAAQ,YAAA,GAEhD,KAAK,qBAAqBttD,CAAO,CAC1C,CAEA,wBAAwBA,EAAqD,OACtE,OAAAkH,EAAA,KAAA,uBAAAlH,KAAAkH,EAAAlH,GAAmC,IAAI0e,GACzC0uC,GAAWA,EAAO,OACnB,CAACC,EAASC,IAAYD,EAAQ,UAAYC,EAAQ,SAAA,GAE7C,KAAK,sBAAsBttD,CAAO,CAC3C,CAEA,eAAeG,EAAiD,CAC9D,MAAMotD,EAAc,KAAK,aAAa,IAAIptD,CAAe,EACnDqtD,EAAa,KAAK,YAAY,IAAIrtD,CAAe,EACnD,GAAAotD,IAAgB,QAAaC,IAAe,OACxC,MAAA,IAAI,MAAM,4BAA4B,EACvC,MAAA,CAAE,YAAAD,EAAa,WAAAC,EACxB,CAEA,gBAAgBp0C,EAAgBpZ,EAAgC,CAI9D,GAHqB,KAAK,OACvB,kBAAkBoZ,CAAM,EACxB,cAAc,IAAIpZ,CAAO,IACP,OAAkB,OAAA,KACvC,KAAM,CAAE,WAAA6e,CAAe,EAAA,KAAK,uBAAuB7e,CAAO,EACpDytD,EAAO5uC,EAAW,UAAWuuC,GAAWA,EAAO,SAAWh0C,CAAM,EACtE,OAAIq0C,IAAS,QACX,QAAQ,MAAM,qCAAqC,EAE5C,MAEFA,CACT,CAEA,8BAA8BztD,EAA6C,CACzE,KAAM,CAAE,WAAA6e,CAAe,EAAA,KAAK,uBAAuB7e,CAAO,EACnD,OAAA6e,EACJ,MAAM,EAAGhC,EAAmC,EAC5C,IAAI,CAAC,CAAE,OAAAzD,EAAQ,aAAA0E,MAAoB,CAClC,SAAU,KAAK,OAAO,kBAAkB1E,CAAM,EAAE,oBAAoB,EACpE,aAAA0E,CACA,EAAA,CACN,CAOA,kBACE1E,EACAqJ,EAcM,CACA,KAAA,CACJ,oBAAAirC,EACA,qBAAAC,EACA,eAAAC,EACA,gBAAAC,EACA,YAAAC,EACA,aAAAC,EACA,WAAAp/B,EACA,cAAAC,EACA,cAAAo/B,EAAgB,EACd,EAAAvrC,EAEEc,EAAW,KAAK,OAAO,kBAAkBnK,CAAM,EAAE,SAEvD,GAAI,CAAC40C,GAAiBzqC,EAAU,OAEhC,GAAImqC,IAAwB,OAAW,CAC/B,MAAAO,EAAa,KAAK,MAAM,KAAK,MAAQ,IAAO,GAAK,EAAE,EACnDC,EAAuD,CAAA,EAC7D,SAAW,CAAChqC,EAAUiqC,CAAgB,IAAK,OAAO,QAChDT,GAAuB,CAAC,CAAA,EACvB,CACD,MAAMzxC,EAAUiI,EAEhB,GADK,KAAA,cAAcjI,CAAO,GAAKkyC,EAC3BR,GAAwBQ,EAAkB,CAC5C,MAAMpnE,EAAM,GAAGm9B,CAAQ,IAAI+pC,CAAU,GAC/BjqE,GAAS,KAAK,eAAe+C,CAAG,GAAK,GAAKonE,EAC3C,KAAA,eAAepnE,CAAG,EAAI/C,EACtB,KAAA,uBAAuB+C,CAAG,EAAI/C,EACnCkqE,EAA0BnnE,CAAG,EAAI/C,CACnC,CACF,CACA,MAAMoqE,EAAwB,OAAO,YACnC,OAAO,QAAQ,KAAK,aAAa,EAAE,OACjC,CAAC,CAAClqC,EAAUgpC,CAAK,IACfQ,EAAoBxpC,CAAmB,GAAK,EAChD,CAAA,EAEF,UAAW0J,KAAkB,KAAK,OAAO,gBAAgB,SACvDA,EAAe,0BAA0B,CACvC,KAAMrR,EAAiB,kBACvB,cAAe6xC,CAAA,CAChB,EAEC,OAAO,KAAKF,CAAyB,EAAE,QACzC,KAAK,OAAO,sBACV,CAAE,KAAMpxC,EAAuB,eAAgB,EAC/C,CACE,KAAMP,EAAiB,6BACvB,eAAgB2xC,CAClB,CAAA,CAGN,CAKW,UAAAluD,KAAW4tD,GAAkB,GAAI,CAC1C,MAAMJ,EAAa,KAAK,YAAY,IAAIxtD,CAAO,EAC3CwtD,IAAe,QACnB,KAAK,YAAY,IAAIxtD,EAASwtD,EAAa,CAAC,CAC9C,CACW,UAAAxtD,KAAW8tD,GAAe,GAAI,CACvC,MAAMN,EAAa,KAAK,YAAY,IAAIxtD,CAAO,EAC3CwtD,IAAe,QACnB,KAAK,YAAY,IAAIxtD,EAASwtD,EAAa,CAAC,CAC9C,CACW,UAAAxtD,KAAW6tD,GAAmB,GAAI,CAC3C,MAAMN,EAAc,KAAK,aAAa,IAAIvtD,CAAO,EAC7CutD,IAAgB,QACpB,KAAK,aAAa,IAAIvtD,EAASutD,EAAc,CAAC,CAChD,CACW,UAAAvtD,KAAW+tD,GAAgB,GAAI,CACxC,MAAMR,EAAc,KAAK,aAAa,IAAIvtD,CAAO,EAC7CutD,IAAgB,QACpB,KAAK,aAAa,IAAIvtD,EAASutD,EAAc,CAAC,CAChD,CAEM,MAAAc,MAAqB,IAAI,CAC7B,GAAIN,GAAgB,CAAC,EACrB,GAAIF,GAAmB,CAAC,EACxB,GAAIC,GAAe,CAAC,EACpB,GAAIF,GAAkB,CAAC,CAAA,CACxB,EACK3M,EAAQ,OAAO,YACnB,CAAC,GAAGoN,CAAc,EAAE,QAASruD,GAC3B,KAAK,OAAO,UAAU,aAAa,IAAIA,CAAO,EAC1C,CAAC,CAACA,EAAS,KAAK,eAAeA,CAAO,CAAC,CAAC,EACxC,CAAC,CACP,CAAA,EAEF,UAAW4tB,KAAkB,KAAK,OAAO,gBAAgB,SAEpDA,EAAe,sBACb,oBAAoB,EACpB,IAAI7rB,EAAuB,GAGhC6rB,EAAe,0BAA0B,CACvC,KAAMrR,EAAiB,yBACvB,MAAO,OAAO,YACZ,OAAO,QAAQ0kC,CAAK,EAAE,OAAO,CAAC,CAAC9gD,EAAiBmuD,CAAQ,IACtD1gC,EAAe,YAAY,IAAIztB,CAAe,CAChD,CACF,CAAA,CACD,EAGQ,SAAA,CAACH,EAAS4b,CAAS,IAAK,OAAO,QAAQ+S,GAAc,CAAA,CAAE,EAAG,CAC7D,MAAA4/B,EAAc,KAAK,wBAAwBvuD,CAAO,EACxD,GAAI4b,IAAc,KAAM,CACtB2yC,EAAY,OAAOn1C,CAAM,EACzB,QACF,CACK,KAAA,mBAAmBA,EAAQpZ,EAAS4b,CAAS,CACpD,CAEW,SAAA,CAAC5b,EAAS8d,CAAY,IAAK,OAAO,QAAQ8Q,GAAiB,CAAA,CAAE,EAClE9Q,IAAiB,KAAW,KAAA,qBAAqB1E,EAAQpZ,CAAO,EAC1D,KAAA,kBAAkBoZ,EAAQpZ,EAAS8d,CAAY,CAE7D,CAEA,WAAuC,CAC9B,MAAA,CAAE,GAAG,KAAK,uBACnB,CAEA,QAAQmH,EAA2C,CACjD,SAAW,CAACl+B,EAAK/C,CAAK,IAAK,OAAO,QAAQihC,CAAQ,EAC5C,KAAK,uBAAuBl+B,CAAG,GAAK/C,GAC/B,OAAA,KAAK,uBAAuB+C,CAAG,CAC5C,CAEQ,mBACNqyB,EACApZ,EACA4b,EACA,CACoB,KAAK,wBAAwB5b,CAAO,EAC5C,OAAO,CAAE,OAAAoZ,EAAQ,UAAAwC,GAAa,EAAK,CACjD,CAEQ,kBACNxC,EACApZ,EACA8d,EACA,CACM,MAAAywC,EAAc,KAAK,uBAAuBvuD,CAAO,EACjD,CAAE,SAAA+e,EAAU,SAAAK,CAAS,EAAImvC,EAAY,OACzC,CAAE,OAAAn1C,EAAQ,aAAA0E,CAAa,EACvB,EAAA,EAGG,KAAA,oCACH9d,EACAof,EACAL,IAAa,KAAOwvC,EAAY,WAAW,OAASxvC,EAAW,EAC/D,CACE,qBAAsB,CACpB,CACE,SAAU,KAAK,OACZ,kBAAkB3F,CAAM,EACxB,oBAAoB,EACvB,aAAA0E,CACF,CACF,CACF,CAAA,CAEJ,CAEQ,qBAAqB1E,EAAgBpZ,EAAuB,CAC5D,MAAAuuD,EAAc,KAAK,uBAAuBvuD,CAAO,EACjDkf,EAAYqvC,EAAY,OAAOn1C,CAAM,EAC3C,GAAI8F,IAAc,KAAM,OAElB,KAAA,CAAE,SAAAH,CAAa,EAAAG,EACfsvC,EACJD,EAAY,WAAW1xC,GAAsC,CAAC,EAC3D,KAAA,oCACH7c,EACA+e,EACAwvC,EAAY,WAAW,OACvB,CACE,qBACEC,IAAY,OACR,OACA,CACE,CACE,SAAU,KAAK,OACZ,kBAAkBA,EAAQ,MAAM,EAChC,oBAAoB,EACvB,aAAcA,EAAQ,YACxB,CACF,EACN,wBAAyB,CAACp1C,CAAM,CAClC,CAAA,CAEJ,CAOA,SAASA,EAAsB,CAC7B,MAAMwU,EAAiB,KAAK,OAAO,kBAAkBxU,CAAM,EAC3D,KAAK,kBAAkBA,EAAQ,CAC7B,oBAAqB,OAAO,YAC1B,OAAO,QAAQwU,EAAe,yBAAyB,EAAE,IACvD,CAAC,CAAC3R,EAASwyC,CAAO,IAAM,CAACxyC,EAAS,CAACwyC,CAAO,CAC5C,CACF,EACA,qBAAsB,GACtB,eAAgB,CAAC,GAAG7gC,EAAe,WAAW,MAAM,EACpD,gBAAiB,CAAC,GAAGA,EAAe,YAAY,MAAM,EACtD,WAAY,OAAO,YACjB,MAAM,KAAKA,EAAe,WAAW,KAAK,EAAI5tB,GAAY,CACxDA,EACA,IAAA,CACD,CACH,EACA,cAAe,OAAO,YACpB,MAAM,KAAK4tB,EAAe,cAAc,KAAK,EAAI5tB,GAAY,CAC3DA,EACA,IAAA,CACD,CACH,EACA,cAAe,EAAA,CAChB,CACH,CAMA,WAAWoZ,EAAsB,CAC/B,MAAMwU,EAAiB,KAAK,OAAO,kBAAkBxU,CAAM,EAC3D,KAAK,kBAAkBA,EAAQ,CAC7B,oBAAqBwU,EAAe,0BACpC,qBAAsB,GACtB,YAAa,CAAC,GAAGA,EAAe,WAAW,MAAM,EACjD,aAAc,CAAC,GAAGA,EAAe,YAAY,MAAM,EACnD,WAAY,OAAO,YAAYA,EAAe,WAAW,SAAS,EAClE,cAAe,OAAO,YAAYA,EAAe,cAAc,SAAS,EACxE,cAAe,EAAA,CAChB,CACH,CAQQ,oCACN5tB,EACA0uD,EACAC,EACAh0C,EAIM,CACA,MAAA4zC,EAAc,KAAK,uBAAuBvuD,CAAO,EACjD4uD,EACJF,EAAY7xC,GACRgyC,EAAcD,EAAwB,EAAIF,EAC1CI,EAAYF,EACdL,EAAY,WAAW,OACvB,KAAK,IAAII,EAASJ,EAAY,WAAW,MAAM,EACnD,QACMQ,EAAcF,EAClBE,EAAcD,EACdC,IACA,CACA,KAAM,CAAE,OAAQC,CAAA,EAAiBT,EAAY,WAAWQ,CAAW,EAC5C,KAAK,OAAO,kBAAkBC,CAAY,EAG9D,oBAAoBhvD,CAAO,EAC3B,oDAAoD,CACnD,KAAMuc,EAAiB,+CACvB,aAAcwyC,EAGd,GAAIH,EAAwBj0C,EAAO,MAAA,CACpC,CACL,CACF,CAEA,yBAAyBA,EAEhB,CACP,SAAW,CAAC3a,EAASuuD,CAAW,IAAK,OAAO,QAC1C,KAAK,oBAAA,EACJ,CACD,MAAMU,EAEF,CAAA,EACJ,SAAW,CAAE,OAAA71C,CAAA,IAAYm1C,EAAY,WAAW,MAC9C,EACA1xC,EAAA,EACC,CACK,MAAAqyC,EAAUv0C,EAAKvB,CAAM,EAC3B,GAAI81C,IAAY,OAAW,SACrB,MAAAC,EACJnzC,GAAyCkzC,CAAO,EAC9C,OAAO,KAAKC,CAAkB,EAAE,SAAW,IAC/CF,EAAoB71C,CAAM,EAAI+1C,EAChC,CACA,GAAI,OAAO,KAAKF,CAAmB,EAAE,SAAW,EAChD,UAAWrhC,KAAkB,KAAK,OAAO,gBAAgB,SAEpDA,EAAA,oBAAoB5tB,CAAO,EAC3B,oDAAoD,CACnD,KAAMuc,EAAiB,+CACvB,oBAAA0yC,CAAA,CACD,CAEP,CACF,CACF,CCjdY,IAAAG,IAAAA,IACVA,EAAA,KAAO,OACPA,EAAA,OAAS,SACTA,EAAA,MAAQ,QAHEA,IAAAA,IAAA,CAAA,CAAA,EAMZ,MAAMC,GAAqBv7C,EAAE,OAAO,CAClC,KAAMA,EAAE,QAAQ,MAAoB,EACpC,GAAIA,EAAE,OAAO,EACb,GAAIA,EAAE,OAAO,CACf,CAAC,EAGKw7C,GAAuBx7C,EAAE,OAAO,CACpC,KAAMA,EAAE,QAAQ,QAAsB,CACxC,CAAC,EAGKy7C,GAAsBz7C,EAAE,OAAO,CACnC,KAAMA,EAAE,QAAQ,OAAqB,EACrC,GAAIA,EAAE,OAAO,EACb,GAAIA,EAAE,OAAO,CACf,CAAC,EAG6BA,EAAE,MAAM,CACpCu7C,GACAC,GACAC,EACF,CAAC,ECtBM,MAAMC,EAAkB,CAS7B,YAAY90C,EAAoB,CARhCha,EAAA,eAMAA,EAAA,qBAGE,KAAK,OAASga,EACT,KAAA,iBAAmB,GAC1B,CAEQ,oBAAoBtB,EAAgB,CAC1C,MAAMq2C,EAAmB,KAAK,aAAa,IAAIr2C,CAAM,EACrD,GAAIq2C,IAAqB,OAAkB,OAAAA,EACrC,MAAAC,MAA0B,IAC3B,YAAA,aAAa,IAAIt2C,EAAQs2C,CAAmB,EAC1CA,CACT,CAEQ,eAAet2C,EAAgBu2C,EAAyB,CACxD,MAAAF,EAAmB,KAAK,oBAAoBr2C,CAAM,EAClDw2C,EAAcH,EAAiB,IAAIE,CAAe,EACxD,GAAIC,IAAgB,OAAkB,OAAAA,EAChC,MAAAC,EAAiB,IAAIC,GACV,OAAAL,EAAA,IAAIE,EAAiBE,CAAc,EAC7CA,CACT,CAEQ,mBAAmBhqC,EAAwB,CAC3C,KAAA,CAAE,OAAAzM,EAAQ,gBAAAu2C,CAAoB,EAAA9pC,EAEpC,OADIzM,IAAW,QACXu2C,IAAoB,OAAkB,KACnC,KAAK,eAAev2C,EAAQu2C,CAAe,CACpD,CAEA,oBAAoB9pC,EAAwB,CAC1C,KAAK,eAAeA,EAAM,CACxB,KAAMupC,GAAgB,MAAA,CACvB,EAEK,KAAA,CAAE,OAAAh2C,EAAQ,gBAAAu2C,CAAoB,EAAA9pC,EAEpC,GADIzM,IAAW,QACXu2C,IAAoB,OAAW,OACnC,MAAMF,EAAmB,KAAK,aAAa,IAAIr2C,CAAM,EACrD,GAAIq2C,IAAqB,OAAW,CAClC,QAAQ,MAAM,mCAAmC,EACjD,MACF,CACM,MAAAG,EAAcH,EAAiB,IAAIE,CAAe,EACxD,GAAIC,IAAgB,OAAW,CAC7B,QAAQ,MAAM,8BAA8B,EAC5C,MACF,CACYA,EAAA,MAAM,OAAO/pC,EAAK,MAAM,EAChC+pC,EAAY,MAAM,OAAS,GAAGH,EAAiB,OAAOE,CAAe,EACrEF,EAAiB,OAAS,GAAQ,KAAA,aAAa,OAAOr2C,CAAM,EAChE,OAAOyM,EAAK,eACd,CAEA,eAAeA,EAAwB8pC,EAAyB,CAC9D,KAAK,oBAAoB9pC,CAAI,EACvB,KAAA,CAAE,OAAAzM,CAAW,EAAAyM,EACfzM,IAAW,SACV,KAAA,eAAeA,EAAQu2C,CAAe,EAAE,MAAM,IAAI9pC,EAAK,OAAQA,CAAI,EACxEA,EAAK,gBAAkB8pC,EACzB,CAEA,MAAM,eAAeI,EAA2B14B,EAAoB,CAClE,GAAI04B,EAAQ,kBAAoB,OAAW,OACrC,MAAAH,EAAc,KAAK,mBAAmBG,CAAO,EAGnD,GAFIH,IAAgB,OACRA,EAAA,SAASG,EAAS14B,CAAK,EAC/Bu4B,EAAY,QAAQ,OACxBA,EAAY,OAAS,GACrB,MAAM,IAAI,QAAS7qE,GAAY,WAAWA,EAAS,CAAC,CAAC,EAC/C,MAAAirE,EAA6BJ,EAAY,aAC/C,UAAWK,KAAWL,EAAY,MAAM,OAAA,EAAU,CAChD,MAAMM,EAASF,EAAa,OAC1B,CAAC,CAAE,OAAAG,CAAO,IAAMF,EAAQ,SAAWE,CAAA,EAEjCD,EAAO,QACJ,KAAA,OAAO,SAASD,EAAS,CAC5B,KAAMh8C,GAAW,aACjB,OAAAi8C,CAAA,CACD,CACL,CACAN,EAAY,OAAS,EACvB,CACF,CAEA,MAAME,EAAY,CAMhB,aAAc,CALdpvD,EAAA,cACAA,EAAA,oBACAA,EAAA,qBACAA,EAAA,eAGO,KAAA,UAAY,IACZ,KAAA,gBAAkB,IACvB,KAAK,aAAe,GACpB,KAAK,OAAS,EAChB,CAEA,SAAS,CAAE,OAAAyvD,CAAO,EAAqB94B,EAAoB,CACrDA,EAAM,MAAQ+3B,GAAgB,KAAW,KAAA,YAAY,IAAIe,EAAQ94B,CAAK,EACrE,KAAK,aAAa,KAAK,CAAC84B,EAAQ94B,CAAK,CAAC,CAC7C,CAEA,YAA2B,CACnB,MAAA64B,EAAS,CAAC,GAAG,KAAK,YAAY,UAAW,GAAG,KAAK,YAAY,EACnE,YAAK,YAAY,QACjB,KAAK,aAAa,OAAS,EACpBA,EAAO,IAAI,CAAC,CAACC,EAAQ94B,CAAK,KAAO,CAAE,OAAA84B,EAAQ,MAAA94B,CAAQ,EAAA,CAC5D,CACF,CC5Ha,MAAA+4B,GACX/4B,GACuB,CACvB,GAAI,OAAOA,GAAU,UAAY,OAAOA,EAAM,MAAS,SAAiB,OAAA,KACxE,OAAQA,EAAM,KAAM,CAClB,KAAK+3B,GAAgB,OACZ,OAAA/3B,EAET,KAAK+3B,GAAgB,KACrB,KAAKA,GAAgB,MAAO,CACpB,KAAA,CAAE,GAAAiB,EAAI,GAAAC,CAAO,EAAAj5B,EACnB,OAAI,OAAOg5B,GAAO,UAAY,OAAOC,GAAO,SAAiB,KACtDj5B,CACT,CACF,CACO,OAAA,IACT,ECkJO,MAAMk5B,EAAW,CAoItB,YACEniC,EACA7sB,EACAW,EACA2zB,EACApT,EACA,CAxIF/hB,EAAA,qBACAA,EAAA,gBACAA,EAAA,kBACAA,EAAA,oBACAA,EAAA,kBACAA,EAAA,aAKAA,EAAA,yBAIAA,EAAA,4BACAA,EAAA,sBACAA,EAAA,oBAEAA,EAAA,gBACAA,EAAA,uBAKAA,EAAA,kBAEAA,EAAA,wBACAA,EAAA,4BACAA,EAAA,2BACAA,EAAA,wBACAA,EAAA,0BACAA,EAAA,0BACAA,EAAA,6BACAA,EAAA,6BACAA,EAAA,2BAEAA,EAAA,wBACAA,EAAA,wBACAA,EAAA,2BACAA,EAAA,4BACAA,EAAA,wBACAA,EAAA,2BAEAA,EAAA,4BAYAA,EAAA,sBAKAA,EAAA,8BAKAA,EAAA,oCAKAA,EAAA,kCAKAA,EAAA,8BAGAA,EAAA,sBAEAA,EAAA,gBAEAA,EAAA,kBAGAA,EAAA,wBACAA,EAAA,2BAEAA,EAAA,mBACAA,EAAA,yBACAA,EAAA,uBACAA,EAAA,+BAGAA,EAAA,qBAaAA,EAAA,yBASAA,EAAA,uCACAA,EAAA,6BAEAA,EAAA,2BAEAA,EAAA,kCAEAA,EAAA,eACAA,EAAA,uBAEAA,EAAA,iBAEAA,EAAA,eAeE,KAAK,aAAe,oBACpB,KAAK,oBAAsB,EAC3B,KAAK,cAAgB,EACrB,KAAK,YAAc,EAEnB,KAAK,UAAY0tB,EACjB,KAAK,QAAU7sB,EACf,KAAK,YAAcW,EACnB,KAAK,UAAY2zB,EACjB,KAAK,KAAOpT,EACZ,KAAK,iBAAmB,GAGD,KAAK,KAAK,oBAE5B,KAAA,QAAU,IAAID,GAA2B,CAC5C,QAAS,KAAK,KAAK,QACnB,oBAAqB,KAAK,KAAK,mBAAA,CAChC,EACD,KAAK,eAAiB,EACjB,KAAA,cAAgB,IAChB,KAAA,oBAAsB,IACtB,KAAA,oBAAsB,IAAIspC,GAAoB,IAAI,EAClD,KAAA,mBAAqB,IAAIzhC,GAAmB,IAAI,EAChD,KAAA,gBAAkB,IAAI8iC,GAAgB,IAAI,EAC1C,KAAA,kBAAoB,IAAIqC,GAAkB,IAAI,EAC9C,KAAA,kBAAoB,IAAI11C,GACxB,KAAA,qBAAuB,IAAIyB,GAC3B,KAAA,qBAAuB,IAAIe,GAC3B,KAAA,mBAAqB,IAAI7B,GAAmB,IAAI,EAChD,KAAA,gBAAkB,IAAIN,GAAgBrB,EAA6B,EACnE,KAAA,gBAAkB,IAAIqB,GAAgBrB,EAA6B,EACxE,KAAK,mBAAqB,IAAIqB,GAC5BrB,EAAA,EAEF,KAAK,oBAAsB,IAAIqB,GAC7BpB,EAAA,EAEG,KAAA,gBAAkB,IAAIoB,GAAgBrB,EAA6B,EACxE,KAAK,mBAAqB,IAAIqB,GAC5BrB,EAAA,EAEF,KAAK,oBAAsB,CACzB,aAAc,EACd,aAAc,EACd,eAAgB,EAChB,cAAe,EACf,gBAAiB,CAAA,EAEd,KAAA,kBAAoB,IACpB,KAAA,0BAA4B,IAC5B,KAAA,gCAAkC,IAClC,KAAA,8BAAgC,IAChC,KAAA,0BAA4B,IACjC,KAAK,cAAgB,GACrB,KAAK,QAAU,GACf,KAAK,UAAY,GACZ,KAAA,oBAAsB,IAC3B,KAAK,mBAAqB,GAC1B,KAAK,WAAa,EAClB,KAAK,iBAAmB,EACxB,KAAK,eAAiB,EACtB,KAAK,uBAAyB,EAC9B,KAAK,aAAe,CAClB,iBAAkB,EAClB,MAAO,CAAC,CAAA,EAEV,KAAK,iBAAmB,CACtB,mBAAoB,GACpB,mCACE,IAAI8xC,GAAmC,IAAI,EAC7C,0BAA2B,IAAIK,GAA0B,IAAI,EAC7D,4BAA6B,IAAIP,GAA4B,IAAI,EACjE,gBAAiB,CAAA,EAGnB,KAAK,+BAAiC,EAEjC,KAAA,qBAAuB,KAAK,KAAK,sBAAwB,IACzD,KAAA,mBAAqB,YAAY,IAAM,CAC1C,KAAK,iBAAiB,CAAA,EACrB,KAAK,oBAAoB,EAE5B,KAAK,0BAA4B,EAEjC,KAAK,OAAS,GACd,KAAK,eAAiB,EAEjB,KAAA,aAAe,IAEpB,KAAK,OAAS,CACZ,wBAAyB,GACzB,qBAAsB,GACtB,mCAAoC,GACpC,qBAAsB,GACtB,4BAA6B,GAC7B,wBAAyB,EACzB,iBAAkB,CAChB,CAACplC,GAAe,IAAI,EAAG,EACvB,CAACA,GAAe,IAAI,EAAG,EACvB,CAACA,GAAe,YAAY,EAAG,EAC/B,CAACA,GAAe,IAAI,EAAG,EACvB,CAACA,GAAe,IAAI,EAAG,EACvB,CAACA,GAAe,WAAW,EAAG,EAC9B,CAACA,GAAe,MAAM,EAAG,CAC3B,CAAA,CAEJ,CAYA,UAAiB,CACX,KAAK,qBAAuB,QAC9B,cAAc,KAAK,kBAAkB,EACvC,UAAWkrC,KAAoB,KAAK,UAAU,OAAA,EACjC,UAAA3qC,KAAQ2qC,EAAiB,SAClC3qC,EAAK,OAAO,QAGhB,KAAK,UAAY,EACnB,CAEA,WAAY,CACV,MAAMsqC,EAAS,KAAK,WACf,YAAA,aACE,GAAGA,CAAM,EAClB,CAEA,iBAAkB,CAChB,MAAMM,EAAW,KAAK,iBACjB,YAAA,mBACE,GAAGA,CAAQ,EACpB,CAEA,eAAgB,CACd,MAAMj3C,EAAS,GAAG,KAAK,YAAY,SAAS,KAAK,cAAc,GAC1D,YAAA,iBACEA,CACT,CAEA,kBAAkBJ,EAAgC,CAChD,MAAMwU,EAAiB,KAAK,gBAAgB,IAAIxU,CAAM,EACtD,GAAIwU,IAAmB,OACrB,MAAM,IAAI,MAAM,QAAQxU,CAAM,sBAAsB,EAC/C,OAAAwU,CACT,CAEA,oBAAoBxU,EAAgBpZ,EAAuC,CACzE,OAAO,KAAK,kBAAkBoZ,CAAM,EAAE,oBAAoBpZ,CAAO,CACnE,CAEA,kBAAkBoZ,EAAgB9E,EAA8B,CAC9D,OAAO,KAAK,kBAAkB8E,CAAM,EAAE,kBAAkB9E,CAAI,CAC9D,CAEA,yBAAyB8E,EAA2C,CAC3D,OAAA,KAAK,kBAAkBA,CAAM,EAAE,qBACxC,CAEA,cAAcwU,EAAgC5tB,EAA0B,CAEpE,OAAA,KAAK,UAAU,QAAQ,IAAIA,CAAO,GAClC4tB,EAAe,iBAAiB5tB,CAAO,CAE3C,CAEA,gBAAgBsU,EAAc,CAC5B,OAAO,OAAO,UAAUA,CAAI,GAAKA,GAAQ,GAAKA,EAAOF,EACvD,CAEA,MAAM,mBAAmC,CACnC,KAAK,SACT,MAAM,IAAI,QAAc,CAACrvB,EAASC,IAAW,CACtC,KAAA,iBAAiB,KAAKD,CAAO,CAAA,CACnC,CACH,CAEA,MAAM,cAA8B,CAClC,GAAI,MAAK,SACL,MAAK,cAET,MAAK,cAAgB,GACjB,GAAA,CACI,MAAA29B,EAAO,MAAO,SAAY,CAC1B,GAAA,CACK,OAAA,MAAM,KAAK,QAAQ,oBACnBl6B,EAAK,CAEZ,QAAQ,MAAMA,CAAG,CACnB,CAAA,KAGF,GAAIk6B,IAAS,OAAW,CAChB,KAAA,CACJ,aAAAguC,EACA,MAAAC,EACA,eAAAC,EACA,oBAAAC,EACA,cAAAC,EACA,YAAAC,EACA,gBAAAC,EACA,OAAAlrC,EACA,eAAAmrC,CACE,EAAAvuC,EAEJ,KAAK,aAAeguC,EACpB,KAAK,oBAAsBG,EAC3B,KAAK,cAAgBC,EACrB,KAAK,YAAcC,EACnB,KAAK,iBAAiB,gBAAkBC,EACxC,KAAK,OAASlrC,EACd,KAAK,eAAiBmrC,EACtB,SAAW,CAAC73C,EAAQiN,CAAQ,IAAK,OAAO,QAAQsqC,CAAK,EAC7C,MAAA,KAAK,gBAAgBv3C,EAAQiN,CAAQ,EAE7C,OAAO,OAAO,KAAK,gBAAgB,eAAgBuqC,CAAc,EAEjE,KAAK,QAAU,GACJ,UAAAjqE,KAAY,KAAK,iBACjBA,IAEX,KAAK,iBAAmB,GACxB,QAAQ,IAAI,4BAA4B,CAC1C,CAAA,QACA,CACA,KAAK,cAAgB,EACvB,EACF,CAEA,MAAM,WAA2B,CAC3B,GAAA,KAAK,SAAW,KAAK,cACjB,MAAA,IAAI,MAAM,6CAA6C,EAC3D,GAAA,KAAK,KAAK,aAAe,GAAO,CAClC,KAAK,QAAU,GACf,MACF,CACA,MAAM,KAAK,eACX,MAAM,KAAK,mBACb,CAQA,UAAUuqE,EAAyBf,EAAiB,CAC7C,KAAA,iBAEL,MAAMtqC,EAAO,CACX,OAAQsqC,GAAU,KAAK,UAAU,EACjC,OAAAe,EAEA,QAAS,GACT,kBAAmB,GAAI,EAGlB,MAAA,CACL,UAAYC,GAAgB,EACzB,SAAY,CACP,GAAA,CACI,MAAA,KAAK,UAAUtrC,EAAMsrC,CAAG,QACvB3oE,EAAK,CACZ,QAAQ,MAAMA,CAAG,EACjB,KAAK,QAAQq9B,EAAM,CAAE,QAAS9R,EAAY,aAAc,CAC1D,CAAA,IAEJ,EACA,aAAc,IAAM,CAClB,KAAK,aAAa8R,CAAI,CACxB,CAAA,CAEJ,CAEA,aAAaA,EAAwB,CAC9B,KAAA,iBAEL,KAAM,CAAE,OAAAsqC,EAAQ,OAAA/2C,EAAQ,WAAAmN,EAAY,cAAAL,GAAkBL,EAC3C,UAAAurC,KAAalrC,EAAc,OAC/B,KAAA,uBAAuBL,EAAMurC,CAAS,EAM7C,GAJK,KAAA,kBAAkB,oBAAoBvrC,CAAI,EAC3CU,IAAe,QACjB,KAAK,eAAeA,CAAU,EAE5BnN,IAAW,OAAW,CACxB,MAAMo3C,EAAmB,KAAK,UAAU,IAAIp3C,CAAM,EAClD,GAAIo3C,IAAqB,OACjB,MAAA,IAAI,MAAM,0CAA0C,EAC5DA,EAAiB,OAAOL,CAAM,CAChC,CACF,CAEA,MAAM,gBAAgB/2C,EAAgBiN,EAAsC,CAG1E,MAAMuH,EAAiB,IAAIS,GAAejV,EAAQiN,EAAU,IAAI,EAC3D,KAAA,gBAAgB,IAAIjN,EAAQwU,CAAc,EAC/CA,EAAe,UAAU,EACVA,EAAA,UAAUvH,EAAS,KAAK,EAEvC,KAAK,2BAA2B,CAC9B,KAAM9J,EAAiB,gBACvB,OAAQqR,EAAe,OACvB,cAAeA,EAAe,mBAAmB,CAAA,CAClD,EAGD,KAAK,sBAAsBxU,CAAM,EAE3B,MAAAi4C,EAAgBzjC,EAAe,yBAChC,KAAA,qBAAqB,QAAQxU,EAAQi4C,CAAa,EACvD,KAAK,8BAA8B,CACjC,KAAM90C,EAAiB,uBACvB,SAAU,CAAE,CAACnD,CAAM,EAAGi4C,CAAc,CAAA,CACrC,EAIK,MAAAzjC,EAAe,uBAAuB,CAAA,CAAE,CAChD,CAEA,MAAc,kBAAmB,CAC/B,GAAI,MAAK,mBACT,MAAK,mBAAqB,GAC1B,UAAWxU,IAAU,CAAC,GAAG,KAAK,eAAe,EACvC,GAAA,CACI,MAAA,KAAK,cAAcA,CAAM,QACxB5wB,EAAK,CACZ,QAAQ,MAAMA,CAAG,CACnB,CAEF,KAAK,mBAAqB,GAC5B,CAEA,MAAc,cAAc4wB,EAAgB,OAC1C,IAAIsJ,EAA0C,KAC1C,GAAA,CACFA,EAAO,MAAM,KAAK,QAAQ,gBAAgBtJ,CAAM,QACzC5wB,EAAK,CACZ,QAAQ,MAAMA,CAAG,CACnB,CACA,GAAIk6B,IAAS,KAKb,IAHK,KAAA,gBAAgB,OAAOtJ,CAAM,EAC5B,MAAA,KAAK,gBAAgBA,EAAQsJ,CAAI,EAEnC,EAAE,KAAK,KAAK,aAAe,IAAQ,CAC/B,MAAAkL,EAAiB,KAAK,kBAAkBxU,CAAM,EAC3C,QAAAp3B,EAAI,EAAGA,KAAKklB,EAAA,KAAK,UAAU,IAAIkS,CAAM,IAAzB,YAAAlS,EAA4B,OAAQ,GAAIllB,IAC3D4rC,EAAe,gBAAgB,SAC1B,KAAA,mBAAmB,WAAWxU,CAAM,CAE7C,CAIA,KAAK,oBAAoBA,EAAQ,CAC/B,KAAMnF,GAAW,YAAA,CAClB,EACH,CAMA,YAAYkS,EAAkB,CAI5B,KAAK,iBAAiBA,CAAI,CAC5B,CAEA,kBACE,CAAE,MAAAmrC,EAAO,KAAAzrC,EAAM,KAAM0rC,GACrBprC,EACM,CACA,KAAA,CAAE,QAAAnmB,CAAQ,EAAImmB,EAAK,OACnB7D,EAAOivC,GAAWnvC,GAAK,IAE7B,KAAK,SAASyD,EAAM,CAClB,KAAM5R,GAAW,aACjB,MAAAq9C,EACA,OAAQ,CACN,QAAAtxD,EACA,KAAAsiB,CACF,CAAA,CACD,EAEI,KAAA,eAAeuD,EAAMM,EAAM7D,CAAI,CACtC,CAEA,eAAeuD,EAAwBM,EAAY7D,EAAkB,CACnE,MAAMiE,EAAa,CACjB,GAAI,KAAK,gBAAgB,EACzB,KAAAV,EACA,KAAAM,EACA,KAAA7D,EACA,QAAS,EAAA,EAEXuD,EAAK,WAAaU,EAClBJ,EAAK,QAAQ,IAAII,EAAW,GAAIA,CAAU,EAE1C,MAAMnN,EAASyM,EAAK,OACpB,GAAIzM,IAAW,OAAiB,MAAA,IAAI,MAAM,4BAA4B,EAEtE,KAAK,oBAAoB,wBAAwBA,EAAQ+M,EAAK,WAAW,EAEzE,KAAK,eAAeA,EAAM,CACxB,KAAM3E,EAAS,YACf,OAAApI,EACA,WAAAmN,EACA,KAAAjE,CAAA,CACD,CACH,CAEA,eAAeiE,EAA8B,CAC3C,KAAM,CAAE,GAAIkqC,EAAU,KAAAtqC,EAAM,KAAAN,GAASU,EAChCJ,EAAA,QAAQ,OAAOsqC,CAAQ,EAC5B,OAAO5qC,EAAK,WAEZ,MAAMzM,EAASyM,EAAK,OACpB,GAAIzM,IAAW,OAAiB,MAAA,IAAI,MAAM,4BAA4B,EACtE,KAAK,oBAAoB,wBAAwBA,EAAQ+M,EAAK,WAAW,CAC3E,CAGA,kBAAkBnmB,EAAyC,CAClD,OAAA,KAAK,UAAU,kBAAkBA,CAAO,CACjD,CAGA,eAAeA,EAAkC,CACxC,OAAA,KAAK,UAAU,eAAeA,CAAO,CAC9C,CAMA,iBAAiBwxD,EAA0D,CACzE,OAAQA,EAAM,KAAM,CAClB,KAAK10C,EAAuB,OAC1B,OAAO,KAAK,cACd,KAAKA,EAAuB,cAC1B,OAAO,KAAK,0BACd,KAAKA,EAAuB,UAC1B,OAAO,KAAK,sBACd,KAAKA,EAAuB,IAC1B,OAAO,KAAK,mBAAmB,cACjC,KAAKA,EAAuB,UAC1B,OAAO,KAAK,sBACd,KAAKA,EAAuB,aAC1B,OAAO,KAAK,kBAAkB00C,EAAM,MAAM,EAAE,qBAC9C,KAAK10C,EAAuB,gBAC1B,OAAO,KAAK,4BACd,KAAKA,EAAuB,KAC1B,OAAO,KAAK,kBAAkB00C,EAAM,MAAM,EAAE,cAC9C,KAAK10C,EAAuB,YAC1B,OAAO,KAAK,kBAAkB00C,EAAM,MAAM,EAAE,oBAC1CA,EAAM,OACN,EAAA,cACJ,KAAK10C,EAAuB,iBAC1B,OAAO,KAAK,kBAAkB00C,EAAM,MAAM,EAAE,wBAC1CA,EAAM,OACN,EAAA,cACJ,KAAK10C,EAAuB,WAC1B,OAAO,KAAK,kBAAkB00C,EAAM,MAAM,EAAE,mBAC9C,KAAK10C,EAAuB,kBAC1B,OAAO,KAAK,yBAAyB00C,EAAM,MAAM,EAAE,cACrD,KAAK10C,EAAuB,SAC1B,OAAO,KAAK,kBAAkB00C,EAAM,MAAM,EAAE,cAAc,cAC5D,KAAK10C,EAAuB,kCAC1B,OAAO,KAAK,kBAAkB00C,EAAM,MAAM,EAAE,oBAC1CA,EAAM,OACN,EAAA,uCACN,CACF,CAEA,uBACE3rC,EACAurC,EACM,CACN,MAAMI,EAAQ3rC,EAAK,cAAc,IAAIurC,CAAS,EAC1CI,IAAU,QACd,KAAK,iBAAiBA,CAAK,EAAE,OAAO3rC,EAAK,MAAM,CACjD,CAEA,2BACEA,EACA2rC,EACgB,CAChB,OAAQA,EAAM,KAAM,CAClB,KAAK10C,EAAuB,OAC5B,KAAKA,EAAuB,cAC5B,KAAKA,EAAuB,UAC1B,OAAK+I,EAAK,QACH,KADmB,CAAE,QAAS9R,EAAY,mBAGnD,KAAK+I,EAAuB,IAInB,OAAA,KAET,KAAKA,EAAuB,UACnB,OAAA,KAET,KAAKA,EAAuB,aAAc,CAClC,KAAA,CAAE,OAAA1D,CAAW,EAAAo4C,EAInB,OADuB,KAAK,gBAAgB,IAAIp4C,CAAM,IAC/B,OACd,CAAE,QAASrF,EAAY,cACzB,IACT,CACA,KAAK+I,EAAuB,gBACnB,OAAA,KAET,KAAKA,EAAuB,KAAM,CAC1B,KAAA,CAAE,OAAA1D,CAAW,EAAAo4C,EACnB,OAAI3rC,EAAK,SAAWzM,GAAU,CAACyM,EAAK,QAC3B,CAAE,QAAS9R,EAAY,mBACzB,IACT,CACA,KAAK+I,EAAuB,iBAAkB,CACtC,KAAA,CAAE,OAAA1D,EAAQ,QAAApZ,CAAY,EAAAwxD,EAC5B,OAAI3rC,EAAK,SAAWzM,GAAU,CAACyM,EAAK,QAC3B,CAAE,QAAS9R,EAAY,mBACT,KAAK,kBAAkBqF,CAAM,EAChC,kBAAkBpZ,CAAO,EAEtC,KADE,CAAE,QAAS+T,EAAY,eAElC,CACA,KAAK+I,EAAuB,YAAa,CACjC,KAAA,CAAE,OAAA1D,EAAQ,QAAApZ,CAAY,EAAAwxD,EAC5B,OAAI3rC,EAAK,SAAWzM,GAAU,CAACyM,EAAK,QAC3B,CAAE,QAAS9R,EAAY,mBACT,KAAK,kBAAkBqF,CAAM,EAChC,cAAcpZ,CAAO,EAElC,KADE,CAAE,QAAS+T,EAAY,eAElC,CACA,KAAK+I,EAAuB,WAC5B,KAAKA,EAAuB,kBAC5B,KAAKA,EAAuB,SAAU,CAC9B,KAAA,CAAE,OAAA1D,CAAW,EAAAo4C,EACnB,OAAI3rC,EAAK,SAAWzM,GAAU,CAACyM,EAAK,QAC3B,CAAE,QAAS9R,EAAY,mBACzB,IACT,CACA,KAAK+I,EAAuB,kCAAmC,CACvD,KAAA,CAAE,OAAA1D,EAAQ,QAAApZ,CAAY,EAAAwxD,EAC5B,OAAI3rC,EAAK,SAAWzM,GAAU,CAACyM,EAAK,QAC3B,CAAE,QAAS9R,EAAY,mBACT,KAAK,kBAAkBqF,CAAM,EAChC,cAAcpZ,CAAO,EAElC,KADE,CAAE,QAAS+T,EAAY,eAElC,CAEF,CACF,CAEA,mBAAmB8R,EAAwB2rC,EAAiC,CAC1E,MAAMhpE,EAAM,KAAK,2BAA2Bq9B,EAAM2rC,CAAK,EACvD,GAAIhpE,IAAQ,KAAa,OAAA,KAAK,QAAQq9B,EAAMr9B,CAAG,EAW/C,OAPK,KAAA,uBAAuBq9B,EAAM2rC,EAAM,IAAI,EAEtB,KAAK,iBAAiBA,CAAK,EACnC,IAAI3rC,EAAK,OAAQA,CAAI,EACnCA,EAAK,cAAc,IAAI2rC,EAAM,KAAMA,CAAK,EAGhCA,EAAM,KAAM,CAClB,KAAK10C,EAAuB,OAAQ,CAClC,KAAK,iBAAiB+I,EAAM,CAC1B,KAAMtJ,EAAiB,sBACvB,cAAe,OAAO,YACpB,MAAM,KAAK,KAAK,gBAAgB,OAAO,EAAIqR,GAAmB,CAC5DA,EAAe,OACfA,EAAe,mBAAmB,CAAA,CACnC,CACH,EACA,QAAS,OAAO,YAAY,KAAK,UAAU,QAAQ,SAAS,EAC5D,aAAc,OAAO,YACnB,KAAK,UAAU,aAAa,QAAQ,CACtC,EACA,UAAW,OAAO,YAChB,OAAO,OAAO,KAAK,WAAW,EAAE,IAC9B,CAAC,CAAE,UAAArV,EAAW,YAAAtD,CAAA,IAAkB,CAACsD,EAAW,CAAE,YAAAtD,EAAa,CAC7D,CACF,EACA,eAAgB,KAAK,cAAA,CACtB,EACD,KACF,CACA,KAAK6H,EAAuB,cAAe,CACzC,KAAK,iBAAiB+I,EAAM,CAC1B,KAAMtJ,EAAiB,6BACvB,MAAO,CACL,gBAAiB,KAAK,gBAAgB,WAAW,EACjD,gBAAiB,KAAK,gBAAgB,WAAW,EACjD,mBAAoB,KAAK,mBAAmB,WAAW,EACvD,gBAAiB,KAAK,gBAAgB,WAAW,EACjD,mBAAoB,KAAK,mBAAmB,WAAW,EACvD,oBAAqB,KAAK,mBAAmB,kBAC7C,uBACE,KAAK,mBAAmB,qBAC1B,oBAAqB,KAAK,aAAa,MAAM,OAC7C,+BAAgC,KAAK,+BACrC,0BAA2B,KAAK,0BAChC,wBACE,KAAK,oBAAoB,iBACtB,6BAA6B,YAAY,OAC9C,oBAAqB,KAAK,gBAAgB,KAC1C,eAAgB,KAAK,eACrB,cAAe,KAAK,oBAAoB,cACxC,gBAAiB,KAAK,oBAAoB,gBAC1C,WAAY,KAAK,kBAAkB,UACrC,CAAA,CACD,EACD,KACF,CACA,KAAKO,EAAuB,UAAW,CACrC,KAAK,iBAAiB+I,EAAM,CAC1B,KAAMtJ,EAAiB,yBACvB,MAAO,CACL,MAAO,OAAO,YACZ,MAAM,KAAK,KAAK,gBAAgB,OAAO,EAAIqR,GAAmB,CAC5DA,EAAe,OACfA,EAAe,uBAAuB,CAAA,CACvC,CACH,CACF,CAAA,CACD,EACD,KACF,CACA,KAAK9Q,EAAuB,IAAK,CAC/B,KAAK,iBAAiB+I,EAAM,CAC1B,KAAMtJ,EAAiB,mBACvB,MAAO,CACL,KAAM,KAAK,mBAAmB,IAChC,CAAA,CACD,EACD,KACF,CACA,KAAKO,EAAuB,UAAW,CAChC,KAAA,YACH+I,EACA,KAAK,qBAAqB,kCAAkC,CAAA,EAE9D,KACF,CACA,KAAK/I,EAAuB,aAAc,CAClC,KAAA,CAAE,OAAA1D,CAAW,EAAAo4C,EACb5jC,EAAiB,KAAK,kBAAkBxU,CAAM,EACpD,KAAK,iBAAiByM,EAAM,CAC1B,KAAMtJ,EAAiB,4BACvB,MAAO,CACL,OAAAnD,EACA,QAASwU,EAAe,OAC1B,CAAA,CACD,EACD,KACF,CACA,KAAK9Q,EAAuB,gBAAiB,CAC3C,KAAK,iBAAiB+I,EAAM,CAC1B,KAAMtJ,EAAiB,+BACvB,eAAgB,KAAK,gBAAgB,cAAA,CACtC,EACD,KACF,CACA,KAAKO,EAAuB,KAAM,CAC1B,KAAA,CAAE,OAAA1D,CAAW,EAAAo4C,EACb5jC,EAAiB,KAAK,kBAAkBxU,CAAM,EAC9C,CACJ,YAAAnE,EACA,QAAAgH,EACA,0BAAAuH,EACA,WAAAmL,EACA,YAAAD,EACA,YAAAtT,EACA,cAAAwT,CACE,EAAAhB,EACEtS,EACJsS,EAAe,sBAAsB,oBAAoB,EACxC,OAAO,YACxB,MAAM,KAAKe,EAAW,KAAK,EAAI3uB,GAAY,CAACA,EAAS,EAAI,CAAC,CAC5D,EACA,MAAMyxD,EAAc,OAAO,YACzB,CAAC,GAAG,KAAK,UAAU,QAAQ,MAAM,EAAE,QAASzxD,GACrC0uB,EAAY,IAAI1uB,CAAO,EACrB,CAAC,CAACA,EAAS4tB,EAAe,qBAAqB5tB,CAAO,CAAC,CAAC,EADzB,EAEvC,CAAA,EAEG0xD,EAAmB,OAAO,YAC9B,CAAC,GAAG,KAAK,UAAU,aAAa,QAAA,CAAS,EAAE,QACzC,CAAC,CAACvxD,EAAiBW,CAAW,IACvB4tB,EAAY,IAAIvuB,CAAe,EAC7B,CACL,CACEA,EACAytB,EAAe,0BAA0BztB,CAAe,CAC1D,CAAA,EAL4C,EAQlD,CAAA,EAEIwxD,EACJ,OAAO,YACL,OAAO,OAAO,KAAK,WAAW,EAAE,IAC9B,CAAC,CAAE,UAAAp5C,EAAW,MAAA+W,EAAO,EAAAt9B,EAAG,EAAAC,EAAG,YAAAgjB,EAAa,WAAA6b,KAAiB,CACvD,MAAM8gC,GAAc,CAClB,UAAAr5C,EACA,MAAA+W,EACA,EAAAt9B,EACA,EAAAC,EACA,UAAWqpB,EAAiB,IAAI/C,CAAS,CAAA,EAEvC,OAAAqV,EAAe,WAAW,IAAIrV,CAAS,GACzC,OAAO,OAAOq5C,GAAa,CAAE,YAAA38C,EAAa,WAAA6b,EAAY,EACjD,CAACvY,EAAWq5C,EAAW,CAChC,CACF,CAAA,EAEE,CAAE,WAAAC,EAAY,UAAAC,GAAclkC,EAAe,aACjD,KAAK,iBAAiB/H,EAAM,CAC1B,KAAMtJ,EAAiB,oBACvB,MAAO,CACL,OAAAnD,EACA,YAAAnE,EACA,QAAAgH,EACA,0BAAAuH,EACA,cAAe,KAAK,gBAAgB,cACpC,QAASiuC,EACT,aAAcC,EACd,YAAa,OAAO,YAClB,MAAM,KAAKt2C,EAAY,UAAW,CAAC,CAACzG,EAAU3U,CAAO,IAAM,CACzD2U,EACA,CACE,SAAAA,EACA,QAAA3U,CACF,CAAA,CACD,CACH,EACA,UAAW2xD,EACX,UAAW,CACT,cAAeE,EACf,aAAcC,EAAU,MAC1B,EACA,YAAa,KAAK,WACpB,CAAA,CACD,EACD,KACF,CACA,KAAKh1C,EAAuB,iBAAkB,CACtC,KAAA,CAAE,OAAA1D,EAAQ,QAAApZ,CAAY,EAAAwxD,EAEtBO,EADiB,KAAK,kBAAkB34C,CAAM,EAEnC,wBAAwBpZ,CAAO,EAChD,KAAK,iBAAiB6lB,EAAM,CAC1B,KAAMtJ,EAAiB,gCACvB,MAAO,CACL,OAAAnD,EACA,QAAApZ,EACA,oBAAqB+xD,EAAqB,uBAAuB,EACjE,gBAAiBA,EAAqB,kBAAkB,IACtD,CAAC,CAAE,OAAA/wD,EAAQ,UAAA8hB,MAAiB,CAC1B,gBAAiB9hB,EACjB,UAAA8hB,CAAA,EAEJ,CACF,CAAA,CACD,EACD,KACF,CACA,KAAKhG,EAAuB,YAAa,CACjC,KAAA,CAAE,OAAA1D,EAAQ,QAAApZ,CAAY,EAAAwxD,EACtBzoC,EAAmB,KAAK,oBAAoB3P,EAAQpZ,CAAO,EAC/B,KAAK,kBAAkBoZ,CAAM,EAC/D,KAAK,iBAAiByM,EAAM,CAC1B,KAAMtJ,EAAiB,2BACvB,MAAO,CACL,OAAAnD,EACA,QAAApZ,EACA,gBAAiB+oB,EAAiB,gBAClC,YAAaA,EAAiB,eAAe,EAC7C,iBAAkBA,EAAiB,iBACnC,oBAAqBA,EAAiB,uBAAuB,EAC7D,WAAYA,EAAiB,yBAAyB,EACtD,OAAQA,EAAiB,aAAalD,CAAI,EAC1C,oBAAqBkD,EAAiB,qBAAqB,CAC7D,CAAA,CACD,EACD,KACF,CACA,KAAKjM,EAAuB,WAAY,CAChC,KAAA,CAAE,OAAA1D,CAAW,EAAAo4C,EACb,CAAE,gBAAA3G,CAAoB,EAAA,KAAK,kBAAkBzxC,CAAM,EACzD,KAAK,iBAAiByM,EAAM,CAC1B,KAAMtJ,EAAiB,0BACvB,MAAO,CACL,OAAAnD,EACA,MAAOyxC,EAAgB,IAAK37B,GACtBA,IAAmB,KAAa,KAC7BA,EAAe,IACvB,CACH,CAAA,CACD,EACD,KACF,CACA,KAAKpS,EAAuB,kBAAmB,CACvC,KAAA,CAAE,OAAA1D,CAAW,EAAAo4C,EACb,CAAE,YAAA37C,CAAgB,EAAA,KAAK,yBAAyBuD,CAAM,EAC5D,KAAK,iBAAiByM,EAAM,CAC1B,KAAMtJ,EAAiB,iCACvB,MAAO,CACL,OAAAnD,EACA,YAAAvD,CACF,CAAA,CACD,EACD,KACF,CACA,KAAKiH,EAAuB,SAAU,CAC9B,KAAA,CAAE,OAAA1D,CAAW,EAAAo4C,EACbtjC,EAAgB,KAAK,kBAAkB9U,CAAM,EAAE,cACrD,KAAK,iBAAiByM,EAAM,CAC1B,KAAMtJ,EAAiB,wBACvB,MAAO,CACL,OAAAnD,EACA,iBAAkB,OAAO,YACvB8U,EAAc,gBAChB,EACA,iBAAkB,OAAO,YACvBA,EAAc,gBAChB,EACA,aAAc,OAAO,YACnB,MAAM,KAAKA,EAAc,aAAetjC,GAAM,CAACA,EAAG,EAAI,CAAC,CACzD,EACA,eAAgB,OAAO,YACrB,CAAC,GAAG,KAAK,gBAAgB,OAAA,CAAQ,EAC9B,OAAO,CAAC,CAAE,cAAAsjC,KACTA,EAAc,aAAa,IAAI9U,CAAM,CAAA,EAEtC,IAAI,CAAC,CAAE,OAAAA,KAAa,CAACA,EAAQ,EAAI,CAAC,CACvC,CACF,CAAA,CACD,EACD,KACF,CACA,KAAK0D,EAAuB,kCAAmC,CACvD,KAAA,CAAE,OAAA1D,EAAQ,QAAApZ,CAAY,EAAAwxD,EACH,KAAK,oBAAoBp4C,EAAQpZ,CAAO,EACjE,KAAK,iBAAiB6lB,EAAM,CAC1B,KAAMtJ,EAAiB,iDACvB,MAAO,CACL,OAAAnD,EACA,QAAApZ,EACA,aACE,KAAK,gBAAgB,gBAAgBoZ,EAAQpZ,CAAO,GACpD,OACF,2BACE,KAAK,gBAAgB,8BAA8BA,CAAO,CAC9D,CAAA,CACD,EACD,KACF,CACF,CACF,CAEA,YAAY6lB,EAAwBnD,EAAoB,CAClD,KAAK,KAAK,gBACJ,QAAA,IACN,GAAGmD,EAAK,MAAM,MAAM,KAAK,UAAU,KAAK,MAAMnD,CAAI,EAAG,KAAM,CAAC,CAAC,EAAA,EAG5DmD,EAAA,OAAO,KAAKnD,CAAI,CACvB,CAEA,SAASmD,EAAwBnD,EAAoB,CACnD,KAAK,YAAYmD,EAAM,KAAK,UAAUnD,CAAI,CAAC,CAC7C,CAEA,iBAAiBsvC,EAAmCtvC,EAAoB,CAChE,MAAAuvC,EAAiB,KAAK,UAAUvvC,CAAI,EAC1C,UAAWmD,KAAQmsC,EACZ,KAAA,YAAYnsC,EAAMosC,CAAc,CAEzC,CAEA,iBAAiB,CAAE,MAAAX,EAAO,KAAAzrC,CAAA,EAA4Br9B,EAAc,CAClE,KAAK,SAASq9B,EAAM,CAClB,KAAM5R,GAAW,iBACjB,MAAAq9C,EACA,IAAA9oE,CAAA,CACD,CACH,CAEA,QAAQq9B,EAAwBr9B,EAAc,CAC5C,KAAK,SAASq9B,EAAM,CAClB,KAAM5R,GAAW,MACjB,IAAAzrB,CAAA,CACD,CACH,CAEA,eAAeq9B,EAAwB,CACrC,KAAK,QAAQA,EAAM,CAAE,QAAS9R,EAAY,YAAa,CACzD,CAMA,aAAa8R,EAAiC,CACxC,OAACA,EAAK,QAIH,IAHL,KAAK,QAAQA,EAAM,CAAE,QAAS9R,EAAY,kBAAmB,EACtD,GAGX,CAEA,MAAM,UAAU8R,EAAwBsrC,EAAa,CAEnD,GAAI,KAAK,UAAW,CAClBtrC,EAAK,OAAO,QACZ,MACF,CAEA,KAAK,mBAAmB,SAExB,MAAM76B,EAAM,KAAK,MAAMmmE,EAAI,SAAU,CAAA,EAErC,GAAI,OAAOnmE,GAAQ,UAAY,OAAOA,EAAI,MAAS,SAC1C,OAAA,KAAK,eAAe66B,CAAI,EAM7B,GAJA,KAAK,KAAK,gBACJ,QAAA,IAAI,GAAGA,EAAK,MAAM,MAAM,KAAK,UAAU76B,EAAK,KAAM,CAAC,CAAC,EAAE,EAG5DA,EAAI,OAASgpB,GAAU,KAAM,CACzB,KAAA,CAAE,IAAAk+C,CAAQ,EAAAlnE,EAChB,GAAI,OAAOknE,GAAQ,SAAiB,OAAA,KAAK,eAAersC,CAAI,EAE5D,KAAK,gBAAgB,SACf,MAAAssC,EACJ,KAAK,SAAS,IAAID,CAAG,GAAK,KAAK,KAAK,cAAc,OAAOA,CAAG,EAC9D,GAAIC,IAAY,KAAM,CACpB,KAAK,QAAQtsC,EAAM,CAAE,QAAS9R,EAAY,WAAY,EACtD,MACF,CACA,KAAM,CAAE,OAAAqF,EAAQ,QAAAg5C,EAAU,IAAUD,EAEpCtsC,EAAK,OAASzM,EACdyM,EAAK,QAAUusC,EAEf,MAAM5B,EAAmB,KAAK,UAAU,IAAIp3C,CAAM,EAClD,GAAIo3C,IAAqB,OAAW,CAC5B,MAAAwB,MAA2C,IAC3CA,EAAA,IAAInsC,EAAK,OAAQA,CAAI,EACtB,KAAA,UAAU,IAAIzM,EAAQ44C,CAAK,CAAA,MAEfxB,EAAA,IAAI3qC,EAAK,OAAQA,CAAI,EAGxC,GAAI,EAAE,KAAK,KAAK,aAAe,IAAQ,CACrC,MAAM+H,EAAiB,KAAK,gBAAgB,IAAIxU,CAAM,EACtD,GAAIwU,IAAmB,OAAW,CAI5B,GAAA,KAAK,gBAAgB,IAAIxU,CAAM,EAAG,OACjC,KAAA,gBAAgB,IAAIA,CAAM,EAC/B,MAAM,KAAK,mBACX,MACF,CACK,KAAA,mBAAmB,WAAWA,CAAM,EACzCwU,EAAe,gBAAgB,QACjC,CAEA,KAAK,SAAS/H,EAAM,CAClB,KAAM5R,GAAW,YAAA,CAClB,EACD,MACF,CAEA,MAAMmF,EAASyM,EAAK,OACpB,GAAIzM,IAAW,OAAW,CAGxB,KAAK,QAAQyM,EAAM,CAAE,QAAS9R,EAAY,kBAAmB,EAC7D8R,EAAK,OAAO,QACZ,MACF,CAQA,OAAQ76B,EAAI,KAAM,CAChB,KAAKgpB,GAAU,KAAM,CACnB,KAAK,SAAS6R,EAAM,CAClB,KAAM5R,GAAW,IAAA,CAClB,EACD,MACF,CACA,KAAKD,GAAU,iBAAkB,CACzB,KAAA,CAAE,MAAAs9C,EAAO,gBAAA3B,CAAoB,EAAA3kE,EACnC,GAAI,EAAE2kE,IAAoB,MAAQ,OAAOA,GAAoB,UACpD,OAAA,KAAK,eAAe9pC,CAAI,EAC7B8pC,IAAoB,KACjB,KAAA,kBAAkB,oBAAoB9pC,CAAI,EACvC,KAAA,kBAAkB,eAAeA,EAAM8pC,CAAe,EAChE,KAAK,SAAS9pC,EAAM,CAClB,KAAM5R,GAAW,qBACjB,MAAAq9C,CAAA,CACD,EACD,MACF,CACA,KAAKt9C,GAAU,aAAc,CACrB,KAAA,CAAE,MAAAqjB,CAAU,EAAArsC,EAClB,GAAI,OAAOqsC,GAAU,SAAiB,OAAA,KAAK,eAAexR,CAAI,EACxD,MAAAwsC,EAAcjC,GAAqB/4B,CAAK,EAC9C,GAAIg7B,IAAgB,KAAa,OAAA,KAAK,eAAexsC,CAAI,EACpD,KAAA,kBAAkB,eAAeA,EAAMwsC,CAAW,EACvD,KAAK,oBAAoB,SACzB,MACF,CACF,CAEA,MAAMzkC,EAAiB,KAAK,gBAAgB,IAAIxU,CAAM,EACtD,GAAIwU,IAAmB,OAAW,CAKhC,KAAK,QAAQ/H,EAAM,CAAE,QAAS9R,EAAY,kBAAmB,EAC7D8R,EAAK,OAAO,QACZ,MACF,CACA,GAAI+H,EAAe,YAAc,CAAC/H,EAAK,QAAS,CAG9C,KAAK,QAAQA,EAAM,CAAE,QAAS9R,EAAY,cAAe,EACzD8R,EAAK,OAAO,QACZ,MACF,CACA,GAAI+H,EAAe,eAAiB,CAAC/H,EAAK,QAAS,CAGjD,KAAK,QAAQA,EAAM,CAAE,QAAS9R,EAAY,kBAAmB,EAC7D8R,EAAK,OAAO,QACZ,MACF,CAEE,GAAAA,EAAK,iBAAmB,QACxB76B,EAAI,OAASgpB,GAAU,YACvBhpB,EAAI,OAASgpB,GAAU,qBACvB,CAEA,KAAK,QAAQ6R,EAAM,CAAE,QAAS9R,EAAY,gBAAiB,EAC3D,MACF,CAKA,GAHK,KAAA,mBAAmB,cAAcqF,CAAM,EAC5CwU,EAAe,mBAAmB,SAE9B,CADgB,KAAK,KAAK,WAAW5iC,CAAG,EAC1B,CAEhB,KAAK,QAAQ66B,EAAM,CAAE,QAAS9R,EAAY,YAAa,EACvD,MACF,CACA,MAAM,KAAK,aAAa8R,EAAM76B,EAAK4iC,CAAc,CACnD,CAEA,MAAM,aACJ/H,EACA76B,EACA4iC,EACA,SACA,OAAQ5iC,EAAI,KAAM,CAChB,KAAKgpB,GAAU,YAAa,CACpB,KAAA,CAAE,QAAAiI,CAAY,EAAAjxB,EACL4iC,EAAA,iBAAiB/H,EAAM5J,CAAO,EAC7C,KACF,CACA,KAAKjI,GAAU,WAAY,CACnB,KAAA,CAAE,MAAAs9C,EAAO,OAAAzsD,CAAW,EAAA7Z,EAG1B,GADI66B,EAAK,aAAe,QAAgB,KAAA,eAAeA,EAAK,UAAU,EAClEhhB,IAAW,KAGb,MAEF,MAAMgjB,EAAqC,CACzC,MAAAypC,EACA,KAAAzrC,EACA,KAAMhhB,EAAO,IAAA,EAEX,GAAAA,EAAO,iBAAmB,OAAW,CACxB+oB,EAAA,gBAAgB/F,EAAgBhjB,CAAM,EACrD,KACF,CAEI,GAAA,CAACghB,EAAK,QAAS,CACjB,KAAK,iBAAiBgC,EAAgB,CACpC,QAAS9T,EAAY,iBAAA,CACtB,EACD,KACF,CACM,MAAAu+C,EAAyB,KAAK,gBAAgB,IAClDztD,EAAO,gBAAkB,EAAA,EAG3B,GAAIytD,IAA2B,OAAW,CACxC,KAAK,iBAAiBzqC,EAAgB,CACpC,QAAS9T,EAAY,gBAAA,CACtB,EACD,KACF,CACA8R,EAAK,eAAiBhhB,EAAO,eACNytD,EAAA,gBAAgBzqC,EAAgBhjB,CAAM,EAC7D,KACF,CACA,KAAKmP,GAAU,KAAM,CACnB,MAAMuS,EAAaV,EAAK,WACxB,GAAIU,IAAe,OAAW,CAC5B,KAAK,QAAQV,EAAM,CAAE,QAAS9R,EAAY,QAAS,EACnD,MACF,CACM,KAAA,CAAE,KAAAoS,CAAS,EAAAI,EACjBJ,EAAK,QAAQ,eAEb,KAAK,WAAWI,EAAYJ,EAAMn7B,EAAI,IAAI,GACrCmhB,GAAAjF,EAAA,KAAA,MAAK,oBAAL,MAAAiF,EAAA,KAAAjF,EAAyBif,GAC9B,KACF,CACA,KAAKnS,GAAU,kBAAmB,CAC1B,KAAA,CAAE,KAAAM,EAAM,QAAAiF,CAAY,EAAAvuB,EAC1B4iC,EAAe,kBAAkBtZ,CAAI,EAAE,uBAAuBiF,CAAO,EACrE,KACF,CACA,KAAKvF,GAAU,kBAAmB,CAC1B,KAAA,CAAE,KAAA9J,CAAS,EAAAlf,EACF4iC,EAAA,sBAAsB,sBAAsB1jB,CAAI,EAC/D,KACF,CACA,KAAK8J,GAAU,YAAa,CAC1B,MAAMuS,EAAaV,EAAK,WACxB,GAAIU,IAAe,OAAW,CAC5B,KAAK,QAAQV,EAAM,CAAE,QAAS9R,EAAY,QAAS,EACnD,MACF,CAEM,KAAA,CAAE,KAAAoS,CAAS,EAAAI,EACjB,UAAWgsC,KAAcpsC,EAAK,QAAQ,OAAA,EAEhCosC,EAAW,KAAK,iBAAmB,QAClC,KAAA,SAASA,EAAW,KAAM,CAC7B,KAAMt+C,GAAW,YACjB,OAAQkS,EAAK,MAAA,CACd,EAEH,KACF,CACA,KAAKnS,GAAU,cAAe,CACtB,KAAA,CAAE,YAAAmU,EAAa,gBAAApN,CAAoB,EAAA/vB,EAEvC,GAAA,CAAC4iC,EAAe,cAAczF,CAAW,GACzC,CAACyF,EAAe,cAAc7S,CAAe,EAC7C,CACA,KAAK,QAAQ8K,EAAM,CAAE,QAAS9R,EAAY,eAAgB,EAC1D,MACF,CAEA,MAAMvrB,EAAMolC,EACT,oBAAoBzF,CAAW,EAC/B,aAAapN,CAAe,EAC3BvyB,IAAQ,MAAW,KAAA,QAAQq9B,EAAMr9B,CAAG,EACxC,KACF,CACA,KAAKwrB,GAAU,uBAAwB,CAC/B,KAAA,CAAE,QAAAhU,EAAS,KAAAsU,CAAS,EAAAtpB,EAC1B,GAAI,CAAC4iC,EAAe,cAAc5tB,CAAO,EAAG,CAC1C,KAAK,QAAQ6lB,EAAM,CAAE,QAAS9R,EAAY,eAAgB,EAC1D,MACF,CACA,GAAI,CAAC,KAAK,gBAAgBO,CAAI,EAAG,CAC/B,KAAK,QAAQuR,EAAM,CAAE,QAAS9R,EAAY,wBAAyB,EACnE,MACF,CAEA,MAAMvrB,EAAMolC,EACT,oBAAoB5tB,CAAO,EAC3B,WAAWsU,CAAI,EACd9rB,IAAQ,MAAW,KAAA,QAAQq9B,EAAMr9B,CAAG,EACxC,KACF,CACA,KAAKwrB,GAAU,gBAAiB,CAC9B,KAAM,CAAE,QAAAhU,EAAS,KAAAsU,EAAM,QAAAyb,EAAS,UAAArJ,EAAW,SAAAgD,CAAa,EAAA1+B,EACxD,GAAI,CAAC4iC,EAAe,cAAc5tB,CAAO,EAAG,CAC1C,KAAK,QAAQ6lB,EAAM,CAAE,QAAS9R,EAAY,eAAgB,EAC1D,MACF,CACA,GAAIO,IAAS,QAAa,CAAC,KAAK,gBAAgBA,CAAI,EAAG,CACrD,KAAK,QAAQuR,EAAM,CAAE,QAAS9R,EAAY,wBAAyB,EACnE,MACF,CACe6Z,EAAA,cACb/H,EACA7lB,EACAsU,EACAyb,EACArJ,EAKAb,EAAK,QAAU6D,EAAW,MAAA,EAE5B,KACF,CACA,KAAK1V,GAAU,mBAAoB,CAC3B,KAAA,CAAE,QAAAhU,EAAS,KAAAsU,CAAS,EAAAtpB,EAC1B,GAAI,CAAC4iC,EAAe,cAAc5tB,CAAO,EAAG,CAC1C,KAAK,QAAQ6lB,EAAM,CAAE,QAAS9R,EAAY,eAAgB,EAC1D,MACF,CACA,GAAI,CAAC,KAAK,gBAAgBO,CAAI,EAAG,CAC/B,KAAK,QAAQuR,EAAM,CAAE,QAAS9R,EAAY,wBAAyB,EACnE,MACF,CAEA6Z,EACG,oBAAoB5tB,CAAO,EAC3B,kBAAkB6lB,EAAMvR,CAAI,EAC/B,KACF,CACA,KAAKN,GAAU,OAAQ,CACf,KAAA,CAAE,OAAAwL,EAAQ,QAAAxf,CAAY,EAAAhV,EAC5B,GAAI,CAAC4iC,EAAe,cAAc5tB,CAAO,EAAG,CAC1C,KAAK,QAAQ6lB,EAAM,CAAE,QAAS9R,EAAY,eAAgB,EAC1D,MACF,CAEA,MAAMvrB,EAAMolC,EAAe,oBAAoB5tB,CAAO,EAAE,OAAO,EAC3DxX,IAAQ,MAAW,KAAA,QAAQq9B,EAAMr9B,CAAG,EACxC,KACF,CACA,KAAKwrB,GAAU,uBAAwB,CAC/B,MAAAxrB,EAAMolC,EAAe,cAAc,iBAAiB,EACtDplC,IAAQ,MAAW,KAAA,QAAQq9B,EAAMr9B,CAAG,EACxC,KACF,CACA,KAAKwrB,GAAU,gBAAiB,CAC9B,MAAMxrB,EAAMolC,EAAe,cAAc,iBAAiB/H,CAAI,EAC1Dr9B,IAAQ,MAAW,KAAA,QAAQq9B,EAAMr9B,CAAG,EACxC,KACF,CACA,KAAKwrB,GAAU,iBAAkB,CACzB,KAAA,CAAE,aAAA6U,EAAc,WAAAM,CAAe,EAAAn+B,EACrC,GAAIm+B,IAAe,QAAa,CAAC,KAAK,aAAatD,CAAI,EAAG,MACpD,MAAAr9B,EAAMolC,EAAe,cAAc,qBACvC/E,EACAM,CAAA,EAEE3gC,IAAQ,MAAW,KAAA,QAAQq9B,EAAMr9B,CAAG,EACxC,KACF,CACA,KAAKwrB,GAAU,mBAAoB,CAC3B,KAAA,CAAE,aAAA6U,CAAiB,EAAA79B,EACnBxC,EAAMolC,EAAe,cAAc,uBACvC/H,EACAgD,CAAA,EAEErgC,IAAQ,MAAW,KAAA,QAAQq9B,EAAMr9B,CAAG,EACxC,KACF,CACA,KAAKwrB,GAAU,mBAAoB,CAC3B,KAAA,CAAE,aAAA6U,EAAc,SAAAa,CAAa,EAAA1+B,EAC7BxC,EAAMolC,EAAe,cAAc,iBACvC/E,EAKAhD,EAAK,QAAU6D,EAAW,MAAA,EAExBlhC,IAAQ,MAAW,KAAA,QAAQq9B,EAAMr9B,CAAG,EACxC,KACF,CACA,KAAKwrB,GAAU,mBAAoB,CAC3B,KAAA,CAAE,aAAA6U,EAAc,UAAA9D,CAAc,EAAA/5B,EAC9BxC,EAAMolC,EAAe,cAAc,iBACvC/H,EACAgD,EACA9D,CAAA,EAEEv8B,IAAQ,MAAW,KAAA,QAAQq9B,EAAMr9B,CAAG,EACxC,KACF,CACA,KAAKwrB,GAAU,eAAgB,CACvB,MAAAxrB,EAAMolC,EAAe,cAAc,UAAU,EAC/CplC,IAAQ,MAAW,KAAA,QAAQq9B,EAAMr9B,CAAG,EACxC,KACF,CACA,KAAKwrB,GAAU,eAAgB,CAC7B4Z,EAAe,cAAc,YAC7B,KACF,CACA,KAAK5Z,GAAU,YAAa,CACpB,KAAA,CAAE,QAAAhU,CAAY,EAAAhV,EACpB,GAAI,CAAC,KAAK,cAAc4iC,EAAgB5tB,CAAO,EAAG,CAChD,KAAK,QAAQ6lB,EAAM,CAAE,QAAS9R,EAAY,eAAgB,EAC1D,MACF,CACe6Z,EAAA,WAAW/H,EAAM7lB,CAAO,EACvC,KACF,CACA,KAAKgU,GAAU,cAAe,CAC5B,KAAM,CAAE,OAAAoF,EAAQ,QAAApZ,EAAS,OAAAgB,CAAA,EAAWhW,EAC9B4iC,EAAiB,KAAK,kBAAkBxU,CAAM,EACpD,GAAIwU,EAAe,SAAWxU,GAAU,CAACyM,EAAK,QAAS,CACrD,KAAK,QAAQA,EAAM,CAAE,QAAS9R,EAAY,kBAAmB,EAC7D,MACF,CACA,GAAI,CAAC6Z,EAAe,kBAAkB5tB,CAAO,EAAG,CAC9C,KAAK,QAAQ6lB,EAAM,CAAE,QAAS9R,EAAY,eAAgB,EAC1D,KACF,CACA,MAAM6Z,EACH,wBAAwB5tB,CAAO,EAC/B,wBAAwB6lB,EAAM7kB,CAAM,EACvC,KACF,CACA,KAAKgT,GAAU,cAAe,CACtB,KAAA,CAAE,OAAAoF,EAAQ,WAAA+T,CAAe,EAAAniC,EACzB4iC,EAAiB,KAAK,kBAAkBxU,CAAM,EACpD,GAAIwU,EAAe,SAAWxU,GAAU,CAACyM,EAAK,QAAS,CACrD,KAAK,QAAQA,EAAM,CAAE,QAAS9R,EAAY,kBAAmB,EAC7D,MACF,CACA,GAAI,CAAC6Z,EAAe,kBAAkB3uB,EAAc,EAAG,CACrD,KAAK,QAAQ4mB,EAAM,CAAE,QAAS9R,EAAY,eAAgB,EAC1D,KACF,CAEA,MAAM6Z,EACH,wBAAwB3uB,EAAc,EACtC,mBAAmB4mB,EAAMsH,CAAU,EACtC,KACF,CACA,KAAKnZ,GAAU,aAAc,CACvB,GAAA,CAAC,KAAK,aAAa6R,CAAI,EAAG,MACnB,SAAA,CAACzM,EAAQsC,CAAQ,IAAK,OAAO,QAAQ1wB,EAAI,OAAS,CAAA,CAAE,EAC7D,MAAM,KAAK,kBAAkBouB,CAAM,EAAE,qBAAqBsC,CAAQ,EAEhE1wB,EAAI,SAAW,QAAW,OAAO,OAAO,KAAK,OAAQA,EAAI,MAAM,EACnE,KACF,CACA,KAAKgpB,GAAU,qBAAsB,CAC9B,KAAA,mBAAmB6R,EAAM76B,EAAI,KAAK,EACvC,KACF,CACF,CACF,CAMA,kBAAkBm7B,EAAYliC,EAAkB,OAC1C,GAAAkiC,EAAK,YAAY,QAAQ,SAAW,EAChC,MAAA,IAAI,MAAM,qDAAqD,EACnE,GAAA,CACGliC,UACEuE,EAAK,CACN,KAAA,CAAE,UAAAk4B,CAAU,EAAIyF,EAAK,OACnB,cAAA,MACN,iBAAiBA,EAAK,MAAM,YAC1Bjf,EAAAwZ,EAAUrB,EAAO,EAAE,EAAE,WAArB,YAAAnY,EAA+B,SAAU,SAC3C,YAAYwZ,EAAU,OAAO,GAAA,EAEzBl4B,CAAA,QACN,CACA,KAAK,iBAAiB29B,CAAI,CAC5B,CACF,CAEA,WAAWmkC,EAAoBnkC,EAAYjc,EAAkB,CACtD,KAAA,kBAAkBic,EAAM,IAAM,CAC5BA,EAAA,OAAO,UAAUmkC,EAAQpgD,CAAI,CAAA,CACnC,CACH,CAEA,eAAeic,EAAYjc,EAAwB,CAC5C,KAAA,kBAAkBic,EAAM,IAAM,CAC5BA,EAAA,OAAO,gBAAgBjc,CAAI,CAAA,CACjC,CACH,CAEA,mBAAmBic,EAAYnR,EAAmB,CAChD,OAAQA,EAAI,KAAM,CAChB,KAAKuN,EAAW,qBAAsB,CAC9B,KAAA,CAAE,cAAAkmC,EAAe,YAAArtC,CAAgB,EAAApG,EACvC,KAAK,oBAAoB,wBACvBmR,EACAsiC,EACArtC,CAAA,EAEF,KACF,CACF,CACF,CAEA,iBAAiB+K,EAAkB,CAC3B,MAAAxL,EAAOwL,EAAK,YAAY,eAAe,EAC7C,GAAIxL,EAAK,SAAW,EACpB,UAAW,CAAC63C,EAAcD,CAAU,IAAKpsC,EAAK,QAAS,CACrD,MAAMssC,EAAa,CAAA,EACnB,UAAWC,KAAW/3C,EAAM,CACpB,KAAA,CAAE,IAAA3F,CAAQ,EAAA09C,EAEZ,GAAA19C,EAAI,OAASuN,EAAW,qBAAsB,CAChDgwC,EAAW,QAAU,GACrB,QACF,CAEEA,EAAW,UACV,IAAM,CACL,OAAQG,EAAQ,KAAM,CACpB,KAAKnI,GAAwB,OACpB,MAAA,GACT,KAAKA,GAAwB,eAC3B,OAAOiI,IAAiBE,EAAQ,aAClC,KAAKnI,GAAwB,UACpB,MAAA,GACT,KAAKA,GAAwB,KACpB,OAAAgI,EAAW,OAASG,EAAQ,KACrC,KAAKnI,GAAwB,YACpB,OAAAmI,EAAQ,KAAKH,EAAW,IAAI,CACvC,CAAA,MAGFE,EAAW,KAAKz9C,CAAG,CAEvB,CACIy9C,EAAW,OAAS,GACjB,KAAA,SAASF,EAAW,KAAM,CAC7B,KAAMt+C,GAAW,QACjB,QAASw+C,CAAA,CACV,CAEL,CAGA,UAAWC,KAAW/3C,EAChB+3C,EAAQ,OAASnI,GAAwB,QACxC,KAAA,mBAAmBpkC,EAAMusC,EAAQ,GAAG,EAE7C,CAEA,iBAAiB7sC,EAAwB7Q,EAAyB,CAChE,KAAK,SAAS6Q,EAAM,CAClB,KAAM5R,GAAW,cACjB,IAAAe,CAAA,CACD,CACH,CAEA,sBAAsBw8C,EAA2Bx8C,EAAyB,CAClE,MAAAkR,EAAgB,KAAK,iBAAiBsrC,CAAK,EAC3C9uC,EAAe,CACnB,KAAMzO,GAAW,cACjB,IAAAe,CAAA,EAEF,KAAK,iBAAiBkR,EAAc,OAAO,EAAGxD,CAAI,CACpD,CAEA,2BAA2B1N,EAAyB,CAClD,OAAO,KAAK,sBACV,CACE,KAAM8H,EAAuB,MAC/B,EACA9H,CAAA,CAEJ,CAEA,kCAAkCA,EAAyB,CACzD,OAAO,KAAK,sBACV,CACE,KAAM8H,EAAuB,aAC/B,EACA9H,CAAA,CAEJ,CAEA,wBAAwBoE,EAAgBpE,EAA8B,CAG/D,KAAA,qBAAqB,WAAWoE,EAAQpE,CAAG,CAClD,CAEA,sBAAsBoE,EAAgB,CAE9B,MAAAu5C,EADiB,KAAK,kBAAkBv5C,CAAM,EACf,sBAChC,KAAA,qBAAqB,QAAQA,EAAQu5C,CAAa,EACvD,KAAK,8BAA8B,CACjC,KAAMp2C,EAAiB,uBACvB,SAAU,CAAE,CAACnD,CAAM,EAAGu5C,CAAc,CAAA,CACrC,CACH,CAEA,yBAAyBv5C,EAAgB,CAClC,KAAA,qBAAqB,WAAWA,CAAM,EAC3C,KAAK,8BAA8B,CACjC,KAAMmD,EAAiB,uBACvB,YAAa,CAAE,CAACnD,CAAM,EAAG,EAAK,CAAA,CAC/B,CACH,CAEQ,8BAA8BpE,EAAyB,CAC7D,OAAO,KAAK,sBACV,CACE,KAAM8H,EAAuB,SAC/B,EACA9H,CAAA,CAEJ,CAEQ,sCAAuC,CACvC,KAAA,CAAE,YAAA49C,CAAY,EAAI,KAAK,qBACzB,OAAO,KAAKA,CAAW,EAAE,QAAU,IACvC,KAAK,8BAA8B,CACjC,KAAMr2C,EAAiB,uBACvB,SAAUq2C,CAAA,CACX,EACI,KAAA,gBAAgB,yBAAyBA,CAAW,EACzD,KAAK,qBAAqB,aAC5B,CAEA,8BAA8B59C,EAAyB,CACrD,OAAO,KAAK,sBACV,CACE,KAAM8H,EAAuB,SAC/B,EACA9H,CAAA,CAEJ,CAEA,oBAAoBoE,EAAgBsJ,EAAoB,CACtD,MAAM8tC,EAAmB,KAAK,UAAU,IAAIp3C,CAAM,EAC9Co3C,IAAqB,QAEzB,KAAK,iBAAiBA,EAAiB,OAAO,EAAG9tC,CAAI,CACvD,CAEA,qBAAqBtJ,EAAgBy5C,EAAyB,CAC5D,KAAK,oBAAoBz5C,EAAQ,CAC/B,KAAMnF,GAAW,aACjB,MAAA4+C,CAAA,CACD,CACH,CAEA,sBAA6B,CAC3B,KACE,KAAK,aAAa,iBAAmB,KAAK,OAAO,yBACjD,CACA,MAAM3vE,EAAO,KAAK,aAAa,MAAM,MAAM,EAC3C,GAAIA,IAAS,OAAW,MACxB,KAAK,aAAa,mBACbA,GACP,CACF,CAEA,MAAc,uBAAwB,CACpC,MAAM,IAAI,QAAc,CAAC6B,EAASC,IAAW,CACtC,KAAA,aAAa,MAAM,KAAKD,CAAO,EACpC,KAAK,qBAAqB,CAAA,CAC3B,CACH,CAEQ,wBAAyB,CAC/B,KAAK,aAAa,mBAClB,KAAK,qBAAqB,CAC5B,CAEA,MAAM,yBAA4B+tE,EAAyC,CACzE,IAAIC,EAAc,GACd,GAAA,CACF,aAAM,KAAK,wBACGA,EAAA,GACP,MAAMD,EAAU,CAAA,QACvB,CAEIC,GAAa,KAAK,uBAAuB,CAC/C,CACF,CAEA,MAAM,uBAAuB/nE,EAAyB,CAC7C,OAAA,MAAM,KAAK,yBAAyB,SAClC,MAAM,KAAK,QAAQ,SAASA,CAAG,CACvC,CACH,CAEA,MAAM,8BAA8C,SAClD,GAAI,KAAK,iBAAiB,mBAAoB,OACxC,MAAAgoE,EAAyB,KAAK,gBAAgB,UAAU,EAExDC,EAAc,CAClB,eAAgBD,EAIhB,iBAAkB,KAAK,iBAAiB,eAAA,EAG1C,KAAK,iBAAiB,mBAAqB,GACrC,MAAAtwC,EAAO,MAAO,SAAY,CAC1B,GAAA,CACK,OAAA,MAAM,KAAK,uBAAuBuwC,CAAW,QAC7CzqE,EAAK,CAEZ,QAAQ,MAAMA,CAAG,CAAA,QACjB,CACA,KAAK,iBAAiB,mBAAqB,EAC7C,CAAA,KAGF,GAAIk6B,IAAS,OAAW,OAElB,KAAA,CAAE,OAAAwwC,EAAQ,gBAAAlC,CAAoB,EAAAtuC,EAE/B,KAAA,gBAAgB,QAAQswC,CAAsB,EAE/ChC,IAAoB,SACtB,KAAK,iBAAiB,gBAAkBA,GAC/B,UAAA1tD,KAAQ4vD,GAAU,GACvB,GAAA,CACF,OAAQ5vD,EAAK,KAAM,CACjB,KAAKyf,GAA4B,cAAe,CAExC,KAAA,CAAE,OAAA3J,EAAQ,QAAApZ,CAAY,EAAAsD,EAC5B,KAAK,qBAAqB8V,EAAQ,CAChC,KAAMlF,GAAqB,cAC3B,QAAAlU,CAAA,CACD,EACD,KACF,CACA,KAAK+iB,GAA4B,aAAc,CACvC,KAAA,CAAE,OAAA3J,EAAQ,QAAAoV,CAAY,EAAAlrB,GAC5B4D,EAAA,KAAK,gBAAgB,IAAIkS,CAAM,IAA/B,MAAAlS,EAAkC,iBAAiBsnB,GACnD,KACF,CACA,KAAKzL,GAA4B,QAAS,CACxC,KAAM,CAAE,UAAAgD,EAAW,OAAAH,EAAQ,UAAAK,CAAA,EAAc3iB,EACnC6vD,EACJltC,GAAa,GAAC9Z,EAAA,KAAK,OAAO4Z,CAAS,IAArB,MAAA5Z,EAAwB,WACnC,KAAA,OAAO4Z,CAAS,EAAIziB,EACzB,SAAW,CAAC8V,EAAQg6C,CAAI,IAAK,KAAK,gBAAiB,CAG7CD,IAAmB,CAACvtC,GAAUwtC,EAAK,YAAY,IAAIxtC,CAAM,IAC3D,KAAK,qBAAqBxM,EAAQ,CAChC,KAAMlF,GAAqB,OAAA,CAC5B,EACH,SAAW,CAAClU,EAASqzD,CAAM,IAAKD,EAAK,kBAC5BC,EAAA,4BAA4B,CAAA,CAAE,CACzC,CACA,KACF,CACF,QACO7qE,EAAK,CAEZ,QAAQ,MAAMA,CAAG,CACnB,CAIAk6B,EAAK,iBAAmB,QACxBA,EAAK,iBAAmB,KAAK,iBAE7B,KAAK,eAAiBA,EAAK,eAC3B,KAAK,2BAA2B,CAC9B,KAAMnG,EAAiB,uBACvB,eAAgBmG,EAAK,cAAA,CACtB,GAIG,KAAA,CAAE,MAAAiuC,CAAU,EAAAjuC,EACP,SAAA,CAACtJ,EAAQk6C,CAAU,IAAK,OAAO,QAAQ3C,GAAS,CAAA,CAAE,EACvD,GAAA,CACF,MAAM/iC,EAAiB,KAAK,gBAAgB,IAAIxU,CAAM,EAGtD,GAAIwU,IAAmB,OAAW,SAG5B,KAAA,CAAE,WAAAikC,EAAY,UAAAC,CAAc,EAAAwB,GAEhC1lC,EAAe,aAAa,aAAeikC,GAC3CjkC,EAAe,aAAa,UAAU,SAAWkkC,EAAU,UAE3DlkC,EAAe,aAAe0lC,EAE9B1lC,EAAe,0BAA0B,CACvC,KAAMrR,EAAiB,kBACvB,UAAW,CACT,cAAes1C,EACf,aAAcC,EAAU,MAC1B,CAAA,CACD,GAKG,MAAAjiC,EAAejC,EAAe,kBAC/B,KAAA,qBAAqB,WAAWxU,EAAQ,CAC3C,cAAey4C,EACf,QAAS,OAAO,YACd,OAAO,QAAQhiC,CAAY,EAAE,IAAI,CAAC,CAAC7vB,EAAS6b,CAAY,IAAM,CAC5D7b,EACA,CAAE,aAAA6b,CAAa,CAAA,CAChB,CACH,CAAA,CACD,EAKK,KAAA,CAAE,aAAA03C,CAAiB,EAAAD,EACzB,SAAW,CAACtzD,EAAS+sB,CAAe,IAAK,OAAO,QAC9CwmC,GAAgB,CAAC,CAAA,EAChB,CACK,MAAAxB,EACJnkC,EAAe,wBAAwB5tB,CAAO,EAC5C+xD,EAAqB,kBAAoBhlC,IAC3CglC,EAAqB,gBAAkBhlC,EACvCglC,EAAqB,gCAAgC,EAEzD,QACOvpE,EAAK,CAEZ,QAAQ,MAAMA,CAAG,CACnB,CAIF,UAAWolC,KAAkB,KAAK,gBAAgB,OAAA,EAC5C,GAAA,CACF,MAAM0lC,EAAa3C,EAAQA,EAAM/iC,EAAe,MAAM,EAAI,OACpD2lC,EAAeD,EAAaA,EAAW,aAAe,CAAA,EAC5D,UAAWvB,KAAwBnkC,EAAe,sBAAsB,OAAA,EAAU,CAChF,MAAM4lC,EACJD,EAAaxB,EAAqB,OAAO,GAAK,EAC5CA,EAAqB,kBAAoByB,IAC3CzB,EAAqB,gBAAkByB,EACvCzB,EAAqB,gCAAgC,EAEzD,QACOvpE,EAAK,CACZ,QAAQ,MAAMA,CAAG,CACnB,CAEJ,CAEA,MAAM,uBAAuC,CACrC,MAAA,KAAK,oBAAoB,uBAC/B,MAAM,KAAK,iBAAiB,mCAAmC,mBAAmB,iBAAiB,EACnG,MAAM,KAAK,iBAAiB,0BAA0B,mBAAmB,iBAAiB,EAC1F,MAAM,KAAK,iBAAiB,4BAA4B,mBAAmB,iBAAiB,CAC9F,CAEA,MAAc,sBAAsC,CAGlD,SAAW,CAAC4wB,EAAQwU,CAAc,IAAK,KAAK,gBACtC,GAAA,CACI,MAAAA,EAAe,iBAAiB,mBAAmB,iBAAiB,QACnEplC,EAAK,CAEZ,QAAQ,MAAMA,CAAG,CACnB,CAGE,GAAA,CACF,MAAM,KAAK,8BACJA,EAAK,CAEZ,QAAQ,MAAMA,CAAG,CACnB,CAEI,GAAA,CACF,MAAM,KAAK,qCACJA,EAAK,CAEZ,QAAQ,MAAMA,CAAG,CACnB,CACF,CAEA,kBAAyB,EAItB,SAAY,iBACP,GAAA,CAAC,KAAK,QAAS,CAEjB,MAAM,KAAK,eACX,MACF,CAEI,GAAA,CACI,MAAAirE,EAAU,KAAK,MACf,CAAE,aAAAC,EAAc,aAAAC,EAAc,eAAAC,CAAA,EAClC,KAAK,oBAEP,GACEH,EACAC,GAAgB,KAAK,KAAK,qBAAuB,GAAK,KACtD,CACA,KAAM,CAAE,KAAMG,EAAU,OAAQC,CAC9B,IAAA3nD,GAAAjF,EAAA,KAAK,MAAK,cAAV,YAAAiF,EAAA,KAAAjF,KAA6B,CAAE,KAAM,EAAG,OAAQ,CAAE,EAC9C6sD,GACHF,EAAWF,GAAgB,KAAQF,EAAUC,GAC1CM,GACHF,EAAaF,GAAkB,KAAQH,EAAUC,GACpD,KAAK,oBAAsB,CACzB,aAAcD,EACd,aAAcI,EACd,eAAgBC,EAChB,cAAAC,EACA,gBAAAC,CAAA,GAEF3nD,GAAAD,EAAA,KAAK,MAAK,aAAV,MAAAC,EAAA,KAAAD,EACE,IAAIqnD,CAAO,cAAc,KAAK,UAAU,CACtC,EACA,KAAK,gBAAgB,WAAA,EAAa,aAClC,KAAK,gBAAgB,WAAA,EAAa,aAClC,KAAK,mBAAmB,WAAA,EAAa,aACrC,KAAK,gBAAgB,WAAA,EAAa,aAClC,KAAK,mBAAmB,WAAA,EAAa,aACrC,KAAK,aAAa,MAAM,OACxB,KAAK,+BACL,KAAK,0BACL,KAAK,oBAAoB,iBACtB,6BAA6B,YAAY,OAC5C,KAAK,gBAAgB,KACrBI,EACAC,CACD,CAAA,CAAC,GAEN,QACOtrE,EAAK,CACZ,QAAQ,MAAMA,CAAG,CACnB,CAEK,KAAA,iCACD,GAAA,CACE,KAAK,oBAAoB,cAAgB,KAC3CyrE,GAAAC,EAAA,KAAK,MAAK,oBAAV,MAAAD,EAAA,KAAAC,EACE,IAAQ,IAAA,OAAO,gBAAgB,oBAAoB,KAAK,oBAAoB,iBAAkB,CAAA,WAG3F1rE,EAAK,CACZ,QAAQ,MAAMA,CAAG,CACnB,CAEA,GAAI,EAAE,KAAK,KAAK,aAAe,IAAQ,CACjC,GAAA,CACF,KAAK,kCAAkC,CACrC,KAAM+zB,EAAiB,2BACvB,gBAAiB,KAAK,gBAAgB,WAAW,EACjD,gBAAiB,KAAK,gBAAgB,WAAW,EACjD,mBAAoB,KAAK,mBAAmB,WAAW,EACvD,gBAAiB,KAAK,gBAAgB,WAAW,EACjD,mBAAoB,KAAK,mBAAmB,WAAW,EACvD,GAAG,KAAK,mBAAmB,iBAAiB,EAC5C,oBAAqB,KAAK,aAAa,MAAM,OAC7C,+BAAgC,KAAK,+BACrC,0BAA2B,KAAK,0BAChC,wBACE,KAAK,oBAAoB,iBACtB,6BAA6B,YAAY,OAC9C,oBAAqB,KAAK,gBAAgB,KAC1C,eAAgB,KAAK,eACrB,cAAe,KAAK,oBAAoB,cACxC,gBAAiB,KAAK,oBAAoB,gBAC1C,cAAe,KAAK,kBAAkB,oBAAA,CACvC,EACD,KAAK,kBAAkB,mBAChB/zB,EAAK,CAEZ,QAAQ,MAAMA,CAAG,CACnB,CAEI,GAAA,CACF,KAAK,qCAAqC,QACnCA,EAAK,CAEZ,QAAQ,MAAMA,CAAG,CACnB,CAEI,GAAA,CACI,KAAA,CAAE,YAAAoqE,CAAY,EAAI,KAAK,qBACzB,OAAO,KAAKA,CAAW,EAAE,OAAS,IACpC,KAAK,8BAA8B,CACjC,KAAMr2C,EAAiB,uBACvB,SAAUq2C,CAAA,CACX,EACD,KAAK,qBAAqB,oBAErBpqE,EAAK,CAEZ,QAAQ,MAAMA,CAAG,CACnB,CAEA,MAAM,KAAK,uBAEP,GAAA,CAMF,UAAWolC,KAAkB,KAAK,gBAAgB,OAAA,EAChDA,EAAe,cAAc,6BAExBplC,EAAK,CAEZ,QAAQ,MAAMA,CAAG,CACnB,CACF,CACK,KAAA,gCAAA,IAET,CAEA,sBAA6B,CAC3B,KAAK,gBAAgB,QACvB,CACF,CChrEA,MAAM2rE,GAAiB,GAEVC,GAAoB,aAC3BC,GAAoB,sBACpBC,GAAyB,GAwCzB3+C,GAAmB3U,GAChB,CAAC,GAAGA,EAAO,UAAU,MAAM,CAAC,EAChC,QAASpJ,GACHA,EAAE,MAAM,QAAQ,EACd,CAACA,EAAE,YAAA,CAAa,EADQ,EAEhC,EACA,KAAK,EAAE,EAGN28D,GAAkB,CACtBhzD,EACA6X,EACA9E,EACAW,IACgB,OAChB,MAAMu/C,EAAmD,CAAA,EACnDp5C,EAAc,IAAI,IAAI,OAAO,KAAK7Z,CAAO,CAAC,EAChD,SAAW,CAACoT,EAAUnT,CAAQ,IAAK,OAAO,QAAQD,CAAO,EACvD,GAAK4qB,GAA2BxX,EAAUyG,EAAa7Z,CAAO,GAC1D,IAAA2F,EAAA4kB,GAA2BnX,CAAQ,IAAnC,YAAAzN,EAAsC,cAAe,IACzD,IAAI,OAAO,KAAKstD,CAAgB,EAAE,QAAU,GAAI,MAChDA,EAAiB7/C,CAAQ,EAAI,EAGxB,MAAA,CACL,OAAAyE,EACA,KAAA9E,EACA,KAAM,CACJ,YAAAW,EACA,MAAO,CAAE,GAAGu/C,CAAiB,CAC/B,CAAA,CAEJ,EAEMC,GAAsBlzD,GACnB,CACLgzD,GAAgBhzD,EAAS6yD,GAAmB,EAAG,cAAc,EAC7DG,GAAgBhzD,EAAS6yD,GAAmB,EAAG,uBAAuB,EAEtE,CACE,OAAQA,GACR,KAAM,EACN,KAAM,CACJ,YAAa,YACb,MAAO,CAAE,WAAY,EAAG,gBAAiB,CAAE,CAC7C,CACF,CAAA,EAIEM,GAAkB,CACtBtmC,EACA7sB,EACAW,EAEAyyD,EAGAC,IACW,CACX,MAAMrvC,EAAU,IAAI,KAAK,EAAE,QAAQ,EAC7BsvC,EAGJD,GAASD,EACL,CACE,CAAC/1D,EAAc,EAAG,CAChBikB,GACEuxC,GACAx1D,GACA,IAAI,KAAK,EAAE,QAAQ,CACrB,CACF,GAEF,GACAk2D,EAAYF,GAASD,EAAcF,GAAmBlzD,CAAO,EAAI,GAEjEwzD,EAAwB37C,GACvBu7C,EAIe,OAAO,YACzB,CAAC,GAAGvmC,EAAU,aAAa,KAAM,CAAA,EAC9B,OAAQpuB,GAAY,CACf,GAAA40D,EAAc,MAAA,GAClB,MAAM/zD,EAAUutB,EAAU,QAAQ,IAAIpuB,CAAO,EAC7C,GAAIa,IAAY,OACd,MAAM,IAAI,MACR,kDAAkDb,CAAO,EAAA,EAEvD,KAAA,CAAE,aAAAg1D,EAAc,WAAA10D,CAAe,EAAAO,EAGrC,MAFI,GAAAm0D,GACA10D,GACA,CAAC3B,GAAca,EAA2B,EAAE,SAASQ,CAAO,EAEzD,CACR,EACA,IAAKA,GAAY,CAChBA,EACA,CACE,OAAAoZ,EACA,QAAApZ,EACA,UAAWulB,CACb,CAAA,CACD,CAAA,EA3BoB,GAgCrB0vC,EAA6D,CAAA,EACnE,SAAW,CAACtgD,EAAUnT,CAAQ,IAAK,OAAO,QAAQD,CAAO,EAClDozD,GACDnzD,EAAS,oBAAsB,OAEjC,CAACozD,GACD,CACE,iBACA,eACA,qBACA,aACA,WAAA,EACA,SAASjgD,CAAQ,IAGrBsgD,EAAgBtgD,CAAQ,EAAI,CAC1B,OAAQy/C,GACR,QAAS,KACT,SAAAz/C,EACA,UAAW4Q,CAAA,IAIf,MAAM/B,EAA4Bq9B,KAE5B8P,EAA0C,CAC9C,CAACyD,EAAiB,EAAG,CACnB,YAAa,aACb,WAAY,GACZ,SAAU,GACV,QAAS,KACT,0BAA2B,CAAE,GAAG5wC,CAA0B,EAC1D,kBAAmBqxC,EACnB,UAAW,CAAC,EACZ,QAASE,EAAqBX,EAAiB,EAC/C,YAAaa,EACb,MAAOH,EACP,YAAa,CACX,WAAY,CAAC,EACb,iBAAkB,CAAC,EACnB,sBACEF,GAASD,EAAc,OAAO,KAAKzyD,CAAW,EAAI,MACtD,EACA,eAAgB,CAAC,EACjB,iBAAkB,CAAC,EACnB,YAAa,CAAC,EACd,aAAc,CAAC,EACf,SAAU,EACZ,CAAA,EAGF,GAAI0yD,EAAO,CACTjE,EAAM0D,EAAiB,EAAI,CACzB,YAAa,iBACb,WAAY,GACZ,SAAU,GACV,QAAS,KACT,0BAA2B,CAAE,GAAG7wC,CAA0B,EAC1D,kBAAmB,CAAC,EACpB,UAAW,CAAC,EACZ,QAAS,CAAC,EACV,YAAa,CAAC,EACd,MAAO,CAAC,EACR,YAAa,KACb,eAAgB,CAAC,EACjB,iBAAkB,CAAC,EACnB,YAAa,CAAC,EACd,aAAc,CAAC,EACf,SAAU,EAAA,EAGZ,QAASxhC,EAAI,EAAGA,EAAI,GAAIA,IAAK,CACrB,MAAAo3B,EAAS,SAASp3B,CAAC,GACzB2uE,EAAMv3C,CAAM,EAAI,CACd,YAAa,iBAAiBp3B,CAAC,GAC/B,WAAY,GACZ,SAAU,GACV,QAAS,KACT,0BAA2B,CAAE,GAAGwhC,CAA0B,EAC1D,kBAAmB,CAAC,EACpB,UAAW,CAAC,EACZ,QAASuxC,EAAqB37C,CAAM,EACpC,YAAa,CAAC,EACd,MAAO,CAACm7C,GAAgBhzD,EAAS6X,EAAQ,EAAG,cAAc,CAAC,EAC3D,YAAa,CACX,WAAY,CAAC,EACb,iBAAkB,CAAC,EACnB,sBAAuB,OAAO,KAAKlX,CAAW,CAChD,EACA,eAAgB,CACd,CAACvD,EAAY,EAAG,CAClB,EACA,iBAAkB,CAAC,EACnB,YAAa,CAAC,EACd,aAAc,CAAC,EACf,SAAU,EAAA,CAEd,CACF,CAEO,MAAA,CACL,QAASw1D,GACT,iBAAkB,EAClB,MAAAxD,EACA,MAAO,CAAC,EACR,OAAQ,CAAC,CAAA,CAEb,EAEO,MAAMuE,EAAiD,CAa5D,YACE9mC,EACA7sB,EACAW,EACAizD,EACAC,EACAT,EACA,CAnBFj0D,EAAA,kBACAA,EAAA,mBACAA,EAAA,oBACAA,EAAA,WAEAA,EAAA,gBAKAA,EAAA,iBAUE,KAAK,UAAY0tB,EACjB,KAAK,WAAagnC,EAClB,KAAK,YAAc,EAEnB,KAAK,GACHD,IAAY,MAAQA,EAAQ,QAAUhB,GAClCO,GACEtmC,EACA7sB,EACAW,EACAyyD,GAAe,GACf,EAEF,EAAAQ,EAEN,KAAK,QAAU,GACf,KAAK,SAAW,EAClB,CAEQ,iBAAkB,CACxB,MAAMzE,EAAe,cAAc,KAAK,GAAG,gBAAgB,GAC3D,YAAK,GAAG,mBACR,KAAK,QAAU,GACRA,CACT,CAEA,MAAM,aAA+C,CAC5C,MAAA,CACL,aAAc,KAAK,gBAAgB,EACnC,MAAO,OAAO,YACZ,MAAM,QAAQ,IACZ,OAAO,KAAK,KAAK,GAAG,KAAK,EAAE,IAAKt3C,IAC7B,SAAY,CAACA,EAAQ,MAAM,KAAK,gBAAgBA,CAAM,CAAC,GAAG,CAC7D,CACF,CACF,EACA,eAAgB,CAAC,EACjB,oBAAqBk7C,GACrB,cAAe,IAAI,KAAK,KAAM,EAAG,CAAC,EAAE,QAAQ,EAC5C,YAAa,IAAI,KAAK,KAAM,GAAI,CAAC,EAAE,QAAQ,EAC3C,gBAAiB,KAAK,GAAG,OAAO,OAChC,OAAQ,CAAC,EACT,eAAgB,CAAA,CAEpB,CAEA,MAAM,gBAAgBl7C,EAAqD,CAChD,KAAK,GAAG,MAAMA,CAAM,IACpB,SAGf,QAAA,IAAI,qBAAqBA,CAAM,EAAE,EACpC,KAAA,GAAG,MAAMA,CAAM,EAAI,CACtB,YAAaA,EACb,WAAY,GACZ,SAAU,GACV,QAAS,KACT,0BAA2BynC,GAAsB,EACjD,kBAAmB,CAAC,EACpB,UAAW,CAAC,EACZ,QAAS,CAAC,EACV,YAAa,CAAC,EACd,MAAO,CAAC,EACR,YAAa,KACb,eAAgB,CAAC,EACjB,iBAAkB,CAAC,EACnB,YAAa,CAAC,EACd,aAAc,CAAC,EACf,SAAU,EAAA,GAIR,KAAA,CACJ,YAAA5rC,EACA,WAAAqO,EACA,SAAAC,EACA,QAAAtH,EACA,0BAAAuH,EACA,kBAAAE,EACA,UAAAC,EACA,QAAAxI,EACA,YAAAC,EACA,MAAAqI,EACA,YAAA5N,EACA,eAAA+N,EACA,iBAAAC,EACA,YAAAnK,EACA,aAAAoK,EACA,SAAAC,CACE,EAAA,KAAK,GAAG,MAAM3K,CAAM,EAElB0C,EAAiD,CAAA,EACvD,SAAW,CAAC9b,EAASokB,CAAW,IAAK,OAAO,QAAQV,CAAiB,EAAG,CACtE,MAAMoL,EAA2B1K,EAAY,OAC3C,CAAC,CAAE,UAAAzB,EAAU,IAAM,CAACA,EACpB,EAAA,OACEmM,EAA2B,IAC7BhT,EAAgB9b,CAAO,EAAI8uB,EAC/B,CAEA,MAAMF,EAA+C,CAAA,EAC/CI,EAA4C,CAAA,EACvC,SAAA,CAACxV,EAAQ2M,CAAI,IAAK,OAAO,QAAQ,KAAK,GAAG,KAAK,EAAG,CAC1D,KAAM,CAAE,QAAAnmB,EAAS,YAAAmoB,GAAa,YAAAktC,GAAa,SAAA3J,GAAU,SAAAC,EAAa,EAAAxlC,EASlE,GAPE,EACGulC,KAAa,QAAavlC,EAAK,WAAa/M,GAC5CuyC,KAAa,QAAaxlC,EAAK,WAAa/M,KAIjD4V,EAAM7G,EAAW,EAAIhC,EACjBkvC,KAAgB,QAAW,SACzB,KAAA,CAAE,SAAAziC,GAAU,UAAAg6B,EAAc,EAAAyI,GAC3BA,GAAY,WAEfzmC,EAAc5uB,CAAO,IAAM,QAC3B4sD,GAAYh+B,EAAc5uB,CAAO,KAEjC4uB,EAAc5uB,CAAO,EAAI4sD,GAC7B,CAEA,MAAMj+B,EAAa,OAAO,YACxB,OAAO,QAAQjL,CAAiB,EAAE,QAAQ,CAAC,CAAC1jB,EAASikB,CAAc,IAAM,CACvE,MAAMqxC,EAAqBrxC,EAAe,OACxC,CAAC,CAAE,UAAAtB,EAAA,IAAgBA,EAAA,EAErB,OAAI2yC,EAAmB,SAAW,EAAU,GACrC,CAAC,CAACt1D,EAASs1D,EAAmB,CAAC,EAAE,SAAS,CAAC,CAAA,CACnD,CAAA,EAGI,MAAA,CACL,OAAQl8C,EACR,YAAAnE,EACA,WAAAqO,EACA,SAAAC,EACA,QAAAtH,EACA,0BAAAuH,EACA,QAAS,CAAC,EACV,MAAAwL,EACA,MAAO,OAAO,KAAKrL,CAAS,EAC5B,YAAa,OAAO,YAClB,OAAO,OAAOvI,CAAW,EAAE,IAAI,CAAC,CAAE,SAAAzG,EAAU,QAAA3U,KAAc,CACxD2U,EACA3U,CAAA,CACD,CACH,EACA,YAAa,OAAO,YAClB,OAAO,OAAOmb,CAAO,EAAE,IAAI,CAAC,CAAE,QAAAnb,EAAS,UAAA8iB,KAAgB,CACrD9iB,EACA8iB,CAAA,CACD,CACH,EACA,WAAA6L,EACA,cAAAC,EACA,gBAAA9S,EACA,MAAA2H,EACA,YAAA5N,EACA,eAAA+N,EACA,iBAAAC,EACA,YAAAnK,EACA,aAAAoK,EACA,SAAAC,EACA,aAAc,CACZ,WAAY,EACZ,UAAW,CAAC,EACZ,aAAc,CAAC,CACjB,CAAA,CAEJ,CAEQ,YAAY3K,EAA4B,CAC9C,GAAI,KAAK,GAAG,MAAMA,CAAM,IAAM,OAC5B,MAAM,IAAI,MAAM,gBAAgBA,CAAM,EAAE,EACnC,OAAA,KAAK,GAAG,MAAMA,CAAM,CAC7B,CAEA,MAAM,SAASpuB,EAAyB,OAChC,KAAA,CAAE,MAAAgkC,EAAO,UAAAxT,CAAc,EAAAxwB,EAClB,SAAA,CAACouB,EAAQm8C,CAAW,IAAK,OAAO,QAAQ/5C,GAAa,CAAA,CAAE,EAAG,CAC7D,KAAA,CACJ,WAAA8H,EACA,SAAAC,EACA,YAAAtO,EACA,QAAAgH,EACA,0BAAAuH,EACA,MAAAC,EACA,YAAA5N,EACA,kBAAA6N,EACA,QAAAvI,EACA,YAAAC,EACA,UAAAuI,EACA,eAAAC,EACA,iBAAAC,EACA,YAAAnK,EACA,aAAAoK,EACA,SAAAC,CACE,EAAAwxC,EACElvC,EAAW,KAAK,YAAYjN,CAAM,EACpCkK,IAAe,SACjB+C,EAAS,WAAa/C,EACtB,KAAK,QAAU,IAEbC,IAAa,SACf8C,EAAS,SAAW9C,EACpB,KAAK,QAAU,IAEbtO,IAAgB,SAClBoR,EAAS,YAAcpR,EACvB,KAAK,QAAU,IAEbgH,IAAY,SACdoK,EAAS,QAAUpK,EACnB,KAAK,QAAU,IAEjB,SAAW,CAACiI,EAAU+O,CAAY,IAAK,OAAO,QAC5CzP,GAA6B,CAAC,CAAA,EAC7B,CACD,MAAMvH,GAAUiI,EACPmC,EAAA,0BAA0BpK,EAAO,EAAIgX,CAChD,CACA,UAAWze,KAAQ,OAAO,OAAOiP,GAAS,CAAE,CAAA,EAAG,CACvC,KAAA,CAAE,KAAAnP,CAAS,EAAAE,EACXsgD,GAAYzuC,EAAS,MACrBmvC,GAAgBV,GAAU,UAC9B,CAAC,CAAE,KAAMW,MAAmBA,KAAiBnhD,CAAA,EAE3CkhD,KAAkB,GACpBV,GAAU,KAAKtgD,CAAI,EAEnBsgD,GAAUU,EAAa,EAAIhhD,EAE7B,KAAK,QAAU,EACjB,CACIqB,IAAgB,SAClBwQ,EAAS,YAAcxQ,EACvB,KAAK,QAAU,IAEjB,SAAW,CAAC7V,EAASikB,CAAc,IAAK,OAAO,QAC7CP,GAAqB,CAAC,CAAA,EACrB,CACD,GAAIO,IAAmB,KAErBoC,EAAS,kBAAkBrmB,CAAO,EAAIqmB,EAAS,kBAC7CrmB,CACF,EAAE,OAAQktB,IAAe,CAACA,GAAW,SAAS,MACzC,EACIhmB,EAAAmf,EAAA,mBAAArmB,KAAAkH,EAAAlH,GAA+B,IACxC,UAAWktB,MAAc,OAAO,OAAOjJ,CAAc,EACnDoC,EAAS,kBAAkBrmB,CAAO,EAAE,KAAKktB,EAAU,CAEvD,CACA,KAAK,QAAU,EACjB,CACW,SAAA,CAACltB,EAASqkB,CAAM,IAAK,OAAO,QAAQlJ,GAAW,CAAA,CAAE,EACtDkJ,IAAW,KAAa,OAAAgC,EAAS,QAAQrmB,CAAO,EACtCqmB,EAAA,QAAQrmB,CAAO,EAAIqkB,EACjC,KAAK,QAAU,GAEN,SAAA,CAAC1P,EAAU4P,CAAU,IAAK,OAAO,QAAQnJ,GAAe,CAAA,CAAE,EAC/DmJ,IAAe,KAAa,OAAA8B,EAAS,YAAY1R,CAAQ,EAC/C0R,EAAA,YAAY1R,CAAQ,EAAI4P,EACtC,KAAK,QAAU,GAEN,SAAA,CAACvkB,EAAS01D,CAAQ,IAAK,OAAO,QAAQ/xC,GAAa,CAAA,CAAE,EACrD0C,EAAA,UAAUrmB,CAAO,EAAI01D,EAC9B,KAAK,QAAU,GAEN,SAAA,CAAC11D,EAASsU,CAAI,IAAK,OAAO,QAAQsP,GAAkB,CAAA,CAAE,EACtDyC,EAAA,eAAermB,CAAO,EAAIsU,EACnC,KAAK,QAAU,GAEjB,SAAW,CAACtU,EAAS0kB,CAAS,IAAK,OAAO,QACxCb,GAAoB,CAAC,CAAA,EAEjBa,IAAc,KAAa,OAAA2B,EAAS,iBAAiBrmB,CAAO,EAClDqmB,EAAA,iBAAiBrmB,CAAO,EAAI0kB,EAC1C,KAAK,QAAU,GAEjB,SAAW,CAAC1kB,EAAS21D,CAAc,IAAK,OAAO,QAC7Cj8C,GAAe,CAAC,CAAA,EAEP2M,EAAA,YAAYrmB,CAAO,EAAI21D,EAChC,KAAK,QAAU,GAEjB,SAAW,CAAC9sC,EAAc9D,CAAS,IAAK,OAAO,QAC7CjB,GAAgB,CAAC,CAAA,EAEZiB,EACSsB,EAAA,aAAawC,CAAY,EAAI,GADpB,OAAAxC,EAAS,aAAawC,CAAY,EAEzD,KAAK,QAAU,GAEb9E,IAAa,SACfsC,EAAS,SAAWtC,EACpB,KAAK,QAAU,GAEnB,CACW,SAAA,CAACvK,EAAQ2M,CAAI,IAAK,OAAO,QAAQ6I,GAAS,CAAA,CAAE,EAEhD,KAAA,GAAG,MAAMxV,CAAM,EAAI,CACtB,GAAI,KAAK,GAAG,MAAMA,CAAM,GAAK,CAAC,EAC9B,GAAG2M,CAAA,EAEL,KAAK,QAAU,GAGjB,OAAI,KAAK,SAAW,CAAC,KAAK,WACxB,KAAK,QAAU,GACf,KAAK,SAAW,GAChB,MAAM,KAAK,WAAW,KAAK,EAAE,EAAE,QAAQ,IAAM,CAC3C,KAAK,SAAW,EAAA,CACjB,GAGI,EACT,CAEA,MAAM,YACJn7B,EACiC,CACjC,KAAM,CAAE,OAAAouB,EAAQ,QAAApZ,EAAS,OAAAgB,CAAA,EAAWhW,EAC9B+V,EAAU,KAAK,UAAU,QAAQ,IAAIf,CAAO,EAClD,GAAIe,IAAY,OAAW,MAAM,IAAI,MAAM,mBAAmBf,CAAO,EAAE,EACvE,GAAIe,EAAQ,SAAW,KACrB,MAAM,IAAI,MAAM,wBAAwBf,CAAO,EAAE,EAC7C,MAAA41D,EAAmBjgD,GAAgB3U,CAAM,EACzC2hB,EAAYizC,IAAqBjgD,GAAgB5U,EAAQ,MAAM,EAGjE,OAAAf,IAAY,kBAAoB41D,IAAqB,YAChD,CACL,KAAM5yC,GAA2B,gBACjC,SAAU,CAAC,iCAAiC,CAAA,EAG5ChjB,IAAY,gBAAkB41D,IAAqB,YAC9C,CACL,KAAM5yC,GAA2B,gBACjC,SAAU,CAAC,SAAS,CAAA,EAIjB,CACL,KAAMA,GAA2B,QACjC,gBAAiB4yC,EACjB,UAAAjzC,CAAA,CAEJ,CACF,CC3pBO,MAAMkzC,EAA+D,CAC1E,OAAO3D,EAAoC,CAElC,OAAA,KAAK,MAAMA,CAAG,CACvB,CACF,CCOA,MAAM4D,GAAmB,gBAEzB,IAAIC,GACAC,GAAsB,GAE1B,MAAMC,GAAiB,MACrBxzC,EACAyzC,IACwB,CAGxB,GAFeA,MAAA,IAEXH,KAAe,QAAcG,GAAc,CAACF,GAAsB,CAEpEG,GAAY,OAAO,CACjB,OAAQA,GAAY,SAAA,CACrB,EAEGD,IACoBF,GAAA,GACtB,MAAMG,GAAY,SAGpB,MAAMC,EAAiBL,GAEjB3nC,EAAY,IAAI5tB,GAAUtL,EAAW,EACrCqM,EAAUF,GAAYjM,EAAS,EAC/B8M,EAAcF,GAAgB1M,EAAa,EACjDygE,GAAa,IAAIxF,GACfniC,EACA7sB,EACAW,EACA1M,GACA,CACE,QAAS,IAAI0/D,GACX9mC,EACA7sB,EACAW,EACA,MAAMi0D,GAAY,QAAQL,EAAgB,EAC1C,MAAOhtE,GAAO,CACN,MAAAqtE,GAAY,QAAQL,GAAkBhtE,CAAE,CAChD,EACA,CAACotE,CACH,EAGA,eAAgB,GAChB,oBAAqBzzC,EAAK,qBAAuB,GACjD,qBAAsB,IACtB,cAAe,IAAIozC,GAGnB,WAAa7qE,GAAQ,EACvB,CAAA,EAEF,MAAM+qE,GAAW,YAEbK,IAAmB,QACrBA,EAAe,SAAS,EAGtBF,IAAkCF,GAAA,GACxC,CACO,OAAAD,EACT,ECzEA,MAAMM,EAA2B,CAK/B,YAAYC,EAAmB,CAJ/B51D,EAAA,aACAA,EAAA,kBACAA,EAAA,qBAGE,KAAK,KAAO41D,CACd,CAEA,MAAO,CACA,KAAA,KAAK,UAAanF,GAAQ,CAC7B,KAAK,cAAcA,CAAG,EAAE,MAAO3oE,GAAQ,QAAQ,KAAK,CAAA,EAEtD,KAAK,KAAK,OACZ,CAEA,MAAM,WACJ+tE,EACAC,EACAC,EACA,CACA,GAAIA,GAAe,GAAO,CAIlB,MAAAR,GAAeM,EAAgB,EAAI,EACzC,MACF,CAKA,MAAMG,GAFa,MAAMT,GAAeM,CAAc,GAEnB,UACjC,CACE,KAAOpF,GAAQ,CACb,KAAK,KAAK,YAAY,CACpB,KAAM/vE,GAAqB,KAC3B,IAAA+vE,CAAA,CACD,CACH,EACA,MAAO,IAAM,CACX,KAAK,KAAK,YAAY,CACpB,KAAM/vE,GAAqB,KAAA,CAC5B,CACH,CACF,EACAo1E,CAAA,EAGF,KAAK,UAAYE,EAAgB,UACjC,KAAK,aAAeA,EAAgB,aAEpC,KAAK,KAAK,YAAY,CACpB,KAAMt1E,GAAqB,QAAA,CAC5B,CACH,CAEA,MAAM,cAAc,CAAE,KAAAkiB,GAAuC,SAC3D,OAAQA,EAAK,KAAM,CACjB,KAAKniB,GAAoB,KAAM,CAC7B,MAAM,KAAK,WACTmiB,EAAK,eACLA,EAAK,QACLA,EAAK,WAAA,EAEP,KACF,CACA,KAAKniB,GAAoB,WAAY,EAC9B+lB,EAAA,KAAA,YAAA,MAAAA,EAAA,UAAY5D,EAAK,KACtB,KACF,CACA,KAAKniB,GAAoB,cAAe,EACtCgrB,EAAA,KAAK,eAAL,MAAAA,EAAA,WACA,KACF,CACF,CACF,CACF,CAGA,UAAa5qB,GAAoB,CACR,IAAI80E,GAA2B90E,EAAE,MAAM,CAAC,CAAC,EACjD,KAAK,CACtB","x_google_ignoreList":[1,10,14]}