var Oa=Object.defineProperty;var _a=(r,e,t)=>e in r?Oa(r,e,{enumerable:!0,configurable:!0,writable:!0,value:t}):r[e]=t;var A=(r,e,t)=>(_a(r,typeof e!="symbol"?e+"":e,t),t);import{c as ot,g as Da,D as Ve,G as H,W as ue,a as z,b as je,d as lr,P as h,R as ae,e as $e,i as Ua,f as B,S as V,B as ht,h as Ma,j as La,o as Ba,k as Ga,l as et,H as tt,C as xa,m as Vt,n as za,p as Ha,q as Fa,r as Ka,s as es,t as jt,u as Xt,v as ts,w as Zt,x as Ya,y as Wa,z as Va,M as ja,N as ir,I as be,A as Ne,E as Xa,F as _s,J as It,K as Ds,L as Us,O as Ms,Q as Pt,T as ur,U as Za,V as I,X as R,Y as x,Z as se,_ as cr,$ as ce,a0 as ge,a1 as ss,a2 as Ls,a3 as qa,a4 as At,a5 as rs,a6 as $a,a7 as Ja,a8 as Qa,a9 as en,aa as tn,ab as fr,ac as sn,ad as rn,ae as an,af as nn,ag as on,ah as W,ai as Ot,aj as Re,ak as lt,al as ln,am as Bs,an as _t,ao as un,ap as dr,aq as cn,ar as fn,as as dn,at as mn,au as hn,av as pn,aw as gn,ax as En,ay as Gs,az as An,aA as Tn,aB as yn,aC as De,aD as Sn,aE as xs,aF as wn,aG as bn,aH as kn,aI as zs,aJ as it,aK as Rn,aL as vn,aM as Cn,aN as Nn,aO as In,aP as Pn,aQ as Q,aR as Dt,aS as On,aT as _n,aU as Dn,aV as Un,aW as Mn,aX as Ln,aY as Bn,aZ as Gn}from"./main.js";import{C as Je}from"./presence-fd0463a1.js";class xn{constructor(e,t){A(this,"gameServer");A(this,"callbacks");A(this,"connUid");A(this,"handleMsg");A(this,"disconnect");A(this,"isClosed");this.gameServer=e,this.connUid=t,this.handleMsg=s=>{throw new Error("connection not initialized yet")},this.disconnect=()=>{throw new Error("connection not initialized yet")},this.isClosed=!1}init(e){this.callbacks=e,this.connect()}connect(){if(this.callbacks===void 0)throw new Error("expect callbacks to be defined");const{onOpen:e,onResp:t,afterDisconnect:s}=this.callbacks,{handleMsg:a,removeClient:n}=this.gameServer.addClient({send:o=>{this.isClosed||Promise.resolve().then(()=>{t(o)})},close:()=>{this.close()}},this.connUid);this.handleMsg=a,this.disconnect=()=>{n(),s({numReconnections:0,reconnectDelayInSeconds:0})},e()}send(e){Promise.resolve().then(()=>{this.handleMsg(e)})}reconnect(){this.disconnect(),this.connect()}close(){this.disconnect(),this.isClosed=!0}}function ut(r){throw new Error('Could not dynamically require "'+r+'". Please configure the dynamicRequireTargets or/and ignoreDynamicRequires option of @rollup/plugin-commonjs appropriately for this require call to work.')}var mr={exports:{}};/*!
    localForage -- Offline Storage, Improved
    Version 1.10.0
    https://localforage.github.io/localForage
    (c) 2013-2017 Mozilla, Apache License 2.0
*/(function(r,e){(function(t){r.exports=t()})(function(){return function t(s,a,n){function o(c,u){if(!a[c]){if(!s[c]){var f=typeof ut=="function"&&ut;if(!u&&f)return f(c,!0);if(l)return l(c,!0);var g=new Error("Cannot find module '"+c+"'");throw g.code="MODULE_NOT_FOUND",g}var k=a[c]={exports:{}};s[c][0].call(k.exports,function(E){var S=s[c][1][E];return o(S||E)},k,k.exports,t,s,a,n)}return a[c].exports}for(var l=typeof ut=="function"&&ut,i=0;i<n.length;i++)o(n[i]);return o}({1:[function(t,s,a){(function(n){var o=n.MutationObserver||n.WebKitMutationObserver,l;if(o){var i=0,c=new o(E),u=n.document.createTextNode("");c.observe(u,{characterData:!0}),l=function(){u.data=i=++i%2}}else if(!n.setImmediate&&typeof n.MessageChannel<"u"){var f=new n.MessageChannel;f.port1.onmessage=E,l=function(){f.port2.postMessage(0)}}else"document"in n&&"onreadystatechange"in n.document.createElement("script")?l=function(){var v=n.document.createElement("script");v.onreadystatechange=function(){E(),v.onreadystatechange=null,v.parentNode.removeChild(v),v=null},n.document.documentElement.appendChild(v)}:l=function(){setTimeout(E,0)};var g,k=[];function E(){g=!0;for(var v,_,y=k.length;y;){for(_=k,k=[],v=-1;++v<y;)_[v]();y=k.length}g=!1}s.exports=S;function S(v){k.push(v)===1&&!g&&l()}}).call(this,typeof ot<"u"?ot:typeof self<"u"?self:typeof window<"u"?window:{})},{}],2:[function(t,s,a){var n=t(1);function o(){}var l={},i=["REJECTED"],c=["FULFILLED"],u=["PENDING"];s.exports=f;function f(O){if(typeof O!="function")throw new TypeError("resolver must be a function");this.state=u,this.queue=[],this.outcome=void 0,O!==o&&S(this,O)}f.prototype.catch=function(O){return this.then(null,O)},f.prototype.then=function(O,F){if(typeof O!="function"&&this.state===c||typeof F!="function"&&this.state===i)return this;var K=new this.constructor(o);if(this.state!==u){var q=this.state===c?O:F;k(K,q,this.outcome)}else this.queue.push(new g(K,O,F));return K};function g(O,F,K){this.promise=O,typeof F=="function"&&(this.onFulfilled=F,this.callFulfilled=this.otherCallFulfilled),typeof K=="function"&&(this.onRejected=K,this.callRejected=this.otherCallRejected)}g.prototype.callFulfilled=function(O){l.resolve(this.promise,O)},g.prototype.otherCallFulfilled=function(O){k(this.promise,this.onFulfilled,O)},g.prototype.callRejected=function(O){l.reject(this.promise,O)},g.prototype.otherCallRejected=function(O){k(this.promise,this.onRejected,O)};function k(O,F,K){n(function(){var q;try{q=F(K)}catch(Y){return l.reject(O,Y)}q===O?l.reject(O,new TypeError("Cannot resolve promise with itself")):l.resolve(O,q)})}l.resolve=function(O,F){var K=v(E,F);if(K.status==="error")return l.reject(O,K.value);var q=K.value;if(q)S(O,q);else{O.state=c,O.outcome=F;for(var Y=-1,te=O.queue.length;++Y<te;)O.queue[Y].callFulfilled(F)}return O},l.reject=function(O,F){O.state=i,O.outcome=F;for(var K=-1,q=O.queue.length;++K<q;)O.queue[K].callRejected(F);return O};function E(O){var F=O&&O.then;if(O&&(typeof O=="object"||typeof O=="function")&&typeof F=="function")return function(){F.apply(O,arguments)}}function S(O,F){var K=!1;function q(Z){K||(K=!0,l.reject(O,Z))}function Y(Z){K||(K=!0,l.resolve(O,Z))}function te(){F(Y,q)}var $=v(te);$.status==="error"&&q($.value)}function v(O,F){var K={};try{K.value=O(F),K.status="success"}catch(q){K.status="error",K.value=q}return K}f.resolve=_;function _(O){return O instanceof this?O:l.resolve(new this(o),O)}f.reject=y;function y(O){var F=new this(o);return l.reject(F,O)}f.all=N;function N(O){var F=this;if(Object.prototype.toString.call(O)!=="[object Array]")return this.reject(new TypeError("must be an array"));var K=O.length,q=!1;if(!K)return this.resolve([]);for(var Y=new Array(K),te=0,$=-1,Z=new this(o);++$<K;)fe(O[$],$);return Z;function fe(Ee,Pe){F.resolve(Ee).then(Oe,function(ye){q||(q=!0,l.reject(Z,ye))});function Oe(ye){Y[Pe]=ye,++te===K&&!q&&(q=!0,l.resolve(Z,Y))}}}f.race=C;function C(O){var F=this;if(Object.prototype.toString.call(O)!=="[object Array]")return this.reject(new TypeError("must be an array"));var K=O.length,q=!1;if(!K)return this.resolve([]);for(var Y=-1,te=new this(o);++Y<K;)$(O[Y]);return te;function $(Z){F.resolve(Z).then(function(fe){q||(q=!0,l.resolve(te,fe))},function(fe){q||(q=!0,l.reject(te,fe))})}}},{1:1}],3:[function(t,s,a){(function(n){typeof n.Promise!="function"&&(n.Promise=t(2))}).call(this,typeof ot<"u"?ot:typeof self<"u"?self:typeof window<"u"?window:{})},{2:2}],4:[function(t,s,a){var n=typeof Symbol=="function"&&typeof Symbol.iterator=="symbol"?function(d){return typeof d}:function(d){return d&&typeof Symbol=="function"&&d.constructor===Symbol&&d!==Symbol.prototype?"symbol":typeof d};function o(d,p){if(!(d instanceof p))throw new TypeError("Cannot call a class as a function")}function l(){try{if(typeof indexedDB<"u")return indexedDB;if(typeof webkitIndexedDB<"u")return webkitIndexedDB;if(typeof mozIndexedDB<"u")return mozIndexedDB;if(typeof OIndexedDB<"u")return OIndexedDB;if(typeof msIndexedDB<"u")return msIndexedDB}catch{return}}var i=l();function c(){try{if(!i||!i.open)return!1;var d=typeof openDatabase<"u"&&/(Safari|iPhone|iPad|iPod)/.test(navigator.userAgent)&&!/Chrome/.test(navigator.userAgent)&&!/BlackBerry/.test(navigator.platform),p=typeof fetch=="function"&&fetch.toString().indexOf("[native code")!==-1;return(!d||p)&&typeof indexedDB<"u"&&typeof IDBKeyRange<"u"}catch{return!1}}function u(d,p){d=d||[],p=p||{};try{return new Blob(d,p)}catch(T){if(T.name!=="TypeError")throw T;for(var m=typeof BlobBuilder<"u"?BlobBuilder:typeof MSBlobBuilder<"u"?MSBlobBuilder:typeof MozBlobBuilder<"u"?MozBlobBuilder:WebKitBlobBuilder,w=new m,b=0;b<d.length;b+=1)w.append(d[b]);return w.getBlob(p.type)}}typeof Promise>"u"&&t(3);var f=Promise;function g(d,p){p&&d.then(function(m){p(null,m)},function(m){p(m)})}function k(d,p,m){typeof p=="function"&&d.then(p),typeof m=="function"&&d.catch(m)}function E(d){return typeof d!="string"&&(console.warn(d+" used as a key, but it is not a string."),d=String(d)),d}function S(){if(arguments.length&&typeof arguments[arguments.length-1]=="function")return arguments[arguments.length-1]}var v="local-forage-detect-blob-support",_=void 0,y={},N=Object.prototype.toString,C="readonly",O="readwrite";function F(d){for(var p=d.length,m=new ArrayBuffer(p),w=new Uint8Array(m),b=0;b<p;b++)w[b]=d.charCodeAt(b);return m}function K(d){return new f(function(p){var m=d.transaction(v,O),w=u([""]);m.objectStore(v).put(w,"key"),m.onabort=function(b){b.preventDefault(),b.stopPropagation(),p(!1)},m.oncomplete=function(){var b=navigator.userAgent.match(/Chrome\/(\d+)/),T=navigator.userAgent.match(/Edge\//);p(T||!b||parseInt(b[1],10)>=43)}}).catch(function(){return!1})}function q(d){return typeof _=="boolean"?f.resolve(_):K(d).then(function(p){return _=p,_})}function Y(d){var p=y[d.name],m={};m.promise=new f(function(w,b){m.resolve=w,m.reject=b}),p.deferredOperations.push(m),p.dbReady?p.dbReady=p.dbReady.then(function(){return m.promise}):p.dbReady=m.promise}function te(d){var p=y[d.name],m=p.deferredOperations.pop();if(m)return m.resolve(),m.promise}function $(d,p){var m=y[d.name],w=m.deferredOperations.pop();if(w)return w.reject(p),w.promise}function Z(d,p){return new f(function(m,w){if(y[d.name]=y[d.name]||ds(),d.db)if(p)Y(d),d.db.close();else return m(d.db);var b=[d.name];p&&b.push(d.version);var T=i.open.apply(i,b);p&&(T.onupgradeneeded=function(P){var D=T.result;try{D.createObjectStore(d.storeName),P.oldVersion<=1&&D.createObjectStore(v)}catch(U){if(U.name==="ConstraintError")console.warn('The database "'+d.name+'" has been upgraded from version '+P.oldVersion+" to version "+P.newVersion+', but the storage "'+d.storeName+'" already exists.');else throw U}}),T.onerror=function(P){P.preventDefault(),w(T.error)},T.onsuccess=function(){var P=T.result;P.onversionchange=function(D){D.target.close()},m(P),te(d)}})}function fe(d){return Z(d,!1)}function Ee(d){return Z(d,!0)}function Pe(d,p){if(!d.db)return!0;var m=!d.db.objectStoreNames.contains(d.storeName),w=d.version<d.db.version,b=d.version>d.db.version;if(w&&(d.version!==p&&console.warn('The database "'+d.name+`" can't be downgraded from version `+d.db.version+" to version "+d.version+"."),d.version=d.db.version),b||m){if(m){var T=d.db.version+1;T>d.version&&(d.version=T)}return!0}return!1}function Oe(d){return new f(function(p,m){var w=new FileReader;w.onerror=m,w.onloadend=function(b){var T=btoa(b.target.result||"");p({__local_forage_encoded_blob:!0,data:T,type:d.type})},w.readAsBinaryString(d)})}function ye(d){var p=F(atob(d.data));return u([p],{type:d.type})}function rt(d){return d&&d.__local_forage_encoded_blob}function _r(d){var p=this,m=p._initReady().then(function(){var w=y[p._dbInfo.name];if(w&&w.dbReady)return w.dbReady});return k(m,d,d),m}function Dr(d){Y(d);for(var p=y[d.name],m=p.forages,w=0;w<m.length;w++){var b=m[w];b._dbInfo.db&&(b._dbInfo.db.close(),b._dbInfo.db=null)}return d.db=null,fe(d).then(function(T){return d.db=T,Pe(d)?Ee(d):T}).then(function(T){d.db=p.db=T;for(var P=0;P<m.length;P++)m[P]._dbInfo.db=T}).catch(function(T){throw $(d,T),T})}function Ae(d,p,m,w){w===void 0&&(w=1);try{var b=d.db.transaction(d.storeName,p);m(null,b)}catch(T){if(w>0&&(!d.db||T.name==="InvalidStateError"||T.name==="NotFoundError"))return f.resolve().then(function(){if(!d.db||T.name==="NotFoundError"&&!d.db.objectStoreNames.contains(d.storeName)&&d.version<=d.db.version)return d.db&&(d.version=d.db.version+1),Ee(d)}).then(function(){return Dr(d).then(function(){Ae(d,p,m,w-1)})}).catch(m);m(T)}}function ds(){return{forages:[],db:null,dbReady:null,deferredOperations:[]}}function Ur(d){var p=this,m={db:null};if(d)for(var w in d)m[w]=d[w];var b=y[m.name];b||(b=ds(),y[m.name]=b),b.forages.push(p),p._initReady||(p._initReady=p.ready,p.ready=_r);var T=[];function P(){return f.resolve()}for(var D=0;D<b.forages.length;D++){var U=b.forages[D];U!==p&&T.push(U._initReady().catch(P))}var M=b.forages.slice(0);return f.all(T).then(function(){return m.db=b.db,fe(m)}).then(function(L){return m.db=L,Pe(m,p._defaultConfig.version)?Ee(m):L}).then(function(L){m.db=b.db=L,p._dbInfo=m;for(var G=0;G<M.length;G++){var j=M[G];j!==p&&(j._dbInfo.db=m.db,j._dbInfo.version=m.version)}})}function Mr(d,p){var m=this;d=E(d);var w=new f(function(b,T){m.ready().then(function(){Ae(m._dbInfo,C,function(P,D){if(P)return T(P);try{var U=D.objectStore(m._dbInfo.storeName),M=U.get(d);M.onsuccess=function(){var L=M.result;L===void 0&&(L=null),rt(L)&&(L=ye(L)),b(L)},M.onerror=function(){T(M.error)}}catch(L){T(L)}})}).catch(T)});return g(w,p),w}function Lr(d,p){var m=this,w=new f(function(b,T){m.ready().then(function(){Ae(m._dbInfo,C,function(P,D){if(P)return T(P);try{var U=D.objectStore(m._dbInfo.storeName),M=U.openCursor(),L=1;M.onsuccess=function(){var G=M.result;if(G){var j=G.value;rt(j)&&(j=ye(j));var J=d(j,G.key,L++);J!==void 0?b(J):G.continue()}else b()},M.onerror=function(){T(M.error)}}catch(G){T(G)}})}).catch(T)});return g(w,p),w}function Br(d,p,m){var w=this;d=E(d);var b=new f(function(T,P){var D;w.ready().then(function(){return D=w._dbInfo,N.call(p)==="[object Blob]"?q(D.db).then(function(U){return U?p:Oe(p)}):p}).then(function(U){Ae(w._dbInfo,O,function(M,L){if(M)return P(M);try{var G=L.objectStore(w._dbInfo.storeName);U===null&&(U=void 0);var j=G.put(U,d);L.oncomplete=function(){U===void 0&&(U=null),T(U)},L.onabort=L.onerror=function(){var J=j.error?j.error:j.transaction.error;P(J)}}catch(J){P(J)}})}).catch(P)});return g(b,m),b}function Gr(d,p){var m=this;d=E(d);var w=new f(function(b,T){m.ready().then(function(){Ae(m._dbInfo,O,function(P,D){if(P)return T(P);try{var U=D.objectStore(m._dbInfo.storeName),M=U.delete(d);D.oncomplete=function(){b()},D.onerror=function(){T(M.error)},D.onabort=function(){var L=M.error?M.error:M.transaction.error;T(L)}}catch(L){T(L)}})}).catch(T)});return g(w,p),w}function xr(d){var p=this,m=new f(function(w,b){p.ready().then(function(){Ae(p._dbInfo,O,function(T,P){if(T)return b(T);try{var D=P.objectStore(p._dbInfo.storeName),U=D.clear();P.oncomplete=function(){w()},P.onabort=P.onerror=function(){var M=U.error?U.error:U.transaction.error;b(M)}}catch(M){b(M)}})}).catch(b)});return g(m,d),m}function zr(d){var p=this,m=new f(function(w,b){p.ready().then(function(){Ae(p._dbInfo,C,function(T,P){if(T)return b(T);try{var D=P.objectStore(p._dbInfo.storeName),U=D.count();U.onsuccess=function(){w(U.result)},U.onerror=function(){b(U.error)}}catch(M){b(M)}})}).catch(b)});return g(m,d),m}function Hr(d,p){var m=this,w=new f(function(b,T){if(d<0){b(null);return}m.ready().then(function(){Ae(m._dbInfo,C,function(P,D){if(P)return T(P);try{var U=D.objectStore(m._dbInfo.storeName),M=!1,L=U.openKeyCursor();L.onsuccess=function(){var G=L.result;if(!G){b(null);return}d===0||M?b(G.key):(M=!0,G.advance(d))},L.onerror=function(){T(L.error)}}catch(G){T(G)}})}).catch(T)});return g(w,p),w}function Fr(d){var p=this,m=new f(function(w,b){p.ready().then(function(){Ae(p._dbInfo,C,function(T,P){if(T)return b(T);try{var D=P.objectStore(p._dbInfo.storeName),U=D.openKeyCursor(),M=[];U.onsuccess=function(){var L=U.result;if(!L){w(M);return}M.push(L.key),L.continue()},U.onerror=function(){b(U.error)}}catch(L){b(L)}})}).catch(b)});return g(m,d),m}function Kr(d,p){p=S.apply(this,arguments);var m=this.config();d=typeof d!="function"&&d||{},d.name||(d.name=d.name||m.name,d.storeName=d.storeName||m.storeName);var w=this,b;if(!d.name)b=f.reject("Invalid arguments");else{var T=d.name===m.name&&w._dbInfo.db,P=T?f.resolve(w._dbInfo.db):fe(d).then(function(D){var U=y[d.name],M=U.forages;U.db=D;for(var L=0;L<M.length;L++)M[L]._dbInfo.db=D;return D});d.storeName?b=P.then(function(D){if(D.objectStoreNames.contains(d.storeName)){var U=D.version+1;Y(d);var M=y[d.name],L=M.forages;D.close();for(var G=0;G<L.length;G++){var j=L[G];j._dbInfo.db=null,j._dbInfo.version=U}var J=new f(function(ee,oe){var ne=i.open(d.name,U);ne.onerror=function(he){var Fe=ne.result;Fe.close(),oe(he)},ne.onupgradeneeded=function(){var he=ne.result;he.deleteObjectStore(d.storeName)},ne.onsuccess=function(){var he=ne.result;he.close(),ee(he)}});return J.then(function(ee){M.db=ee;for(var oe=0;oe<L.length;oe++){var ne=L[oe];ne._dbInfo.db=ee,te(ne._dbInfo)}}).catch(function(ee){throw($(d,ee)||f.resolve()).catch(function(){}),ee})}}):b=P.then(function(D){Y(d);var U=y[d.name],M=U.forages;D.close();for(var L=0;L<M.length;L++){var G=M[L];G._dbInfo.db=null}var j=new f(function(J,ee){var oe=i.deleteDatabase(d.name);oe.onerror=function(){var ne=oe.result;ne&&ne.close(),ee(oe.error)},oe.onblocked=function(){console.warn('dropInstance blocked for database "'+d.name+'" until all open connections are closed')},oe.onsuccess=function(){var ne=oe.result;ne&&ne.close(),J(ne)}});return j.then(function(J){U.db=J;for(var ee=0;ee<M.length;ee++){var oe=M[ee];te(oe._dbInfo)}}).catch(function(J){throw($(d,J)||f.resolve()).catch(function(){}),J})})}return g(b,p),b}var Yr={_driver:"asyncStorage",_initStorage:Ur,_support:c(),iterate:Lr,getItem:Mr,setItem:Br,removeItem:Gr,clear:xr,length:zr,key:Hr,keys:Fr,dropInstance:Kr};function Wr(){return typeof openDatabase=="function"}var Se="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",Vr="~~local_forage_type~",ms=/^~~local_forage_type~([^~]+)~/,at="__lfsc__:",yt=at.length,St="arbf",wt="blob",hs="si08",ps="ui08",gs="uic8",Es="si16",As="si32",Ts="ur16",ys="ui32",Ss="fl32",ws="fl64",bs=yt+St.length,ks=Object.prototype.toString;function Rs(d){var p=d.length*.75,m=d.length,w,b=0,T,P,D,U;d[d.length-1]==="="&&(p--,d[d.length-2]==="="&&p--);var M=new ArrayBuffer(p),L=new Uint8Array(M);for(w=0;w<m;w+=4)T=Se.indexOf(d[w]),P=Se.indexOf(d[w+1]),D=Se.indexOf(d[w+2]),U=Se.indexOf(d[w+3]),L[b++]=T<<2|P>>4,L[b++]=(P&15)<<4|D>>2,L[b++]=(D&3)<<6|U&63;return M}function bt(d){var p=new Uint8Array(d),m="",w;for(w=0;w<p.length;w+=3)m+=Se[p[w]>>2],m+=Se[(p[w]&3)<<4|p[w+1]>>4],m+=Se[(p[w+1]&15)<<2|p[w+2]>>6],m+=Se[p[w+2]&63];return p.length%3===2?m=m.substring(0,m.length-1)+"=":p.length%3===1&&(m=m.substring(0,m.length-2)+"=="),m}function jr(d,p){var m="";if(d&&(m=ks.call(d)),d&&(m==="[object ArrayBuffer]"||d.buffer&&ks.call(d.buffer)==="[object ArrayBuffer]")){var w,b=at;d instanceof ArrayBuffer?(w=d,b+=St):(w=d.buffer,m==="[object Int8Array]"?b+=hs:m==="[object Uint8Array]"?b+=ps:m==="[object Uint8ClampedArray]"?b+=gs:m==="[object Int16Array]"?b+=Es:m==="[object Uint16Array]"?b+=Ts:m==="[object Int32Array]"?b+=As:m==="[object Uint32Array]"?b+=ys:m==="[object Float32Array]"?b+=Ss:m==="[object Float64Array]"?b+=ws:p(new Error("Failed to get type for BinaryArray"))),p(b+bt(w))}else if(m==="[object Blob]"){var T=new FileReader;T.onload=function(){var P=Vr+d.type+"~"+bt(this.result);p(at+wt+P)},T.readAsArrayBuffer(d)}else try{p(JSON.stringify(d))}catch(P){console.error("Couldn't convert value into a JSON string: ",d),p(null,P)}}function Xr(d){if(d.substring(0,yt)!==at)return JSON.parse(d);var p=d.substring(bs),m=d.substring(yt,bs),w;if(m===wt&&ms.test(p)){var b=p.match(ms);w=b[1],p=p.substring(b[0].length)}var T=Rs(p);switch(m){case St:return T;case wt:return u([T],{type:w});case hs:return new Int8Array(T);case ps:return new Uint8Array(T);case gs:return new Uint8ClampedArray(T);case Es:return new Int16Array(T);case Ts:return new Uint16Array(T);case As:return new Int32Array(T);case ys:return new Uint32Array(T);case Ss:return new Float32Array(T);case ws:return new Float64Array(T);default:throw new Error("Unkown type: "+m)}}var kt={serialize:jr,deserialize:Xr,stringToBuffer:Rs,bufferToString:bt};function vs(d,p,m,w){d.executeSql("CREATE TABLE IF NOT EXISTS "+p.storeName+" (id INTEGER PRIMARY KEY, key unique, value)",[],m,w)}function Zr(d){var p=this,m={db:null};if(d)for(var w in d)m[w]=typeof d[w]!="string"?d[w].toString():d[w];var b=new f(function(T,P){try{m.db=openDatabase(m.name,String(m.version),m.description,m.size)}catch(D){return P(D)}m.db.transaction(function(D){vs(D,m,function(){p._dbInfo=m,T()},function(U,M){P(M)})},P)});return m.serializer=kt,b}function we(d,p,m,w,b,T){d.executeSql(m,w,b,function(P,D){D.code===D.SYNTAX_ERR?P.executeSql("SELECT name FROM sqlite_master WHERE type='table' AND name = ?",[p.storeName],function(U,M){M.rows.length?T(U,D):vs(U,p,function(){U.executeSql(m,w,b,T)},T)},T):T(P,D)},T)}function qr(d,p){var m=this;d=E(d);var w=new f(function(b,T){m.ready().then(function(){var P=m._dbInfo;P.db.transaction(function(D){we(D,P,"SELECT * FROM "+P.storeName+" WHERE key = ? LIMIT 1",[d],function(U,M){var L=M.rows.length?M.rows.item(0).value:null;L&&(L=P.serializer.deserialize(L)),b(L)},function(U,M){T(M)})})}).catch(T)});return g(w,p),w}function $r(d,p){var m=this,w=new f(function(b,T){m.ready().then(function(){var P=m._dbInfo;P.db.transaction(function(D){we(D,P,"SELECT * FROM "+P.storeName,[],function(U,M){for(var L=M.rows,G=L.length,j=0;j<G;j++){var J=L.item(j),ee=J.value;if(ee&&(ee=P.serializer.deserialize(ee)),ee=d(ee,J.key,j+1),ee!==void 0){b(ee);return}}b()},function(U,M){T(M)})})}).catch(T)});return g(w,p),w}function Cs(d,p,m,w){var b=this;d=E(d);var T=new f(function(P,D){b.ready().then(function(){p===void 0&&(p=null);var U=p,M=b._dbInfo;M.serializer.serialize(p,function(L,G){G?D(G):M.db.transaction(function(j){we(j,M,"INSERT OR REPLACE INTO "+M.storeName+" (key, value) VALUES (?, ?)",[d,L],function(){P(U)},function(J,ee){D(ee)})},function(j){if(j.code===j.QUOTA_ERR){if(w>0){P(Cs.apply(b,[d,U,m,w-1]));return}D(j)}})})}).catch(D)});return g(T,m),T}function Jr(d,p,m){return Cs.apply(this,[d,p,m,1])}function Qr(d,p){var m=this;d=E(d);var w=new f(function(b,T){m.ready().then(function(){var P=m._dbInfo;P.db.transaction(function(D){we(D,P,"DELETE FROM "+P.storeName+" WHERE key = ?",[d],function(){b()},function(U,M){T(M)})})}).catch(T)});return g(w,p),w}function ea(d){var p=this,m=new f(function(w,b){p.ready().then(function(){var T=p._dbInfo;T.db.transaction(function(P){we(P,T,"DELETE FROM "+T.storeName,[],function(){w()},function(D,U){b(U)})})}).catch(b)});return g(m,d),m}function ta(d){var p=this,m=new f(function(w,b){p.ready().then(function(){var T=p._dbInfo;T.db.transaction(function(P){we(P,T,"SELECT COUNT(key) as c FROM "+T.storeName,[],function(D,U){var M=U.rows.item(0).c;w(M)},function(D,U){b(U)})})}).catch(b)});return g(m,d),m}function sa(d,p){var m=this,w=new f(function(b,T){m.ready().then(function(){var P=m._dbInfo;P.db.transaction(function(D){we(D,P,"SELECT key FROM "+P.storeName+" WHERE id = ? LIMIT 1",[d+1],function(U,M){var L=M.rows.length?M.rows.item(0).key:null;b(L)},function(U,M){T(M)})})}).catch(T)});return g(w,p),w}function ra(d){var p=this,m=new f(function(w,b){p.ready().then(function(){var T=p._dbInfo;T.db.transaction(function(P){we(P,T,"SELECT key FROM "+T.storeName,[],function(D,U){for(var M=[],L=0;L<U.rows.length;L++)M.push(U.rows.item(L).key);w(M)},function(D,U){b(U)})})}).catch(b)});return g(m,d),m}function aa(d){return new f(function(p,m){d.transaction(function(w){w.executeSql("SELECT name FROM sqlite_master WHERE type='table' AND name <> '__WebKitDatabaseInfoTable__'",[],function(b,T){for(var P=[],D=0;D<T.rows.length;D++)P.push(T.rows.item(D).name);p({db:d,storeNames:P})},function(b,T){m(T)})},function(w){m(w)})})}function na(d,p){p=S.apply(this,arguments);var m=this.config();d=typeof d!="function"&&d||{},d.name||(d.name=d.name||m.name,d.storeName=d.storeName||m.storeName);var w=this,b;return d.name?b=new f(function(T){var P;d.name===m.name?P=w._dbInfo.db:P=openDatabase(d.name,"","",0),d.storeName?T({db:P,storeNames:[d.storeName]}):T(aa(P))}).then(function(T){return new f(function(P,D){T.db.transaction(function(U){function M(J){return new f(function(ee,oe){U.executeSql("DROP TABLE IF EXISTS "+J,[],function(){ee()},function(ne,he){oe(he)})})}for(var L=[],G=0,j=T.storeNames.length;G<j;G++)L.push(M(T.storeNames[G]));f.all(L).then(function(){P()}).catch(function(J){D(J)})},function(U){D(U)})})}):b=f.reject("Invalid arguments"),g(b,p),b}var oa={_driver:"webSQLStorage",_initStorage:Zr,_support:Wr(),iterate:$r,getItem:qr,setItem:Jr,removeItem:Qr,clear:ea,length:ta,key:sa,keys:ra,dropInstance:na};function la(){try{return typeof localStorage<"u"&&"setItem"in localStorage&&!!localStorage.setItem}catch{return!1}}function Ns(d,p){var m=d.name+"/";return d.storeName!==p.storeName&&(m+=d.storeName+"/"),m}function ia(){var d="_localforage_support_test";try{return localStorage.setItem(d,!0),localStorage.removeItem(d),!1}catch{return!0}}function ua(){return!ia()||localStorage.length>0}function ca(d){var p=this,m={};if(d)for(var w in d)m[w]=d[w];return m.keyPrefix=Ns(d,p._defaultConfig),ua()?(p._dbInfo=m,m.serializer=kt,f.resolve()):f.reject()}function fa(d){var p=this,m=p.ready().then(function(){for(var w=p._dbInfo.keyPrefix,b=localStorage.length-1;b>=0;b--){var T=localStorage.key(b);T.indexOf(w)===0&&localStorage.removeItem(T)}});return g(m,d),m}function da(d,p){var m=this;d=E(d);var w=m.ready().then(function(){var b=m._dbInfo,T=localStorage.getItem(b.keyPrefix+d);return T&&(T=b.serializer.deserialize(T)),T});return g(w,p),w}function ma(d,p){var m=this,w=m.ready().then(function(){for(var b=m._dbInfo,T=b.keyPrefix,P=T.length,D=localStorage.length,U=1,M=0;M<D;M++){var L=localStorage.key(M);if(L.indexOf(T)===0){var G=localStorage.getItem(L);if(G&&(G=b.serializer.deserialize(G)),G=d(G,L.substring(P),U++),G!==void 0)return G}}});return g(w,p),w}function ha(d,p){var m=this,w=m.ready().then(function(){var b=m._dbInfo,T;try{T=localStorage.key(d)}catch{T=null}return T&&(T=T.substring(b.keyPrefix.length)),T});return g(w,p),w}function pa(d){var p=this,m=p.ready().then(function(){for(var w=p._dbInfo,b=localStorage.length,T=[],P=0;P<b;P++){var D=localStorage.key(P);D.indexOf(w.keyPrefix)===0&&T.push(D.substring(w.keyPrefix.length))}return T});return g(m,d),m}function ga(d){var p=this,m=p.keys().then(function(w){return w.length});return g(m,d),m}function Ea(d,p){var m=this;d=E(d);var w=m.ready().then(function(){var b=m._dbInfo;localStorage.removeItem(b.keyPrefix+d)});return g(w,p),w}function Aa(d,p,m){var w=this;d=E(d);var b=w.ready().then(function(){p===void 0&&(p=null);var T=p;return new f(function(P,D){var U=w._dbInfo;U.serializer.serialize(p,function(M,L){if(L)D(L);else try{localStorage.setItem(U.keyPrefix+d,M),P(T)}catch(G){(G.name==="QuotaExceededError"||G.name==="NS_ERROR_DOM_QUOTA_REACHED")&&D(G),D(G)}})})});return g(b,m),b}function Ta(d,p){if(p=S.apply(this,arguments),d=typeof d!="function"&&d||{},!d.name){var m=this.config();d.name=d.name||m.name,d.storeName=d.storeName||m.storeName}var w=this,b;return d.name?b=new f(function(T){d.storeName?T(Ns(d,w._defaultConfig)):T(d.name+"/")}).then(function(T){for(var P=localStorage.length-1;P>=0;P--){var D=localStorage.key(P);D.indexOf(T)===0&&localStorage.removeItem(D)}}):b=f.reject("Invalid arguments"),g(b,p),b}var ya={_driver:"localStorageWrapper",_initStorage:ca,_support:la(),iterate:ma,getItem:da,setItem:Aa,removeItem:Ea,clear:fa,length:ga,key:ha,keys:pa,dropInstance:Ta},Sa=function(p,m){return p===m||typeof p=="number"&&typeof m=="number"&&isNaN(p)&&isNaN(m)},wa=function(p,m){for(var w=p.length,b=0;b<w;){if(Sa(p[b],m))return!0;b++}return!1},Is=Array.isArray||function(d){return Object.prototype.toString.call(d)==="[object Array]"},He={},Ps={},_e={INDEXEDDB:Yr,WEBSQL:oa,LOCALSTORAGE:ya},ba=[_e.INDEXEDDB._driver,_e.WEBSQL._driver,_e.LOCALSTORAGE._driver],nt=["dropInstance"],Rt=["clear","getItem","iterate","key","keys","length","removeItem","setItem"].concat(nt),ka={description:"",driver:ba.slice(),name:"localforage",size:4980736,storeName:"keyvaluepairs",version:1};function Ra(d,p){d[p]=function(){var m=arguments;return d.ready().then(function(){return d[p].apply(d,m)})}}function vt(){for(var d=1;d<arguments.length;d++){var p=arguments[d];if(p)for(var m in p)p.hasOwnProperty(m)&&(Is(p[m])?arguments[0][m]=p[m].slice():arguments[0][m]=p[m])}return arguments[0]}var va=function(){function d(p){o(this,d);for(var m in _e)if(_e.hasOwnProperty(m)){var w=_e[m],b=w._driver;this[m]=b,He[b]||this.defineDriver(w)}this._defaultConfig=vt({},ka),this._config=vt({},this._defaultConfig,p),this._driverSet=null,this._initDriver=null,this._ready=!1,this._dbInfo=null,this._wrapLibraryMethodsWithReady(),this.setDriver(this._config.driver).catch(function(){})}return d.prototype.config=function(m){if((typeof m>"u"?"undefined":n(m))==="object"){if(this._ready)return new Error("Can't call config() after localforage has been used.");for(var w in m){if(w==="storeName"&&(m[w]=m[w].replace(/\W/g,"_")),w==="version"&&typeof m[w]!="number")return new Error("Database version must be a number.");this._config[w]=m[w]}return"driver"in m&&m.driver?this.setDriver(this._config.driver):!0}else return typeof m=="string"?this._config[m]:this._config},d.prototype.defineDriver=function(m,w,b){var T=new f(function(P,D){try{var U=m._driver,M=new Error("Custom driver not compliant; see https://mozilla.github.io/localForage/#definedriver");if(!m._driver){D(M);return}for(var L=Rt.concat("_initStorage"),G=0,j=L.length;G<j;G++){var J=L[G],ee=!wa(nt,J);if((ee||m[J])&&typeof m[J]!="function"){D(M);return}}var oe=function(){for(var Fe=function(Ia){return function(){var Pa=new Error("Method "+Ia+" is not implemented by the current driver"),Os=f.reject(Pa);return g(Os,arguments[arguments.length-1]),Os}},Ct=0,Na=nt.length;Ct<Na;Ct++){var Nt=nt[Ct];m[Nt]||(m[Nt]=Fe(Nt))}};oe();var ne=function(Fe){He[U]&&console.info("Redefining LocalForage driver: "+U),He[U]=m,Ps[U]=Fe,P()};"_support"in m?m._support&&typeof m._support=="function"?m._support().then(ne,D):ne(!!m._support):ne(!0)}catch(he){D(he)}});return k(T,w,b),T},d.prototype.driver=function(){return this._driver||null},d.prototype.getDriver=function(m,w,b){var T=He[m]?f.resolve(He[m]):f.reject(new Error("Driver not found."));return k(T,w,b),T},d.prototype.getSerializer=function(m){var w=f.resolve(kt);return k(w,m),w},d.prototype.ready=function(m){var w=this,b=w._driverSet.then(function(){return w._ready===null&&(w._ready=w._initDriver()),w._ready});return k(b,m,m),b},d.prototype.setDriver=function(m,w,b){var T=this;Is(m)||(m=[m]);var P=this._getSupportedDrivers(m);function D(){T._config.driver=T.driver()}function U(G){return T._extend(G),D(),T._ready=T._initStorage(T._config),T._ready}function M(G){return function(){var j=0;function J(){for(;j<G.length;){var ee=G[j];return j++,T._dbInfo=null,T._ready=null,T.getDriver(ee).then(U).catch(J)}D();var oe=new Error("No available storage method found.");return T._driverSet=f.reject(oe),T._driverSet}return J()}}var L=this._driverSet!==null?this._driverSet.catch(function(){return f.resolve()}):f.resolve();return this._driverSet=L.then(function(){var G=P[0];return T._dbInfo=null,T._ready=null,T.getDriver(G).then(function(j){T._driver=j._driver,D(),T._wrapLibraryMethodsWithReady(),T._initDriver=M(P)})}).catch(function(){D();var G=new Error("No available storage method found.");return T._driverSet=f.reject(G),T._driverSet}),k(this._driverSet,w,b),this._driverSet},d.prototype.supports=function(m){return!!Ps[m]},d.prototype._extend=function(m){vt(this,m)},d.prototype._getSupportedDrivers=function(m){for(var w=[],b=0,T=m.length;b<T;b++){var P=m[b];this.supports(P)&&w.push(P)}return w},d.prototype._wrapLibraryMethodsWithReady=function(){for(var m=0,w=Rt.length;m<w;m++)Ra(this,Rt[m])},d.prototype.createInstance=function(m){return new d(m)},d}(),Ca=new va;s.exports=Ca},{3:3}]},{},[4])(4)})})(mr);var zn=mr.exports;const Ke=Da(zn),Hn='[{"id":"intro-start","dialogue":"⚠️ Warning ⚠️\\nCutscenes are synced across your team. Gather your teammates here before proceeding!\\n(Don’t worry if someone can’t make it — you’ll always be able to replay a cutscene later.)","dialogOptions":["Ready!"],"showMask":true,"blocking":true,"showNext":true,"useCutsceneUI":true,"hideGame":true},{"id":"keyframe-1","dialogue":"Your treasure map has proven true! All that work deciphering esoteric codes and cryptic clues has finally paid off!","dialogOptions":["Open the chest already!"],"showMask":true,"blocking":true,"showNext":true,"useCutsceneUI":true,"hideGame":true,"image":"treasure-chest.png"},{"id":"keyframe-2","dialogOptions":["!!!"],"showMask":true,"blocking":true,"showNext":true,"useCutsceneUI":true,"hideGame":true,"image":"kaboom.png"},{"id":"keyframe-3","dialogOptions":["...?!"],"showMask":true,"blocking":true,"showNext":true,"useCutsceneUI":true,"hideGame":true,"image":"explosion.png"},{"id":"keyframe-4","dialogue":"Nice ta meetcha! I’m KERO, a magic carp!","speaker":"kero","dialogOptions":["What were you doing in that box?"],"showMask":true,"blocking":true,"showNext":true,"useCutsceneUI":true,"hideGame":true,"image":"kero.png"},{"id":"keyframe-5","dialogue":"I’m guarding it! It must never be opened.\\nA great evil is trapped within!","speaker":"kero","dialogOptions":["Um"],"showMask":true,"blocking":true,"showNext":true,"useCutsceneUI":true,"hideGame":true,"image":"kero.png"},{"id":"keyframe-6","dialogue":"OwO ...you opened it didn’t you.","speaker":"angry_kero","dialogOptions":["You weren’t guarding it very well.","Maybe you shouldn’t have sealed it in a treasure chest."],"showMask":true,"blocking":true,"showNext":true,"useCutsceneUI":true,"hideGame":true,"image":"angry-kero.png"},{"id":"keyframe-7","dialogue":"Now you’ve done it!\\nCHAOS will descend upon the world!","speaker":"angry_kero","dialogOptions":["Okay, okay, what can we do about it?"],"showMask":true,"blocking":true,"showNext":true,"useCutsceneUI":true,"hideGame":true,"image":"angry-kero.png"},{"id":"keyframe-8","endCutscene":true,"endGame":true,"dialogue":"Take this uwuand! It’ll help us transform the monsters of this cave into friends, using the POWER OF UWU!!!","speaker":"kero","showMask":true,"blocking":true,"showNext":true,"useCutsceneUI":true,"hideGame":true,"image":"uwuand.png"},{"id":"tutorial1-start-1","dialogue":"Look! A New Boarn has been corrupted by the \\nCHAOS! We’ll save it with a CARD BATTLE!","speaker":"enemy","selector":"ai_battler","dialogOptions":["Let’s do it!"],"blocking":true,"showNext":true},{"id":"keyframe-10","dialogue":"Here’s a friend I made earlier!\\nHis name is Yoshi. Yoshisaur Munchakoopas!","speaker":"kero","selectorPermanent":"yoshisaur-munchakoopas","dialogOptions":["Wait, Yoshi? Do you mean-"],"showMask":true,"blocking":true,"showNext":true},{"id":"tutorial1-end-turn-1","dialogue":"No time for questions!\\nWe can’t do anything right now, so hit End Turn.","speaker":"kero","selector":"end_turn","showMask":true},{"id":"tutorial1-start-2","dialogue":"Oh no! New Boarn attacked Yoshi!","speaker":"enemy","selector":"ai_battler","blocking":true,"showNext":true},{"id":"keyframe-13","dialogue":"This is New Boarn’s Power, 3.\\nWhen a Creature Attacks, it deals damage equal to its Power.","speaker":"kero","selector":"power","selectorPermanent":"new-boarn","showMask":true,"blocking":true,"showNext":true},{"id":"keyframe-14","dialogue":"This is Yoshi’s Health. It was 4, now it’s 1.\\nIf his Health hits 0, he’ll get Destroyed!","speaker":"kero","selector":"health","selectorPermanent":"yoshisaur-munchakoopas","dialogOptions":["We can’t let that happen!"],"showMask":true,"blocking":true,"showNext":true},{"id":"keyframe-15","dialogue":"No worries! I’s our turn now. Yoshi is ready to Act!","speaker":"enemy","selector":"ai_battler","dialogOptions":["Yeah! Yoshi, use, uh, ...Swallow?"],"blocking":true,"showNext":true},{"id":"tutorial1-before-give-food","dialogue":"Not so fast! Most Actions in battle cost Food,\\nbut it looks like you don’t have any yet. $(ﾟ ヘﾟ)$","speaker":"enemy","selector":"ai_battler","dialogOptions":["(ﾟ ヘﾟ)"],"blocking":true,"showNext":true},{"id":"keyframe-17","dialogue":"Here, take this Egg!","speaker":"kero","selector":"gems","dialogOptions":["Thanks!","Wait, where’d this egg come fr-"],"showMask":true,"blocking":true,"showNext":true},{"id":"keyframe-18","dialogue":"We’ve gotta use that Egg right away!\\nFood doesn’t last longer than a single turn.\\nQuick, select Yoshi!","speaker":"enemy","selector":"ai_battler","nextSelectorPermanent":"yoshisaur-munchakoopas","blocking":true,"showNext":false},{"id":"keyframe-19","dialogue":"Now if you mouse over New Boarn to Attack it,\\nyou’ll see that Attacking will use up that Egg.\\nClick on New Boarn to Attack!","speaker":"enemy","selector":"ai_battler","dialogOptions":["You want me to attack a newboarn?","Can’t we find a peaceful resolution?"]},{"id":"tutorial1-attack","dialogue":"Don’t worry! After we beat the CHAOS all out of it, we’ll use the uwuand to transform it into a FRIEND!","speaker":"enemy","selector":"ai_battler","dialogOptions":["...Seems legit.","The Power of Friendship!"]},{"id":"tutorial1-start-3","dialogue":"You did it! You Destroyed New Boarn!\\nNow use the uwuand!!","speaker":"kero","dialogOptions":["✨"],"showMask":true,"blocking":true,"showNext":true,"useCutsceneUI":true,"image":"uwuand.png"},{"id":"tutorial1-card","dialogue":"New Boarn is now our friend!!!!! $٩( ˃▿˂ )۶$\\nThis card will let you Summon it to help you in the future!","speaker":"kero","showMask":true,"blocking":true,"showNext":true,"useCutsceneUI":true},{"id":"keyframe-23","dialogue":"There are more battles ahead, but before we move on,\\nI’ve gotta tell you about the Instancer!","speaker":"kero","dialogOptions":["What’s the Instancer?"],"showMask":true,"blocking":true,"showNext":true,"useCutsceneUI":true,"image":"kero.png"},{"id":"keyframe-24","dialogue":"It’s a web of parallel timelines maintained by a mysterious coven of spiders!\\nYour team can use it to experiment with different strategies for the same battle at the same time.\\nYou can find it on the Map, or jump straight to it from the navbar!","speaker":"kero","dialogOptions":["I always suspected spiders could do that sort of thing."],"showMask":true,"blocking":true,"showNext":true,"useCutsceneUI":true,"image":"kero.png"},{"id":"keyframe-25","endCutscene":true,"endGame":true,"dialogue":"I think battles are more fun when everyone’s together though...\\n$(〃´𓎟`〃)$ but it’s up to ya if you wanna use it!","speaker":"kero","showMask":true,"blocking":true,"showNext":true,"useCutsceneUI":true,"image":"kero.png"},{"id":"tutorial2-start-1","dialogue":"It’s time for our next battle! \\nI hear that swine camp around here.\\nWe need to Destroy their Camp!","speaker":"enemy","selector":"ai_battler","dialogOptions":["Why?"],"blocking":true,"showNext":true},{"id":"tutorial2-before-summon","dialogue":"We win battles by Destroying all Enemy Bases!\\nOnly then can we use the power of UWU to recruit more friends!","speaker":"enemy","selector":"ai_battler","dialogOptions":["That makes sense.","That makes no sense."],"blocking":true,"showNext":true},{"id":"tutorial2-end-turn-1","dialogue":"Here, I Summoned New Boarn from earlier!\\nWe only just Summoned it, so it’s not Ready to Act yet.\\nClick End Turn to start the next Turn, and it’ll be Ready!","speaker":"enemy","selector":"ai_battler"},{"id":"tutorial2-start-2","dialogue":"Your Camp made a Pie!\\nA Camp makes one Pie at the start of each turn.","speaker":"kero","selector":"gems","dialogOptions":["Yum!"],"blocking":true,"showNext":true},{"id":"tutorial2-attack-1","dialogue":"Also, New Boarn can Act now!\\nUse it to Attack the Camp.","speaker":"enemy","selector":"ai_battler","dialogOptions":["Go ham, little sow!","Sow discord, little ham!"]},{"id":"tutorial2-end-turn-2","dialogue":"After a Creature Acts, it becomes tired and won’t be\\nReady until the next turn.\\nLet’s end our turn now. We’ll Attack again next turn!","speaker":"enemy","selector":"ai_battler"},{"id":"tutorial2-start-3","dialogue":"Oh no! The swine noticed us!","speaker":"enemy","selector":"ai_battler","blocking":true,"showNext":true},{"id":"keyframe-33","dialogue":"No matter. They’re just Creatures.$ ╮(╯∀╰)╭$\\nWe only need to Destroy their Camp to\\nactivate the power of UWU!\\nGo ahead and Attack their Camp!","speaker":"enemy","selector":"ai_battler","nextSelectorPermanent":"new-boarn","showNext":false},{"id":"tutorial2-attack-2","dialogue":"Huh, the Camp is grayed out. That means we can’t Attack it.\\n...Oh right, it’s Protected! $(ノ_<。)$\\nThat’s what it’ll say if you mouse over it.\\nA Unit is Protected if there’s another Unit in front of it.","speaker":"enemy","selector":"ai_battler","blocking":true,"showNext":true},{"id":"tutorial2-free-play","dialogue":"I’m sure you’ll find a way to win anyway!\\nGo you! uwu","speaker":"enemy","selector":"ai_battler"},{"id":"tutorial2-start-4","dialogue":"Hooray! We befriended Hog and Hamlet!","showMask":true,"blocking":true,"showNext":true,"useCutsceneUI":true,"image":"kero.png"},{"id":"keyframe-37","dialogue":"New Boarn, Hog, and Hamlet all belong to\\nthe same Faction: the Boar Faction.\\nBoars are known for their delicious Boarries.\\nYou should try them sometime! $(*´ڡ`●)$","showMask":true,"blocking":true,"showNext":true,"useCutsceneUI":true,"image":"boars.png"},{"id":"keyframe-38","dialogue":"Yoshi belongs to a different Faction: the Dino Faction!\\nDinos are known for their Eggs!","showMask":true,"blocking":true,"showNext":true,"useCutsceneUI":true,"image":"dinos.png"},{"id":"keyframe-39","dialogue":"There’s also the Bee, Dryad, and Cow Factions.\\nEach Faction produces a different kind of Food.","showMask":true,"blocking":true,"showNext":true,"useCutsceneUI":true,"image":"other-factions.png"},{"id":"keyframe-40","dialogue":"You can tell what Faction a Creature is by looking at their color,\\nor the Food on top of their Card!","showMask":true,"blocking":true,"showNext":true,"useCutsceneUI":true,"image":"kero.png"},{"id":"keyframe-41","dialogue":"Attacking with a Creature always costs one Food.\\nBut Creatures can only gain energy from eating their own Faction’s Food. $(-_-* )$\\nSo New Boarn will Attack if you give it a Boarry, but not Eggs or Butter, for example.","showMask":true,"blocking":true,"showNext":true,"useCutsceneUI":true,"image":"food-example.png"},{"id":"keyframe-42","endCutscene":true,"endGame":true,"dialogue":"Eggs, Honey, Butter, Flower, Whipped Cream, and Boarries. With their powers combined, they make Pie!\\nPie can substitute for any Food. Everyone loves Pie!\\nThat’s why we could get New Boarn to attack for a Pie just now!","dialogOptions":["Yoshi! I choose you!"],"showMask":true,"blocking":true,"showNext":true,"useCutsceneUI":true,"image":"pie.png"},{"id":"tutorial3-start-1","dialogue":"We’re out in the open now!\\nTwo Beeowulfs? No worries, I’m sure Yoshi can handle this!","speaker":"enemy","selector":"ai_battler"},{"id":"tutorial3-lose-1","dialogue":"We lost??? Righto, I forgot to mention...\\nCreatures can Attack down any column!","speaker":"enemy","selector":"ai_battler","dialogOptions":["Can we block the Attacks somehow?"],"blocking":true,"showNext":true},{"id":"tutorial3-lose-1-other","endGameUnsolved":true,"dialogue":"We can! For that, we’ll need to learn a new Action — Move!\\nNext time, select Yoshi, then the Space to his left.\\nHe’ll Move there and Protect our Camp!\\nLet’s try this battle again by Restarting it.","speaker":"enemy","selector":"ai_battler","blocking":true,"showNext":true},{"id":"tutorial3-lose-1-wrong-move","endGameUnsolved":true,"dialogue":"We can! For that, we’ll need to learn a new Action — Move!\\nI see you’ve already given it a try.\\nNext time, move Yoshi to the left instead!\\nHe’ll Move there and Protect our Camp!\\nLet’s try this battle again by Restarting it.","speaker":"enemy","selector":"ai_battler","blocking":true,"showNext":true},{"id":"tutorial3-after-move","dialogue":"Nice Move! Even though the Beeowulfs can attack any column,\\nYoshi Protects everything behind him! $ᕙ(  •̀ ᗜ •́  )ᕗ$","speaker":"enemy","selector":"ai_battler","blocking":true,"showNext":true},{"id":"keyframe-48","dialogue":"Unlike Attacking, Moving doesn’t cost Food.\\nBut it still counts as an Action, so Yoshi won’t be Ready to Act\\nagain until our next turn. Time to End Turn!","speaker":"enemy","selector":"ai_battler"},{"id":"tutorial3-start-2","dialogue":"Alright, you’ve got this!","speaker":"enemy","selector":"ai_battler"},{"id":"tutorial3-start-3","dialogue":"That was great! We could do this ’til the cows come home!\\nBut wait, something’s wrong. Do you hear that?","speaker":"kero","dialogOptions":["Is that... knocking?"],"showMask":true,"blocking":true,"showNext":true,"useCutsceneUI":true,"image":"kero.png"},{"id":"keyframe-51","dialogue":"Who’s there?","speaker":"kero","dialogOptions":["Don’t answer it!"],"showMask":true,"blocking":true,"showNext":true,"useCutsceneUI":true,"image":"kero.png"},{"id":"keyframe-52","dialogue":"Oh no, it’s the Cows!","speaker":"angry_kero","dialogOptions":["Cows? In a cave?"],"showMask":true,"blocking":true,"showNext":true,"useCutsceneUI":true,"image":"angry-kero.png"},{"id":"tutorial3-before-give-cards","dialogue":"Yeah! These Cows won’t let anyone get in their way!\\nLooks like they’ll be here in 3 turns.\\nYoshi can’t handle all that alone!","speaker":"kero","dialogOptions":["What do we do?"],"showMask":true,"blocking":true,"showNext":true,"useCutsceneUI":true,"image":"kero.png"},{"id":"keyframe-54","dialogue":"We’ve gotta Summon more friends!\\nHere are all the friends we made earlier.\\nWe’ll need them all on the field before the cows arrive!","speaker":"enemy","selector":"ai_battler","dialogOptions":["How do we Summon?"],"blocking":true,"showNext":true},{"id":"keyframe-55","dialogue":"Lemme give you a quick Summoning crash course!\\nEach Creature’s Summon cost is shown above their card.\\nHog and Hamlet each cost {R}. Our Camp’s {?} can substitute\\nfor {R}, so we can Summon both of them over the next two turns.","speaker":"enemy","selector":"ai_battler","dialogOptions":["What about New Boarn?"],"blocking":true,"showNext":true},{"id":"keyframe-56","dialogue":"We’ll think about New Boarn later!\\nFor now, focus on getting the other two Boars on the field.\\n(By the way, you might notice that we can only Summon on the\\nSpaces closer to us. That’s because the Spaces on the other\\nside are Enemy Spaces. We can’t Summon there!)","speaker":"enemy","selector":"ai_battler"},{"id":"tutorial3-start-5","dialogue":"Aight, let’s Summon the New Boarn!\\nFor that, we’ll need a new Action — Create!\\nCreating causes a Ready Creature to produce one Food.","speaker":"enemy","selector":"ai_battler","dialogOptions":["Oh! Like Pie?"],"blocking":true,"showNext":true},{"id":"keyframe-58","dialogue":"Not exactly... The Food that a Creature Creates depends on\\ntheir Faction. For example, Yoshi is a Dino, so when he\\nCreates, he lays an {G}. When a Boar like Hog or Hamlet\\nCreates, it gathers a {R}!","speaker":"enemy","selector":"ai_battler","blocking":true,"showNext":true},{"id":"keyframe-59","dialogue":"See if you can make up {R}{R}{R} to Summon New Boarn!\\nDon’t forget the {?} we got from our Camp, which can\\nsubstitute for any Food.","speaker":"enemy","selector":"ai_battler"},{"id":"tutorial3-after-summon-new-boarn","dialogue":"Did you see New Boarn jump?\\nNew Boarn is one hyperactive Boar! When you Summon it,\\nit jumps to a random Empty Friendly Space.\\nYou can read all about it in its card text!","speaker":"enemy","selector":"ai_battler","dialogOptions":["What a strong newboarn!","Sounds like it was Boarn for this!"],"blocking":true,"showNext":true},{"id":"tutorial3-focus-hog","dialogue":"Hog’s an interesting one too! It can only Attack down its column.\\nYou’ll wanna pay attention to how each Creature is different\\nto win more battles and make more friends!","speaker":"enemy","selector":"ai_battler","blocking":true,"showNext":true},{"id":"tutorial3-after-focus-hog","dialogue":"Now you’re familiar with the three basic Actions.\\nRemember that Creatures can only Act once per turn.\\nYou’ll often have to think carefully about whether to\\nAttack, Move, or Create!","speaker":"enemy","selector":"ai_battler","blocking":true,"showNext":true},{"id":"keyframe-63","dialogue":"The cows are almost upon us.\\nEnd your turn, and I’m sure you can handle the rest!","speaker":"enemy","selector":"ai_battler"},{"id":"tutorial3-stampede-fail","dialogue":"Oh no! You didn’t Summon all our friends!\\nUhh... good luck, I guess... $(ﾟAﾟ;)$","speaker":"enemy","selector":"ai_battler"},{"id":"tutorial3-stampede","dialogue":"You can do it! I’m rooting for you!","speaker":"enemy","selector":"ai_battler"},{"id":"tutorial3-lose-2","endGameUnsolved":true,"dialogue":"Guess it didn’t work out... Don’t worry, you can always try again! You might also need to think more carefully about which Spaces you Summon our friends to.\\nOh, and check out the menu! You have two Save slots that you can use to Save or Load your battle progress at any time, and one that autosaves at the start of every turn!","speaker":"enemy","selector":"ai_battler","blocking":true,"showNext":true},{"id":"tutorial4-start-1","dialogue":"Didya get to read our new friends’ card text?","speaker":"enemy","selector":"ai_battler","dialogOptions":["Of course!","Huh?"],"blocking":true,"showNext":true,"nextIds":["tutorial4-start-1-1","tutorial4-start-1-2"]},{"id":"tutorial4-start-1-1","dialogue":"Amazing! The card text will be important for this battle.\\nBut first, let’s get our friends on the field!","speaker":"enemy","selector":"ai_battler","dialogOptions":["Let’s go!"],"blocking":true,"showNext":true,"nextIds":["tutorial4-start-1-join"]},{"id":"tutorial4-start-1-2","dialogue":"Well, ya gonna need to if we’re gonna win this battle!\\nBut first, let’s get our friends on the field!","speaker":"enemy","selector":"ai_battler","dialogOptions":["Let’s go!"],"blocking":true,"showNext":true,"nextIds":["tutorial4-start-1-join"]},{"id":"tutorial4-start-1-join","dialogue":"Chocolate Calf’s Summon cost is {.}{B}!\\nAny Food can substitute for {.}!","speaker":"enemy","selector":"ai_battler","blocking":true,"showNext":true},{"id":"keyframe-71","dialogue":"You might also come across {(W/B)}. {(W/B)} is Milk!!\\nButter and Whipped Cream are both made of Milk,\\nso either {B} and {W} can substitute for {(W/B)}!","speaker":"enemy","selector":"ai_battler","blocking":true,"showNext":true},{"id":"tutorial4-focus-beeowulf-1","dialogue":"And Beeowulf’s Summon cost is just one {Y}!\\nI’m sure that one’s no problem for you!","speaker":"enemy","selector":"ai_battler","blocking":true,"showNext":true},{"id":"keyframe-73","dialogue":"Alright, time to get our friends on the field!","speaker":"enemy","selector":"ai_battler"},{"id":"tutorial4-start-2-not-all-summon","dialogue":"OHHHH THAT’S A BUZZLOAD’A BEEZ!!!!\\nBut it looks like you didn’t manage to Summon all\\nour friends... I’m not sure you can win this now. $(’A`)$","speaker":"enemy","selector":"ai_battler"},{"id":"tutorial4-start-2","dialogue":"OHHHH THAT’S A BUZZLOAD’A BEEZ!!!! $(⊃‿⊂)ミ3$\\nDon’t worry. We can use our friends’ unique abilities\\nto win the battle in a single turn!","speaker":"enemy","selector":"ai_battler","blocking":true,"showNext":true},{"id":"tutorial4-focus-beeowulf-2","dialogue":"Beeowulf has a Special! Activating a Special counts as an\\nAction, just like Attack, Move, or Create. That means that\\nBeeowulf can only activate its Special when it’s Ready,\\nand then it gets tired and can’t Act again until the next turn!","speaker":"enemy","selector":"ai_battler","blocking":true,"showNext":true},{"id":"tutorial4-focus-calf-1","dialogue":"Chocolate Calf has a Flex! Activating a Flex doesn’t count\\nas an Action. That means that it can Flex as many times\\nas we want, whether or not it’s Ready!","speaker":"enemy","selector":"ai_battler","blocking":true,"showNext":true},{"id":"tutorial4-focus-calf-2","dialogue":"Activating a Special or Flex may cost Food. Do you see\\nthe {W} next to “Flex” in Chocolate Calf’s card text?\\nThat means that it costs one {W} to activate it!\\nIf you don’t see any symbols in front of the card text for\\nan ability, that means that activating it is free!","speaker":"enemy","selector":"ai_battler","blocking":true,"showNext":true},{"id":"keyframe-79","dialogue":"Don’t forget to check the card text of the Enemy Bees too!\\nOkay I’m sure you’ve got this!!! SEEYA","speaker":"enemy","selector":"ai_battler"},{"id":"tutorial5-start","dialogue":"You’re pretty much an expert at battlin’ now.\\nI’ve just one last thing to teach ya!","speaker":"enemy","selector":"ai_battler","blocking":true,"showNext":true},{"id":"keyframe-81","dialogue":"When a Creature crosses into an Enemy Space,\\nit becomes Sneaky. Sneaky Creatures can attack\\nProtected Enemies, but no longer Protect Units behind them.","speaker":"kero","showMask":true,"blocking":true,"showNext":true,"useCutsceneUI":true,"image":"protection.png"},{"id":"keyframe-82","dialogue":"Idk if you’ll use it for this battle. Or if you’ll ever use it at all!\\nBut that’s what happens when Creatures get too Sneaky!","speaker":"kero","showMask":true,"blocking":true,"showNext":true,"useCutsceneUI":true,"image":"kero.png"},{"id":"keyframe-83","dialogue":"And oh, forgot to mention. You get to send up to two copies\\nof each friend into battle! Don’t ask me why, I don’t make the\\nrules ’round here. $(･ω<)☆$","speaker":"kero","showMask":true,"blocking":true,"showNext":true,"useCutsceneUI":true,"image":"kero.png"},{"id":"keyframe-84","dialogue":"Anyway, that’s enough talking, we’ve got a battle on our hands!\\nIt’s time to BEFRIEND some DRYADS!!!","speaker":"enemy","selector":"ai_battler"},{"id":"tutorial6-start-no-deck","dialogue":"It’s time for your FINAL TEST!\\nBut you’ll have to bring your own Deck for this one. $( •̀⩊•́ )$","speaker":"enemy","selector":"ai_battler","dialogOptions":["Deck?"],"blocking":true,"showNext":true},{"id":"keyframe-86","dialogue":"A Deck is a roster of friends you’ll bring into battle!\\nYou can select up to two copies of each friend to\\nmake up a Deck of up to 30 friends in total.","speaker":"enemy","selector":"ai_battler","blocking":true,"showNext":true},{"id":"keyframe-87","dialogue":"By the way, if you ever feel like you need a refresher on all\\nthe stuff we’ve talked about so far — like if you’ve gotta do\\nsome last-minute revision for a big TEST for example —\\nI’ve added a link to some Notes to your navbar!\\nI wrote them just for you~ $(◕‿◕)♡$","speaker":"enemy","selector":"ai_battler","dialogOptions":["Aw, thanks!"],"blocking":true,"showNext":true},{"id":"keyframe-88","endGameUnsolved":true,"dialogue":"Now hit “Exit battle” in the menu, build your Deck,\\nand come back when you’re ready!\\nChoose carefully, for we have a SUPER ULTIMATE\\nEXTREME CHALLENGE FINAL BATTLE ahead of us!","speaker":"enemy","selector":"ai_battler"},{"id":"tutorial6-start-1","dialogue":"Looks like we’re here early! But don’t dally, ’cos it looks like\\nthe monsters will be here as soon as next turn!\\nThere are so many of them... hopefully they’ll come in a\\nfew at a time or we won’t have time to catch our breaths!","speaker":"enemy","selector":"ai_battler"},{"id":"tutorial6-start-2","dialogue":"AHH NO THEY CAME ALL AT ONCE WHAT A DISASTER!!!!!","speaker":"enemy","selector":"ai_battler"},{"id":"tutorial6-end","endCutscene":true,"endGame":true,"dialogue":"You... did it? Already? I wasn’t paying attention,\\nbut you must’ve pulled off some fancy combos there\\nto have made it through that battle so quickly!\\nWell, that must mean you’re an expert now. Ｏ(≧∇≦)Ｏ\\nGo forth and befriend!","speaker":"kero","showMask":true,"blocking":true,"showNext":true,"useCutsceneUI":true,"image":"kero.png"},{"id":"masteries-start","dialogue":"⚠️ Warning ⚠️\\nCutscenes are synced across your team. Gather your teammates here before proceeding!\\n(Don’t worry if someone can’t make it — you’ll always be able to replay a cutscene later.)","dialogOptions":["Ready!"],"showMask":true,"blocking":true,"showNext":true,"useCutsceneUI":true,"hideGame":true},{"id":"keyframe-93","dialogue":"Wouldya look at that! You found an ANSWER!","dialogOptions":["Heh, we totally breezed through that puzzle!","It was a tough puzzle but we made it through!"],"showMask":true,"blocking":true,"showNext":true,"useCutsceneUI":true,"hideGame":true,"image":"kero dos"},{"id":"keyframe-94","dialogue":"Puzzle? What puzzle? This whole time I thought we were doing a BATTLE OF WITS!","dialogOptions":["Ah, right, of course we were."],"showMask":true,"blocking":true,"showNext":true,"useCutsceneUI":true,"hideGame":true,"image":"kero dos"},{"id":"keyframe-95","dialogue":"Yeah! You even got to befriend a buncha monsters!","dialogOptions":["Yay! The power of UWU!"],"showMask":true,"blocking":true,"showNext":true,"useCutsceneUI":true,"hideGame":true,"image":"kero dos"},{"id":"keyframe-96","dialogue":"Actually, y’know what? That ANSWER you found...\\nIt looks a lot like a branch from the Mastery Tree!","dialogOptions":["Mastery Tree?"],"showMask":true,"blocking":true,"showNext":true,"useCutsceneUI":true,"hideGame":true,"image":"kero dos"},{"id":"keyframe-97","endCutscene":true,"endGame":true,"dialogue":"Yeah! All the CHAOS has caused the Mastery Tree to fall apart, scattering its branches all over the cave!\\nYou need to find its branches and put it back together again!","showMask":true,"blocking":true,"showNext":true,"useCutsceneUI":true,"hideGame":true,"image":"kero dos"},{"id":"legendary-start","dialogue":"⚠️ Warning ⚠️\\nCutscenes are synced across your team. Gather your teammates here before proceeding!\\n(Don’t worry if someone can’t make it — you’ll always be able to replay a cutscene later.)","dialogOptions":["Ready!"],"showMask":true,"blocking":true,"showNext":true,"useCutsceneUI":true,"hideGame":true},{"id":"keyframe-99","dialogue":"$ヽ(°〇°)ﾉ$ You did it! You befriended a legendary!","dialogOptions":["Yay! But wait, did you just... transform?"],"showMask":true,"blocking":true,"showNext":true,"useCutsceneUI":true,"hideGame":true,"image":"kero dos"},{"id":"keyframe-100","dialogue":"Oh, don’t mind that. That’s just the legendary’s power coursing\\nthrough me! The more friends we make, the more power I get —\\npower to rid this cave of CHAOS once and for all!","dialogOptions":["Ah, of course! So, what’s a legendary?"],"showMask":true,"blocking":true,"showNext":true,"useCutsceneUI":true,"hideGame":true,"image":"kero dos"},{"id":"keyframe-101","dialogue":"Legendaries are awesome. They’re the best kinda friend!\\nThey don’t like each other very much, though...","dialogOptions":["Why not?"],"showMask":true,"blocking":true,"showNext":true,"useCutsceneUI":true,"hideGame":true,"image":"kero dos"},{"id":"keyframe-102","dialogue":"I dunno. Pride, maybe. The Factions have been fighting since forever!\\nThe legendaries wanna prove that they alone are the best.\\nWhat does it matter, as long as they all become our friends!","showMask":true,"blocking":true,"showNext":true,"useCutsceneUI":true,"hideGame":true,"image":"kero dos"},{"id":"keyframe-103","dialogue":"Though it does mean that you can’t bring more than one legendary (or more than one copy of the same legendary) to battle at a time. What a bummer!","showMask":true,"blocking":true,"showNext":true,"useCutsceneUI":true,"hideGame":true,"image":"kero dos"},{"id":"keyframe-104","endCutscene":true,"endGame":true,"dialogue":"Anyways, there are 12 legendaries hiding throughout the cave.\\nThe power of UWU demands that we befriend them all!","dialogOptions":["Let’s go!"],"showMask":true,"blocking":true,"showNext":true,"useCutsceneUI":true,"hideGame":true,"image":"kero dos"},{"id":"pre-final-battle-start","dialogue":"⚠️ Warning ⚠️\\nCutscenes are synced across your team. Gather your teammates here before proceeding!\\n(Don’t worry if someone can’t make it — you’ll always be able to replay a cutscene later.)","dialogOptions":["Ready!"],"showMask":true,"blocking":true,"showNext":true,"useCutsceneUI":true,"hideGame":true},{"id":"keyframe-106","dialogue":"You did it! You befriended all the legendaries.\\nWith these cards, we can finally take over the cave!","dialogOptions":["I thought we were saving the cave, not taking it over! What about the power of UWU?"],"showMask":true,"blocking":true,"showNext":true,"useCutsceneUI":true,"hideGame":true,"image":"kero dos"},{"id":"keyframe-107","dialogue":"I AM UWU, the Underwater Usurper!\\nAnd with the power of the cards, we can usurp the whole world!!!!\\nNow hand them over.","dialogOptions":["Never!"],"showMask":true,"blocking":true,"showNext":true,"useCutsceneUI":true,"hideGame":true,"image":"angry-kero-dos.png"},{"id":"keyframe-108","dialogue":"...tragedy... ...an imposter approaches... 🌷\\n...call upon the flowers... 🌺 ...accept my aid...","showMask":true,"blocking":true,"showNext":true,"useCutsceneUI":true,"hideGame":true,"image":"coloring.png"},{"id":"keyframe-109","dialogue":"What, flowers? Don’t make me L, A, U, G, H!\\nThe whole C, A, V, E is at stake. Let M, E take care of it!","showMask":true,"blocking":true,"showNext":true,"useCutsceneUI":true,"hideGame":true,"image":"spelling-bee.png"},{"id":"keyframe-110","dialogue":"Calm your wings, Bee. I’ve seen your quarterlies.\\nYou won’t pass the audit, let alone win them the battle!","showMask":true,"blocking":true,"showNext":true,"useCutsceneUI":true,"hideGame":true,"image":"moonick.png"},{"id":"keyframe-111","dialogue":"Do I need to S, P, E, L, L it out for you? Your audits mean nothing! And if you don’t know, no one in this C, A, V, E likes you Cows, let alone your T, A, X, E, S!","showMask":true,"blocking":true,"showNext":true,"useCutsceneUI":true,"hideGame":true,"image":"spelling-bee.png"},{"id":"keyframe-112","dialogue":"(angry slime noises)","showMask":true,"blocking":true,"showNext":true,"useCutsceneUI":true,"hideGame":true,"image":"slime--slime.png"},{"id":"keyframe-113","dialogue":"And you thirgle yorgle any bergle? Yorgle not a clurgle whargle yorgle targle with! Norgle of you yorgle have largle ergle on a genurgle bargle, I’ll sargle that murgle!","showMask":true,"blocking":true,"showNext":true,"useCutsceneUI":true,"hideGame":true,"image":"dargle.png"},{"id":"keyframe-114","dialogue":"Git outta here, Dargle! Ain’t nobody here can make heads or tails of what yer sayin’! Take me instead, this here battle’s a job for a Cow!","showMask":true,"blocking":true,"showNext":true,"useCutsceneUI":true,"hideGame":true,"image":"miss-yu.png"},{"id":"keyframe-115","dialogue":"Lackadairy, get thee home, cows, thou’rt milk-drunk! I shall show that ⍼ what’s 🗦🗫🗧ing, eh!","showMask":true,"blocking":true,"showNext":true,"useCutsceneUI":true,"hideGame":true,"image":"jabberwock.png"},{"id":"keyframe-116","dialogue":"(ANGRY angry slime SLIME NOISES noises)","showMask":true,"blocking":true,"showNext":true,"useCutsceneUI":true,"hideGame":true,"image":"slime--slime-2.png"},{"id":"keyframe-117","dialogue":"Friends! This is no time for bickering!\\nLet us set aside our differences just this once.\\nOnly with our powers combined do we stand a chance against this... thing!","showMask":true,"blocking":true,"showNext":true,"useCutsceneUI":true,"hideGame":true,"image":"captain-pi.png"},{"id":"keyframe-118","dialogue":"I hate to say this but the cap’s right. If any of us tries to monopolize the board like we always do, it’s Checkmate in Three!","showMask":true,"blocking":true,"showNext":true,"useCutsceneUI":true,"hideGame":true,"image":"blancmange.png"},{"id":"keyframe-119","dialogue":"A load of HOGWASH but I’ll TAKE IT! Anything to get BACK at this SWINE and take my place BACK at the TREASURY!","showMask":true,"blocking":true,"showNext":true,"useCutsceneUI":true,"hideGame":true,"image":"mister-penny.png"},{"id":"keyframe-120","dialogue":"i’ve not fought alongside others before.\\nbut if i’ve l, e, a, r, n, e, d anything, it’s that i shouldn’t be afraid of t, r, y, i, n, g!","showMask":true,"blocking":true,"showNext":true,"useCutsceneUI":true,"hideGame":true,"image":"bb-b.png"},{"id":"keyframe-121","dialogue":"Yeah! Let us dominate the corners, surround the opponent, and flip the whole battle around! ...Together!","showMask":true,"blocking":true,"showNext":true,"useCutsceneUI":true,"hideGame":true,"image":"othello.png"},{"id":"keyframe-122","endCutscene":true,"endGame":true,"dialogue":"(determined DETERMINED SLIME slime noises NOISES)\\n(DETERMINED determined slime SLIME NOISES noises)","showMask":true,"blocking":true,"showNext":true,"useCutsceneUI":true,"hideGame":true,"image":"slime--slime-3.png"},{"id":"post-final-battle-start","dialogue":"How? How could I possibly have lost???\\nNow I’m all alone... again... $ಥ﹏ಥ$","showMask":true,"blocking":true,"showNext":true,"useCutsceneUI":true,"hideGame":true,"image":"sad-kero.png"},{"id":"keyframe-124","dialogue":"There is one force that you don’t understand.\\nA force stronger than any other force in the world.\\nEven more powerful than UWU.","showMask":true,"blocking":true,"showNext":true,"useCutsceneUI":true,"hideGame":true,"image":"captain-pi.png"},{"id":"keyframe-125","dialogue":"That force is...","dialogOptions":["Friendship?"],"showMask":true,"blocking":true,"showNext":true,"useCutsceneUI":true,"hideGame":true,"image":"captain-pi.png"},{"id":"keyframe-126","dialogue":"PIE.","showMask":true,"blocking":true,"showNext":true,"useCutsceneUI":true,"hideGame":true,"image":"captain-pi.png"},{"id":"keyframe-127","dialogue":"...","showMask":true,"blocking":true,"showNext":true,"useCutsceneUI":true,"hideGame":true,"image":"sad-kero.png"},{"id":"keyframe-128","dialogue":"# i want pie...","showMask":true,"blocking":true,"showNext":true,"useCutsceneUI":true,"hideGame":true,"image":"sad-kero.png"},{"id":"keyframe-129","dialogue":"# i’d ask a camp for some, but...\\n# i don’t even have a camp anymore...","showMask":true,"blocking":true,"showNext":true,"useCutsceneUI":true,"hideGame":true,"image":"sad-kero.png"},{"id":"keyframe-130","dialogue":"You cannot win friends with the power of CHAOS.\\nOnly when all the Factions come together, in HARMONY, can we make...\\nNot just any pie, but LEGENDARY PIE.\\nYet, I suppose, we have you, Kero, to thank, for bringing all of us together with this battle.","showMask":true,"blocking":true,"showNext":true,"useCutsceneUI":true,"hideGame":true,"image":"captain-pi.png"},{"id":"post-final-battle-choice","dialogue":"Brave heroes, what will you choose?","dialogOptions":["Seal him away!","Invite him to join us for some pie."],"showMask":true,"blocking":true,"showNext":true,"useCutsceneUI":true,"hideGame":true,"image":"captain-pi.png","nextIds":["post-final-battle-choice-1","post-final-battle-choice-2"]},{"id":"post-final-battle-choice-1","dialogue":"You and all the creatures of the cave seal Kero in the nearest lockable object, which is an empty treasure chest you found lying nearby.\\nYou make sure to hide the map to the chest behind lots of puzzles so that he will never be unsealed again.","showMask":true,"blocking":true,"showNext":true,"useCutsceneUI":true,"hideGame":true,"image":"treasure-chest.png"},{"id":"keyframe-133","endCutscene":true,"endGame":true,"dialogue":"And so, for the first time in a thousand years, the Factions worked together to bake a LEGENDARY PIE, and ate it, too.\\nAnd everyone learned that the real treasure wasn’t taking over the world, it was the pies you made along the way.","showMask":true,"blocking":true,"showNext":true,"useCutsceneUI":true,"hideGame":true,"image":"legendary-pie-no-kero.png"},{"id":"post-final-battle-choice-2","dialogue":"I love PIE! uwu","showMask":true,"blocking":true,"showNext":true,"useCutsceneUI":true,"hideGame":true,"image":"kero.png"},{"id":"keyframe-135","endCutscene":true,"endGame":true,"dialogue":"And so, for the first time in a thousand years, the Factions worked together to bake a LEGENDARY PIE, and ate it, too.\\nAnd everyone learned that the real treasure wasn’t taking over the world, it was the pies you made along the way.","showMask":true,"blocking":true,"showNext":true,"useCutsceneUI":true,"hideGame":true,"image":"legendary-pie-w-kero.png"}]',Fn=JSON.parse(Hn);class Kn{constructor(e){A(this,"dumpRequests");A(this,"backend");this.dumpRequests=e.dumpBackendRequests,this.backend=e.backend}async getInitData(){this.dumpRequests&&console.log("req getInitData");const e=await this.backend.getInitData();return this.dumpRequests&&console.log("resp getInitData"),e}async getInitTeamData(e){this.dumpRequests&&console.log("req getInitTeamData");const t=await this.backend.getInitTeamData(e);return this.dumpRequests&&console.log("resp getInitTeamData"),t}async syncData(e){this.dumpRequests&&console.log("req syncData");const t=await this.backend.syncData(e);return this.dumpRequests&&console.log("resp syncData"),t}async checkAnswer(e){this.dumpRequests&&console.log("req solve");const t=await this.backend.checkAnswer(e);return this.dumpRequests&&console.log("resp solve"),t}}class Hs{constructor(e,t,s){A(this,"packet");A(this,"tracker");this.packet={},this.tracker=new ze(e,t,s)}isDirty(){return Object.keys(this.packet).length>0}mergePacket({isInactive:e,isHidden:t,displayName:s,faction:a,factionScoreContributions:n,decks:o,masteryTree:l,answerSubmissions:i,unlocks:c,cardUnlocks:u,viewTimes:f,preferredDecks:g,puzzleSelections:k,checkpoints:E,blockedTeams:S,isInRing:v,cutsceneChoices:_}){var y,N;e!==void 0&&(this.packet.isInactive=e),t!==void 0&&(this.packet.isHidden=t),s!==void 0&&(this.packet.displayName=s),a!==void 0&&(this.packet.faction=a),this.packet.factionScoreContributions=Object.assign(this.packet.factionScoreContributions??{},n??{}),this.packet.decks=Object.assign(this.packet.decks??{},o??{}),l!==void 0&&(this.packet.masteryTree=l);for(const[C,O]of Object.entries(i??{})){if((y=this.packet).answerSubmissions??(y.answerSubmissions={}),O===null){this.packet.answerSubmissions[C]=null;continue}this.packet.answerSubmissions[C]=Object.assign(this.packet.answerSubmissions[C]??{},O)}this.packet.unlocks=Object.assign(this.packet.unlocks??{},c??{}),this.packet.cardUnlocks=Object.assign(this.packet.cardUnlocks??{},u??{}),this.packet.viewTimes=Object.assign(this.packet.viewTimes??{},f??{}),this.packet.preferredDecks=Object.assign(this.packet.preferredDecks??{},g??{}),this.packet.puzzleSelections=Object.assign(this.packet.puzzleSelections??{},k??{}),this.packet.checkpoints=Object.assign(this.packet.checkpoints??{},E??{}),this.packet.blockedTeams=Object.assign(this.packet.blockedTeams??{},S??{}),v!==void 0&&(this.packet.isInRing=v),_!==void 0&&((N=this.packet).cutsceneChoices??(N.cutsceneChoices=[]),this.packet.cutsceneChoices.push(..._)),this.resolvePacket({}),this.isDirty()&&this.tracker.handleModify()}resolvePacket({isInactive:e,isHidden:t,displayName:s,faction:a,factionScoreContributions:n,decks:o,masteryTree:l,answerSubmissions:i,unlocks:c,cardUnlocks:u,viewTimes:f,preferredDecks:g,puzzleSelections:k,checkpoints:E,blockedTeams:S,isInRing:v,cutsceneChoices:_}){this.packet.isInactive!==void 0&&e===this.packet.isInactive&&delete this.packet.isInactive,this.packet.isHidden!==void 0&&t===this.packet.isHidden&&delete this.packet.isHidden,this.packet.displayName!==void 0&&s===this.packet.displayName&&delete this.packet.displayName,this.packet.faction!==void 0&&a===this.packet.faction&&delete this.packet.faction;for(const[y,N]of Object.entries(n??{})){const C=y;this.packet.factionScoreContributions!==void 0&&this.packet.factionScoreContributions[C]!==void 0&&this.packet.factionScoreContributions[C]===N&&delete this.packet.factionScoreContributions[C]}Object.keys(this.packet.factionScoreContributions??{}).length===0&&delete this.packet.factionScoreContributions;for(const y of Object.keys(o??{}))this.packet.decks!==void 0&&delete this.packet.decks[Number(y)];Object.keys(this.packet.decks??{}).length===0&&delete this.packet.decks,l!==void 0&&delete this.packet.masteryTree;for(const[y,N]of Object.entries(i??{})){if(this.packet.answerSubmissions===void 0)continue;const C=this.packet.answerSubmissions[y];if(C!==void 0)if(N===null){if(C!==null)continue;delete this.packet.answerSubmissions[y]}else{if(C===null)continue;for(const[O,F]of Object.entries(N??{}))delete C[O];Object.keys(C).length===0&&delete this.packet.answerSubmissions[y]}}Object.keys(this.packet.answerSubmissions??{}).length===0&&delete this.packet.answerSubmissions;for(const[y,N]of Object.entries(c??{})){if(this.packet.unlocks===void 0)continue;const C=this.packet.unlocks[y];C!==void 0&&C===null==(N===null)&&delete this.packet.unlocks[y]}Object.keys(this.packet.unlocks??{}).length===0&&delete this.packet.unlocks;for(const[y,N]of Object.entries(u??{})){if(this.packet.cardUnlocks===void 0)continue;const C=this.packet.cardUnlocks[y];C!==void 0&&C===null==(N===null)&&((C==null?void 0:C.puzName)??null)===((N==null?void 0:N.puzName)??null)&&delete this.packet.cardUnlocks[y]}Object.keys(this.packet.cardUnlocks??{}).length===0&&delete this.packet.cardUnlocks;for(const y of Object.keys(f??{}))this.packet.viewTimes!==void 0&&delete this.packet.viewTimes[y];Object.keys(this.packet.viewTimes??{}).length===0&&delete this.packet.viewTimes;for(const[y,N]of Object.entries(g??{})){if(this.packet.preferredDecks===void 0)continue;const C=this.packet.preferredDecks[y];C!==void 0&&C===N&&delete this.packet.preferredDecks[y]}Object.keys(this.packet.preferredDecks??{}).length===0&&delete this.packet.preferredDecks;for(const[y,N]of Object.entries(k??{})){if(this.packet.puzzleSelections===void 0)continue;const C=this.packet.puzzleSelections[y];C!==void 0&&C===N&&delete this.packet.puzzleSelections[y]}Object.keys(this.packet.puzzleSelections??{}).length===0&&delete this.packet.puzzleSelections;for(const[y,N]of Object.entries(E??{})){if(this.packet.checkpoints===void 0)continue;const C=this.packet.checkpoints[y];C!==void 0&&(()=>{if(Object.keys(C).length===Object.keys(N).length){for(const[O,F]of Object.entries(N)){const K=C[Number(O)];if(K===void 0||K.turnNumber!==F.turnNumber||K.roomId!==F.roomId||K.timestamp!==F.timestamp||K.gainedScore!==F.gainedScore||K.serializedState!==F.serializedState)return}delete this.packet.checkpoints[y]}})()}Object.keys(this.packet.checkpoints??{}).length===0&&delete this.packet.checkpoints;for(const[y,N]of Object.entries(S??{})){if(this.packet.blockedTeams===void 0)continue;const C=this.packet.blockedTeams[y];C!==void 0&&C===N&&delete this.packet.blockedTeams[y]}if(Object.keys(this.packet.blockedTeams??{}).length===0&&delete this.packet.blockedTeams,this.packet.isInRing!==void 0&&v===this.packet.isInRing&&delete this.packet.isInRing,_!==void 0){if(this.packet.cutsceneChoices===void 0)throw new Error("expect cutscene choices to be prefix of packet");this.packet.cutsceneChoices.splice(0,_.length)}(this.packet.cutsceneChoices??[]).length===0&&delete this.packet.cutsceneChoices}startSync(){if(!this.tracker.snapshot())return null;if(!this.isDirty())return this.tracker.handleSyncResult(!0),null;const{factionScoreContributions:e,decks:t,answerSubmissions:s,unlocks:a,cardUnlocks:n,viewTimes:o,preferredDecks:l,puzzleSelections:i,checkpoints:c,blockedTeams:u}=this.packet;return{...this.packet,factionScoreContributions:e===void 0?void 0:{...e},decks:t===void 0?void 0:{...t},answerSubmissions:s===void 0?void 0:Object.fromEntries(Object.entries(s).map(([f,g])=>[f,g===null?null:{...g}])),unlocks:a===void 0?void 0:{...a},cardUnlocks:n===void 0?void 0:{...n},viewTimes:o===void 0?void 0:{...o},preferredDecks:l===void 0?void 0:{...l},puzzleSelections:i===void 0?void 0:{...i},checkpoints:c===void 0?void 0:{...c},blockedTeams:u===void 0?void 0:{...u}}}endSync(e){e!==null&&this.resolvePacket(e),this.tracker.handleSyncResult(e!==null)}}class xe{constructor(e){A(this,"isSyncInFlight");A(this,"pendingCallbacks");A(this,"runSyncAsync");this.isSyncInFlight=!1,this.pendingCallbacks=[],this.runSyncAsync=e}async triggerLoopAsync(){if(!this.isSyncInFlight){for(this.isSyncInFlight=!0;;){const e=this.pendingCallbacks.length;let t=!1;try{t=await this.runSyncAsync()}catch(s){console.error(s);break}for(const s of this.pendingCallbacks.splice(0,e))try{s()}catch(a){console.error(a)}if(t)break}this.isSyncInFlight=!1}}async triggerLoopAndWaitAsync(){await new Promise((e,t)=>{this.pendingCallbacks.push(e),this.triggerLoopAsync()})}}var de=(r=>(r.FAST="fast",r.MISC="misc",r.MASTERY_TREE="mastery_tree",r.DECK="deck",r.ROOM="room",r.CHECKPOINTS="checkpoints",r.ANSWER="answer",r))(de||{});class ze{constructor(e,t,s){A(this,"serverConfig");A(this,"syncType");A(this,"onDirtyStateChange");A(this,"revNumber");A(this,"syncedRevNumber");A(this,"modifyTime");A(this,"syncTime");A(this,"syncingRevNumber");this.serverConfig=e,this.syncType=t,this.onDirtyStateChange=s,this.revNumber=0,this.syncedRevNumber=0;const a=new Date().getTime();this.modifyTime=a,this.syncTime=a,this.syncingRevNumber=null}snapshot(){return this.revNumber===this.syncedRevNumber||this.modifyTime-this.syncTime<this.serverConfig.slowSyncThrottle[this.syncType]?!1:(this.syncingRevNumber=this.revNumber,this.onDirtyStateChange({type:Ve.SYNCING,lastSyncTime:this.syncTime}),!0)}handleModify(){const e=Date.now();this.revNumber===this.syncedRevNumber&&(this.syncTime=e),this.modifyTime=e,this.revNumber++,this.onDirtyStateChange({type:Ve.DIRTY,lastSyncTime:this.syncTime})}handleSyncResult(e){if(e){if(this.syncTime=new Date().getTime(),this.syncingRevNumber===null)throw new Error("no sync in progress");this.syncedRevNumber=this.syncingRevNumber}this.syncingRevNumber=null,this.onDirtyStateChange({type:e?Ve.SYNCED:Ve.FAILED,lastSyncTime:this.syncTime})}}class Yn{constructor(e,t,s,a,n){A(this,"server");A(this,"teamId");A(this,"puzName");A(this,"selectedPuzName");A(this,"selectedDeckSlot");A(this,"pendingGame");A(this,"checkpoints");A(this,"checkpointsSyncTracker");A(this,"subscriptions");A(this,"speedrunLeaderboardSummarySubscriptions");this.teamId=e,this.puzName=t,this.selectedPuzName=s,this.server=n,this.selectedDeckSlot=a,this.checkpoints={},this.checkpointsSyncTracker=new ze(this.server.config,de.CHECKPOINTS,o=>{this.server.dirtyStateTracker.update({teams:{[this.teamId]:{checkpoints:{[this.puzName]:o}}}})}),this.subscriptions=new Map,this.speedrunLeaderboardSummarySubscriptions=new Map}getTeamController(){return this.server.getTeamController(this.teamId)}getBattleGroupName(){return this.server.getBattleGroup(this.puzName).battleGroupName}wantsErrataFor(e){const{puzName:t,selectedPuzName:s}=this;return e===t||e===this.server.getBattleGroup(t).battleGroupName?!0:s===null?!1:e===s||e===this.server.getBattleGroup(s).battleGroupName}filterErrata(e){const t={};for(const[s,{puzzle:a,text:n,timestamp:o,published:l}]of Object.entries(this.server.errata))a!==null&&n!==""&&this.wantsErrataFor(a)&&(l||e.isAdmin)&&(t[s]={erratumId:s,text:n,timestamp:o,published:l});return t}broadcastErrataGlobalUpdate(e){const t=this.server.getSubscriptions({type:H.TEAM_BATTLE,teamId:this.teamId,puzName:this.puzName});for(const s of t.values())this.server.sendResp(s,{type:ue.GLOBAL_UPDATE,upd:{type:z.TEAM_BATTLE_UPDATE_STATE,errata:this.filterErrata(s),...e}})}getActiveRoom(){return this.server.gameRoomsController.getActiveRoom(this.teamId,this.puzName)}setActiveRoom(e){this.server.gameRoomsController.setActiveRoom(this.teamId,this.puzName,e.roomId)}getRoomStatus(){const e=this.getActiveRoom();if(e===null)return je.NONE;const{gameState:t}=e.engine;return t.phase===lr.ACTIVE?je.ACTIVE:je.INACTIVE}getRoomPuzName(){const e=this.getActiveRoom();return e===null?null:e.engine.puzName}isRoomActive(){return this.getRoomStatus()===je.ACTIVE}getInspector(){if(this.selectedPuzName===null)throw new Error("need puzzle selection to get inspector");return this.server.gameRoomsController.getInspector(this.selectedPuzName)}getPlayerInGameState(e){const t=[h.P1,h.P2].filter(s=>{const{teamData:a}=e[s];return a!==void 0&&a.teamId===this.teamId});if(t.length!==1&&this.selectedPuzName!=="vanilla")throw new Error("team not uniquely part of active game");return t[0]}getPlayer(){const e=this.getActiveRoom();if(e===null)throw new Error("player not defined if there's no active game");const{gameState:t}=e.engine;return this.getPlayerInGameState(t)}getActiveGameTeamData(){const e=this.getActiveRoom();if(e===null)throw new Error("tried to get team data without an active game");const{teamData:t}=e.engine.gameState[this.getPlayer()];if(t===void 0)throw new Error("expect team data to be present in active game");return t}getActiveGameDeckSelection(){const e=this.getActiveRoom();if(e===null)throw new Error("tried to get team data without an active game");return e.engine.gameState.engineOnly.deckSelections[this.getPlayer()]??null}leaveActiveGame(){const e=this.getActiveRoom();if(e===null)return[];const t=[...e.members.values()].filter(s=>{const{teamId:a,spectateTeamId:n}=s.conn;if(a===void 0)throw new Error("expect conn to be authenticated if it is joined to a room");return a===this.teamId||n===this.teamId});for(const s of t)this.server.kickRoomMember(s);return t}commitDeckSelection(e,t,s){if(this.isRoomActive())throw new Error("don't expect to set up a new game while a game is active");const a=this.getInspector(),n=e.filter(c=>a.getDeckOverride(c)===null),{deckSelection:o,err:l}=this.resolveDeckForBattle(n,t,s);if(l!==void 0)return{err:l};this.pendingGame={deckSelection:o};const i={};if(o===null){if(n.length>0&&!a.isNoDeckAllowed())throw new Error("expect a deck selection if players need decks")}else if(o!==null)for(const c of n)i[c]=o;return{deckSelections:i}}moveConnsIntoRoom(e,t){const s=this.leaveActiveGame();for(const{conn:a,role:n}of s)this.server.joinConnToRoom(a,e,n===ae.GOD?n:t)}activateGame(e,t){const s=this.getInspector();if(t??(t=s.getDefaultRole()),this.moveConnsIntoRoom(e,t),this.pendingGame===void 0)throw new Error("no pending game to activate");delete this.pendingGame,this.setActiveRoom(e),this.handleRoomStatusChange()}getLockedDeckSelection(){var e;return this.isRoomActive()?this.getActiveGameDeckSelection():((e=this.pendingGame)==null?void 0:e.deckSelection)??null}getClientActiveGameState(){const e=this.getActiveRoom();if(!this.isRoomActive())return null;if(e===null)throw new Error("expect an active game if the room status is active");const{enabledMasteries:t,faction:s}=this.getActiveGameTeamData();return{enabledMasteries:t,faction:s}}broadcastTeamBattleGlobalUpdate(e){this.server.broadcastGlobalUpdate({type:H.TEAM_BATTLE,teamId:this.teamId,puzName:this.puzName},e)}broadcastTeamSpeedrunLeaderboardSummaryGlobalUpdate(e){this.server.broadcastGlobalUpdate({type:H.TEAM_SPEEDRUN_LEADERBOARD_SUMMARY,teamId:this.teamId,puzName:this.puzName},e)}handleRoomStatusChange(){const{teamId:e,puzName:t}=this,s=this.getRoomStatus();this.server.broadcastGlobalUpdate({type:H.TEAM,teamId:e},{type:z.TEAM_UPDATE_PUZZLE,puzName:t,roomStatus:s}),this.broadcastLockedDeckSelection(),this.broadcastTeamBattleGlobalUpdate({type:z.TEAM_BATTLE_UPDATE_STATE,activeGame:this.getClientActiveGameState(),roomPuzName:this.getRoomPuzName()}),t===$e&&this.server.handleTeamSummaryUpdate(this.teamId,{isPvPGameActive:this.isRoomActive()})}broadcastLockedDeckSelection(){this.broadcastTeamBattleGlobalUpdate({type:z.TEAM_BATTLE_UPDATE_STATE,lockedDeckSelection:this.getLockedDeckSelection()})}summarizeCheckpoints(){return Object.fromEntries(Object.entries(this.checkpoints).map(([e,{turnNumber:t,roomId:s,timestamp:a}])=>[e,{turnNumber:t,roomId:s,timestamp:a}]))}makeCheckpoint(e,t){const{roomId:s,gameState:a}=e,n={selectedPuzName:this.selectedPuzName,gameState:a},o={turnNumber:a.turnNumber,roomId:s,timestamp:Date.now(),gainedScore:a.engineOnly.gainedScore,serializedState:JSON.stringify(n)};for(const l of t)this.checkpoints[l]=o;this.handleCheckpointsChange()}restoreCheckpoint(e,t){if(!Ua(t))return this.server.sendErr(e,{errCode:B.INVALID_CHECKPOINT_SLOT});const s=this.getActiveRoom();if(s===null){this.server.sendErr(e,{errCode:B.NO_ROOM});return}const{gameState:a}=s.engine,n=this.checkpoints[t];if(n===void 0){this.server.sendErr(e,{errCode:B.NO_CHECKPOINT});return}const o=JSON.parse(n.serializedState);if(o.selectedPuzName!==null&&this.selectPuzzle(o.selectedPuzName,!0)!==null)throw new Error("should not encounter error re-selecting the old puzz");const l=this.getPlayerInGameState(o.gameState),i=o.gameState.engineOnly.deckSelections[l],c=(i==null?void 0:i.slot)??null;if(c!==null&&this.selectDeck(c,!0)!==null)throw new Error("should not encounter error re-selecting the old deck");for(const k of[h.P1,h.P2]){const{teamData:E}=o.gameState[k];E!==void 0&&(E.isReplay=this.server.getTeamController(E.teamId).solveTimes.has(o.gameState.puzName))}o.gameState.engineOnly.gainedScore=n.gainedScore;const u=a.puzName===o.gameState.puzName,f=this.restoreSavedRoom({roomId:this.server.genGameRoomId(),puzName:o.gameState.puzName,hostPuzName:this.puzName,createTime:new Date().getTime(),savedRoom:{gameState:u?a:o.gameState}});if(f===null)throw new Error("expect restore room to succeed");u&&this.server.useUpdatesContext(f,()=>{f.engine.broadcastOverrideState(o.gameState)}),this.handleRoomStatusChange();const g=n.roomId;for(const[k,E]of Object.entries(this.checkpoints))E.roomId===g&&(this.checkpoints[Number(k)]={...E,roomId:f.roomId});this.handleCheckpointsChange()}handleCheckpointsChange(){this.checkpointsSyncTracker.handleModify(),this.broadcastTeamBattleGlobalUpdate({type:z.TEAM_BATTLE_UPDATE_STATE,checkpointSummaries:this.summarizeCheckpoints()})}handleRoomComplete(e,t){for(const[s,a]of Object.entries(this.checkpoints))a.roomId===e&&(this.checkpoints[Number(s)]={...a,gainedScore:t});this.handleCheckpointsChange(),this.handleRoomStatusChange()}resign(){const e=this.getActiveRoom();return e===null?{errCode:B.NO_ROOM}:(this.isRoomActive()&&this.server.sendSystemStep(e,{type:V.SYSTEM_RESIGN,player:this.getPlayer()}),null)}handleEnterGameRoom(e){const{conn:t,role:s}=e,a=this.getActiveRoom();if(a===null){this.server.sendEnterRoomErr(e,{errCode:B.NO_ROOM});return}if(s!==void 0&&!t.isAdmin){this.server.sendEnterRoomErr(e,{errCode:B.PERMISSION_DENIED});return}const n=(()=>{switch(this.getPlayer()){case h.P1:return ae.P1;case h.P2:return ae.P2}})();this.server.completeEnterRoom({...e,role:s??n},a)}selectPuzzle(e,t){if(this.selectedPuzName!==null&&this.selectedPuzName===e)return null;if(this.getBattleGroupName()!==ht)return{errCode:B.INVALID_PUZZLE};if(this.isRoomActive()&&!t)return{errCode:B.LOCKED_BY_BATTLE};if(e!==null){const s=this.server.puzzlesDB.tryGetPuzzle(e),a=this.server.puzzlesDB.tryGetBattleGroup(e);if(s===null||a===null)return{errCode:B.INVALID_PUZZLE};if(!Ma(s.answer!==null,s.puzName,s.battleGroupName,a.numPuzzles))return{errCode:B.INVALID_PUZZLE}}return this.selectedPuzName=e,this.getTeamController().mergeSlowSyncPacket({puzzleSelections:{[this.puzName]:e}}),this.server.bigBoardStateTracker.updateTeam(this.teamId,{selectedPuzzles:{[this.puzName]:e}}),this.broadcastErrataGlobalUpdate({selectedPuzName:e}),null}selectDeck(e,t){return e===this.selectedDeckSlot?null:this.isRoomActive()&&!t?{errCode:B.LOCKED_BY_BATTLE}:(this.selectedDeckSlot=e,this.getTeamController().mergeSlowSyncPacket({preferredDecks:{[this.puzName]:e}}),this.broadcastTeamBattleGlobalUpdate({type:z.TEAM_BATTLE_UPDATE_STATE,selectedDeckSlot:e}),null)}resolveDeckForBattle(e,t,s){if(e.length<=0)return{deckSelection:null};const{selectedDeckSlot:a}=this,n=this.getActiveRoom(),o=this.getInspector();if((t??!1)&&n!==null)return{deckSelection:this.getActiveGameDeckSelection()};if(a===null)return o.isNoDeckAllowed()?{deckSelection:null}:s??!1?{deckSelection:{slot:null,deck:{displayName:"autogen deck",cards:{}}}}:{err:{errCode:B.NEED_DECK}};const l=this.getTeamController().getDeckController(a).deck;for(const i of e){const c=new Set;if(o.validateDeck(c,i,l),!(s??!1)&&c.size!==0)return{err:{errCode:B.INVALID_DECK}}}return{deckSelection:{slot:a,deck:La(l)}}}restoreSavedRoom(e){const{roomId:t,hostPuzName:s,puzName:a,savedRoom:n}=e;if(n===void 0)return null;this.selectPuzzle(a);const o=this.server.gameRoomsController.rooms.get(t),l=(o==null?void 0:o.room)??this.server.gameRoomsController.createRoomFromGameState(a,s,JSON.parse(JSON.stringify(n.gameState)),t),i=(()=>{switch(this.getPlayerInGameState(l.engine.gameState)){case h.P1:return ae.P1;case h.P2:return ae.P2}})();return this.moveConnsIntoRoom(l,i),this.setActiveRoom(l),l}}const Wn=60*1e3,Fs=r=>{const e=new Date().getTime(),{expiryTime:t}=r;return e>t};class Vn{constructor(e,t,s){A(this,"teamId");A(this,"server");A(this,"outgoingRequests");A(this,"incomingRequests");A(this,"blockedTeams");A(this,"subscriptions");this.teamId=e,this.server=s,this.outgoingRequests=new Map,this.incomingRequests=new Map,this.blockedTeams=new Set(t),this.subscriptions=new Map}getTeamController(){return this.server.getTeamController(this.teamId)}getBattleController(){return this.getTeamController().getBattleController($e)}claimTimeVictory(){const e=this.getBattleController().getActiveRoom();if(e===null)return{errCode:B.NO_ROOM};const{gameState:t}=e.engine,s=Ba(this.getBattleController().getPlayer()),{teamData:a,startTurnTime:n}=t[s]??{};if(!a)throw new Error("pvp opponent not found");return!n||Date.now()-n<Ga||this.server.sendSystemStep(e,{type:V.SYSTEM_TIME_OUT,player:s}),null}getHasMastery(){return this.getTeamController().masteryTreeController.getEnabledMasteries().has(et)}broadcastTeamPvPGlobalUpdate(e){this.server.broadcastGlobalUpdate({type:H.TEAM_PVP,teamId:this.teamId},e)}isGameActive(){return this.getBattleController().isRoomActive()}validateOpponentTeamId(e){if(e===this.teamId)return null;const t=this.server.teamControllers.get(e);return t===void 0?null:t.pvpController}commitDeckSelection(){const e=this.getBattleController();if(e.pendingGame!==void 0)return null;const{err:t}=e.commitDeckSelection([h.P1,h.P2]);return t??null}handleUnlockDeck(e){if(this.isGameActive())return{errCode:B.LOCKED_BY_BATTLE};this.clearOutgoingRequests();const t=this.getBattleController();return delete t.pendingGame,t.broadcastLockedDeckSelection(),null}makePvPRequest(e){const t=this.validateOpponentTeamId(e);if(t===null)return{errCode:B.INVALID_TEAM};if(this.blockedTeams.has(e))return{errCode:B.BLOCKED_BY_REQUESTER};if(t.blockedTeams.has(this.teamId))return{errCode:B.BLOCKED_BY_TARGET};if(this.isGameActive())return{errCode:B.ROOM_BUSY};if(!this.getHasMastery())return{errCode:B.NO_MASTERY};if(!t.getHasMastery())return{errCode:B.TARGET_NO_MASTERY};const s=this.outgoingRequests.get(e);if(s!==void 0)if(Fs(s))this.clearRequest(s,!1);else return{errCode:B.DUPLICATE_REQUEST};const a=this.commitDeckSelection();if(a!==null)return a;const n={fromTeamId:this.teamId,toTeamId:e,expiryTime:new Date().getTime()+Wn};return this.outgoingRequests.set(e,n),t.incomingRequests.set(this.teamId,n),this.getBattleController().broadcastLockedDeckSelection(),this.broadcastTeamPvPGlobalUpdate({type:z.TEAM_PVP_UPDATE_STATE,outgoingRequestsToAdd:[n]}),t.broadcastTeamPvPGlobalUpdate({type:z.TEAM_PVP_UPDATE_STATE,incomingRequestsToAdd:[n]}),this.server.broadcastRespToTeam(e,{type:ue.NOTIFICATION,notif:{type:tt.PVP_REQUEST_RECEIVED}}),null}handleMakePvPRequest(e,t){const s=this.makePvPRequest(e);if(s!==null)return s;if(t??!1){const a=this.validateOpponentTeamId(e);if(a===null)return{errCode:B.INVALID_TEAM};const n=a.acceptPvPRequest(this.teamId,void 0,!0);if(n!==null)return n}return null}handleCancelPvPRequest(e,t){if(this.validateOpponentTeamId(t)===null)return{errCode:B.INVALID_TEAM};const a=this.outgoingRequests.get(t);return a!==void 0&&this.clearRequest(a,!0),this.unlockDeckIfUnneeded(),null}setIsTeamBlocked(e,t,s){const a=this.validateOpponentTeamId(t);if(a===null)return{errCode:B.INVALID_TEAM};if(s){this.blockedTeams.add(t);const n=this.outgoingRequests.get(t);n!==void 0&&this.clearRequest(n,!0);const o=this.incomingRequests.get(t);o!==void 0&&this.clearRequest(o,!0)}else this.blockedTeams.delete(t);return this.getTeamController().mergeSlowSyncPacket({blockedTeams:{[t]:s}}),this.broadcastTeamPvPGlobalUpdate({type:z.TEAM_PVP_UPDATE_STATE,blockedTeamsToAdd:s?[t]:void 0,blockedTeamsToDelete:s?void 0:[t]}),a.broadcastTeamPvPGlobalUpdate({type:z.TEAM_PVP_UPDATE_STATE,blockedByTeamsToAdd:s?[this.teamId]:void 0,blockedByTeamsToDelete:s?void 0:[this.teamId]}),null}enterRing(){if(!this.getHasMastery())return{errCode:B.NO_MASTERY};const{ring:e}=this.server.pvpLobbyController;e.indexOf(this.teamId)===-1&&(e.push(this.teamId),this.getTeamController().mergeSlowSyncPacket({isInRing:!0}),this.server.pvpLobbyController.broadcastPvPGlobalUpdate({type:z.PVP_UPDATE_STATE,ringTeamsToAdd:[this.teamId]}));for(const s of e)this.makePvPRequest(s);return null}leaveRing(){const{ring:e}=this.server.pvpLobbyController,t=e.indexOf(this.teamId);t!==-1&&(e.splice(t,1),this.getTeamController().mergeSlowSyncPacket({isInRing:!1}),this.server.pvpLobbyController.broadcastPvPGlobalUpdate({type:z.PVP_UPDATE_STATE,ringTeamsToDelete:[this.teamId]}))}acceptPvPRequest(e,t,s){this.clearExpiredRequests();const a=this.validateOpponentTeamId(e);if(a===null)return{errCode:B.INVALID_TEAM};if(this.incomingRequests.get(e)===void 0)return{errCode:B.NO_PVP_REQUEST};if(this.isGameActive())return{errCode:B.ROOM_BUSY};if(!this.getHasMastery())return{errCode:B.NO_MASTERY};if(!a.getHasMastery())return{errCode:B.TARGET_NO_MASTERY};const o=this.commitDeckSelection();if(o!==null)return o;this.clearAllRequestsAndLeaveRing(),a.clearAllRequestsAndLeaveRing();const l=this.getBattleController(),i=a.getBattleController();if(l.pendingGame===void 0||i.pendingGame===void 0)throw new Error("expect game setup for pvp teams to be ready");const c=l.pendingGame.deckSelection,u=i.pendingGame.deckSelection;if(c===null||u===null)throw new Error("expect deck selections pvp teams to be defined");const f=s??!1?!0:Math.random()*2<1,g=this.server.gameRoomsController.createRoom($e,$e,{[h.P1]:f?this.teamId:e,[h.P2]:f?e:this.teamId},{[h.P1]:f?c:u,[h.P2]:f?u:c},t);return l.activateGame(g,f?ae.P1:ae.P2),i.activateGame(g,f?ae.P2:ae.P1),this.server.broadcastRespToTeam(e,{type:ue.NOTIFICATION,notif:{type:tt.PVP_REQUEST_ACCEPTED}}),null}clearRequest(e,t){const{fromTeamId:s,toTeamId:a}=e,n=this.server.getTeamController(s).pvpController,o=this.server.getTeamController(a).pvpController;n.outgoingRequests.delete(a),o.incomingRequests.delete(s),t&&(n.broadcastTeamPvPGlobalUpdate({type:z.TEAM_PVP_UPDATE_STATE,outgoingRequestsToDelete:[a]}),o.broadcastTeamPvPGlobalUpdate({type:z.TEAM_PVP_UPDATE_STATE,incomingRequestsToDelete:[s]}))}clearExpiredRequests(){for(const e of[...this.incomingRequests.values(),...this.outgoingRequests.values()].filter(Fs))this.clearRequest(e,!1)}clearOutgoingRequests(){for(const e of this.outgoingRequests.values())this.clearRequest(e,!1);this.broadcastTeamPvPGlobalUpdate({type:z.TEAM_PVP_UPDATE_STATE,clearOutgoingRequests:!0})}clearAllRequestsAndLeaveRing(){for(const e of[...this.incomingRequests.values(),...this.outgoingRequests.values()])this.clearRequest(e,!1);this.broadcastTeamPvPGlobalUpdate({type:z.TEAM_PVP_UPDATE_STATE,clearOutgoingRequests:!0,clearIncomingRequests:!0}),this.leaveRing()}unlockDeckIfUnneeded(){if(this.isGameActive()||(this.clearExpiredRequests(),this.outgoingRequests.size>0))return;const e=this.getBattleController();e.pendingGame!==void 0&&(delete e.pendingGame,e.broadcastLockedDeckSelection())}}class jn{constructor(e){A(this,"server");A(this,"ring");A(this,"subscriptions");this.server=e,this.ring=[],this.subscriptions=new Map}broadcastPvPGlobalUpdate(e){this.server.broadcastGlobalUpdate({type:H.PVP},e)}}class Ks{constructor(e,t,s,a,n){A(this,"teamId");A(this,"puzName");A(this,"server");A(this,"numWrongGuesses");A(this,"numExtraGuesses");A(this,"recentSubmissions");A(this,"pendingAnswerSubmissionTasks");A(this,"syncTracker");A(this,"subscriptions");this.teamId=e,this.puzName=t,this.server=n,this.numWrongGuesses=s,this.numExtraGuesses=a,this.recentSubmissions=[],this.pendingAnswerSubmissionTasks=[],this.syncTracker=new ze(this.server.config,de.ANSWER,o=>{this.server.dirtyStateTracker.update({teams:{[this.teamId]:{answers:{[this.puzName]:o}}}})}),this.subscriptions=new Map}getTeamController(){return this.server.getTeamController(this.teamId)}getGlobalUpdatesScope(){return{type:H.TEAM_FISH_PUZZLE,teamId:this.teamId,puzName:this.puzName}}getNumGuessesRemaining(){return this.server.maxGuessesPerPuzzle+this.numExtraGuesses-this.numWrongGuesses}handleUpdateNumWrongGuesses(){this.server.bigBoardStateTracker.updateTeam(this.teamId,{unlocks:{[this.puzName]:{numWrongGuesses:this.numWrongGuesses}}}),this.handleUpdateNumGuessesRemaining()}handleUpdateNumGuessesRemaining(){this.server.broadcastGlobalUpdate(this.getGlobalUpdatesScope(),{type:z.TEAM_FISH_PUZZLE_SET_NUM_GUESSES_REMAINING,numGuessesRemaining:this.getNumGuessesRemaining()})}async addSubmissionTask(e){if(this.server.numPendingSubmissionTasks++,this.syncTracker.handleModify(),this.pendingAnswerSubmissionTasks.push(e),!(this.pendingAnswerSubmissionTasks.length>1)){for(this.syncTracker.snapshot();this.pendingAnswerSubmissionTasks.length>0;){const{answer:t,onDone:s,onError:a}=this.pendingAnswerSubmissionTasks[0];try{this.server.checkAnswerMetrics.record();const n=await this.server.runWithSyncThrottleAsync(async()=>await this.server.backend.checkAnswer({teamId:this.teamId,puzName:this.puzName,answer:t}));if(n!==void 0){if(n.type===xa.SUCCESS){const{submittedAnswer:o,isCorrect:l}=n,i={teamId:this.teamId,puzName:this.puzName,answer:o,isCorrect:l,timestamp:new Date().getTime(),usedFreeAnswer:!1};await this.getTeamController().handleTeamUpdatesAsync({answerSubmissionsToAdd:[i]}),this.recentSubmissions.push(i),l||(this.numWrongGuesses++,this.handleUpdateNumWrongGuesses()),this.server.broadcastGlobalUpdate(this.getGlobalUpdatesScope(),{type:z.TEAM_FISH_PUZZLE_ADD_GUESS,submission:{submittedAnswer:i.answer,timestamp:i.timestamp}})}s(n)}}catch(n){console.error(n),a()}finally{this.pendingAnswerSubmissionTasks.shift(),this.server.numPendingSubmissionTasks--}}this.syncTracker.handleSyncResult(!0)}}async handleSubmitAnswerAsync(e,t){const s=await new Promise((a,n)=>{this.addSubmissionTask({answer:t,onDone:o=>{a(o)},onError:()=>{n()}})});this.server.sendResp(e,{type:ue.SUBMIT_ANSWER_ACK,resp:s})}async handleMyosbRequest(e,t){const{ansString:s,possible:a}=ja,n=s[a.filter(o=>new Set(o.map(([l,i])=>{var c;return(c=t[l])==null?void 0:c[i]})).size===5).length];this.puzName===Vt&&this.server.sendResp(e,{type:ue.MYOSB_RESPONSE,resp:`Our solvers have solved your puzzle and extracted the letter ${n}.`})}}class Ys{constructor(e,t,s,a){A(this,"teamId");A(this,"slot");A(this,"server");A(this,"deck");A(this,"slowSyncTracking");this.teamId=e,this.slot=t,this.server=a,this.deck=s,this.slowSyncTracking={tracker:new ze(this.server.config,de.DECK,n=>{this.server.dirtyStateTracker.update({teams:{[this.teamId]:{decks:{[this.slot]:n}}}})})}}getTeamController(){return this.server.getTeamController(this.teamId)}overrideDeck(e){const t={},s={displayName:e.displayName,cards:t};for(const[a,n]of Object.entries(this.deck.cards))t[a]=0;for(const[a,n]of Object.entries(e.cards))t[a]=n;this.handleDeckUpdate(s)}handleDeckUpdate(e){za(this.deck,e),this.slowSyncTracking.tracker.handleModify(),this.server.broadcastGlobalUpdate({type:H.TEAM_DECKS,teamId:this.teamId},{type:z.TEAM_DECKS_UPDATE_DECK,slot:this.slot,deckUpd:e})}handleDeckbuildingStep(e){const{cardUnlocks:t}=this.getTeamController();Ha(e,this.deck,new Set(t.keys()),this.server.cardsDB)&&this.handleDeckUpdate(e)}}class Xn{constructor(e,t,s){A(this,"teamId");A(this,"server");A(this,"masteryTree");A(this,"enabledMasteries");A(this,"slowSyncTracking");A(this,"subscriptions");this.teamId=e,this.server=s,this.masteryTree=t,this.enabledMasteries=this.updateEnabledMasteries(),this.slowSyncTracking={tracker:new ze(this.server.config,de.MASTERY_TREE,a=>{this.server.dirtyStateTracker.update({teams:{[this.teamId]:{masteryTree:a}}})})},this.subscriptions=new Map}getTeamController(){return this.server.getTeamController(this.teamId)}updateEnabledMasteries(){return this.enabledMasteries=new Set(Fa(this.server.masteriesDB,this.masteryTree).map(({masteryId:e})=>e)),this.enabledMasteries}overrideMasteryTree(e){this.masteryTree;const t={reset:!0,newPlacements:Object.values(e.placements),masteriesListOverride:e.masteriesListOverride};this.handleMasteryTreeUpdate(t)}handleMasteryTreeUpdate(e){const t=this.getTeamController(),s=this.getEnabledMasteries();Ka(this.masteryTree,e),this.slowSyncTracking.tracker.handleModify(),this.updateEnabledMasteries();const a=this.getEnabledMasteries();this.server.broadcastGlobalUpdate({type:H.TEAM_MASTERY_TREE,teamId:this.teamId},{type:z.TEAM_MASTERY_TREE_UPDATE,masteryTreeUpd:e});const n=[...a].filter(c=>!s.has(c)),o=[...s].filter(c=>!a.has(c));t.handleTeamUpdatesAsync({answerSubmissionsToAdd:[...a].map(c=>es(this.teamId,c,new Date().getTime())),unlocksToAdd:a.size===Object.keys(this.server.masteriesDB).length?[{teamId:this.teamId,puzName:jt,timestamp:new Date().getTime()}]:void 0});const l=new Set([...n,...o]);if(l.has(Xt)||l.has(et)){const c=a.has(Xt),u=a.has(et);if(this.server.handleTeamSummaryUpdate(this.teamId,{hasReputationBoost:c,hasPvP:u}),!u){const{pvpController:f}=t;f.clearAllRequestsAndLeaveRing()}}n.includes(ts)&&t.broadcastTeamGlobalUpdate({type:z.TEAM_UPDATE_PUZZLE_STATS,stats:Object.fromEntries([...t.unlockTimes.keys()].flatMap(c=>this.server.puzzlesDB.battleGroups.has(c)?[[c,this.server.statsController.getPuzzleStats(c)]]:[]))});const i={...Object.fromEntries(n.map(c=>[c,!0])),...Object.fromEntries(o.map(c=>[c,!1]))};t.broadcastTeamGlobalUpdate({type:z.TEAM_UPDATE_STATE,enabledMasteries:i}),this.server.bigBoardStateTracker.updateTeam(this.teamId,{enabledMasteries:i})}handleMasteryTreeStep(e){const t=this.getTeamController(),{puzzlesDB:s}=this.server,a=[...t.solveTimes.keys()].flatMap(n=>{const{battleGroupName:o,answer:l}=s.getPuzzle(n);return n===Zt?[]:l===null?[]:Ya(l)});Wa(this.masteryTree,a,e)&&this.handleMasteryTreeUpdate(Va(e))}getEnabledMasteries(){return this.enabledMasteries}}class Zn{constructor(e,t,s){A(this,"isInactive");A(this,"isHidden");A(this,"isTempBlocked");A(this,"userId");A(this,"teamId");A(this,"displayName");A(this,"faction");A(this,"factionScoreContributions");A(this,"members");A(this,"server");A(this,"deckControllers");A(this,"masteryTreeController");A(this,"battleControllers");A(this,"fishPuzzleControllers");A(this,"pvpController");A(this,"views");A(this,"cardUnlocks");A(this,"unlockTimes");A(this,"solveTimes");A(this,"speedrunTimes");A(this,"cachedSpeedrunInfo");A(this,"subscriptions");A(this,"decksSubscriptions");A(this,"membersSubscriptions");A(this,"backendOwned");A(this,"numAuthsMetrics");A(this,"numRequestsMetrics");A(this,"fastSyncTracking");A(this,"slowSyncTracking");const{userId:a,displayName:n,isHidden:o,isInactive:l,faction:i,factionScoreContributions:c,members:u,decks:f,masteryTree:g,views:k,cardUnlocks:E,unlockTimes:S,solveTimes:v,speedrunTimes:_,numWrongGuesses:y,preferredDecks:N,puzzleSelections:C,checkpoints:O,blockedTeams:F,isInRing:K,backendOwned:q}=t;this.userId=a,this.teamId=e,this.displayName=n,this.faction=i,this.factionScoreContributions=c,this.members=u,this.server=s,this.deckControllers=new Array(ir).fill(null);for(const{slot:Y,deck:te}of f){if(Y<0||Y>=this.deckControllers.length)throw new Error(`deck slot ${Y} from backend out of bounds`);this.deckControllers[Y]=new Ys(this.teamId,Y,te,this.server)}this.masteryTreeController=new Xn(e,g??{placements:{},connectedAnswers:[]},s),this.battleControllers=new Map,this.fishPuzzleControllers=new Map,this.pvpController=new Vn(e,Object.keys(F),s),this.views=new Set(k),this.cardUnlocks=new Map(Object.entries(E)),this.unlockTimes=new Map(Object.entries(S)),this.solveTimes=new Map(Object.entries(v)),this.speedrunTimes=new Map(Object.entries(_)),this.subscriptions=new Map,this.decksSubscriptions=new Map,this.membersSubscriptions=new Map,this.numAuthsMetrics=new be(Ne),this.numRequestsMetrics=new be(Ne),this.fastSyncTracking={syncLoopController:new xe(async()=>{try{return await this.runFastSyncAsync()}catch(Y){return console.error(Y),!1}}),syncController:new Hs(this.server.config,de.FAST,Y=>{this.server.dirtyStateTracker.update({teams:{[this.teamId]:{fastSync:Y}}})})},this.slowSyncTracking={syncController:new Hs(this.server.config,de.MISC,Y=>{this.server.dirtyStateTracker.update({teams:{[this.teamId]:{misc:Y}}})})};for(const[Y,{answer:te}]of this.server.puzzlesDB.puzzles.entries()){if(te===null)continue;const $=y[Y]??0,Z=q.extraGuesses[Y]??0;($>0||Z!==0)&&this.fishPuzzleControllers.set(Y,new Ks(this.teamId,Y,$,Z,this.server))}for(const[Y,te]of Object.entries(N))this.getBattleController(Y).selectedDeckSlot=te;for(const[Y,te]of Object.entries(C))this.getBattleController(Y).selectedPuzName=te;for(const[Y,te]of Object.entries(O))this.getBattleController(Y).checkpoints=te;K&&this.masteryTreeController.getEnabledMasteries().has(et)&&this.server.pvpLobbyController.ring.push(e),this.backendOwned=q,this.isInactive=l,this.isHidden=o,this.isTempBlocked=!1}initStats(){this.server.statsController.handleTeamUpdates(this.teamId,{factionScoreChanges:{...this.factionScoreContributions},updateFactionHistory:!1,unlocksToAdd:[...this.unlockTimes.keys()],solvesToAdd:[...this.solveTimes.keys()],speedrunTimes:Object.fromEntries(this.speedrunTimes.entries()),solveTimes:Object.fromEntries(this.solveTimes.entries())})}initRooms(e){for(const t of Object.values(e)){const{puzName:s,hostPuzName:a}=t;this.unlockTimes.has(s)&&this.getBattleController(a).restoreSavedRoom(t)}}broadcastTeamGlobalUpdate(e){this.server.broadcastGlobalUpdate({type:H.TEAM,teamId:this.teamId},e)}getDeckController(e){const t=this.deckControllers[e];if(t!==null)return t;new Date().getTime();const s=Xa(e),a=new Ys(this.teamId,e,s,this.server);return this.deckControllers[e]=a,a.handleDeckUpdate({}),a}isValidBattle(e){if(!this.unlockTimes.has(e))return!1;const{battleGroupName:t}=this.server.puzzlesDB.getPuzzle(e),{answer:s}=this.server.puzzlesDB.getPuzzle(t);if(s!==null)return!1;const{numPuzzles:a}=this.server.puzzlesDB.getBattleGroup(t);return!(a>1&&e===t)}isValidFishPuzzle(e){if(!this.unlockTimes.has(e))return!1;const{answer:t,battleGroupName:s}=this.server.puzzlesDB.getPuzzle(e);return!(t===null||e===Zt&&!this.unlockTimes.has(jt))}getBattleController(e){const t=this.battleControllers.get(e);if(t!==void 0)return t;const{battleGroupName:s}=this.server.getBattleGroup(e),a=s===ht,n=new Yn(this.teamId,e,a?null:e,null,this.server);return this.battleControllers.set(e,n),n}getFishPuzzleController(e){const t=this.fishPuzzleControllers.get(e);if(t!==void 0)return t;const s=new Ks(this.teamId,e,0,0,this.server);return this.fishPuzzleControllers.set(e,s),s}isPuzzleUnlocked(e){return this.unlockTimes.has(e)}getClientPuzzleState(e){const t=this.server.puzzlesDB.getPuzzle(e),{answer:s}=t,a=this.unlockTimes.get(e);if(a===void 0)throw new Error(`tried to get client state for locked puzzle ${e}`);const{battleGroupName:n,order:o}=t,l={puzName:e,battleGroupName:n,order:o,hasAnswer:s!==null?!0:void 0,isNew:!this.views.has(e),speedrunTime:this.speedrunTimes.get(e),unlockTime:a,solveTime:this.solveTimes.get(e),puzPrompt:e===jt?{header:"Restoring peace",text:"With your newfound mastery over the cards, you realize what you need to do next. What do you need to restore peace among the factions?"}:void 0};s!==null&&this.solveTimes.has(e)&&(l.answer=s);const i=this.battleControllers.get(e);if(i!==void 0){const c=i.getRoomStatus();c!==je.NONE&&(l.roomStatus=c)}return l}getClientBattleGroupState(e){const{displayName:t,mapPos:s,isLegendary:a,preBattleDialogue:n,postBattleDialogue:o,numPuzzles:l}=this.server.getBattleGroup(e),i=this.server.puzzlesDB.getPuzzle(e),{isCutscene:c,answer:u}=i,f={battleGroupName:e,displayName:t,isCutscene:c?!0:void 0,isLegendary:a?!0:void 0,preBattleDialogue:n,postBattleDialogue:this.solveTimes.has(e)?o:void 0,numPuzzles:l!==1?l:void 0,mapPos:s};return this.masteryTreeController.getEnabledMasteries().has(ts)&&(f.stats=this.server.statsController.getPuzzleStats(e)),f}getLeaderboardNumSolves(){return[...this.solveTimes.keys()].filter(e=>{const t=this.server.puzzlesDB.puzzles.get(e);if(t===void 0)throw new Error("expect solved puzzles to be in puzzlesDB");return _s(e,t.battleGroupName,t.isCutscene)}).length}getClientAdminData(){const{userId:e,displayName:t,isHidden:s,isInactive:a,isTempBlocked:n}=this;return{userId:e,displayName:t,isHidden:s,isInactive:a,isTempBlocked:n}}getHintsUsedMap(){const e={};for(const t of this.backendOwned.hintsUsed)e[t]=(e[t]??0)+1;return e}getClientBigBoardState(){const e=this.getHintsUsedMap();return{numHintsTotal:this.backendOwned.hintsTotal,unlocks:Object.fromEntries(Array.from(this.unlockTimes.keys(),t=>{const{numWrongGuesses:s}=this.fishPuzzleControllers.get(t)??{};return[t,{solveTime:this.solveTimes.get(t),numHintsUsed:e[t],numWrongGuesses:s,numMembers:this.server.gameRoomsController.getNumRoomMembers(this.teamId,t)}]})),cardUnlocks:Object.fromEntries(Array.from(this.cardUnlocks.keys(),t=>[t,!0])),selectedPuzzles:Object.fromEntries([...this.battleControllers.values()].flatMap(({puzName:t,selectedPuzName:s})=>s===null||s===t?[]:[[t,s]])),enabledMasteries:Object.fromEntries(Array.from(this.masteryTreeController.getEnabledMasteries(),t=>[t,!0]))}}getLastSolveTime(){return this.solveTimes.size===0?void 0:Math.max(0,...[...this.solveTimes.entries()].filter(([e,t])=>{const{battleGroupName:s,isCutscene:a}=this.server.puzzlesDB.getPuzzle(e);return _s(e,s,a)}).map(([e,t])=>t))}getCompletionTime(){return this.solveTimes.get(It)}getTeamSummaryState(){const{teamId:e,displayName:t,faction:s,factionScoreContributions:a,members:n,masteryTreeController:o,pvpController:l,isHidden:i}=this,c=o.getEnabledMasteries();return{teamId:e,displayName:t,faction:s,factionScoreContribution:s===null?0:a[s],hasReputationBoost:c.has(Xt)?!0:void 0,hasPvP:c.has(et)?!0:void 0,isPvPGameActive:l.isGameActive()?!0:void 0,numSolves:this.getLeaderboardNumSolves(),lastSolveTime:this.getLastSolveTime(),completionTime:this.getCompletionTime(),speedrunInfo:this.computeSpeedrunInfo(),isHidden:i?!0:void 0}}makeTeamDataForBattle(e){const{teamId:t,displayName:s,faction:a}=this;return{teamId:t,displayName:s,faction:a,factionScoreContribution:a===null?0:this.factionScoreContributions[a],enabledMasteries:Object.fromEntries(Array.from(this.masteryTreeController.getEnabledMasteries(),n=>[n,!0])),isReplay:this.solveTimes.has(e),prevBestSpeedrunTime:this.speedrunTimes.get(e)}}startAIBattle(e,t,s,a,n,o){const l=this.getBattleController(t),{selectedPuzName:i}=l;if(i===null){this.server.sendErr(e,{errCode:B.NEED_PUZZLE});return}const c=l.getInspector();if(!c.hasAI()&&i!=="vanilla"){this.server.sendErr(e,{errCode:B.INVALID_PUZZLE});return}if(l.isRoomActive()){if(!(a??!1))return;if(l.resign()!==null)throw new Error("expect resign to succeed")}if(s!==void 0){const S=l.selectDeck(s);if(S!==null){this.server.sendErr(e,S);return}}const u={},f=[h.P1,h.P2].filter(S=>!(c.hasAI()&&S===h.P2));for(const S of f)u[S]=this.teamId;const{deckSelections:g,err:k}=l.commitDeckSelection(f,n,o==null?void 0:o.allowInvalidDecks);if(k!==void 0){this.server.sendErr(e,k);return}const E=this.server.gameRoomsController.createRoom(i,t,u,g,o);l.activateGame(E)}handleEnterRoom(e,t){const{puzName:s}=t,a=this.battleControllers.get(s);if(a===void 0){this.server.sendEnterRoomErr(e,{errCode:B.NO_ROOM});return}a.handleEnterGameRoom(e)}async runFastSyncAsync(){const{syncController:e}=this.fastSyncTracking,{packet:t}=e;if(t.unlocks!==void 0)for(const[E,S]of Object.entries(t.unlocks))S!==null===this.unlockTimes.has(E)&&delete t.unlocks[E];if(Object.keys(t.unlocks??{}).length===0&&delete t.unlocks,t.cardUnlocks!==void 0)for(const[E,S]of Object.entries(t.cardUnlocks))S!==null===this.cardUnlocks.has(E)&&((S==null?void 0:S.puzName)??null)===(this.cardUnlocks.get(E)??null)&&delete t.cardUnlocks[E];if(Object.keys(t.cardUnlocks??{}).length===0&&delete t.cardUnlocks,t.answerSubmissions!==void 0){for(const[E,S]of Object.entries(t.answerSubmissions))if(S===null&&!this.solveTimes.has(E))delete t.answerSubmissions[E];else if(S!==null&&this.solveTimes.has(E)){for(const[v,_]of Object.entries(S))_.isCorrect&&delete S[v];Object.keys(S??{}).length===0&&delete t.answerSubmissions[E]}}Object.keys(t.answerSubmissions??{}).length===0&&delete t.answerSubmissions;const s=e.startSync();if(s===null)return!0;let a=!1;this.server.fastSyncMetrics.record();try{await this.server.syncDataThrottledAsync({teamState:{[this.teamId]:s}}),a=!0}finally{e.endSync(a?s:null)}const{puzzlesDB:n}=this.server,o=Object.fromEntries(Object.entries(s.answerSubmissions??{}).flatMap(([E,S])=>{if(S===null)return[[E,null]];const v=Object.values(S).find(_=>_.isCorrect);return v===void 0?[]:[[E,v]]})),l=Object.fromEntries(Object.entries(o).flatMap(([E,S])=>{const{answer:v}=this.server.puzzlesDB.getPuzzle(E);return v===null?[]:[[E,v]]})),i=Object.fromEntries(Object.entries(s.unlocks??{}).flatMap(([E,S])=>S!==null&&n.getBattleGroup(E).battleGroupName===E?[[E,this.getClientBattleGroupState(E)]]:[])),c=Object.fromEntries(Object.entries(s.cardUnlocks??{}).map(([E,S])=>{if(S===null)return[E,null];const{puzName:v}=S;return[E,{cardName:E,puzName:v}]})),u=Object.fromEntries(Object.entries(o).map(([E,S])=>S===null?[E,null]:[E,S.timestamp])),f=new Set(Object.entries(s.unlocks??{}).filter(([E,S])=>S===null).map(([E,S])=>E));if(f.size>0){const E=[...this.server.puzzlesDB.puzzles.values()].filter(({puzName:S,battleGroupName:v})=>v===ht&&S!==ht);for(const S of f){const v=n.getFirstSubpuzzleInBattleGroup(S).puzName;for(const{puzName:_}of E){const y=this.getBattleController(_);if(y.selectedPuzName!==null&&y.selectedPuzName===S){if(y.isRoomActive()&&y.resign()!==null)throw new Error("failed to resign");if(y.selectPuzzle(this.unlockTimes.has(v)&&!f.has(v)?v:null)!==null)throw new Error("failed to clear selected puzzle");for(const[N,C]of Object.entries(y.checkpoints)){if(C===void 0)continue;JSON.parse(C.serializedState).selectedPuzName===S&&delete y.checkpoints[Number(N)]}}}}}for(const[E,S]of Object.entries(u))S!==null===this.solveTimes.has(E)&&console.error("packet has repeat data from solve state"),S===null?this.solveTimes.delete(E):this.solveTimes.set(E,S);for(const[E,S]of Object.entries(s.unlocks??{}))S!==null===this.unlockTimes.has(E)&&console.error("packet has repeat data from unlock state"),S===null?this.unlockTimes.delete(E):this.unlockTimes.set(E,S.timestamp);for(const[E,S]of Object.entries(s.cardUnlocks??{}))S!==null===this.cardUnlocks.has(E)&&((S==null?void 0:S.puzName)??null)===(this.cardUnlocks.get(E)??null)&&console.error("packet has repeat data from card unlock state"),S===null?this.cardUnlocks.delete(E):this.cardUnlocks.set(E,S.puzName);const g=Object.fromEntries(Object.entries(s.unlocks??{}).map(([E,S])=>[E,S===null?null:this.getClientPuzzleState(E)]));this.broadcastTeamGlobalUpdate({type:z.TEAM_UPDATE_STATE,solveTimes:u,answers:l,unlocks:g,battleGroupUnlocks:i,cardUnlocks:c,masteries:Object.fromEntries(Object.entries(u).flatMap(([E,S])=>{const v=this.server.masteriesDB[E];if(v===void 0)return[];if(S===null)return[[E,null]];const{displayName:_,effectText:y}=v;return[[E,{displayName:_,effectText:y}]]}))});for(const[E,S]of Object.entries(u)){const v=this.server.puzzlesDB.getPuzzle(E),{battleGroupName:_}=v;if(E!==_)continue;const{postBattleDialogue:y}=this.server.puzzlesDB.getBattleGroup(_);y!==void 0&&this.broadcastTeamGlobalUpdate({type:z.TEAM_UPDATE_BATTLE_GROUP,battleGroupName:_,postBattleDialogue:y})}Object.keys(u).length>=0&&this.server.handleTeamSummaryUpdate(this.teamId,{numSolves:this.getLeaderboardNumSolves(),lastSolveTime:this.getLastSolveTime(),completionTime:this.getCompletionTime()});const k=this.getHintsUsedMap();return this.server.bigBoardStateTracker.updateTeam(this.teamId,{unlocks:Object.fromEntries(Array.from(this.unlockTimes.keys(),E=>{var S;return[E,{solveTime:this.solveTimes.get(E),numHintsUsed:k[E],numWrongGuesses:(S=this.fishPuzzleControllers.get(E))==null?void 0:S.numWrongGuesses}]})),cardUnlocks:Object.fromEntries(Object.entries(c).map(([E,S])=>[E,S!==null]))}),this.server.statsController.handleTeamUpdates(this.teamId,{unlocksToAdd:[...Object.keys(g).filter(E=>g[E]!==null)],solvesToAdd:Object.keys(o).filter(E=>o[E]!==null),unlocksToDelete:[...Object.keys(g).filter(E=>g[E]===null)],solvesToDelete:Object.keys(o).filter(E=>o[E]===null),solveTimes:u}),u[It]!==void 0&&u[It]!==null&&this.server.broadcastNotifToTeam(this.teamId,{type:tt.VICTORY}),!1}async handleTeamUpdatesAsync(e){const{puzzlesDB:t}=this.server,{puzzles:s,battleGroups:a}=t,n=new Date().getTime(),{syncController:o,syncLoopController:l}=this.fastSyncTracking;if(e.solvesToDelete!==void 0){const y=new Set(e.solvesToDelete);e.solvesToDelete.push(...[...t.puzzles.values()].filter(({puzName:N,battleGroupName:C})=>!y.has(N)&&y.has(C)).map(({puzName:N})=>N))}if(e.unlocksToDelete!==void 0){const y=new Set(e.unlocksToDelete);e.unlocksToDelete.push(...[...t.puzzles.values()].filter(({puzName:N,battleGroupName:C})=>!y.has(N)&&y.has(C)).map(({puzName:N})=>N)),e.solvesToDelete??(e.solvesToDelete=[]),e.solvesToDelete.push(...e.unlocksToDelete)}const i={answerSubmissions:{},unlocks:{...Object.fromEntries((e.unlocksToAdd??[]).map(y=>[y.puzName,y])),...Object.fromEntries((e.unlocksToDelete??[]).map(y=>[y,null]))},cardUnlocks:{...Object.fromEntries((e.cardUnlocksToAdd??[]).map(y=>[y.cardName,y])),...Object.fromEntries((e.cardUnlocksToDelete??[]).map(y=>[y,null]))}};for(const y of e.answerSubmissionsToAdd??[]){const{answer:N,puzName:C}=y;i.answerSubmissions??(i.answerSubmissions={}),i.answerSubmissions[C]=Object.assign(i.answerSubmissions[C]??{},{[N]:y})}for(const y of e.solvesToDelete??[])i.answerSubmissions??(i.answerSubmissions={}),i.answerSubmissions[y]=null;this.mergeFastSyncPacket(i);const c={},u=new Set([...this.solveTimes.keys(),...Object.entries(o.packet.answerSubmissions??{}).flatMap(([y,N])=>N===null?[]:Object.values(N).some(C=>C.isCorrect)?[y]:[])]),f=y=>{if(u.has(y))return;const N=es(this.teamId,y,n);c.answerSubmissions??(c.answerSubmissions={}),c.answerSubmissions[y]=Object.assign(c.answerSubmissions[y]??{},{[N.answer]:N}),u.add(y)},g=new Map;for(const y of u){const{battleGroupName:N,triggersBattleGroupSolve:C}=t.getPuzzle(y);C&&g.set(N,(g.get(N)??0)+1)}for(const[y,N]of g){const{solveReq:C}=t.getBattleGroup(y);N<C||f(y)}for(const y of Object.entries(o.packet.answerSubmissions??{}).flatMap(([N,C])=>C===null?[N]:[]))u.delete(y);const k=new Set([...this.unlockTimes.keys(),...Object.entries(o.packet.unlocks??{}).flatMap(([y,N])=>N===null?[]:[y])]);for(const y of Object.entries(o.packet.unlocks??{}).flatMap(([N,C])=>C===null?[N]:[]))k.delete(y);const E=y=>{k.has(y)||(c.unlocks??(c.unlocks={}),c.unlocks[y]={teamId:this.teamId,puzName:y,timestamp:n},k.add(y))};if(u.has(Ds))for(const{puzName:y,battleGroupName:N}of t.puzzles.values())N===Ds&&(E(y),f(y));const S=new Map([...this.cardUnlocks.entries(),...Object.entries(o.packet.cardUnlocks??{}).flatMap(([y,N])=>N===null?[]:[[y,N.puzName]])]);for(const y of Object.entries(o.packet.cardUnlocks??{}).flatMap(([N,C])=>C===null?[N]:[]))S.delete(y);const v={},_={};for(const{puzName:y,unlockMult:N,dstUnlockGroupId:C}of s.values())u.has(y)&&(v[C]===void 0&&(v[C]=0),v[C]+=N);for(const{puzName:y,cardUnlockGroupId:N}of s.values())u.has(y)&&N!==null&&(_[N]=y);for(const{puzName:y,unlockReq:N,srcUnlockGroupId:C}of s.values())N!==-1&&((v[C]??0)<N||E(y));for(const{puzName:y,battleGroupName:N,unlockReq:C}of s.values())C===-1&&k.has(N)&&E(y);for(const y of Object.values(this.server.cardsDB)){const{name:N,cardUnlockGroupId:C}=y;if(C===null)continue;const O=_[C];if(O===void 0)continue;const F=S.get(N);F!==void 0&&F===O||(c.cardUnlocks??(c.cardUnlocks={}),c.cardUnlocks[N]={teamId:this.teamId,puzName:O,cardName:N,timestamp:n},S.set(N,O))}k.has(Us)||[...s.values()].filter(({puzName:y,answer:N})=>N!==null&&y!==Zt&&u.has(y)).length>0&&E(Us),k.has(Ms)||[...a.values()].filter(({battleGroupName:y,isLegendary:N})=>N&&u.has(y)).length>0&&E(Ms),k.has(Pt)||(this.getBattleController(Pt).getInspector(),[...a.values()].filter(({isLegendary:y})=>y).every(({battleGroupName:y})=>u.has(y))&&E(Pt)),this.mergeFastSyncPacket(c),await l.triggerLoopAndWaitAsync()}async adminModifyTeamAsync(e){const{isInactive:t,isHidden:s,isTempBlocked:a,displayName:n,overrideSolved:o,overrideUnlocked:l,overrideCardUnlocked:i,overrideMasteriesList:c,overrideDecks:u,overrideMasteryTree:f}=e;t!==void 0&&this.setTeamInactive(t),s!==void 0&&this.setTeamHidden(s),a!==void 0&&this.setTeamTempBlocked(a),n!==void 0&&this.setDisplayName(n),this.masteryTreeController.handleMasteryTreeUpdate({masteriesListOverride:c}),f!==void 0&&this.masteryTreeController.overrideMasteryTree(f);for(const[g,k]of Object.entries(u??{}))this.getDeckController(Number(g)).overrideDeck(k);await this.handleTeamUpdatesAsync({answerSubmissionsToAdd:Object.entries(o??{}).flatMap(([g,k])=>k?[{teamId:this.teamId,puzName:g,answer:this.server.puzzlesDB.getPuzzle(g).answer??"",isCorrect:!0,timestamp:new Date().getTime(),usedFreeAnswer:!1}]:[]),solvesToDelete:Object.entries(o??{}).flatMap(([g,k])=>k?[]:[g]),unlocksToAdd:Object.entries(l??{}).flatMap(([g,k])=>k?[{teamId:this.teamId,puzName:g,timestamp:new Date().getTime()}]:[]),unlocksToDelete:Object.entries(l??{}).flatMap(([g,k])=>k?[]:[g]),cardUnlocksToAdd:Object.entries(i??{}).flatMap(([g,k])=>k?[{teamId:this.teamId,puzName:null,cardName:g,timestamp:new Date().getTime()}]:[]),cardUnlocksToDelete:Object.entries(i??{}).flatMap(([g,k])=>k?[]:[g])})}async overrideIsSolvedAsync(e,t){await this.adminModifyTeamAsync({overrideSolved:{[e]:t}})}async overrideIsUnlockedAsync(e,t){await this.adminModifyTeamAsync({overrideUnlocked:{[e]:t}})}async overrideIsCardUnlockedAsync(e,t){await this.adminModifyTeamAsync({overrideCardUnlocked:{[e]:t}})}setTeamInactive(e){if(e!==this.isInactive){if(this.isInactive=e,this.mergeSlowSyncPacket({isInactive:e}),e){const t=this.server.teamConns.get(this.teamId);if(t!==void 0)for(const s of t.values())s.client.close()}this.server.broadcastAdminGlobalUpdate({type:z.SERVER_UPDATE_TEAM,teamId:this.teamId,isInactive:e})}}setTeamHidden(e){e!==this.isHidden&&(this.isHidden=e,this.mergeSlowSyncPacket({isHidden:e}),e?this.server.statsController.hideTeam(this.teamId):this.server.statsController.unhideTeam(this.teamId),this.server.broadcastAdminGlobalUpdate({type:z.SERVER_UPDATE_TEAM,teamId:this.teamId,isHidden:e}),this.server.handleTeamSummaryUpdate(this.teamId,{isHidden:e}))}setTeamTempBlocked(e){if(e!==this.isTempBlocked&&(this.isTempBlocked=e,e)){const t=this.server.teamConns.get(this.teamId);if(t!==void 0)for(const s of t.values())s.isAdmin||(this.server.sendErr(s,{errCode:B.TEAM_TEMP_BLOCKED}),s.client.close())}}setDisplayName(e){this.displayName=e,this.mergeSlowSyncPacket({displayName:e}),this.broadcastTeamGlobalUpdate({type:z.TEAM_UPDATE_STATE,displayName:e}),this.server.handleTeamSummaryUpdate(this.teamId,{displayName:e}),this.server.broadcastAdminGlobalUpdate({type:z.SERVER_UPDATE_TEAM,teamId:this.teamId,displayName:e})}handleSetFaction(e,t){if(!this.masteryTreeController.getEnabledMasteries().has(ur)){this.server.sendErr(e,{errCode:B.NO_MASTERY});return}this.faction=t,this.mergeSlowSyncPacket({faction:t}),this.broadcastTeamGlobalUpdate({type:z.TEAM_UPDATE_STATE,faction:t}),this.server.handleTeamSummaryUpdate(this.teamId,{faction:t,factionScoreContribution:t===null?0:this.factionScoreContributions[t]})}handleChangeFactionScoreContributions(e){for(const[a,n]of Object.entries(e)){const o=a;this.factionScoreContributions[o]+=n}const t=Object.fromEntries(Object.entries(this.factionScoreContributions).filter(([a,n])=>e[a]??!1));this.mergeSlowSyncPacket({factionScoreContributions:t}),this.broadcastTeamGlobalUpdate({type:z.TEAM_UPDATE_STATE,factionScoreContributions:t});const s=this.faction;s!==null&&(e[s]??0)!==0&&this.server.handleTeamSummaryUpdate(this.teamId,{factionScoreContribution:this.factionScoreContributions[s]}),this.server.statsController.handleTeamUpdates(this.teamId,{factionScoreChanges:e,updateFactionHistory:!0})}handleSetMembers(e){this.members=e,this.server.broadcastGlobalUpdate({type:H.TEAM_MEMBERS,teamId:this.teamId},{type:z.TEAM_MEMBERS_UPDATE_STATE,members:e})}handleNewSpeedrunTime(e,t){const s=this.speedrunTimes.get(e);s!==void 0&&t>=s||(this.speedrunTimes.set(e,t),delete this.cachedSpeedrunInfo,this.broadcastTeamGlobalUpdate({type:z.TEAM_UPDATE_STATE,speedrunTimes:{[e]:t}}),this.server.statsController.handleTeamUpdates(this.teamId,{speedrunTimes:{[e]:t}}),this.server.handleTeamSummaryUpdate(this.teamId,{speedrunInfo:this.computeSpeedrunInfo()}))}computeSpeedrunInfo(){if(this.cachedSpeedrunInfo!==void 0)return this.cachedSpeedrunInfo;const e=[...this.server.puzzlesDB.puzzles.values()].filter(({puzName:t,battleGroupName:s,isCutscene:a})=>Za(t,s,a)).map(({puzName:t})=>this.speedrunTimes.get(t)??0);return this.cachedSpeedrunInfo={numTimes:e.filter(t=>!!t).length,totalTime:e.reduce((t,s)=>t+s,0)},this.cachedSpeedrunInfo}viewPuzzle(e,t){if(!this.unlockTimes.has(t)){this.server.sendErr(e,{errCode:B.INVALID_PUZZLE});return}const{battleGroupName:s}=this.server.getBattleGroup(t),a=new Date().getTime(),n={};this.views.has(t)||(n[t]=a),this.views.has(s)||(n[s]=a);for(const o of Object.keys(n))this.views.add(o),this.broadcastTeamGlobalUpdate({type:z.TEAM_UPDATE_PUZZLE,puzName:o,isNew:!1});this.mergeSlowSyncPacket({viewTimes:n})}mergeFastSyncPacket(e){this.fastSyncTracking.syncController.mergePacket(e)}mergeSlowSyncPacket(e){this.slowSyncTracking.syncController.mergePacket(e)}}const Ut=r=>{const{permanent:e,attacker:t,ctx:s}=r,{inspector:a,engine:n}=s;t&&(n.announce(`${a.getCardDisplayName(e)} attacks back for 1 damage!`),n.damageUnattributed(t,1))},Ge=(r,e,t,s)=>{const{inspector:a,engine:n}=s,o=e.power||0,l=e.health||0,i=[];o&&i.push(`+${o} power`),l&&i.push(`+${l} health`),n.announce(`${a.getCardDisplayName(t)} buffs ${a.getCardDisplayName(r)} with ${i.join("/")}!`),n.adjustPermanentStats(r,o,l)},Ws=(r,e)=>t=>{const{permanent:s,ctx:a}=t;a.inspector.getAdjacentFriendlyPermanents(s).forEach(n=>{e&&!e(n,a)||Ge(n,r,s,a)})},qn={[I.BASE_GEMS]:{handlers:{[R.START_TURN]:r=>{const{permanent:e,counter:t,ctx:s}=r,{inspector:a,engine:n}=s;if(t===void 0)throw new Error("expect counter in counter event");if(t.val===void 0)throw new Error("counter should have value");return a.isTurnPending(e.owner)&&n.addGems(e.owner,new Array(t.val).fill(x.RAINBOW)),{expire:!1}}}},[I.POISON]:{handlers:{[R.START_TURN]:r=>{const{permanent:e,counter:t,ctx:s}=r,{inspector:a,engine:n}=s;if(t===void 0)throw new Error("expect counter in counter event");if(t.val===void 0)throw new Error("poison counter should have value");a.isTurnPending(e.owner)&&n.damageUnattributed(e,t.val)}}},[I.DOOM]:{handlers:{[R.END_TURN]:r=>{const{permanent:e,counter:t,counterIndex:s,ctx:a}=r,{engine:n,inspector:o}=a;if(!o.isTurnPending(e.owner))return;if(t==null||s==null)throw new Error("counter event should have counter specified");const l=(t.val||0)-1;l<=0?t.val!==0&&n.updateCounterVal(e,s,0):n.updateCounterVal(e,s,l)}}},[I.DESTROY_ON_END_OF_TURN]:{handlers:{[R.END_TURN]:r=>{const{permanent:e,ctx:t}=r,{engine:s}=t;s.destroy(e,e)}}}},ie=(r,e)=>{const t=r.effectOptsResolved[e];if(t===void 0||t.type!==ce.PERMANENT)throw new Error("expected permanent opt");return t.permanent},Mt=(r,e)=>{const t=r.effectOptsResolved[e];if(t===void 0||t.type!==ce.SLOT)throw new Error("expected slot opt");return t.slot},$n=(r,e)=>{const t=r.effectOptsResolved[e];if(t===void 0||t.type!==ce.ONE_CHOICE)throw new Error("expected one-choice string opt");return t.choice},ct=(r,e)=>{const{engine:t}=e,s=ie(r,0);t.attack(r.permanent,s)},hr={"bb-b":{handlers:{[R.OTHER_UNIT_DESTROYED]:r=>{const{permanent:e,destroyedPermanent:t,ctx:s}=r,{inspector:a,engine:n}=s;e.owner===a.getOpponentOf(t.owner)&&a.getCardType(t)===se.CREATURE&&(a.getPermanents({owner:e.owner,adjacentTo:e.slot,type:se.CREATURE}).forEach(o=>{n.adjustPermanentStats(o,0,1)}),n.addGems(e.owner,[x.RAINBOW]),n.announce(`${a.getCardDisplayName(e)} Creates 1 Pie`))}}},"bee-rider":{onRepeatable:(r,e)=>{const{permanent:t}=r,{engine:s}=e,a=Mt(r,0);s.move(t,a),s.addCounter(t,{type:I.FLEXED_THIS_TURN,explanation:"flexed this turn",expiry:R.END_TURN})}},beeflector:{handlers:{[R.CREATED]:r=>{const{engine:e}=r.ctx;e.changePermanentOwner(r.permanent)},[R.AFTER_DAMAGED]:Ut}},beeowulf:{onSpecial:(r,e)=>{const{engine:t}=e,s=ie(r,0),a=Mt(r,1);t.attack(r.permanent,s),t.move(s,a)}},beethoven:{adjustDamageReceived:(r,e,t,s)=>{const{inspector:a,engine:n}=s,o=1,l=a.getCounterValSum(r,I.IGNORED_DAMAGE),c=Math.min(o,l+e)-l;return c>0&&(n.announce(`${a.getCardDisplayName(r)} ignores ${c} damage!`),n.addCounter(r,{type:I.IGNORED_DAMAGE,val:c,explanation:`ignored ${c} damage this turn`,expiry:R.END_TURN})),e-c}},"bell-flower":{handlers:{[R.BEFORE_DESTROYED]:r=>{const{permanent:e,ctx:t}=r,{engine:s}=t;s.drawCard(e.owner)}}},blancmange:{handlers:{[R.CREATED]:r=>{const{permanent:e,ctx:t}=r,{inspector:s,engine:a}=t;if(s.getPermanentsOf(e.owner).filter(l=>s.getCardType(l)===se.CREATURE).length<=1){a.destroy(e,e),a.announce(`${s.getCardDisplayName(e)} destroys itself without a Creature to convert`);return}a.addCounter(e,{type:I.SUMMONED_THIS_TURN,explanation:"can Flex",expiry:R.END_TURN})},[R.END_TURN]:r=>{const{permanent:e,ctx:t}=r,{inspector:s,engine:a}=t;s.doesPermanentHaveCounterType(e,I.SUMMONED_THIS_TURN)&&(a.destroy(e,e),a.announce(`${s.getCardDisplayName(e)} did not convert and destroys itself`))}},onRepeatable:(r,e)=>{const{inspector:t,engine:s}=e,a=ie(r,0),n=t.getReflectedSlot(a.slot);t.isSlotOccupied(n)||(s.move(a,n),s.changePermanentOwner(a),s.removeCounterType(r.permanent,I.SUMMONED_THIS_TURN))}},"boarnana-tree":{onRepeatable:(r,e)=>{const{engine:t,inspector:s}=e,{permanent:a}=r;s.getPermanents({owner:a.owner,row:a.slot.row,except:a,type:se.CREATURE}).forEach(n=>{Ge(n,{health:1},a,e)}),t.damage(a,a,1)}},camp:{handlers:{[R.CREATED]:r=>{r.ctx.engine.addCounter(r.permanent,{type:I.BASE_GEMS,val:1})}}},chicken:{counterData:{[I.CAT_SPECIAL_PENDING]:{handlers:{[R.START_TURN]:r=>{const{permanent:e,ctx:t}=r,{engine:s}=t;return s.addGems(e.owner,[x.RAINBOW]),{expire:!0}}}}},onSpecial:(r,e)=>{const{engine:t}=e;t.addCounter(r.permanent,{type:I.CAT_SPECIAL_PENDING,explanation:"Get {?} at the start of next turn"})}},"chocolate-calf":{onRepeatable:(r,e)=>{const{engine:t}=e;t.addCounter(r.permanent,{type:I.POWER_ADJUSTMENT,val:1,explanation:"+1 power for the rest of the turn",expiry:R.END_TURN})}},coloring:{handlers:{[R.CREATED]:r=>{const{permanent:e,ctx:t}=r,{engine:s}=t;s.addCounter(e,{type:I.SUMMONED_THIS_TURN,explanation:"can Flex",expiry:R.END_TURN})}},onRepeatable:(r,e)=>{const{engine:t}=e,s=ie(r,0);t.ready(s),t.removeCounterType(r.permanent,I.SUMMONED_THIS_TURN)}},dargle:{handlers:{[R.AFTER_DEAL_DAMAGE]:r=>{const{permanent:e,damage:t,ctx:s}=r,{engine:a}=s;a.damageUnattributed(e,t),a.addCounter(e,{type:I.POWER_ADJUSTMENT,val:t,explanation:`+${t} porgle`}),a.announce(`${s.inspector.getCardDisplayName(e)} dargle itsergle for ${t} and increargle its porgle by ${t}`)}}},"dino-nugget":{handlers:{[R.CREATED]:r=>{const{permanent:e,ctx:t}=r,{inspector:s}=t;s.getPermanents({row:e.slot.row,type:se.CREATURE,except:e,custom:a=>{const n=s.getCardColor(a);return n!==null&&n===x.GREEN}}).forEach(a=>{Ge(a,{health:1},e,t)})}}},"eager-beever":{handlers:{[R.CREATED]:r=>{const{permanent:e,ctx:t}=r,{engine:s}=t;s.addCounter(e,{type:I.ALLOWS_MOVE_TO_ADJACENT})}}},"flora-the-explora":{onSpecial:(r,e)=>{const{engine:t}=e;t.drawCard(r.permanent.owner)}},giraffatitan:{onSpecial:ct},"glass-of-moo":{onSpecial:(r,e)=>{const{engine:t}=e,{permanent:s}=r;t.addGems(s.owner,[x.WHITE,x.BLACK]),t.damage(s,s,1)}},"glass-of-moocha":{onSpecial:(r,e)=>{const{engine:t}=e,{permanent:s}=r;t.addGems(s.owner,[x.BLACK,x.WHITE]),t.damage(s,s,1)}},"hog-hog":{handlers:{[R.AFTER_DESTROYED]:r=>{const{permanent:e,ctx:t}=r;t.engine.addCardToHand(e.owner,{name:"hog"})}}},"hog-on-a-log":{handlers:{[R.AFTER_DESTROYED]:r=>{const{permanent:e,ctx:t}=r;t.engine.spawn("log",e.slot,e.owner)}}},"hog-on-a-log-on-a":{handlers:{[R.AFTER_DESTROYED]:r=>{const{permanent:e,ctx:t}=r;t.engine.spawn("log-on-a-hog-on-a",e.slot,e.owner)}}},jabberwock:{onSpecial:(r,e)=>{const{engine:t}=e,s=ie(r,0);t.addCounter(s,{type:I.DIVINE_SHIELD,explanation:"The next instance of damage this turn is prevented",expiry:R.END_TURN})}},keep:{handlers:{[R.CREATED]:r=>{r.ctx.engine.addCounter(r.permanent,{type:I.BASE_GEMS,val:3})}}},"king-bee":{handlers:{[R.AFTER_DEAL_DAMAGE]:r=>{const{defender:e,ctx:t}=r,{engine:s}=t;s.addCounter(e,{type:I.POWER_ADJUSTMENT,explanation:"-1 power",val:-1})}}},"lady-jane":{onSpecial:(r,e)=>{const{inspector:t,engine:s}=e,{permanent:a}=r,n=ie(r,0),o=t.getPower(a);s.damage(a,n,o+1)}},"log-on-a-hog":{handlers:{[R.AFTER_DESTROYED]:r=>{const{permanent:e,ctx:t}=r;t.engine.spawn("hog",e.slot,e.owner)}}},"log-on-a-hog-on-a":{handlers:{[R.AFTER_DESTROYED]:r=>{const{permanent:e,ctx:t}=r;t.engine.spawn("hog-on-a-log-on-a",e.slot,e.owner)}}},"miss-yu":{handlers:{[R.AFTER_DAMAGE_REMOVED]:r=>{const{permanent:e,ctx:t}=r,{engine:s}=t;s.ready(e),s.adjustPermanentStats(e,1,0),s.announce(`${t.inspector.getCardDisplayName(e)} readies and gains 1 power`)},[R.AFTER_STATS_CHANGED]:r=>{if(r.healthDelta<=0)return;const{permanent:e,ctx:t}=r,{engine:s}=t;s.ready(e),s.adjustPermanentStats(e,1,0),s.announce(`${t.inspector.getCardDisplayName(e)} readies and gains 1 power`)}}},"mister-penny":{onRepeatable:(r,e)=>{const{engine:t}=e,s=r.permanent,a=ie(r,0);t.damage(s,a,1),t.addGems(s.owner,[x.RAINBOW])}},moonick:{handlers:{[R.OTHER_UNIT_SPAWN]:r=>{const{permanent:e,ctx:t}=r,{inspector:s,engine:a}=t,n=r.spawnedPermanent,o=e.owner;if(n.owner!==o)return;const l=s.getDrawPile(o),i=7;let c;if(l.length===0)return;l.length<i?c=l.slice().reverse():c=l.slice(l.length-i,l.length).reverse();const u=s.getCardName(n),f=s.getUnoccupiedSlots(o);if(f.length===0)return;const g=f[Math.floor(Math.random()*f.length)];let k=l.length-1;for(const E of c){if(s.getCardName(E)===u){if(a.removeCardIndex(o,k),a.spawn(s.getCardName(E),g,o))a.announce(`${s.getCardDisplayName(e)} Summons ${s.getCardDisplayName(E)}`);else throw new Error("failed to summon");return}k--}}}},murray:{onRepeatable:(r,e)=>{ct(r,e),e.engine.addCounter(r.permanent,{type:I.FLEXED_THIS_TURN,explanation:"flexed this turn",expiry:R.END_TURN})},onSpecial:(r,e)=>{const{engine:t}=e,{permanent:s}=r,a=ie(r,0);t.destroy(s,a)}},"nam-pam-bee":{handlers:{[R.START_TURN]:r=>{const{permanent:e,ctx:t}=r,{engine:s,inspector:a}=t;a.doesPermanentHaveCounterType(e,I.DAMAGE_TAKEN)&&s.addGems(e.owner,[x.YELLOW])}}},"nepeta-legion":{handlers:{[R.CREATED]:r=>{const{permanent:e,ctx:t}=r,{engine:s}=t;s.drawCard(e.owner)}}},"new-boarn":{handlers:{[R.CREATED]:r=>{const{permanent:e,ctx:t}=r,{inspector:s,engine:a}=t,n=s.getUnoccupiedSlots(e.owner);if(n.length===0)return;const o=n[Math.floor(Math.random()*n.length)];a.move(e,o)}}},"nice-cow":{onSpecial:(r,e)=>{const{engine:t,inspector:s}=e,{permanent:a}=r,n=ie(r,0);t.attack(a,n),s.getPermanents({owner:a.owner,adjacentTo:a.slot,type:se.CREATURE}).forEach(o=>{Ge(o,{power:1},a,e)})}},nightshade:{handlers:{[R.CREATED]:r=>{r.ctx.engine.addCounter(r.permanent,{type:I.CANNOT_ATTACK})}},onSpecial:(r,e)=>{const{engine:t,inspector:s}=e;if(t.discardRandomCard(r.permanent.owner)){const a=ie(r,0);t.damage(r.permanent,a,s.getPower(r.permanent))}else t.announce("Nightshade had no card to discard and failed.")}},o:{handlers:{[R.CREATED]:Ws({health:1},(r,e)=>{const t=e.inspector.getCardColor(r);return t!==null&&[x.WHITE,x.WHITEBLACK].includes(t)})}},"oklahoma-tusks":{onRepeatable:(r,e)=>{const{engine:t}=e;t.addCounter(r.permanent,{type:I.POWER_ADJUSTMENT,val:1,explanation:"+1 power for the rest of the turn",expiry:R.END_TURN})},onSpecial:(r,e)=>{const{inspector:t,engine:s}=e,{permanent:a}=r,n=a.owner,o=t.getOpponentOf(n),l=t.getPermanentsOf(o).filter(i=>t.getCardType(i)==se.CREATURE&&i.slot.column===a.slot.column).sort((i,c)=>{const u=i.slot,f=c.slot,g=t.getTerrainOf(u),k=t.getTerrainOf(f);return t.isRowInFrontOf(u.row,f.row,o)?-1:t.isRowInFrontOf(f.row,u.row,o)?1:g===n&&k!==n?-1:k===n&&g!==n?1:u.column!==f.column?u.column-f.column:0});for(const i of l)s.attack(a,i)}},othello:{onSpecial:(r,e)=>{const{inspector:t,engine:s}=e,a=ie(r,0),n=t.getCardName(a),o=Mt(r,1),l=t.getAllPermanents();s.spawn(n,o,r.permanent.owner);let i=null;if(n==="new-boarn"){const u=t.getAllPermanents().filter(f=>!l.map(g=>g.id).includes(f.id)&&t.getCardName(f)==="new-boarn");u.length>0&&(i=u[0])}else i=t.getPermanentAtIfExists(o);i&&(s.addCounter(i,{type:I.ATTACKS_FOR_FREE,explanation:"Attacks for free"}),s.addCounter(i,{type:I.DESTROY_ON_END_OF_TURN,explanation:"On end of turn, Destroy this Creature"}),s.ready(i)),s.announce("Othello copies "+t.getCardDisplayName(a))}},payne:{adjustDamageReceived:(r,e,t,s)=>{const{inspector:a}=s;if(t){const n=a.getCardColor(t);if(n!==null&&[x.WHITE,x.BLACK].includes(n))return e+1}return e}},"pbee---j":{handlers:{[R.AFTER_DAMAGED]:Ut}},"petroleum-jelly":{adjustDamageReceived:(r,e,t,s)=>{const{inspector:a,engine:n}=s;return t&&r.slot.column===t.slot.column?(n.announce(`${a.getCardDisplayName(r)} takes 1 less damage!`),Math.max(e-1,0)):e}},"quail-aboard-fiery-steeds":{onSpecial:(r,e)=>{const{permanent:t}=r,{engine:s,inspector:a}=e;a.getPermanents({ownedByOpponentOf:t.owner,notProtectedFrom:t,custom:n=>Math.abs(n.slot.column-t.slot.column)<=1}).forEach(n=>{s.attack(t,n)})}},re:{handlers:{[R.CREATED]:Ws({power:1},(r,e)=>{const t=e.inspector.getCardColor(r);return t!==null&&[x.BLACK,x.WHITEBLACK].includes(t)})}},"realistic-rex":{onSpecial:(r,e)=>{const{engine:t}=e,s=ie(r,0),a=ie(r,1);t.attack(r.permanent,s),t.attack(r.permanent,a)}},"reckless-medisaur":{onSpecial:(r,e)=>{const{engine:t}=e,{permanent:s}=r,a=ie(r,0),n=ie(r,1);t.damage(s,a,2),t.removeDamage(n,n.damage)}},robot:{onSpecial:ct},"roe-doe-dendron":{onSpecial:(r,e)=>{const{inspector:t,engine:s}=e,{permanent:a}=r,n=ie(r,0),o=t.getBehindFriendlyPermanents(n);if(s.attack(a,n),o.length===0)return;const l=o[0];t.getCardType(l)===se.CREATURE&&s.damage(a,o[0],1)}},"rude-cow":{onSpecial:(r,e)=>{const{engine:t,inspector:s}=e,{permanent:a}=r,n=ie(r,0);t.attack(a,n),s.getPermanents({owner:a.owner,adjacentTo:a.slot,type:se.CREATURE}).forEach(o=>{Ge(o,{health:1},a,e)})}},"sapphire-rose":{onRepeatable(r,e){const{permanent:t}=r,{engine:s}=e;s.drawCard(t.owner),s.damageUnattributed(t,2)}},"slime--slime":{handlers:{[R.CREATED]:r=>{const{permanent:e,ctx:t}=r,{engine:s}=t;s.drawCard(e.owner)},[R.AFTER_DEAL_DAMAGE]:r=>{const{permanent:e,ctx:t}=r,{engine:s}=t;s.addGems(e.owner,[x.RED])}}},"spelling-bee":{handlers:{[R.CREATED]:r=>{const{permanent:e,ctx:t}=r,{engine:s}=t;s.addCounter(e,{type:I.DOOM,val:2-1,explanation:"will explode"})},[R.END_TURN]:r=>{const{permanent:e,ctx:t}=r,{inspector:s,engine:a}=t;s.doesPermanentHaveCounterType(e,I.DOOM)&&s.getCounterValSum(e,I.DOOM)===0&&(s.getPermanents({touching:e.slot,type:se.CREATURE}).forEach(o=>{a.damage(e,o,2)}),a.removeCounterType(e,I.DOOM),a.announce(`${s.getCardDisplayName(e)} explodes`))}}},"swarm-tactics":{handlers:{[R.AFTER_DAMAGED]:Ut},onSpecial:(r,e)=>{const{engine:t}=e;t.addCounter(r.permanent,{type:I.PROTECTS_ADJACENT_COLUMNS,explanation:"protecting adjacent columns",expiry:R.START_TURN})}},"switch-boar-d":{onSpecial:(r,e)=>{const{engine:t}=e,{permanent:s}=r,a=ie(r,0),n=ie(r,1);t.attack(s,a),t.swap(s,n)}},thesaurus:{handlers:{[R.AFTER_DESTROY_UNIT]:r=>{const{permanent:e,defender:t,ctx:s}=r,{inspector:a,engine:n}=s;a.getCardType(t)===se.CREATURE&&n.addGems(e.owner,[x.RAINBOW])}}},"touch-grass":{onSpecial:ct},"tusk-enhancement":{handlers:{[R.CREATED]:r=>{const{permanent:e,ctx:t}=r;t.inspector.getPermanents({column:e.slot.column,type:se.CREATURE,except:e}).forEach(s=>{Ge(s,{power:1},e,t)})}}},"two-bees":{adjustDamageReceived:(r,e)=>Math.floor(e/2)},"ultra-violet":{handlers:{[R.AFTER_DEAL_DAMAGE]:r=>{const{defender:e,ctx:t}=r,{engine:s}=t;s.addCounter(e,{type:I.FROZEN,explanation:"will not ready on its next turn",expiry:R.START_TURN})}}},"vanilla-calf":{onRepeatable:(r,e)=>{const{engine:t}=e;r.permanent.damage>0&&t.removeDamage(r.permanent,1)}}};for(const r of cr)hr[r.toLocaleLowerCase().replace(/ /g,"-")]={onRepeatable:(e,t)=>{const{engine:s}=t;s.despawn(e.permanent)}};const Lt=(r,e)=>{if(e!==void 0)for(const[t,s]of Object.entries(e))r[t]={...r[t]??{},...s}},Jn=(r,e)=>{var s;const t={};for(const a of r)Lt(t,a.cardEffects),Lt(t,(s=a.makeCardEffectsShared)==null?void 0:s.call(a,e)),Lt(t,a.cardEffectsShared);return t},Qn=(r,e)=>{const t={};for(const s of r)s.counterData!==void 0&&Object.assign(t,s.counterData);for(const[,s]of Object.entries(e))if(s.counterData)for(const[a,n]of Object.entries(s.counterData))t[a]=n;return t},eo={counterData:qn,cardEffects:hr},ft={},to={aiTurn:r=>{const{inspector:e,engine:t,ai:s}=r;s.trySpawn("robot",Math.floor(Math.random()*3),Math.floor(Math.random()*5)),e.getPermanentsOf(h.P2).forEach(a=>{if(!a.ready)return;const n=a.slot.column;for(let o=a.slot.row+1;o<6;o++){const l=e.getPermanentAtIfExists({row:o,column:n});!l||l.owner!==h.P1||s.tryActivateAbility(a,ge.SPECIAL,[{type:ce.PERMANENT,permanentId:l.id}])}})}},so={disableNoBasesLossCondition:!0,beforeNewGame:r=>{const{inspector:e,engine:t,ai:s}=r;t.spawn("new-boarn",0,0,h.P2);const a=e.getPermanents({name:"new-boarn"})[0];t.damageUnattributed(a,3),t.addCounter(a,{type:I.CANNOT_MOVE}),t.addCounter(a,{type:I.CANNOT_CREATE}),s.setKeyframe("tutorial1-start-1")},aiTurn:r=>{const{inspector:e,engine:t,ai:s}=r;if(e.getTurnNumber()===0)return;const a=e.getPermanentsOf(h.P2);if(a.length!==1)throw new Error("expect one enemy unit in play");switch(s.tryAttackFirst(a[0]),e.getTurnNumber()){case 2:{s.setKeyframe("tutorial1-start-2");break}}},beforeStep:(r,e)=>{const{inspector:t,engine:s,ai:a}=e;if(r.type===V.ADVANCE_KEYFRAME&&r.keyframeId==="tutorial1-start-1"){s.spawn("yoshisaur-munchakoopas",1,0,h.P1);const n=t.getPermanents({name:"yoshisaur-munchakoopas"})[0];s.addCounter(n,{type:I.CANNOT_MOVE}),s.addCounter(n,{type:I.CANNOT_CREATE})}return r.type===V.END_TURN&&t.getTurnNumber()===1&&s.clearKeyframe(),r.type===V.ADVANCE_KEYFRAME&&r.keyframeId==="tutorial1-before-give-food"&&s.addGems(h.P1,[x.GREEN]),r.type===V.ATTACK&&t.getTurnNumber()===3&&s.clearKeyframe(),!0},afterStep:(r,e)=>{const{inspector:t,engine:s,ai:a}=e;r.type===V.ATTACK&&t.getTurnNumber()===3&&a.setKeyframe("tutorial1-start-3")},afterGameEnd:(r,e,t)=>{const{engine:s}=t;s.clearKeyframe()}},ro={disableP2NoBasesLossCondition:!0,beforeNewGame:r=>{const{inspector:e,engine:t,ai:s}=r;s.setKeyframe("tutorial2-start-1")},aiTurn:r=>{const{inspector:e,engine:t,ai:s}=r;if(e.getTurnNumber()===0)return;const a=e.getPermanentsOf(h.P2);for(const n of a)s.tryAttackFirst(n);switch(e.getTurnNumber()){case 2:{s.setKeyframe("tutorial2-start-2");break}case 4:{s.trySpawn("hog",1,0),s.trySpawn("hamlet",2,0);const n=e.getPermanents({name:"hog"})[0],o=e.getPermanents({name:"hamlet"})[0];t.addCounter(n,{type:I.CANNOT_MOVE}),t.addCounter(n,{type:I.CANNOT_CREATE}),t.addCounter(o,{type:I.CANNOT_MOVE}),t.addCounter(o,{type:I.CANNOT_CREATE}),s.setKeyframe("tutorial2-start-3");break}}},beforeStep:(r,e)=>{const{inspector:t,engine:s,ai:a}=e;if(r.type===V.ADVANCE_KEYFRAME&&r.keyframeId==="tutorial2-before-summon"){s.clearKeyframe(),s.spawn("new-boarn",4,0,h.P1);const n=t.getPermanents({name:"new-boarn"})[0];s.addCounter(n,{type:I.CANNOT_MOVE}),s.addCounter(n,{type:I.CANNOT_CREATE})}return!0},afterStep:(r,e)=>{const{inspector:t,engine:s,ai:a}=e,{keyframe:n}=t.gameState;r.type===V.ATTACK&&t.getTurnNumber()===3&&a.setKeyframe("tutorial2-end-turn-2"),t.getBases(h.P2).length===0&&(n===void 0||n.id==="tutorial2-free-play")&&a.setKeyframe("tutorial2-start-4")},afterGameEnd:(r,e,t)=>{const{engine:s}=t;s.clearKeyframe()}},ao={disableP1NoBasesLossCondition:!0,afterInitEngine:r=>{r.engine.initExtraState({phase:1,wrongMove:!1,summonedAll:!1})},beforeNewGame:r=>{const{engine:e,ai:t}=r;e.spawn("yoshisaur-munchakoopas",3,3,h.P1),e.spawn("beeowulf",1,1,h.P2),e.spawn("beeowulf",1,3,h.P2),t.setKeyframe("tutorial3-start-1")},afterStep:(r,e)=>{const{inspector:t,engine:s,ai:a}=e,n=t.getTurnNumber();t.gameState;const o=s.getExtraState();if(r.type===V.ADVANCE_KEYFRAME&&r.keyframeId==="tutorial3-lose-1"&&o.wrongMove){a.setKeyframe("tutorial3-lose-1-wrong-move");return}if(r.type===V.MOVE&&n===1){ss(r.slot,{row:3,column:2})?a.setKeyframe("tutorial3-after-move"):o.wrongMove=!0;return}if(r.type===V.ADVANCE_KEYFRAME&&r.keyframeId==="tutorial3-before-give-cards"&&(s.addCardToHand(h.P1,{name:"new-boarn"}),s.addCardToHand(h.P1,{name:"hog"}),s.addCardToHand(h.P1,{name:"hamlet"})),o.phase===3&&t.getPermanents({name:"new-boarn"}).length>0){a.setKeyframe("tutorial3-after-summon-new-boarn"),o.phase=4;return}},aiTurn:r=>{const{inspector:e,engine:t,ai:s}=r,a=e.getTurnNumber(),n=t.getExtraState();if(e.getTurnNumber()==0){const i=e.getPermanentAtIfExists({row:5,column:2});if(!i)throw new Error("expect camp to exist");t.adjustPermanentStats(i,0,-3);return}const o=e.getPermanents({owner:h.P2,type:se.CREATURE});for(const i of o){if(e.getBases(h.P1).length===0)break;s.tryAttackFirst(i)}if(a===2){e.getBases(h.P1).length===0?s.setKeyframe("tutorial3-lose-1"):s.setKeyframe("tutorial3-start-2");return}if(n.phase===1&&o.length===0){s.setKeyframe("tutorial3-start-3"),n.stampedeTurnStart=a+3*2,n.phase=2;return}if(a===n.stampedeTurnStart){t.spawn("chocolate-calf",1,0,h.P2),t.spawn("chocolate-calf",1,2,h.P2),t.spawn("chocolate-calf",1,4,h.P2),n.phase===4?(s.setKeyframe("tutorial3-stampede"),n.summonedAll=!0):s.setKeyframe("tutorial3-stampede-fail"),n.phase=5;return}const l=e.getPermanents({owner:h.P1,type:se.CREATURE});if(n.phase===2&&l.length===3){s.setKeyframe("tutorial3-start-5"),n.phase=3;return}},afterGameEnd:(r,e,t)=>{const{engine:s,ai:a}=t,n=s.getExtraState();r===h.P2&&n.summonedAll&&a.setKeyframe("tutorial3-lose-2")},extraLoseChecks:(r,e)=>{const{inspector:t}=e,{keyframe:s}=t.gameState,a=t.getTurnNumber();return r===h.P1?t.getBases(r).length===0&&(a>3||s!==void 0&&["tutorial3-lose-1-wrong-move","tutorial3-lose-1-other"].includes(s.id)):!1}},no={aiTurn:r=>{const{inspector:e,engine:t,ai:s}=r,a=e.getTurnNumber(),n=e.getPermanents({owner:h.P1,type:se.CREATURE}),o=e.getPermanents({owner:h.P2,type:se.CREATURE});switch(a){case 0:{const l=e.getBases(h.P2)[0];t.adjustPermanentStats(l,0,-2),s.setKeyframe("tutorial4-start-1");return}case 2:{t.spawn("pbee---j",1,0,h.P2),t.spawn("pbee---j",1,1,h.P2),t.spawn("two-bees",2,2,h.P2),t.spawn("pbee---j",1,3,h.P2),t.spawn("pbee---j",1,4,h.P2),n.length===2?s.setKeyframe("tutorial4-start-2"):s.setKeyframe("tutorial4-start-2-not-all-summon");return}}o.forEach(l=>{s.tryAttackFirst(l,{sort:["creaturesFirst","health",{type:"euclideanDistance",slot:l.slot}]})})}},oo={beforeNewGame:r=>{const{engine:e,ai:t}=r;e.spawn("roe-doe-dendron",1,0,h.P2),e.spawn("flora-the-explora",2,2,h.P2),e.spawn("nepeta-legion",1,4,h.P2),t.setKeyframe("tutorial5-start")},aiTurn:r=>{const{inspector:e,engine:t,ai:s}=r,a=e.getTurnNumber()/2;if(a==0)return;const n=["flora-the-explora","roe-doe-dendron","nepeta-legion"][(a-1)%3],o=[1,2,0],l=[1,3,2,0,4];let i=!1;for(let u=0;u<3;u++){for(let f=0;f<2;f++)if(s.trySpawn(n,o[u],l[f])){i=!0;break}if(i)break}if(!i)for(let u=0;u<3;u++){for(let f=2;f<5;f++)if(s.trySpawn(n,o[u],l[f])){i=!0;break}if(i)break}e.getPermanents({owner:h.P2,type:se.CREATURE}).forEach(u=>{s.tryAttackFirst(u)})}},lo={disableP2NoBasesLossCondition:!0,beforeNewGame:r=>{},afterStep:(r,e)=>{const{inspector:t,engine:s,ai:a}=e,{keyframe:n}=t.gameState;t.getBases(h.P2).length===0&&n!==void 0&&n.id==="tutorial6-start-2"&&a.setKeyframe("tutorial6-end")},aiTurn:r=>{const{inspector:e,engine:t,ai:s}=r;switch(e.getTurnNumber()){case 0:{const o=e.getPermanents({name:"camp",owner:h.P2});for(const l of o)t.adjustPermanentStats(l,0,-2);e.gameState[h.P1].hand.length<=0?s.setKeyframe("tutorial6-start-no-deck"):s.setKeyframe("tutorial6-start-1");return}case 2:{s.trySpawn("o",1,0),s.trySpawn("payne",1,1),s.trySpawn("vanilla-calf",1,3),s.trySpawn("re",1,4),s.trySpawn("beethoven",2,0),s.trySpawn("chicken",2,1),s.trySpawn("petroleum-jelly",2,3),s.trySpawn("log",2,4),s.setKeyframe("tutorial6-start-2");break}}e.getPermanents({owner:h.P2,type:se.CREATURE}).forEach(o=>{s.tryAttackFirst(o)})},afterGameEnd:(r,e,t)=>{const{engine:s}=t;e[h.P1]!==void 0&&s.clearKeyframe()}},pe=(r,e)=>e.getReflectedSlot(r),Te=(r,e)=>e.getPermanentsAt(pe(r.slot,e)).find(({owner:t})=>t!==r.owner),io=(r,e,t)=>t.getCardName(r)===t.getCardName(e),uo=(r,e)=>{if(r.type===ce.SLOT){const{slot:t}=r;return{type:ce.SLOT,slot:pe(t,e)}}if(r.type===ce.PERMANENT){const{permanentId:t}=r,s=e.getPermanent(t),a=Te(s,e);if(a)return{type:ce.PERMANENT,permanentId:a.id}}return r},co=(r,e)=>{if(r.type===ce.SLOT){const{slot:t}=r;return{type:ce.SLOT,slot:pe(t,e)}}if(r.type===ce.PERMANENT){const{permanent:t}=r,s=Te(t,e);if(s)return{type:ce.PERMANENT,permanentId:s.id}}return r},Vs=(r,e,t)=>{const{inspector:s}=t,a=s.getPower(r),n=s.getHealth(e),o=n<=0;return a<=0||s.doesPermanentHaveCounterType(e,I.INVULNERABLE)||s.doesPermanentHaveCounterType(e,I.DIVINE_SHIELD)||s.doesPermanentHaveCounterType(e,I.CANNOT_BE_DESTROYED)?o:a>=n},fo=new Set(["nice-cow","lady-jane","murray","rude-cow","giraffatitan","realistic-rex","touch-grass","roe-doe-dendron","switch-boar-d","oklahoma-tusks","quail-aboard-fiery-steeds","beeowulf","nightshade"]),mo={disableP2NoBasesLossCondition:!0,extraLoseChecks:(r,e)=>{const{inspector:t}=e,s=a=>t.getBases(a).length>0;return r===h.P2?!s(r)&&s(t.getOpponentOf(r)):!1},afterInitEngine:r=>{r.engine.initExtraState({didCopyBeforeStep:!1})},beforeNewGame:r=>{const{inspector:e,engine:t}=r,s=e.getDefaultBases(h.P1),a=e.getBasePositions(h.P2,s.length);for(let n=0;n<s.length;n++){const o={row:e.getPlayerRowIndex(0,h.P2),column:a[n]};t.spawn(s[n],o,h.P2)}},beforeStep:(r,e)=>{const{inspector:t,engine:s,ai:a}=e,n=s.getExtraState(),o=c=>s.getBackdoorEngine().aiTryStep(c),l=new Ls(t,h.P2,ae.GOD);switch(r.type){case V.SUMMON:{const{player:c,slot:u,handCardId:f,cardName:g}=r;if(c!==h.P1)break;const E=(()=>{if(f!==void 0){const S=t.getCardInHandIfExists(c,f);return S?t.getCardName(S):null}return null})()??g;E&&o(l.spawn(E,pe(u,t)));break}case V.MOVE:{const{permanentId:c,slot:u}=r,f=t.getPermanent(c);if(f.owner!==h.P1)break;const g=Te(f,t),k=pe(u,t);g&&io(f,g,t)&&o(l.move(g,k));break}case V.ATTACK:{const{attackerId:c,defenderId:u}=r,f=t.getPermanent(c),g=t.getPermanent(u);if(f.owner!==h.P1||Vs(f,g,e))break;const k=Te(f,t),E=Te(g,t);let S=!1;k&&E&&(S=o(l.attack(k,E))),S&&(n.didCopyBeforeStep=!0);break}case V.ACTIVATE_ABILITY:{const{permanentId:c,abilityType:u,effectOpts:f}=r,g=t.getPermanent(c);if(g.owner!==h.P1)break;const k=s.getBackdoorEngine().getEffects(g);if(u===ge.FLEX?k.onRepeatable:k.onSpecial,fo.has(g.card.name||"")){const _=f[0];if(!_||_.type!==ce.PERMANENT)break;const y=t.getPermanent(_.permanentId);if(Vs(g,y,e))break}const E=Te(g,t),S=f.map(_=>uo(_,t));let v=!1;E&&(v=o(l.activateAbility(E,u,S))),v&&(n.didCopyBeforeStep=!0)}}return s.getBackdoorEngine().resolve(r,ae.GOD)!==null},afterStep:(r,e)=>{const{inspector:t,engine:s,ai:a}=e,n=s.getExtraState(),o=u=>s.getBackdoorEngine().aiTryStep(u),l=new Ls(t,h.P2,ae.GOD),i=(u,f,g)=>{if(!t.isSlotInBounds(f)||t.isSlotOccupied(f))return!1;const k=u.card.name,E=s.getBackdoorEngine().cardToPermanent({name:k},g,f);s.getBackdoorController().createPermanent(E);for(const S of u.counters)s.addCounter(E,S);return!0},c=()=>{a.speak("...copy failed... 🥀")};switch(r.type){case V.SUMMON:break;case V.ATTACK:{if(n.didCopyBeforeStep){n.didCopyBeforeStep=!1;break}const{attacker:u,defender:f}=r;if(u.owner!==h.P1)break;const g=Te(u,t),k=Te(f,t);let E=!1;if(g&&k&&o(l.attack(g,k))&&(E=!0),E)break;const S=f.damage>=t.getMaxHealth(f),v=ss(f.slot,pe(u.slot,t));if(S&&v&&k&&i(u,pe(u.slot,t),h.P2)){const _=t.getPermanentAtIfExists(pe(u.slot,t));_&&(s.ready(_),o(l.attack(_,k))&&(E=!0),s.destroy(u,_))}E||c();break}case V.MOVE:break;case V.ACTIVATE_ABILITY:{if(n.didCopyBeforeStep){n.didCopyBeforeStep=!1;break}const{permanent:u,abilityType:f,effectOptsResolved:g}=r;if(u.owner!==h.P1)break;const k=Te(u,t),E=g.map(v=>co(v,t));let S=!1;if(k&&o(l.activateAbility(k,f,E))&&(S=!0),S)break;if(i(u,pe(u.slot,t),h.P2)){const v=t.getPermanentAtIfExists(pe(u.slot,t));v&&(s.ready(v),o(l.activateAbility(v,f,E))&&(S=!0),s.destroy(u,v))}S||c();break}}},aiTurn:r=>{const{inspector:e,ai:t}=r;e.getTurnNumber()===0&&t.speak(`...watchful gnomes... 🌹 ...mimic foe...
...leave no openings... 🌺 ...none shall pass...`)},afterTurnEnd:(r,e)=>{const{inspector:t,engine:s,ai:a}=e;if(r===h.P2){const n=t.getPermanents({owner:h.P2});for(const o of n)s.ready(o)}}},le={CAD:{[x.PURPLE]:10,[x.GREEN]:20,[x.RED]:50},EUR:{[x.WHITEBLACK]:5,[x.RED]:10,[x.GREEN]:100,[x.YELLOW]:200,[x.PURPLE]:500},AUD:{[x.PURPLE]:5,[x.RED]:20,[x.YELLOW]:50,[x.GREEN]:100},KRW:{[x.RED]:5e3,[x.GREEN]:1e4,[x.YELLOW]:5e4},CHF:{[x.YELLOW]:10,[x.RED]:20,[x.GREEN]:50,[x.PURPLE]:1e3},SEK:{[x.PURPLE]:20,[x.GREEN]:200,[x.RED]:500},THB:{[x.GREEN]:20,[x.RED]:100,[x.PURPLE]:500},BRL:{[x.PURPLE]:5,[x.RED]:10,[x.YELLOW]:20,[x.WHITEBLACK]:200}},Bt={goose:le.CAD,poutine:le.CAD,wisent:le.EUR,"twelve-stars":le.EUR,"consort-on-a-bull-deity":le.EUR,"spicy-fermented-cabbage":le.KRW,hallyu:le.KRW,"wombat-mob":le.AUD,"jar-of-vegemite":le.AUD,didgeridoo:le.AUD,"toblerone-dipped-in-fondue":le.CHF,"plus-sign":le.CHF,"army-knife":le.CHF,"pungent-canned-herring":le.SEK,"dala-horse":le.SEK,"green-curry":le.THB,"red-curry":le.THB,"ka-api-ara":le.BRL,"toasted-cassava":le.BRL,"order-and-progress":le.BRL},ho={adjustDamageReceived:(r,e,t,s)=>{const{inspector:a,engine:n}=s;if(!t)return e;const o=a.getCardName(r),l=Bt[o];if(!l)return e;const i=a.getCardColor(r),c=a.getCardColor(t);return!c||!i||i===c?0:l[c]?l[c]:0},afterStep:(r,e)=>{const{engine:t,inspector:s}=e;if(s.getPermanents({owner:h.P2,isBase:!1}).length===0){const n=s.getPermanents({owner:h.P2,isBase:!0});for(const o of n)t.removeCounterType(o,I.INVULNERABLE)}},aiTurn:r=>{const{inspector:e,engine:t,ai:s}=r;e.getTurnNumber()===0&&s.speak("How did you GET in here? I swear this boar treasury is OFF-LIMITS to VISITORS, or my name isn’t MISTER PENNY!");let a=e.getPermanents({owner:h.P2,name:"mint"}),n=1;e.getTurnNumber()/2===5&&(a.forEach(c=>{t.getBackdoorEngine().transformPermanent(c,"mint--overdrive-")}),s.speak("ENTERING MINTY OVERDRIVE!!!")),e.getTurnNumber()/2>=5&&(n=2,a=e.getPermanents({owner:h.P2,name:"mint--overdrive-"}));const o=a.sort(()=>Math.random()-.5);let l=0;for(const c of o){const{row:u,column:f}=c.slot,g=Object.keys(Bt)[Math.floor(Math.random()*Object.keys(Bt).length)];if(s.trySpawn(g,u+1,f)&&l++,l>=n)break}if(l>0)for(const c of a)t.removeCounterType(c,I.INVULNERABLE),t.addCounter(c,{type:I.INVULNERABLE});const i=e.getPermanents({owner:h.P2,type:se.CREATURE});for(const c of i){let u=!1;c.slot.row<4&&(u=s.tryMoveRel(c,1,0)),u||s.tryAttackFirst(c)}}},pr="vanilla-calf",pt="bell-flower",Xe="petroleum-jelly",Qe="quail-aboard-fiery-steeds",Ze="realistic-rex",po={[Xe]:(r,e)=>{const{inspector:t,engine:s,ai:a}=e;let n=r.slot,o=!1;for(const l of t.getPermanentsOf(h.P1))if(a.tryAttack(r,l)){o=!0;break}o||a.tryMoveRel(r,1,0),n=r.slot,n.row==5&&(s.despawn(r),s.spawn(Qe,n,h.P2))},[pr]:(r,e)=>{const{inspector:t,ai:s}=e;s.tryActivateAbility(r,ge.FLEX);for(const a of t.getPermanentsOf(h.P1))if(s.tryAttack(r,a))return!0;if(s.tryMove(r,r.slot.row,[1,2,2,2,3][r.slot.column])||s.tryMoveRel(r,1,0))return!0},[pt]:(r,e)=>{const{inspector:t,ai:s}=e;s.tryActivateAbility(r,ge.FLEX);for(const a of t.getPermanentsOf(h.P1))if(s.tryAttack(r,a))return!0;if(s.tryMove(r,r.slot.row,[0,0,1,4,4][r.slot.column])||s.tryMoveRel(r,1,0))return!0},[Ze]:(r,e)=>{const{inspector:t,ai:s}=e;for(const a of t.getPermanentsOf(h.P1))if(s.tryAttack(r,a))return!0;if(s.tryMove(r,r.slot.row,3)||s.tryMoveRel(r,-1,0))return!0},[Qe]:(r,e)=>{const{inspector:t,ai:s}=e;for(const a of t.getPermanentsOf(h.P1))if(s.tryAttack(r,a))return!0;if(s.tryMove(r,r.slot.row,3)||s.tryMoveRel(r,-1,0))return!0}},go={counterData:{[I.BODY_SLAM]:{handlers:{[R.AFTER_DESTROY_UNIT]:r=>{const{permanent:e,defender:t,ctx:s}=r,{engine:a}=s;a.move(e,t.slot)}}}},aiTurn:r=>{const{inspector:e,engine:t,ai:s}=r,a=e.getTurnNumber(),n=e.getPermanentsOf(h.P2);if(a==0){for(let o=0;o<5;o++)s.trySpawn(Xe,1,o);s.speak("Behold my confounding moo-gicks! Your Units won’t behave the same as normal here!");return}for(const o of n){const l=po[e.getCardName(o)];l&&l(o,r)}switch(a){case 4:for(let o=1;o<4;o++)s.trySpawn(pr,1,o);break;case 8:for(const o of[0,4])for(const l of[0,1])s.trySpawn(pt,l,o);break;case 12:for(let o=0;o<5;o++)s.trySpawn(Xe,1,o);break;case 14:for(let o=0;o<5&&!s.trySpawn(Ze,0,o);o++);for(let o=4;o>=0&&!s.trySpawn(Ze,0,o);o--);break;default:if(a>=18&&a%6==0)for(let o=0;o<5;o++)s.trySpawn(Xe,1,o),s.trySpawn([Ze,pt,Qe,pt,Ze][o],0,o)}return!0},afterSummon:(r,e)=>{const{inspector:t,engine:s}=e;t.getCardName(r).toLowerCase().match(/^[kqrbnp].*/)&&(s.adjustPermanentStats(r,1,0),s.addCounter(r,{type:I.BODY_SLAM}))},afterInitEngine:r=>{r.engine.initExtraState({lastKnownKeepSlot:{row:0,column:2}})},afterStep:(r,e)=>{const{inspector:t,engine:s}=e,a=t.getPermanentsOf(h.P2).filter(o=>t.getSharedEffects(o).isBase??!1)[0];if(!a)return;const n=s.getExtraState();n.lastKnownKeepSlot=a.slot,r.type==V.MOVE&&r.slot.row==0&&r.permanent.owner==h.P1&&(t.getCardName(r.permanent).toLowerCase().match(/^p.*/)??!1)?(s.despawn(r.permanent),s.spawn(Qe,r.slot,h.P1)):r.type==V.ATTACK&&r.attacker.owner==h.P1&&r.attacker.slot.row==0&&(t.getCardName(r.attacker).toLowerCase().match(/^p.*/)??!1)&&(s.despawn(r.attacker),s.spawn(Qe,r.attacker.slot,h.P1))},extraSolveChecks:(r,e,t)=>{const{inspector:s,engine:a}=t,o=a.getExtraState().lastKnownKeepSlot;for(const l of[-1,0,1])for(const i of[-1,0,1]){if(l===0&&i===0)continue;const c={row:o.row+l,column:o.column+i};if(!s.isSlotInBounds(c))continue;const u=s.getPermanentsAt(c);if(u.length>0&&u[0].owner==h.P2)continue;const f=a.getBackdoorEngine().cardToPermanent({name:Xe},h.P2,c);let g=!1;for(const k of s.getPermanentsOf(h.P1))if(qa(k,f,t)){g=!0;break}if(!g)return!1}return!0},afterGameEnd:(r,e,t)=>{const{engine:s,ai:a}=t;!(e[h.P1]??!1)&&r==h.P1?a.speak("As you raised the uwuand, Blancmange slid away! It seems you failed to befriend it. How puzzling!",{hideBattler:!0,speaker:At.NARRATOR}):s.clearKeyframe()}},Eo=100;function Gt(r){return Eo*r.row+r.column}const Ao=new Set([rs]);var qt=(r=>(r[r.MOVE=0]="MOVE",r[r.APPLY_POWERUP=1]="APPLY_POWERUP",r))(qt||{});class as{constructor(e,t){this.actors=e,this.inspector=t}static makeStateFromInspector(e){var s;const t={};for(const a of e.getAllPermanents())t[s=Gt(a.slot)]||(t[s]=[]),t[Gt(a.slot)].push(a);return new as(t,e)}get rows(){return this.inspector.getNumRows()}get cols(){return this.inspector.getNumColumns()}getPushResult(e,t,s,a){if(Math.abs(s)+Math.abs(a)!==1){const f=this.getResultingSlot(t.slot,s,a);return f==null||this.slotHasWall(f)?[]:this.getActorAt(f)?[]:[{type:0,permanent:t,rowDiff:s,colDiff:a}]}const n=t.slot;let o=n;const l=[n];let i=0,c=!1;for(;;){const f=this.getResultingSlot(o,s,a);if(f==null||this.slotHasWall(f))break;l.push(f);const g=this.getActorAt(f);if(!g){c=!0;break}const k=i+this.getWeightOf(g);if(k>e)break;i=k,o=f}if(!c)return[];const u=[];for(let f=0;f<l.length&&f!=l.length-1;f++){const g=l[f],k=this.getActorAt(g);if(!k)throw new Error("error in sokoban logic :(");u.push({type:0,permanent:k,rowDiff:s,colDiff:a})}return u.reverse(),u}getWeightOf(e){return e.card.name==="camp"?99:1}getActorsAt(e){return this.actors[Gt(e)]||[]}getActorAt(e){return this.getActorsAt(e).find(t=>!0)}slotHasWall(e){return!!this.getActorsAt(e).find(t=>Ao.has(t.card.name||""))}isSlotInBounds(e){return 0<=e.row&&e.row<this.rows&&0<=e.column&&e.column<this.cols}getResultingSlot(e,t,s){const a={row:e.row+t,column:e.column+s};return this.isSlotInBounds(a)?a:null}}const qe={[rs]:{handlers:{[R.CREATED]:wo}},[$a]:{handlers:{[R.CREATED]:So}},[Ja]:{handlers:{[R.CREATED]:r=>{r.ctx.engine.addCounter(r.permanent,{type:I.CANNOT_MOVE}),r.ctx.engine.addCounter(r.permanent,{type:I.CANNOT_ATTACK}),r.ctx.engine.addCounter(r.permanent,{type:I.CANNOT_CREATE})},[R.AFTER_DESTROYED]:r=>{const{inspector:e,engine:t}=r.ctx;t.announce("Explosives... explode!");for(const s of e.getPermanents({touching:r.permanent.slot}))t.damageUnattributed(s,2)}}},[Qa]:{onRepeatable(r,e){const t=r.effectOptsResolved[0];e.engine.damage(r.permanent,t.permanent,e.inspector.getPower(r.permanent)),e.engine.damage(r.permanent,r.permanent,1)}},[en]:{adjustDamageReceived(r,e){return Math.max(e-1,0)}},[tn]:{adjustDamageReceived(r,e){return Math.max(e-1,0)}}};for(const r of fr)qe[r]||(qe[r]={}),qe[r].handlers={[R.CREATED]:yo};const To={cardEffects:qe,afterTurnEnd:(r,e)=>{const{ai:t,inspector:s,engine:a}=e;if(s.getTurnNumber()<=1)return;const n=s.getPermanents({owner:r,sort:[o=>-100*s.getNthNearestRow(o.slot.row,r)-o.slot.column]});for(const o of n){if(!an.has(o.card.name||"")||s.getPower(o)<=0)continue;const l=s.getPermanents({column:o.slot.column,rowInFrontOf:{row:o.slot.row,perspective:r},sort:[{type:"frontToBack",perspective:s.getOpponentOf(r)}]});for(const i of l){if(i.card.name===nn)break;if(i.card.name!==rs&&i.owner!==r){a.damage(o,i,s.getPower(o));break}}}},overrideStep(r,e){if(r.type!==V.MOVE)return!1;const{inspector:t,engine:s}=e,a=r.permanent;if(!fr.has(a.card.name||""))return!1;const n=a.slot,o=r.slot,l=o.row-n.row,i=o.column-n.column,u=as.makeStateFromInspector(t).getPushResult(1,a,l,i);for(const f of u)f.type===qt.MOVE?s.moveRel(f.permanent,f.rowDiff,f.colDiff):(f.type,qt.APPLY_POWERUP);return u.length===0&&s.announce("bonk."),!0}},me=sn.map(r=>({...To,afterInitEngine(t){rn[r](t)}}));function yo(r){const{permanent:e,ctx:t}=r,{engine:s}=t;s.addCounter(e,{type:I.CANNOT_ATTACK}),s.addCounter(e,{type:I.CANNOT_CREATE})}function So(r){const{permanent:e,ctx:t}=r,{engine:s}=t;s.addCounter(e,{type:I.CANNOT_ATTACK}),s.addCounter(e,{type:I.CANNOT_CREATE}),s.addCounter(e,{type:I.CANNOT_MOVE})}function wo(r){const{permanent:e,ctx:t}=r,{engine:s}=t;s.addCounter(e,{type:I.DOES_NOT_PROTECT})}const bo={0:{final_6:".....b.b....w.w.....b.w.......",moves65:".....D.X....R.D.....U.D.......",moves54:"..........R..X.D...L.......R..",attks_6:".s.s.!!!!!!s!!!!s!!!!!!!!.s.!!",attks_5:"!!!!!!s!!!!!!!!!!!!!!ss!!!!!!.",attks_4:"!!.s.!!sss!!!!s!ss!s!!!!!.s!!!"},1:{final_6:".....b...b.......w..bw..w.....",moves65:".....U...L.......X..UD..L.....",moves54:"S.......S......R.......D..X...",attks_6:".s.s.!!!!!!s!!!!s!!!!!!!!.s.!!",attks_5:"!!!!!!!!!!!!s!!!!!!!!s!!!!!!s.",attks_4:"!!!!!!!!!!!!s!!s!!!!s!ss!.!!!!"},2:{final_6:"......b.w..w.w.....b......b...",moves65:"......X.U..R.S.....D......L...",moves54:"...X........DD..........UR....",attks_6:".s.s.s!!!!s!!!!s!!!!s!ss!.!!!!",attks_5:"!!!!!!!!!!!!!!!!sss!!s!!!!!!s.",attks_4:".s.s.sssssssssss!!!!s!ss!.!!!!"},3:{final_6:"...w.......bwb.......w....b...",moves65:"...L.......LDU.......X....L...",moves54:"..X.....S.U......R.......R....",attks_6:".!!!!s!ss!s!!!!s!!!!s!!!!.!!!!",attks_5:".!!!!s!!!!!!!!!!s!!!!s!!!!!!!!",attks_4:".s.s.!!!!s!ss!s!!s!ss!s!!.!!!!"},4:{final_6:"........wwb.b.......w....b....",moves65:"........LSS.R.......X....R....",moves54:".......U.XD..S............R...",attks_6:".s.!!sss!!!!!!!!s!!!!s!!!!!!!!",attks_5:"!!.!!!!!!!!!!!!s!!!!s!!!!.!!!!",attks_4:"!!!!.!!!!s!!!!s!!!!sss!!!.s!!!"},5:{final_6:"......bww....w.....b......b...",moves65:"......XDU....S.....D......L...",moves54:"...X........DD..........UR....",attks_6:".s.s.s!!!!s!!!!s!!!!s!ss!.!!!!",attks_5:"!!!!!!!!!!!!!!!!sss!!s!!!!!!s.",attks_4:".s.s.sssssssssss!!!!s!ss!.!!!!"},6:{final_6:".....w.b.........b..bww.......",moves65:".....R.U.........L..DXR.......",moves54:"..S...X.........S......D.R....",attks_6:"!!!!!!s!!!!s!ss!s!!!!!!!!.s.!!",attks_5:"!!!!!!!!s!!!!!!!!!!!!s!!!!!!s.",attks_4:".s!!!ss!s!ss!!!s!!!!s!ss!.!!!!"},7:{final_6:"..b.......b..w......b...w...w.",moves65:"..X.......S..S......U...U...L.",moves54:"..........S..S.R...L.......X..",attks_6:".s!!!ss!!!!!!!s!ss!!!!!s!.s!!!",attks_5:"!!!!!!s!!!!!!!!!!!!!!ss!!!!!!.",attks_4:".s.s.sssss!!!!!!!!!!!!sss!!.s."},8:{final_6:".....w.b.........bw.b.w.......",moves65:".....R.U.........LX.D.R.......",moves54:"..S...X.........S......D.R....",attks_6:"!!!!!!s!!!!s!ss!s!!!!!!!!.s.!!",attks_5:"!!!!!!!!s!!!!!!!!!!!!s!!!!!!s.",attks_4:".s!!!ss!s!ss!!!s!!!!s!ss!.!!!!"},9:{final_6:"b.....b.w.........wb.......w..",moves65:"D.....D.L.........RX.......L..",moves54:".....S.S...D.......U......X...",attks_6:"!!!!!!!!!!!!sss!!!!!!!ss!.!!!!",attks_5:".s.!!!!!!!!!!!!!!s!!!!!!!!!!s.",attks_4:".s.!!!!!!!!sss!!!!!!!!sss!!.s."},10:{final_6:"b.w...b............b....w..w..",moves65:"D.D...D............X....U..L..",moves54:".....S.S...D.......U......X...",attks_6:"!!!!.!!!!s!!sss!!!!!!!ss!.!!!!",attks_5:".s.!!!!!!!!!!!!!!s!!!!!!!!!!s.",attks_4:".s.!!!!!!!!sss!!!!!!!!sss!!.s."},11:{final_6:"..w....b....w...w..b......b...",moves65:"..X....U....L...L..S......R...",moves54:"..R........S...X...S.......L..",attks_6:".!!!!!!!!!!!!sss!!!!s!ss!.!!!!",attks_5:".s!!!ss!s!!!!s!!s!!!!s!ss!!!s.",attks_4:"!!!!.!!s!ss!!!ss!!!!s!ss!.!!!!"},12:{final_6:".b.....b...ww.........b....w..",moves65:".L.....L...XR.........L....S..",moves54:"X.....D......D.......L.....R..",attks_6:".!!!!s!!!!s!!ss!!!ss!!!!!.!!!!",attks_5:"!!!!!!!!!!!!s!!!!s!!!!!!s!!!!.",attks_4:"!!.s.!!sss!!!!s!ss!s!!!!!.s!!!"},13:{final_6:"b.w.........w....b..b.w.......",moves65:"R.S.........X....R..U.D.......",moves54:".DL............X..D........S..",attks_6:"!!!!.!s!!s!s!ss!s!!!!!!!!.s.!!",attks_5:".!!!!s!!!!s!!!!!!!!!!ss!!!!!!.",attks_4:"!!!!!!!!!!!!s!!!!s!!s!!!!.!!!!"},14:{final_6:".....b.......b.w..w.b.......w.",moves65:".....D.......D.X..R.U.......L.",moves54:"..........R....D..XL.......R..",attks_6:".s!!.!!!!s!!!!s!!!!!!!!s!.s!!!",attks_5:"!!!!!!s!!!!!!!!!!!!!!ss!!!!!!.",attks_4:"!!.s.!!sss!!!!s!ss!s!!!!!.s!!!"},15:{final_6:".....w.b...........bbww.......",moves65:".....S.R...........DDUX.......",moves54:".....X..L.......U.......UR....",attks_6:"!!!!!!s!!!!s!ss!s!!!!!!!!.s.!!",attks_5:"!!!!!!!!!!!!s!!!!!!!!s!!!!!!s.",attks_4:"!!!!!!!!!!s!!sss!!!!s!ss!.!!!!"},16:{final_6:".w.......b..b...........wbw...",moves65:".S.......X..R...........USR...",moves54:".X...........D.....U.....R.R..",attks_6:"!!!s.!s!!!!!!s!!!!s!!!!s!!!!!!",attks_5:"!!!!!!!!!!!!!!!!sss!!ss!!!!!!.",attks_4:".s.s.sss!!sss!!s!!!!s!ss!.!!!!"},17:{final_6:"...w...b...w......wb......b...",moves65:"...S...X...R......UD......L...",moves54:"...X........DD..........UR....",attks_6:"!!!!!!!!!!s!!sss!!!!s!ss!.!!!!",attks_5:"!!!!!!!!!!!!!!!!sss!!s!!!!!!s.",attks_4:".s.s.sssssssssss!!!!s!ss!.!!!!"},18:{final_6:"..b.........w...w..b....w.b...",moves65:"..S.........L...L..S....X.R...",moves54:"..D........S...X...S.......L..",attks_6:"!!!s.!s!ss!!!sss!!!!s!ss!.!!!!",attks_5:".s!!!ss!s!!!!s!!s!!!!s!ss!!!s.",attks_4:"!!!!!!!!!!s!!sss!!!!s!ss!.!!!!"},19:{final_6:"..w...b........wb..b.......w..",moves65:"..S...U........XL..L.......S..",moves54:".DL............X..D........S..",attks_6:"!!!!.!!!!s!!sss!!!!!!!ss!.!!!!",attks_5:".!!!!s!!!!s!!!!!!!!!!ss!!!!!!.",attks_4:"!!!!!!!!!!!!s!!!!s!!s!!!!.!!!!"},20:{final_6:"..........b.b.w.....b..ww.....",moves65:"..........X.L.D.....D..LS.....",moves54:"...........D.......S..X.SR....",attks_6:".s!!.ss!!!!!!s!!s!!!!!!!!.s.!!",attks_5:"!!.s.!!sss!!!!!!s!!!!s!!!!!!!!",attks_4:".s.s.ssssssss!!s!!!!s!ss!.!!!!"},21:{final_6:"......wb........w..b....w.b...",moves65:"......DU........L..S....X.R...",moves54:"..R........S...X...S.......L..",attks_6:".s.s.!!!ss!!!sss!!!!s!ss!.!!!!",attks_5:".s!!!ss!s!!!!s!!s!!!!s!ss!!!s.",attks_4:"!!!!.!!s!ss!!!ss!!!!s!ss!.!!!!"},22:{final_6:".....b...b.......w..bw.w......",moves65:".....U...L.......X..UD.S......",moves54:"S.......S......R.......D..X...",attks_6:".s.s.!!!!!!s!!!!s!!!!!!!!.s.!!",attks_5:"!!!!!!!!!!!!s!!!!!!!!s!!!!!!s.",attks_4:"!!!!!!!!!!!!s!!s!!!!s!ss!.!!!!"},23:{final_6:"..b....w...ww......b......b...",moves65:"..R....U...LX......D......L...",moves54:"..XS......R.............UR....",attks_6:"!!!s.!!!sss!!sss!!!!s!ss!.!!!!",attks_5:".!!!.!!s!s!ss!!!sss!!s!!!!!!s.",attks_4:"!!!!.!!s!ss!!!ss!!!!s!ss!.!!!!"},24:{final_6:"..w..w...........b.bb.w.......",moves65:"..S..X...........L.DD.U.......",moves54:"..X.............SR......DR....",attks_6:"!!!!.!s!!s!s!ss!s!!!!!!!!.s.!!",attks_5:"!!!!.!!!!s!!s!!!!!!!!s!!!!!!s.",attks_4:".s.s.sssssssssss!!!!s!ss!.!!!!"},25:{final_6:"b......ww.......b..b.......w..",moves65:"R......UX.......L..L.......S..",moves54:".DL............X..D........S..",attks_6:"!!!!!!!!!!!!sss!!!!!!!ss!.!!!!",attks_5:".!!!!s!!!!s!!!!!!!!!!ss!!!!!!.",attks_4:"!!!!!!!!!!!!s!!!!s!!s!!!!.!!!!"},26:{final_6:"b......w....b......w.w.....b..",moves65:"D......R....L......S.D.....X..",moves54:".....S..D..D.......L......X...",attks_6:"!!!s.!s!ss!s!!!!!!s!!!!s!!!!!!",attks_5:".s.s.!!!!!!!!!!!!s!!!!!!!!!!s.",attks_4:".s.s.!!!ss!s!!!!!!!!!!sss!!.s."},27:{final_6:".w...w.b.........b..b.w.......",moves65:".X...S.U.........L..D.R.......",moves54:"..S..X..........S......R.R....",attks_6:"!!!!!!s!!!!s!ss!s!!!!!!!!.s.!!",attks_5:"!!!!!!!!s!!!!!!!!!!!!s!!!!!!s.",attks_4:".s!!!ss!s!ss!!!s!!!!s!ss!.!!!!"},28:{final_6:"......wbw........b..b.w.......",moves65:"......SUX........L..D.R.......",moves54:"..S...X.........S......D.R....",attks_6:".!!!!s!!!!!!!ss!s!!!!!!!!.s.!!",attks_5:"!!!!!!!!s!!!!!!!!!!!!s!!!!!!s.",attks_4:".s!!!ss!s!ss!!!s!!!!s!ss!.!!!!"},29:{final_6:"......b..w.........b.w..w.b...",moves65:"......D..L.........S.L..X.R...",moves54:"........X..D.......SR......L..",attks_6:".s.!!s!!!!s!!!!s!!!!s!ss!.!!!!",attks_5:"!!.!!!!s!!!!!!!!s!!!!s!ss!!!s.",attks_4:".s.s.sssssssssss!!!!s!ss!.!!!!"},30:{final_6:".....w.b....w....b..b.w.......",moves65:".....R.U....X....L..D.R.......",moves54:"..S...X.........S......R.R....",attks_6:"!!!!!!s!!!!s!ss!s!!!!!!!!.s.!!",attks_5:"!!!!!!!!s!!!!!!!!!!!!s!!!!!!s.",attks_4:".s!!!ss!s!ss!!!s!!!!s!ss!.!!!!"},31:{final_6:"......b.w.......b.wb.......w..",moves65:"......L.L.......U.RX.......L..",moves54:".....S.S...D.......U......X...",attks_6:"!!!!!!!!!!!!sss!!!!!!!ss!.!!!!",attks_5:".s.!!!!!!!!!!!!!!s!!!!!!!!!!s.",attks_4:".s.!!!!!!!!sss!!!!!!!!sss!!.s."},32:{final_6:"b..w....w.......b..b.......w..",moves65:"R..L....X.......L..L.......S..",moves54:".DL............X..D........S..",attks_6:"!!!!!!!!!!!!sss!!!!!!!ss!.!!!!",attks_5:".!!!!s!!!!s!!!!!!!!!!ss!!!!!!.",attks_4:"!!!!!!!!!!!!s!!!!s!!s!!!!.!!!!"},33:{final_6:"..ww.......b.b..........w.b...",moves65:"..LX.......R.U..........S.L...",moves54:".S......D...D...........UX....",attks_6:".!!!!s!ss!s!!!!s!!!!s!!!!.!!!!",attks_5:"!!!!!!!!!!!!!!!!s!!!!s!!!!!!!!",attks_4:"!!!!!!!!!!!!!!!!!!s!ss!!!.s!!."},34:{final_6:"b.w..........b......b...w...w.",moves65:"R.S..........D......U...X...L.",moves54:".RR............X..D........S..",attks_6:"!!!!.!ss!s!!!!s!!!!!!!!s!.s!!!",attks_5:".!!!!s!!!!s!!!!!!!!!!ss!!!!!!.",attks_4:".s!!!ss!s!ss!!!sss!!s!!!!.!!!!"},35:{final_6:".w....b.w.......b..b.......w..",moves65:".R....U.X.......L..L.......S..",moves54:".DS............X..R........S..",attks_6:"!!!!!!!!!!!!sss!!!!!!!ss!.!!!!",attks_5:".!!!!s!!!!s!!!!!!!!!!ss!!!!!!.",attks_4:"!!!!.!!!!s!!sss!!!!!!!ss!.!!!!"},36:{final_6:".....b.wb...........b...w...w.",moves65:".....U.XS...........U...U...L.",moves54:"S.......S......R...X.......R..",attks_6:".s.s.!!!!s!ss!s!ss!!!!!s!.s!!!",attks_5:"!!!!!!!!!!!!s!!!!!!!!ss!!!!!!.",attks_4:"!!!!!!!!!!!!s!!s!!!!s!ss!.!!!!"},37:{final_6:".wb........ww......b......b...",moves65:".RX........RR......D......L...",moves54:"..X.........DD..........UR....",attks_6:"!!!s.!!!sss!!sss!!!!s!ss!.!!!!",attks_5:"!!!!.!!!!s!!!!!!sss!!s!!!!!!s.",attks_4:".s.s.sssssssssss!!!!s!ss!.!!!!"},38:{final_6:".....w.b.........b..b.w.w.....",moves65:".....R.U.........L..D.X.L.....",moves54:"..S...X.........S......D.R....",attks_6:"!!!!!!s!!!!s!ss!s!!!!!!!!.s.!!",attks_5:"!!!!!!!!s!!!!!!!!!!!!s!!!!!!s.",attks_4:".s!!!ss!s!ss!!!s!!!!s!ss!.!!!!"},39:{final_6:"...w.b....w.b...........wb....",moves65:"...L.D....R.R...........XR....",moves54:"..R.......DX.S............R...",attks_6:".s!!!!!!s!!s!!!!s!!!!s!!!!!!!!",attks_5:"!!!!.!ss!!!!!!!s!!!!s!!!!.!!!!",attks_4:"!!!!!!!!!!!!!!s!!!!sss!!!.s!!!"},40:{final_6:"...w.w.b.........b..b.w.......",moves65:"...X.R.U.........L..D.R.......",moves54:"..S...X.........S......D.R....",attks_6:"!!!!!!s!!!!s!ss!s!!!!!!!!.s.!!",attks_5:"!!!!!!!!s!!!!!!!!!!!!s!!!!!!s.",attks_4:".s!!!ss!s!ss!!!s!!!!s!ss!.!!!!"},41:{final_6:"...b....w..w.......b.w....b...",moves65:"...L....X..U.......S.L....R...",moves54:"..R...D............SX......L..",attks_6:"!!!!.!!s!ss!!!ss!!!!s!ss!.!!!!",attks_5:"!!!!!!!!s!!!!s!!s!!!!s!ss!!!s.",attks_4:"!!!!.!!s!ss!!!ss!!!!s!ss!.!!!!"},42:{final_6:"b..w....w........b..b.w.......",moves65:"R..L....X........R..U.D.......",moves54:".DS............X..R........S..",attks_6:"!!!!!!s!!!!s!ss!s!!!!!!!!.s.!!",attks_5:".!!!!s!!!!s!!!!!!!!!!ss!!!!!!.",attks_4:"!!!!.!!!!s!!sss!!!!!!!ss!.!!!!"},43:{final_6:".....b..w...wb.....b.......w..",moves65:".....S..R...XD.....D.......L..",moves54:".....S...X........U.....U.R...",attks_6:".s!!.!!!!s!!!!s!!!!!!!ss!.!!!!",attks_5:".s.!!!!!!!!!!!!!!!!!!s!!!!!!s.",attks_4:".s!!.!!!!s!!!!s!!!!!!!ss!.!!!!"},44:{final_6:".w.b....w..w.......b......b...",moves65:".R.S....X..L.......D......L...",moves54:"..XS......R.............UR....",attks_6:"!!!!.!!s!ss!!!ss!!!!s!ss!.!!!!",attks_5:".!!!.!!s!s!ss!!!sss!!s!!!!!!s.",attks_4:"!!!!.!!s!ss!!!ss!!!!s!ss!.!!!!"},45:{final_6:"b..b.........w......bw......w.",moves65:"S..D.........X......UD......L.",moves54:"S.......S......R..........XR..",attks_6:"!!!!.!ss!s!ss!s!ss!!!!!s!.s!!!",attks_5:"!!!!!!!!!!!!s!!!!!!!!ss!!!!!!.",attks_4:"!!!!!!!!!!!!s!!s!!!!s!ss!.!!!!"},46:{final_6:"......wb........w..b......b.w.",moves65:"......DU........L..S......R.X.",moves54:"..R........S...X...S.......L..",attks_6:".s.s.!!!ss!!!sss!!!!s!ss!.!!!!",attks_5:".s!!!ss!s!!!!s!!s!!!!s!ss!!!s.",attks_4:"!!!!.!!s!ss!!!ss!!!!s!ss!.!!!!"},47:{final_6:"..w...b.........b.wb.......w..",moves65:"..D...L.........U.RX.......L..",moves54:".....S.S...D.......U......X...",attks_6:"!!!!.!!!!s!!sss!!!!!!!ss!.!!!!",attks_5:".s.!!!!!!!!!!!!!!s!!!!!!!!!!s.",attks_4:".s.!!!!!!!!sss!!!!!!!!sss!!.s."},48:{final_6:".b.......w.b....w.......b.w...",moves65:".L.......L.U....X.......U.R...",moves54:"X.....S.S..........L.......L..",attks_6:".!!!!s!ss!s!!!!!!!!!!s!!!!!!s.",attks_5:"!!!!!!!!!!!!sss!!!!!!!ss!.!!!!",attks_4:"!!!!!!!!!!!!sss!!!!s!ss!s!!!!."},49:{final_6:".....bw.b.w..........b.....w..",moves65:".....UX.L.S..........R.....L..",moves54:"D......R..X...........L...R...",attks_6:".s.s.!!!!s!!!!s!!!!s!!!!s!!!!.",attks_5:"!!!!!!s!!!!s!ss!!!ss!!!!!!!!!!",attks_4:".s.s.!!!!s!!!!s!!!!s!!!!s!!!!."}},gr="chocolate",$t="vanilla",Et="cyclow",Er=r=>({owner:h.P2,custom:e=>Jt(r,e)}),Jt=(r,e)=>r.getCardName(e).includes(Et),Ue=(r,e,t)=>{const{inspector:s,engine:a}=e;t||(t=s.getPermanents(Er(s))),t.forEach(n=>{s.getCardName(n).startsWith($t)?a.getBackdoorEngine().transformPermanent(n,$t+"-"+Et+r):a.getBackdoorEngine().transformPermanent(n,gr+"-"+Et+r)})},Ar=(r,e)=>{if(r===6)return e.attks_6;if(r===5)return e.attks_5;if(r===4)return e.attks_4;throw new Error("No attacks found for invalid level: "+r)},ko=(r,e)=>{let t="";r===6?t=e.moves65:r===5&&(t=e.moves54);for(let s=0;s<6;s++)for(let a=0;a<5;a++){const n=s*5+a;if(t[n]==="X")return{row:s,column:a}}throw new Error("No killable slot found for level: "+r)},Tr=(r,e)=>{const{inspector:t,engine:s}=r,a=s.getExtraState(),n=t.getUnoccupiedSlotsClosestTo(e.owner,e.slot);for(const o of n){const l=Ar(a.level-1,a.game),i=o.row*t.getNumColumns()+o.column;if(l[i]==="!"&&s.move(e,o))return}for(const o of n)if(s.move(e,o))return},Ro=(r,e)=>{const{inspector:t,engine:s}=r;for(let n=0;n<6;n++)for(let o=0;o<5;o++){const l={row:n,column:o},i=e.final_6[n*5+o];if(i!=="."){const c=t.getPermanentAtIfExists(l);c&&Tr(r,c);const u=(i==="b"?gr:$t)+"-"+Et+"--sleeping-";s.spawn(u,l,h.P2)}}t.getPermanentsOf(h.P2).forEach(n=>{s.addCounter(n,{type:I.INVULNERABLE})})},vo=(r,e)=>{const{inspector:t,engine:s}=r,a=s.getExtraState();let n="";a.level===6?n=e.moves65:a.level===5&&(n=e.moves54);const o=[];for(let i=0;i<6;i++)for(let c=0;c<5;c++){const u={row:i,column:c},f=n[i*5+c];let g;switch(f){case"L":g={row:i,column:c-1};break;case"R":g={row:i,column:c+1};break;case"U":g={row:i-1,column:c};break;case"D":g={row:i+1,column:c};break;default:continue}const k=t.getPermanentAtIfExists(u);k&&Jt(t,k)&&o.push({cow:k,from:u,to:g})}let l=0;for(;o.length>0&&l<10;){l++;const i=o.shift();if(!i)continue;const{cow:c,from:u,to:f}=i,g=t.getPermanentAtIfExists(f);if(g){if(Jt(t,g)){o.push(i);continue}Tr(r,g)}s.move(c,f)}},Co={counterData:{},aiTurn:r=>{const{inspector:e,engine:t,ai:s}=r,a=t.getExtraState(),n=e.getTurnNumber(),o=e.getPermanents(Er(e));if(n===0)Ro(r,a.game),s.speak("Howdy! The name’s Miss Yu. This here’s my ranch! Mind the cows.");else switch(a.cows){case"--sleeping-":{a.cows="--awake-",Ue("--awake-",r),a.level===6?s.speak("They like to curl up into li’l balls if ya wake ’em, ya see. Watch yer step!"):s.speak("Hope you know what’s comin’.");break}case"--awake-":{const l=Ar(a.level,a.game);for(let u=0;u<6;u++)for(let f=0;f<5;f++){const g=u*5+f;if(l[g]==="!"){const E=e.getPermanentAtIfExists({row:u,column:f});E&&E.owner===h.P1&&e.getCardType(E)===se.CREATURE&&t.destroy(E,E)}}if(a.level===6?s.speak(`My husband always said, the cows won’t pay the bills!
Lemme tell ya, he sure shut up after he saw
this ’ere cow-ordinated lasso attack!`):s.speak("Take that!"),a.cows="--tired-",Ue("--tired-",r),a.level<=4){o.forEach(u=>{t.removeCounterType(u,I.INVULNERABLE)}),Ue("--weak-",r);break}const i=ko(a.level,a.game),c=e.getPermanentAtIfExists(i);c&&(t.removeCounterType(c,I.INVULNERABLE),Ue("--weak-",r,[c]));break}case"--tired-":{if(a.level>o.length){if(a.level<=4){const l=e.getPermanents({name:"barn"})[0];t.removeCounterType(l,I.INVULNERABLE),a.level=3,a.cows="--angry-",Ue("--angry-",r),s.speak("I’ve had it with you! Get off my ranch!");break}vo(r,a.game),a.level-=1,a.cows="--sleeping-",Ue("--sleeping-",r),s.speak("What in tarnation didya do to my cow? Yer gonna get milked!")}else s.speak("They’re tired, don’t give ’em any trouble now.");break}case"--angry-":for(const l of o)s.tryAttackFirst(l,{sort:["structuresFirst","health",{type:"euclideanDistance",slot:l.slot}]})}},afterInitEngine:r=>{const e=Object.values(bo),t=Math.floor(Math.random()*e.length),s=e[t];r.engine.initExtraState({cows:"--sleeping-",level:6,game:s})}},No={afterInitEngine:r=>{r.engine.initExtraState({lastKnownBaseDamage:0})},afterStep:(r,e)=>{const{inspector:t,engine:s,ai:a}=e,n=t.getPermanents({owner:h.P2,isBase:!0})[0];if(n!==void 0){const o=s.getExtraState();o.lastKnownBaseDamage===0&&n.damage!==0&&(a.speak("i got hit... am i going to l, o, s, e again?"),o.lastKnownBaseDamage=n.damage)}},aiTurn:r=>{const{inspector:e,ai:t}=r,s=e.getPermanentsOf(h.P2),a=s.filter(o=>e.getSharedEffects(o).isBase)[0];if(a===void 0)return;if(e.getTurnNumber()===0){t.speak("if only i could w, i, n just once, i'd be so much braver. if only i had a f, r, i, e, n, d..."),t.trySpawn("beeflector",3,0),t.trySpawn("beeflector",3,1),t.trySpawn("beeflector",3,2),t.trySpawn("beeflector",3,3),t.trySpawn("beeflector",3,4);return}for(const o of s)if(e.getCardName(o)==="reckless-medisaur"){let l=!1;const i=e.getPermanents({sort:[c=>c.owner===h.P1?0:1,c=>-c.damage]});for(const c of i)if(l=t.tryActivateAbility(o,ge.SPECIAL,[{type:ce.PERMANENT,permanentId:a.id},{type:ce.PERMANENT,permanentId:c.id}]),l)break;l||t.tryAttackFirst(o,{sort:["structuresFirst",{type:"euclideanDistance",slot:o.slot}]})}else e.getSharedEffects(o).isBase||t.tryAttackFirst(o,{sort:["structuresFirst",{type:"euclideanDistance",slot:o.slot}]});for(const o of[1,3,0,4,2])if(t.trySpawn("reckless-medisaur",1,o))break;let n=0;for(const o of[3,4,5]){for(const l of[0,2,4,1,3])if(t.trySpawn("beeflector",o,l)&&(n+=1),n===3)break;if(n===3)break}},disableBattleWonSolvedCondition:!0,extraSolveChecks:(r,e)=>e===h.P2,afterGameEnd:(r,e,t)=>{const{engine:s,ai:a}=t;e[h.P1]??!1?s.clearKeyframe():a.speak("Before you got the chance to use the uwuand, bb b zipped away crying! Looks like you failed to befriend it.",{hideBattler:!0})}},yr=[{parent:"slime",children:["yellow","sepia"]},{parent:"yellow",children:["lemon","amber"]},{parent:"amber",children:["ivory","orange"]},{parent:"lemon",children:["ebony","turquoise"]},{parent:"ivory",children:["harlequin"]},{parent:"harlequin",children:[]},{parent:"ebony",children:["indigo","mauve"]},{parent:"indigo",children:[]},{parent:"sepia",children:["ecru","emerald"]},{parent:"emerald",children:["khaki","apricot"]},{parent:"khaki",children:["eggplant","lavender"]},{parent:"ecru",children:["auburn","teal"]},{parent:"auburn",children:["lava","rust"]},{parent:"lava",children:[]},{parent:"teal",children:["white","saffron"]},{parent:"white",children:[]},{parent:"apricot",children:[]},{parent:"lavender",children:[]},{parent:"turquoise",children:["silver"]},{parent:"silver",children:[]},{parent:"mauve",children:[]},{parent:"orange",children:["red","lilac"]},{parent:"lilac",children:[]},{parent:"red",children:[]},{parent:"rust",children:[]},{parent:"saffron",children:[]},{parent:"eggplant",children:[]}],Qt=["yellow","lemon","ebony","indigo","silver","ivory","harlequin","red","ecru","auburn","lava","white","khaki","eggplant"],xt=["sepia","emerald","apricot","lavender","teal","saffron","rust","amber","orange","lilac","turquoise","mauve"],ns=(r,e)=>{const{inspector:t,ai:s}=e;s.tryAttackFirst(r,{sort:["creaturesFirst",{type:"euclideanDistance",slot:r.slot}]})},Io=(r,e)=>{ns(r,e)},Po=(r,e)=>{const{engine:t}=e,s=[{x:0,y:1},{x:0,y:-1},{x:1,y:0},{x:-1,y:0}];for(;s.length>0;){const a=Math.floor(Math.random()*s.length),n=s.splice(a,1)[0];if(t.moveRel(r,n.x,n.y))break}ns(r,e)},zt={[R.BEFORE_DESTROYED]:r=>{var l;const{inspector:e,engine:t}=r.ctx,s=e.getCardName(r.permanent),a=r.permanent.slot;(l=yr.find(i=>s.startsWith(i.parent)))==null||l.children.forEach(i=>{const c=e.getUnoccupiedSlotsClosestTo(h.P2,a);let u=a;for(const f of c)if(t.spawn(i+"-slime",f,h.P2)){u=f;break}if(Qt.includes(i)){const f=e.getPermanentAtIfExists(u);if(!f)return;t.addCounter(f,{type:I.FROZEN,explanation:"will not ready on its next turn",expiry:R.START_TURN})}});const n=t.getExtraState(),o=s.split("-")[0];n.slimeKilledOrder.push(o)}},Oo={disableP2NoBasesLossCondition:!0,counterData:{},cardEffects:{slime:{handlers:zt},...Qt.reduce((r,e)=>(r[e+"-slime"]={handlers:{...zt,[R.AFTER_DEAL_DAMAGE]:t=>{const{defender:s,ctx:a}=t,{engine:n}=a;n.mergeValueCounter(s,I.POISON,1,o=>`On start of turn, takes ${o} Damage.`)}}},r),{}),...xt.reduce((r,e)=>(r[e+"-slime"]={handlers:zt},r),{})},aiTurn:r=>{const{inspector:e,engine:t,ai:s}=r,a=e.getTurnNumber(),n=e.getPermanentsOf(h.P2);a==0&&s.trySpawn("slime",1,2);for(const o of n){const l=e.getCardName(o);Qt.includes(l.split("-")[0])?Io(o,r):xt.includes(l.split("-")[0])?Po(o,r):l==="slime"&&ns(o,r)}},afterSummon:(r,e)=>{const{inspector:t,engine:s}=e,a=t.getCardName(r);xt.includes(a.split("-")[0])},afterInitEngine:r=>{r.engine.initExtraState({slimeKilledOrder:[]})},extraLoseChecks:(r,e)=>{const{inspector:t}=e;return r===h.P2&&t.getPermanentsOf(r).length===0},extraSolveChecks:(r,e,t)=>{const{engine:s}=t,n=s.getExtraState().slimeKilledOrder,o=yr.map(l=>l.parent);if(n.length!==o.length)return!1;for(let l=0;l<n.length;l++)if(n[l]!==o[l])return!1;return!0},afterGameEnd:(r,e,t)=>{const{engine:s,ai:a}=t;(e[h.P1]??!1)||a.speak("The Slime disintegrated back into the sludge! It looks like you failed to befriend it. How puzzling!",{hideBattler:!0,speaker:At.NARRATOR})}},st={disableP2NoBasesLossCondition:!0,counterData:{[I.DOOM]:{handlers:{[R.END_TURN]:r=>{const{permanent:e,counter:t,counterIndex:s,ctx:a}=r,{engine:n,inspector:o,ai:l}=a;if(!o.isTurnPending(e.owner))return;if(t==null||s==null)throw new Error("counter event should have counter specified");const i=o.getCardName(e)==="bargle",c=o.getCardName(e)==="swargle",u=(t.val||0)-1;if(u<=0){if(i){l.speak("Orgle orgle tirgle!");for(const f of o.getPermanentsOf(h.P1))n.destroy(e,f)}else c&&n.destroy(e,e);return{expire:!0}}else i&&(u===1?l.speak("Largle turgle torgle bergle thirgle rorgle!"):u===6?l.speak(`${u} turgle torgle bergle thirgle rorgle.`):l.speak(`${u} turgle torgle bergle thirgle rorgle.`)),n.updateCounterVal(e,s,u)}}}},afterInitEngine:r=>{const{engine:e}=r;e.initSharedExtraState({canAttackMorgle:!1})},cardEffects:{cargle:{insteadOfDamaged(r,e,t,s){const{engine:a}=s;return(t==null?void 0:t.slot.column)===0||(t==null?void 0:t.slot.column)===4?(a.destroy(r,t),!1):!0}},dorgle:{insteadOfDamaged(r,e,t,s){const{engine:a}=s;return(t==null?void 0:t.slot.column)===1||(t==null?void 0:t.slot.column)===3?(a.destroy(r,t),!1):!0}},morgle:{},corgle:{handlers:{[R.AFTER_DAMAGED]:r=>{const{inspector:e,engine:t}=r.ctx,s=r.attacker;!s||e.getPlayerGems(s.owner).length===3||t.destroy(r.permanent,s)}}},bargle:{handlers:{[R.CREATED]:r=>{const{engine:e}=r.ctx;e.addCounter(r.permanent,{type:I.DOOM,val:8})},[R.START_TURN]:r=>{const{inspector:e,engine:t}=r.ctx;[2,3,5,7,11,13,17,19,23,29].includes(e.getHealth(r.permanent))||e.getPermanentsOf(h.P1).forEach(a=>{t.destroy(r.permanent,a)})}}},durgle:{adjustDamageReceived(r,e,t,s){const{inspector:a}=s;if(!t)return 0;const n=a.getCardColor(t);return n!==null&&n===x.GREEN?e:0}},gorgle:{adjustDamageReceived(r,e,t,s){const{inspector:a}=s;return t&&a.getHealth(t)>=4?e*10:e}},swargle:{handlers:{[R.CREATED]:r=>{const{engine:e}=r.ctx;e.addCounter(r.permanent,{type:I.DOOM,val:7})},[R.AFTER_DAMAGED]:r=>{const{inspector:e,engine:t}=r.ctx;e.getPermanentsOf(h.P1).forEach(s=>{t.destroy(r.permanent,s)})}}}},afterStep(r,e){const{inspector:t,engine:s}=e;if(r.type!==V.MOVE)return;const a=t.getPermanents({owner:h.P2,name:"morgle"});if(a.length===0)return;if(a.length>1)throw new Error("multiple morgles found");const n=a[0];r.slot.column===n.slot.column&&s.modifySharedExtraState({canAttackMorgle:!0})},aiTurn:r=>{const{inspector:e,engine:t,ai:s}=r;if(e.getTurnNumber()===0)return;const a=e.getPermanentsOf(h.P2);t.modifySharedExtraState({canAttackMorgle:!1});for(const n of a)s.tryAttackFirst(n)},extraLoseChecks:(r,e)=>{const{inspector:t,engine:s}=e;return r===h.P2?t.getPermanentsOf(r).length===0:!1}};function ke(r,e,t,s){r.engine.spawn(e,{row:t,column:s},h.P2)}const _o={...st,beforeNewGame:r=>{ke(r,"cargle",1,0),ke(r,"dorgle",1,4)}},Do={...st,beforeNewGame:r=>{ke(r,"morgle",1,2)}},Uo={...st,beforeNewGame:r=>{ke(r,"corgle",1,2)}},Mo={...st,beforeNewGame:r=>{ke(r,"bargle",0,2)}},Lo={...st,beforeNewGame:r=>{ke(r,"durgle",0,0),ke(r,"gorgle",0,2),ke(r,"swargle",0,4)}},Sr={cardEffects:{"b-w-copier":{handlers:{[R.CREATED]:r=>{r.ctx.engine.addCounter(r.permanent,{type:I.BASE_GEMS,val:3})}},onSpecial:(r,e)=>{const{inspector:t,engine:s}=e,{permanent:a}=r,n=a.slot,o=n.row;for(let l=0;l<t.getNumColumns();l++)if(l!=n.column){const i=t.getPermanentAtIfExists({row:o,column:l});if(!i)continue;const c=t.getCardColor(i);c!==null&&[x.WHITE,x.BLACK].includes(c)&&s.addCardToHand(i.owner,i.card)}}},"pasture-planner":{adjustAttackChecks:r=>{r.delete(on.CARD_TYPE)},handlers:{[R.CREATED]:r=>{const{permanent:e,ctx:t}=r,{engine:s}=t;s.addCounter(e,{type:I.INVULNERABLE})},[R.OTHER_UNIT_SPAWN]:r=>{const{permanent:e,ctx:t}=r,{engine:s}=t,a=r.spawnedPermanent,n=s.getExtraState();e.owner==a.owner&&(n.isInvulnerable?s.addCounter(a,{type:I.INVULNERABLE}):s.addCounter(a,{type:I.CANNOT_BE_DESTROYED}),s.addCounter(a,{type:I.CANNOT_MOVE}))},[R.END_TURN]:r=>{const{permanent:e,ctx:t}=r,{inspector:s,ai:a}=t;if(!s.doesPermanentHaveCounterType(e,I.DOOM)||!s.isTurnPending(h.P2))return;const n=e.counters.findIndex(c=>c.type===I.DOOM),l=(e.counters[n].val||0)-1,i=Array(l).fill("⏳").join(" ");l===1?a.speak(`Audit is coming!
${i}`):l>1&&a.speak(`Audit in ${l} turns!
${i}`)}}}},aiTurn:r=>{var g,k;const{inspector:e,engine:t,ai:s}=r,a=t.getExtraState(),{globalConstraints:n,clues:o,answer:l,showSolution:i}=a,c=e.getTurnNumber()/2,u=e.getPermanentsOf(h.P2).filter(E=>e.getSharedEffects(E).isBase)[0],f=e.getPermanentsOf(h.P1).filter(E=>e.getSharedEffects(E).isBase)[0];if(c===0){const E=[{row:0,column:0},{row:0,column:1},{row:0,column:3},{row:0,column:4}];for(const{id:S,health:v}of n){const _=E.shift();if(!_)throw new Error("oops");s.trySpawn(S,_);const y=e.getPermanentsAt(_)[0];t.adjustPermanentStats(y,0,v-1)}}if(c>=1&&c<=o.length){const{id:E,health:S,row:v,column:_}=o[c-1],y={row:v+1,column:_};for(const C of e.getPermanentsAt(y))t.destroy(u,C);if(!s.trySpawn(E,y))throw new Error(`why ${E} ${JSON.stringify(y)}`);const N=e.getPermanentsAt(y)[0];t.adjustPermanentStats(N,0,S-1)}if(c===o.length&&(o.length<=2?t.addCounter(u,{type:I.DOOM,val:7-o.length,explanation:"Audit is coming"}):t.addCounter(u,{type:I.DOOM,val:4,explanation:"Audit is coming"})),c>o.length&&e.getCounterValSum(u,I.DOOM)===1){const E=[],S=Bo(e);if(S===null)E.push(u);else{const v=Go(S);for(const _ of e.getPermanentsOf(h.P2)){const y=C=>{const O=parseInt(C.split("-").pop()??"");return O%2===1?`${O}-${O+1}`:`${O-1}-${O}`};let N=!0;(g=_.card.name)!=null&&g.startsWith("puzzle-50-global-")&&(N=xo[y(_.card.name)](gt(e,_)??!1)(S,v,e.getHealth(_),o)),(k=_.card.name)!=null&&k.startsWith("puzzle-50-local-")&&(N=zo[y(_.card.name)](gt(e,_)??!1)(S,v,e.getHealth(_),_.slot.row-1,_.slot.column)),N||E.push(_)}}for(const v of E)t.addCounter(v,{type:I.POWER_ADJUSTMENT,val:100,explanation:"Failed audit!"});if(i)for(let v=0;v<5;v++)for(let _=0;_<5;_++){const y={row:v+1,column:_},N=l[v][_];for(const C of e.getPermanentsAt(y))gt(e,C)!==N&&t.destroy(u,C);s.trySpawn(`puzzle-50-local-${N?1:2}`,y)}for(const v of E)s.tryAttack(v,f);E.length===0&&t.destroy(u,u)}},afterGameEnd:(r,e,t)=>{const{engine:s,ai:a}=t;e[h.P1]??!1?s.clearKeyframe():a.speak("Audit failed! Violators shall be punished in accordance with the law!")}},gt=(r,e)=>{const t=r.getCardColor(e);if(t===null)return null;switch(t){case x.WHITE:return!1;case x.BLACK:return!0;default:return null}},os=r=>{const{row:e,column:t}=r;return 0<=e&&e<5&&0<=t&&t<5},Bo=r=>{const e=Array(5).fill(null).map(t=>Array(5).fill(null));return r.getAllPermanents().forEach(t=>{const s=t.slot.row-1,a=t.slot.column;os({row:s,column:a})&&(e[s][a]=gt(r,t))}),e.every(t=>t.every(s=>s!==null))?e:null},wr=(r,e)=>r.row===e.row&&r.column===e.column,Ie=(r,e)=>r.some(t=>wr(t,e)),br=r=>e=>{const t=(n,o)=>n[o.row][o.column],s=[],a=[];for(let n=0;n<5;n++)for(let o=0;o<5;o++)a.push({row:n,column:o});for(;a.length>0;){const n=a[0],o=t(e,n),l=[],i=c=>{const u=a.findIndex(f=>wr(c,f));u!==-1&&(a.splice(u,1),l.push(c),r(c).filter(f=>t(e,f)===o).forEach(f=>i(f)))};i(n),s.push({color:o,cells:l})}return s},Go=br(r=>{const{row:e,column:t}=r;return[{row:e+1,column:t},{row:e-1,column:t},{row:e,column:t+1},{row:e,column:t-1}].filter(os)}),xo={"1-2":r=>(e,t,s,a)=>{let n=0;for(let o=0;o<t.length;o++)t[o].color==r&&n++;return n<=1},"3-4":r=>e=>{const t=br(a=>{const{row:n,column:o}=a;return[{row:n+1,column:o},{row:n-1,column:o},{row:n,column:o+1},{row:n,column:o-1},{row:n+1,column:o+1},{row:n-1,column:o+1},{row:n+1,column:o-1},{row:n-1,column:o-1}].filter(os)})(e);let s=0;for(let a=0;a<t.length;a++)t[a].color==r&&s++;return s<=1},"5-6":r=>(e,t,s,a)=>{for(let n=0;n<t.length;n++)if(t[n].color==r){let o=!1;for(const l of t[n].cells)if(l.row==0||l.row==4||l.column==0||l.column==4){o=!0;break}if(!o)return!1}return!0},"7-8":r=>(e,t,s,a)=>{for(let n=0;n<4;n++)for(let o=0;o<4;o++)if(e[n][o]==r&&e[n+1][o]==r&&e[n][o+1]==r&&e[n+1][o+1]==r)return!1;return!0},"9-10":r=>(e,t,s,a)=>{for(let n=0;n<4;n++)for(let o=0;o<4;o++){let l=0;if(e[n][o]==r&&l++,e[n][o+1]==r&&l++,e[n+1][o]==r&&l++,e[n+1][o+1]==r&&l++,l==3)return!1}return!0},"11-12":r=>(e,t,s,a)=>{for(let n=0;n<5;n++)for(let o=0;o<5;o++){if(e[n][o]!=r)continue;let l,i,c,u;l=i=c=u=0;for(let f=1;f<=n&&e[n-f][o]==r;f++)l++;for(let f=1;f<=4-n&&e[n+f][o]==r;f++)i++;for(let f=1;f<=o&&e[n][o-f]==r;f++)c++;for(let f=1;f<=4-o&&e[n][o+f]==r;f++)u++;if(l+i!=c+u)return!1}return!0},"13-14":r=>(e,t,s,a)=>{for(let n=0;n<t.length;n++){if(t[n].color!=r)continue;let o=0;for(const l of t[n].cells){const{row:i,column:c}=l;let u=0;if(i>0&&e[i-1][c]==r&&u++,i<4&&e[i+1][c]==r&&u++,c>0&&e[i][c-1]==r&&u++,c<4&&e[i][c+1]==r&&u++,u>2||u<1)return!1;u==1&&o++}if(o!=2)return!1}return!0},"15-16":r=>(e,t,s,a)=>{for(let n=0;n<5;n++)for(let o=0;o<5;o++){if(e[n][o]!=r)continue;let l=0;if(n>0&&e[n-1][o]==r&&l++,n<4&&e[n+1][o]==r&&l++,o>0&&e[n][o-1]==r&&l++,o<4&&e[n][o+1]==r&&l++,l!=2)return!1}return!0},"17-18":r=>(e,t,s,a)=>{for(let n=0;n<t.length;n++)if(t[n].color==r&&t[n].cells.length!=s)return!1;return!0},"19-20":r=>(e,t,s,a)=>{for(let n=0;n<t.length;n++){if(t[n].color!=r)continue;let o=0;for(const l of t[n].cells)Ie(a,l)&&o++;if(o!=s)return!1}return!0},"21-22":r=>(e,t,s,a)=>{for(let n=0;n<t.length;n++){if(t[n].color!=r)continue;let o=0;for(const l of t[n].cells)Ie(a,l)&&o++;if(o>s)return!1}return!0}},zo={"1-2":r=>(e,t,s,a,n)=>!0,"3-4":r=>(e,t,s,a,n)=>{let o=0;return a>0&&e[a-1][n]==r&&o++,a<4&&e[a+1][n]==r&&o++,n>0&&e[a][n-1]==r&&o++,n<4&&e[a][n+1]==r&&o++,o==s},"5-6":r=>(e,t,s,a,n)=>{let o=0;for(let l=Math.max(0,a-1);l<=Math.min(4,a+1);l++)for(let i=Math.max(0,n-1);i<=Math.min(4,n+1);i++)e[l][i]!=r&&o++;return o==s},"7-8":r=>(e,t,s,a,n)=>{let o=0;for(let l=0;l<5;l++)e[l][n]!=r&&o++;return o==s},"9-10":r=>(e,t,s,a,n)=>{let o=0;for(let l=0;l<5;l++)e[a][l]!=r&&o++;return o==s},"11-12":r=>(e,t,s,a,n)=>{for(let o=0;o<t.length;o++)if(Ie(t[o].cells,{row:a,column:n}))return t[o].cells.length==s;return!1},"13-14":r=>(e,t,s,a,n)=>{let o=0;for(let l=0;l<t.length;l++)t[l].color!=r&&(Ie(t[l].cells,{row:a-1,column:n})||Ie(t[l].cells,{row:a+1,column:n})||Ie(t[l].cells,{row:a,column:n-1})||Ie(t[l].cells,{row:a,column:n+1}))&&(o+=t[l].cells.length);return o==s},"15-16":r=>(e,t,s,a,n)=>{let o,l,i,c;o=l=i=c=0;for(let u=1;u<=a&&e[a-u][n]==r;u++)o++;for(let u=1;u<=4-a&&e[a+u][n]==r;u++)l++;for(let u=1;u<=n&&e[a][n-u]==r;u++)i++;for(let u=1;u<=4-n&&e[a][n+u]==r;u++)c++;return o+l+i+c+1==s},"17-18":r=>(e,t,s,a,n)=>{let o,l,i,c;o=l=i=c=0;for(let u=1;u<=a&&e[a-u][n]!=r;u++)o++;for(let u=1;u<=4-a&&e[a+u][n]!=r;u++)l++;for(let u=1;u<=n&&e[a][n-u]!=r;u++)i++;for(let u=1;u<=4-n&&e[a][n+u]!=r;u++)c++;return o+l+i+c==s}},Ho={global_constraint:[[1,1],[7,1]],puzzles:[{clues:[[18,8,0,4],[18,5,1,2],[18,2,3,3],[18,5,4,0]],answer:[[!0,!0,!0,!0,!1],[!1,!0,!1,!0,!0],[!1,!0,!0,!1,!0],[!0,!0,!1,!1,!0],[!1,!0,!0,!0,!0]]},{clues:[[18,1,0,4],[18,7,1,4],[18,1,3,0],[18,5,3,1]],answer:[[!1,!0,!1,!0,!1],[!0,!0,!0,!0,!1],[!1,!0,!1,!0,!0],[!1,!1,!0,!1,!0],[!0,!0,!0,!0,!0]]},{clues:[[18,4,0,2],[18,7,2,1],[18,1,3,0],[18,2,3,4]],answer:[[!0,!0,!1,!1,!1],[!1,!0,!0,!1,!1],[!1,!1,!0,!0,!0],[!1,!0,!1,!0,!1],[!1,!0,!0,!0,!1]]},{clues:[[18,4,1,3],[18,8,2,2],[18,3,3,4],[18,4,4,4]],answer:[[!0,!0,!0,!0,!0],[!0,!1,!0,!1,!0],[!0,!0,!1,!0,!0],[!0,!1,!0,!1,!1],[!0,!0,!0,!0,!1]]},{clues:[[18,4,1,2],[18,5,1,3],[18,8,2,0],[18,1,4,2]],answer:[[!0,!1,!0,!0,!0],[!0,!0,!1,!1,!0],[!1,!0,!0,!0,!0],[!0,!0,!1,!0,!1],[!0,!1,!1,!0,!1]]},{clues:[[18,2,0,0],[18,6,2,4],[18,6,3,1],[18,4,4,4]],answer:[[!1,!0,!0,!1,!0],[!1,!0,!1,!0,!0],[!0,!0,!0,!0,!1],[!0,!1,!0,!1,!1],[!0,!0,!0,!0,!1]]},{clues:[[18,3,0,0],[18,1,2,3],[18,7,4,4]],answer:[[!1,!1,!0,!0,!0],[!0,!0,!0,!1,!0],[!0,!1,!1,!1,!0],[!0,!0,!1,!1,!0],[!1,!0,!0,!0,!1]]},{clues:[[18,3,0,3],[18,4,0,4],[18,2,1,3],[18,6,2,1],[18,6,3,3]],answer:[[!0,!0,!0,!1,!1],[!0,!1,!1,!1,!0],[!0,!1,!0,!0,!0],[!0,!0,!0,!1,!0],[!1,!0,!1,!0,!0]]},{clues:[[18,4,0,3],[18,3,1,1],[18,1,1,2],[18,2,2,0],[18,3,2,2],[18,1,4,4]],answer:[[!1,!1,!1,!1,!1],[!1,!1,!1,!0,!1],[!1,!0,!1,!0,!1],[!0,!0,!0,!0,!1],[!1,!0,!1,!0,!1]]},{clues:[[18,2,0,1],[18,4,1,4],[18,7,2,1],[18,8,3,3]],answer:[[!0,!1,!1,!0,!1],[!0,!0,!1,!0,!1],[!0,!1,!0,!0,!0],[!0,!0,!0,!1,!0],[!1,!0,!1,!0,!0]]}]},Fo={global_constraint:[[2,1],[5,1]],puzzles:[{clues:[[16,3,0,0],[16,6,0,2],[16,4,1,2],[16,7,2,0],[16,4,3,2],[16,5,3,4]],answer:[[!1,!1,!1,!0,!1],[!0,!0,!1,!0,!1],[!1,!1,!1,!1,!1],[!1,!0,!1,!0,!1],[!1,!0,!0,!0,!1]]},{clues:[[16,6,0,1],[16,5,0,4],[16,7,1,2],[16,9,3,3],[16,7,4,4]],answer:[[!1,!1,!1,!1,!1],[!0,!1,!1,!1,!0],[!0,!0,!1,!1,!1],[!1,!1,!1,!1,!1],[!1,!1,!1,!1,!1]]},{clues:[[16,2,0,1],[16,4,0,2],[16,4,0,4],[16,5,2,2],[16,3,3,3]],answer:[[!0,!1,!1,!0,!1],[!0,!0,!1,!0,!1],[!0,!0,!1,!1,!1],[!0,!0,!0,!1,!1],[!0,!0,!0,!0,!0]]},{clues:[[16,5,1,0],[16,8,2,2],[16,5,2,4],[16,9,4,1],[16,8,4,2],[16,8,4,3]],answer:[[!0,!1,!0,!0,!0],[!1,!1,!1,!1,!0],[!1,!1,!1,!1,!1],[!0,!1,!1,!1,!0],[!1,!1,!1,!1,!1]]},{clues:[[16,7,0,1],[16,6,1,0],[16,7,2,1],[16,6,3,2],[16,8,3,4],[16,5,4,4]],answer:[[!1,!1,!1,!0,!0],[!1,!1,!0,!0,!1],[!1,!1,!1,!0,!1],[!1,!1,!1,!1,!1],[!1,!1,!0,!1,!1]]},{clues:[[16,8,0,0],[16,7,1,0],[16,4,2,0],[16,5,3,1],[16,5,4,3]],answer:[[!1,!1,!1,!1,!1],[!1,!1,!1,!1,!0],[!1,!0,!0,!0,!0],[!1,!1,!1,!1,!0],[!0,!1,!1,!1,!1]]},{clues:[[16,6,0,3],[16,7,1,0],[16,5,2,1],[16,7,2,3],[16,6,3,2],[16,3,4,1]],answer:[[!1,!0,!1,!1,!1],[!1,!1,!1,!1,!1],[!1,!1,!1,!1,!0],[!0,!0,!1,!1,!0],[!1,!1,!1,!0,!0]]},{clues:[[16,4,0,0],[16,3,0,2],[16,5,0,4],[16,5,3,3],[16,3,4,1],[16,6,4,3]],answer:[[!1,!0,!1,!1,!1],[!1,!0,!0,!1,!1],[!1,!1,!1,!1,!1],[!1,!1,!0,!1,!0],[!0,!1,!0,!1,!1]]},{clues:[[16,5,0,3],[16,5,1,0],[16,6,1,1],[16,3,1,4],[16,7,2,1],[16,3,4,2]],answer:[[!1,!1,!1,!1,!1],[!1,!1,!0,!0,!1],[!1,!1,!1,!0,!1],[!1,!1,!0,!0,!0],[!0,!1,!1,!1,!0]]},{clues:[[16,2,0,1],[16,3,1,0],[16,5,3,3],[16,6,4,1],[16,7,4,3],[16,8,4,4]],answer:[[!1,!1,!0,!0,!1],[!1,!0,!0,!1,!1],[!1,!1,!0,!1,!1],[!0,!1,!0,!1,!1],[!0,!1,!1,!1,!1]]}]},Ko={global_constraint:[[2,1],[17,1]],puzzles:[{clues:[[16,9,1,3],[16,5,1,4],[16,2,3,0],[16,6,4,1]],answer:[[!1,!0,!1,!1,!0],[!1,!1,!1,!1,!1],[!0,!1,!1,!1,!0],[!1,!1,!0,!1,!1],[!0,!1,!1,!1,!0]]},{clues:[[16,3,1,1],[16,6,2,1],[16,4,4,2],[16,3,4,4]],answer:[[!1,!0,!1,!1,!1],[!1,!1,!0,!1,!0],[!1,!1,!1,!1,!1],[!1,!0,!1,!1,!1],[!0,!1,!1,!0,!1]]},{clues:[[16,7,1,4],[16,3,2,3],[16,3,4,2]],answer:[[!1,!1,!1,!0,!1],[!0,!1,!1,!1,!1],[!1,!1,!0,!1,!1],[!1,!1,!1,!0,!1],[!1,!0,!1,!1,!0]]},{clues:[[16,3,0,0],[16,4,0,1],[16,4,4,3],[16,8,4,4]],answer:[[!1,!1,!1,!0,!1],[!0,!1,!1,!1,!1],[!1,!0,!1,!1,!1],[!1,!1,!1,!0,!1],[!0,!1,!1,!1,!1]]},{clues:[[16,5,0,0],[16,9,2,3],[16,6,2,4],[16,8,3,3],[16,8,4,2]],answer:[[!1,!1,!1,!1,!1],[!0,!1,!1,!1,!0],[!1,!1,!1,!1,!1],[!0,!1,!1,!1,!1],[!1,!1,!1,!1,!0]]},{clues:[[16,7,1,0],[16,5,3,1],[16,9,3,2],[16,7,4,3]],answer:[[!0,!1,!1,!1,!1],[!1,!1,!1,!1,!0],[!1,!0,!1,!1,!1],[!1,!1,!1,!1,!1],[!1,!0,!1,!1,!1]]},{clues:[[16,5,0,1],[16,4,2,3],[16,8,3,0],[16,8,4,4]],answer:[[!1,!1,!1,!1,!1],[!1,!0,!1,!0,!1],[!1,!1,!0,!1,!1],[!1,!1,!1,!1,!1],[!0,!1,!1,!1,!1]]},{clues:[[16,9,0,1],[16,5,0,2],[16,6,1,0],[16,6,3,4],[16,7,4,2]],answer:[[!1,!1,!1,!1,!1],[!1,!1,!0,!1,!1],[!1,!1,!1,!1,!0],[!1,!1,!1,!1,!1],[!1,!1,!1,!1,!1]]},{clues:[[16,8,1,4],[16,7,2,2],[16,9,2,3],[16,9,3,0],[16,5,4,3]],answer:[[!1,!1,!0,!1,!1],[!1,!1,!1,!1,!1],[!1,!1,!1,!1,!1],[!1,!1,!1,!1,!1],[!1,!1,!0,!1,!0]]},{clues:[[16,6,0,2],[16,5,1,1],[16,7,2,0],[16,3,2,4]],answer:[[!1,!0,!1,!1,!1],[!1,!1,!1,!1,!0],[!1,!1,!1,!0,!1],[!1,!0,!1,!1,!1],[!1,!1,!0,!1,!1]]}]},Yo={global_constraint:[],puzzles:[{clues:[[14,3,0,1],[14,7,1,1],[14,6,1,4],[14,4,3,4],[14,7,4,2]],answer:[[!1,!1,!0,!0,!0],[!0,!1,!1,!1,!1],[!0,!0,!1,!0,!0],[!0,!0,!1,!0,!1],[!0,!0,!1,!1,!0]]},{clues:[[14,9,0,0],[14,9,0,2],[14,9,1,3],[14,10,1,4],[14,3,2,0],[14,10,4,3]],answer:[[!1,!0,!1,!1,!0],[!1,!0,!0,!1,!1],[!1,!1,!0,!0,!0],[!0,!0,!1,!0,!0],[!0,!1,!0,!1,!0]]},{clues:[[14,1,1,0],[14,3,1,4],[14,1,2,2],[14,7,3,2],[14,4,3,4]],answer:[[!0,!1,!1,!0,!0],[!1,!1,!0,!1,!1],[!1,!1,!1,!1,!0],[!0,!0,!1,!0,!1],[!0,!0,!1,!0,!0]]},{clues:[[14,8,0,0],[14,3,0,2],[14,2,0,4],[14,8,2,2],[14,2,3,3],[14,8,4,2]],answer:[[!1,!0,!1,!0,!1],[!0,!1,!0,!1,!0],[!0,!0,!1,!1,!1],[!0,!0,!1,!1,!0],[!0,!0,!1,!0,!1]]},{clues:[[14,3,0,2],[14,2,2,1],[14,5,2,2],[14,7,2,4],[14,2,3,0]],answer:[[!0,!0,!1,!1,!0],[!0,!1,!1,!1,!0],[!1,!1,!1,!0,!1],[!1,!0,!1,!0,!0],[!1,!0,!1,!0,!0]]},{clues:[[14,2,0,4],[14,8,1,4],[14,8,2,3],[14,2,3,0],[14,8,3,1],[14,8,4,4]],answer:[[!1,!1,!0,!0,!1],[!0,!1,!1,!1,!1],[!0,!1,!0,!1,!0],[!1,!1,!0,!0,!0],[!1,!0,!0,!0,!1]]},{clues:[[14,1,0,0],[14,2,1,4],[14,3,2,1],[14,6,2,3],[14,2,4,1],[14,4,4,3]],answer:[[!1,!0,!1,!0,!1],[!1,!1,!1,!0,!1],[!0,!1,!0,!1,!1],[!1,!0,!1,!0,!0],[!1,!1,!0,!1,!0]]},{clues:[[14,2,0,2],[14,3,1,2],[14,8,1,4],[14,9,3,0],[14,7,4,2]],answer:[[!1,!0,!1,!1,!1],[!1,!0,!1,!0,!1],[!0,!1,!1,!1,!0],[!1,!0,!0,!0,!0],[!0,!1,!1,!0,!0]]},{clues:[[14,6,0,2],[14,9,1,3],[14,10,1,4],[14,9,4,0]],answer:[[!0,!0,!1,!1,!0],[!0,!0,!1,!1,!1],[!0,!0,!1,!0,!0],[!1,!1,!0,!0,!0],[!1,!0,!0,!0,!0]]},{clues:[[14,3,0,2],[14,2,0,4],[14,1,1,0],[14,4,2,3],[14,2,3,0],[14,3,3,2],[14,1,4,2]],answer:[[!1,!0,!1,!1,!1],[!1,!1,!0,!1,!0],[!0,!1,!0,!1,!0],[!1,!0,!1,!1,!1],[!1,!1,!1,!0,!1]]}]},Wo={global_constraint:[[19,1],[20,1]],puzzles:[{clues:[[12,5,0,3],[12,3,1,0],[11,8,1,3],[2,1,3,3],[1,1,4,2]],answer:[[!1,!0,!1,!1,!1],[!1,!0,!1,!0,!1],[!1,!0,!0,!0,!0],[!0,!1,!1,!1,!0],[!0,!0,!0,!1,!1]]},{clues:[[2,1,0,2],[1,1,0,3],[2,1,0,4],[12,1,1,0],[2,1,3,0],[11,3,3,2],[12,6,3,3],[1,1,3,4]],answer:[[!0,!0,!1,!0,!1],[!1,!0,!0,!0,!0],[!0,!0,!1,!1,!1],[!1,!1,!0,!1,!0],[!1,!0,!0,!1,!1]]},{clues:[[2,1,0,2],[2,1,1,1],[11,3,1,2],[12,3,2,3],[1,1,4,0],[12,1,4,1]],answer:[[!0,!0,!1,!1,!1],[!0,!1,!0,!0,!0],[!0,!0,!1,!1,!1],[!0,!0,!0,!0,!0],[!0,!1,!0,!0,!0]]},{clues:[[1,1,1,2],[2,1,2,0],[11,3,2,1],[12,4,2,2],[11,1,2,4],[1,1,4,4]],answer:[[!1,!1,!1,!1,!1],[!1,!1,!0,!0,!1],[!1,!0,!1,!1,!0],[!1,!0,!0,!1,!1],[!1,!1,!1,!0,!0]]},{clues:[[1,1,0,0],[12,9,1,1],[12,1,1,4],[11,8,2,1],[2,1,4,3]],answer:[[!0,!0,!0,!0,!0],[!1,!1,!1,!0,!1],[!1,!0,!1,!1,!0],[!1,!0,!0,!0,!0],[!1,!1,!0,!1,!0]]},{clues:[[2,1,1,2]],answer:[[!1,!1,!1,!1,!1],[!1,!1,!1,!1,!1],[!1,!1,!1,!1,!1],[!1,!1,!1,!1,!1],[!1,!1,!1,!1,!1]]},{clues:[[12,7,1,4],[12,2,2,3],[1,1,3,3]],answer:[[!1,!1,!1,!1,!1],[!1,!0,!0,!0,!1],[!0,!0,!1,!1,!0],[!0,!0,!0,!0,!0],[!0,!0,!0,!0,!0]]},{clues:[[11,7,0,1],[12,4,0,2],[1,1,0,3],[2,1,0,4],[12,9,2,4]],answer:[[!0,!0,!1,!0,!1],[!0,!1,!1,!0,!0],[!0,!0,!1,!0,!1],[!1,!0,!0,!1,!1],[!1,!1,!1,!1,!1]]},{clues:[[2,1,1,2],[12,5,2,0],[12,7,2,4],[1,1,3,0]],answer:[[!1,!0,!0,!0,!1],[!1,!0,!1,!0,!1],[!1,!1,!0,!0,!1],[!0,!1,!0,!1,!1],[!0,!0,!0,!1,!1]]},{clues:[[12,4,2,2],[12,9,3,3],[1,1,4,0]],answer:[[!0,!0,!0,!0,!1],[!0,!1,!1,!0,!1],[!0,!1,!1,!0,!1],[!0,!0,!0,!1,!1],[!0,!1,!1,!1,!1]]}]},Vo={global_constraint:[],puzzles:[{clues:[[6,3,0,0],[6,5,0,3],[6,5,2,2],[6,2,2,4],[6,2,3,0],[6,2,3,4],[6,4,4,2]],answer:[[!1,!0,!0,!1,!0],[!0,!0,!0,!0,!0],[!1,!1,!1,!1,!1],[!1,!0,!0,!1,!1],[!1,!0,!1,!0,!0]]},{clues:[[6,4,0,1],[6,3,0,4],[6,5,1,1],[6,3,2,0],[6,2,3,0],[6,5,3,4],[6,3,4,1]],answer:[[!0,!1,!0,!0,!1],[!0,!1,!0,!0,!0],[!1,!0,!1,!0,!0],[!1,!0,!0,!0,!1],[!1,!1,!0,!0,!0]]},{clues:[[6,3,0,2],[6,3,1,1],[6,3,1,4],[6,2,2,0],[6,5,2,3],[6,5,3,1],[6,3,4,1],[6,3,4,2],[6,3,4,4]],answer:[[!1,!0,!1,!0,!0],[!1,!1,!1,!0,!1],[!1,!0,!0,!1,!1],[!0,!1,!0,!0,!0],[!0,!1,!1,!0,!1]]},{clues:[[6,2,0,2],[6,3,1,0],[6,5,1,1],[6,4,1,3],[6,5,2,3],[6,4,3,0],[6,4,4,1],[6,5,4,3]],answer:[[!0,!1,!1,!0,!0],[!1,!1,!0,!1,!1],[!0,!0,!0,!1,!1],[!1,!0,!0,!0,!0],[!0,!1,!0,!1,!0]]},{clues:[[6,3,0,1],[6,1,0,4],[6,3,1,0],[6,6,1,2],[6,3,2,0],[6,1,2,4],[6,5,3,1],[6,6,3,3]],answer:[[!0,!1,!0,!0,!1],[!1,!0,!1,!1,!1],[!1,!0,!0,!0,!1],[!0,!1,!0,!1,!1],[!1,!1,!0,!0,!0]]},{clues:[[6,1,0,0],[6,4,0,3],[6,5,1,3],[6,3,2,1],[6,2,2,4],[6,3,4,0],[6,2,4,3]],answer:[[!1,!0,!0,!1,!0],[!1,!1,!0,!1,!0],[!1,!1,!1,!0,!1],[!0,!0,!1,!1,!1],[!1,!0,!0,!1,!0]]},{clues:[[6,1,1,0],[6,2,1,2],[6,2,1,3],[6,1,1,4],[6,3,3,1],[6,3,3,2],[6,1,3,3],[6,1,4,2]],answer:[[!1,!1,!1,!1,!0],[!1,!1,!1,!1,!1],[!1,!0,!0,!1,!1],[!1,!1,!1,!1,!1],[!1,!0,!1,!1,!1]]},{clues:[[6,1,0,0],[6,2,0,1],[6,2,0,2],[6,3,1,3],[6,3,3,1],[6,5,3,2],[6,1,4,3]],answer:[[!1,!1,!1,!1,!1],[!1,!0,!0,!1,!1],[!1,!0,!0,!0,!1],[!1,!1,!1,!0,!1],[!1,!0,!1,!1,!1]]},{clues:[[6,2,0,0],[6,6,1,1],[6,6,1,3],[6,4,1,4],[6,4,3,1],[6,4,3,4],[6,4,4,3]],answer:[[!1,!0,!0,!0,!0],[!0,!1,!0,!1,!1],[!0,!0,!1,!0,!0],[!1,!1,!0,!0,!1],[!1,!1,!0,!1,!0]]},{clues:[[6,3,0,4],[6,4,1,0],[6,7,1,1],[6,3,3,0],[6,2,3,4],[6,1,4,1],[6,3,4,2]],answer:[[!0,!0,!0,!0,!1],[!1,!1,!0,!0,!0],[!0,!0,!0,!1,!1],[!1,!0,!1,!0,!1],[!1,!1,!1,!0,!1]]}]},jo={global_constraint:[[4,1],[7,1],[10,1],[22,1]],puzzles:[{clues:[[12,4,0,4],[12,2,1,0],[12,4,3,3],[12,4,4,1]],answer:[[!0,!0,!0,!1,!1],[!1,!1,!0,!1,!1],[!0,!0,!1,!0,!0],[!1,!1,!0,!1,!1],[!1,!1,!0,!1,!1]]},{clues:[[12,3,1,0],[12,2,1,3],[12,2,3,1],[12,4,3,4]],answer:[[!1,!0,!1,!0,!0],[!1,!0,!0,!1,!1],[!1,!0,!1,!0,!0],[!0,!1,!0,!1,!1],[!0,!1,!0,!1,!1]]},{clues:[[12,3,1,1],[12,2,1,4],[12,2,3,4],[12,4,4,2]],answer:[[!0,!0,!0,!0,!1],[!1,!1,!1,!0,!1],[!0,!0,!0,!1,!0],[!0,!1,!1,!0,!1],[!0,!1,!1,!0,!1]]},{clues:[[12,1,0,2],[12,2,1,0],[12,1,1,4],[12,2,3,0],[12,2,3,4]],answer:[[!0,!0,!1,!0,!0],[!1,!1,!0,!0,!1],[!0,!0,!1,!1,!0],[!1,!1,!0,!0,!1],[!0,!0,!1,!0,!1]]},{clues:[[12,1,0,0],[12,4,1,4],[12,8,4,3]],answer:[[!1,!0,!0,!0,!0],[!0,!1,!1,!1,!1],[!1,!0,!0,!0,!0],[!0,!1,!1,!1,!1],[!0,!1,!1,!1,!1]]},{clues:[[12,2,0,0],[12,1,0,3],[12,4,3,1],[12,4,3,3],[12,1,4,2]],answer:[[!1,!1,!0,!1,!0],[!0,!0,!1,!0,!0],[!1,!1,!0,!1,!1],[!1,!1,!0,!1,!1],[!0,!0,!1,!0,!0]]},{clues:[[12,8,0,3],[12,1,2,1]],answer:[[!0,!1,!0,!1,!1],[!1,!0,!0,!1,!1],[!0,!1,!0,!1,!1],[!1,!0,!0,!1,!1],[!0,!1,!1,!0,!0]]},{clues:[[12,1,0,2],[12,1,0,4],[12,3,1,0],[12,2,2,2],[12,3,4,4]],answer:[[!0,!0,!1,!0,!1],[!1,!0,!0,!1,!0],[!1,!0,!1,!0,!1],[!1,!0,!1,!0,!1],[!0,!1,!0,!0,!1]]},{clues:[[12,3,2,2],[12,3,2,4],[12,3,3,0],[12,1,4,4]],answer:[[!0,!0,!1,!0,!1],[!1,!0,!1,!0,!1],[!1,!0,!1,!0,!1],[!1,!0,!0,!1,!0],[!0,!1,!1,!0,!1]]},{clues:[[12,4,1,1],[12,2,2,4],[12,3,3,1],[12,1,4,0],[12,1,4,4]],answer:[[!0,!1,!1,!0,!0],[!0,!1,!1,!0,!1],[!1,!0,!0,!0,!1],[!0,!1,!1,!1,!0],[!1,!0,!0,!0,!1]]}]},Xo={global_constraint:[[1,1],[7,1],[20,1]],puzzles:[{clues:[[2,1,0,4],[12,3,1,2],[12,1,2,1],[12,6,3,4]],answer:[[!0,!1,!1,!0,!1],[!0,!0,!1,!0,!1],[!0,!1,!0,!0,!0],[!0,!0,!0,!1,!1],[!0,!1,!1,!1,!1]]},{clues:[[12,1,0,0],[12,1,1,1],[12,4,4,1],[12,10,4,3]],answer:[[!1,!0,!0,!1,!1],[!0,!1,!0,!1,!1],[!0,!0,!0,!1,!1],[!1,!1,!0,!1,!1],[!1,!1,!0,!1,!1]]},{clues:[[2,1,0,0],[2,1,0,2],[12,1,0,4],[12,1,3,1]],answer:[[!1,!0,!1,!0,!1],[!1,!0,!1,!0,!0],[!0,!0,!1,!1,!0],[!0,!1,!0,!1,!0],[!0,!0,!0,!0,!0]]},{clues:[[12,2,1,0],[2,1,1,2],[12,6,3,0],[12,6,3,4]],answer:[[!1,!0,!0,!1,!1],[!1,!0,!1,!0,!1],[!0,!0,!0,!0,!1],[!1,!1,!1,!0,!1],[!1,!1,!1,!0,!1]]},{clues:[[12,6,0,3],[2,1,1,2],[12,1,4,0]],answer:[[!0,!0,!0,!1,!1],[!0,!1,!1,!0,!1],[!0,!1,!1,!0,!1],[!0,!0,!1,!0,!1],[!1,!0,!0,!0,!1]]},{clues:[[12,1,0,4],[12,3,1,0],[12,6,3,4],[12,2,4,2]],answer:[[!1,!0,!0,!0,!1],[!1,!0,!1,!0,!0],[!1,!0,!1,!1,!1],[!0,!0,!0,!0,!1],[!0,!1,!1,!0,!1]]},{clues:[[12,4,1,3],[12,1,2,4],[2,1,4,4]],answer:[[!0,!0,!0,!0,!0],[!0,!1,!1,!1,!0],[!0,!0,!1,!0,!1],[!1,!0,!0,!0,!0],[!1,!1,!1,!1,!1]]},{clues:[[12,1,1,0],[12,2,1,3],[12,3,3,3]],answer:[[!0,!0,!0,!0,!0],[!1,!0,!1,!1,!0],[!0,!0,!0,!0,!0],[!0,!1,!1,!1,!0],[!0,!0,!0,!0,!0]]},{clues:[[12,7,2,2],[12,5,3,0],[2,1,3,3]],answer:[[!0,!0,!1,!1,!1],[!1,!0,!1,!1,!1],[!1,!0,!1,!0,!0],[!1,!0,!0,!1,!0],[!1,!1,!0,!0,!0]]},{clues:[[12,2,0,3],[12,4,1,0],[12,1,1,2],[12,1,2,3],[12,1,4,3]],answer:[[!0,!0,!0,!1,!1],[!1,!0,!1,!0,!0],[!1,!0,!0,!1,!0],[!1,!1,!0,!0,!0],[!0,!0,!0,!1,!0]]}]},Zo={global_constraint:[[1,1],[6,1]],puzzles:[{clues:[[3,3,0,1],[4,4,1,3],[3,2,3,1],[3,1,3,2],[4,1,4,0]],answer:[[!0,!0,!0,!1,!1],[!0,!0,!1,!1,!1],[!0,!1,!1,!1,!1],[!0,!0,!0,!1,!1],[!1,!1,!1,!1,!1]]},{clues:[[3,2,0,2],[3,2,1,0],[3,3,1,1],[4,2,2,0],[4,1,2,1],[3,1,2,3],[4,2,4,0],[3,1,4,3]],answer:[[!0,!0,!0,!1,!1],[!0,!0,!0,!1,!1],[!1,!1,!0,!0,!1],[!1,!0,!0,!1,!1],[!1,!1,!0,!0,!1]]},{clues:[[3,2,0,1],[3,2,1,2],[3,1,2,0],[4,4,2,3],[4,2,2,4],[4,3,3,3],[3,1,4,2]],answer:[[!1,!0,!0,!0,!0],[!1,!0,!0,!1,!0],[!0,!0,!1,!1,!1],[!1,!0,!0,!1,!1],[!1,!1,!0,!1,!1]]},{clues:[[4,2,1,0],[4,3,1,2],[4,2,2,4],[3,1,3,0],[4,2,3,1],[4,1,3,2],[4,1,3,4]],answer:[[!1,!1,!1,!1,!1],[!1,!1,!1,!1,!1],[!0,!0,!0,!0,!1],[!0,!1,!1,!0,!1],[!1,!1,!0,!0,!0]]},{clues:[[3,3,0,2],[3,2,0,4],[4,3,1,0],[3,3,1,2],[4,2,2,1],[3,1,2,4],[4,2,3,0],[3,3,4,2],[3,1,4,4]],answer:[[!1,!0,!0,!0,!0],[!1,!1,!0,!0,!0],[!1,!1,!0,!1,!0],[!1,!0,!0,!1,!1],[!1,!0,!0,!0,!0]]},{clues:[[4,2,0,1],[3,3,1,4],[4,3,2,1],[4,4,2,2],[4,1,2,3],[3,1,3,0],[3,2,3,4]],answer:[[!1,!1,!0,!0,!0],[!1,!1,!1,!0,!0],[!1,!1,!1,!1,!0],[!0,!0,!1,!0,!0],[!1,!0,!0,!0,!1]]},{clues:[[4,2,0,1],[3,1,0,2],[4,1,1,1],[3,1,1,3],[4,2,2,3],[3,4,3,1],[3,1,4,1]],answer:[[!1,!1,!0,!1,!1],[!0,!1,!0,!0,!1],[!0,!0,!0,!1,!1],[!0,!0,!0,!1,!1],[!1,!0,!1,!1,!1]]},{clues:[[3,2,0,2],[3,1,0,3],[3,1,2,0],[4,1,2,2],[4,4,2,3],[4,1,4,0],[3,1,4,4]],answer:[[!1,!1,!0,!0,!1],[!1,!0,!0,!1,!1],[!0,!0,!1,!1,!1],[!1,!0,!0,!1,!1],[!1,!0,!0,!0,!0]]},{clues:[[3,1,1,0],[4,3,1,3],[3,2,1,4],[4,3,2,1],[4,3,2,2],[3,3,4,3]],answer:[[!1,!1,!1,!1,!0],[!0,!1,!1,!1,!0],[!0,!1,!1,!1,!0],[!0,!1,!0,!0,!0],[!0,!0,!0,!0,!0]]},{clues:[[4,2,0,2],[4,1,1,3],[3,1,2,1],[3,3,3,1],[3,3,3,2],[3,3,4,1],[3,2,4,4]],answer:[[!1,!1,!1,!0,!0],[!1,!1,!1,!1,!0],[!1,!0,!1,!0,!0],[!1,!0,!0,!0,!0],[!0,!0,!0,!0,!0]]}]},qo={global_constraint:[[1,1],[6,1],[13,1]],puzzles:[{clues:[[3,1,0,0],[8,1,0,3],[10,2,2,3],[10,2,3,4],[8,1,4,4]],answer:[[!0,!1,!1,!1,!1],[!0,!1,!0,!0,!0],[!0,!1,!0,!1,!1],[!0,!1,!0,!1,!1],[!0,!0,!0,!1,!1]]},{clues:[[8,3,0,1],[10,2,1,2],[8,3,1,3],[10,3,3,2],[10,4,4,4]],answer:[[!1,!1,!1,!0,!0],[!1,!0,!1,!1,!0],[!0,!0,!1,!1,!0],[!0,!1,!1,!0,!0],[!0,!0,!0,!0,!1]]},{clues:[[3,1,1,1],[8,3,1,3],[3,1,3,2]],answer:[[!1,!0,!0,!0,!0],[!1,!0,!1,!1,!0],[!1,!1,!1,!0,!0],[!1,!1,!0,!0,!1],[!1,!1,!1,!1,!1]]},{clues:[[8,1,1,0],[10,1,2,0],[8,4,4,3],[3,1,4,4]],answer:[[!0,!0,!0,!0,!1],[!1,!1,!1,!0,!1],[!1,!1,!1,!0,!1],[!1,!1,!1,!0,!0],[!1,!1,!1,!1,!0]]},{clues:[[3,2,0,3],[8,3,1,0],[3,1,1,1],[10,3,2,4]],answer:[[!1,!1,!1,!0,!0],[!1,!0,!1,!0,!1],[!0,!0,!1,!0,!1],[!0,!1,!1,!0,!1],[!0,!0,!0,!0,!1]]},{clues:[[3,1,0,0],[10,4,1,4],[8,3,2,2],[10,3,3,4]],answer:[[!0,!1,!1,!1,!1],[!0,!0,!0,!0,!1],[!1,!1,!1,!0,!1],[!0,!1,!0,!0,!1],[!0,!0,!0,!1,!1]]},{clues:[[8,3,0,0],[8,1,0,1],[3,1,1,0],[3,2,1,3],[8,1,2,2],[10,2,2,3]],answer:[[!1,!1,!1,!0,!1],[!0,!1,!1,!0,!0],[!0,!1,!1,!1,!0],[!0,!0,!0,!0,!0],[!1,!1,!1,!1,!1]]},{clues:[[8,1,0,3],[3,1,1,2],[10,4,1,3],[3,2,1,4],[10,3,3,2]],answer:[[!1,!1,!1,!1,!0],[!0,!0,!0,!1,!0],[!0,!1,!1,!1,!0],[!0,!0,!1,!1,!0],[!1,!0,!0,!0,!0]]},{clues:[[3,1,1,3],[10,2,2,2],[8,3,4,0],[3,1,4,1]],answer:[[!0,!0,!0,!0,!1],[!0,!1,!1,!0,!1],[!0,!0,!1,!1,!1],[!1,!0,!1,!1,!1],[!1,!0,!1,!1,!1]]},{clues:[[10,2,0,0],[10,2,1,2],[10,1,2,3],[10,3,4,3],[8,1,4,4]],answer:[[!1,!0,!0,!1,!1],[!0,!0,!1,!1,!1],[!0,!1,!1,!1,!1],[!0,!1,!0,!0,!0],[!0,!0,!0,!1,!1]]}]},$o={global_constraint:[[2,1],[11,1]],puzzles:[{clues:[[14,2,0,1],[14,1,0,2],[14,4,2,4],[14,5,4,2]],answer:[[!0,!1,!1,!0,!1],[!1,!0,!1,!1,!1],[!1,!1,!1,!1,!1],[!1,!1,!1,!0,!0],[!1,!0,!1,!0,!0]]},{clues:[[14,1,0,1],[14,4,1,4],[14,6,2,1],[14,1,4,4]],answer:[[!0,!1,!1,!1,!1],[!1,!1,!0,!0,!1],[!0,!1,!0,!0,!1],[!1,!0,!1,!1,!1],[!1,!1,!1,!0,!1]]},{clues:[[14,1,0,4],[14,1,1,2],[14,2,2,0],[14,2,2,2],[14,1,3,0],[14,2,4,3]],answer:[[!1,!1,!0,!1,!1],[!0,!1,!1,!1,!0],[!1,!0,!1,!0,!1],[!1,!1,!1,!1,!1],[!0,!1,!0,!1,!0]]},{clues:[[14,5,2,1],[14,2,2,3],[14,1,2,4],[14,1,4,2],[14,1,4,4]],answer:[[!0,!0,!1,!1,!1],[!0,!0,!1,!0,!1],[!1,!1,!0,!1,!1],[!1,!1,!1,!1,!0],[!1,!0,!1,!1,!1]]},{clues:[[14,9,1,0],[14,9,1,4],[14,9,4,1],[14,9,4,3]],answer:[[!1,!1,!1,!1,!1],[!1,!0,!0,!0,!1],[!1,!0,!0,!0,!1],[!1,!0,!0,!0,!1],[!1,!1,!1,!1,!1]]},{clues:[[14,5,1,3],[14,2,2,4],[14,2,3,1],[14,1,4,2]],answer:[[!1,!0,!0,!1,!1],[!1,!0,!0,!1,!0],[!1,!1,!1,!1,!1],[!0,!1,!0,!1,!0],[!1,!1,!1,!1,!1]]},{clues:[[14,5,0,3],[14,1,4,0],[14,4,4,4]],answer:[[!1,!0,!0,!1,!0],[!1,!0,!0,!1,!1],[!1,!1,!1,!1,!1],[!0,!1,!0,!0,!1],[!1,!1,!0,!0,!1]]},{clues:[[14,5,1,3],[14,1,3,1],[14,2,3,2]],answer:[[!1,!0,!0,!1,!1],[!1,!0,!0,!1,!0],[!1,!1,!1,!1,!1],[!0,!1,!1,!0,!1],[!1,!1,!0,!1,!1]]},{clues:[[14,2,2,0],[14,5,2,2],[14,1,3,4]],answer:[[!1,!1,!0,!0,!1],[!0,!1,!0,!0,!1],[!1,!1,!1,!1,!1],[!0,!1,!0,!1,!1],[!1,!1,!1,!1,!0]]},{clues:[[14,2,0,3],[14,2,1,1],[14,4,2,3],[14,2,3,1]],answer:[[!1,!1,!0,!1,!0],[!0,!1,!1,!1,!1],[!1,!0,!1,!1,!1],[!1,!1,!1,!0,!0],[!1,!0,!1,!0,!0]]}]},Jo={global_constraint:[[1,1],[2,1],[7,1],[8,1]],puzzles:[{clues:[[1,1,0,0],[2,1,0,1],[1,1,0,3],[1,1,1,2],[2,1,3,2]],answer:[[!0,!1,!0,!0,!0],[!0,!1,!0,!1,!0],[!0,!1,!0,!1,!0],[!0,!1,!1,!1,!0],[!0,!0,!0,!0,!0]]},{clues:[[1,1,0,2],[2,1,0,3],[1,1,1,1],[1,1,2,2]],answer:[[!1,!1,!0,!1,!1],[!1,!0,!0,!0,!1],[!1,!1,!0,!1,!1],[!1,!0,!0,!0,!1],[!1,!1,!1,!1,!1]]},{clues:[[1,1,0,0],[2,1,2,1],[2,1,2,2],[2,1,3,2],[2,1,3,3],[2,1,4,0]],answer:[[!0,!0,!0,!0,!0],[!1,!0,!1,!1,!0],[!1,!1,!1,!0,!0],[!1,!0,!1,!1,!0],[!1,!0,!0,!0,!0]]},{clues:[[2,1,0,2],[1,1,0,3],[2,1,0,4],[1,1,2,2],[1,1,3,2]],answer:[[!1,!1,!1,!0,!1],[!1,!0,!0,!0,!1],[!1,!1,!0,!1,!1],[!1,!0,!0,!0,!1],[!1,!1,!1,!1,!1]]},{clues:[[1,1,1,2],[1,1,2,3],[1,1,2,4],[2,1,3,2],[2,1,4,1],[1,1,4,4]],answer:[[!1,!1,!1,!1,!1],[!1,!0,!0,!0,!1],[!1,!0,!1,!0,!0],[!1,!0,!1,!1,!0],[!1,!1,!1,!0,!0]]},{clues:[[2,1,0,3],[2,1,1,1],[2,1,1,2],[2,1,2,2],[1,1,3,0],[2,1,4,4]],answer:[[!0,!0,!1,!1,!1],[!0,!1,!1,!0,!1],[!0,!0,!1,!0,!1],[!0,!1,!1,!0,!1],[!0,!0,!0,!0,!1]]},{clues:[[2,1,1,2],[1,1,1,4],[1,1,3,1],[1,1,3,3],[1,1,4,0]],answer:[[!0,!0,!0,!0,!0],[!0,!1,!1,!1,!0],[!0,!1,!0,!1,!1],[!0,!0,!0,!0,!1],[!0,!1,!1,!1,!1]]},{clues:[[2,1,0,4],[2,1,1,2],[1,1,2,4],[1,1,3,1],[1,1,4,0]],answer:[[!1,!1,!1,!1,!1],[!1,!0,!1,!0,!1],[!1,!0,!1,!0,!0],[!1,!0,!1,!1,!0],[!0,!0,!0,!0,!0]]},{clues:[[2,1,0,1],[2,1,1,2],[2,1,1,3],[2,1,4,1],[1,1,4,4]],answer:[[!1,!1,!1,!0,!0],[!1,!0,!1,!1,!0],[!1,!0,!0,!0,!0],[!1,!0,!1,!1,!0],[!1,!1,!1,!0,!0]]},{clues:[[2,1,2,0],[2,1,2,3],[2,1,3,1],[1,1,3,3]],answer:[[!1,!1,!1,!1,!1],[!1,!0,!0,!0,!1],[!1,!1,!0,!1,!1],[!0,!1,!0,!0,!1],[!0,!0,!0,!1,!1]]}]},Qo={global_constraint:[],puzzles:[{clues:[[6,1,0,1],[3,2,0,3],[4,2,2,0],[4,4,2,2],[6,3,2,3],[6,3,3,0],[3,2,3,4],[6,2,4,2]],answer:[[!1,!1,!1,!0,!0],[!0,!1,!1,!0,!1],[!1,!1,!1,!1,!0],[!1,!0,!1,!1,!0],[!0,!0,!1,!1,!0]]},{clues:[[3,1,0,3],[5,2,1,1],[3,1,2,0],[6,8,2,3],[6,7,3,1],[6,2,4,4]],answer:[[!0,!0,!1,!0,!1],[!1,!0,!0,!0,!0],[!0,!0,!0,!1,!0],[!1,!1,!0,!0,!0],[!0,!0,!0,!1,!1]]},{clues:[[6,1,0,0],[4,1,0,4],[5,4,1,2],[3,1,1,4],[6,1,2,0],[5,3,2,3],[5,7,3,1],[6,5,3,2],[3,1,3,4],[5,3,4,3]],answer:[[!1,!0,!0,!1,!1],[!1,!1,!0,!0,!0],[!1,!1,!1,!0,!1],[!1,!0,!1,!0,!0],[!1,!0,!1,!0,!1]]},{clues:[[4,1,0,0],[3,1,0,2],[3,1,0,4],[3,3,1,1],[4,4,2,3],[3,3,3,0],[5,4,3,4],[6,3,4,2],[3,1,4,4]],answer:[[!1,!1,!0,!1,!0],[!0,!0,!0,!1,!0],[!0,!0,!1,!1,!1],[!0,!0,!0,!1,!0],[!0,!0,!1,!1,!0]]},{clues:[[5,4,0,1],[6,3,0,2],[6,4,1,1],[6,3,1,3],[5,4,2,0],[3,1,2,4],[4,1,3,0],[5,4,3,2],[3,1,3,4]],answer:[[!1,!0,!1,!0,!1],[!1,!1,!0,!1,!1],[!0,!0,!1,!1,!0],[!1,!1,!0,!1,!0],[!0,!0,!0,!0,!1]]},{clues:[[6,5,0,3],[3,2,1,0],[3,2,1,1],[4,1,2,2],[5,3,3,0],[6,5,3,4],[6,5,4,2]],answer:[[!0,!1,!0,!1,!0],[!0,!0,!0,!0,!0],[!1,!1,!1,!0,!0],[!0,!0,!0,!0,!1],[!1,!0,!1,!0,!0]]},{clues:[[6,4,0,3],[5,2,1,1],[5,2,1,2],[3,3,1,3],[5,1,2,0],[6,7,2,2],[5,1,3,0],[3,2,3,3],[4,1,3,4],[5,2,4,2],[6,1,4,4]],answer:[[!1,!0,!0,!1,!1],[!0,!0,!0,!0,!0],[!0,!0,!1,!0,!0],[!0,!1,!0,!0,!1],[!0,!0,!0,!1,!1]]},{clues:[[5,1,0,2],[6,3,0,4],[5,3,1,1],[6,5,2,0],[5,3,2,2],[6,7,3,3],[4,1,4,1],[5,2,4,2]],answer:[[!1,!0,!0,!0,!1],[!0,!0,!1,!0,!0],[!1,!0,!0,!1,!0],[!0,!0,!0,!1,!0],[!1,!1,!0,!0,!0]]},{clues:[[5,4,0,1],[4,4,1,2],[6,3,1,4],[3,1,2,0],[6,4,3,0],[6,7,3,2],[6,3,3,4]],answer:[[!0,!0,!1,!0,!0],[!1,!1,!1,!1,!1],[!0,!0,!1,!0,!1],[!1,!0,!1,!0,!1],[!1,!0,!0,!0,!1]]},{clues:[[6,4,0,2],[3,1,0,3],[6,2,1,0],[4,2,2,0],[3,1,2,2],[5,3,2,3],[6,3,3,1],[4,2,4,2],[4,2,4,3],[3,1,4,4]],answer:[[!1,!0,!1,!0,!1],[!1,!0,!1,!0,!0],[!1,!1,!0,!0,!0],[!0,!1,!1,!1,!0],[!1,!0,!1,!1,!0]]}]},el={global_constraint:[],puzzles:[{clues:[[10,2,0,1],[7,2,0,2],[8,1,1,0],[10,2,1,3],[9,1,2,1],[7,1,2,4],[9,4,3,0],[10,3,4,1]],answer:[[!1,!1,!0,!1,!0],[!1,!0,!1,!1,!0],[!1,!0,!0,!0,!0],[!0,!1,!1,!1,!1],[!1,!1,!0,!0,!0]]},{clues:[[10,3,0,3],[10,3,1,1],[7,3,1,4],[7,1,2,0],[9,1,2,1],[7,4,2,3],[10,1,3,0],[7,2,4,1],[9,2,4,4]],answer:[[!0,!0,!0,!1,!1],[!0,!1,!0,!1,!0],[!0,!0,!0,!0,!1],[!1,!1,!0,!1,!1],[!0,!0,!1,!1,!0]]},{clues:[[10,4,0,4],[8,4,1,0],[8,4,1,3],[8,2,1,4],[9,1,2,2],[9,3,3,0],[8,2,4,1],[8,3,4,2]],answer:[[!0,!0,!0,!0,!1],[!1,!0,!0,!1,!1],[!0,!1,!0,!0,!0],[!0,!1,!1,!0,!1],[!0,!1,!1,!0,!0]]},{clues:[[9,3,0,2],[10,2,1,1],[8,2,1,4],[9,4,2,2],[7,3,3,0],[10,4,3,3],[7,2,4,1],[10,4,4,2]],answer:[[!1,!0,!0,!1,!1],[!1,!1,!0,!0,!1],[!1,!1,!0,!1,!1],[!0,!0,!0,!1,!0],[!0,!0,!1,!0,!0]]},{clues:[[9,2,0,0],[10,4,1,0],[9,2,2,0],[9,2,2,1],[9,2,2,4],[10,4,3,4],[7,1,4,1],[9,2,4,2],[7,2,4,3]],answer:[[!0,!1,!0,!1,!0],[!1,!0,!0,!0,!0],[!0,!0,!1,!1,!0],[!0,!0,!0,!0,!1],[!1,!0,!0,!0,!1]]},{clues:[[10,3,0,2],[9,3,1,1],[7,4,1,4],[9,3,2,1],[10,2,3,2],[9,1,4,1],[7,4,4,2],[7,3,4,3]],answer:[[!0,!0,!1,!0,!1],[!1,!0,!1,!1,!0],[!0,!0,!1,!1,!1],[!0,!0,!1,!1,!1],[!0,!0,!0,!0,!1]]},{clues:[[10,1,0,1],[8,1,0,4],[10,3,1,0],[7,4,1,2],[9,3,2,1],[9,3,2,3],[10,2,3,1],[8,3,3,3],[10,2,4,0]],answer:[[!0,!1,!1,!1,!1],[!1,!0,!0,!0,!1],[!1,!0,!1,!0,!1],[!0,!1,!1,!1,!0],[!1,!0,!1,!0,!1]]},{clues:[[9,1,0,3],[10,4,1,0],[9,1,2,2],[10,2,3,0],[8,3,3,1],[9,4,4,1],[8,2,4,3]],answer:[[!0,!1,!0,!0,!0],[!1,!0,!0,!0,!0],[!0,!0,!0,!1,!0],[!1,!1,!0,!1,!0],[!1,!0,!1,!1,!1]]},{clues:[[8,2,0,2],[10,4,1,1],[7,4,1,4],[8,4,2,0],[8,2,2,3],[9,2,3,0],[7,4,4,1]],answer:[[!0,!1,!1,!1,!1],[!0,!1,!0,!0,!0],[!1,!1,!1,!1,!1],[!0,!1,!0,!0,!1],[!0,!0,!1,!1,!1]]},{clues:[[10,3,0,0],[7,2,0,4],[10,2,1,1],[8,4,1,2],[9,3,2,3],[7,2,3,1],[10,4,3,3],[8,2,4,0],[9,3,4,2]],answer:[[!1,!0,!0,!1,!0],[!0,!1,!1,!1,!0],[!1,!1,!0,!0,!1],[!0,!0,!0,!1,!0],[!1,!0,!0,!1,!1]]}]},tl={global_constraint:[],puzzles:[{clues:[[16,3,0,0],[18,2,0,3],[17,2,1,2],[17,5,1,3],[16,5,3,2],[15,2,3,4],[15,2,4,0],[17,4,4,1]],answer:[[!1,!1,!0,!1,!1],[!1,!1,!0,!0,!1],[!0,!0,!0,!1,!0],[!1,!1,!1,!1,!0],[!0,!0,!1,!1,!1]]},{clues:[[18,1,0,2],[18,5,1,0],[15,1,1,4],[15,5,3,0],[15,7,4,1],[15,6,4,3]],answer:[[!0,!1,!1,!1,!1],[!1,!0,!0,!1,!0],[!0,!0,!1,!0,!1],[!0,!0,!0,!0,!1],[!1,!0,!0,!0,!0]]},{clues:[[18,4,0,1],[15,2,1,2],[18,2,1,3],[17,6,2,0],[18,1,2,3],[17,5,3,2],[17,4,4,4]],answer:[[!0,!1,!0,!0,!0],[!1,!1,!0,!1,!1],[!0,!1,!1,!1,!0],[!1,!1,!0,!1,!0],[!1,!1,!1,!1,!0]]},{clues:[[16,6,0,2],[18,2,1,3],[17,3,1,4],[17,7,3,0],[16,6,3,3],[15,4,3,4],[17,3,4,1]],answer:[[!1,!1,!1,!0,!1],[!1,!0,!1,!1,!0],[!1,!1,!1,!1,!0],[!0,!1,!1,!1,!0],[!1,!0,!0,!1,!0]]},{clues:[[18,2,0,1],[16,5,1,2],[15,1,1,4],[17,7,3,0],[15,6,4,0],[17,4,4,3]],answer:[[!1,!1,!1,!1,!1],[!1,!0,!1,!1,!0],[!1,!0,!1,!1,!1],[!0,!1,!1,!1,!1],[!0,!0,!0,!0,!0]]},{clues:[[18,6,0,3],[18,4,1,0],[18,4,1,2],[15,6,3,1],[15,3,3,2],[17,2,4,4]],answer:[[!0,!0,!0,!1,!0],[!1,!0,!1,!0,!0],[!0,!0,!1,!0,!1],[!0,!0,!0,!1,!1],[!1,!1,!1,!0,!0]]},{clues:[[18,4,0,3],[17,5,1,4],[15,1,2,1],[16,1,2,4],[17,4,3,2],[15,6,4,0]],answer:[[!0,!0,!0,!1,!0],[!1,!1,!1,!1,!0],[!1,!0,!1,!0,!1],[!0,!1,!0,!1,!0],[!0,!0,!0,!0,!0]]},{clues:[[17,4,0,1],[18,5,0,2],[16,6,0,3],[16,5,1,0],[17,4,1,2],[15,3,3,4],[16,4,4,1]],answer:[[!0,!0,!1,!1,!1],[!1,!1,!0,!1,!0],[!1,!0,!0,!1,!0],[!1,!1,!0,!1,!0],[!1,!1,!1,!0,!1]]},{clues:[[17,2,0,0],[17,4,0,3],[18,3,2,2],[15,4,3,1],[15,3,3,4],[15,5,4,0],[18,6,4,4]],answer:[[!0,!1,!1,!0,!1],[!0,!1,!1,!1,!1],[!1,!0,!1,!0,!0],[!0,!0,!1,!0,!0],[!0,!0,!0,!0,!1]]},{clues:[[18,2,0,2],[18,3,1,2],[16,2,1,4],[15,1,2,0],[18,2,2,3],[15,2,3,2],[17,3,4,4]],answer:[[!0,!0,!1,!1,!0],[!1,!1,!1,!0,!1],[!0,!1,!0,!1,!1],[!1,!1,!0,!1,!0],[!0,!1,!1,!1,!0]]}]},sl={global_constraint:[],puzzles:[{clues:[[14,13,1,1],[13,1,2,4],[14,5,3,0],[12,7,3,2],[11,8,4,2]],answer:[[!0,!0,!1,!1,!0],[!0,!1,!0,!0,!1],[!0,!0,!1,!0,!0],[!1,!1,!1,!1,!0],[!1,!1,!0,!0,!0]]},{clues:[[11,9,0,3],[11,8,1,2],[13,5,3,3],[12,2,4,1]],answer:[[!0,!0,!1,!0,!0],[!0,!0,!0,!1,!0],[!0,!1,!1,!1,!0],[!0,!0,!1,!0,!0],[!1,!1,!0,!0,!0]]},{clues:[[13,6,0,0],[14,11,0,3],[14,14,3,3],[13,11,3,4],[13,4,4,0]],answer:[[!0,!1,!1,!1,!1],[!0,!0,!0,!0,!1],[!0,!0,!0,!0,!1],[!0,!1,!1,!1,!0],[!0,!1,!0,!0,!1]]},{clues:[[14,9,0,2],[11,1,0,3],[12,4,3,2],[14,15,4,0]],answer:[[!0,!0,!1,!0,!1],[!0,!0,!0,!1,!1],[!0,!0,!1,!0,!0],[!0,!1,!1,!1,!0],[!1,!0,!0,!0,!0]]},{clues:[[14,12,1,2],[14,9,3,1],[12,9,4,0],[14,7,4,2]],answer:[[!1,!0,!0,!0,!0],[!1,!1,!1,!0,!1],[!0,!1,!0,!1,!0],[!0,!1,!0,!0,!0],[!1,!1,!1,!0,!0]]},{clues:[[13,3,0,1],[12,3,1,3],[12,1,3,4],[14,14,4,0],[11,5,4,4]],answer:[[!1,!0,!0,!0,!0],[!1,!1,!0,!1,!1],[!0,!0,!0,!1,!0],[!0,!1,!1,!0,!1],[!1,!0,!0,!0,!0]]},{clues:[[12,2,0,1],[12,5,0,3],[14,10,2,0],[14,7,2,3],[14,13,4,2]],answer:[[!1,!1,!0,!1,!0],[!0,!0,!0,!1,!0],[!1,!0,!0,!1,!1],[!0,!1,!0,!1,!0],[!0,!0,!1,!0,!0]]},{clues:[[11,5,1,2],[13,9,3,0],[13,10,3,3],[14,8,3,4],[11,8,4,4]],answer:[[!1,!1,!0,!0,!0],[!1,!1,!0,!1,!0],[!1,!1,!1,!0,!1],[!0,!0,!1,!0,!1],[!1,!0,!0,!0,!0]]},{clues:[[13,3,0,1],[12,5,0,3],[14,1,0,4],[14,9,3,3],[14,9,4,3]],answer:[[!1,!0,!0,!1,!1],[!1,!0,!1,!1,!0],[!1,!0,!1,!0,!1],[!0,!0,!0,!1,!1],[!1,!1,!0,!1,!0]]},{clues:[[14,1,1,4],[12,1,2,2],[13,13,3,3],[11,8,4,2],[14,8,4,4]],answer:[[!0,!1,!1,!1,!0],[!1,!1,!0,!1,!1],[!1,!0,!1,!0,!1],[!1,!0,!0,!0,!1],[!1,!0,!0,!0,!1]]}]},rl={global_constraint:[[19,1],[20,1]],puzzles:[{clues:[[2,1,1,0]],answer:[[!1,!1,!1,!1,!1],[!1,!1,!1,!1,!1],[!1,!1,!1,!1,!1],[!1,!1,!1,!1,!1],[!1,!1,!1,!1,!1]]},{clues:[[1,1,0,2]],answer:[[!0,!0,!0,!0,!0],[!0,!0,!0,!0,!0],[!0,!0,!0,!0,!0],[!0,!0,!0,!0,!0],[!0,!0,!0,!0,!0]]},{clues:[[2,1,4,4]],answer:[[!1,!1,!1,!1,!1],[!1,!1,!1,!1,!1],[!1,!1,!1,!1,!1],[!1,!1,!1,!1,!1],[!1,!1,!1,!1,!1]]},{clues:[[1,1,4,4]],answer:[[!0,!0,!0,!0,!0],[!0,!0,!0,!0,!0],[!0,!0,!0,!0,!0],[!0,!0,!0,!0,!0],[!0,!0,!0,!0,!0]]},{clues:[[1,1,3,1]],answer:[[!0,!0,!0,!0,!0],[!0,!0,!0,!0,!0],[!0,!0,!0,!0,!0],[!0,!0,!0,!0,!0],[!0,!0,!0,!0,!0]]},{clues:[[1,1,2,2]],answer:[[!0,!0,!0,!0,!0],[!0,!0,!0,!0,!0],[!0,!0,!0,!0,!0],[!0,!0,!0,!0,!0],[!0,!0,!0,!0,!0]]},{clues:[[2,1,2,0]],answer:[[!1,!1,!1,!1,!1],[!1,!1,!1,!1,!1],[!1,!1,!1,!1,!1],[!1,!1,!1,!1,!1],[!1,!1,!1,!1,!1]]},{clues:[[2,1,1,2]],answer:[[!1,!1,!1,!1,!1],[!1,!1,!1,!1,!1],[!1,!1,!1,!1,!1],[!1,!1,!1,!1,!1],[!1,!1,!1,!1,!1]]},{clues:[[1,1,4,1]],answer:[[!0,!0,!0,!0,!0],[!0,!0,!0,!0,!0],[!0,!0,!0,!0,!0],[!0,!0,!0,!0,!0],[!0,!0,!0,!0,!0]]},{clues:[[1,1,4,0]],answer:[[!0,!0,!0,!0,!0],[!0,!0,!0,!0,!0],[!0,!0,!0,!0,!0],[!0,!0,!0,!0,!0],[!0,!0,!0,!0,!0]]}]},al={global_constraint:[[17,1],[18,1]],puzzles:[{clues:[[1,1,0,1]],answer:[[!1,!0,!1,!0,!1],[!0,!1,!0,!1,!0],[!1,!0,!1,!0,!1],[!0,!1,!0,!1,!0],[!1,!0,!1,!0,!1]]},{clues:[[1,1,0,4]],answer:[[!0,!1,!0,!1,!0],[!1,!0,!1,!0,!1],[!0,!1,!0,!1,!0],[!1,!0,!1,!0,!1],[!0,!1,!0,!1,!0]]},{clues:[[1,1,2,2]],answer:[[!0,!1,!0,!1,!0],[!1,!0,!1,!0,!1],[!0,!1,!0,!1,!0],[!1,!0,!1,!0,!1],[!0,!1,!0,!1,!0]]},{clues:[[1,1,0,4]],answer:[[!0,!1,!0,!1,!0],[!1,!0,!1,!0,!1],[!0,!1,!0,!1,!0],[!1,!0,!1,!0,!1],[!0,!1,!0,!1,!0]]},{clues:[[2,1,0,3]],answer:[[!0,!1,!0,!1,!0],[!1,!0,!1,!0,!1],[!0,!1,!0,!1,!0],[!1,!0,!1,!0,!1],[!0,!1,!0,!1,!0]]},{clues:[[2,1,4,2]],answer:[[!1,!0,!1,!0,!1],[!0,!1,!0,!1,!0],[!1,!0,!1,!0,!1],[!0,!1,!0,!1,!0],[!1,!0,!1,!0,!1]]},{clues:[[1,1,0,0]],answer:[[!0,!1,!0,!1,!0],[!1,!0,!1,!0,!1],[!0,!1,!0,!1,!0],[!1,!0,!1,!0,!1],[!0,!1,!0,!1,!0]]},{clues:[[2,1,4,4]],answer:[[!1,!0,!1,!0,!1],[!0,!1,!0,!1,!0],[!1,!0,!1,!0,!1],[!0,!1,!0,!1,!0],[!1,!0,!1,!0,!1]]},{clues:[[1,1,1,4]],answer:[[!1,!0,!1,!0,!1],[!0,!1,!0,!1,!0],[!1,!0,!1,!0,!1],[!0,!1,!0,!1,!0],[!1,!0,!1,!0,!1]]},{clues:[[2,1,0,1]],answer:[[!0,!1,!0,!1,!0],[!1,!0,!1,!0,!1],[!0,!1,!0,!1,!0],[!1,!0,!1,!0,!1],[!0,!1,!0,!1,!0]]}]},nl={global_constraint:[[9,1],[10,1]],puzzles:[{clues:[[1,1,0,4],[2,1,1,2],[2,1,2,4],[2,1,3,0],[1,1,3,1],[2,1,3,3],[2,1,4,1],[2,1,4,2],[2,1,4,4]],answer:[[!1,!0,!0,!1,!0],[!0,!1,!1,!0,!1],[!0,!1,!1,!0,!1],[!1,!0,!0,!1,!0],[!0,!1,!1,!0,!1]]},{clues:[[2,1,0,2],[2,1,0,3],[2,1,0,4],[1,1,1,1],[2,1,1,4],[2,1,2,4],[1,1,3,0],[2,1,3,3],[2,1,4,2]],answer:[[!0,!0,!1,!1,!1],[!0,!0,!1,!1,!1],[!0,!0,!1,!1,!1],[!0,!0,!1,!1,!1],[!0,!0,!1,!1,!1]]},{clues:[[2,1,0,2],[1,1,1,3],[1,1,2,1],[1,1,2,2],[1,1,2,3],[1,1,3,0],[2,1,3,3],[1,1,4,2],[2,1,4,4]],answer:[[!0,!1,!1,!1,!0],[!1,!0,!0,!0,!1],[!1,!0,!0,!0,!1],[!0,!1,!1,!1,!0],[!1,!0,!0,!0,!1]]},{clues:[[1,1,0,1],[1,1,0,3],[2,1,1,0],[2,1,2,3],[2,1,2,4],[2,1,3,2],[1,1,3,3],[1,1,4,0],[1,1,4,1]],answer:[[!0,!0,!1,!0,!0],[!1,!1,!0,!1,!1],[!1,!1,!0,!1,!1],[!0,!0,!1,!0,!0],[!0,!0,!1,!0,!0]]},{clues:[[1,1,0,1],[2,1,0,2],[2,1,1,0],[2,1,1,2],[1,1,2,2],[1,1,2,3],[2,1,3,1],[1,1,3,4],[1,1,4,2]],answer:[[!1,!0,!1,!1,!1],[!1,!0,!1,!1,!1],[!0,!1,!0,!0,!0],[!0,!1,!0,!0,!0],[!0,!1,!0,!0,!0]]},{clues:[[1,1,0,3],[2,1,0,4],[2,1,1,1],[1,1,1,2],[1,1,2,3],[2,1,3,0],[2,1,4,0],[2,1,4,1],[1,1,4,3]],answer:[[!1,!1,!0,!0,!1],[!1,!1,!0,!0,!1],[!1,!1,!0,!0,!1],[!1,!1,!0,!0,!1],[!1,!1,!0,!0,!1]]},{clues:[[2,1,0,4],[1,1,1,0],[2,1,1,1],[2,1,1,3],[2,1,2,0],[1,1,3,1],[2,1,3,4],[1,1,4,0],[2,1,4,2]],answer:[[!1,!0,!0,!0,!1],[!0,!1,!1,!1,!0],[!1,!0,!0,!0,!1],[!1,!0,!0,!0,!1],[!0,!1,!1,!1,!0]]},{clues:[[2,1,0,0],[2,1,1,2],[2,1,1,4],[1,1,2,4],[2,1,3,0],[2,1,3,3],[1,1,4,0],[2,1,4,1],[1,1,4,4]],answer:[[!1,!0,!1,!1,!1],[!1,!0,!1,!1,!1],[!0,!1,!0,!0,!0],[!1,!0,!1,!1,!1],[!0,!1,!0,!0,!0]]},{clues:[[2,1,0,3],[2,1,1,0],[2,1,1,2],[2,1,2,3],[1,1,3,1],[1,1,3,2],[1,1,3,3],[2,1,4,3],[1,1,4,4]],answer:[[!1,!1,!1,!1,!0],[!1,!1,!1,!1,!0],[!1,!1,!1,!1,!0],[!0,!0,!0,!0,!1],[!1,!1,!1,!1,!0]]},{clues:[[1,1,0,0],[1,1,1,0],[1,1,1,1],[2,1,1,4],[2,1,2,4],[2,1,3,0],[1,1,3,3],[1,1,4,2],[1,1,4,4]],answer:[[!0,!0,!1,!1,!1],[!0,!0,!1,!1,!1],[!0,!0,!1,!1,!1],[!1,!1,!0,!0,!0],[!1,!1,!0,!0,!0]]}]},ol={global_constraint:[[11,1],[12,1]],puzzles:[{clues:[[1,1,2,3],[2,1,4,0]],answer:[[!1,!0,!1,!0,!1],[!0,!1,!0,!1,!0],[!1,!0,!1,!0,!1],[!0,!1,!0,!1,!0],[!1,!0,!1,!0,!1]]},{clues:[[2,1,0,4],[1,1,3,2]],answer:[[!1,!0,!1,!0,!1],[!0,!1,!0,!1,!0],[!1,!0,!1,!0,!1],[!0,!1,!0,!1,!0],[!1,!0,!1,!0,!1]]},{clues:[[1,1,3,0],[2,1,3,1]],answer:[[!1,!0,!1,!0,!1],[!0,!1,!0,!1,!0],[!1,!0,!1,!0,!1],[!0,!1,!0,!1,!0],[!1,!0,!1,!0,!1]]},{clues:[[1,1,1,3],[1,1,4,3]],answer:[[!0,!0,!0,!0,!0],[!0,!0,!0,!0,!0],[!0,!0,!0,!0,!0],[!0,!0,!0,!0,!0],[!0,!0,!0,!0,!0]]},{clues:[[2,1,2,2],[1,1,3,2]],answer:[[!1,!0,!1,!0,!1],[!0,!1,!0,!1,!0],[!1,!0,!1,!0,!1],[!0,!1,!0,!1,!0],[!1,!0,!1,!0,!1]]},{clues:[[1,1,2,1],[1,1,4,4]],answer:[[!0,!0,!0,!0,!0],[!0,!0,!0,!0,!0],[!0,!0,!0,!0,!0],[!0,!0,!0,!0,!0],[!0,!0,!0,!0,!0]]},{clues:[[2,1,1,0],[2,1,4,0]],answer:[[!1,!1,!1,!1,!1],[!1,!1,!1,!1,!1],[!1,!1,!1,!1,!1],[!1,!1,!1,!1,!1],[!1,!1,!1,!1,!1]]},{clues:[[2,1,3,3],[1,1,4,3]],answer:[[!1,!0,!1,!0,!1],[!0,!1,!0,!1,!0],[!1,!0,!1,!0,!1],[!0,!1,!0,!1,!0],[!1,!0,!1,!0,!1]]},{clues:[[1,1,0,1],[2,1,2,4]],answer:[[!1,!0,!1,!0,!1],[!0,!1,!0,!1,!0],[!1,!0,!1,!0,!1],[!0,!1,!0,!1,!0],[!1,!0,!1,!0,!1]]},{clues:[[1,1,1,2],[1,1,4,2]],answer:[[!0,!0,!0,!0,!0],[!0,!0,!0,!0,!0],[!0,!0,!0,!0,!0],[!0,!0,!0,!0,!0],[!0,!0,!0,!0,!0]]}]},ll={global_constraint:[[1,1],[2,1],[13,1],[14,1]],puzzles:[{clues:[[1,1,2,2],[2,1,2,4],[2,1,4,4]],answer:[[!0,!0,!0,!0,!0],[!0,!1,!1,!1,!1],[!0,!1,!0,!0,!1],[!0,!1,!1,!0,!1],[!0,!0,!0,!0,!1]]},{clues:[[2,1,1,1],[2,1,3,3],[2,1,4,2]],answer:[[!0,!0,!0,!0,!0],[!0,!1,!1,!1,!0],[!0,!1,!0,!1,!0],[!0,!0,!0,!1,!0],[!1,!1,!1,!1,!0]]},{clues:[[2,1,0,2],[2,1,1,3],[1,1,4,4]],answer:[[!1,!1,!1,!1,!0],[!0,!0,!0,!1,!0],[!0,!1,!0,!1,!0],[!0,!1,!1,!1,!0],[!0,!0,!0,!0,!0]]},{clues:[[1,1,2,2],[1,1,3,3],[2,1,4,1]],answer:[[!0,!0,!0,!0,!0],[!0,!1,!1,!1,!0],[!0,!1,!0,!1,!0],[!0,!1,!0,!0,!0],[!0,!1,!1,!1,!1]]},{clues:[[1,1,1,4],[1,1,2,3],[1,1,4,4]],answer:[[!0,!0,!0,!0,!0],[!0,!1,!1,!1,!0],[!0,!1,!0,!0,!0],[!0,!1,!1,!1,!1],[!0,!0,!0,!0,!0]]},{clues:[[2,1,0,0],[2,1,1,3],[2,1,2,0],[1,1,4,3]],answer:[[!1,!0,!0,!0,!0],[!1,!0,!1,!1,!0],[!1,!0,!0,!1,!0],[!1,!1,!1,!1,!0],[!0,!0,!0,!0,!0]]},{clues:[[1,1,0,2],[1,1,1,3],[1,1,3,3]],answer:[[!0,!0,!0,!0,!1],[!1,!1,!1,!0,!1],[!1,!0,!1,!0,!1],[!1,!0,!0,!0,!1],[!1,!1,!1,!1,!1]]},{clues:[[2,1,1,1],[2,1,1,4],[2,1,2,1],[2,1,4,2]],answer:[[!0,!1,!1,!1,!1],[!0,!1,!0,!0,!1],[!0,!1,!1,!0,!1],[!0,!0,!0,!0,!1],[!1,!1,!1,!1,!1]]},{clues:[[1,1,2,0],[2,1,2,3],[1,1,3,3]],answer:[[!0,!0,!0,!0,!0],[!0,!1,!1,!1,!0],[!0,!1,!0,!1,!0],[!0,!1,!0,!0,!0],[!0,!1,!1,!1,!1]]},{clues:[[1,1,0,2],[1,1,1,3],[2,1,3,2]],answer:[[!0,!0,!0,!0,!1],[!0,!1,!1,!0,!1],[!0,!1,!0,!0,!1],[!0,!1,!1,!1,!1],[!0,!0,!0,!0,!0]]}]},il={global_constraint:[[13,1]],puzzles:[{clues:[[6,8,0,3],[6,6,1,2],[6,2,1,4],[6,2,2,1],[6,3,2,4],[6,2,3,2],[6,2,4,3]],answer:[[!1,!0,!0,!1,!1],[!1,!0,!1,!0,!1],[!1,!1,!0,!0,!1],[!1,!1,!1,!1,!0],[!1,!1,!1,!1,!0]]},{clues:[[6,3,1,0],[6,4,1,1],[6,2,1,3],[6,1,1,4],[6,2,2,2],[6,9,2,4],[6,5,3,0],[6,3,3,2]],answer:[[!1,!0,!0,!0,!1],[!1,!1,!1,!1,!1],[!0,!0,!1,!1,!1],[!1,!0,!1,!1,!0],[!0,!0,!1,!1,!0]]},{clues:[[6,8,0,0],[6,5,1,3],[6,1,2,2],[6,2,3,0],[6,1,4,2],[6,2,4,3]],answer:[[!1,!0,!0,!0,!0],[!0,!0,!1,!1,!0],[!1,!1,!1,!1,!0],[!1,!1,!1,!1,!0],[!0,!0,!1,!1,!0]]},{clues:[[6,2,0,0],[6,4,0,2],[6,1,1,4],[6,3,3,3],[6,10,3,4],[6,5,4,1]],answer:[[!1,!0,!1,!1,!1],[!1,!0,!0,!0,!1],[!1,!1,!1,!1,!1],[!0,!0,!0,!1,!1],[!0,!1,!0,!0,!1]]},{clues:[[6,10,0,1],[6,1,1,2],[6,2,1,3],[6,4,3,4],[6,1,4,1]],answer:[[!0,!1,!1,!1,!1],[!0,!0,!1,!1,!0],[!1,!1,!1,!1,!0],[!1,!1,!0,!0,!1],[!1,!1,!1,!0,!0]]},{clues:[[6,2,0,3],[6,7,1,1],[6,4,2,2],[6,5,3,2],[6,2,4,1],[6,9,4,4]],answer:[[!0,!0,!0,!1,!1],[!0,!1,!0,!1,!1],[!0,!0,!1,!0,!0],[!1,!0,!1,!1,!1],[!1,!1,!0,!0,!1]]},{clues:[[6,3,0,3],[6,9,1,0],[6,2,2,3],[6,2,2,4],[6,6,3,1],[6,3,3,3],[6,3,4,3]],answer:[[!1,!0,!0,!1,!0],[!1,!1,!1,!1,!0],[!0,!0,!1,!1,!1],[!0,!1,!1,!1,!0],[!0,!0,!0,!1,!0]]},{clues:[[6,1,1,0],[6,3,1,2],[6,1,2,3],[6,9,3,1],[6,1,4,3]],answer:[[!1,!1,!1,!0,!0],[!1,!1,!1,!1,!1],[!1,!0,!0,!1,!1],[!0,!1,!1,!1,!1],[!0,!0,!0,!1,!1]]},{clues:[[6,2,0,4],[6,4,1,0],[6,4,1,1],[6,4,1,4],[6,5,3,1],[6,2,4,0],[6,9,4,3]],answer:[[!0,!0,!1,!0,!1],[!1,!1,!1,!0,!1],[!0,!0,!1,!0,!0],[!0,!1,!1,!1,!0],[!1,!0,!0,!1,!1]]},{clues:[[6,3,0,1],[6,4,1,1],[6,4,1,3],[6,3,1,4],[6,2,3,0],[6,8,3,2],[6,3,3,4]],answer:[[!0,!1,!0,!0,!0],[!0,!1,!1,!1,!1],[!1,!0,!1,!0,!1],[!1,!0,!1,!0,!1],[!1,!1,!0,!0,!1]]}]},ul={global_constraint:[[2,1]],puzzles:[{clues:[[16,8,0,4],[16,5,1,1],[16,5,1,2],[16,7,1,3],[16,11,3,4],[16,5,4,0]],answer:[[!0,!1,!1,!1,!1],[!0,!1,!1,!1,!1],[!1,!0,!0,!1,!1],[!1,!1,!1,!1,!1],[!1,!1,!1,!0,!1]]},{clues:[[16,3,0,3],[16,6,1,1],[16,3,2,2],[16,5,3,0],[16,6,4,3],[16,11,4,4]],answer:[[!0,!1,!0,!1,!1],[!1,!1,!0,!1,!1],[!1,!1,!1,!0,!1],[!1,!1,!0,!1,!1],[!1,!1,!1,!1,!1]]},{clues:[[16,4,0,0],[16,4,1,1],[16,2,1,3],[16,11,2,2],[16,2,4,0]],answer:[[!1,!1,!1,!1,!0],[!0,!1,!0,!1,!0],[!0,!1,!1,!0,!0],[!1,!1,!0,!0,!0],[!1,!0,!0,!0,!0]]},{clues:[[16,11,1,1],[16,4,2,1],[16,4,2,4],[16,5,3,3],[16,5,4,0],[16,7,4,4]],answer:[[!0,!0,!0,!0,!0],[!0,!1,!0,!1,!0],[!0,!1,!0,!1,!1],[!0,!1,!0,!1,!1],[!1,!1,!1,!1,!1]]},{clues:[[16,3,0,2],[16,5,1,1],[16,11,1,4],[16,6,2,0],[16,7,2,2],[16,9,2,3],[16,4,4,2]],answer:[[!0,!1,!1,!1,!0],[!1,!1,!0,!1,!1],[!1,!1,!1,!1,!1],[!0,!1,!1,!1,!1],[!0,!0,!1,!1,!0]]},{clues:[[16,10,0,1],[16,6,1,4],[16,3,2,0],[16,5,3,2],[16,9,3,3]],answer:[[!1,!1,!1,!1,!1],[!0,!1,!0,!1,!1],[!1,!1,!0,!1,!1],[!1,!1,!1,!1,!1],[!0,!1,!0,!1,!1]]},{clues:[[16,5,0,1],[16,8,1,2],[16,8,2,3],[16,9,2,4],[16,10,3,2],[16,8,4,4]],answer:[[!0,!1,!0,!0,!1],[!1,!1,!1,!1,!1],[!1,!1,!1,!1,!1],[!1,!1,!1,!1,!1],[!0,!1,!1,!1,!1]]},{clues:[[16,12,0,1],[16,8,1,4],[16,5,2,1],[16,7,3,3],[16,9,4,4]],answer:[[!0,!1,!0,!0,!1],[!0,!1,!1,!1,!1],[!0,!1,!0,!1,!1],[!0,!1,!1,!1,!1],[!1,!1,!1,!1,!1]]},{clues:[[16,7,0,4],[16,3,1,0],[16,7,1,4],[16,12,3,4],[16,9,4,3]],answer:[[!1,!0,!1,!1,!1],[!1,!0,!1,!1,!1],[!1,!1,!1,!1,!1],[!0,!0,!1,!1,!1],[!1,!1,!1,!1,!1]]},{clues:[[16,8,0,3],[16,5,1,1],[16,4,2,4],[16,10,3,0],[16,9,4,3]],answer:[[!0,!1,!1,!1,!1],[!1,!1,!1,!1,!0],[!1,!0,!0,!1,!1],[!1,!1,!1,!1,!1],[!1,!1,!1,!1,!1]]}]},cl={global_constraint:[[9,1]],puzzles:[{clues:[[11,13,3,1],[11,8,4,4]],answer:[[!0,!0,!1,!1,!1],[!0,!0,!1,!0,!0],[!0,!0,!1,!0,!0],[!0,!0,!1,!0,!0],[!0,!0,!1,!0,!0]]},{clues:[[11,1,0,1],[11,11,1,2],[11,2,1,4],[11,6,3,0],[11,3,3,3]],answer:[[!1,!0,!1,!1,!0],[!1,!1,!0,!1,!0],[!0,!0,!1,!0,!1],[!0,!0,!1,!0,!1],[!0,!0,!1,!0,!1]]},{clues:[[11,2,0,0],[11,11,2,0],[11,1,3,1],[11,10,3,4],[11,1,4,0]],answer:[[!0,!0,!1,!0,!0],[!1,!1,!1,!0,!0],[!0,!1,!1,!0,!0],[!1,!0,!1,!0,!0],[!0,!1,!1,!0,!0]]},{clues:[[11,10,1,1],[11,11,2,3]],answer:[[!0,!0,!1,!0,!1],[!0,!0,!1,!0,!1],[!0,!0,!1,!0,!1],[!0,!0,!1,!0,!1],[!0,!0,!1,!0,!1]]},{clues:[[11,11,0,1],[11,1,0,4],[11,4,1,3],[11,1,2,0],[11,3,4,2],[11,1,4,4]],answer:[[!1,!0,!1,!1,!0],[!1,!1,!0,!0,!1],[!0,!1,!0,!0,!1],[!1,!1,!1,!1,!1],[!0,!0,!0,!1,!0]]},{clues:[[11,2,1,1],[11,3,2,0],[11,11,3,3]],answer:[[!1,!0,!1,!0,!1],[!1,!0,!1,!0,!1],[!0,!1,!1,!0,!1],[!0,!1,!1,!0,!1],[!0,!1,!1,!0,!1]]},{clues:[[11,4,0,3],[11,6,1,0],[11,11,3,2],[11,2,4,0]],answer:[[!0,!0,!1,!0,!0],[!0,!0,!1,!0,!0],[!0,!0,!1,!1,!1],[!1,!1,!0,!0,!0],[!0,!0,!1,!1,!1]]},{clues:[[11,10,2,0],[11,13,4,3]],answer:[[!0,!0,!1,!1,!1],[!0,!0,!1,!0,!0],[!0,!0,!1,!0,!0],[!0,!0,!1,!0,!0],[!0,!0,!1,!0,!0]]},{clues:[[11,3,0,1],[11,1,0,3],[11,11,4,1],[11,3,4,4]],answer:[[!1,!0,!1,!0,!1],[!1,!0,!1,!1,!1],[!1,!0,!1,!1,!0],[!1,!1,!1,!1,!0],[!0,!0,!0,!1,!0]]},{clues:[[11,5,1,4],[11,11,3,0],[11,1,3,2],[11,1,4,1],[11,2,4,3]],answer:[[!1,!1,!1,!1,!1],[!0,!0,!0,!0,!0],[!1,!1,!1,!1,!1],[!0,!1,!0,!1,!1],[!1,!0,!1,!0,!0]]}]},fl={puzzles:[{global_constraint:[[11,1]],clues:[[14,9,0,1],[13,4,2,4],[5,8,3,1],[6,1,4,0]],answer:[[!1,!1,!0,!0,!0],[!1,!1,!0,!0,!0],[!0,!1,!0,!0,!0],[!1,!0,!1,!1,!1],[!1,!1,!0,!1,!0]]},{global_constraint:[[8,1],[17,1]],clues:[[9,4,0,2],[14,5,1,2],[7,4,1,3],[9,4,3,0]],answer:[[!1,!1,!0,!1,!1],[!1,!0,!1,!0,!1],[!1,!1,!0,!1,!0],[!0,!1,!1,!1,!1],[!1,!1,!0,!1,!0]]},{global_constraint:[[18,1],[1,1]],clues:[[15,7,0,3],[15,11,2,0],[5,3,2,3],[3,1,4,2],[3,2,4,3]],answer:[[!0,!1,!0,!0,!0],[!0,!0,!1,!0,!1],[!0,!0,!0,!0,!0],[!0,!0,!1,!0,!0],[!0,!1,!0,!0,!1]]},{global_constraint:[[11,1]],clues:[[14,1,0,1],[9,4,0,4],[13,6,1,4],[4,4,3,3],[12,3,4,0]],answer:[[!1,!1,!1,!0,!0],[!1,!0,!1,!0,!0],[!0,!1,!0,!1,!1],[!1,!0,!1,!1,!1],[!1,!1,!0,!1,!0]]},{global_constraint:[[22,1],[2,1]],clues:[[3,4,1,3],[13,8,2,1],[6,4,2,3]],answer:[[!0,!0,!0,!0,!0],[!0,!0,!1,!0,!1],[!0,!0,!1,!1,!1],[!0,!0,!0,!0,!0],[!0,!0,!0,!0,!0]]},{global_constraint:[[6,1],[10,1]],clues:[[12,3,0,4],[11,5,3,0],[13,8,3,1],[10,4,4,2]],answer:[[!1,!1,!0,!0,!1],[!1,!1,!0,!0,!1],[!1,!1,!0,!0,!1],[!0,!0,!1,!0,!0],[!0,!0,!1,!0,!0]]},{global_constraint:[[5,1],[14,1],[10,1]],clues:[[11,2,0,4],[11,3,2,0],[7,3,3,2]],answer:[[!0,!1,!0,!1,!0],[!0,!1,!0,!1,!0],[!0,!1,!0,!0,!1],[!1,!0,!0,!0,!1],[!1,!0,!1,!1,!0]]},{global_constraint:[[11,1]],clues:[[17,1,0,1],[16,4,0,2],[18,2,1,4],[15,4,3,1],[10,1,4,4]],answer:[[!0,!0,!1,!0,!1],[!0,!0,!1,!1,!1],[!1,!1,!1,!0,!0],[!1,!0,!1,!0,!0],[!1,!1,!0,!1,!1]]},{global_constraint:[[11,1]],clues:[[15,8,2,2],[17,2,3,0],[6,2,3,4]],answer:[[!0,!1,!0,!0,!0],[!1,!1,!0,!0,!0],[!1,!1,!0,!0,!0],[!0,!0,!1,!1,!1],[!0,!0,!1,!1,!1]]},{global_constraint:[[4,1],[10,1],[7,1]],clues:[[17,4,0,3],[4,2,1,0],[6,7,3,2],[13,5,3,3],[12,2,4,1]],answer:[[!0,!0,!1,!0,!1],[!1,!1,!0,!1,!0],[!1,!1,!0,!1,!0],[!0,!0,!1,!0,!1],[!1,!1,!0,!0,!1]]},{global_constraint:[[12,1]],clues:[[4,4,0,0],[17,2,0,4],[16,1,2,3],[13,1,3,4],[11,1,4,1]],answer:[[!1,!1,!0,!1,!0],[!1,!1,!0,!0,!1],[!0,!0,!0,!1,!0],[!0,!1,!0,!0,!0],[!1,!0,!1,!0,!1]]},{global_constraint:[[3,1],[21,1],[13,1]],clues:[[10,6,0,2],[4,1,1,3],[4,2,2,2],[13,6,3,2],[12,1,3,4]],answer:[[!1,!0,!1,!0,!0],[!1,!0,!0,!1,!0],[!0,!1,!1,!1,!0],[!0,!1,!0,!0,!1],[!0,!0,!1,!0,!0]]},{global_constraint:[[8,1],[13,1],[10,1]],clues:[[14,8,1,4],[12,5,3,0],[16,1,4,3]],answer:[[!1,!0,!1,!0,!0],[!1,!0,!1,!0,!1],[!1,!0,!1,!0,!1],[!1,!0,!1,!0,!0],[!1,!0,!0,!1,!0]]},{global_constraint:[[14,1],[22,1]],clues:[[15,2,0,1],[10,1,1,0],[9,3,2,4],[18,2,3,1],[14,4,4,3]],answer:[[!1,!0,!0,!1,!1],[!1,!1,!1,!0,!1],[!0,!0,!1,!0,!0],[!1,!1,!0,!1,!0],[!0,!1,!0,!1,!1]]},{global_constraint:[[5,1],[11,1]],clues:[[13,3,1,3],[15,1,4,0],[6,4,4,3]],answer:[[!1,!0,!0,!0,!1],[!1,!0,!0,!0,!1],[!1,!0,!0,!0,!1],[!1,!1,!1,!1,!0],[!0,!1,!0,!1,!1]]},{global_constraint:[[11,1]],clues:[[10,3,0,0],[17,9,2,3],[4,2,3,4],[16,6,4,1]],answer:[[!1,!0,!0,!1,!0],[!1,!0,!0,!1,!1],[!1,!1,!1,!0,!1],[!1,!0,!1,!1,!1],[!0,!1,!0,!1,!0]]},{global_constraint:[[1,1],[7,1],[22,1]],clues:[[6,2,1,4],[13,6,2,1],[5,6,2,2],[7,3,4,2],[5,3,4,3]],answer:[[!1,!0,!1,!1,!1],[!1,!0,!1,!0,!1],[!1,!0,!0,!0,!1],[!1,!0,!1,!0,!1],[!1,!1,!0,!0,!1]]},{global_constraint:[[10,1],[21,1]],clues:[[9,2,0,0],[16,2,1,3],[6,6,2,1],[14,8,3,1],[15,2,4,4]],answer:[[!0,!0,!1,!0,!1],[!1,!1,!0,!1,!0],[!1,!1,!0,!1,!0],[!1,!1,!0,!0,!1],[!0,!0,!1,!0,!0]]},{global_constraint:[[12,1]],clues:[[3,3,1,2],[15,4,1,4],[17,2,2,2],[13,3,3,4],[15,1,4,0]],answer:[[!0,!0,!1,!0,!1],[!1,!0,!0,!0,!0],[!0,!1,!0,!0,!1],[!1,!0,!1,!0,!0],[!0,!1,!0,!0,!1]]},{global_constraint:[[9,1],[7,1]],clues:[[14,6,0,3],[6,3,1,0],[14,7,3,0],[11,2,4,4]],answer:[[!1,!0,!0,!1,!0],[!1,!1,!1,!1,!0],[!0,!0,!0,!0,!1],[!1,!1,!1,!1,!0],[!0,!0,!0,!1,!0]]},{global_constraint:[[9,1],[7,1]],clues:[[11,6,1,1],[7,2,1,3],[16,4,1,4],[4,2,3,3],[11,2,4,3]],answer:[[!1,!0,!1,!1,!1],[!1,!0,!1,!0,!1],[!1,!0,!1,!0,!1],[!1,!0,!1,!1,!1],[!1,!0,!1,!0,!0]]},{global_constraint:[[21,1],[3,1],[8,1]],clues:[[16,5,0,1],[4,1,0,3],[14,4,2,0],[4,2,3,3],[4,1,4,1],[17,4,4,4]],answer:[[!1,!1,!0,!1,!1],[!0,!1,!0,!0,!1],[!1,!0,!1,!0,!1],[!0,!0,!1,!1,!1],[!1,!1,!0,!0,!0]]},{global_constraint:[[21,1],[1,1]],clues:[[18,3,0,3],[15,9,1,1],[8,2,2,0],[18,9,3,4],[18,4,4,2]],answer:[[!1,!0,!0,!1,!1],[!0,!0,!0,!0,!0],[!1,!0,!1,!1,!0],[!0,!0,!0,!0,!1],[!1,!0,!1,!0,!0]]},{global_constraint:[[7,1],[12,1]],clues:[[11,1,0,0],[12,4,0,3],[15,3,2,0],[14,6,2,3],[11,4,3,3]],answer:[[!0,!1,!0,!1,!0],[!1,!0,!1,!0,!1],[!0,!1,!0,!1,!0],[!0,!0,!1,!0,!0],[!0,!1,!0,!1,!0]]},{global_constraint:[[4,1],[18,1]],clues:[[3,3,0,3],[11,4,1,1],[3,6,3,3],[5,2,4,0]],answer:[[!0,!1,!0,!0,!0],[!0,!0,!1,!0,!0],[!0,!1,!0,!0,!0],[!1,!0,!0,!0,!0],[!0,!0,!0,!0,!0]]}]},kr=r=>{const e=r.slice();for(let t=e.length-1;t>0;t--){const s=Math.floor(Math.random()*(t+1));[e[t],e[s]]=[e[s],e[t]]}return e},re=(r,e,t)=>({...Sr,beforeNewGame:s=>{const a=Math.floor(Math.random()*r.puzzles.length);s.engine.initExtraState({globalConstraints:r.global_constraint.map(n=>({id:`puzzle-50-global-${n[0]}`,health:n[1]})),clues:kr(r.puzzles[a].clues.map(n=>({id:`puzzle-50-local-${n[0]}`,health:n[1],row:n[2],column:n[3]}))),cluesPlaced:0,answer:r.puzzles[a].answer,showSolution:e,passed:!1,isInvulnerable:t})}}),dl=(r,e,t)=>({...Sr,beforeNewGame:s=>{const a=Math.floor(Math.random()*r.puzzles.length);s.engine.initExtraState({globalConstraints:r.puzzles[a].global_constraint.map(n=>({id:`puzzle-50-global-${n[0]}`,health:n[1]})),clues:kr(r.puzzles[a].clues.map(n=>({id:`puzzle-50-local-${n[0]}`,health:n[1],row:n[2],column:n[3]}))),cluesPlaced:0,answer:r.puzzles[a].answer,showSolution:e,passed:!1,isInvulnerable:t})}}),ml=re(Vo,!0,!0),hl=re(Jo,!0,!0),pl=re(Wo,!0,!0),gl=re(Xo,!0,!0),El=re(Yo,!0,!0),Al=re(Ko,!0,!0),Tl=re(Fo,!0,!0),yl=re(Zo,!0,!0),Sl=re(Ho,!0,!0),wl=re(qo,!0,!0),bl=re(jo,!0,!0),kl=re($o,!0,!0),Rl=re(Qo,!1,!0),vl=re(el,!1,!0),Cl=re(tl,!1,!0),Nl=re(sl,!1,!0),Il=re(rl,!1,!0),Pl=re(al,!1,!0),Ol=re(nl,!1,!0),_l=re(ol,!1,!0),Dl=re(ll,!1,!0),Ul=re(il,!1,!1),Ml=re(ul,!1,!1),Ll=re(cl,!1,!1),Bl=dl(fl,!1,!1),Gl=new Set(["BIATHLON","BOBSLED","CURLING","LUGE","LUGING","SKATING","SKELETON","SKIING"]),xl=new Set(["IVYSAUR","VENUSAUR","SQUIRTLE","CATERPIE","METAPOD","WEEDLE","KAKUNA","BEEDRILL","PIDGEY","PIDGEOT","RATTATA","RATICATE","SPEAROW","FEAROW","EKANS","ARBOK","PIKACHU","RAICHU","NIDORAN","NIDORINA","NIDORAN","NIDORINO","NIDOKING","CLEFAIRY","CLEFABLE","VULPIX","ZUBAT","GOLBAT","ODDISH","GLOOM","PARAS","PARASECT","VENONAT","VENOMOTH","DIGLETT","DUGTRIO","MEOWTH","PERSIAN","PSYDUCK","GOLDUCK","MANKEY","PRIMEAPE","ARCANINE","POLIWAG","ABRA","KADABRA","ALAKAZAM","MACHOP","MACHOKE","MACHAMP","GEODUDE","GRAVELER","GOLEM","PONYTA","RAPIDASH","SLOWPOKE","SLOWBRO","MAGNETON","DODUO","DODRIO","SEEL","DEWGONG","GRIMER","MUK","SHELLDER","CLOYSTER","GASTLY","HAUNTER","GENGAR","ONIX","DROWZEE","HYPNO","KRABBY","KINGLER","VOLTORB","CUBONE","MAROWAK","KOFFING","WEEZING","RHYHORN","RHYDON","CHANSEY","TANGELA","HORSEA","SEADRA","GOLDEEN","SEAKING","STARYU","STARMIE","MRMIME","SCYTHER","JYNX","MAGMAR","PINSIR","TAUROS","MAGIKARP","GYARADOS","LAPRAS","DITTO","EEVEE","VAPOREON","JOLTEON","FLAREON","PORYGON","OMANYTE","OMASTAR","KABUTO","KABUTOPS","SNORLAX","ARTICUNO","ZAPDOS","MOLTRES","DRATINI","MEWTWO","MEW"]),zl=new Set(["AERO","ALIZARIN","ALMOND","AMAZON","AMBER","AMETHYST","APRICOT","AQUA","AUREOLIN","AZURE","BEAVER","BEIGE","BISQUE","BISTRE","BLACK","BLUE","BLUSH","BOLE","BONE","BRONZE","BROWN","BUFF","BURGUNDY","CAFNOIR","CAMEL","CANARY","CARDINAL","CARMINE","CATAWBA","CELADON","CELESTE","CERISE","CERULEAN","CHARCOAL","CHESTNUT","CINNABAR","CITRINE","CITRON","CLARET","COFFEE","COOLGREY","COPPER","CORAL","CORDOVAN","CORN","CREAM","CRIMSON","CYAN","CYCLAMEN","DENIM","DESERT","EBONY","ECRU","EGGPLANT","EGGSHELL","EMERALD","EMINENCE","ERIN","FALLOW","FANDANGO","FAWN","FINN","FLAME","FLAX","FLIRT","FUCHSIA","FULVOUS","GAMBOGE","GLAUCOUS","GOLD","GRAY","GREEN","GUNMETAL","HEATWAVE","ICEBERG","INCHWORM","INDIGO","IVORY","JASMINE","JET","JONQUIL","JUNEBUD","KEPPEL","KHAKI","KOBE","KOBI","LAVA","LAVENDER","LEMON","LIBERTY","LILAC","LIME","LINEN","LION","LIVER","LIVID","MAGENTA","MAGNOLIA","MAHOGANY","MAIZE","MANATEE","MANDARIN","MANGO","MANTIS","MAROON","MAUVE","MELON","MIDNIGHT","MINDARO","MING","MINT","MONALISA","MULBERRY","MUSTARD","MYSTIC","NEWCAR","NICKEL","NYANZA","OCHRE","OLDLACE","OLIVE","OLIVINE","ONYX","OPAL","ORANGE","ORCHID","OXBLOOD","PAUA","PEACH","PEAR","PHLOX","PINETREE","PINK","PLATINUM","PLUM","POPSTAR","PRUNE","PUCE","PUMPKIN","PURPLE","RAJAH","RED","RHYTHM","ROCKET","ROSE","RUBER","RUBY","RUFOUS","RUSSET","RUST","SAFFRON","SAGE","SALMON","SAND","SAPPHIRE","SCARLET","SEANCE","SEASHELL","SECRET","SEPIA","SHADOW","SIENNA","SILVER","SINOPIA","SMITTEN","SNOW","STRAW","SUNGLOW","SUNRAY","SUNSET","TAN","TAUPE","TAWNY","TEAL","TENNE","THISTLE","TOMATO","TUSCAN","UMBER","VANILLA","VERONICA","VIOLET","VIRIDIAN","VOLT","WHEAT","WHITE","WINE","WISTERIA","XANADU","XANTHIC","XANTHOUS","YELLOW","ZAFFRE","ZOMP"]),Hl=new Set(["ABIU","ACAI","ACEROLA","ACKEE","AKEBI","APPLE","APRICOT","ARATILES","ARAZA","ATIS","AVOCADO","BANANA","BILBERRY","BRINJAL","CACAO","CANISTEL","CATMON","CEMPEDAK","CHERRY","COCONUT","CUCUMBER","CURRANT","DAMSON","DATE","DURIAN","EGGFRUIT","EGGPLANT","FEIJOA","FIG","GACFRUIT","GRAPE","GUAVA","GUYABANO","HONEYDEW","JALAPENO","JAMBUL","JUJUBE","KIWANO","KUMQUAT","LANZONES","LEMON","LIME","LONGAN","LOQUAT","LULO","LYCHEE","MACOPA","MANGO","MEDLAR","MELON","MULBERRY","NANCE","OLIVE","ORANGE","PAPAYA","PAWPAW","PEA","PITAYA","PLANTAIN","PLINIA","PLUM","PLUOT","POMELO","PRUNE","PUMPKIN","QUINCE","RAISIN","RAMBUTAN","SALAK","SAMPALOC","SANTOL","SAPOTE","SATSUMA","SOURSOP","SQUASH","TAMARIND","TAMBIS","TANGELO","TAYBERRY","TOMATO","XIMENIA","YUZU","ZUCCHINI"]),Fl=new Set(["MON","TUE","WED","THU","FRI","SAT","SUN"]),Kl=new Set(["DAB","FLL","RSW","VPS","GNV","JAX","EYW","MLB","MIA","MCO","ECP","PNS","PGD","SFB","SRQ","PIE","TLH","TPA","PBI","FXE","VRB","BCT","CLW","FMY","HWO","CRG","ISM","LAL","TMB","OPF","ORL","SPG","TPF","VNC","LNA","AAF","AVO","BOW","CDK","CEW","CTY","DSI","FPR","IMM","NZC","LCQ","LEE","MTH","MRK","COI","TNT","MPB","APF","OCF","OBE","PHK","FPY","PPM","SEF","UST","SUA","TIX","GIF","ZPH","OCA","COF","EGI","HST","NIP","NEN","NQX","NRB","NSE","PAM","NPA","NUN","MCF","VPS"]),Yl=new Set(["BILLS","DOLPHINS","PATRIOTS","JETS","RAVENS","BENGALS","BROWNS","STEELERS","TEXANS","COLTS","JAGUARS","TITANS","BRONCOS","CHIEFS","RAIDERS","CHARGERS","COWBOYS","GIANTS","EAGLES","BEARS","LIONS","PACKERS","VIKINGS","FALCONS","PANTHERS","SAINTS","RAMS","SEAHAWKS"]),Wl=new Set(["AFN","ALL","DZD","USD","EUR","AOA","XCD","XCD","ARS","AMD","AWG","AUD","EUR","AZN","BSD","BHD","BDT","BBD","BYN","EUR","BZD","XOF","BMD","BTN","INR","BOB","BOV","USD","BAM","BWP","NOK","BRL","USD","BND","BGN","XOF","BIF","CVE","KHR","XAF","CAD","KYD","XAF","XAF","CLF","CLP","CNY","AUD","AUD","COP","COU","KMF","CDF","XAF","NZD","CRC","HRK","CUC","CUP","ANG","EUR","CZK","XOF","DKK","DJF","XCD","DOP","USD","EGP","SVC","USD","XAF","ERN","EUR","ETB","EUR","FKP","DKK","FJD","EUR","EUR","EUR","XPF","EUR","XAF","GMD","GEL","EUR","GHS","GIP","EUR","DKK","XCD","EUR","USD","GTQ","GBP","GNF","XOF","GYD","HTG","USD","AUD","EUR","HNL","HKD","HUF","ISK","INR","IDR","XDR","IRR","IQD","EUR","GBP","ILS","EUR","JMD","JPY","GBP","JOD","KZT","KES","AUD","KPW","KRW","KWD","KGS","LAK","EUR","LBP","LSL","ZAR","LRD","LYD","CHF","EUR","EUR","MOP","MGA","MWK","MYR","MVR","XOF","EUR","USD","EUR","MRU","MUR","EUR","XUA","MXN","MXV","USD","MDL","EUR","MNT","EUR","XCD","MAD","MZN","MMK","NAD","ZAR","AUD","NPR","EUR","XPF","NZD","NIO","XOF","NGN","NZD","AUD","USD","NOK","OMR","PKR","USD","PAB","USD","PGK","PYG","PEN","PHP","NZD","PLN","EUR","USD","QAR","MKD","RON","RUB","RWF","EUR","EUR","SHP","XCD","XCD","EUR","EUR","XCD","WST","EUR","STN","SAR","XOF","RSD","SCR","SLE","SGD","ANG","XSU","EUR","EUR","SBD","SOS","ZAR","SSP","EUR","LKR","SDG","SRD","NOK","SZL","SEK","CHE","CHF","CHW","SYP","TWD","TJS","TZS","THB","USD","XOF","NZD","TOP","TTD","TND","TRY","TMT","USD","AUD","UGX","UAH","AED","GBP","USD","USD","USN","UYI","UYU","UZS","VUV","VEF","VED","VND","USD","USD","XPF","MAD","YER","ZMW","ZWL","EUR"]),Vl=new Set(["BEGUILED","BILKED","BURNED","CHEATED","CONFUSED","CONNED","DECEIVED","DELUDED","DUPED","FINESSED","FOOLED","HAD","MISLED","MISTAKEN","SCAMMED","SWINDLED","TAKENIN","TOOKIN","WRONGED"]),Rr=[["ONE",1],["TWO",2],["THREE",3],["FOUR",4],["FIVE",5],["SIX",6],["SEVEN",7],["EIGHT",8],["NINE",9]],vr=[["TWENTY",20],["THIRTY",30],["FORTY",40],["FIFTY",50],["SIXTY",60],["SEVENTY",70],["EIGHTY",80],["NINETY",90]],jl=[["ZERO",0],["TEN",10],["ELEVEN",11],["TWELVE",12],["THIRTEEN",13],["FOURTEEN",14],["FIFTEEN",15],["SIXTEEN",16],["SEVENTEEN",17],["EIGHTEEN",18],["NINETEEN",19],["HUNDRED",100],["THOUSAND",1e3],["MILLION",1e6],["BILLION",1e9],["TRILLION",1e12]],Xl=new Set(["ABUS","ACINACES","ADZE","AIKUCHI","AKINAKA","AKLYS","AKRAFENA","AMIRRE","ANELACE","ANGON","ANKUS","ARBALEST","ARBIR","ARBLAST","ARIT","ARQUEBUS","ARUVAL","ASA","ASSEGAI","ATGEIR","ATHAME","ATLATL","AXE","AYLLO","BADIK","BAGHNAKH","BAKATWA","BALARAO","BALISONG","BALLISTA","BANGKAW","BANGKUNG","BANYAL","BARDICHE","BARONG","BASELARD","BASILARD","BASILISK","BATANGAS","BATON","BAYONET","BHUJ","BICHUWA","BICUCO","BILL","BISENTO","BLADE","BLAKAS","BLOWPIPE","BLOWTUBE","BLUDGEON","BO","BRIQUET","CAESTUS","CAMBUK","CANE","CANNON","CARBINE","CATAPULT","CELURIT","CESTRUS","CESTUS","CETBANG","CHAIN","CHAKO","CHAPE","CHICOTTE","CHOKUTO","CHUI","CHURIKA","CIMPABA","CLAYMORE","CLUB","CORVO","CROP","CUDGEL","CULVERIN","CUTLASS","DAIKYU","DAO","DART","DHA","DIRK","DISACKN","DOLOIRE","DORY","DOTANUKI","DUSACK","DUSAGGE","DUSEGG","DUSSACK","DYSACK","EKU","EMEICI","EPEE","ESPADON","ESTOC","FACON","FALARICA","FALCATA","FALCHION","FALCONET","FALX","FAN","FARANGI","FAUCHARD","FIRANGI","FIREARM","FIRINGHA","FIRINGI","FLAIL","FLYSSA","FOIL","FORK","FU","GAIZAZ","GAR","GAUNTLET","GAYANG","GEIRR","GER","GINGAL","GINSU","GLADIUS","GLAIVE","GOLOK","GRENADE","GUISARME","GUN","HAKAPIK","HALADIE","HALBERD","HAMMER","HANKYU","HARPE","HARPI","HARPOON","HASTA","HATCHET","HOWITZER","HUDUNPAO","HUOCHE","HUOCHONG","HURLBAT","HWAL","HWANDO","IDA","IKLWA","IKUL","IMVUBU","ITAK","JAMBIA","JAMBIYA","JAMBYA","JANBIA","JANBIYA","JANJAL","JI","JO","JUTTE","KABEALA","KAIKEN","KALIS","KAMA","KAMPILAN","KARABELA","KARD","KASKARA","KASTANE","KASUYU","KATANA","KATAR","KERALA","KESTROS","KETERIYA","KHANDA","KHANJALI","KHANJAR","KHUKRI","KILA","KILIJ","KILONDA","KINJAL","KIRPAN","KLEWANG","KNIFE","KNOUT","KOPIS","KOTIATE","KRABI","KRIS","KUDI","KUJANG","KUKRI","KUNAI","KURBASH","LABRYS","LANCE","LANTAKA","LARIAT","LASSO","LATHI","LELA","LITHOS","LITUPA","LIWI","LUWUK","MACANA","MACE","MACHETE","MADUVU","MAHERA","MALLET","MAMBELE","MAMELUKE","MANDAU","MARU","MATTOCK","MERE","MESSER","MINE","MISSILE","MNIGOLO","MONSMEG","MOPLAH","MORTAR","MUBUCHAE","MUCHAN","MUSKET","MYRMEX","NAGAIKA","NAGAMAKI","NAGINATA","NAGYKA","NAIR","NANDAKA","NANGSUN","NAVAJA","NAYAR","NGAO","NIHONTO","NIMCHA","NINJATO","NOGAIKA","NSAPO","NUNCHAKU","NYEPEL","ODACHI","ONO","ONZIL","OTSUCHI","OTTA","OXYBELES","PALITAI","PALUPAD","PANABA","PANDAT","PARANG","PARANKI","PARTISAN","PATA","PATU","PELEKYS","PERNACH","PETRONEL","PEURAWOT","PHURBA","PICK","PIKE","PILUM","PINUTI","PIRAH","PIRANGI","PIRANKI","PISTOL","PLUMBATA","POIGNAL","POLEARM","POTDEFER","PRANGA","PRANGI","PRANGU","PRANKI","PRANKU","PUGIO","PULWAR","PUNAL","PUNYAL","PUUKKO","QAMA","QIANG","QUAMA","RABAULD","RAM","RANSEUR","RAPIER","RAWCON","RESOLZA","REVOLVER","RIBAULT","RICASSO","RIFLE","ROCKET","ROMFEA","ROMPHEA","ROPE","RUDUS","RUNGU","RUNKA","SABER","SABRE","SAI","SAKER","SARISSA","SCHNEPF","SCIMITAR","SCYTHE","SEAX","SEME","SENGESE","SFERE","SHAMSHIR","SHIV","SHOTEL","SHOUM","SHUCKRA","SHURIKEN","SIBAT","SICA","SICKLE","SIDEARM","SLAPJACK","SLING","SOVNYA","SPADE","SPADONE","SPADROON","SPATHA","SPEAR","SPETUM","STAFF","STAVE","STILETTO","SUBURITO","SUMBLING","SURIK","SUWAIYA","SWORD","SZABLA","TABARZIN","TACHI","TAIAHA","TAKOBA","TALWAR","TASER","TEGHA","TEKKAN","TEKKO","TEKPI","TESAK","TOMAHAWK","TONFA","TONGI","TORADAR","TORADOR","TORPEDO","TRIDENT","TRUMBASH","TSURUGI","TUCK","TUMI","TUSECKN","ULFBERHT","ULU","URUMI","UURGA","VEL","VERUTUM","VEUGLAIR","VOULGE","WADDY","WEDUNG","WHIP","WOLDO","WOOMERA","XANADU","XIFOS","XIPHOS","XIXIA","YARI","YATAGAN","YAWARI","ZANBATO","ZAPPOZAP"]),Zl=new Set(["ASPHERE","AXICON","DIFFUSER","ETALON","FILTER","GLASS","GRATE","GRATING","GRISM","ISOLATER","LENS","MIRROR","NULLER","PINHOLE","PRISM","QPLATE","RETICLE","SPLITTER","WINDOW"]),ql=new Set(["MAGE","JUSTIFY","NYQUIST","ORB","BIGBROWN","BARBARO","GIACOMO","GOFORGIN","SEAHERO","LILETEE","ALYSHEBA","SWALE","AFFIRMED","TOMYLEE","TIMTAM","NEEDLES","SWAPS","DARKSTAR","HILLGAIL","PONDER","CITATION","JETPILOT","ASSAULT","HOOPJR","PENSIVE","SHUTOUT","LAWRIN","OMAHA","WHISKERY","ZEV","MORVICH","REGRET","DONERAIL","WORTH","MERIDIAN","DONAU","PINKSTAR","SIRHUON","AGILE","ELWOOD","BABEHURD"]),$l=new Set(["ARCHERY","BASEBALL","SOFTBALL","BOXING","BREAKING","CANOE","CANOEING","CYCLING","DIVING","FENCING","FOOTBALL","GOLF","HANDBALL","HOCKEY","JUDO","KARATE","ROWING","RUGBY","SAILING","SHOOTING","SURFING","SWIMMING","TENNIS"]),Jl=new Set(["AATROX","AHRI","AKALI","AKSHAN","ALISTAR","AMUMU","ANNIE","APHELIOS","ASHE","AZIR","BARD","BELVETH","BRAND","BRAUM","CAITLYN","CAMILLE","CHOGATH","CORKI","DARIUS","DIANA","DRAVEN","EKKO","ELISE","EVELYNN","EZREAL","FIORA","FIZZ","GALIO","GAREN","GNAR","GRAGAS","GRAVES","GWEN","HECARIM","ILLAOI","IRELIA","IVERN","JANNA","JAX","JAYCE","JHIN","JINX","KAISA","KALISTA","KARMA","KARTHUS","KASSADIN","KATARINA","KAYLE","KAYN","KENNEN","KHAZIX","KINDRED","KLED","KOGMAW","KSANTE","LEBLANC","LEESIN","LEONA","LILLIA","LUCIAN","LULU","LUX","MALPHITE","MALZAHAR","MAOKAI","MILIO","MORGANA","NAAFIRI","NAMI","NASUS","NAUTILUS","NEEKO","NIDALEE","NILAH","NOCTURNE","OLAF","ORIANNA","ORNN","PANTHEON","POPPY","PYKE","QIYANA","QUINN","RAKAN","RAMMUS","REKSAI","RELL","RENEKTON","RENGAR","RIVEN","RUMBLE","RYZE","SAMIRA","SEJUANI","SENNA","SETT","SHACO","SHEN","SHYVANA","SINGED","SION","SKARNER","SONA","SORAKA","SWAIN","SYLAS","SYNDRA","TALIYAH","TALON","TARIC","TEEMO","THRESH","TRISTANA","TRUNDLE","TWITCH","UDYR","URGOT","VARUS","VAYNE","VEIGAR","VELKOZ","VEX","VI","VLADIMIR","VOLIBEAR","WARWICK","WUKONG","XAYAH","XERATH","XINZHAO","YASUO","YONE","YORICK","YUUMI","ZAC","ZED","ZERI","ZIGGS","ZILEAN","ZOE","ZYRA"]),Ql=new Set(["ALABAMA","ALASKA","ARIZONA","ARKANSAS","CALIFORNIA","COLORADO","CONNECTICUT","DELAWARE","FLORIDA","GEORGIA","HAWAII","IDAHO","ILLINOIS","INDIANA","IOWA","KANSAS","KENTUCKY","LOUISIANA","MAINE","MARYLAND","MASSACHUSETTS","MICHIGAN","MINNESOTA","MISSISSIPPI","MISSOURI","MONTANA","NEBRASKA","NEVADA","NEWHAMPSHIRE","NEWJERSEY","NEWMEXICO","NEWYORK","NORTHCAROLINA","NORTHDAKOTA","OHIO","OKLAHOMA","OREGON","PENNSYLVANIA","RHODEISLAND","SOUTHCAROLINA","SOUTHDAKOTA","TENNESSEE","TEXAS","UTAH","VERMONT","VIRGINIA","WASHINGTON","WESTVIRGINIA","WISCONSIN","WYOMING"]),ei=new Set(["JANUARY","FEBRUARY","MARCH","APRIL","MAY","JUNE","JULY","AUGUST","SEPTEMBER","OCTOBER","NOVEMBER","DECEMBER"]),ti=new Set(["ACACIA","ALDER","ALMOND","APPLE","APRICOT","ARBUTUS","ARECA","ARGAN","ASH","ASPEN","AVOCADO","BALSA","BAMBOO","BANYAN","BAOBAB","BASSWOOD","BAY","BEADTREE","BEECH","BIRCH","BOOJUM","BUCKEYE","CACAO","CAMPHOR","CATALPA","CEDAR","CEIBA","CHERRY","CHESTNUT","CINCHONA","CINNAMON","CITRUS","COCONUT","COFFEE","CYCAD","CYPRESS","DODO","DOGWOOD","DURIAN","ELDER","ELM","EUCALYPT","EUCOMMIA","FIG","FIR","FOXGLOVE","GINKGO","GUAVA","GURJAN","HACKBERRY","HAWTHORN","HAZEL","HEMLOCK","HICKORY","HOLLY","HORNBEAM","IPE","IRONWOOD","JACARANDA","JOSHUA","JUJUBE","KALYNA","KAPOK","KAURI","KUMQUAT","LAPACHO","LARCH","LAUREL","LEMON","LIME","LINDEN","LYCHEE","MAGNOLIA","MAHOE","MAHOGANY","MANGO","MANGROVE","MAPLE","MIRO","MORINGA","MULBERRY","MYALL","MYRTLE","NARRA","NEEM","NUTMEG","OAK","OLIVE","ORANGE","ORCHID","PALM","PAPAYA","PAWPAW","PEACH","PEAR","PECAN","PEREPAT","PERSIMMON","PINE","PISTACHIO","PLANE","PLUM","POPLAR","REDWOOD","RIMU","ROWAN","RUBBER","SAKHUA","SAL","SARAI","SASSAFRAS","SEQUOIA","SHALA","SOURSOP","SPRUCE","STOPPER","SUGI","SUMAC","SWEETGUM","SYCAMORE","TAMARACK","TEA","THUJA","TOTARA","TULIP","TUPELO","ULLIRI","WALNUT","WILLOW","WINGNUT","YEW","YUCCA"]),js="bearhive",si="beehive",Xs="larva",ri=15,X=["luge-bear","stufful-bear","black-bear","banana-bear","sun-bear","ord-bear","bears-bear","confused-bear","eur-bear","three-bear","bludgeon-bear","four-bear","grism-bear","assault-bear","archery-bear","oak-bear","december-bear","alabama-bear","rammus-bear"],Zs=Rr.concat(vr).concat(jl);function Ht(r){var o,l;const e=r.getNumRows(),t=r.getNumColumns(),s=r.getAllPermanents(),a=[];for(let i=0;i<e;i++){const c=[];for(let u=0;u<t;u++)c.push(void 0);a.push(c)}for(const i of s)a[i.slot.row][i.slot.column]=i;const n=new Set;for(let i=0;i<e;i++){let c="";for(let u=0;u<t;u++){const f=a[i][u];f===void 0||f.card.name===Xs?(n.add(c),c=""):c+=(o=f.card.name)==null?void 0:o.charAt(0).toUpperCase()}n.add(c)}for(let i=0;i<t;i++){let c="";for(let u=0;u<e;u++){const f=a[u][i];f===void 0||f.card.name===Xs?(n.add(c),c=""):c+=(l=f.card.name)==null?void 0:l.charAt(0).toUpperCase()}n.add(c)}return n}function ai(r,e){for(const t of e)for(const s of r)if(t.includes(s))return!0;return!1}const Cr={[R.CREATED]:r=>{const{ctx:e,permanent:t}=r;e.engine.addCounter(t,{type:I.CANNOT_CREATE}),e.engine.addCounter(t,{type:I.CANNOT_ATTACK}),e.engine.addCounter(t,{type:I.CANNOT_MOVE})}},Nr={larva:{onSpecial:(r,e)=>{const{engine:t}=e,{permanent:s}=r,n=$n(r,0).toLowerCase().replace(/ /g,"-"),o=s.slot,l=s.owner;t.despawn(s),t.spawn(n,o,l)},handlers:Cr}};for(const r of cr)Nr[r.toLocaleLowerCase().replace(/ /g,"-")]={onRepeatable:(e,t)=>{const{engine:s}=t;s.despawn(e.permanent)},handlers:Cr};const ni={afterInitEngine:r=>{const{engine:e}=r;e.initExtraState({firstNumber:void 0,usedDraw:!1,usedSpecial:!1})},afterTurnEnd:(r,e)=>{const{inspector:t,engine:s}=e;if(r===h.P2){const a=t.getPermanentsOf(h.P1).filter(n=>n.card.name!==si).length;s.addGems(h.P1,new Array(a).fill(x.YELLOW))}},beforeNewGame:r=>{const{ai:e,engine:t}=r;t.addGems(h.P1,new Array(ri).fill(x.YELLOW)),e.speak(`The B, E, A, R, S are looking rather down today. Help us C, H, E, E, R them up!
We’ll keep the H, O, N, E, Y fresh, so it won’t reset between T, U, R, N, S!`)},cardEffects:Nr,aiTurn:r=>{const{ai:e,engine:t,inspector:s}=r,a=t.getExtraState(),n=s.getTurnNumber()/2,o=Ht(s),l=s.getPermanentsOf(h.P2).find(E=>E.card.name===js);if(n===0){if(l===void 0)return;t.addCounter(l,{type:I.HAPPY_BEARS,val:0}),t.addCounter(l,{type:I.SAD_BEARS,val:0})}const i=[],c=(E,S)=>{if(l===void 0)return;const v=S===void 0?"Bear":s.getCardDisplayName(S);t.mergeValueCounter(l,E?I.HAPPY_BEARS:I.SAD_BEARS,1),i.push(`${v} is ${E?"H, A, P, P, Y!":"S, A, D :("}`)};function u(E,S){const v=s.getPermanentsOf(h.P2).find(_=>_.card.name===E);v===void 0||s.getCardDisplayName(v),c(ai(S,o),v),v!==void 0&&t.despawn(v)}switch(n){case 2:u(X[0],Gl);break;case 5:u(X[1],xl);break;case 6:u(X[2],zl);break;case 7:u(X[3],Hl);break;case 8:u(X[4],Fl),u(X[5],Kl);break;case 9:u(X[6],Yl);break;case 10:u(X[7],Vl),u(X[8],Wl);break;case 11:{const E=Ht(s);let S;for(const[y,N]of Zs)for(const C of E)C.includes(y)&&(S===void 0||S>N)&&(S=N);const v=s.getPermanentsOf(h.P2).find(y=>y.card.name===X[9]),_=S!==void 0;_&&(a.firstNumber=S),c(_,v),v!==void 0&&t.despawn(v),u(X[10],Xl);break}case 13:{const E=Ht(s);let S;const v=[];for(const[N,C]of vr)for(const[O,F]of Rr)v.push([N+O,C+F]);for(const[N,C]of Zs.concat(v))for(const O of E)O.includes(N)&&(S===void 0||S<C)&&(S=C);const _=s.getPermanentsOf(h.P2).find(N=>N.card.name===X[11]),y=S!==void 0&&a.firstNumber!==void 0&&S>a.firstNumber;c(y,_),_!==void 0&&t.despawn(_),u(X[12],Zl),u(X[13],ql);break}case 15:u(X[14],$l),u(X[15],ti),u(X[16],ei),u(X[17],Ql),u(X[18],Jl);break}const f=n===3&&!t.getExtraState().usedDraw,g="Oh yeah, a certain M, A, S, T, E, R, Y might bee very helpful for this battle!";(i.length>0||f)&&e.speak([...i.length>0?[i.join(f||i.length>4?" ":`
`)]:[],...f?[g]:[]].join(`
`));function k(E,S){s.getAllPermanents().filter(v=>v.slot.column===S&&v.slot.row===E).forEach(v=>t.despawn(v))}switch(n){case 1:k(2,2),e.trySpawn(X[0],2,2);break;case 4:k(2,2),e.trySpawn(X[1],2,2);break;case 5:k(2,2),e.trySpawn(X[2],2,2);break;case 6:k(2,2),e.trySpawn(X[3],2,2);break;case 7:k(2,2),k(2,3),e.trySpawn(X[4],2,2),e.trySpawn(X[5],2,3);break;case 8:k(2,2),e.trySpawn(X[6],2,2);break;case 9:k(2,2),k(2,3),e.trySpawn(X[7],2,2),e.trySpawn(X[8],2,3);break;case 10:k(2,3),k(2,2),e.trySpawn(X[9],2,3),e.trySpawn(X[10],2,2);break;case 12:k(2,2),k(2,3),k(2,4),e.trySpawn(X[11],2,2),e.trySpawn(X[12],2,3),e.trySpawn(X[13],2,4);break;case 14:k(1,2),k(2,2),k(0,5),k(1,5),k(2,5),e.trySpawn(X[14],1,2),e.trySpawn(X[15],2,2),e.trySpawn(X[16],0,5),e.trySpawn(X[17],1,5),e.trySpawn(X[18],2,5);break}},extraLoseChecks:(r,e)=>{var n;const{inspector:t}=e,s=t.getPermanentsOf(h.P2).find(o=>o.card.name===js),a=(((n=s==null?void 0:s.counters.find(o=>o.type===I.SAD_BEARS))==null?void 0:n.val)??0)===0;return t.getTurnNumber()>=31&&a===(r===h.P2)},afterStep:(r,e)=>{if(r.type===V.DRAW){e.engine.getExtraState().usedDraw=!0;return}const{ai:t,engine:s}=e,a=s.getExtraState();a.usedSpecial||r.type===V.ACTIVATE_ABILITY&&r.abilityType===ge.SPECIAL&&(a.usedSpecial=!0,t.speak("This battle has a S, P, E, C, I, A, L hotkey! When transforming a Larva into a bee, you can type any letter key to select the bee type whose first letter matches!"))}},qs=5,$s=2,Js=14,Qs=4,er=3,tr=5,Me=(r,e,t)=>{const{ai:s}=r;s.speak(`${e}
${Array(t).fill("⏳").join(" ")}`)},Le=r=>e=>{const{permanent:t,ctx:s}=e,{engine:a}=s;a.addCounter(t,{type:I.DOOM,val:r})},Be=r=>e=>{const{permanent:t,ctx:s}=e,{inspector:a,engine:n,ai:o}=s;if(a.getSharedExtraState(),a.doesPermanentHaveCounterType(t,I.DOOM)){const l=a.getCounterValSum(t,I.DOOM);`${a.getCardDisplayName(t)}`,l===r||l>1||l===1||l===0&&(a.getPermanents({ownedByOpponentOf:t.owner}).forEach(c=>{n.destroy(t,c)}),n.removeCounterType(t,I.DOOM),n.announce(`${a.getCardDisplayName(t)} destroys all enemy units`))}},sr={handlers:{[R.AFTER_DAMAGED]:r=>{const{permanent:e,attacker:t,ctx:s}=r,{inspector:a,engine:n}=s;t&&(n.announce(`${a.getCardDisplayName(e)} attacks back for 1 damage!`),n.damageUnattributed(t,1))},[R.OTHER_UNIT_DESTROYED]:r=>{const{permanent:e,destroyedPermanent:t,ctx:s}=r,{inspector:a,engine:n}=s;e.owner===t.owner&&n.adjustPermanentStats(e,0,1),n.announce(`${a.getCardDisplayName(e)} gains +1 max health`)}}},oi={cardEffects:{"kero-dos":{handlers:{[R.CREATED]:r=>{const{permanent:e,ctx:t}=r,{engine:s}=t;s.addCounter(e,{type:I.INVULNERABLE})}}},"dinosaur-tail":{adjustDamageReceived:(r,e,t,s)=>e>=1?1:e,handlers:{[R.CREATED]:Le(qs),[R.END_TURN]:Be(qs)}},"boar-tusks":{handlers:{[R.AFTER_DAMAGED]:r=>{const{permanent:e,attacker:t,ctx:s}=r,{inspector:a,engine:n}=s;t&&(n.announce(`${a.getCardDisplayName(e)} attacks back for 3 damage!`),n.damageUnattributed(t,3))},[R.CREATED]:Le($s),[R.END_TURN]:Be($s)}},"dryad-horns":{handlers:{[R.CREATED]:Le(Js),[R.END_TURN]:Be(Js)}},"cow-leg-white":sr,"cow-leg-black":sr,"cow-udder":{handlers:{[R.CREATED]:Le(Qs),[R.END_TURN]:Be(Qs),[R.AFTER_DAMAGED]:r=>{const{permanent:e,attacker:t,ctx:s}=r,{inspector:a,engine:n}=s;t&&(n.announce(`${a.getCardDisplayName(e)} attacks back for 1 damage!`),n.damageUnattributed(t,1))},[R.OTHER_UNIT_DESTROYED]:r=>{const{permanent:e,destroyedPermanent:t,ctx:s}=r,{inspector:a,engine:n}=s;e.owner===t.owner&&n.adjustPermanentStats(e,0,1),n.announce(`${a.getCardDisplayName(e)} gains +1 max health`)}}},"bee-wings":{handlers:{[R.CREATED]:Le(er),[R.END_TURN]:Be(er)},insteadOfDamaged:(r,e,t,s)=>{const{inspector:a}=s;return!(t&&r.owner===a.getOpponentOf(t.owner))}},kero:{handlers:{[R.CREATED]:Le(tr),[R.END_TURN]:Be(tr),[R.AFTER_DAMAGED]:r=>{const{permanent:e,ctx:t}=r,{inspector:s,engine:a}=t,n=s.getPermanents({name:"kero",owner:h.P2})[0];if(!n)return;const o=s.getHealth(n);a.adjustPermanentStats(n,0,o),a.announce(`Kero increases its Health by ${o}`)}}}},afterInitEngine:r=>{const{inspector:e,engine:t}=r;t.initSharedExtraState({keroPhase:0})},afterStep:(r,e)=>{const{inspector:t,engine:s}=e,a=t.getSharedExtraState();if(a.keroPhase===4){const o=t.getPermanents({owner:h.P2,name:"cow-udder"})[0];if(!o)return;t.getPermanents({owner:h.P2,name:"cow-leg-white"}).length+t.getPermanents({owner:h.P2,name:"cow-leg-black"}).length===0&&s.removeCounterType(o,I.INVULNERABLE)}t.getPermanentsOf(h.P2).length===0&&(s.modifySharedExtraState({keroPhase:a.keroPhase+1}),s.getBackdoorController().broadcastAndApply({type:W.WAIT_ANIMATE,waitTime:4e3}))},aiTurn:r=>{const{inspector:e,engine:t,ai:s}=r,a=e.getPermanentsOf(h.P2),n=e.getSharedExtraState();if(!a.some(c=>e.getCardType(c)===se.CREATURE)){t.modifySharedExtraState({keroPhase:n.keroPhase+1});const c=a[0];switch(n.keroPhase>1&&t.damageUnattributed(c,Math.round(e.getMaxHealth(c)/6),!0),e.getPermanentsOf(h.P1).forEach(u=>{e.getCardType(u)===se.CREATURE&&t.despawn(u)}),n.keroPhase){case 1:s.trySpawn("dinosaur-tail",1,2);break;case 2:s.trySpawn("boar-tusks",1,2);break;case 3:s.trySpawn("dryad-horns",1,2);break;case 4:{s.trySpawn("cow-udder",1,2);for(let f=1;f<3;f++)for(let g=0;g<5;g++)s.trySpawn((f+g)%2===0?"cow-leg-white":"cow-leg-black",f,g);const u=e.getPermanents({owner:h.P2,name:"cow-udder"})[0];u&&t.addCounter(u,{type:I.INVULNERABLE});break}case 5:s.trySpawn("bee-wings",1,2);break;case 6:{t.despawn(c),t.spawn("kero",0,2,h.P2);break}}}const l=e.getPermanents({hasCounter:I.DOOM})[0],i=l===void 0?0:e.getCounterValSum(l,I.DOOM);switch(n.keroPhase){case 1:{Me(r,`How dare y'all turn against me?
After everything we've been thruwu!
Hand over the cards, or...
I'll smash all of you to bits with my tail! ( •̀_•́)💢`,i);break}case 2:{Me(r,`You... destroyed my tail? How is that possible?!
The power of all our Dino friends was stored within it!
No matter. I still have power from all the other Factions!
I'll destroy youwu with my tusks!! (╬ Ò﹏Ó)`,i);break}case 3:{Me(r,`STOP IT!!! I'll destroy ALL of you! ヽ(#\`Д´)ﾉ
I'll destroy the whole uwuorld!
If these horns would just — *cough* 🌷 — charge up a little faster...
All the cards... will be MINE! MY FRIENDS!!! FOREVER!!!!`,i);break}case 4:{Me(r,`What, no!!! GIVE THEM BACK!!! (ง ‵□′)ง
You were my FRIEND! ALL of you were my FRIENDS!!!
We were so close... the UWU... Just... give up already!!!
I'll- I'll share some of the UWU with you, I promise!!!`,i);break}case 5:{Me(r,`No... (๑′°︿°๑) I don't wanna...
I don't wanna go back to being a fish again...
I don't... I CAN'T go back in that box again...
Not another 1000 years... alone...`,i);break}case 6:{Me(r,`Nouwu~! Everything... EVERYTHING IS RUWUINED!!! (ಥ﹏ಥ)
I... No, I can't give up, not nouwu...!
I don't need you, I NEVER needed you!
Not youwu, not cards... just the power... of UWU...`,i);break}}},disableP2NoBasesLossCondition:!0,extraLoseChecks:(r,e)=>{const{inspector:t,engine:s}=e,a=t.getSharedExtraState();return r===h.P2&&a.keroPhase===7}};function Ft(r,e){return Math.abs(r.slot.row-e.slot.row)+Math.abs(r.slot.column-e.slot.column)}function dt(r){let e=0;for(const t of r)/[0-9a-zA-Z]/.test(t)&&(e+=1);return e}function rr(r){return r===null?0:r===x.WHITEBLACK?7:/^[A-Z]/.test(r)?r.charCodeAt(0)-"A".charCodeAt(0)+1:0}const li=[[function(r,e,t){return r.getPower(t)}],[function(r,e,t){return r.getMaxHealth(t)}],[function(r,e,t){return Math.abs(r.getPower(t)-r.getMaxHealth(t))}],[function(r,e,t){return Math.abs(r.getPower(t)-dt(r.getCardDisplayName(t)))}],[function(r,e,t){return Math.abs(Ft(e,t)-rr(r.getCardColor(t)))}],[function(r,e,t){return Math.abs(dt(r.getCardDisplayName(t))-Ft(e,t)*rr(r.getCardColor(t)))}],[function(r,e,t){return Math.abs(r.getMaxHealth(t)*dt(r.getCardDisplayName(t))-Ft(e,t))},function(r,e,t){return Math.floor(r.getTurnNumber()/2)*Math.abs(r.getMaxHealth(t)-dt(r.getCardDisplayName(t)))}]];function ii(r){return{[R.START_TURN]:e=>{var l;const t=e.permanent,{inspector:s,engine:a}=e.ctx,n=a.getExtraState(),o=s.getCardDisplayName(t);for(const i of r){const c=s.getPermanentsOf(s.getOpponentOf(t.owner)).filter(u=>!s.isProtectedFrom(u,t));for(const u of c){const f=i(s,t,u),g=s.getCardDisplayName(u);a.announce(`The gostak attacks ${g} for ${f}...`),(l=n.damageMappings)[o]??(l[o]=[]),n.damageMappings[o].push({targetName:g,damage:f}),a.damage(t,u,f)}}}}}const ve=li.map((r,e)=>{const t=`gostak${e+1}`;return{disableP2NoBasesLossCondition:!0,counterData:{},cardEffects:{[t]:{handlers:ii(r)}},afterInitEngine:s=>{s.engine.initExtraState({damageMappings:{}})},aiTurn:s=>{const{inspector:a,engine:n,ai:o}=s,l=n.getExtraState();a.getTurnNumber()===0&&o.trySpawn(t,0,2),Object.keys(l.damageMappings).length>0?(o.speak(`A portion of damage to every foe!
${Object.entries(l.damageMappings).map(([i,c])=>c.map(({targetName:u,damage:f})=>`${u}, ${f}.`).join(" ")).join(`
`)}`),l.damageMappings={}):n.clearKeyframe()},extraLoseChecks:(s,a)=>{const{inspector:n}=a;return s===h.P2?n.getPermanentsOf(h.P2).length===0:!1}}}),ls=(r,e)=>{const{ai:t}=r;t.speak(`Good heavens! The ${e?"asteroids are":"asteroid is"} here! Doom, doom to us all!`,{hideBattler:!0,speaker:At.DINO})},is=(r,e)=>{const{ai:t}=r;t.speak(`The asteroid approches. ${e} ${e===1?"turn remains":"turns remain"}!
${Array(e).fill("⏳").join(" ")}`,{speaker:At.DINO})},ui={disableP2NoBasesLossCondition:!0,extraLoseChecks:us,beforeNewGame(r){const{engine:e}=r;e.spawn(Ot,{row:0,column:2},h.P2)},counterData:{[I.DOOM]:{handlers:{[R.START_TURN]:cs(fs)}}},cardEffects:{[Ot]:{handlers:{[R.CREATED]:r=>{r.ctx.engine.addCounter(r.permanent,{type:I.DOOM,val:11})}}}},aiTurn:r=>{const{inspector:e,engine:t,ai:s}=r,a=e.getPermanentsOf(h.P2),n=a.find(l=>e.doesPermanentHaveCounterType(l,I.DOOM));if(n){is(r,e.getCounterValSum(n,I.DOOM));return}const o=a.find(l=>l.card.name===Ot);for(const l of e.getPermanentsOf(h.P1))o?t.destroy(o,l):t.despawn(l);ls(r,!1)}},ci={disableP2NoBasesLossCondition:!0,extraLoseChecks:us,beforeNewGame(r){const{engine:e}=r;e.spawn(Re,{row:0,column:0},h.P2),e.spawn(Re,{row:1,column:1},h.P2),e.spawn(Re,{row:2,column:2},h.P2),e.spawn(Re,{row:1,column:3},h.P2),e.spawn(Re,{row:0,column:4},h.P2)},counterData:{[I.DOOM]:{handlers:{[R.START_TURN]:cs(fs)}}},cardEffects:{[Re]:{handlers:{[R.CREATED]:r=>{r.ctx.engine.addCounter(r.permanent,{type:I.DOOM,val:11})}}}},aiTurn:r=>{const{inspector:e,engine:t}=r,s=e.getPermanentsOf(h.P2),a=s.find(o=>e.doesPermanentHaveCounterType(o,I.DOOM));if(a){is(r,e.getCounterValSum(a,I.DOOM));return}const n=s.find(o=>o.card.name===Re);for(const o of e.getPermanentsOf(h.P1))n?t.destroy(n,o):t.despawn(o);ls(r,!0)}},fi={disableP2NoBasesLossCondition:!0,extraLoseChecks:us,beforeNewGame(r){const{engine:e}=r;e.spawn(lt,{row:0,column:2},h.P2)},counterData:{[I.DOOM]:{handlers:{[R.START_TURN]:cs(fs)}}},cardEffects:{[lt]:{handlers:{[R.CREATED]:r=>{r.ctx.engine.addCounter(r.permanent,{type:I.DOOM,val:11})}}}},aiTurn:r=>{const{inspector:e,engine:t}=r,s=e.getPermanentsOf(h.P2),a=s.find(u=>e.doesPermanentHaveCounterType(u,I.DOOM));if(a){is(r,e.getCounterValSum(a,I.DOOM));return}const n=s.find(u=>u.card.name===lt);if(!n)return;const o=e.getPower(n);t.removeDamage(n,e.getBaseHealth(n));const l=e.getHealth(n),i=o-l;i!==0&&t.adjustPermanentStats(n,0,i);let c=o;for(const u of e.getPermanents({owner:h.P1,sort:["creaturesFirst",{type:"frontToBack",perspective:h.P1}]})){const f=e.getHealth(u);if(f>c){t.announce(`${u.card.name} catches the Meaty Ore!`),t.damage(u,n,f);break}t.damage(u,n,f),t.adjustPermanentStats(n,-f,0),t.destroy(n,u),c-=f}e.getPermanents({name:lt}).length!==0&&ls(r,!1)}};function us(r,e){const{inspector:t}=e;return r===h.P2&&t.getPermanentsOf(r).length===0}function cs(r){return e=>{const{permanent:t,counter:s,counterIndex:a,ctx:n}=e,{engine:o,inspector:l}=n;if(!l.isTurnPending(t.owner))return;if(s==null||a==null)throw new Error("counter event should have counter specified");const i=(s.val||0)-1;if(i<=0)return{expire:!0};o.updateCounterVal(t,a,i,r)}}function fs(r){switch(r){case 0:return"BOOM!!!!!!!";case 1:return"This asteroid lands in 1 turn!";default:return`This asteroid lands in ${r} turns.`}}const di=["arvada","burlington","centennial","grover","cow-butte","ramsey-peak","saddle-mountain","finger-rock"],Kt=8,mi={arvada:[0,4],grover:[2,0],burlington:[0,2],centennial:[3,4],"cow-butte":[3,3],"ramsey-peak":[3,1],"saddle-mountain":[0,1],"finger-rock":[0,3]},hi={arvada:[1,3],grover:[0,4],burlington:[1,6],centennial:[1,4],"cow-butte":[2,5],"ramsey-peak":[0,3],"saddle-mountain":[2,1],"finger-rock":[0,2]},ar=r=>({row:r[0],column:r[1]}),Yt={handlers:{[R.CREATED]:r=>{r.ctx.engine.addCounter(r.permanent,{type:I.BASE_GEMS,val:1})}}},pi={cardEffects:{arvada:Yt,burlington:Yt,centennial:Yt},disableNoBasesLossCondition:!0,afterInitEngine:r=>{r.engine.initExtraState({isAngry:!1})},beforeNewGame:r=>{for(const e of di)r.engine.addCardToHand(h.P1,{name:e}),r.engine.spawn(e,ar(hi[e]),h.P2)},extraLoseChecks:(r,e)=>{const{inspector:t}=e;if(r===h.P1){const n=t.getPermanentsOf(r).length+t.gameState[r].hand.length===Kt;return n||e.ai.speak("...you have no hope of victory now..."),!n}const s=t.getPermanentsOf(h.P1);return(n=>s.length>=Kt&&s.every(o=>{if(!o.card.name)throw new Error("oops");const l=n[o.card.name];return l&&ss(o.slot,ar(l))}))(mi)?(e.ai.speak(""),!0):!1},afterStep:(r,e)=>{const t=e.engine.getExtraState();t.isAngry||e.inspector.getPermanentsOf(h.P2).length!==Kt&&(e.ai.speak("...must coordinate troops... ...partition the land... ...degree by degree..."),t.isAngry=!0),r.type===V.ATTACK&&e.inspector.getPermanentsOf(h.P2).length===0&&e.ai.speak("...my strength is gone... ...but you won’t take me... ...not with that formation...")},aiTurn:r=>{const{inspector:e,ai:t}=r;if(r.engine.getExtraState().isAngry)for(const s of e.getPermanentsOf(h.P2))!s.ready||e.getPower(s)<=0||r.ai.tryAttackFirst(s,{sort:["health"]})}},gi={disableP2NoBasesLossCondition:!0,cardEffects:{"miracle-growth":{handlers:{[R.OTHER_UNIT_SPAWN]:r=>{const e=r.permanent,{inspector:t,engine:s}=r.ctx,a=t.getPower(e);a>0&&s.adjustPermanentStats(e,a,0);const n=t.getMaxHealth(e),o=t.getHealth(e);s.adjustPermanentStats(e,0,n),n-o&&s.damageUnattributed(e,n-o)}}}},aiTurn:r=>{const{inspector:e,ai:t}=r;e.getTurnNumber()===0&&t.trySpawn("miracle-growth",0,2),e.getPermanentsOf(h.P2).forEach(s=>t.tryAttackFirst(s,{sort:[{type:"weighted",weights:[{criterion:"-power",weight:1},{criterion:"health",weight:1}]},{type:"euclideanDistance",slot:s.slot}]}))},extraLoseChecks:(r,e)=>{const{inspector:t}=e;return r===h.P2&&t.getPermanentsOf(r).length===0}},Ei={disableP2NoBasesLossCondition:!0,cardEffects:{"leech-seed":{handlers:{[R.START_TURN]:r=>{const e=r.permanent,{inspector:t,engine:s}=r.ctx,a=t.getPermanents({type:se.CREATURE}).map(n=>t.getPower(n)).reduce((n,o)=>n+o,0);a>0&&s.adjustPermanentStats(e,0,a)}}}},aiTurn:r=>{const{inspector:e,ai:t}=r;e.getTurnNumber()===0&&t.trySpawn("leech-seed",0,2),e.getPermanentsOf(h.P2).forEach(s=>t.tryAttackFirst(s))},extraLoseChecks:(r,e)=>{const{inspector:t}=e;return r===h.P2&&t.getPermanentsOf(r).length===0}},Ai={disableP2NoBasesLossCondition:!0,cardEffects:{"wild-weed":{handlers:{[R.OTHER_UNIT_SPAWN]:r=>{const{permanent:e,spawnedPermanent:t}=r;if(e.owner!==t.owner){const{engine:s,inspector:a}=r.ctx;let n=a.getPower(t);if(!n)return;const o=a.getUnoccupiedSlotsClosestTo(h.P2,e.slot);for(const l of o)if(s.spawn("wild-weed",l,h.P2)&&(n--,n===0))break}}}}},aiTurn:r=>{const{inspector:e,ai:t}=r;e.getTurnNumber()===0&&t.trySpawn("wild-weed",0,2),e.getPermanentsOf(h.P2).forEach(s=>t.tryAttackFirst(s,{sort:[{type:"weighted",weights:[{criterion:"-power",weight:1},{criterion:"health",weight:1}]},{type:"euclideanDistance",slot:s.slot}]}))},extraLoseChecks:(r,e)=>{const{inspector:t}=e;return r===h.P2&&t.getPermanentsOf(r).length===0}},Ti={disableP2NoBasesLossCondition:!0,cardEffects:{"spirit-of-the-vines":{handlers:{[R.START_TURN]:r=>{const{permanent:e}=r,{engine:t}=r.ctx;t.adjustPermanentStats(e,0,2)},[R.OTHER_UNIT_DESTROYED]:r=>{const{permanent:e,destroyedPermanent:t}=r,{engine:s}=r.ctx;t.owner===e.owner&&s.adjustPermanentStats(e,1e4,1e4)}}},"overgrown-vines":{handlers:{[R.OTHER_UNIT_SPAWN]:r=>{const{spawnedPermanent:e}=r,{engine:t}=r.ctx;t.addCounter(e,{type:I.CANNOT_MOVE,explanation:"Immobile."})}}}},aiTurn:r=>{const{inspector:e,ai:t}=r;e.getTurnNumber()===0&&(t.trySpawn("spirit-of-the-vines",0,2),t.trySpawn("overgrown-vines",1,2)),e.getPermanentsOf(h.P2).forEach(s=>t.tryAttackFirst(s))},extraLoseChecks:(r,e)=>{const{inspector:t}=e;return r===h.P2&&t.getPermanentsOf(r).length===0}},yi={disableP2NoBasesLossCondition:!0,cardEffects:{"venus-bee-trap":{handlers:{[R.START_TURN]:r=>{const{permanent:e}=r,{engine:t}=r.ctx;t.adjustPermanentStats(e,0,3)},[R.OTHER_UNIT_DESTROYED]:r=>{const{permanent:e}=r,{engine:t}=r.ctx;t.adjustPermanentStats(e,1e4,1e4)}}}},aiTurn:r=>{const{inspector:e,ai:t}=r;e.getTurnNumber()===0&&t.trySpawn("venus-bee-trap",0,2),e.getPermanentsOf(h.P2).forEach(s=>t.tryAttackFirst(s,{sort:["creaturesFirst","health",{type:"euclideanDistance",slot:s.slot}]}))},extraLoseChecks:(r,e)=>{const{inspector:t}=e;return r===h.P2&&t.getPermanentsOf(r).length===0}},Si={cardEffects:{yurt:{handlers:{[R.START_TURN]:r=>{const{permanent:e,ctx:t}=r,{inspector:s,engine:a}=t;s.isTurnPending(e.owner)&&a.addGems(e.owner,[x.YELLOW])}}}},adjustDamageReceived:(r,e,t,s)=>{const{inspector:a,engine:n,ai:o}=s;return t&&Math.abs(t.slot.row-r.slot.row)>6?(n.announce(`${a.getCardDisplayName(t)} failed to damage ${a.getCardDisplayName(r)} because it was too far.`),0):e},disableP2NoBasesLossCondition:!0,extraLoseChecks:(r,e)=>{const{inspector:t}=e;return r===h.P2&&t.getPermanentsOf(r).length===0},aiTurn:r=>{const{inspector:e,ai:t}=r;if(e.getTurnNumber()===0){for(let s=0;s<=6;s++)for(let a=0;a<=4;a++)t.trySpawn("bee-rider",{row:s,column:a});return}e.getPermanentsOf(h.P2).filter(s=>e.getSharedEffects(s).isBase).forEach(s=>{const{row:a,column:n}=s.slot;for(let o=-1;o<=1;o++)for(let l=-1;l<=1;l++)t.trySpawn("bee-rider",{row:a+o,column:n+l})}),e.getPermanents({owner:h.P2,type:se.CREATURE,sort:[s=>-s.slot.row]}).forEach(s=>{const{row:a,column:n}=s.slot;t.tryActivateAbility(s,ge.FLEX,[{type:ce.SLOT,slot:{row:a+1,column:n}}]),t.tryMoveRel(s,1,0),t.tryAttackFirst(s,{owner:h.P1,notProtectedFrom:s,custom:o=>ln(s.slot,o.slot)<2})})}},wi={beforeNewGame:r=>{const{engine:e}=r;e.spawn("hog-factory",{row:0,column:1},h.P2),e.spawn("log-factory",{row:0,column:3},h.P2)},aiTurn:r=>{r.inspector.getTurnNumber()!==0&&(Or(r),Tt(r))}},bi={beforeNewGame:r=>{const{engine:e}=r;e.spawn("hog-factory",{row:0,column:0},h.P2),e.spawn("log-factory",{row:0,column:4},h.P2),e.spawn("stacktory",{row:0,column:2},h.P2)},aiTurn:r=>{Ir(r).length==3?_i(r):Or(r),r.inspector.getTurnNumber()!==0&&Tt(r)}},ki={beforeNewGame:r=>{const{engine:e}=r;e.spawn("stackstack-tory",{row:0,column:2},h.P2)},aiTurn:r=>{const{inspector:e,ai:t}=r;if(e.getTurnNumber()===0)return;const s=e.getPermanents({owner:h.P2,name:"stackstack-tory"})[0];if(s){const a=s.slot.column;for(const n of[0,1,2])if(t.trySpawn("hog-on-a-log-on-a",n,a))break}Tt(r)}},Ri={beforeNewGame:r=>{const{engine:e}=r;e.spawn("hog-factorytorytory",{row:0,column:0},h.P2),e.spawn("log-factorytorytory",{row:0,column:1},h.P2)},aiTurn:r=>{const{inspector:e,ai:t}=r;if(e.getTurnNumber()===0)return;const s=e.getPermanents({owner:h.P2,sort:[a=>100*a.slot.row+a.slot.column]});for(const a of s){const n=Oi(a.card.name);if(n){let o=!1;for(const l of Pi(r))if(t.trySpawn(n,l)){o=!0;break}if(!o)break}}Tt(r)}},mt=[wi,bi,Ri,ki];function vi(r,e){if(e.ai.tryAttackFirst(r,{column:r.slot.column,sort:[{type:"frontToBack",perspective:h.P2}]}))return!0;const s=e.inspector.getPermanents({owner:h.P1,notProtectedFrom:r,sort:[a=>Math.abs(a.slot.column-r.slot.column)]});if(s[0]){const a=s[0].slot.column>r.slot.column?1:-1;e.ai.tryMoveRel(r,0,a)}return!1}function Ci(r,e){return e.ai.tryAttackFirst(r)}function Ni(r,e){return(r.card.name||"").startsWith("hog")?vi(r,e):Ci(r,e)}function Tt(r){const{inspector:e}=r,t=e.getPermanents({owner:h.P2,sort:[s=>(s.card.name||"").startsWith("h")?0:1,s=>-10*s.slot.row+s.slot.column]});for(const s of t)e.getPower(s)<=0||s.ready&&Ni(s,r)}const Ii=new Set(["hog-factory","log-factory","stacktory","stackstack-tory"]);function Ir(r){const{inspector:e}=r;return e.getPermanentsOf(h.P2).filter(t=>Ii.has(t.card.name||""))}function*Pr(r){const e=Ir(r),t=new Set(e.map(s=>s.slot.column));for(const s of[1,2,0])for(let a=0;a<=4;a++)t.has(a)&&(yield{row:s,column:a});for(const s of[1,2,0])for(let a=0;a<=4;a++)t.has(a)||(yield{row:s,column:a})}function*Pi(r){for(let e=0;e<3;e++)for(let t=0;t<5;t++)r.inspector.isSlotOccupied({row:e,column:t})||(yield{row:e,column:t})}function Oi(r){switch(r){case"hog-factory":return"hog";case"hog-factorytory":return"hog-factory";case"hog-factorytorytory":return"hog-factorytory";case"log-factory":return"log";case"log-factorytory":return"log-factory";case"log-factorytorytory":return"log-factorytory";default:return null}}function Or(r){const{inspector:e,ai:t}=r,s=e.getPermanentsOf(h.P2);let a=!!s.find(o=>o.card.name==="hog-factory"),n=!!s.find(o=>o.card.name==="log-factory");for(const o of Pr(r)){if(!a&&!n)break;t.trySpawn(a?"hog":"log",o)&&(a?a=!1:n=!1)}}function _i(r){const{inspector:e,ai:t}=r,a=e.getTurnNumber()/2%2===0?"hog-on-a-log":"log-on-a-hog";for(const n of Pr(r))if(t.trySpawn(a,n))break}const Di={cardEffects:{[Bs]:{handlers:{[R.END_TURN]:r=>{const{engine:e,inspector:t}=r.ctx,{permanent:s}=r;for(const a of t.getPermanents({column:s.slot.column,type:se.CREATURE}))e.adjustPermanentStats(a,1,0)}}},[_t]:{handlers:{[R.END_TURN]:r=>{const{engine:e}=r.ctx,{permanent:t}=r;e.adjustPermanentStats(t,1,0)}}}},aiTurn:r=>{const{ai:e,engine:t,inspector:s}=r;if(s.getTurnNumber()===0){e.speak(`What are y’all trespassers DOING on my FARM?
GIT yer butts OUTTA here and keep yer hands off my dang BOARRIES!`),e.trySpawn(_t,{row:2,column:2});return}const a=s.getPermanents({name:_t,owner:h.P2})[0];if(!a)return;const n=s.getPower(a),l=!!s.getPermanents({owner:h.P2,type:se.STRUCTURE}).find(c=>c.card.name===un),i=s.getPermanents({owner:h.P1,notProtectedFrom:a,sort:["creaturesFirst",c=>s.getTerrainOf(c.slot)===h.P2?0:1,c=>s.getHealth(c)<=n?0:1,"-power",c=>Math.abs(c.slot.column-a.slot.column)]});if(l){const c=i[0];if(!c)return;if(s.getTerrainOf(c.slot)===h.P2){const u=s.getPermanents({owner:h.P2,name:Bs,sort:["health"]});let f=!1;for(const g of u){for(const k of[2,1,0])if(f=nr(r,a,{column:g.slot.column,row:k}),f)break;if(f)break}e.tryAttack(a,c);return}if(c.slot.column!==a.slot.column){let u=!1;for(const f of[2,1,0])if(u=nr(r,a,{column:c.slot.column,row:f}),u)break}e.tryAttack(a,c)}else{const c=i.find(g=>g.slot.column===a.slot.column||s.getTerrainOf(g.slot)===h.P2);if(c){e.tryAttack(a,c);return}const u=i[0];if(!u)return;const f=u.slot.column>a.slot.column?1:-1;e.tryMoveRel(a,0,f)}}};function nr(r,e,t){const s=r.ai.tryMove(e,t);return s&&r.engine.ready(e),s}const Ui={extraLoseChecks:(r,e)=>r===h.P2&&e.inspector.getTurnNumber()>=2*1},Ye=r=>({beforeNewGame:e=>{e.ai.setKeyframe(r)}}),Mi={[dr]:eo,vanilla:ft,pvp:ft,intra_pvp_1:ft,intra_pvp_2:ft,robot:to,tutorial1:so,tutorial2:ro,tutorial3:ao,tutorial4:no,tutorial5:oo,tutorial6:lo,gnutmeg_tree:mo,mister_penny:ho,blancmange:go,beebay_fulfillment_center_1:me[0],beebay_fulfillment_center_2:me[1],beebay_fulfillment_center_3:me[2],beebay_fulfillment_center_4:me[3],beebay_fulfillment_center_5:me[4],beebay_fulfillment_center_6:me[5],beebay_fulfillment_center_7:me[6],beebay_fulfillment_center_8:me[7],beebay_fulfillment_center_9:me[8],beebay_fulfillment_center_10:me[9],beebay_fulfillment_center_11:me[10],beebay_fulfillment_center_12:me[11],beebay_fulfillment_center_13:me[12],miss_yu:Co,bb_b:No,slime:Oo,dargle_1:_o,dargle_2:Do,dargle_3:Uo,dargle_4:Mo,dargle_5:Lo,moonick_1:ml,moonick_2:hl,moonick_3:pl,moonick_4:gl,moonick_5:El,moonick_6:Al,moonick_7:Tl,moonick_8:yl,moonick_9:Sl,moonick_10:wl,moonick_11:bl,moonick_12:kl,moonick_13:Rl,moonick_14:vl,moonick_15:Cl,moonick_16:Nl,moonick_17:Il,moonick_18:Pl,moonick_19:Ol,moonick_20:_l,moonick_21:Dl,moonick_22:Ul,moonick_23:Ml,moonick_24:Ll,moonick_final:Bl,spelling_bee:ni,the_swarm:Si,kero:oi,jabberwock_1:ve[0],jabberwock_2:ve[1],jabberwock_3:ve[2],jabberwock_4:ve[3],jabberwock_5:ve[4],jabberwock_6:ve[5],jabberwock_7:ve[6],asteroid_1:ui,asteroid_2:ci,asteroid_3:fi,coloring:pi,othello:cn,spirit_of_the_vines_1:gi,spirit_of_the_vines_2:Ei,spirit_of_the_vines_3:Ai,spirit_of_the_vines_4:yi,spirit_of_the_vines_5:Ti,infinitely_many_hogs_and_logs_1:mt[0],infinitely_many_hogs_and_logs_2:mt[1],infinitely_many_hogs_and_logs_3:mt[2],infinitely_many_hogs_and_logs_4:mt[3],angry_boarry_farmer:Di,test_battle:Ui,treasure_chest:Ye("intro-start"),first_answer:Ye("masteries-start"),first_legendary:Ye("legendary-start"),entering_the_water:Ye("pre-final-battle-start"),the_end:Ye("post-final-battle-start")},Li=r=>{const e=fn[r],t=Mi[r];if(e===void 0&&t===void 0)throw new Error(`unknown puzzle name ${r} requested`);return{...e??{},...t??{}}};class Bi{constructor(e){A(this,"multicaster");this.multicaster=e}stepAck(e,t){this.multicaster.send(e,{type:W.STEP_ACK,err:t})}respSuccess(e){this.stepAck(e)}respInvalidStep(e){this.stepAck(e,{errCode:B.INVALID_STEP})}advancePhase(e){this.broadcastAndApply({type:W.ADVANCE_PHASE,phase:e})}startTurn(e){this.broadcastAndApply({type:W.START_TURN,player:e,startTurnTime:new Date().getTime()})}endTurn(e){this.broadcastAndApply({type:W.END_TURN,player:e,endTurnTime:new Date().getTime()})}setDrawPile(e,t){this.broadcastAndApply({type:W.SET_DRAW_PILE,player:e,drawPile:t})}setDevKnobs(e){this.broadcastAndApply({type:W.SET_DEV_KNOBS,devKnobs:e})}addGems(e,t){this.broadcastAndApply({type:W.ADD_GEMS,player:e,gems:t})}removeGems(e,t){this.broadcastAndApply({type:W.REMOVE_GEMS,player:e,gems:t})}clearGems(e){this.broadcastAndApply({type:W.CLEAR_GEMS,player:e})}createPermanent(e,t){this.broadcastAndApply({type:W.CREATE_PERMANENT,handCardId:t,permanent:JSON.parse(JSON.stringify(e))})}readyPermanent(e){this.broadcastAndApply({type:W.READY_PERMANENT,permanentId:e})}unreadyPermanent(e){this.broadcastAndApply({type:W.UNREADY_PERMANENT,permanentId:e})}changePermanentOwner(e,t){this.broadcastAndApply({type:W.CHANGE_PERMANENT_OWNER,permanentId:e,owner:t})}transformPermanent(e,t){this.broadcastAndApply({type:W.TRANSFORM_PERMANENT,permanentId:e,newCardName:t})}move(e,t){this.broadcastAndApply({type:W.MOVE,permanentId:e,slot:t})}swap(e,t){this.broadcastAndApply({type:W.SWAP,permanent1Id:e,permanent2Id:t})}drawCard(e,t,s,a,n){const o={type:W.DRAW_CARD,player:e,card:t,handCardId:s,nextTopCard:a,shouldPopDrawPile:n??!0};this.broadcastAndApplyAsymmetric(e,o,{...o,nextTopCard:void 0,card:{}})}removeFromDrawPile(e,t,s){const a={type:W.REMOVE_FROM_DRAW_PILE,player:e,drawPileIndex:t,nextTopCard:s};this.broadcastAndApplyAsymmetric(e,a,{...a,nextTopCard:void 0})}discardCard(e,t){this.broadcastAndApply({type:W.DISCARD_CARD,player:e,handCardId:t})}damagePermanent(e,t,s){this.broadcastAndApply({type:W.DAMAGE_PERMANENT,permanentId:e,damage:t,attackerId:s})}removePermanent(e,t){this.broadcastAndApply({type:W.REMOVE_PERMANENT,permanentId:e,discard:t})}addCounter(e,t){this.broadcastAndApply({type:W.ADD_COUNTER,permanentId:e,counter:t})}removeCounter(e,t){this.broadcastAndApply({type:W.REMOVE_COUNTER,permanentId:e,counterIndex:t})}setCounter(e,t,s,a){this.broadcastAndApply({type:W.SET_COUNTER,permanentId:e,counterIndex:t,counterVal:s,explanation:a})}setKeyframe(e){this.broadcastAndApply({type:W.SET_KEYFRAME,keyframe:e})}clearKeyframe(){this.broadcastAndApply({type:W.SET_KEYFRAME,keyframe:null})}announce(e){this.broadcastAndApply({type:W.ANNOUNCE,message:e})}announceSummonPermanent(e,t){this.broadcastAndApply({type:W.ANNOUNCE_SUMMON_PERMANENT,player:e,cardName:t})}announceMove(e,t){this.broadcastAndApply({type:W.ANNOUNCE_MOVE,player:e,cardName:t})}announceAttackCard(e,t,s){this.broadcastAndApply({type:W.ANNOUNCE_ATTACK_CARD,cardName:e,target:s,damage:t})}overrideState(e,t,s,a){this.multicaster.broadcastPerRoleAndApply({[ae.GOD]:{type:W.OVERRIDE_STATE,roomId:e,state:t},[ae.P1]:{type:W.OVERRIDE_STATE,roomId:e,state:s},[ae.P2]:{type:W.OVERRIDE_STATE,roomId:e,state:a}})}respOverrideState(e,t,s){this.multicaster.send(e,{type:W.OVERRIDE_STATE,roomId:t,state:s})}notifySystem(e){this.multicaster.notifySystem(e)}broadcastAndApply(e){this.multicaster.broadcastAndApply(e)}broadcastAndApplyAsymmetric(e,t,s){this.multicaster.broadcastAndApplyAsymmetric(e,t,s)}}const Gi=4;class xi{constructor(e,t,s,a,n,o,l,i,c,u,f,g,k,E,S){A(this,"multicaster");A(this,"puzName");A(this,"roomId");A(this,"gameSpec");A(this,"allSpecs");A(this,"getCardUnlocks");A(this,"cardsDB");A(this,"effectsDB");A(this,"countersDB");A(this,"keyframes");A(this,"gameState");A(this,"inspector");A(this,"controller");A(this,"hooksApi");A(this,"hooksAiApi");A(this,"hooksOutOfTurnAiApi");A(this,"needCheckpoint");A(this,"checkpointHandler");A(this,"cutsceneChoiceHandler");this.multicaster=e,this.puzName=t,this.roomId=s,this.allSpecs=a,this.gameSpec=this.allSpecs[1],this.getCardUnlocks=n,this.cardsDB=o,this.effectsDB=l,this.countersDB=i,this.keyframes=c;for(const y of Object.keys(this.effectsDB))if(this.cardsDB[y]===void 0)throw new Error(`card ${y} not found in cards database -- perhaps the card names in the deck sheet and code got out of sync, or a card name was misspelled.`);const v=S??(()=>{const y=dn(this.puzName,this.gameSpec);for(const[N,C]of Object.entries(u)){const O=N;y[O].teamData=C}return y.devKnobs=E,y.engineOnly.deckSelections=f,y})();this.gameState=v,this.inspector=new mn(this.gameSpec,this.allSpecs,this.cardsDB,this.effectsDB,this.gameState);const _=new hn(this.gameSpec,this.allSpecs,v);this.multicaster.setApplyUpdateFunc(y=>{_.applyUpdate(y)}),this.controller=new Bi(this.multicaster),this.hooksApi=new pn(this),this.hooksAiApi=new gn(this),this.hooksOutOfTurnAiApi=new En(this.hooksAiApi),this.needCheckpoint=[],this.checkpointHandler=g,this.cutsceneChoiceHandler=k}init(){for(const e of this.allSpecs)e.afterInitEngine&&e.afterInitEngine(this.makeContext());if(this.startNewGame(),!this.inspector.isGameActive())throw new Error("expect game to still be active after starting")}makeContext(){return{inspector:this.inspector,engine:this.hooksApi,ai:this.hooksOutOfTurnAiApi}}makeAIContext(){return{...this.makeContext(),ai:this.hooksAiApi}}getEffects(e){const t=this.effectsDB[this.inspector.getCardName(e)];return t||{}}getEngineOnly(){const e=this.gameState.engineOnly;if(e===void 0)throw new Error("engine should have access to engine-only state");return e}getWinner(){const e=t=>!!(!(this.gameSpec.disableNoBasesLossCondition??!1)&&!(t===h.P1&&(this.gameSpec.disableP1NoBasesLossCondition??!1))&&!(t===h.P2&&(this.gameSpec.disableP2NoBasesLossCondition??!1))&&this.inspector.getBases(t).length===0||this.gameSpec.extraLoseChecks&&this.gameSpec.extraLoseChecks(t,this.makeContext()));return e(h.P2)?h.P1:e(h.P1)?h.P2:null}getIsSolved(e,t){return!(!this.inspector.hasAI()||e!==h.P1||!this.gameSpec.disableBattleWonSolvedCondition&&t!==e||this.gameSpec.extraSolveChecks&&!this.gameSpec.extraSolveChecks(e,t,this.makeContext()))}cardToPermanent(e,t,s){return{id:(this.getEngineOnly().nextPermanentId++).toString(),card:e,damage:0,counters:[],ready:this.inspector.isAlwaysReady(),owner:t,slot:s}}drawCard(e){const{topCard:t,nextTopCard:s}=this.inspector.getTopCardsInDrawPile(e);t!==null&&this.controller.drawCard(e,t,`${this.getEngineOnly().nextHandCardId++}`,s===null?void 0:s)}addCardToHand(e,t){this.controller.drawCard(e,t,`${this.getEngineOnly().nextHandCardId++}`,void 0,!1)}removeCardIndex(e,t){const s=this.inspector.getDrawPile(e);this.controller.removeFromDrawPile(e,t,t===s.length-1&&s.length>1&&this.inspector.doesPlayerHaveMastery(e,Gs)?s[s.length-2]:void 0)}startNewGame(){this.controller.broadcastAndApply({type:W.RESET});const e=this.inspector.getDevKnobs(),t=e.noShuffle!==void 0&&e.noShuffle,s=n=>{for(let o=n.length-1;o>=1;o--){const l=Math.floor(Math.random()*(o+1));[n[l],n[o]]=[n[o],n[l]]}};for(const n of[h.P1,h.P2]){const{deckCardList:o,priorityCard:l}=(()=>{const f=this.inspector.getDeckOverride(n);if(f!==null)return{deckCardList:[...f]};if(this.inspector.isAllCardsAvailable())return{deckCardList:[]};const g=this.getEngineOnly().deckSelections[n];if(g===void 0){if(this.inspector.isNoDeckAllowed())return{deckCardList:[]};throw new Error(`expect deck to be defined for ${n}`)}const{deck:k}=g;return{deckCardList:An(k),priorityCard:k.priorityCard}})(),c=this.inspector.doesPlayerHaveMastery(n,Tn)?l:void 0,u=c===void 0?-1:o.indexOf(c);if(u!==-1&&o.splice(u,1),t||s(o),u!==-1){if(c===void 0)throw new Error("expect there to be a priority card if we removed one");o.push(c)}this.controller.setDrawPile(n,o.map(f=>({name:f})))}for(const n of this.allSpecs)n.beforeNewGame&&n.beforeNewGame(this.makeContext());const a=this.inspector.getNumColumns();this.inspector.getNumRows();for(const n of[h.P1,h.P2]){const o=this.inspector.getDefaultBases(n);if(o.length>a)throw new Error("invalid number of bases (no more than one per column)");const l=this.inspector.getBasePositions(n,o.length);if(l.length!==o.length)throw new Error("the number of base positions specified does not equal the number of bases");for(let i=0;i<o.length;i++){const c={row:this.inspector.getPlayerRowIndex(0,n),column:l[i]};this.spawnPermanent(o[i],n,c)}}for(const n of[h.P1,h.P2])for(let o=0;o<Gi;o++)this.drawCard(n);this.getEngineOnly().hasGameStarted=!0,this.startTurn(h.P2)}endGame(e,t,s,a){var l,i;this.controller.broadcastAndApply({type:W.SET_GAME_RESULT,winner:e,loseReason:t,solves:s,cardUnlocks:a,endTime:new Date().getTime()}),this.controller.advancePhase(lr.ENDED),this.gameSpec.afterGameEnd&&this.gameSpec.afterGameEnd(e,s,this.makeContext());const n=[],o=[];for(const c of[h.P1,h.P2]){if(s[c]??!1){const u=(l=this.gameState[c].teamData)==null?void 0:l.teamId;if(u===void 0)throw new Error("if puzzle is solved, expect a team to exist");n.push(u)}for(const u of a[c]??[]){const f=(i=this.gameState[c].teamData)==null?void 0:i.teamId;if(f===void 0)throw new Error("if there are cards unlocked, expect a team to exist");o.push({teamId:f,cardName:u})}}this.controller.notifySystem({type:W.SYSTEM_ROOM_COMPLETE,solvedTeamIds:n,cardUnlocks:o})}destroyPermanent(e,t){if(!(e!==t&&this.inspector.doesPermanentHaveCounterType(e,I.INVULNERABLE))){this.handlePermanentEvent({type:R.BEFORE_DESTROYED,permanent:e,attacker:t,ctx:this.makeContext()}),t&&this.handlePermanentEvent({type:R.BEFORE_DESTROY_UNIT,permanent:t,defender:e,ctx:this.makeContext()}),this.controller.removePermanent(e.id),t&&(this.controller.broadcastAndApply({type:W.MODIFY_STATS,player:t.owner,diffDestroys:1}),this.handlePermanentEvent({type:R.AFTER_DESTROY_UNIT,permanent:t,defender:e,ctx:this.makeContext()})),this.handlePermanentEvent({type:R.AFTER_DESTROYED,permanent:e,attacker:t,ctx:this.makeContext()});for(const s of this.inspector.getAllPermanents())s.id!==e.id&&this.handlePermanentEvent({type:R.OTHER_UNIT_DESTROYED,permanent:s,destroyedPermanent:e,attacker:t,ctx:this.makeContext()})}}damagePermanent(e,t,s,a){const n=this.getEffects(e),o=n.adjustDamageReceived,l=n.insteadOfDamaged;o&&(t=o(e,t,s,this.makeContext()));for(const k of this.allSpecs)k.adjustDamageReceived&&(t=k.adjustDamageReceived(e,t,s,this.makeContext()));if(t<=0||!(a??!1)&&this.inspector.doesPermanentHaveCounterType(e,I.INVULNERABLE)||l&&!l(e,t,s,this.makeContext()))return;if(this.inspector.doesPermanentHaveCounterType(e,I.DIVINE_SHIELD)){this.removeCounterType(e,I.DIVINE_SHIELD);return}const i=this.inspector.getUndamagedShell(e),c=this.inspector.getHealth(e)+i,u=Math.min(t,c),f=Math.min(u,i);f>0&&this.controller.addCounter(e.id,{type:I.SHELL_DAMAGE_TAKEN,val:f,explanation:`shell received ${f} damage`,expiry:R.START_TURN});const g=u-f;if(g>0){const k=this.inspector.doesPermanentHaveCounterType(e,I.CANNOT_BE_DESTROYED),E=this.inspector.getHealth(e);this.controller.damagePermanent(e.id,k?Math.min(g,E-1):g,s==null?void 0:s.id)}if(s&&(this.controller.broadcastAndApply({type:W.MODIFY_STATS,player:s.owner,diffDamageDealt:u}),this.handlePermanentEvent({type:R.AFTER_DEAL_DAMAGE,permanent:s,damage:u,defender:e,ctx:this.makeContext()})),this.handlePermanentEvent({type:R.AFTER_DAMAGED,permanent:e,damage:u,attacker:s,ctx:this.makeContext()}),!!this.inspector.doesPermanentExist(e)){if(this.inspector.getHealth(e)<=0){this.destroyPermanent(e,s);return}this.controller.addCounter(e.id,{type:I.DAMAGE_TAKEN,val:u,expiry:R.START_TURN})}}removeDamageFromPermanent(e,t){const s=Math.min(e.damage,t);this.controller.damagePermanent(e.id,-s),this.handlePermanentEvent({type:R.AFTER_DAMAGE_REMOVED,permanent:e,damage:s,ctx:this.makeContext()})}mergeValueCounter(e,t,s,a,n){if(this.inspector.doesPermanentExist(e)){for(const[o,l]of e.counters.entries())if(l.type===t&&l.expiry===n){this.controller.setCounter(e.id,o,l.val+s,a&&a(l.val+s));return}this.controller.addCounter(e.id,{type:t,val:s,explanation:a&&a(s),expiry:n})}}adjustPermanentStats(e,t,s){t!==0&&this.mergeValueCounter(e,I.POWER_ADJUSTMENT,t),s!==0&&this.mergeValueCounter(e,I.MAX_HEALTH_ADJUSTMENT,s),this.handlePermanentEvent({type:R.AFTER_STATS_CHANGED,permanent:e,powerDelta:t,healthDelta:s,ctx:this.makeContext()})}removeCounterType(e,t){for(const[s,a]of e.counters.entries())if(a.type===t)return this.controller.removeCounter(e.id,s),!0;return!1}attack(e,t){const s=this.inspector.getPower(e);this.damagePermanent(t,s,e)}unreadyPermanentForAction(e){this.inspector.isAlwaysReady()||this.controller.unreadyPermanent(e.id)}transformPermanent(e,t){this.controller.transformPermanent(e.id,t)}handlePermanentEventWithHandlers(e,t){switch(e.type){case R.CREATED:{const s=t[R.CREATED];if(s)return s(e);break}case R.BEFORE_DESTROYED:{const s=t[R.BEFORE_DESTROYED];if(s)return s(e);break}case R.AFTER_DESTROYED:{const s=t[R.AFTER_DESTROYED];if(s)return s(e);break}case R.START_TURN:{const s=t[R.START_TURN];if(s)return s(e);break}case R.END_TURN:{const s=t[R.END_TURN];if(s)return s(e);break}case R.BEFORE_DESTROY_UNIT:{const s=t[R.BEFORE_DESTROY_UNIT];if(s)return s(e);break}case R.AFTER_DESTROY_UNIT:{const s=t[R.AFTER_DESTROY_UNIT];if(s)return s(e);break}case R.AFTER_DAMAGED:{const s=t[R.AFTER_DAMAGED];if(s)return s(e);break}case R.AFTER_DAMAGE_REMOVED:{const s=t[R.AFTER_DAMAGE_REMOVED];if(s)return s(e);break}case R.AFTER_STATS_CHANGED:{const s=t[R.AFTER_STATS_CHANGED];if(s)return s(e);break}case R.AFTER_DEAL_DAMAGE:{const s=t[R.AFTER_DEAL_DAMAGE];if(s)return s(e);break}case R.OTHER_UNIT_DESTROYED:{const s=t[R.OTHER_UNIT_DESTROYED];if(s)return s(e);break}case R.OTHER_UNIT_SPAWN:{const s=t[R.OTHER_UNIT_SPAWN];if(s)return s(e);break}default:throw new Error("unknown permanent event type")}}handlePermanentEvent(e){const{permanent:t}=e,s=this.getEffects(t).handlers;s!==void 0&&this.handlePermanentEventWithHandlers(e,s);let a=0;for(;this.inspector.doesPermanentExist(t);){const n=t.counters[a];if(n===void 0)break;const o=this.countersDB[n.type];let l=!1;if(o!==void 0&&o.handlers!==void 0){const i=this.handlePermanentEventWithHandlers({...e,counter:n,counterIndex:a},o.handlers);i&&i.expire!==void 0&&i.expire&&(l=!0)}if(n.expiry&&n.expiry===e.type&&(l=!0),l&&this.inspector.doesPermanentExist(t)){this.controller.removeCounter(t.id,a);continue}a++}}startTurn(e){this.inspector.getPermanentsOf(e).forEach(s=>{this.inspector.doesPermanentHaveCounterType(s,I.FROZEN)||s.ready||this.controller.readyPermanent(s.id)});const t=this.inspector.getDevKnobs().extraGemsPerTurn;if(t!==void 0){const s=new Array(t).fill(x.RAINBOW);this.controller.addGems(e,s),this.controller.addGems(this.inspector.getOpponentOf(e),s)}this.drawCard(e);for(const s of this.inspector.getPermanentsOf(e))this.handlePermanentEvent({type:R.START_TURN,permanent:s,ctx:this.makeContext()});if(this.gameState.turnNumber===0){const s=this.inspector.resolvePayment(e,[x.ROCK,x.ROCK]);if(s!==null)this.controller.removeGems(e,s);else if(!this.inspector.hasAI())throw new Error("only AI can be exempt from first-turn handicap")}if(this.controller.startTurn(e),this.gameSpec.hasAI&&e===h.P2){for(const s of this.allSpecs)s.aiTurn&&s.aiTurn(this.makeAIContext());this.inspector.isGameActive()&&this.endTurn(h.P2),this.inspector.isGameActive()&&this.startTurn(h.P1)}}endTurn(e){for(const t of this.inspector.getPermanentsOf(e))this.handlePermanentEvent({type:R.END_TURN,permanent:t,ctx:this.makeContext()});if(this.inspector.getPermanentsOf(e).forEach(t=>{t.ready&&this.controller.unreadyPermanent(t.id)}),this.inspector.isGemClearingDisabled()||this.controller.clearGems(e),this.inspector.isNoTurnCheck()){const t=this.inspector.getOpponentOf(e);this.controller.clearGems(t)}this.controller.endTurn(e),this.gameSpec.afterTurnEnd&&this.gameSpec.afterTurnEnd(e,this.makeContext())}applySummon(e){var c;const{player:t,handCardId:s,slot:a,cardName:n,payment:o}=e;this.controller.announceSummonPermanent(t,this.inspector.getCardDisplayName(n)),this.controller.removeGems(t,o);const l=((c=this.gameState[t].teamData)==null?void 0:c.faction)??null,i=yn(this.inspector.getCardColor(n),l);this.controller.broadcastAndApply({type:W.MODIFY_STATS,player:t,diffSummons:1,diffFactionSummons:i?1:void 0}),this.spawnPermanent(n,t,a,s)}spawnPermanent(e,t,s,a){const n=this.cardToPermanent({name:e},t,s);this.controller.createPermanent(n,a),this.handlePermanentEvent({type:R.CREATED,permanent:n,ctx:this.makeContext()});for(const o of this.inspector.getAllPermanents())o.id!==n.id&&this.handlePermanentEvent({type:R.OTHER_UNIT_SPAWN,permanent:o,spawnedPermanent:n,ctx:this.makeContext()});for(const o of this.allSpecs)o.afterSummon&&o.afterSummon(n,this.makeContext())}applyRemove(e){const{permanent:t}=e;this.controller.removePermanent(t.id)}applyMove(e){const{permanent:t,slot:s}=e,a=this.inspector.getCardData(t);this.controller.announceMove(t.owner,a.displayName),this.unreadyPermanentForAction(t),this.controller.move(t.id,s)}applyAttack(e){const{attacker:t,defender:s,payment:a}=e,n=this.inspector.getCardData(t),o=this.inspector.getCardData(s);this.controller.announceAttackCard(n.displayName,this.inspector.getPower(t),o.displayName),this.unreadyPermanentForAction(t),this.controller.removeGems(t.owner,a),this.attack(t,s)}applyCreateGems(e){const{permanent:t,gemColors:s}=e;this.unreadyPermanentForAction(t),this.controller.addGems(t.owner,s)}applyDraw(e){const{player:t,payment:s}=e;this.controller.removeGems(t,s),this.drawCard(t)}applyActivateAbility(e){const{permanent:t,abilityType:s,payment:a}=e;switch(s){case ge.SPECIAL:{this.unreadyPermanentForAction(t);break}}this.controller.removeGems(t.owner,a);const n=this.getEffects(t),o=(()=>{switch(s){case ge.FLEX:return n.onRepeatable;case ge.SPECIAL:return n.onSpecial}})();o&&o(e,this.makeContext())}applyEndTurn(e){const{player:t}=e;if(this.gameSpec.hasAI&&t!==h.P1)throw new Error("validations should only allow P1 steps for AI games");this.endTurn(t),this.startTurn(this.inspector.getOpponentOf(t))}applyAdvanceKeyframe(e){const{keyframe:t,dialogOptionIndex:s}=e,{dialogOptions:a}=t;a!==void 0&&a.length>1&&this.cutsceneChoiceHandler(this,t.id,s??0);const n=o=>o.endGame??!1?(this.endGame(h.P1,De.NORMAL,{[h.P1]:!0},{}),!0):o.endGameUnsolved??!1?(this.endGame(h.P2,De.NORMAL,{},{}),!0):!1;if(!n(t)){if(!t.endCutscene){const{nextIds:o,dialogOptions:l}=t,i=this.keyframes,c=g=>i.find(({id:k})=>k===g),u=g=>i.findIndex(({id:k})=>k===g),f=(()=>{if(o===void 0){const E=u(t.id);if(E===-1)throw new Error(`could not find index of current keyframe ${t.id}`);return i[E+1]}const g=(()=>{if(o.length===1)return o[0];if(s===void 0)return null;const E=o[s];return E===void 0?null:E})();if(g===null)return null;const k=c(g);if(k===void 0)throw new Error(`could not find next keyframe ${g}`);return k})();if(f!==null)return this.controller.setKeyframe(f),!(f.blocking??!1)&&n(f),void 0}this.controller.clearKeyframe()}}resolve(e,t){const{resolved:s,isValid:a}=this.inspector.resolveAndValidate(e,t);return a?s:null}execute(e){for(const t of this.allSpecs)if(t.overrideStep&&t.overrideStep(e,this.makeContext()))return;switch(e.type){case V.SUMMON:{this.applySummon(e);break}case V.ATTACK:{this.applyAttack(e);break}case V.CREATE_GEMS:{this.applyCreateGems(e);break}case V.MOVE:{this.applyMove(e);break}case V.DRAW:{this.applyDraw(e);break}case V.ACTIVATE_ABILITY:{this.applyActivateAbility(e);break}case V.END_TURN:{this.applyEndTurn(e);break}case V.ADVANCE_KEYFRAME:{this.applyAdvanceKeyframe(e);break}case V.REMOVE:{this.applyRemove(e);break}case V.CREATE_CHECKPOINT:{this.needCheckpoint.push(e.slot);break}default:this.gameSpec.applyStep&&this.gameSpec.applyStep(e,this.makeContext())}}tryStep(e,t){if(!this.inspector.isGameActive())return!1;if(this.inspector.isTurnPending(h.P1)&&(this.inspector.getDevKnobs().instasolve??!1))return this.endGame(h.P1,De.NORMAL,{[h.P1]:!0},{}),!0;const s=this.resolve(e,t);if(s===null)return!1;let a=!1;for(const l of this.allSpecs)l.beforeStep&&(l.beforeStep(e,this.makeContext())||(a=!0));a||this.execute(s);for(const l of this.allSpecs)l.afterStep&&l.afterStep(s,this.makeContext());const n=Sn(s);if(n!==null&&!(this.inspector.hasAI()&&n===h.P2)&&this.controller.broadcastAndApply({type:W.SET_STEP_NUMBER,player:n,stepNumber:this.gameState[n].stepNumber+1}),!this.inspector.isGameActive())return!0;const o=this.getWinner();if(o){const l={},i={};for(const c of[h.P1,h.P2]){if(!this.getIsSolved(c,o))continue;l[c]=!0;const u=this.getCardUnlocks(c);u.length>0&&(i[c]=u)}return this.endGame(o,De.NORMAL,l,i),!0}return(this.inspector.getDevKnobs().checkpointAfterEveryStep||this.inspector.areCheckpointsAllowed()&&s.type==V.END_TURN)&&this.needCheckpoint.push(0),this.needCheckpoint.length&&(this.checkpointHandler(this,this.needCheckpoint),this.needCheckpoint.length=0),!0}getPublicPlayerState(e,t){const s=t[e],{teamData:a,stepNumber:n,drawPile:o,prevTurnsTime:l,startTurnTime:i,stats:c}=s;return{teamData:a,stepNumber:n,hand:s.hand.map(u=>({...u,card:{...u.card,name:void 0}})),gems:s.gems,drawPileSize:o.length,prevTurnsTime:l,startTurnTime:i,stats:c}}getClientPlayerState(e,t){const s=t[e],{drawPile:a}=s,{topCard:n}=this.inspector.getTopCardsInDrawPile(e);return{...s,drawPile:void 0,discardPile:void 0,drawPileSize:a.length,topCard:this.inspector.doesPlayerHaveMastery(e,Gs)?n:void 0}}getClientGameStateForRole(e,t){switch(e){case ae.GOD:return{...t};case ae.P1:{const{engineOnly:s,...a}={...t,[h.P1]:this.getClientPlayerState(h.P1,t),[h.P2]:this.getPublicPlayerState(h.P2,t)};return a}case ae.P2:{const{engineOnly:s,...a}={...t,[h.P1]:this.getPublicPlayerState(h.P1,t),[h.P2]:this.getClientPlayerState(h.P2,t)};return a}}}respOverrideState(e){this.controller.respOverrideState(e.id,this.roomId,this.getClientGameStateForRole(e.role,this.gameState))}broadcastOverrideState(e){this.controller.overrideState(this.roomId,e,this.getClientGameStateForRole(ae.P1,e),this.getClientGameStateForRole(ae.P2,e))}acceptMember(e){this.multicaster.enableMember(e),this.respOverrideState(e)}applySystemStep(e){switch(e.type){case V.SYSTEM_JOIN:{const{teamId:t,roomMember:s,role:a}=e;this.acceptMember(s);break}case V.SYSTEM_RESIGN:{if(!this.inspector.isGameActive())break;this.endGame(this.inspector.getOpponentOf(e.player),De.RESIGN,{},{});break}case V.SYSTEM_TIME_OUT:{if(!this.inspector.isGameActive())break;this.endGame(this.inspector.getOpponentOf(e.player),De.TIME,{},{});break}default:throw new Error("Invalid system step type.")}}applyStep(e,t){if(this.needCheckpoint.length)throw new Error("needCheckpoint should only be used during the processing of a step, and consumed when the step is done");this.tryStep(t,e.role)?this.controller.respSuccess(e.id):this.controller.respInvalidStep(e.id)}aiTryStep(e){return this.tryStep(e,ae.GOD)}}var Ce=(r=>(r.SYSTEM="system",r.ROOM_MEMBER_ID="room_member_id",r.BROADCAST="broadcast",r.ROLE="role",r.ROLE_FILTER="role_filter",r))(Ce||{});class zi{constructor(){A(this,"updates");A(this,"applyUpdateFunc");this.updates=[]}setApplyUpdateFunc(e){this.applyUpdateFunc=e}applyUpdate(e){if(this.applyUpdateFunc===void 0)throw new Error("apply update func not initialized");this.applyUpdateFunc(e)}notifySystem(e){this.updates.push({type:"system",upd:e})}send(e,t){this.updates.push({type:"room_member_id",upd:t,roomMemberId:e})}broadcastAndApply(e){this.updates.push({type:"broadcast",upd:e}),this.applyUpdate(e)}broadcastAndApplyAsymmetric(e,t,s){this.applyUpdate(t),this.updates.push({type:"role_filter",upd:t,pred:a=>xs(a,e)}),s!=null&&this.updates.push({type:"role_filter",upd:s,pred:a=>!xs(a,e)})}broadcastPerRoleAndApply(e){const t=e[ae.GOD];if(t===void 0)throw new Error("full update not provided");this.applyUpdate(t);for(const[s,a]of Object.entries(e))this.updates.push({type:"role",upd:a,role:s})}readOutUpdates(){const e=this.updates;return this.updates=[],e}enableMember(e){this.notifySystem({type:W.SYSTEM_ENABLE_MEMBER,roomMember:e})}}class Hi{constructor(e){A(this,"server");A(this,"seenTeamIds");A(this,"syncLoopController");this.server=e,this.seenTeamIds=new Set,this.syncLoopController=new xe(async()=>await this.runSyncAsync())}async runSyncAsync(){const e={};for(const s of this.server.teamControllers.values()){if(this.seenTeamIds.has(s.teamId))continue;if(Object.keys(e).length>=this.server.config.miscTeamStateTeamsSyncLimit)break;const{teamId:a,slowSyncTracking:{syncController:n}}=s,o=n.startSync();o!==null&&(this.seenTeamIds.add(a),e[a]=o)}if(Object.keys(e).length===0)return this.seenTeamIds.clear(),!0;this.server.recordSlowSyncPacket();const t=await(async()=>{try{return await this.server.syncDataThrottledAsync({teamState:e}),!0}catch(s){return console.error(s),!1}})();for(const[s,a]of Object.entries(e)){const n=this.server.getTeamController(s),{syncController:o}=n.slowSyncTracking;o.endSync(t?a:null)}return!1}}class Fi{constructor(e){A(this,"server");A(this,"seenTeamIds");A(this,"syncLoopController");this.server=e,this.seenTeamIds=new Set,this.syncLoopController=new xe(async()=>await this.runSyncAsync())}async runSyncAsync(){const e={};for(const s of this.server.teamControllers.values()){if(this.seenTeamIds.has(s.teamId))continue;if(Object.keys(e).length>=this.server.config.decksAndMasteryTreesTeamsSyncLimit)break;const{teamId:a,deckControllers:n,masteryTreeController:o}=s,l={};for(const[u,f]of n.entries()){if(f===null)continue;const{deck:g,slowSyncTracking:{tracker:k}}=f;k.snapshot()&&(l.decks??(l.decks={}),l.decks[u]={teamId:a,slot:u,deck:g})}const{masteryTree:i,slowSyncTracking:{tracker:c}}=o;c.snapshot()&&(l.masteryTree=i),this.seenTeamIds.add(a),Object.keys(l).length!==0&&(e[a]=l)}if(Object.keys(e).length===0)return this.seenTeamIds.clear(),!0;this.server.recordSlowSyncPacket();const t=await(async()=>{try{return await this.server.syncDataThrottledAsync({teamState:e}),!0}catch(s){return console.error(s),!1}})();for(const[s,a]of Object.entries(e)){const n=this.server.getTeamController(s);for(const{slot:o,deck:l}of Object.values(a.decks??{})){const{tracker:i}=n.getDeckController(o).slowSyncTracking;i.handleSyncResult(t)}if(a.masteryTree!==void 0){const{tracker:o}=n.masteryTreeController.slowSyncTracking;o.handleSyncResult(t)}}return!1}}class Ki{constructor(e){A(this,"server");A(this,"seenTeamIds");A(this,"syncLoopController");this.server=e,this.seenTeamIds=new Set,this.syncLoopController=new xe(async()=>await this.runSyncAsync())}async runSyncAsync(){const e={};let t=0;for(const a of this.server.teamControllers.values()){if(this.seenTeamIds.has(a.teamId))continue;if(t>=this.server.config.checkpointsSyncLimit)break;const{teamId:n,battleControllers:o}=a,l={};for(const[i,c]of o.entries()){const{checkpoints:u,checkpointsSyncTracker:f}=c;f.snapshot()&&(l.checkpoints??(l.checkpoints={}),l.checkpoints[i]=u,t+=Object.keys(u).length)}this.seenTeamIds.add(n),Object.keys(l).length!==0&&(e[n]=l)}if(Object.keys(e).length===0)return this.seenTeamIds.clear(),!0;this.server.recordSlowSyncPacket();const s=await(async()=>{try{return await this.server.syncDataThrottledAsync({teamState:e}),!0}catch(a){return console.error(a),!1}})();for(const[a,n]of Object.entries(e)){const o=this.server.getTeamController(a);for(const[l,i]of Object.entries(n.checkpoints??{})){const{checkpointsSyncTracker:c}=o.getBattleController(l);c.handleSyncResult(s)}}return!1}}class Yi{constructor(e){A(this,"server");A(this,"seenRoomIds");A(this,"seenTeamIds");A(this,"syncLoopController");this.server=e,this.seenRoomIds=new Set,this.seenTeamIds=new Set,this.syncLoopController=new xe(async()=>await this.runSyncAsync())}async runSyncAsync(){const e={},t=[];for(const n of this.server.teamControllers.values()){const{teamId:o,battleControllers:l}=n;if(this.seenTeamIds.has(o))continue;if(Object.keys(e).length>=this.server.config.activeRoomsSyncLimit)break;let i=!1;for(const[c,u]of l){if(Object.keys(e).length>=this.server.config.activeRoomsSyncLimit){i=!0;break}const f=u.getActiveRoom();if(f===null||!u.isRoomActive()||u.getPlayer()!==h.P1)continue;const{engine:g,roomId:k,hostPuzName:E,createTime:S,tracker:v}=f;if(!this.seenRoomIds.has(k)&&v.snapshot()){const{puzName:_,gameState:y}=g,N=y[h.P1].teamData,C=y[h.P2].teamData,O=N==null?void 0:N.teamId,F=C==null?void 0:C.teamId;this.seenRoomIds.add(k),e[k]={roomId:k,puzName:_,hostPuzName:E,createTime:S,p1TeamId:O,p2TeamId:F,p1Faction:(N==null?void 0:N.faction)??void 0,p2Faction:(C==null?void 0:C.faction)??void 0,savedRoom:{gameState:y}},t.push(v)}}i||this.seenTeamIds.add(o)}if(Object.keys(e).length===0)return this.seenRoomIds.clear(),this.seenTeamIds.clear(),!0;const{lockedRoomIds:s}=this.server.gameRoomsController.slowSyncTracking.completedRoomsSyncController;for(const n of Object.keys(e))s.add(n);this.server.recordSlowSyncPacket();const a=await(async()=>{try{return await this.server.syncDataThrottledAsync({rooms:e}),!0}catch(n){return console.error(n),!1}})();for(const n of Object.keys(e))s.delete(n);s.size!==0&&console.error("locked rooms found in active rooms sync not owned by current sync loop");for(const n of t)n.handleSyncResult(a);return!1}}class Wi{constructor(e){A(this,"server");A(this,"roomsToSync");A(this,"lockedRoomIds");A(this,"seenRoomIds");A(this,"syncLoopController");this.server=e,this.roomsToSync=[],this.lockedRoomIds=new Set,this.seenRoomIds=new Set,this.syncLoopController=new xe(async()=>await this.runSyncAsync())}addRoom(e){this.roomsToSync.push(e)}async runSyncAsync(){const e={};for(const s of this.roomsToSync){const{roomId:a}=s;if(Object.keys(e).length>=this.server.config.completedRoomsSyncLimit)break;this.lockedRoomIds.has(a)||this.seenRoomIds.has(a)||(this.seenRoomIds.add(a),e[a]=s)}return Object.keys(e).length===0?(this.seenRoomIds.clear(),!0):(this.server.recordSlowSyncPacket(),await(async()=>{try{return await this.server.syncDataThrottledAsync({rooms:e}),!0}catch(s){return console.error(s),!1}})()&&(this.roomsToSync=this.roomsToSync.filter(s=>e[s.roomId]===void 0)),!1)}}class Vi{constructor(e){A(this,"server");A(this,"rooms");A(this,"activeRoomIds");A(this,"slowSyncTracking");A(this,"puzDataCache");this.server=e,this.rooms=new Map,this.activeRoomIds=new Map,this.slowSyncTracking={activeRoomsSyncController:new Yi(this.server),completedRoomsSyncController:new Wi(this.server)},this.puzDataCache={}}getPuzData(e){const t=this.puzDataCache[e];if(t!==void 0)return t;const s=[dr,...e.split(",")].map(i=>Li(i)),a=Jn(s,this.server.cardsDB),n=Qn(s,a),o=new wn(s,this.server.cardsDB,a),l={allSpecs:s,effectsDB:a,countersDB:n,inspector:o};return this.puzDataCache[e]=l,l}getInspector(e){return this.getPuzData(e).inspector}createRoomWithTeamData(e,t,s,a,n,o,l){l??(l=this.server.genGameRoomId());const i=new zi,{allSpecs:c,effectsDB:u,countersDB:f}=this.getPuzData(e),g=new xi(i,e,l,c,E=>[],this.server.cardsDB,u,f,this.server.keyframes,s,a,(E,S)=>{for(const{teamId:v}of Object.values(s))this.server.getBattleController(v,t).makeCheckpoint(E,S)},(E,S,v)=>{for(const{teamId:_}of Object.values(s))this.server.getTeamController(_).mergeFastSyncPacket({cutsceneChoices:[{keyframeId:S,dialogOptionIndex:v}]})},n,o);o===void 0&&g.init();const k={engine:g,roomId:l,hostPuzName:t,createTime:new Date().getTime(),members:new Map,multicaster:i,tracker:new ze(this.server.config,de.ROOM,E=>{const S={teams:{}};for(const{teamId:v}of Object.values(s)){const _=this.getActiveRoom(v,t);_===null||_.roomId!==l||!this.server.getBattleController(v,t).isRoomActive()||(S.teams[v]={rooms:{[t]:E}})}this.server.dirtyStateTracker.update(S)})};return this.server.prepareRoom(k),this.rooms.set(l,{room:k,refcount:0}),k}createRoomFromGameState(e,t,s,a){const n=Object.fromEntries([h.P1,h.P2].flatMap(o=>{const l=s[o].teamData;return l===void 0?[]:[[o,l]]}));return this.server.gameRoomsController.createRoomWithTeamData(e,t,n,s.engineOnly.deckSelections,s.devKnobs,s,a)}createRoom(e,t,s,a,n){const o=Object.fromEntries(Object.entries(s).map(([l,i])=>{const c=this.server.getTeamController(i);return[l,c.makeTeamDataForBattle(e)]}));return this.createRoomWithTeamData(e,t,o,a,n)}getActiveRoom(e,t){const s=this.activeRoomIds.get(e);if(s===void 0)return null;const a=s.get(t);if(a===void 0)return null;const n=this.rooms.get(a);if(n===void 0)throw new Error("expect active room to be available");return n.room}setActiveRoom(e,t,s){const a=this.rooms.get(s);if(a===void 0)throw new Error("expect room to exist if setting active");a.refcount++;const n=(()=>{const l=this.activeRoomIds.get(e);if(l!==void 0)return l;const i=new Map;return this.activeRoomIds.set(e,i),i})(),o=n.get(t);if(o!==void 0){const l=this.rooms.get(o);if(l===void 0)throw new Error("expect prev room to exist if unsetting");l.refcount--,l.refcount<=0&&this.rooms.delete(o)}n.set(t,s)}getNumRoomMembers(e,t){const s=this.getActiveRoom(e,t);return s===null?0:[...s.members.values()].filter(a=>a.conn.teamId===e).length}handleRoomMembersUpdate(e,t){this.server.bigBoardStateTracker.updateTeam(e,{unlocks:{[t]:{numMembers:this.getNumRoomMembers(e,t)}}})}async handleRoomCompleteAsync(e,t,s){const{roomId:a,hostPuzName:n,engine:o,createTime:l}=e,{inspector:i}=o,{puzName:c,gameState:u}=e.engine,f=bn(c),g=f===$e,k=new Date().getTime(),E=u[h.P1].teamData,S=u[h.P2].teamData,v=E==null?void 0:E.teamId,_=S==null?void 0:S.teamId,y=new Set([...v===void 0?[]:[v],..._===void 0?[]:[_]]),N=Array.from(y,$=>this.server.getTeamController($)),C=t.length>0,O=i.getSpeedrunTime(),F=C?[h.P1]:[],K={};for(const $ of[h.P1,h.P2]){let Z=i.calcFactionScore($,g,C);g||(Z>u.engineOnly.gainedScore?(Z-=u.engineOnly.gainedScore,u.engineOnly.gainedScore+=Z):Z=0),Z!==0&&(K[$]=Z)}const{winner:q,loseReason:Y}=u;if(q===void 0||Y===void 0)throw new Error("winner/loseReason should be defined on game end");const te={roomId:a,puzName:f,hostPuzName:n,createTime:l,p1TeamId:v,p2TeamId:_,p1Faction:(E==null?void 0:E.faction)??void 0,p2Faction:(S==null?void 0:S.faction)??void 0,savedRoom:{gameState:u},gameEndInfo:{totalTime:O,isSolved:C,winner:q,loseReason:Y,p1FactionScoreContribution:K[h.P1],p2FactionScoreContribution:K[h.P2]}};if(e.tracker.revNumber>0||!i.hasAI()){const $={rooms:{[n]:{type:Ve.SYNCED,lastSyncTime:Date.now()}}};this.server.dirtyStateTracker.update({teams:Object.fromEntries([...y].map(Z=>[Z,$]))}),this.slowSyncTracking,this.slowSyncTracking.completedRoomsSyncController.addRoom(te)}await Promise.all(Array.from(N,$=>$.handleTeamUpdatesAsync({answerSubmissionsToAdd:t.filter(Z=>Z===$.teamId).map(Z=>es(Z,f,k)),cardUnlocksToAdd:s.filter(({teamId:Z})=>Z===$.teamId).map(({teamId:Z,cardName:fe})=>({teamId:Z,puzName:f,cardName:fe,timestamp:k}))})));for(const $ of F){const{teamData:Z}=u[$];if(Z===void 0)throw new Error("expect speedrunning players to belong to a team");const{teamId:fe,enabledMasteries:Ee}=Z;this.server.getTeamController(fe).handleNewSpeedrunTime(f,O)}for(const[$,Z]of Object.entries(K)){const fe=$,{teamData:Ee}=u[fe];if(Ee===void 0)throw new Error("expect scored players to belong to teams");const{teamId:Pe,faction:Oe,enabledMasteries:ye}=Ee,rt=this.server.getTeamController(Pe);(ye[ur]??!1)&&Oe!==null&&rt.handleChangeFactionScoreContributions({[Oe]:Z})}for(const $ of N)$.getBattleController(n).handleRoomComplete(a,u.engineOnly.gainedScore)}async triggerSlowSyncAsync(){await this.slowSyncTracking.completedRoomsSyncController.syncLoopController.triggerLoopAsync(),await this.slowSyncTracking.activeRoomsSyncController.syncLoopController.triggerLoopAsync()}}class ji{constructor(e){A(this,"server");A(this,"unlockCounts");A(this,"solveCounts");A(this,"factionScores");A(this,"factionHistory");A(this,"factionHistoryUnsynced");A(this,"speedrunLeaderboards");A(this,"solveTimeLeaderboards");this.server=e,this.unlockCounts=new Map(Array.from(this.server.puzzlesDB.battleGroups.keys(),t=>[t,0])),this.solveCounts=new Map(Array.from(this.server.puzzlesDB.battleGroups.keys(),t=>[t,0])),this.factionScores=kn(),this.factionHistory={},this.factionHistoryUnsynced={},this.server.puzzlesDB,this.speedrunLeaderboards={},this.solveTimeLeaderboards={}}getSpeedrunLeaderboard(e){var t;return(t=this.speedrunLeaderboards)[e]??(t[e]=new zs(s=>s.teamId,(s,a)=>s.speedrunTime-a.speedrunTime)),this.speedrunLeaderboards[e]}getSolveTimeLeaderboard(e){var t;return(t=this.solveTimeLeaderboards)[e]??(t[e]=new zs(s=>s.teamId,(s,a)=>s.solveTime-a.solveTime)),this.solveTimeLeaderboards[e]}getPuzzleStats(e){const t=this.unlockCounts.get(e),s=this.solveCounts.get(e);if(t===void 0||s===void 0)throw new Error("expect stats to be defined");return{unlockCount:t,solveCount:s}}getSpeedrunRank(e,t){if(this.server.getTeamController(e).speedrunTimes.get(t)===void 0)return null;const{sortedList:a}=this.getSpeedrunLeaderboard(t),n=a.findIndex(o=>o.teamId===e);return n===void 0?(console.error("expect team to exist in leaderboard"),null):n}getSpeedrunLeaderboardSummary(e){const{sortedList:t}=this.getSpeedrunLeaderboard(e);return t.slice(0,it).map(({teamId:s,speedrunTime:a})=>({teamData:this.server.getTeamController(s).getTeamSummaryState(),speedrunTime:a}))}handleTeamUpdates(e,t){const{factionScoreChanges:s,updateFactionHistory:a,solvesToDelete:n,unlocksToDelete:o,solvesToAdd:l,unlocksToAdd:i,solveTimes:c,speedrunTimes:u,forceIfHidden:f=!1}=t,g=this.server.getTeamController(e).isHidden;if(!f&&g)return;if(s!==void 0){const S=Math.floor(Date.now()/1e3/60/60),v={};for(const[y,N]of Object.entries(s??{})){const C=y;if(this.factionScores[C]+=N,a&&N){const O=`${y}.${S}`,F=(this.factionHistory[O]??0)+N;this.factionHistory[O]=F,this.factionHistoryUnsynced[O]=F,v[O]=F}}const _=Object.fromEntries(Object.entries(this.factionScores).filter(([y,N])=>s[y]??!1));for(const y of this.server.teamControllers.values())y.broadcastTeamGlobalUpdate({type:z.TEAM_UPDATE_STATE,factionScores:_});Object.keys(v).length&&this.server.broadcastGlobalUpdate({type:H.FACTION_HISTORY},{type:z.FACTION_HISTORY_UPDATE_STATE,factionHistory:v})}for(const S of n??[]){const v=this.solveCounts.get(S);v!==void 0&&this.solveCounts.set(S,v-1)}for(const S of l??[]){const v=this.solveCounts.get(S);v!==void 0&&this.solveCounts.set(S,v+1)}for(const S of o??[]){const v=this.unlockCounts.get(S);v!==void 0&&this.unlockCounts.set(S,v-1)}for(const S of i??[]){const v=this.unlockCounts.get(S);v!==void 0&&this.unlockCounts.set(S,v+1)}const k=new Set([...i??[],...o??[],...l??[],...n??[]]),E=Object.fromEntries([...k].flatMap(S=>this.server.puzzlesDB.battleGroups.has(S)?[[S,this.getPuzzleStats(S)]]:[]));for(const S of this.server.teamControllers.values())S.masteryTreeController.getEnabledMasteries().has(ts)&&S.broadcastTeamGlobalUpdate({type:z.TEAM_UPDATE_PUZZLE_STATS,stats:Object.fromEntries(Object.entries(E).filter(([v,_])=>S.unlockTimes.has(v)))});for(const[S,v]of Object.entries(c??{})){const _=this.getSolveTimeLeaderboard(S);if(v===null){_.remove(e);continue}this.addSolveTimeRecord(e,S,v)}for(const[S,v]of Object.entries(u??{}))v===null?this.removeSpeedrunRecord(e,S):this.addSpeedrunRecord(e,S,v)}startSync(){return{...this.factionHistoryUnsynced}}endSync(e){for(const[t,s]of Object.entries(e))this.factionHistoryUnsynced[t]==s&&delete this.factionHistoryUnsynced[t]}addSolveTimeRecord(e,t,s){this.getSolveTimeLeaderboard(t).insert({teamId:e,solveTime:s},!1)}addSpeedrunRecord(e,t,s){const a=this.getSpeedrunLeaderboard(t),{oldIndex:n,newIndex:o}=a.insert({teamId:e,speedrunTime:s},!0);this.broadcastSpeedrunLeaderboardUpdates(t,o,n===null?a.sortedList.length:n+1,{speedrunRecordsToAdd:[{teamData:this.server.getTeamController(e).getTeamSummaryState(),speedrunTime:s}]})}removeSpeedrunRecord(e,t){const s=this.getSpeedrunLeaderboard(t),a=s.remove(e);if(a===null)return;const{oldIndex:n}=a,o=s.sortedList[it-1];this.broadcastSpeedrunLeaderboardUpdates(t,n,s.sortedList.length,{speedrunRecordsToAdd:o===void 0?void 0:[{teamData:this.server.getTeamController(o.teamId).getTeamSummaryState(),speedrunTime:o.speedrunTime}],speedrunRecordsToRemove:[e]})}hideTeam(e){const t=this.server.getTeamController(e);this.handleTeamUpdates(e,{factionScoreChanges:Object.fromEntries(Object.entries(t.factionScoreContributions).map(([s,a])=>[s,-a])),updateFactionHistory:!0,solvesToDelete:[...t.solveTimes.keys()],unlocksToDelete:[...t.unlockTimes.keys()],solveTimes:Object.fromEntries(Array.from(t.solveTimes.keys(),s=>[s,null])),speedrunTimes:Object.fromEntries(Array.from(t.speedrunTimes.keys(),s=>[s,null])),forceIfHidden:!0})}unhideTeam(e){const t=this.server.getTeamController(e);this.handleTeamUpdates(e,{factionScoreChanges:t.factionScoreContributions,updateFactionHistory:!0,solvesToAdd:[...t.solveTimes.keys()],unlocksToAdd:[...t.unlockTimes.keys()],solveTimes:Object.fromEntries(t.solveTimes.entries()),speedrunTimes:Object.fromEntries(t.speedrunTimes.entries()),forceIfHidden:!0})}broadcastSpeedrunLeaderboardUpdates(e,t,s,a){const n=this.getSpeedrunLeaderboard(e),o=t<it,l=o?0:t,i=o?n.sortedList.length:Math.min(s,n.sortedList.length);for(let c=l;c<i;c++){const{teamId:u}=n.sortedList[c];this.server.getTeamController(u).getBattleController(e).broadcastTeamSpeedrunLeaderboardSummaryGlobalUpdate({type:z.TEAM_SPEEDRUN_LEADERBOARD_SUMMARY_UPDATE_STATE,speedrunRank:c,...o?a:void 0})}}handleTeamSummaryUpdates(e){for(const[t,s]of Object.entries(this.speedrunLeaderboards)){const a={};for(const{teamId:n}of s.sortedList.slice(0,it)){const o=e[n];if(o===void 0)continue;const l=Rn(o);Object.keys(l).length!==0&&(a[n]=l)}if(Object.keys(a).length!==0)for(const n of this.server.teamControllers.values())n.getBattleController(t).broadcastTeamSpeedrunLeaderboardSummaryGlobalUpdate({type:z.TEAM_SPEEDRUN_LEADERBOARD_SUMMARY_UPDATE_STATE,teamNameDisplayUpds:a})}}}class Xi{constructor(e){A(this,"server");A(this,"cursorGroups");this.server=e,this.cursorGroups=new Map}getTeamCursorGroups(e){const t=this.cursorGroups.get(e);if(t!==void 0)return t;const s=new Map;return this.cursorGroups.set(e,s),s}getCursorGroup(e,t){const s=this.getTeamCursorGroups(e),a=s.get(t);if(a!==void 0)return a;const n=new Zi;return s.set(t,n),n}getConnCursorGroup(e){const{teamId:t,cursorGroupName:s}=e;return t===void 0||s===void 0?null:this.getCursorGroup(t,s)}removeConnFromGroup(e){this.broadcastEvent(e,{type:Je.REMOVE});const{teamId:t,cursorGroupName:s}=e;if(t===void 0||s===void 0)return;const a=this.cursorGroups.get(t);if(a===void 0){console.error("expect team cursor group to exist");return}const n=a.get(s);if(n===void 0){console.error("expect cursor group to exist");return}n.conns.delete(e.connId),n.conns.size===0&&a.delete(s),a.size===0&&this.cursorGroups.delete(t),delete e.cursorGroupName}addConnToGroup(e,t){this.removeConnFromGroup(e);const{teamId:s}=e;s!==void 0&&(this.getCursorGroup(s,t).conns.set(e.connId,e),e.cursorGroupName=t)}async broadcastEvent(e,t){if(e.cursorGroupName===void 0)return;const s=this.getConnCursorGroup(e);if(s===null||(s.addEvent(e,t),s.locked))return;s.locked=!0,await new Promise(n=>setTimeout(n,0));const a=s.pullEvents();for(const n of s.conns.values()){const o=a.filter(({connId:l})=>n.connId!==l);o.length&&this.server.sendResp(n,{type:ue.CURSOR_EVENT,events:o})}s.locked=!1}}class Zi{constructor(){A(this,"conns");A(this,"queuedMoves");A(this,"queuedEvents");A(this,"locked");this.conns=new Map,this.queuedMoves=new Map,this.queuedEvents=[],this.locked=!1}addEvent({connId:e},t){t.type==Je.MOVE?this.queuedMoves.set(e,t):this.queuedEvents.push([e,t])}pullEvents(){const e=[...this.queuedMoves.entries(),...this.queuedEvents];return this.queuedMoves.clear(),this.queuedEvents.length=0,e.map(([t,s])=>({connId:t,event:s}))}}const qi=r=>{if(typeof r!="object"||typeof r.type!="string")return null;switch(r.type){case Je.REMOVE:return r;case Je.MOVE:case Je.CLICK:{const{rX:e,rY:t}=r;return typeof e!="number"||typeof t!="number"?null:r}}return null};class $i{constructor(e,t,s,a,n){A(this,"gameServerId");A(this,"cardsDB");A(this,"puzzlesDB");A(this,"masteriesDB");A(this,"keyframes");A(this,"opts");A(this,"onReadyCallbacks");A(this,"maxGuessesPerPuzzle");A(this,"huntStartTime");A(this,"huntEndTime");A(this,"backend");A(this,"numActiveConns");A(this,"teamConns");A(this,"teamControllers");A(this,"gameRoomsController");A(this,"pvpLobbyController");A(this,"statsController");A(this,"cursorsController");A(this,"dirtyStateTracker");A(this,"bigBoardStateTracker");A(this,"teamListStateTracker");A(this,"teamMetricsTracker");A(this,"fastSyncMetrics");A(this,"slowSyncMetrics");A(this,"checkAnswerMetrics");A(this,"cursorEventsMetrics");A(this,"numAuthsMetrics");A(this,"numRequestsMetrics");A(this,"metricsDumpTracking");A(this,"subscriptions");A(this,"teamListSubscriptions");A(this,"factionHistorySubscriptions");A(this,"serverHealthSubscriptions");A(this,"bigBoardSubscriptions");A(this,"isInitPending");A(this,"isReady");A(this,"isStopped");A(this,"queuedTeamInits");A(this,"isTeamInitInFlight");A(this,"nextConnId");A(this,"nextRoomMemberId");A(this,"nextGameRoomId");A(this,"nextAnswerSubmissionId");A(this,"syncThrottle");A(this,"slowSyncTracking");A(this,"numActivePeriodicTasksHandlers");A(this,"periodicSyncInterval");A(this,"periodicTasksTimer");A(this,"numPendingSubmissionTasks");A(this,"errata");A(this,"unclaimedHints");A(this,"jwtCache");A(this,"config");this.gameServerId="__UNINITIALIZED__",this.maxGuessesPerPuzzle=0,this.huntStartTime=0,this.huntEndTime=0,this.puzzlesDB=e,this.cardsDB=t,this.masteriesDB=s,this.keyframes=a,this.opts=n,this.onReadyCallbacks=[],this.opts.dumpBackendRequests,this.backend=new Kn({backend:this.opts.backend,dumpBackendRequests:this.opts.dumpBackendRequests}),this.numActiveConns=0,this.teamConns=new Map,this.teamControllers=new Map,this.gameRoomsController=new Vi(this),this.pvpLobbyController=new jn(this),this.statsController=new ji(this),this.cursorsController=new Xi(this),this.dirtyStateTracker=new vn,this.bigBoardStateTracker=new Cn,this.teamListStateTracker=new Nn,this.teamMetricsTracker=new In(this),this.fastSyncMetrics=new be(Ne),this.slowSyncMetrics=new be(Ne),this.checkAnswerMetrics=new be(Ne),this.cursorEventsMetrics=new be(Pn),this.numAuthsMetrics=new be(Ne),this.numRequestsMetrics=new be(Ne),this.metricsDumpTracking={lastDumpTime:0,lastUserTime:0,lastSystemTime:0,userTimeUsage:0,systemTimeUsage:0},this.subscriptions=new Map,this.teamListSubscriptions=new Map,this.factionHistorySubscriptions=new Map,this.serverHealthSubscriptions=new Map,this.bigBoardSubscriptions=new Map,this.isInitPending=!1,this.isReady=!1,this.isStopped=!1,this.queuedTeamInits=new Set,this.isTeamInitInFlight=!1,this.nextConnId=0,this.nextRoomMemberId=0,this.nextGameRoomId=0,this.nextAnswerSubmissionId=0,this.syncThrottle={numSyncsInFlight:0,queue:[]},this.slowSyncTracking={isDownloadInFlight:!1,decksAndMasteryTreesSyncController:new Fi(this),checkpointsSyncController:new Ki(this),miscTeamStateSyncController:new Hi(this),notifsNextIndex:0},this.numActivePeriodicTasksHandlers=0,this.periodicSyncInterval=this.opts.periodicSyncInterval??3e3,this.periodicTasksTimer=setInterval(()=>{this.runPeriodicTasks()},this.periodicSyncInterval),this.numPendingSubmissionTasks=0,this.errata={},this.unclaimedHints=0,this.jwtCache=new Map,this.config={completedRoomsSyncLimit:10,activeRoomsSyncLimit:10,decksAndMasteryTreesTeamsSyncLimit:10,checkpointsSyncLimit:10,miscTeamStateTeamsSyncLimit:10,syncThrottleParallelism:2,slowSyncThrottle:{[de.FAST]:0,[de.MISC]:0,[de.MASTERY_TREE]:0,[de.DECK]:0,[de.ROOM]:0,[de.CHECKPOINTS]:0,[de.ANSWER]:0}}}teardown(){this.periodicTasksTimer!==void 0&&clearInterval(this.periodicTasksTimer);for(const e of this.teamConns.values())for(const t of e.values())t.client.close();this.isStopped=!0}genConnId(){const e=this.nextConnId;return this.nextConnId++,`${e}`}genRoomMemberId(){const e=this.nextRoomMemberId;return this.nextRoomMemberId++,`${e}`}genGameRoomId(){const e=`${this.gameServerId}_room_${this.nextGameRoomId}`;return this.nextGameRoomId++,e}getTeamController(e){const t=this.teamControllers.get(e);if(t===void 0)throw new Error(`team ${e} not initialized yet`);return t}getBattleController(e,t){return this.getTeamController(e).getBattleController(t)}getDeckController(e,t){return this.getTeamController(e).getDeckController(t)}getMasteryTreeController(e){return this.getTeamController(e).masteryTreeController}isValidPuzzle(e,t){return this.puzzlesDB.puzzles.has(t)&&e.isPuzzleUnlocked(t)}isValidDeckSlot(e){return Number.isInteger(e)&&e>=0&&e<ir}async waitForReadyAsync(){this.isReady||await new Promise((e,t)=>{this.onReadyCallbacks.push(e)})}async tryInitAsync(){if(!this.isReady&&!this.isInitPending){this.isInitPending=!0;try{const e=await(async()=>{try{return await this.backend.getInitData()}catch(t){console.error(t)}})();if(e!==void 0){const{gameServerId:t,teams:s,factionHistory:a,maxGuessesPerPuzzle:n,huntStartTime:o,huntEndTime:l,notifsNextIndex:i,errata:c,unclaimedHints:u}=e;this.gameServerId=t,this.maxGuessesPerPuzzle=n,this.huntStartTime=o,this.huntEndTime=l,this.slowSyncTracking.notifsNextIndex=i,this.errata=c,this.unclaimedHints=u;for(const[f,g]of Object.entries(s))await this.createTeamAsync(f,g);Object.assign(this.statsController.factionHistory,a),this.isReady=!0;for(const f of this.onReadyCallbacks)f();this.onReadyCallbacks=[],console.log("Game server init complete.")}}finally{this.isInitPending=!1}}}async initAsync(){if(this.isReady||this.isInitPending)throw new Error("don't expect to request init more than once");if(this.opts.cursorsMode??!1){this.isReady=!0;return}await this.tryInitAsync(),await this.waitForReadyAsync()}addClient(e,t){this.numActiveConns++;const s={connId:t??this.genConnId(),client:e,isAdmin:!1,subscriptions:new Map};return{handleMsg:a=>{(async()=>{try{await this.handleMsg(s,a)}catch(n){console.error(n),this.sendErr(s,{errCode:B.SERVER_ERROR})}})()},removeClient:()=>{this.removeClient(s)}}}removeClient(e){this.numActiveConns--;const{connId:t,teamId:s,roomMember:a,subscriptions:n}=e;for(const o of n.keys())this.unsubscribeFromUpdates(e,o);if(this.cursorsController.removeConnFromGroup(e),a!==void 0&&this.kickRoomMember(a),s!==void 0){const o=this.teamConns.get(s);if(o===void 0)throw new Error("expect team conns to be defined for team");o.delete(t)}}async createTeamAsync(e,t){const s=new Zn(e,t,this);this.teamControllers.set(e,s),s.initStats(),s.initRooms(t.rooms),this.broadcastAdminGlobalUpdate({type:z.SERVER_ADD_TEAM,teamId:s.teamId,teamAdminData:s.getClientAdminData()}),this.handleTeamListAddTeam(e);const a=s.getClientBigBoardState();this.bigBoardStateTracker.addTeam(e,a),this.broadcastBigBoardGlobalUpdate({type:z.BIG_BOARD_UPDATE_STATE,addTeams:{[e]:a}}),await s.handleTeamUpdatesAsync({})}async triggerTeamInits(){if(!this.isTeamInitInFlight){this.isTeamInitInFlight=!0;for(const e of[...this.queuedTeamInits])try{await this.initTeamAsync(e)}catch(t){console.error(t)}this.isTeamInitInFlight=!1}}async initTeamAsync(e){var s;let t=null;try{t=await this.backend.getInitTeamData(e)}catch(a){console.error(a)}if(t!==null){if(this.queuedTeamInits.delete(e),await this.createTeamAsync(e,t),!(this.opts.cursorsMode??!1)){const a=this.getTeamController(e);for(let n=0;n<(((s=this.teamConns.get(e))==null?void 0:s.size)??0);n++)a.numAuthsMetrics.record(),this.teamMetricsTracker.recordAuth(e)}this.broadcastRespToTeam(e,{type:ue.AUTH_SUCCESS})}}prepareRoom(e){this.broadcastUpdates(e)}completeEnterRoom({reqId:e,conn:t,role:s},a){const{puzName:n}=a.engine,o=s??ae.GOD;this.sendResp(t,{type:ue.ENTERED_ROOM,reqId:e,params:{puzName:n,role:o}}),this.joinConnToRoom(t,a,o)}joinConnToRoom(e,t,s){const a={id:this.genRoomMemberId(),conn:e,room:t,role:s,enabled:!1};e.roomMember=a,t.members.set(a.id,a);const n=e.teamId;if(n===void 0)throw new Error("expect client to be authed");this.gameRoomsController.handleRoomMembersUpdate(n,t.hostPuzName),this.sendSystemStep(t,{type:V.SYSTEM_JOIN,teamId:n,roomMember:a,role:s})}kickRoomMember(e){const{id:t,room:s,conn:a}=e;s.members.delete(t),delete a.roomMember;const n=a.teamId;if(n===void 0)throw new Error("expect client to be authed");this.gameRoomsController.handleRoomMembersUpdate(n,s.hostPuzName)}tryGetBattleGroup(e){return this.puzzlesDB.tryGetBattleGroup(e)}getBattleGroup(e){return this.puzzlesDB.getBattleGroup(e)}getSubscriptions(e){switch(e.type){case H.SERVER:return this.subscriptions;case H.SERVER_HEALTH:return this.serverHealthSubscriptions;case H.BIG_BOARD:return this.bigBoardSubscriptions;case H.PVP:return this.pvpLobbyController.subscriptions;case H.TEAM_LIST:return this.teamListSubscriptions;case H.TEAM_MEMBERS:return this.getTeamController(e.teamId).membersSubscriptions;case H.FACTION_HISTORY:return this.factionHistorySubscriptions;case H.TEAM:return this.getTeamController(e.teamId).subscriptions;case H.TEAM_BATTLE:return this.getTeamController(e.teamId).getBattleController(e.puzName).subscriptions;case H.TEAM_FISH_PUZZLE:return this.getTeamController(e.teamId).getFishPuzzleController(e.puzName).subscriptions;case H.TEAM_DECKS:return this.getTeamController(e.teamId).decksSubscriptions;case H.TEAM_MASTERY_TREE:return this.getMasteryTreeController(e.teamId).subscriptions;case H.TEAM_PVP:return this.getTeamController(e.teamId).pvpController.subscriptions;case H.TEAM_SPEEDRUN_LEADERBOARD_SUMMARY:return this.getTeamController(e.teamId).getBattleController(e.puzName).speedrunLeaderboardSummarySubscriptions}}unsubscribeFromUpdates(e,t){const s=e.subscriptions.get(t);s!==void 0&&this.getSubscriptions(s).delete(e.connId)}validateSubscribeToUpdates(e,t){switch(t.type){case H.SERVER:case H.SERVER_HEALTH:case H.BIG_BOARD:return e.isAdmin?null:{errCode:B.PERMISSION_DENIED};case H.PVP:return null;case H.TEAM_LIST:return null;case H.TEAM_MEMBERS:{const{teamId:s}=t;return this.teamControllers.get(s)===void 0?{errCode:B.INVALID_TEAM}:null}case H.FACTION_HISTORY:return null;case H.TEAM:{const{teamId:s}=t;return e.teamId!==s&&!e.isAdmin?{errCode:B.PERMISSION_DENIED}:null}case H.TEAM_FISH_PUZZLE:{const{teamId:s,puzName:a}=t;return e.teamId!==s&&!e.isAdmin?{errCode:B.PERMISSION_DENIED}:this.getTeamController(s).isValidFishPuzzle(a)?null:{errCode:B.INVALID_PUZZLE}}case H.TEAM_BATTLE:{const{teamId:s,puzName:a}=t;return e.teamId!==s&&!e.isAdmin?{errCode:B.PERMISSION_DENIED}:this.getTeamController(s).isValidBattle(a)?null:{errCode:B.INVALID_PUZZLE}}case H.TEAM_DECKS:case H.TEAM_MASTERY_TREE:case H.TEAM_PVP:{const{teamId:s}=t;return e.teamId!==s&&!e.isAdmin?{errCode:B.PERMISSION_DENIED}:null}case H.TEAM_SPEEDRUN_LEADERBOARD_SUMMARY:{const{teamId:s,puzName:a}=t;return e.teamId!==s&&!e.isAdmin?{errCode:B.PERMISSION_DENIED}:this.getTeamController(s).isValidBattle(a)?null:{errCode:B.INVALID_PUZZLE}}}}subscribeToUpdates(e,t){const s=this.validateSubscribeToUpdates(e,t);if(s!==null)return this.sendErr(e,s);switch(this.unsubscribeFromUpdates(e,t.type),this.getSubscriptions(t).set(e.connId,e),e.subscriptions.set(t.type,t),t.type){case H.SERVER:{this.respGlobalUpdate(e,{type:z.SERVER_OVERRIDE_STATE,teamAdminData:Object.fromEntries(Array.from(this.teamControllers.values(),n=>[n.teamId,n.getClientAdminData()])),puzzles:Object.fromEntries(this.puzzlesDB.puzzles.entries()),battleGroups:Object.fromEntries(this.puzzlesDB.battleGroups.entries()),masteries:Object.fromEntries(Object.values(this.masteriesDB).map(({masteryId:n,displayName:o})=>[n,{displayName:o}])),unclaimedHints:this.unclaimedHints});break}case H.SERVER_HEALTH:{this.respGlobalUpdate(e,{type:z.SERVER_HEALTH_OVERRIDE_STATE,state:{slowSyncMetrics:this.slowSyncMetrics.getSummary(),fastSyncMetrics:this.fastSyncMetrics.getSummary(),checkAnswerMetrics:this.checkAnswerMetrics.getSummary(),numAuthsMetrics:this.numAuthsMetrics.getSummary(),numRequestsMetrics:this.numRequestsMetrics.getSummary(),teamNumAuthsMetrics:this.teamMetricsTracker.numAuthsSummaries,teamNumRequestsMetrics:this.teamMetricsTracker.numRequestsSummaries,fastSyncQueueLength:this.syncThrottle.queue.length,numActivePeriodicTasksHandlers:this.numActivePeriodicTasksHandlers,numPendingSubmissionTasks:this.numPendingSubmissionTasks,numCompletedRoomsToSync:this.gameRoomsController.slowSyncTracking.completedRoomsSyncController.roomsToSync.length,teamInitQueueLength:this.queuedTeamInits.size,numActiveConns:this.numActiveConns,userTimeUsage:this.metricsDumpTracking.userTimeUsage,systemTimeUsage:this.metricsDumpTracking.systemTimeUsage,dirtyState:this.dirtyStateTracker.dirtyState}});break}case H.BIG_BOARD:{this.respGlobalUpdate(e,{type:z.BIG_BOARD_OVERRIDE_STATE,state:{teams:Object.fromEntries(Array.from(this.teamControllers.values(),n=>[n.teamId,n.getClientBigBoardState()]))}});break}case H.PVP:{this.respGlobalUpdate(e,{type:z.PVP_OVERRIDE_STATE,state:{ring:this.pvpLobbyController.ring}});break}case H.TEAM_LIST:{this.sendRespRaw(e,this.teamListStateTracker.getSerializedOverrideGlobalUpdate());break}case H.TEAM_MEMBERS:{const{teamId:n}=t,o=this.getTeamController(n);this.respGlobalUpdate(e,{type:z.TEAM_MEMBERS_OVERRIDE_STATE,state:{teamId:n,members:o.members}});break}case H.FACTION_HISTORY:{this.respGlobalUpdate(e,{type:z.FACTION_HISTORY_OVERRIDE_STATE,factionHistory:this.statsController.factionHistory});break}case H.TEAM:{const{teamId:n}=t,o=this.getTeamController(n),{displayName:l,faction:i,factionScoreContributions:c,solveTimes:u,unlockTimes:f,cardUnlocks:g,speedrunTimes:k}=o,E=o.masteryTreeController.getEnabledMasteries();Object.fromEntries(Array.from(u.keys(),C=>[C,!0]));const S=Object.fromEntries([...this.puzzlesDB.puzzles.keys()].flatMap(C=>f.has(C)?[[C,o.getClientPuzzleState(C)]]:[])),v=Object.fromEntries([...this.puzzlesDB.battleGroups.entries()].flatMap(([C,O])=>f.has(C)?[[C,o.getClientBattleGroupState(C)]]:[])),_=Object.fromEntries(Object.values(this.masteriesDB).map(({masteryId:C,order:O,x:F,y:K,displayName:q,effectText:Y})=>{const te={masteryId:C,order:O,x:F,y:K,isEnabled:E.has(C)};return o.solveTimes.has(C)&&Object.assign(te,{displayName:q,effectText:Y}),[C,te]})),{hintsTotal:y,hintsUsed:N}=o.backendOwned;this.respGlobalUpdate(e,{type:z.TEAM_OVERRIDE_STATE,state:{teamId:n,displayName:l,faction:i,factionScoreContributions:c,factionScores:this.statsController.factionScores,puzzles:S,battleGroups:v,cardUnlocks:Object.fromEntries(Array.from(g.entries(),([C,O])=>[C,{cardName:C,puzName:O}])),masteries:_,hintsInfo:{numHintsTotal:y,numHintsUsed:N.length},huntEndTime:this.huntEndTime}});break}case H.TEAM_FISH_PUZZLE:{const{teamId:n,puzName:o}=t,i=this.getTeamController(n).getFishPuzzleController(o);this.respGlobalUpdate(e,{type:z.TEAM_FISH_PUZZLE_OVERRIDE_STATE,state:{teamId:n,puzName:o,numGuessesRemaining:i.getNumGuessesRemaining(),previousGuesses:i.recentSubmissions.map(({answer:c,timestamp:u})=>({submittedAnswer:c,timestamp:u}))}});break}case H.TEAM_BATTLE:{const{teamId:n,puzName:o}=t,l=this.getBattleController(n,o);this.getTeamController(n),this.respGlobalUpdate(e,{type:z.TEAM_BATTLE_OVERRIDE_STATE,state:{teamId:n,puzName:o,selectedPuzName:l.selectedPuzName,roomPuzName:l.getRoomPuzName(),selectedDeckSlot:l.selectedDeckSlot,lockedDeckSelection:l.getLockedDeckSelection(),activeGame:l.getClientActiveGameState(),errata:l.filterErrata(e),checkpointSummaries:l.summarizeCheckpoints()}});break}case H.TEAM_DECKS:{const{teamId:n}=t,{deckControllers:o}=this.getTeamController(n);this.respGlobalUpdate(e,{type:z.TEAM_DECKS_OVERRIDE_STATE,state:{teamId:n,decks:o.map(l=>l===null?null:l.deck)}});break}case H.TEAM_MASTERY_TREE:{const{teamId:n}=t,{masteryTree:o}=this.getMasteryTreeController(n);this.respGlobalUpdate(e,{type:z.TEAM_MASTERY_TREE_OVERRIDE_STATE,state:{teamId:n,masteryTree:o}});break}case H.TEAM_PVP:{const{teamId:n}=t,o=this.getTeamController(n).pvpController;this.respGlobalUpdate(e,{type:z.TEAM_PVP_OVERRIDE_STATE,state:{teamId:n,outgoingRequests:Object.fromEntries(o.outgoingRequests),incomingRequests:Object.fromEntries(o.incomingRequests),blockedTeams:Object.fromEntries(Array.from(o.blockedTeams,l=>[l,!0])),blockedByTeams:Object.fromEntries([...this.teamControllers.values()].filter(({pvpController:l})=>l.blockedTeams.has(n)).map(({teamId:l})=>[l,!0]))}});break}case H.TEAM_SPEEDRUN_LEADERBOARD_SUMMARY:{const{teamId:n,puzName:o}=t;this.getBattleController(n,o),this.respGlobalUpdate(e,{type:z.TEAM_SPEEDRUN_LEADERBOARD_SUMMARY_OVERRIDE_STATE,state:{teamId:n,puzName:o,speedrunRank:this.statsController.getSpeedrunRank(n,o)??void 0,speedrunLeaderboardSummary:this.statsController.getSpeedrunLeaderboardSummary(o)}});break}}}sendRespRaw(e,t){this.opts.dumpWsMessages&&console.log(`${e.connId} < ${JSON.stringify(JSON.parse(t),null,2)}`),e.client.send(t)}sendResp(e,t){this.sendRespRaw(e,JSON.stringify(t))}sendRespMultiple(e,t){const s=JSON.stringify(t);for(const a of e)this.sendRespRaw(a,s)}sendEnterRoomErr({reqId:e,conn:t},s){this.sendResp(t,{type:ue.ENTER_ROOM_ERROR,reqId:e,err:s})}sendErr(e,t){this.sendResp(e,{type:ue.ERROR,err:t})}respBadRequest(e){this.sendErr(e,{errCode:B.BAD_REQUEST})}checkIsAdmin(e){return e.isAdmin?!0:(this.sendErr(e,{errCode:B.PERMISSION_DENIED}),!1)}async handleMsg(e,t){if(this.isStopped){e.client.close();return}this.numRequestsMetrics.record();const s=JSON.parse(t.toString());if(typeof s!="object"||typeof s.type!="string")return this.respBadRequest(e);if(this.opts.dumpWsMessages&&console.log(`${e.connId} > ${JSON.stringify(s,null,2)}`),s.type===Q.AUTH){const{jwt:l}=s;if(typeof l!="string")return this.respBadRequest(e);this.numAuthsMetrics.record();const i=this.jwtCache.get(l)??this.opts.authInterface.verify(l);if(i===null){this.sendErr(e,{errCode:B.AUTH_ERROR});return}const{teamId:c,isAdmin:u=!1}=i;e.teamId=c,e.isAdmin=u;const f=this.teamConns.get(c);if(f===void 0){const g=new Map;g.set(e.connId,e),this.teamConns.set(c,g)}else f.set(e.connId,e);if(!(this.opts.cursorsMode??!1)){const g=this.teamControllers.get(c);if(g===void 0){if(this.queuedTeamInits.has(c))return;this.queuedTeamInits.add(c),await this.triggerTeamInits();return}this.teamMetricsTracker.recordAuth(c),g.numAuthsMetrics.record()}this.sendResp(e,{type:ue.AUTH_SUCCESS});return}const a=e.teamId;if(a===void 0){this.sendErr(e,{errCode:B.PERMISSION_DENIED}),e.client.close();return}switch(s.type){case Q.PING:{this.sendResp(e,{type:ue.PONG});return}case Q.SET_CURSOR_GROUP:{const{reqId:l,cursorGroupName:i}=s;if(!(i===null||typeof i=="string"))return this.respBadRequest(e);i===null?this.cursorsController.removeConnFromGroup(e):this.cursorsController.addConnToGroup(e,i),this.sendResp(e,{type:ue.SET_CURSOR_GROUP_ACK,reqId:l});return}case Q.CURSOR_EVENT:{const{event:l}=s;if(typeof l!="object")return this.respBadRequest(e);const i=qi(l);if(i===null)return this.respBadRequest(e);this.cursorsController.broadcastEvent(e,i),this.cursorEventsMetrics.record();return}}const n=this.teamControllers.get(a);if(n===void 0){this.sendErr(e,{errCode:B.PERMISSION_DENIED}),e.client.close();return}if(n.isInactive&&!e.isAdmin){this.sendErr(e,{errCode:B.TEAM_INACTIVE}),e.client.close();return}if(n.isTempBlocked&&!e.isAdmin){this.sendErr(e,{errCode:B.TEAM_TEMP_BLOCKED}),e.client.close();return}if(e.spectateTeamId!==void 0&&s.type!==Q.ENTER_ROOM&&s.type!==Q.SUBSCRIBE_TO_UPDATES){this.sendErr(e,{errCode:B.SPECTATE_ACTION});return}if(this.teamMetricsTracker.recordRequest(a),n.numRequestsMetrics.record(),!this.opts.parseWSReq(s)){this.sendErr(e,{errCode:B.BAD_REQUEST});return}await this.handleZodReq(e,s,n)}async handleZodReq(e,t,s){var a,n;switch(t.type){case Q.SET_FACTION:{const{faction:o}=t;s.handleSetFaction(e,o);break}case Q.ENTER_ROOM:{const{reqId:o,params:l}=t;if(e.roomMember!==void 0&&this.kickRoomMember(e.roomMember),l===null)break;const i={reqId:o,conn:e,role:l.role};if(l.spectateTeamId===void 0){s.handleEnterRoom(i,l);break}if(!e.isAdmin){this.sendEnterRoomErr(i,{errCode:B.PERMISSION_DENIED});break}const c=this.teamControllers.get(l.spectateTeamId??"");if(c===void 0){this.sendEnterRoomErr(i,{errCode:B.SPECTATE_INVALID});break}e.spectateTeamId=l.spectateTeamId,c.handleEnterRoom(i,l);break}case Q.STEP:{const o=e.roomMember;if(o===void 0){this.sendErr(e,{errCode:B.NO_ROOM});return}const{room:l}=o;l.tracker.handleModify(),this.handleStep(o,l,t.step),(n=(a=this.opts).afterStepBackdoor)==null||n.call(a,l);break}case Q.DECKBUILDING_STEP:{const{slot:o,deckUpd:l}=t;s.getDeckController(o).handleDeckbuildingStep(l);break}case Q.MASTERY_TREE_STEP:{const{step:o}=t;s.masteryTreeController.handleMasteryTreeStep(o);break}case Q.NEXT_BATTLE:{const o=e.roomMember;if(o===void 0){this.sendErr(e,{errCode:B.NO_ROOM});return}const{room:l}=o;for(const i of l.members.values())i.conn.spectateTeamId===void 0&&this.sendResp(i.conn,{type:ue.NEXT_BATTLE,roomId:l.roomId});break}case Q.SELECT_PUZZLE:{const{hostPuzName:o,selectedPuzName:l}=t;if(!s.isValidBattle(o)||!s.isValidBattle(l)){this.sendErr(e,{errCode:B.INVALID_PUZZLE});return}const i=s.getBattleController(o).selectPuzzle(l);i!==null&&this.sendErr(e,i);break}case Q.SELECT_DECK_FOR_BATTLE:{const{puzName:o,slot:l}=t;if(!s.isValidBattle(o)){this.sendErr(e,{errCode:B.INVALID_PUZZLE});return}if(!this.isValidDeckSlot(l)){this.sendErr(e,{errCode:B.DECK_SLOT_OUT_OF_BOUNDS});return}const i=s.getBattleController(o).selectDeck(l);i!==null&&this.sendErr(e,i);break}case Q.START_AI_BATTLE:{const{puzName:o,slot:l,restart:i,reuseDeck:c,devKnobs:u}=t;if(!s.isValidBattle(o)){this.sendErr(e,{errCode:B.INVALID_PUZZLE});return}if(l!==void 0&&!this.isValidDeckSlot(l)){this.sendErr(e,{errCode:B.DECK_SLOT_OUT_OF_BOUNDS});return}s.startAIBattle(e,o,l,i,c,e.isAdmin?u:void 0);break}case Q.RESTORE_CHECKPOINT:{const{puzName:o,slot:l}=t;if(!s.isValidBattle(o)){this.sendErr(e,{errCode:B.INVALID_PUZZLE});return}if(!this.isValidDeckSlot(l)){this.sendErr(e,{errCode:B.DECK_SLOT_OUT_OF_BOUNDS});return}s.getBattleController(o).restoreCheckpoint(e,l);break}case Q.RESIGN:{const{player:o,puzName:l}=t;if(!s.isValidBattle(l)){this.sendErr(e,{errCode:B.INVALID_PUZZLE});return}const i=s.getBattleController(l).resign();i!==null&&this.sendErr(e,i);break}case Q.PVP_CLAIM_TIME_VICTORY:{const o=s.pvpController.claimTimeVictory();o!==null&&this.sendErr(e,o);break}case Q.PVP_UNLOCK_DECK:{const o=s.pvpController.handleUnlockDeck(e);o!==null&&this.sendErr(e,o);break}case Q.PVP_MAKE_REQUEST:{const{targetTeamId:o,autoAccept:l}=t;if(l!==void 0&&!this.checkIsAdmin(e))break;const i=s.pvpController.handleMakePvPRequest(o,l);i!==null&&this.sendErr(e,i);break}case Q.PVP_CANCEL_REQUEST:{const{targetTeamId:o}=t,l=s.pvpController.handleCancelPvPRequest(e,o);l!==null&&this.sendErr(e,l);break}case Q.PVP_ACCEPT_REQUEST:{const{targetTeamId:o,devKnobs:l}=t,i=s.pvpController.acceptPvPRequest(o,e.isAdmin?l:void 0);i!==null&&this.sendErr(e,i);break}case Q.PVP_SET_IS_BLOCKED:{const{targetTeamId:o,isBlocked:l}=t,i=s.pvpController.setIsTeamBlocked(e,o,l);i!==null&&this.sendErr(e,i);break}case Q.PVP_ENTER_RING:{const o=s.pvpController.enterRing();o!==null&&this.sendErr(e,o);break}case Q.PVP_LEAVE_RING:{s.pvpController.leaveRing();break}case Q.VIEW_PUZZLE:{const{puzName:o}=t;if(!this.isValidPuzzle(s,o)){this.sendErr(e,{errCode:B.INVALID_PUZZLE});return}s.viewPuzzle(e,o);break}case Q.SUBMIT_ANSWER:{const{teamId:o,puzName:l,answer:i}=t,c=this.getTeamController(o);if(c.teamId!==o&&!e.isAdmin){this.sendErr(e,{errCode:B.PERMISSION_DENIED});return}if(!c.isValidFishPuzzle(l)){this.sendErr(e,{errCode:B.INVALID_PUZZLE});break}await c.getFishPuzzleController(l).handleSubmitAnswerAsync(e,i);break}case Q.MYOSB_REQUEST:{const{teamId:o,components:l}=t,i=this.getTeamController(o);if(i.teamId!==o&&!e.isAdmin){this.sendErr(e,{errCode:B.PERMISSION_DENIED});return}if(!i.isValidFishPuzzle(Vt)){this.sendErr(e,{errCode:B.INVALID_PUZZLE});break}await i.getFishPuzzleController(Vt).handleMyosbRequest(e,l);break}case Q.ADMIN_MODIFY:{if(!this.checkIsAdmin(e))break;for(const[o,l]of Object.entries(t.teams??{}))await this.getTeamController(o).adminModifyTeamAsync(l);t.config!==void 0&&Object.assign(this.config,t.config);break}case Q.SUBSCRIBE_TO_UPDATES:{this.subscribeToUpdates(e,t.scope);break}}}useUpdatesContext(e,t){var s;if(e.multicaster.updates.length!==0)throw new Error("updates leakage from a previous step or async event");try{t()}catch(a){const{gameState:n}=e.engine;throw console.error(`Error in room ${e.roomId} (team ${((s=n[h.P1].teamData)==null?void 0:s.teamId)??"unknown"}, puzzle ${n.puzName})`),a}finally{this.broadcastUpdates(e)}}handleStep(e,t,s){this.useUpdatesContext(t,()=>{t.engine.applyStep(e,s)})}sendSystemStep(e,t){this.useUpdatesContext(e,()=>{e.engine.applySystemStep(t)})}handleSystemUpdate(e,t){switch(t.type){case W.SYSTEM_ROOM_COMPLETE:{const{solvedTeamIds:s,cardUnlocks:a}=t;this.gameRoomsController.handleRoomCompleteAsync(e,s,a);break}}}broadcastUpdates(e){const t=e.multicaster.readOutUpdates();if(t.length!==0){for(const[s,a]of e.members){const n=[];for(const o of t){const{upd:l}=o;if(l.type===W.SYSTEM_ENABLE_MEMBER){a.enabled=!0;continue}a.enabled&&(()=>{switch(o.type){case Ce.SYSTEM:return!1;case Ce.ROOM_MEMBER_ID:return s===o.roomMemberId;case Ce.BROADCAST:return!0;case Ce.ROLE:return a.role===o.role;case Ce.ROLE_FILTER:return o.pred(a.role)}})()&&n.push(l)}n.length>0&&this.sendResp(a.conn,{type:ue.UPDATES,updates:n})}for(const s of t)s.type===Ce.SYSTEM&&this.handleSystemUpdate(e,s.upd)}}respGlobalUpdate(e,t){this.sendResp(e,{type:ue.GLOBAL_UPDATE,upd:t})}broadcastGlobalUpdate(e,t){const s=this.getSubscriptions(e),a={type:ue.GLOBAL_UPDATE,upd:t};this.sendRespMultiple(s.values(),a)}broadcastAdminGlobalUpdate(e){return this.broadcastGlobalUpdate({type:H.SERVER},e)}broadcastServerHealthGlobalUpdate(e){return this.broadcastGlobalUpdate({type:H.SERVER_HEALTH},e)}handleTeamSummaryUpdate(e,t){this.teamListStateTracker.updateTeam(e,t)}handleTeamListAddTeam(e){const s=this.getTeamController(e).getTeamSummaryState();this.teamListStateTracker.addTeam(e,s),this.broadcastTeamListGlobalUpdate({type:z.TEAM_LIST_UPDATE_STATE,addTeams:{[e]:s}})}handleTeamListRemoveTeam(e){this.teamListStateTracker.removeTeam(e),this.broadcastTeamListGlobalUpdate({type:z.TEAM_LIST_UPDATE_STATE,removeTeams:{[e]:!0}})}broadcastTeamListGlobalUpdate(e){return this.broadcastGlobalUpdate({type:H.TEAM_LIST},e)}broadcastAndCommitTeamSummaryUpdates(){const{pendingUpds:e}=this.teamListStateTracker;Object.keys(e).length<=0||(this.broadcastTeamListGlobalUpdate({type:z.TEAM_LIST_UPDATE_STATE,updTeams:e}),this.statsController.handleTeamSummaryUpdates(e),this.teamListStateTracker.commitUpds())}broadcastBigBoardGlobalUpdate(e){return this.broadcastGlobalUpdate({type:H.BIG_BOARD},e)}broadcastRespToTeam(e,t){const s=this.teamConns.get(e);s!==void 0&&this.sendRespMultiple(s.values(),t)}broadcastNotifToTeam(e,t){this.broadcastRespToTeam(e,{type:ue.NOTIFICATION,notif:t})}processFastSyncQueue(){for(;this.syncThrottle.numSyncsInFlight<this.config.syncThrottleParallelism;){const e=this.syncThrottle.queue.shift();if(e===void 0)break;this.syncThrottle.numSyncsInFlight++,e()}}async waitSyncThrottleAsync(){await new Promise((e,t)=>{this.syncThrottle.queue.push(e),this.processFastSyncQueue()})}signalSyncThrotleAsync(){this.syncThrottle.numSyncsInFlight--,this.processFastSyncQueue()}async runWithSyncThrottleAsync(e){let t=!1;try{return await this.waitSyncThrottleAsync(),t=!0,await e()}finally{t&&this.signalSyncThrotleAsync()}}async syncDataThrottledAsync(e){return await this.runWithSyncThrottleAsync(async()=>await this.backend.syncData(e))}async triggerSlowSyncDownloadAsync(){var l,i;if(this.slowSyncTracking.isDownloadInFlight)return;const e=this.statsController.startSync(),t={factionHistory:e,notifsStartIndex:this.slowSyncTracking.notifsNextIndex};this.slowSyncTracking.isDownloadInFlight=!0;const s=await(async()=>{try{return await this.syncDataThrottledAsync(t)}catch(c){console.error(c)}finally{this.slowSyncTracking.isDownloadInFlight=!1}})();if(s===void 0)return;const{notifs:a,notifsNextIndex:n}=s;this.statsController.endSync(e),n!==void 0&&(this.slowSyncTracking.notifsNextIndex=n);for(const c of a??[])try{switch(c.type){case Dt.HINT_ANSWERED:{const{teamId:u,puzName:f}=c;this.broadcastNotifToTeam(u,{type:tt.HINT_ANSWERED,puzName:f});break}case Dt.TEAM_MEMBERS:{const{teamId:u,members:f}=c;(l=this.teamControllers.get(u))==null||l.handleSetMembers(f);break}case Dt.ERRATUM:{const{erratumId:u,puzzle:f,published:g}=c,k=g&&!((i=this.errata[u])!=null&&i.published);this.errata[u]=c;for(const[E,S]of this.teamControllers){k&&(!f||S.unlockTimes.has(f))&&this.broadcastNotifToTeam(E,{type:tt.ERRATUM});for(const[v,_]of S.battleControllers)_.broadcastErrataGlobalUpdate({})}break}}}catch(u){console.error(u)}s.unclaimedHints!==void 0&&s.unclaimedHints!==this.unclaimedHints&&(this.unclaimedHints=s.unclaimedHints,this.broadcastAdminGlobalUpdate({type:z.SERVER_UNCLAIMED_HINTS,unclaimedHints:s.unclaimedHints}));const{teams:o}=s;for(const[c,u]of Object.entries(o??{}))try{const f=this.teamControllers.get(c);if(f===void 0)continue;const{hintsTotal:g,hintsUsed:k}=u;(f.backendOwned.hintsTotal!==g||f.backendOwned.hintsUsed.length!==k.length)&&(f.backendOwned=u,f.broadcastTeamGlobalUpdate({type:z.TEAM_UPDATE_STATE,hintsInfo:{numHintsTotal:g,numHintsUsed:k.length}}));const E=f.getHintsUsedMap();this.bigBoardStateTracker.updateTeam(c,{numHintsTotal:g,unlocks:Object.fromEntries(Object.entries(E).map(([v,_])=>[v,{numHintsUsed:_}]))});const{extraGuesses:S}=u;for(const[v,_]of Object.entries(S??{})){const y=f.getFishPuzzleController(v);y.numExtraGuesses!==_&&(y.numExtraGuesses=_,y.handleUpdateNumGuessesRemaining())}}catch(f){console.error(f)}for(const c of this.teamControllers.values())try{const u=o?o[c.teamId]:void 0,f=u?u.extraGuesses:{};for(const g of c.fishPuzzleControllers.values()){const k=f[g.puzName]??0;g.numExtraGuesses!==k&&(g.numExtraGuesses=k,g.handleUpdateNumGuessesRemaining())}}catch(u){console.error(u)}}async triggerSlowSyncUpload(){await this.gameRoomsController.triggerSlowSyncAsync(),await this.slowSyncTracking.decksAndMasteryTreesSyncController.syncLoopController.triggerLoopAsync(),await this.slowSyncTracking.checkpointsSyncController.syncLoopController.triggerLoopAsync(),await this.slowSyncTracking.miscTeamStateSyncController.syncLoopController.triggerLoopAsync()}async runPeriodicSyncTasks(){for(const[e,t]of this.teamControllers)try{await t.fastSyncTracking.syncLoopController.triggerLoopAsync()}catch(s){console.error(s)}try{await this.triggerSlowSyncUpload()}catch(e){console.error(e)}try{await this.triggerSlowSyncDownloadAsync()}catch(e){console.error(e)}}runPeriodicTasks(){(async()=>{var e,t,s,a,n,o;if(!this.isReady){await this.tryInitAsync();return}try{const l=Date.now(),{lastDumpTime:i,lastUserTime:c,lastSystemTime:u}=this.metricsDumpTracking;if(l>i+(this.opts.metricsDumpInterval??30*1e3)){const{user:f,system:g}=((t=(e=this.opts).getCpuUsage)==null?void 0:t.call(e))??{user:0,system:0},k=(f-c)/1e3/(l-i),E=(g-u)/1e3/(l-i);this.metricsDumpTracking={lastDumpTime:l,lastUserTime:f,lastSystemTime:g,userTimeUsage:k,systemTimeUsage:E},(a=(s=this.opts).logMetrics)==null||a.call(s,`[${l}] Metrics: ${JSON.stringify([0,this.fastSyncMetrics.getSummary().totNumEvents,this.slowSyncMetrics.getSummary().totNumEvents,this.checkAnswerMetrics.getSummary().totNumEvents,this.numAuthsMetrics.getSummary().totNumEvents,this.numRequestsMetrics.getSummary().totNumEvents,this.syncThrottle.queue.length,this.numActivePeriodicTasksHandlers,this.numPendingSubmissionTasks,this.gameRoomsController.slowSyncTracking.completedRoomsSyncController.roomsToSync.length,this.queuedTeamInits.size,f,g])}`)}}catch(l){console.error(l)}this.numActivePeriodicTasksHandlers++;try{this.cursorEventsMetrics.prevNumEvents>0&&((o=(n=this.opts).logCursorsMetrics)==null||o.call(n,`[${new Date().toLocaleString()}] Cursor events: ${this.cursorEventsMetrics.getSummaryString()}`))}catch(l){console.error(l)}if(!(this.opts.cursorsMode??!1)){try{this.broadcastServerHealthGlobalUpdate({type:z.SERVER_HEALTH_UPDATE_STATE,slowSyncMetrics:this.slowSyncMetrics.getSummary(),fastSyncMetrics:this.fastSyncMetrics.getSummary(),checkAnswerMetrics:this.checkAnswerMetrics.getSummary(),numAuthsMetrics:this.numAuthsMetrics.getSummary(),numRequestsMetrics:this.numRequestsMetrics.getSummary(),...this.teamMetricsTracker.getAndCommitUpds(),fastSyncQueueLength:this.syncThrottle.queue.length,numActivePeriodicTasksHandlers:this.numActivePeriodicTasksHandlers,numPendingSubmissionTasks:this.numPendingSubmissionTasks,numCompletedRoomsToSync:this.gameRoomsController.slowSyncTracking.completedRoomsSyncController.roomsToSync.length,teamInitQueueLength:this.queuedTeamInits.size,numActiveConns:this.numActiveConns,userTimeUsage:this.metricsDumpTracking.userTimeUsage,systemTimeUsage:this.metricsDumpTracking.systemTimeUsage,dirtyStateUpd:this.dirtyStateTracker.pendingDirtyStateUpd}),this.dirtyStateTracker.commitUpds()}catch(l){console.error(l)}try{this.broadcastAndCommitTeamSummaryUpdates()}catch(l){console.error(l)}try{const{pendingUpds:l}=this.bigBoardStateTracker;Object.keys(l).length>0&&(this.broadcastBigBoardGlobalUpdate({type:z.BIG_BOARD_UPDATE_STATE,updTeams:l}),this.bigBoardStateTracker.commitUpds())}catch(l){console.error(l)}await this.runPeriodicSyncTasks();try{for(const l of this.teamControllers.values())l.pvpController.unlockDeckIfUnneeded()}catch(l){console.error(l)}}this.numActivePeriodicTasksHandlers--})()}recordSlowSyncPacket(){this.slowSyncMetrics.record()}}class Ji{verify(e){return JSON.parse(e)}}const or="__game_mockdb";let We,Wt=!1;const Qi=async(r,e)=>{if(e??(e=!1),We===void 0||e&&!Wt){Ke.config({driver:Ke.INDEXEDDB}),e&&(Wt=!0,await Ke.clear());const t=We,s=new On(_n),a=Dn(Ln),n=Un(Bn);We=new $i(s,a,n,Fn,{backend:new Mn(s,a,n,await Ke.getItem(or),async o=>{await Ke.setItem(or,o)},!e),dumpWsMessages:!1,dumpBackendRequests:r.dumpBackendRequests??!1,periodicSyncInterval:200,authInterface:new Ji,parseWSReq:o=>!0}),await We.initAsync(),t!==void 0&&t.teardown(),e&&(Wt=!1)}return We},au=async r=>new xn(await Qi(Gn));export{au as default};
//# sourceMappingURL=makeClientMockServerInterface-18b9e61b.js.map
